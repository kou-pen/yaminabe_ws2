
yaminabe_product2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b6c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003d30  08003d30  00013d30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d48  08003d48  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003d48  08003d48  00013d48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003d50  08003d50  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d50  08003d50  00013d50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d54  08003d54  00013d54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003d58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000164  2000000c  08003d64  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000170  08003d64  00020170  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f528  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f2a  00000000  00000000  0002f564  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000db0  00000000  00000000  00031490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cf8  00000000  00000000  00032240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002185b  00000000  00000000  00032f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f770  00000000  00000000  00054793  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf8af  00000000  00000000  00063f03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001337b2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a0c  00000000  00000000  00133804  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003d18 	.word	0x08003d18

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08003d18 	.word	0x08003d18

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050c:	f000 fd7c 	bl	8001008 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000510:	f000 f840 	bl	8000594 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000514:	f000 faa4 	bl	8000a60 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000518:	f000 fa78 	bl	8000a0c <MX_USART2_UART_Init>
  MX_CAN2_Init();
 800051c:	f000 f8ac 	bl	8000678 <MX_CAN2_Init>
  MX_TIM1_Init();
 8000520:	f000 f8e2 	bl	80006e8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000524:	f000 f998 	bl	8000858 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000528:	f000 fa22 	bl	8000970 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 800052c:	2100      	movs	r1, #0
 800052e:	4815      	ldr	r0, [pc, #84]	; (8000584 <main+0x7c>)
 8000530:	f002 fad4 	bl	8002adc <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_WritePin(GPIOC,PSB1_Pin,GPIO_PIN_SET);
 8000534:	2201      	movs	r2, #1
 8000536:	2102      	movs	r1, #2
 8000538:	4813      	ldr	r0, [pc, #76]	; (8000588 <main+0x80>)
 800053a:	f001 fbd5 	bl	8001ce8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB,BRK1_Pin,GPIO_PIN_RESET);
 800053e:	2200      	movs	r2, #0
 8000540:	2101      	movs	r1, #1
 8000542:	4812      	ldr	r0, [pc, #72]	; (800058c <main+0x84>)
 8000544:	f001 fbd0 	bl	8001ce8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA,DIRECTION1_Pin,GPIO_PIN_SET);
 8000548:	2201      	movs	r2, #1
 800054a:	2110      	movs	r1, #16
 800054c:	4810      	ldr	r0, [pc, #64]	; (8000590 <main+0x88>)
 800054e:	f001 fbcb 	bl	8001ce8 <HAL_GPIO_WritePin>
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,60000);
 8000552:	4b0c      	ldr	r3, [pc, #48]	; (8000584 <main+0x7c>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	f64e 2260 	movw	r2, #60000	; 0xea60
 800055a:	635a      	str	r2, [r3, #52]	; 0x34
	  HAL_Delay(1000);
 800055c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000560:	f000 fdc4 	bl	80010ec <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA,DIRECTION1_Pin,GPIO_PIN_RESET);
 8000564:	2200      	movs	r2, #0
 8000566:	2110      	movs	r1, #16
 8000568:	4809      	ldr	r0, [pc, #36]	; (8000590 <main+0x88>)
 800056a:	f001 fbbd 	bl	8001ce8 <HAL_GPIO_WritePin>
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,30000);
 800056e:	4b05      	ldr	r3, [pc, #20]	; (8000584 <main+0x7c>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	f247 5230 	movw	r2, #30000	; 0x7530
 8000576:	635a      	str	r2, [r3, #52]	; 0x34
	  HAL_Delay(1000);
 8000578:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800057c:	f000 fdb6 	bl	80010ec <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC,PSB1_Pin,GPIO_PIN_SET);
 8000580:	e7d8      	b.n	8000534 <main+0x2c>
 8000582:	bf00      	nop
 8000584:	20000050 	.word	0x20000050
 8000588:	40020800 	.word	0x40020800
 800058c:	40020400 	.word	0x40020400
 8000590:	40020000 	.word	0x40020000

08000594 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b094      	sub	sp, #80	; 0x50
 8000598:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059a:	f107 031c 	add.w	r3, r7, #28
 800059e:	2234      	movs	r2, #52	; 0x34
 80005a0:	2100      	movs	r1, #0
 80005a2:	4618      	mov	r0, r3
 80005a4:	f003 fbb0 	bl	8003d08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a8:	f107 0308 	add.w	r3, r7, #8
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
 80005b0:	605a      	str	r2, [r3, #4]
 80005b2:	609a      	str	r2, [r3, #8]
 80005b4:	60da      	str	r2, [r3, #12]
 80005b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b8:	2300      	movs	r3, #0
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	4b2c      	ldr	r3, [pc, #176]	; (8000670 <SystemClock_Config+0xdc>)
 80005be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c0:	4a2b      	ldr	r2, [pc, #172]	; (8000670 <SystemClock_Config+0xdc>)
 80005c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005c6:	6413      	str	r3, [r2, #64]	; 0x40
 80005c8:	4b29      	ldr	r3, [pc, #164]	; (8000670 <SystemClock_Config+0xdc>)
 80005ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005d0:	607b      	str	r3, [r7, #4]
 80005d2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d4:	2300      	movs	r3, #0
 80005d6:	603b      	str	r3, [r7, #0]
 80005d8:	4b26      	ldr	r3, [pc, #152]	; (8000674 <SystemClock_Config+0xe0>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a25      	ldr	r2, [pc, #148]	; (8000674 <SystemClock_Config+0xe0>)
 80005de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005e2:	6013      	str	r3, [r2, #0]
 80005e4:	4b23      	ldr	r3, [pc, #140]	; (8000674 <SystemClock_Config+0xe0>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005ec:	603b      	str	r3, [r7, #0]
 80005ee:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005f0:	2302      	movs	r3, #2
 80005f2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005f4:	2301      	movs	r3, #1
 80005f6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005f8:	2310      	movs	r3, #16
 80005fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005fc:	2302      	movs	r3, #2
 80005fe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000600:	2300      	movs	r3, #0
 8000602:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000604:	2308      	movs	r3, #8
 8000606:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000608:	23b4      	movs	r3, #180	; 0xb4
 800060a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800060c:	2302      	movs	r3, #2
 800060e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000610:	2302      	movs	r3, #2
 8000612:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000614:	2302      	movs	r3, #2
 8000616:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000618:	f107 031c 	add.w	r3, r7, #28
 800061c:	4618      	mov	r0, r3
 800061e:	f001 ff17 	bl	8002450 <HAL_RCC_OscConfig>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000628:	f000 fad8 	bl	8000bdc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800062c:	f001 fb76 	bl	8001d1c <HAL_PWREx_EnableOverDrive>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000636:	f000 fad1 	bl	8000bdc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800063a:	230f      	movs	r3, #15
 800063c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800063e:	2302      	movs	r3, #2
 8000640:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000642:	2300      	movs	r3, #0
 8000644:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000646:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800064a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800064c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000650:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000652:	f107 0308 	add.w	r3, r7, #8
 8000656:	2105      	movs	r1, #5
 8000658:	4618      	mov	r0, r3
 800065a:	f001 fbaf 	bl	8001dbc <HAL_RCC_ClockConfig>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000664:	f000 faba 	bl	8000bdc <Error_Handler>
  }
}
 8000668:	bf00      	nop
 800066a:	3750      	adds	r7, #80	; 0x50
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	40023800 	.word	0x40023800
 8000674:	40007000 	.word	0x40007000

08000678 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 800067c:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <MX_CAN2_Init+0x68>)
 800067e:	4a19      	ldr	r2, [pc, #100]	; (80006e4 <MX_CAN2_Init+0x6c>)
 8000680:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 9;
 8000682:	4b17      	ldr	r3, [pc, #92]	; (80006e0 <MX_CAN2_Init+0x68>)
 8000684:	2209      	movs	r2, #9
 8000686:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000688:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <MX_CAN2_Init+0x68>)
 800068a:	2200      	movs	r2, #0
 800068c:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_4TQ;
 800068e:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <MX_CAN2_Init+0x68>)
 8000690:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 8000694:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_4TQ;
 8000696:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <MX_CAN2_Init+0x68>)
 8000698:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800069c:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_5TQ;
 800069e:	4b10      	ldr	r3, [pc, #64]	; (80006e0 <MX_CAN2_Init+0x68>)
 80006a0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80006a4:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80006a6:	4b0e      	ldr	r3, [pc, #56]	; (80006e0 <MX_CAN2_Init+0x68>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80006ac:	4b0c      	ldr	r3, [pc, #48]	; (80006e0 <MX_CAN2_Init+0x68>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80006b2:	4b0b      	ldr	r3, [pc, #44]	; (80006e0 <MX_CAN2_Init+0x68>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80006b8:	4b09      	ldr	r3, [pc, #36]	; (80006e0 <MX_CAN2_Init+0x68>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80006be:	4b08      	ldr	r3, [pc, #32]	; (80006e0 <MX_CAN2_Init+0x68>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80006c4:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <MX_CAN2_Init+0x68>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80006ca:	4805      	ldr	r0, [pc, #20]	; (80006e0 <MX_CAN2_Init+0x68>)
 80006cc:	f000 fd32 	bl	8001134 <HAL_CAN_Init>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <MX_CAN2_Init+0x62>
  {
    Error_Handler();
 80006d6:	f000 fa81 	bl	8000bdc <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80006da:	bf00      	nop
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	20000028 	.word	0x20000028
 80006e4:	40006800 	.word	0x40006800

080006e8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b096      	sub	sp, #88	; 0x58
 80006ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006ee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
 80006f6:	605a      	str	r2, [r3, #4]
 80006f8:	609a      	str	r2, [r3, #8]
 80006fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006fc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000700:	2200      	movs	r2, #0
 8000702:	601a      	str	r2, [r3, #0]
 8000704:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000706:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]
 800070e:	605a      	str	r2, [r3, #4]
 8000710:	609a      	str	r2, [r3, #8]
 8000712:	60da      	str	r2, [r3, #12]
 8000714:	611a      	str	r2, [r3, #16]
 8000716:	615a      	str	r2, [r3, #20]
 8000718:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800071a:	1d3b      	adds	r3, r7, #4
 800071c:	2220      	movs	r2, #32
 800071e:	2100      	movs	r1, #0
 8000720:	4618      	mov	r0, r3
 8000722:	f003 faf1 	bl	8003d08 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000726:	4b4a      	ldr	r3, [pc, #296]	; (8000850 <MX_TIM1_Init+0x168>)
 8000728:	4a4a      	ldr	r2, [pc, #296]	; (8000854 <MX_TIM1_Init+0x16c>)
 800072a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800072c:	4b48      	ldr	r3, [pc, #288]	; (8000850 <MX_TIM1_Init+0x168>)
 800072e:	2200      	movs	r2, #0
 8000730:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000732:	4b47      	ldr	r3, [pc, #284]	; (8000850 <MX_TIM1_Init+0x168>)
 8000734:	2200      	movs	r2, #0
 8000736:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000738:	4b45      	ldr	r3, [pc, #276]	; (8000850 <MX_TIM1_Init+0x168>)
 800073a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800073e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000740:	4b43      	ldr	r3, [pc, #268]	; (8000850 <MX_TIM1_Init+0x168>)
 8000742:	2200      	movs	r2, #0
 8000744:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000746:	4b42      	ldr	r3, [pc, #264]	; (8000850 <MX_TIM1_Init+0x168>)
 8000748:	2200      	movs	r2, #0
 800074a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800074c:	4b40      	ldr	r3, [pc, #256]	; (8000850 <MX_TIM1_Init+0x168>)
 800074e:	2200      	movs	r2, #0
 8000750:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000752:	483f      	ldr	r0, [pc, #252]	; (8000850 <MX_TIM1_Init+0x168>)
 8000754:	f002 f91a 	bl	800298c <HAL_TIM_Base_Init>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800075e:	f000 fa3d 	bl	8000bdc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000762:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000766:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000768:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800076c:	4619      	mov	r1, r3
 800076e:	4838      	ldr	r0, [pc, #224]	; (8000850 <MX_TIM1_Init+0x168>)
 8000770:	f002 fb3e 	bl	8002df0 <HAL_TIM_ConfigClockSource>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800077a:	f000 fa2f 	bl	8000bdc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800077e:	4834      	ldr	r0, [pc, #208]	; (8000850 <MX_TIM1_Init+0x168>)
 8000780:	f002 f953 	bl	8002a2a <HAL_TIM_PWM_Init>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800078a:	f000 fa27 	bl	8000bdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800078e:	2300      	movs	r3, #0
 8000790:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000792:	2300      	movs	r3, #0
 8000794:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000796:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800079a:	4619      	mov	r1, r3
 800079c:	482c      	ldr	r0, [pc, #176]	; (8000850 <MX_TIM1_Init+0x168>)
 800079e:	f002 feff 	bl	80035a0 <HAL_TIMEx_MasterConfigSynchronization>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80007a8:	f000 fa18 	bl	8000bdc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007ac:	2360      	movs	r3, #96	; 0x60
 80007ae:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80007b0:	2300      	movs	r3, #0
 80007b2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007b4:	2300      	movs	r3, #0
 80007b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80007b8:	2300      	movs	r3, #0
 80007ba:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007bc:	2300      	movs	r3, #0
 80007be:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007c0:	2300      	movs	r3, #0
 80007c2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007c4:	2300      	movs	r3, #0
 80007c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007cc:	2200      	movs	r2, #0
 80007ce:	4619      	mov	r1, r3
 80007d0:	481f      	ldr	r0, [pc, #124]	; (8000850 <MX_TIM1_Init+0x168>)
 80007d2:	f002 fa4b 	bl	8002c6c <HAL_TIM_PWM_ConfigChannel>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80007dc:	f000 f9fe 	bl	8000bdc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80007e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007e4:	2204      	movs	r2, #4
 80007e6:	4619      	mov	r1, r3
 80007e8:	4819      	ldr	r0, [pc, #100]	; (8000850 <MX_TIM1_Init+0x168>)
 80007ea:	f002 fa3f 	bl	8002c6c <HAL_TIM_PWM_ConfigChannel>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80007f4:	f000 f9f2 	bl	8000bdc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80007f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007fc:	2208      	movs	r2, #8
 80007fe:	4619      	mov	r1, r3
 8000800:	4813      	ldr	r0, [pc, #76]	; (8000850 <MX_TIM1_Init+0x168>)
 8000802:	f002 fa33 	bl	8002c6c <HAL_TIM_PWM_ConfigChannel>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 800080c:	f000 f9e6 	bl	8000bdc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000810:	2300      	movs	r3, #0
 8000812:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000814:	2300      	movs	r3, #0
 8000816:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000818:	2300      	movs	r3, #0
 800081a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800081c:	2300      	movs	r3, #0
 800081e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000820:	2300      	movs	r3, #0
 8000822:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000824:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000828:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800082a:	2300      	movs	r3, #0
 800082c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	4619      	mov	r1, r3
 8000832:	4807      	ldr	r0, [pc, #28]	; (8000850 <MX_TIM1_Init+0x168>)
 8000834:	f002 ff30 	bl	8003698 <HAL_TIMEx_ConfigBreakDeadTime>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 800083e:	f000 f9cd 	bl	8000bdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000842:	4803      	ldr	r0, [pc, #12]	; (8000850 <MX_TIM1_Init+0x168>)
 8000844:	f000 fab2 	bl	8000dac <HAL_TIM_MspPostInit>

}
 8000848:	bf00      	nop
 800084a:	3758      	adds	r7, #88	; 0x58
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	20000050 	.word	0x20000050
 8000854:	40010000 	.word	0x40010000

08000858 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b08e      	sub	sp, #56	; 0x38
 800085c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800085e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]
 8000866:	605a      	str	r2, [r3, #4]
 8000868:	609a      	str	r2, [r3, #8]
 800086a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800086c:	f107 0320 	add.w	r3, r7, #32
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000876:	1d3b      	adds	r3, r7, #4
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	605a      	str	r2, [r3, #4]
 800087e:	609a      	str	r2, [r3, #8]
 8000880:	60da      	str	r2, [r3, #12]
 8000882:	611a      	str	r2, [r3, #16]
 8000884:	615a      	str	r2, [r3, #20]
 8000886:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000888:	4b38      	ldr	r3, [pc, #224]	; (800096c <MX_TIM2_Init+0x114>)
 800088a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800088e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000890:	4b36      	ldr	r3, [pc, #216]	; (800096c <MX_TIM2_Init+0x114>)
 8000892:	2200      	movs	r2, #0
 8000894:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000896:	4b35      	ldr	r3, [pc, #212]	; (800096c <MX_TIM2_Init+0x114>)
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800089c:	4b33      	ldr	r3, [pc, #204]	; (800096c <MX_TIM2_Init+0x114>)
 800089e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008a2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008a4:	4b31      	ldr	r3, [pc, #196]	; (800096c <MX_TIM2_Init+0x114>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008aa:	4b30      	ldr	r3, [pc, #192]	; (800096c <MX_TIM2_Init+0x114>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008b0:	482e      	ldr	r0, [pc, #184]	; (800096c <MX_TIM2_Init+0x114>)
 80008b2:	f002 f86b 	bl	800298c <HAL_TIM_Base_Init>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80008bc:	f000 f98e 	bl	8000bdc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008c4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008ca:	4619      	mov	r1, r3
 80008cc:	4827      	ldr	r0, [pc, #156]	; (800096c <MX_TIM2_Init+0x114>)
 80008ce:	f002 fa8f 	bl	8002df0 <HAL_TIM_ConfigClockSource>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80008d8:	f000 f980 	bl	8000bdc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80008dc:	4823      	ldr	r0, [pc, #140]	; (800096c <MX_TIM2_Init+0x114>)
 80008de:	f002 f8a4 	bl	8002a2a <HAL_TIM_PWM_Init>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80008e8:	f000 f978 	bl	8000bdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008ec:	2300      	movs	r3, #0
 80008ee:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008f0:	2300      	movs	r3, #0
 80008f2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008f4:	f107 0320 	add.w	r3, r7, #32
 80008f8:	4619      	mov	r1, r3
 80008fa:	481c      	ldr	r0, [pc, #112]	; (800096c <MX_TIM2_Init+0x114>)
 80008fc:	f002 fe50 	bl	80035a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000906:	f000 f969 	bl	8000bdc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800090a:	2360      	movs	r3, #96	; 0x60
 800090c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800090e:	2300      	movs	r3, #0
 8000910:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000912:	2300      	movs	r3, #0
 8000914:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000916:	2300      	movs	r3, #0
 8000918:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	2200      	movs	r2, #0
 800091e:	4619      	mov	r1, r3
 8000920:	4812      	ldr	r0, [pc, #72]	; (800096c <MX_TIM2_Init+0x114>)
 8000922:	f002 f9a3 	bl	8002c6c <HAL_TIM_PWM_ConfigChannel>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800092c:	f000 f956 	bl	8000bdc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000930:	1d3b      	adds	r3, r7, #4
 8000932:	2204      	movs	r2, #4
 8000934:	4619      	mov	r1, r3
 8000936:	480d      	ldr	r0, [pc, #52]	; (800096c <MX_TIM2_Init+0x114>)
 8000938:	f002 f998 	bl	8002c6c <HAL_TIM_PWM_ConfigChannel>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8000942:	f000 f94b 	bl	8000bdc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000946:	1d3b      	adds	r3, r7, #4
 8000948:	2208      	movs	r2, #8
 800094a:	4619      	mov	r1, r3
 800094c:	4807      	ldr	r0, [pc, #28]	; (800096c <MX_TIM2_Init+0x114>)
 800094e:	f002 f98d 	bl	8002c6c <HAL_TIM_PWM_ConfigChannel>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8000958:	f000 f940 	bl	8000bdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800095c:	4803      	ldr	r0, [pc, #12]	; (800096c <MX_TIM2_Init+0x114>)
 800095e:	f000 fa25 	bl	8000dac <HAL_TIM_MspPostInit>

}
 8000962:	bf00      	nop
 8000964:	3738      	adds	r7, #56	; 0x38
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	20000098 	.word	0x20000098

08000970 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b086      	sub	sp, #24
 8000974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000976:	f107 0308 	add.w	r3, r7, #8
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]
 800097e:	605a      	str	r2, [r3, #4]
 8000980:	609a      	str	r2, [r3, #8]
 8000982:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000984:	463b      	mov	r3, r7
 8000986:	2200      	movs	r2, #0
 8000988:	601a      	str	r2, [r3, #0]
 800098a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800098c:	4b1d      	ldr	r3, [pc, #116]	; (8000a04 <MX_TIM3_Init+0x94>)
 800098e:	4a1e      	ldr	r2, [pc, #120]	; (8000a08 <MX_TIM3_Init+0x98>)
 8000990:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000992:	4b1c      	ldr	r3, [pc, #112]	; (8000a04 <MX_TIM3_Init+0x94>)
 8000994:	2200      	movs	r2, #0
 8000996:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000998:	4b1a      	ldr	r3, [pc, #104]	; (8000a04 <MX_TIM3_Init+0x94>)
 800099a:	2200      	movs	r2, #0
 800099c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800099e:	4b19      	ldr	r3, [pc, #100]	; (8000a04 <MX_TIM3_Init+0x94>)
 80009a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009a4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009a6:	4b17      	ldr	r3, [pc, #92]	; (8000a04 <MX_TIM3_Init+0x94>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ac:	4b15      	ldr	r3, [pc, #84]	; (8000a04 <MX_TIM3_Init+0x94>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80009b2:	4814      	ldr	r0, [pc, #80]	; (8000a04 <MX_TIM3_Init+0x94>)
 80009b4:	f001 ffea 	bl	800298c <HAL_TIM_Base_Init>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80009be:	f000 f90d 	bl	8000bdc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009c6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80009c8:	f107 0308 	add.w	r3, r7, #8
 80009cc:	4619      	mov	r1, r3
 80009ce:	480d      	ldr	r0, [pc, #52]	; (8000a04 <MX_TIM3_Init+0x94>)
 80009d0:	f002 fa0e 	bl	8002df0 <HAL_TIM_ConfigClockSource>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80009da:	f000 f8ff 	bl	8000bdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009de:	2300      	movs	r3, #0
 80009e0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009e2:	2300      	movs	r3, #0
 80009e4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009e6:	463b      	mov	r3, r7
 80009e8:	4619      	mov	r1, r3
 80009ea:	4806      	ldr	r0, [pc, #24]	; (8000a04 <MX_TIM3_Init+0x94>)
 80009ec:	f002 fdd8 	bl	80035a0 <HAL_TIMEx_MasterConfigSynchronization>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80009f6:	f000 f8f1 	bl	8000bdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80009fa:	bf00      	nop
 80009fc:	3718      	adds	r7, #24
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	200000e0 	.word	0x200000e0
 8000a08:	40000400 	.word	0x40000400

08000a0c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a10:	4b11      	ldr	r3, [pc, #68]	; (8000a58 <MX_USART2_UART_Init+0x4c>)
 8000a12:	4a12      	ldr	r2, [pc, #72]	; (8000a5c <MX_USART2_UART_Init+0x50>)
 8000a14:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a16:	4b10      	ldr	r3, [pc, #64]	; (8000a58 <MX_USART2_UART_Init+0x4c>)
 8000a18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a1c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a1e:	4b0e      	ldr	r3, [pc, #56]	; (8000a58 <MX_USART2_UART_Init+0x4c>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a24:	4b0c      	ldr	r3, [pc, #48]	; (8000a58 <MX_USART2_UART_Init+0x4c>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a2a:	4b0b      	ldr	r3, [pc, #44]	; (8000a58 <MX_USART2_UART_Init+0x4c>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a30:	4b09      	ldr	r3, [pc, #36]	; (8000a58 <MX_USART2_UART_Init+0x4c>)
 8000a32:	220c      	movs	r2, #12
 8000a34:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a36:	4b08      	ldr	r3, [pc, #32]	; (8000a58 <MX_USART2_UART_Init+0x4c>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a3c:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <MX_USART2_UART_Init+0x4c>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a42:	4805      	ldr	r0, [pc, #20]	; (8000a58 <MX_USART2_UART_Init+0x4c>)
 8000a44:	f002 fe7a 	bl	800373c <HAL_UART_Init>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a4e:	f000 f8c5 	bl	8000bdc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	20000128 	.word	0x20000128
 8000a5c:	40004400 	.word	0x40004400

08000a60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b08a      	sub	sp, #40	; 0x28
 8000a64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a66:	f107 0314 	add.w	r3, r7, #20
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	605a      	str	r2, [r3, #4]
 8000a70:	609a      	str	r2, [r3, #8]
 8000a72:	60da      	str	r2, [r3, #12]
 8000a74:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	613b      	str	r3, [r7, #16]
 8000a7a:	4b53      	ldr	r3, [pc, #332]	; (8000bc8 <MX_GPIO_Init+0x168>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	4a52      	ldr	r2, [pc, #328]	; (8000bc8 <MX_GPIO_Init+0x168>)
 8000a80:	f043 0304 	orr.w	r3, r3, #4
 8000a84:	6313      	str	r3, [r2, #48]	; 0x30
 8000a86:	4b50      	ldr	r3, [pc, #320]	; (8000bc8 <MX_GPIO_Init+0x168>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	f003 0304 	and.w	r3, r3, #4
 8000a8e:	613b      	str	r3, [r7, #16]
 8000a90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	60fb      	str	r3, [r7, #12]
 8000a96:	4b4c      	ldr	r3, [pc, #304]	; (8000bc8 <MX_GPIO_Init+0x168>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	4a4b      	ldr	r2, [pc, #300]	; (8000bc8 <MX_GPIO_Init+0x168>)
 8000a9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa2:	4b49      	ldr	r3, [pc, #292]	; (8000bc8 <MX_GPIO_Init+0x168>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	60bb      	str	r3, [r7, #8]
 8000ab2:	4b45      	ldr	r3, [pc, #276]	; (8000bc8 <MX_GPIO_Init+0x168>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	4a44      	ldr	r2, [pc, #272]	; (8000bc8 <MX_GPIO_Init+0x168>)
 8000ab8:	f043 0301 	orr.w	r3, r3, #1
 8000abc:	6313      	str	r3, [r2, #48]	; 0x30
 8000abe:	4b42      	ldr	r3, [pc, #264]	; (8000bc8 <MX_GPIO_Init+0x168>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	f003 0301 	and.w	r3, r3, #1
 8000ac6:	60bb      	str	r3, [r7, #8]
 8000ac8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	607b      	str	r3, [r7, #4]
 8000ace:	4b3e      	ldr	r3, [pc, #248]	; (8000bc8 <MX_GPIO_Init+0x168>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	4a3d      	ldr	r2, [pc, #244]	; (8000bc8 <MX_GPIO_Init+0x168>)
 8000ad4:	f043 0302 	orr.w	r3, r3, #2
 8000ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ada:	4b3b      	ldr	r3, [pc, #236]	; (8000bc8 <MX_GPIO_Init+0x168>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	f003 0302 	and.w	r3, r3, #2
 8000ae2:	607b      	str	r3, [r7, #4]
 8000ae4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	603b      	str	r3, [r7, #0]
 8000aea:	4b37      	ldr	r3, [pc, #220]	; (8000bc8 <MX_GPIO_Init+0x168>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	4a36      	ldr	r2, [pc, #216]	; (8000bc8 <MX_GPIO_Init+0x168>)
 8000af0:	f043 0308 	orr.w	r3, r3, #8
 8000af4:	6313      	str	r3, [r2, #48]	; 0x30
 8000af6:	4b34      	ldr	r3, [pc, #208]	; (8000bc8 <MX_GPIO_Init+0x168>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	f003 0308 	and.w	r3, r3, #8
 8000afe:	603b      	str	r3, [r7, #0]
 8000b00:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PSB2_Pin|PSB1_Pin|BRK2_Pin|BATT_Pin
 8000b02:	2200      	movs	r2, #0
 8000b04:	211f      	movs	r1, #31
 8000b06:	4831      	ldr	r0, [pc, #196]	; (8000bcc <MX_GPIO_Init+0x16c>)
 8000b08:	f001 f8ee 	bl	8001ce8 <HAL_GPIO_WritePin>
                          |PSB3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DIRECTION3_Pin|DIRECTION2_Pin|DIRECTION1_Pin|DIRECTION6_Pin
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	f64f 0173 	movw	r1, #63603	; 0xf873
 8000b12:	482f      	ldr	r0, [pc, #188]	; (8000bd0 <MX_GPIO_Init+0x170>)
 8000b14:	f001 f8e8 	bl	8001ce8 <HAL_GPIO_WritePin>
                          |DIRECTION5_Pin|BRK6_Pin|PSB6A12_Pin|LED1_Pin
                          |LED2_Pin|LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BRK1_Pin|PSB5_Pin|BRK5_Pin|PSB6_Pin
 8000b18:	2200      	movs	r2, #0
 8000b1a:	f24f 0107 	movw	r1, #61447	; 0xf007
 8000b1e:	482d      	ldr	r0, [pc, #180]	; (8000bd4 <MX_GPIO_Init+0x174>)
 8000b20:	f001 f8e2 	bl	8001ce8 <HAL_GPIO_WritePin>
                          |BRK3_Pin|PSB4_Pin|BRK4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIRECTION4_GPIO_Port, DIRECTION4_Pin, GPIO_PIN_RESET);
 8000b24:	2200      	movs	r2, #0
 8000b26:	2104      	movs	r1, #4
 8000b28:	482b      	ldr	r0, [pc, #172]	; (8000bd8 <MX_GPIO_Init+0x178>)
 8000b2a:	f001 f8dd 	bl	8001ce8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b2e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b34:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b3e:	f107 0314 	add.w	r3, r7, #20
 8000b42:	4619      	mov	r1, r3
 8000b44:	4821      	ldr	r0, [pc, #132]	; (8000bcc <MX_GPIO_Init+0x16c>)
 8000b46:	f000 ff3b 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PSB2_Pin PSB1_Pin BRK2_Pin BATT_Pin
                           PSB3_Pin */
  GPIO_InitStruct.Pin = PSB2_Pin|PSB1_Pin|BRK2_Pin|BATT_Pin
 8000b4a:	231f      	movs	r3, #31
 8000b4c:	617b      	str	r3, [r7, #20]
                          |PSB3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	2300      	movs	r3, #0
 8000b54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b56:	2300      	movs	r3, #0
 8000b58:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b5a:	f107 0314 	add.w	r3, r7, #20
 8000b5e:	4619      	mov	r1, r3
 8000b60:	481a      	ldr	r0, [pc, #104]	; (8000bcc <MX_GPIO_Init+0x16c>)
 8000b62:	f000 ff2d 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIRECTION3_Pin DIRECTION2_Pin DIRECTION1_Pin DIRECTION6_Pin
                           DIRECTION5_Pin BRK6_Pin PSB6A12_Pin LED1_Pin
                           LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = DIRECTION3_Pin|DIRECTION2_Pin|DIRECTION1_Pin|DIRECTION6_Pin
 8000b66:	f64f 0373 	movw	r3, #63603	; 0xf873
 8000b6a:	617b      	str	r3, [r7, #20]
                          |DIRECTION5_Pin|BRK6_Pin|PSB6A12_Pin|LED1_Pin
                          |LED2_Pin|LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b74:	2300      	movs	r3, #0
 8000b76:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b78:	f107 0314 	add.w	r3, r7, #20
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4814      	ldr	r0, [pc, #80]	; (8000bd0 <MX_GPIO_Init+0x170>)
 8000b80:	f000 ff1e 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BRK1_Pin PSB5_Pin BRK5_Pin PSB6_Pin
                           BRK3_Pin PSB4_Pin BRK4_Pin */
  GPIO_InitStruct.Pin = BRK1_Pin|PSB5_Pin|BRK5_Pin|PSB6_Pin
 8000b84:	f24f 0307 	movw	r3, #61447	; 0xf007
 8000b88:	617b      	str	r3, [r7, #20]
                          |BRK3_Pin|PSB4_Pin|BRK4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b92:	2300      	movs	r3, #0
 8000b94:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b96:	f107 0314 	add.w	r3, r7, #20
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	480d      	ldr	r0, [pc, #52]	; (8000bd4 <MX_GPIO_Init+0x174>)
 8000b9e:	f000 ff0f 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIRECTION4_Pin */
  GPIO_InitStruct.Pin = DIRECTION4_Pin;
 8000ba2:	2304      	movs	r3, #4
 8000ba4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIRECTION4_GPIO_Port, &GPIO_InitStruct);
 8000bb2:	f107 0314 	add.w	r3, r7, #20
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4807      	ldr	r0, [pc, #28]	; (8000bd8 <MX_GPIO_Init+0x178>)
 8000bba:	f000 ff01 	bl	80019c0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bbe:	bf00      	nop
 8000bc0:	3728      	adds	r7, #40	; 0x28
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40023800 	.word	0x40023800
 8000bcc:	40020800 	.word	0x40020800
 8000bd0:	40020000 	.word	0x40020000
 8000bd4:	40020400 	.word	0x40020400
 8000bd8:	40020c00 	.word	0x40020c00

08000bdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000be0:	b672      	cpsid	i
}
 8000be2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000be4:	e7fe      	b.n	8000be4 <Error_Handler+0x8>
	...

08000be8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bee:	2300      	movs	r3, #0
 8000bf0:	607b      	str	r3, [r7, #4]
 8000bf2:	4b10      	ldr	r3, [pc, #64]	; (8000c34 <HAL_MspInit+0x4c>)
 8000bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bf6:	4a0f      	ldr	r2, [pc, #60]	; (8000c34 <HAL_MspInit+0x4c>)
 8000bf8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bfc:	6453      	str	r3, [r2, #68]	; 0x44
 8000bfe:	4b0d      	ldr	r3, [pc, #52]	; (8000c34 <HAL_MspInit+0x4c>)
 8000c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c06:	607b      	str	r3, [r7, #4]
 8000c08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	603b      	str	r3, [r7, #0]
 8000c0e:	4b09      	ldr	r3, [pc, #36]	; (8000c34 <HAL_MspInit+0x4c>)
 8000c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c12:	4a08      	ldr	r2, [pc, #32]	; (8000c34 <HAL_MspInit+0x4c>)
 8000c14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c18:	6413      	str	r3, [r2, #64]	; 0x40
 8000c1a:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <HAL_MspInit+0x4c>)
 8000c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c22:	603b      	str	r3, [r7, #0]
 8000c24:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c26:	2007      	movs	r0, #7
 8000c28:	f000 fe88 	bl	800193c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c2c:	bf00      	nop
 8000c2e:	3708      	adds	r7, #8
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	40023800 	.word	0x40023800

08000c38 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b08a      	sub	sp, #40	; 0x28
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c40:	f107 0314 	add.w	r3, r7, #20
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
 8000c48:	605a      	str	r2, [r3, #4]
 8000c4a:	609a      	str	r2, [r3, #8]
 8000c4c:	60da      	str	r2, [r3, #12]
 8000c4e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN2)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a2c      	ldr	r2, [pc, #176]	; (8000d08 <HAL_CAN_MspInit+0xd0>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d151      	bne.n	8000cfe <HAL_CAN_MspInit+0xc6>
  {
  /* USER CODE BEGIN CAN2_MspInit 0 */

  /* USER CODE END CAN2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	613b      	str	r3, [r7, #16]
 8000c5e:	4b2b      	ldr	r3, [pc, #172]	; (8000d0c <HAL_CAN_MspInit+0xd4>)
 8000c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c62:	4a2a      	ldr	r2, [pc, #168]	; (8000d0c <HAL_CAN_MspInit+0xd4>)
 8000c64:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000c68:	6413      	str	r3, [r2, #64]	; 0x40
 8000c6a:	4b28      	ldr	r3, [pc, #160]	; (8000d0c <HAL_CAN_MspInit+0xd4>)
 8000c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000c72:	613b      	str	r3, [r7, #16]
 8000c74:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000c76:	2300      	movs	r3, #0
 8000c78:	60fb      	str	r3, [r7, #12]
 8000c7a:	4b24      	ldr	r3, [pc, #144]	; (8000d0c <HAL_CAN_MspInit+0xd4>)
 8000c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7e:	4a23      	ldr	r2, [pc, #140]	; (8000d0c <HAL_CAN_MspInit+0xd4>)
 8000c80:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c84:	6413      	str	r3, [r2, #64]	; 0x40
 8000c86:	4b21      	ldr	r3, [pc, #132]	; (8000d0c <HAL_CAN_MspInit+0xd4>)
 8000c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c8e:	60fb      	str	r3, [r7, #12]
 8000c90:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	60bb      	str	r3, [r7, #8]
 8000c96:	4b1d      	ldr	r3, [pc, #116]	; (8000d0c <HAL_CAN_MspInit+0xd4>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	4a1c      	ldr	r2, [pc, #112]	; (8000d0c <HAL_CAN_MspInit+0xd4>)
 8000c9c:	f043 0302 	orr.w	r3, r3, #2
 8000ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca2:	4b1a      	ldr	r3, [pc, #104]	; (8000d0c <HAL_CAN_MspInit+0xd4>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	f003 0302 	and.w	r3, r3, #2
 8000caa:	60bb      	str	r3, [r7, #8]
 8000cac:	68bb      	ldr	r3, [r7, #8]
    /**CAN2 GPIO Configuration
    PB5     ------> CAN2_RX
    PB6     ------> CAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000cae:	2360      	movs	r3, #96	; 0x60
 8000cb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cba:	2303      	movs	r3, #3
 8000cbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000cbe:	2309      	movs	r3, #9
 8000cc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc2:	f107 0314 	add.w	r3, r7, #20
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4811      	ldr	r0, [pc, #68]	; (8000d10 <HAL_CAN_MspInit+0xd8>)
 8000cca:	f000 fe79 	bl	80019c0 <HAL_GPIO_Init>

    /* CAN2 interrupt Init */
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 0, 0);
 8000cce:	2200      	movs	r2, #0
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	203f      	movs	r0, #63	; 0x3f
 8000cd4:	f000 fe3d 	bl	8001952 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 8000cd8:	203f      	movs	r0, #63	; 0x3f
 8000cda:	f000 fe56 	bl	800198a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 8000cde:	2200      	movs	r2, #0
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	2040      	movs	r0, #64	; 0x40
 8000ce4:	f000 fe35 	bl	8001952 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8000ce8:	2040      	movs	r0, #64	; 0x40
 8000cea:	f000 fe4e 	bl	800198a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	2041      	movs	r0, #65	; 0x41
 8000cf4:	f000 fe2d 	bl	8001952 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8000cf8:	2041      	movs	r0, #65	; 0x41
 8000cfa:	f000 fe46 	bl	800198a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8000cfe:	bf00      	nop
 8000d00:	3728      	adds	r7, #40	; 0x28
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	40006800 	.word	0x40006800
 8000d0c:	40023800 	.word	0x40023800
 8000d10:	40020400 	.word	0x40020400

08000d14 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b087      	sub	sp, #28
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a1f      	ldr	r2, [pc, #124]	; (8000da0 <HAL_TIM_Base_MspInit+0x8c>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d10e      	bne.n	8000d44 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	617b      	str	r3, [r7, #20]
 8000d2a:	4b1e      	ldr	r3, [pc, #120]	; (8000da4 <HAL_TIM_Base_MspInit+0x90>)
 8000d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d2e:	4a1d      	ldr	r2, [pc, #116]	; (8000da4 <HAL_TIM_Base_MspInit+0x90>)
 8000d30:	f043 0301 	orr.w	r3, r3, #1
 8000d34:	6453      	str	r3, [r2, #68]	; 0x44
 8000d36:	4b1b      	ldr	r3, [pc, #108]	; (8000da4 <HAL_TIM_Base_MspInit+0x90>)
 8000d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d3a:	f003 0301 	and.w	r3, r3, #1
 8000d3e:	617b      	str	r3, [r7, #20]
 8000d40:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000d42:	e026      	b.n	8000d92 <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM2)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d4c:	d10e      	bne.n	8000d6c <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	613b      	str	r3, [r7, #16]
 8000d52:	4b14      	ldr	r3, [pc, #80]	; (8000da4 <HAL_TIM_Base_MspInit+0x90>)
 8000d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d56:	4a13      	ldr	r2, [pc, #76]	; (8000da4 <HAL_TIM_Base_MspInit+0x90>)
 8000d58:	f043 0301 	orr.w	r3, r3, #1
 8000d5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d5e:	4b11      	ldr	r3, [pc, #68]	; (8000da4 <HAL_TIM_Base_MspInit+0x90>)
 8000d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d62:	f003 0301 	and.w	r3, r3, #1
 8000d66:	613b      	str	r3, [r7, #16]
 8000d68:	693b      	ldr	r3, [r7, #16]
}
 8000d6a:	e012      	b.n	8000d92 <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM3)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a0d      	ldr	r2, [pc, #52]	; (8000da8 <HAL_TIM_Base_MspInit+0x94>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d10d      	bne.n	8000d92 <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d76:	2300      	movs	r3, #0
 8000d78:	60fb      	str	r3, [r7, #12]
 8000d7a:	4b0a      	ldr	r3, [pc, #40]	; (8000da4 <HAL_TIM_Base_MspInit+0x90>)
 8000d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7e:	4a09      	ldr	r2, [pc, #36]	; (8000da4 <HAL_TIM_Base_MspInit+0x90>)
 8000d80:	f043 0302 	orr.w	r3, r3, #2
 8000d84:	6413      	str	r3, [r2, #64]	; 0x40
 8000d86:	4b07      	ldr	r3, [pc, #28]	; (8000da4 <HAL_TIM_Base_MspInit+0x90>)
 8000d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8a:	f003 0302 	and.w	r3, r3, #2
 8000d8e:	60fb      	str	r3, [r7, #12]
 8000d90:	68fb      	ldr	r3, [r7, #12]
}
 8000d92:	bf00      	nop
 8000d94:	371c      	adds	r7, #28
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	40010000 	.word	0x40010000
 8000da4:	40023800 	.word	0x40023800
 8000da8:	40000400 	.word	0x40000400

08000dac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b08a      	sub	sp, #40	; 0x28
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db4:	f107 0314 	add.w	r3, r7, #20
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
 8000dbc:	605a      	str	r2, [r3, #4]
 8000dbe:	609a      	str	r2, [r3, #8]
 8000dc0:	60da      	str	r2, [r3, #12]
 8000dc2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a25      	ldr	r2, [pc, #148]	; (8000e60 <HAL_TIM_MspPostInit+0xb4>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d11f      	bne.n	8000e0e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dce:	2300      	movs	r3, #0
 8000dd0:	613b      	str	r3, [r7, #16]
 8000dd2:	4b24      	ldr	r3, [pc, #144]	; (8000e64 <HAL_TIM_MspPostInit+0xb8>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd6:	4a23      	ldr	r2, [pc, #140]	; (8000e64 <HAL_TIM_MspPostInit+0xb8>)
 8000dd8:	f043 0301 	orr.w	r3, r3, #1
 8000ddc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dde:	4b21      	ldr	r3, [pc, #132]	; (8000e64 <HAL_TIM_MspPostInit+0xb8>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de2:	f003 0301 	and.w	r3, r3, #1
 8000de6:	613b      	str	r3, [r7, #16]
 8000de8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = pwm1_Pin|pwm2_Pin|pwm3_Pin;
 8000dea:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000dee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df0:	2302      	movs	r3, #2
 8000df2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df4:	2300      	movs	r3, #0
 8000df6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e00:	f107 0314 	add.w	r3, r7, #20
 8000e04:	4619      	mov	r1, r3
 8000e06:	4818      	ldr	r0, [pc, #96]	; (8000e68 <HAL_TIM_MspPostInit+0xbc>)
 8000e08:	f000 fdda 	bl	80019c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000e0c:	e023      	b.n	8000e56 <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM2)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e16:	d11e      	bne.n	8000e56 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e18:	2300      	movs	r3, #0
 8000e1a:	60fb      	str	r3, [r7, #12]
 8000e1c:	4b11      	ldr	r3, [pc, #68]	; (8000e64 <HAL_TIM_MspPostInit+0xb8>)
 8000e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e20:	4a10      	ldr	r2, [pc, #64]	; (8000e64 <HAL_TIM_MspPostInit+0xb8>)
 8000e22:	f043 0302 	orr.w	r3, r3, #2
 8000e26:	6313      	str	r3, [r2, #48]	; 0x30
 8000e28:	4b0e      	ldr	r3, [pc, #56]	; (8000e64 <HAL_TIM_MspPostInit+0xb8>)
 8000e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2c:	f003 0302 	and.w	r3, r3, #2
 8000e30:	60fb      	str	r3, [r7, #12]
 8000e32:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = pwm6_Pin|pwm4_Pin|pwm5_Pin;
 8000e34:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000e38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e42:	2300      	movs	r3, #0
 8000e44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e46:	2301      	movs	r3, #1
 8000e48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e4a:	f107 0314 	add.w	r3, r7, #20
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4806      	ldr	r0, [pc, #24]	; (8000e6c <HAL_TIM_MspPostInit+0xc0>)
 8000e52:	f000 fdb5 	bl	80019c0 <HAL_GPIO_Init>
}
 8000e56:	bf00      	nop
 8000e58:	3728      	adds	r7, #40	; 0x28
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	40010000 	.word	0x40010000
 8000e64:	40023800 	.word	0x40023800
 8000e68:	40020000 	.word	0x40020000
 8000e6c:	40020400 	.word	0x40020400

08000e70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b08a      	sub	sp, #40	; 0x28
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e78:	f107 0314 	add.w	r3, r7, #20
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	605a      	str	r2, [r3, #4]
 8000e82:	609a      	str	r2, [r3, #8]
 8000e84:	60da      	str	r2, [r3, #12]
 8000e86:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a19      	ldr	r2, [pc, #100]	; (8000ef4 <HAL_UART_MspInit+0x84>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d12b      	bne.n	8000eea <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e92:	2300      	movs	r3, #0
 8000e94:	613b      	str	r3, [r7, #16]
 8000e96:	4b18      	ldr	r3, [pc, #96]	; (8000ef8 <HAL_UART_MspInit+0x88>)
 8000e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9a:	4a17      	ldr	r2, [pc, #92]	; (8000ef8 <HAL_UART_MspInit+0x88>)
 8000e9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ea0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ea2:	4b15      	ldr	r3, [pc, #84]	; (8000ef8 <HAL_UART_MspInit+0x88>)
 8000ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eaa:	613b      	str	r3, [r7, #16]
 8000eac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eae:	2300      	movs	r3, #0
 8000eb0:	60fb      	str	r3, [r7, #12]
 8000eb2:	4b11      	ldr	r3, [pc, #68]	; (8000ef8 <HAL_UART_MspInit+0x88>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb6:	4a10      	ldr	r2, [pc, #64]	; (8000ef8 <HAL_UART_MspInit+0x88>)
 8000eb8:	f043 0301 	orr.w	r3, r3, #1
 8000ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ebe:	4b0e      	ldr	r3, [pc, #56]	; (8000ef8 <HAL_UART_MspInit+0x88>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec2:	f003 0301 	and.w	r3, r3, #1
 8000ec6:	60fb      	str	r3, [r7, #12]
 8000ec8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000eca:	230c      	movs	r3, #12
 8000ecc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ece:	2302      	movs	r3, #2
 8000ed0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000eda:	2307      	movs	r3, #7
 8000edc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ede:	f107 0314 	add.w	r3, r7, #20
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4805      	ldr	r0, [pc, #20]	; (8000efc <HAL_UART_MspInit+0x8c>)
 8000ee6:	f000 fd6b 	bl	80019c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000eea:	bf00      	nop
 8000eec:	3728      	adds	r7, #40	; 0x28
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40004400 	.word	0x40004400
 8000ef8:	40023800 	.word	0x40023800
 8000efc:	40020000 	.word	0x40020000

08000f00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f04:	e7fe      	b.n	8000f04 <NMI_Handler+0x4>

08000f06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f06:	b480      	push	{r7}
 8000f08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f0a:	e7fe      	b.n	8000f0a <HardFault_Handler+0x4>

08000f0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f10:	e7fe      	b.n	8000f10 <MemManage_Handler+0x4>

08000f12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f12:	b480      	push	{r7}
 8000f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f16:	e7fe      	b.n	8000f16 <BusFault_Handler+0x4>

08000f18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f1c:	e7fe      	b.n	8000f1c <UsageFault_Handler+0x4>

08000f1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f22:	bf00      	nop
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr

08000f2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f30:	bf00      	nop
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr

08000f3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f3e:	bf00      	nop
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr

08000f48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f4c:	f000 f8ae 	bl	80010ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f50:	bf00      	nop
 8000f52:	bd80      	pop	{r7, pc}

08000f54 <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupt.
  */
void CAN2_TX_IRQHandler(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8000f58:	4802      	ldr	r0, [pc, #8]	; (8000f64 <CAN2_TX_IRQHandler+0x10>)
 8000f5a:	f000 f9e6 	bl	800132a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	20000028 	.word	0x20000028

08000f68 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupt.
  */
void CAN2_RX0_IRQHandler(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8000f6c:	4802      	ldr	r0, [pc, #8]	; (8000f78 <CAN2_RX0_IRQHandler+0x10>)
 8000f6e:	f000 f9dc 	bl	800132a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8000f72:	bf00      	nop
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	20000028 	.word	0x20000028

08000f7c <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8000f80:	4802      	ldr	r0, [pc, #8]	; (8000f8c <CAN2_RX1_IRQHandler+0x10>)
 8000f82:	f000 f9d2 	bl	800132a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	20000028 	.word	0x20000028

08000f90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f94:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <SystemInit+0x20>)
 8000f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f9a:	4a05      	ldr	r2, [pc, #20]	; (8000fb0 <SystemInit+0x20>)
 8000f9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fa0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fa4:	bf00      	nop
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	e000ed00 	.word	0xe000ed00

08000fb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000fb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fb8:	480d      	ldr	r0, [pc, #52]	; (8000ff0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000fba:	490e      	ldr	r1, [pc, #56]	; (8000ff4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fbc:	4a0e      	ldr	r2, [pc, #56]	; (8000ff8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fc0:	e002      	b.n	8000fc8 <LoopCopyDataInit>

08000fc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fc6:	3304      	adds	r3, #4

08000fc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fcc:	d3f9      	bcc.n	8000fc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fce:	4a0b      	ldr	r2, [pc, #44]	; (8000ffc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fd0:	4c0b      	ldr	r4, [pc, #44]	; (8001000 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000fd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fd4:	e001      	b.n	8000fda <LoopFillZerobss>

08000fd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fd8:	3204      	adds	r2, #4

08000fda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fdc:	d3fb      	bcc.n	8000fd6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fde:	f7ff ffd7 	bl	8000f90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fe2:	f002 fe6d 	bl	8003cc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fe6:	f7ff fa8f 	bl	8000508 <main>
  bx  lr    
 8000fea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ff0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ff4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ff8:	08003d58 	.word	0x08003d58
  ldr r2, =_sbss
 8000ffc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001000:	20000170 	.word	0x20000170

08001004 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001004:	e7fe      	b.n	8001004 <ADC_IRQHandler>
	...

08001008 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800100c:	4b0e      	ldr	r3, [pc, #56]	; (8001048 <HAL_Init+0x40>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a0d      	ldr	r2, [pc, #52]	; (8001048 <HAL_Init+0x40>)
 8001012:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001016:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001018:	4b0b      	ldr	r3, [pc, #44]	; (8001048 <HAL_Init+0x40>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a0a      	ldr	r2, [pc, #40]	; (8001048 <HAL_Init+0x40>)
 800101e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001022:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001024:	4b08      	ldr	r3, [pc, #32]	; (8001048 <HAL_Init+0x40>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a07      	ldr	r2, [pc, #28]	; (8001048 <HAL_Init+0x40>)
 800102a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800102e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001030:	2003      	movs	r0, #3
 8001032:	f000 fc83 	bl	800193c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001036:	2000      	movs	r0, #0
 8001038:	f000 f808 	bl	800104c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800103c:	f7ff fdd4 	bl	8000be8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001040:	2300      	movs	r3, #0
}
 8001042:	4618      	mov	r0, r3
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	40023c00 	.word	0x40023c00

0800104c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001054:	4b12      	ldr	r3, [pc, #72]	; (80010a0 <HAL_InitTick+0x54>)
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	4b12      	ldr	r3, [pc, #72]	; (80010a4 <HAL_InitTick+0x58>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	4619      	mov	r1, r3
 800105e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001062:	fbb3 f3f1 	udiv	r3, r3, r1
 8001066:	fbb2 f3f3 	udiv	r3, r2, r3
 800106a:	4618      	mov	r0, r3
 800106c:	f000 fc9b 	bl	80019a6 <HAL_SYSTICK_Config>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	e00e      	b.n	8001098 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2b0f      	cmp	r3, #15
 800107e:	d80a      	bhi.n	8001096 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001080:	2200      	movs	r2, #0
 8001082:	6879      	ldr	r1, [r7, #4]
 8001084:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001088:	f000 fc63 	bl	8001952 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800108c:	4a06      	ldr	r2, [pc, #24]	; (80010a8 <HAL_InitTick+0x5c>)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001092:	2300      	movs	r3, #0
 8001094:	e000      	b.n	8001098 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
}
 8001098:	4618      	mov	r0, r3
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	20000000 	.word	0x20000000
 80010a4:	20000008 	.word	0x20000008
 80010a8:	20000004 	.word	0x20000004

080010ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010b0:	4b06      	ldr	r3, [pc, #24]	; (80010cc <HAL_IncTick+0x20>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	461a      	mov	r2, r3
 80010b6:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <HAL_IncTick+0x24>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4413      	add	r3, r2
 80010bc:	4a04      	ldr	r2, [pc, #16]	; (80010d0 <HAL_IncTick+0x24>)
 80010be:	6013      	str	r3, [r2, #0]
}
 80010c0:	bf00      	nop
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	20000008 	.word	0x20000008
 80010d0:	2000016c 	.word	0x2000016c

080010d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  return uwTick;
 80010d8:	4b03      	ldr	r3, [pc, #12]	; (80010e8 <HAL_GetTick+0x14>)
 80010da:	681b      	ldr	r3, [r3, #0]
}
 80010dc:	4618      	mov	r0, r3
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	2000016c 	.word	0x2000016c

080010ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010f4:	f7ff ffee 	bl	80010d4 <HAL_GetTick>
 80010f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001104:	d005      	beq.n	8001112 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001106:	4b0a      	ldr	r3, [pc, #40]	; (8001130 <HAL_Delay+0x44>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	461a      	mov	r2, r3
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	4413      	add	r3, r2
 8001110:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001112:	bf00      	nop
 8001114:	f7ff ffde 	bl	80010d4 <HAL_GetTick>
 8001118:	4602      	mov	r2, r0
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	68fa      	ldr	r2, [r7, #12]
 8001120:	429a      	cmp	r2, r3
 8001122:	d8f7      	bhi.n	8001114 <HAL_Delay+0x28>
  {
  }
}
 8001124:	bf00      	nop
 8001126:	bf00      	nop
 8001128:	3710      	adds	r7, #16
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	20000008 	.word	0x20000008

08001134 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d101      	bne.n	8001146 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001142:	2301      	movs	r3, #1
 8001144:	e0ed      	b.n	8001322 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	f893 3020 	ldrb.w	r3, [r3, #32]
 800114c:	b2db      	uxtb	r3, r3
 800114e:	2b00      	cmp	r3, #0
 8001150:	d102      	bne.n	8001158 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f7ff fd70 	bl	8000c38 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f042 0201 	orr.w	r2, r2, #1
 8001166:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001168:	f7ff ffb4 	bl	80010d4 <HAL_GetTick>
 800116c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800116e:	e012      	b.n	8001196 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001170:	f7ff ffb0 	bl	80010d4 <HAL_GetTick>
 8001174:	4602      	mov	r2, r0
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	2b0a      	cmp	r3, #10
 800117c:	d90b      	bls.n	8001196 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001182:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2205      	movs	r2, #5
 800118e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	e0c5      	b.n	8001322 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f003 0301 	and.w	r3, r3, #1
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d0e5      	beq.n	8001170 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f022 0202 	bic.w	r2, r2, #2
 80011b2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011b4:	f7ff ff8e 	bl	80010d4 <HAL_GetTick>
 80011b8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80011ba:	e012      	b.n	80011e2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80011bc:	f7ff ff8a 	bl	80010d4 <HAL_GetTick>
 80011c0:	4602      	mov	r2, r0
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	2b0a      	cmp	r3, #10
 80011c8:	d90b      	bls.n	80011e2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ce:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2205      	movs	r2, #5
 80011da:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	e09f      	b.n	8001322 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f003 0302 	and.w	r3, r3, #2
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d1e5      	bne.n	80011bc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	7e1b      	ldrb	r3, [r3, #24]
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d108      	bne.n	800120a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	e007      	b.n	800121a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001218:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	7e5b      	ldrb	r3, [r3, #25]
 800121e:	2b01      	cmp	r3, #1
 8001220:	d108      	bne.n	8001234 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001230:	601a      	str	r2, [r3, #0]
 8001232:	e007      	b.n	8001244 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001242:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	7e9b      	ldrb	r3, [r3, #26]
 8001248:	2b01      	cmp	r3, #1
 800124a:	d108      	bne.n	800125e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f042 0220 	orr.w	r2, r2, #32
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	e007      	b.n	800126e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f022 0220 	bic.w	r2, r2, #32
 800126c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	7edb      	ldrb	r3, [r3, #27]
 8001272:	2b01      	cmp	r3, #1
 8001274:	d108      	bne.n	8001288 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f022 0210 	bic.w	r2, r2, #16
 8001284:	601a      	str	r2, [r3, #0]
 8001286:	e007      	b.n	8001298 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f042 0210 	orr.w	r2, r2, #16
 8001296:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	7f1b      	ldrb	r3, [r3, #28]
 800129c:	2b01      	cmp	r3, #1
 800129e:	d108      	bne.n	80012b2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f042 0208 	orr.w	r2, r2, #8
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	e007      	b.n	80012c2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f022 0208 	bic.w	r2, r2, #8
 80012c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	7f5b      	ldrb	r3, [r3, #29]
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d108      	bne.n	80012dc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f042 0204 	orr.w	r2, r2, #4
 80012d8:	601a      	str	r2, [r3, #0]
 80012da:	e007      	b.n	80012ec <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f022 0204 	bic.w	r2, r2, #4
 80012ea:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	689a      	ldr	r2, [r3, #8]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	431a      	orrs	r2, r3
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	691b      	ldr	r3, [r3, #16]
 80012fa:	431a      	orrs	r2, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	695b      	ldr	r3, [r3, #20]
 8001300:	ea42 0103 	orr.w	r1, r2, r3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	1e5a      	subs	r2, r3, #1
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	430a      	orrs	r2, r1
 8001310:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2200      	movs	r2, #0
 8001316:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2201      	movs	r2, #1
 800131c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001320:	2300      	movs	r3, #0
}
 8001322:	4618      	mov	r0, r3
 8001324:	3710      	adds	r7, #16
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}

0800132a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800132a:	b580      	push	{r7, lr}
 800132c:	b08a      	sub	sp, #40	; 0x28
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001332:	2300      	movs	r3, #0
 8001334:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	695b      	ldr	r3, [r3, #20]
 800133c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	691b      	ldr	r3, [r3, #16]
 800135c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	699b      	ldr	r3, [r3, #24]
 8001364:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001366:	6a3b      	ldr	r3, [r7, #32]
 8001368:	f003 0301 	and.w	r3, r3, #1
 800136c:	2b00      	cmp	r3, #0
 800136e:	d07c      	beq.n	800146a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001370:	69bb      	ldr	r3, [r7, #24]
 8001372:	f003 0301 	and.w	r3, r3, #1
 8001376:	2b00      	cmp	r3, #0
 8001378:	d023      	beq.n	80013c2 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	2201      	movs	r2, #1
 8001380:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001382:	69bb      	ldr	r3, [r7, #24]
 8001384:	f003 0302 	and.w	r3, r3, #2
 8001388:	2b00      	cmp	r3, #0
 800138a:	d003      	beq.n	8001394 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800138c:	6878      	ldr	r0, [r7, #4]
 800138e:	f000 f983 	bl	8001698 <HAL_CAN_TxMailbox0CompleteCallback>
 8001392:	e016      	b.n	80013c2 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001394:	69bb      	ldr	r3, [r7, #24]
 8001396:	f003 0304 	and.w	r3, r3, #4
 800139a:	2b00      	cmp	r3, #0
 800139c:	d004      	beq.n	80013a8 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800139e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80013a4:	627b      	str	r3, [r7, #36]	; 0x24
 80013a6:	e00c      	b.n	80013c2 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80013a8:	69bb      	ldr	r3, [r7, #24]
 80013aa:	f003 0308 	and.w	r3, r3, #8
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d004      	beq.n	80013bc <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80013b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013b8:	627b      	str	r3, [r7, #36]	; 0x24
 80013ba:	e002      	b.n	80013c2 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	f000 f989 	bl	80016d4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80013c2:	69bb      	ldr	r3, [r7, #24]
 80013c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d024      	beq.n	8001416 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013d4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80013d6:	69bb      	ldr	r3, [r7, #24]
 80013d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d003      	beq.n	80013e8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	f000 f963 	bl	80016ac <HAL_CAN_TxMailbox1CompleteCallback>
 80013e6:	e016      	b.n	8001416 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80013e8:	69bb      	ldr	r3, [r7, #24]
 80013ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d004      	beq.n	80013fc <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80013f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80013f8:	627b      	str	r3, [r7, #36]	; 0x24
 80013fa:	e00c      	b.n	8001416 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001402:	2b00      	cmp	r3, #0
 8001404:	d004      	beq.n	8001410 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001408:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800140c:	627b      	str	r3, [r7, #36]	; 0x24
 800140e:	e002      	b.n	8001416 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	f000 f969 	bl	80016e8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001416:	69bb      	ldr	r3, [r7, #24]
 8001418:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800141c:	2b00      	cmp	r3, #0
 800141e:	d024      	beq.n	800146a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001428:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001430:	2b00      	cmp	r3, #0
 8001432:	d003      	beq.n	800143c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f000 f943 	bl	80016c0 <HAL_CAN_TxMailbox2CompleteCallback>
 800143a:	e016      	b.n	800146a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800143c:	69bb      	ldr	r3, [r7, #24]
 800143e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d004      	beq.n	8001450 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001448:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800144c:	627b      	str	r3, [r7, #36]	; 0x24
 800144e:	e00c      	b.n	800146a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001450:	69bb      	ldr	r3, [r7, #24]
 8001452:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d004      	beq.n	8001464 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800145a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800145c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001460:	627b      	str	r3, [r7, #36]	; 0x24
 8001462:	e002      	b.n	800146a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	f000 f949 	bl	80016fc <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800146a:	6a3b      	ldr	r3, [r7, #32]
 800146c:	f003 0308 	and.w	r3, r3, #8
 8001470:	2b00      	cmp	r3, #0
 8001472:	d00c      	beq.n	800148e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	f003 0310 	and.w	r3, r3, #16
 800147a:	2b00      	cmp	r3, #0
 800147c:	d007      	beq.n	800148e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800147e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001480:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001484:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	2210      	movs	r2, #16
 800148c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800148e:	6a3b      	ldr	r3, [r7, #32]
 8001490:	f003 0304 	and.w	r3, r3, #4
 8001494:	2b00      	cmp	r3, #0
 8001496:	d00b      	beq.n	80014b0 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	f003 0308 	and.w	r3, r3, #8
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d006      	beq.n	80014b0 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	2208      	movs	r2, #8
 80014a8:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f000 f93a 	bl	8001724 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80014b0:	6a3b      	ldr	r3, [r7, #32]
 80014b2:	f003 0302 	and.w	r3, r3, #2
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d009      	beq.n	80014ce <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	f003 0303 	and.w	r3, r3, #3
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d002      	beq.n	80014ce <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80014c8:	6878      	ldr	r0, [r7, #4]
 80014ca:	f000 f921 	bl	8001710 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80014ce:	6a3b      	ldr	r3, [r7, #32]
 80014d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d00c      	beq.n	80014f2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	f003 0310 	and.w	r3, r3, #16
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d007      	beq.n	80014f2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80014e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014e8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	2210      	movs	r2, #16
 80014f0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80014f2:	6a3b      	ldr	r3, [r7, #32]
 80014f4:	f003 0320 	and.w	r3, r3, #32
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d00b      	beq.n	8001514 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	f003 0308 	and.w	r3, r3, #8
 8001502:	2b00      	cmp	r3, #0
 8001504:	d006      	beq.n	8001514 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	2208      	movs	r2, #8
 800150c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f000 f91c 	bl	800174c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001514:	6a3b      	ldr	r3, [r7, #32]
 8001516:	f003 0310 	and.w	r3, r3, #16
 800151a:	2b00      	cmp	r3, #0
 800151c:	d009      	beq.n	8001532 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	691b      	ldr	r3, [r3, #16]
 8001524:	f003 0303 	and.w	r3, r3, #3
 8001528:	2b00      	cmp	r3, #0
 800152a:	d002      	beq.n	8001532 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f000 f903 	bl	8001738 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001532:	6a3b      	ldr	r3, [r7, #32]
 8001534:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001538:	2b00      	cmp	r3, #0
 800153a:	d00b      	beq.n	8001554 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	f003 0310 	and.w	r3, r3, #16
 8001542:	2b00      	cmp	r3, #0
 8001544:	d006      	beq.n	8001554 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	2210      	movs	r2, #16
 800154c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	f000 f906 	bl	8001760 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001554:	6a3b      	ldr	r3, [r7, #32]
 8001556:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d00b      	beq.n	8001576 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	f003 0308 	and.w	r3, r3, #8
 8001564:	2b00      	cmp	r3, #0
 8001566:	d006      	beq.n	8001576 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	2208      	movs	r2, #8
 800156e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f000 f8ff 	bl	8001774 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001576:	6a3b      	ldr	r3, [r7, #32]
 8001578:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800157c:	2b00      	cmp	r3, #0
 800157e:	d07b      	beq.n	8001678 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	f003 0304 	and.w	r3, r3, #4
 8001586:	2b00      	cmp	r3, #0
 8001588:	d072      	beq.n	8001670 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800158a:	6a3b      	ldr	r3, [r7, #32]
 800158c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001590:	2b00      	cmp	r3, #0
 8001592:	d008      	beq.n	80015a6 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800159a:	2b00      	cmp	r3, #0
 800159c:	d003      	beq.n	80015a6 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800159e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a0:	f043 0301 	orr.w	r3, r3, #1
 80015a4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80015a6:	6a3b      	ldr	r3, [r7, #32]
 80015a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d008      	beq.n	80015c2 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d003      	beq.n	80015c2 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80015ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015bc:	f043 0302 	orr.w	r3, r3, #2
 80015c0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80015c2:	6a3b      	ldr	r3, [r7, #32]
 80015c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d008      	beq.n	80015de <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d003      	beq.n	80015de <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80015d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d8:	f043 0304 	orr.w	r3, r3, #4
 80015dc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80015de:	6a3b      	ldr	r3, [r7, #32]
 80015e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d043      	beq.n	8001670 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d03e      	beq.n	8001670 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80015f8:	2b60      	cmp	r3, #96	; 0x60
 80015fa:	d02b      	beq.n	8001654 <HAL_CAN_IRQHandler+0x32a>
 80015fc:	2b60      	cmp	r3, #96	; 0x60
 80015fe:	d82e      	bhi.n	800165e <HAL_CAN_IRQHandler+0x334>
 8001600:	2b50      	cmp	r3, #80	; 0x50
 8001602:	d022      	beq.n	800164a <HAL_CAN_IRQHandler+0x320>
 8001604:	2b50      	cmp	r3, #80	; 0x50
 8001606:	d82a      	bhi.n	800165e <HAL_CAN_IRQHandler+0x334>
 8001608:	2b40      	cmp	r3, #64	; 0x40
 800160a:	d019      	beq.n	8001640 <HAL_CAN_IRQHandler+0x316>
 800160c:	2b40      	cmp	r3, #64	; 0x40
 800160e:	d826      	bhi.n	800165e <HAL_CAN_IRQHandler+0x334>
 8001610:	2b30      	cmp	r3, #48	; 0x30
 8001612:	d010      	beq.n	8001636 <HAL_CAN_IRQHandler+0x30c>
 8001614:	2b30      	cmp	r3, #48	; 0x30
 8001616:	d822      	bhi.n	800165e <HAL_CAN_IRQHandler+0x334>
 8001618:	2b10      	cmp	r3, #16
 800161a:	d002      	beq.n	8001622 <HAL_CAN_IRQHandler+0x2f8>
 800161c:	2b20      	cmp	r3, #32
 800161e:	d005      	beq.n	800162c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001620:	e01d      	b.n	800165e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001624:	f043 0308 	orr.w	r3, r3, #8
 8001628:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800162a:	e019      	b.n	8001660 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800162c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162e:	f043 0310 	orr.w	r3, r3, #16
 8001632:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001634:	e014      	b.n	8001660 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001638:	f043 0320 	orr.w	r3, r3, #32
 800163c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800163e:	e00f      	b.n	8001660 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001642:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001646:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001648:	e00a      	b.n	8001660 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800164a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001650:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001652:	e005      	b.n	8001660 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001656:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800165a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800165c:	e000      	b.n	8001660 <HAL_CAN_IRQHandler+0x336>
            break;
 800165e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	699a      	ldr	r2, [r3, #24]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800166e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	2204      	movs	r2, #4
 8001676:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167a:	2b00      	cmp	r3, #0
 800167c:	d008      	beq.n	8001690 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001684:	431a      	orrs	r2, r3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f000 f87c 	bl	8001788 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001690:	bf00      	nop
 8001692:	3728      	adds	r7, #40	; 0x28
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}

08001698 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80016a0:	bf00      	nop
 80016a2:	370c      	adds	r7, #12
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr

080016ac <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80016b4:	bf00      	nop
 80016b6:	370c      	adds	r7, #12
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr

080016c0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80016c8:	bf00      	nop
 80016ca:	370c      	adds	r7, #12
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr

080016d4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80016dc:	bf00      	nop
 80016de:	370c      	adds	r7, #12
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80016f0:	bf00      	nop
 80016f2:	370c      	adds	r7, #12
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr

080016fc <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001704:	bf00      	nop
 8001706:	370c      	adds	r7, #12
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr

08001710 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001718:	bf00      	nop
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr

08001724 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800172c:	bf00      	nop
 800172e:	370c      	adds	r7, #12
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001740:	bf00      	nop
 8001742:	370c      	adds	r7, #12
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr

0800174c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001754:	bf00      	nop
 8001756:	370c      	adds	r7, #12
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001768:	bf00      	nop
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr

08001774 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800177c:	bf00      	nop
 800177e:	370c      	adds	r7, #12
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001790:	bf00      	nop
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800179c:	b480      	push	{r7}
 800179e:	b085      	sub	sp, #20
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	f003 0307 	and.w	r3, r3, #7
 80017aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017ac:	4b0c      	ldr	r3, [pc, #48]	; (80017e0 <__NVIC_SetPriorityGrouping+0x44>)
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017b2:	68ba      	ldr	r2, [r7, #8]
 80017b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017b8:	4013      	ands	r3, r2
 80017ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017ce:	4a04      	ldr	r2, [pc, #16]	; (80017e0 <__NVIC_SetPriorityGrouping+0x44>)
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	60d3      	str	r3, [r2, #12]
}
 80017d4:	bf00      	nop
 80017d6:	3714      	adds	r7, #20
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr
 80017e0:	e000ed00 	.word	0xe000ed00

080017e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017e8:	4b04      	ldr	r3, [pc, #16]	; (80017fc <__NVIC_GetPriorityGrouping+0x18>)
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	0a1b      	lsrs	r3, r3, #8
 80017ee:	f003 0307 	and.w	r3, r3, #7
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr
 80017fc:	e000ed00 	.word	0xe000ed00

08001800 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	4603      	mov	r3, r0
 8001808:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800180a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180e:	2b00      	cmp	r3, #0
 8001810:	db0b      	blt.n	800182a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001812:	79fb      	ldrb	r3, [r7, #7]
 8001814:	f003 021f 	and.w	r2, r3, #31
 8001818:	4907      	ldr	r1, [pc, #28]	; (8001838 <__NVIC_EnableIRQ+0x38>)
 800181a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181e:	095b      	lsrs	r3, r3, #5
 8001820:	2001      	movs	r0, #1
 8001822:	fa00 f202 	lsl.w	r2, r0, r2
 8001826:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800182a:	bf00      	nop
 800182c:	370c      	adds	r7, #12
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	e000e100 	.word	0xe000e100

0800183c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	4603      	mov	r3, r0
 8001844:	6039      	str	r1, [r7, #0]
 8001846:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001848:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184c:	2b00      	cmp	r3, #0
 800184e:	db0a      	blt.n	8001866 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	b2da      	uxtb	r2, r3
 8001854:	490c      	ldr	r1, [pc, #48]	; (8001888 <__NVIC_SetPriority+0x4c>)
 8001856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185a:	0112      	lsls	r2, r2, #4
 800185c:	b2d2      	uxtb	r2, r2
 800185e:	440b      	add	r3, r1
 8001860:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001864:	e00a      	b.n	800187c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	b2da      	uxtb	r2, r3
 800186a:	4908      	ldr	r1, [pc, #32]	; (800188c <__NVIC_SetPriority+0x50>)
 800186c:	79fb      	ldrb	r3, [r7, #7]
 800186e:	f003 030f 	and.w	r3, r3, #15
 8001872:	3b04      	subs	r3, #4
 8001874:	0112      	lsls	r2, r2, #4
 8001876:	b2d2      	uxtb	r2, r2
 8001878:	440b      	add	r3, r1
 800187a:	761a      	strb	r2, [r3, #24]
}
 800187c:	bf00      	nop
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr
 8001888:	e000e100 	.word	0xe000e100
 800188c:	e000ed00 	.word	0xe000ed00

08001890 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001890:	b480      	push	{r7}
 8001892:	b089      	sub	sp, #36	; 0x24
 8001894:	af00      	add	r7, sp, #0
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	60b9      	str	r1, [r7, #8]
 800189a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	f003 0307 	and.w	r3, r3, #7
 80018a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	f1c3 0307 	rsb	r3, r3, #7
 80018aa:	2b04      	cmp	r3, #4
 80018ac:	bf28      	it	cs
 80018ae:	2304      	movcs	r3, #4
 80018b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	3304      	adds	r3, #4
 80018b6:	2b06      	cmp	r3, #6
 80018b8:	d902      	bls.n	80018c0 <NVIC_EncodePriority+0x30>
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	3b03      	subs	r3, #3
 80018be:	e000      	b.n	80018c2 <NVIC_EncodePriority+0x32>
 80018c0:	2300      	movs	r3, #0
 80018c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	fa02 f303 	lsl.w	r3, r2, r3
 80018ce:	43da      	mvns	r2, r3
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	401a      	ands	r2, r3
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	fa01 f303 	lsl.w	r3, r1, r3
 80018e2:	43d9      	mvns	r1, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e8:	4313      	orrs	r3, r2
         );
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3724      	adds	r7, #36	; 0x24
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
	...

080018f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	3b01      	subs	r3, #1
 8001904:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001908:	d301      	bcc.n	800190e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800190a:	2301      	movs	r3, #1
 800190c:	e00f      	b.n	800192e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800190e:	4a0a      	ldr	r2, [pc, #40]	; (8001938 <SysTick_Config+0x40>)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	3b01      	subs	r3, #1
 8001914:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001916:	210f      	movs	r1, #15
 8001918:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800191c:	f7ff ff8e 	bl	800183c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001920:	4b05      	ldr	r3, [pc, #20]	; (8001938 <SysTick_Config+0x40>)
 8001922:	2200      	movs	r2, #0
 8001924:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001926:	4b04      	ldr	r3, [pc, #16]	; (8001938 <SysTick_Config+0x40>)
 8001928:	2207      	movs	r2, #7
 800192a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800192c:	2300      	movs	r3, #0
}
 800192e:	4618      	mov	r0, r3
 8001930:	3708      	adds	r7, #8
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	e000e010 	.word	0xe000e010

0800193c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f7ff ff29 	bl	800179c <__NVIC_SetPriorityGrouping>
}
 800194a:	bf00      	nop
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}

08001952 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001952:	b580      	push	{r7, lr}
 8001954:	b086      	sub	sp, #24
 8001956:	af00      	add	r7, sp, #0
 8001958:	4603      	mov	r3, r0
 800195a:	60b9      	str	r1, [r7, #8]
 800195c:	607a      	str	r2, [r7, #4]
 800195e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001960:	2300      	movs	r3, #0
 8001962:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001964:	f7ff ff3e 	bl	80017e4 <__NVIC_GetPriorityGrouping>
 8001968:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	68b9      	ldr	r1, [r7, #8]
 800196e:	6978      	ldr	r0, [r7, #20]
 8001970:	f7ff ff8e 	bl	8001890 <NVIC_EncodePriority>
 8001974:	4602      	mov	r2, r0
 8001976:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800197a:	4611      	mov	r1, r2
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff ff5d 	bl	800183c <__NVIC_SetPriority>
}
 8001982:	bf00      	nop
 8001984:	3718      	adds	r7, #24
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800198a:	b580      	push	{r7, lr}
 800198c:	b082      	sub	sp, #8
 800198e:	af00      	add	r7, sp, #0
 8001990:	4603      	mov	r3, r0
 8001992:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001994:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff ff31 	bl	8001800 <__NVIC_EnableIRQ>
}
 800199e:	bf00      	nop
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b082      	sub	sp, #8
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f7ff ffa2 	bl	80018f8 <SysTick_Config>
 80019b4:	4603      	mov	r3, r0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
	...

080019c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b089      	sub	sp, #36	; 0x24
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019ca:	2300      	movs	r3, #0
 80019cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019ce:	2300      	movs	r3, #0
 80019d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019d2:	2300      	movs	r3, #0
 80019d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019d6:	2300      	movs	r3, #0
 80019d8:	61fb      	str	r3, [r7, #28]
 80019da:	e165      	b.n	8001ca8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019dc:	2201      	movs	r2, #1
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	fa02 f303 	lsl.w	r3, r2, r3
 80019e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	697a      	ldr	r2, [r7, #20]
 80019ec:	4013      	ands	r3, r2
 80019ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019f0:	693a      	ldr	r2, [r7, #16]
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	f040 8154 	bne.w	8001ca2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f003 0303 	and.w	r3, r3, #3
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d005      	beq.n	8001a12 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	d130      	bne.n	8001a74 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	005b      	lsls	r3, r3, #1
 8001a1c:	2203      	movs	r2, #3
 8001a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a22:	43db      	mvns	r3, r3
 8001a24:	69ba      	ldr	r2, [r7, #24]
 8001a26:	4013      	ands	r3, r2
 8001a28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	68da      	ldr	r2, [r3, #12]
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	005b      	lsls	r3, r3, #1
 8001a32:	fa02 f303 	lsl.w	r3, r2, r3
 8001a36:	69ba      	ldr	r2, [r7, #24]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	69ba      	ldr	r2, [r7, #24]
 8001a40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a48:	2201      	movs	r2, #1
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a50:	43db      	mvns	r3, r3
 8001a52:	69ba      	ldr	r2, [r7, #24]
 8001a54:	4013      	ands	r3, r2
 8001a56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	091b      	lsrs	r3, r3, #4
 8001a5e:	f003 0201 	and.w	r2, r3, #1
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	fa02 f303 	lsl.w	r3, r2, r3
 8001a68:	69ba      	ldr	r2, [r7, #24]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f003 0303 	and.w	r3, r3, #3
 8001a7c:	2b03      	cmp	r3, #3
 8001a7e:	d017      	beq.n	8001ab0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	005b      	lsls	r3, r3, #1
 8001a8a:	2203      	movs	r2, #3
 8001a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a90:	43db      	mvns	r3, r3
 8001a92:	69ba      	ldr	r2, [r7, #24]
 8001a94:	4013      	ands	r3, r2
 8001a96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	689a      	ldr	r2, [r3, #8]
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	005b      	lsls	r3, r3, #1
 8001aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f003 0303 	and.w	r3, r3, #3
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d123      	bne.n	8001b04 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	08da      	lsrs	r2, r3, #3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	3208      	adds	r2, #8
 8001ac4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ac8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	f003 0307 	and.w	r3, r3, #7
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	220f      	movs	r2, #15
 8001ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad8:	43db      	mvns	r3, r3
 8001ada:	69ba      	ldr	r2, [r7, #24]
 8001adc:	4013      	ands	r3, r2
 8001ade:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	691a      	ldr	r2, [r3, #16]
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	f003 0307 	and.w	r3, r3, #7
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	4313      	orrs	r3, r2
 8001af4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	08da      	lsrs	r2, r3, #3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	3208      	adds	r2, #8
 8001afe:	69b9      	ldr	r1, [r7, #24]
 8001b00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	2203      	movs	r2, #3
 8001b10:	fa02 f303 	lsl.w	r3, r2, r3
 8001b14:	43db      	mvns	r3, r3
 8001b16:	69ba      	ldr	r2, [r7, #24]
 8001b18:	4013      	ands	r3, r2
 8001b1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f003 0203 	and.w	r2, r3, #3
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	005b      	lsls	r3, r3, #1
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	f000 80ae 	beq.w	8001ca2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b46:	2300      	movs	r3, #0
 8001b48:	60fb      	str	r3, [r7, #12]
 8001b4a:	4b5d      	ldr	r3, [pc, #372]	; (8001cc0 <HAL_GPIO_Init+0x300>)
 8001b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b4e:	4a5c      	ldr	r2, [pc, #368]	; (8001cc0 <HAL_GPIO_Init+0x300>)
 8001b50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b54:	6453      	str	r3, [r2, #68]	; 0x44
 8001b56:	4b5a      	ldr	r3, [pc, #360]	; (8001cc0 <HAL_GPIO_Init+0x300>)
 8001b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b5e:	60fb      	str	r3, [r7, #12]
 8001b60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b62:	4a58      	ldr	r2, [pc, #352]	; (8001cc4 <HAL_GPIO_Init+0x304>)
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	089b      	lsrs	r3, r3, #2
 8001b68:	3302      	adds	r3, #2
 8001b6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	f003 0303 	and.w	r3, r3, #3
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	220f      	movs	r2, #15
 8001b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7e:	43db      	mvns	r3, r3
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	4013      	ands	r3, r2
 8001b84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4a4f      	ldr	r2, [pc, #316]	; (8001cc8 <HAL_GPIO_Init+0x308>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d025      	beq.n	8001bda <HAL_GPIO_Init+0x21a>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4a4e      	ldr	r2, [pc, #312]	; (8001ccc <HAL_GPIO_Init+0x30c>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d01f      	beq.n	8001bd6 <HAL_GPIO_Init+0x216>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4a4d      	ldr	r2, [pc, #308]	; (8001cd0 <HAL_GPIO_Init+0x310>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d019      	beq.n	8001bd2 <HAL_GPIO_Init+0x212>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4a4c      	ldr	r2, [pc, #304]	; (8001cd4 <HAL_GPIO_Init+0x314>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d013      	beq.n	8001bce <HAL_GPIO_Init+0x20e>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a4b      	ldr	r2, [pc, #300]	; (8001cd8 <HAL_GPIO_Init+0x318>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d00d      	beq.n	8001bca <HAL_GPIO_Init+0x20a>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a4a      	ldr	r2, [pc, #296]	; (8001cdc <HAL_GPIO_Init+0x31c>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d007      	beq.n	8001bc6 <HAL_GPIO_Init+0x206>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a49      	ldr	r2, [pc, #292]	; (8001ce0 <HAL_GPIO_Init+0x320>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d101      	bne.n	8001bc2 <HAL_GPIO_Init+0x202>
 8001bbe:	2306      	movs	r3, #6
 8001bc0:	e00c      	b.n	8001bdc <HAL_GPIO_Init+0x21c>
 8001bc2:	2307      	movs	r3, #7
 8001bc4:	e00a      	b.n	8001bdc <HAL_GPIO_Init+0x21c>
 8001bc6:	2305      	movs	r3, #5
 8001bc8:	e008      	b.n	8001bdc <HAL_GPIO_Init+0x21c>
 8001bca:	2304      	movs	r3, #4
 8001bcc:	e006      	b.n	8001bdc <HAL_GPIO_Init+0x21c>
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e004      	b.n	8001bdc <HAL_GPIO_Init+0x21c>
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	e002      	b.n	8001bdc <HAL_GPIO_Init+0x21c>
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e000      	b.n	8001bdc <HAL_GPIO_Init+0x21c>
 8001bda:	2300      	movs	r3, #0
 8001bdc:	69fa      	ldr	r2, [r7, #28]
 8001bde:	f002 0203 	and.w	r2, r2, #3
 8001be2:	0092      	lsls	r2, r2, #2
 8001be4:	4093      	lsls	r3, r2
 8001be6:	69ba      	ldr	r2, [r7, #24]
 8001be8:	4313      	orrs	r3, r2
 8001bea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bec:	4935      	ldr	r1, [pc, #212]	; (8001cc4 <HAL_GPIO_Init+0x304>)
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	089b      	lsrs	r3, r3, #2
 8001bf2:	3302      	adds	r3, #2
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bfa:	4b3a      	ldr	r3, [pc, #232]	; (8001ce4 <HAL_GPIO_Init+0x324>)
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	43db      	mvns	r3, r3
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	4013      	ands	r3, r2
 8001c08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d003      	beq.n	8001c1e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c1e:	4a31      	ldr	r2, [pc, #196]	; (8001ce4 <HAL_GPIO_Init+0x324>)
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c24:	4b2f      	ldr	r3, [pc, #188]	; (8001ce4 <HAL_GPIO_Init+0x324>)
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	43db      	mvns	r3, r3
 8001c2e:	69ba      	ldr	r2, [r7, #24]
 8001c30:	4013      	ands	r3, r2
 8001c32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d003      	beq.n	8001c48 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c48:	4a26      	ldr	r2, [pc, #152]	; (8001ce4 <HAL_GPIO_Init+0x324>)
 8001c4a:	69bb      	ldr	r3, [r7, #24]
 8001c4c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c4e:	4b25      	ldr	r3, [pc, #148]	; (8001ce4 <HAL_GPIO_Init+0x324>)
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	43db      	mvns	r3, r3
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d003      	beq.n	8001c72 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001c6a:	69ba      	ldr	r2, [r7, #24]
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c72:	4a1c      	ldr	r2, [pc, #112]	; (8001ce4 <HAL_GPIO_Init+0x324>)
 8001c74:	69bb      	ldr	r3, [r7, #24]
 8001c76:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c78:	4b1a      	ldr	r3, [pc, #104]	; (8001ce4 <HAL_GPIO_Init+0x324>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	43db      	mvns	r3, r3
 8001c82:	69ba      	ldr	r2, [r7, #24]
 8001c84:	4013      	ands	r3, r2
 8001c86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d003      	beq.n	8001c9c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c9c:	4a11      	ldr	r2, [pc, #68]	; (8001ce4 <HAL_GPIO_Init+0x324>)
 8001c9e:	69bb      	ldr	r3, [r7, #24]
 8001ca0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	61fb      	str	r3, [r7, #28]
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	2b0f      	cmp	r3, #15
 8001cac:	f67f ae96 	bls.w	80019dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001cb0:	bf00      	nop
 8001cb2:	bf00      	nop
 8001cb4:	3724      	adds	r7, #36	; 0x24
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	40023800 	.word	0x40023800
 8001cc4:	40013800 	.word	0x40013800
 8001cc8:	40020000 	.word	0x40020000
 8001ccc:	40020400 	.word	0x40020400
 8001cd0:	40020800 	.word	0x40020800
 8001cd4:	40020c00 	.word	0x40020c00
 8001cd8:	40021000 	.word	0x40021000
 8001cdc:	40021400 	.word	0x40021400
 8001ce0:	40021800 	.word	0x40021800
 8001ce4:	40013c00 	.word	0x40013c00

08001ce8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	807b      	strh	r3, [r7, #2]
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cf8:	787b      	ldrb	r3, [r7, #1]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d003      	beq.n	8001d06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cfe:	887a      	ldrh	r2, [r7, #2]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d04:	e003      	b.n	8001d0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d06:	887b      	ldrh	r3, [r7, #2]
 8001d08:	041a      	lsls	r2, r3, #16
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	619a      	str	r2, [r3, #24]
}
 8001d0e:	bf00      	nop
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
	...

08001d1c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001d22:	2300      	movs	r3, #0
 8001d24:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001d26:	2300      	movs	r3, #0
 8001d28:	603b      	str	r3, [r7, #0]
 8001d2a:	4b20      	ldr	r3, [pc, #128]	; (8001dac <HAL_PWREx_EnableOverDrive+0x90>)
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2e:	4a1f      	ldr	r2, [pc, #124]	; (8001dac <HAL_PWREx_EnableOverDrive+0x90>)
 8001d30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d34:	6413      	str	r3, [r2, #64]	; 0x40
 8001d36:	4b1d      	ldr	r3, [pc, #116]	; (8001dac <HAL_PWREx_EnableOverDrive+0x90>)
 8001d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d3e:	603b      	str	r3, [r7, #0]
 8001d40:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001d42:	4b1b      	ldr	r3, [pc, #108]	; (8001db0 <HAL_PWREx_EnableOverDrive+0x94>)
 8001d44:	2201      	movs	r2, #1
 8001d46:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d48:	f7ff f9c4 	bl	80010d4 <HAL_GetTick>
 8001d4c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001d4e:	e009      	b.n	8001d64 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001d50:	f7ff f9c0 	bl	80010d4 <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d5e:	d901      	bls.n	8001d64 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001d60:	2303      	movs	r3, #3
 8001d62:	e01f      	b.n	8001da4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001d64:	4b13      	ldr	r3, [pc, #76]	; (8001db4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d70:	d1ee      	bne.n	8001d50 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001d72:	4b11      	ldr	r3, [pc, #68]	; (8001db8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001d74:	2201      	movs	r2, #1
 8001d76:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d78:	f7ff f9ac 	bl	80010d4 <HAL_GetTick>
 8001d7c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001d7e:	e009      	b.n	8001d94 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001d80:	f7ff f9a8 	bl	80010d4 <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d8e:	d901      	bls.n	8001d94 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001d90:	2303      	movs	r3, #3
 8001d92:	e007      	b.n	8001da4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001d94:	4b07      	ldr	r3, [pc, #28]	; (8001db4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001da0:	d1ee      	bne.n	8001d80 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001da2:	2300      	movs	r3, #0
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3708      	adds	r7, #8
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	40023800 	.word	0x40023800
 8001db0:	420e0040 	.word	0x420e0040
 8001db4:	40007000 	.word	0x40007000
 8001db8:	420e0044 	.word	0x420e0044

08001dbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d101      	bne.n	8001dd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e0cc      	b.n	8001f6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001dd0:	4b68      	ldr	r3, [pc, #416]	; (8001f74 <HAL_RCC_ClockConfig+0x1b8>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 030f 	and.w	r3, r3, #15
 8001dd8:	683a      	ldr	r2, [r7, #0]
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d90c      	bls.n	8001df8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dde:	4b65      	ldr	r3, [pc, #404]	; (8001f74 <HAL_RCC_ClockConfig+0x1b8>)
 8001de0:	683a      	ldr	r2, [r7, #0]
 8001de2:	b2d2      	uxtb	r2, r2
 8001de4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001de6:	4b63      	ldr	r3, [pc, #396]	; (8001f74 <HAL_RCC_ClockConfig+0x1b8>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 030f 	and.w	r3, r3, #15
 8001dee:	683a      	ldr	r2, [r7, #0]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d001      	beq.n	8001df8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e0b8      	b.n	8001f6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0302 	and.w	r3, r3, #2
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d020      	beq.n	8001e46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 0304 	and.w	r3, r3, #4
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d005      	beq.n	8001e1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e10:	4b59      	ldr	r3, [pc, #356]	; (8001f78 <HAL_RCC_ClockConfig+0x1bc>)
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	4a58      	ldr	r2, [pc, #352]	; (8001f78 <HAL_RCC_ClockConfig+0x1bc>)
 8001e16:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001e1a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 0308 	and.w	r3, r3, #8
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d005      	beq.n	8001e34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e28:	4b53      	ldr	r3, [pc, #332]	; (8001f78 <HAL_RCC_ClockConfig+0x1bc>)
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	4a52      	ldr	r2, [pc, #328]	; (8001f78 <HAL_RCC_ClockConfig+0x1bc>)
 8001e2e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001e32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e34:	4b50      	ldr	r3, [pc, #320]	; (8001f78 <HAL_RCC_ClockConfig+0x1bc>)
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	494d      	ldr	r1, [pc, #308]	; (8001f78 <HAL_RCC_ClockConfig+0x1bc>)
 8001e42:	4313      	orrs	r3, r2
 8001e44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0301 	and.w	r3, r3, #1
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d044      	beq.n	8001edc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d107      	bne.n	8001e6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e5a:	4b47      	ldr	r3, [pc, #284]	; (8001f78 <HAL_RCC_ClockConfig+0x1bc>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d119      	bne.n	8001e9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e07f      	b.n	8001f6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d003      	beq.n	8001e7a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e76:	2b03      	cmp	r3, #3
 8001e78:	d107      	bne.n	8001e8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e7a:	4b3f      	ldr	r3, [pc, #252]	; (8001f78 <HAL_RCC_ClockConfig+0x1bc>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d109      	bne.n	8001e9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e06f      	b.n	8001f6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e8a:	4b3b      	ldr	r3, [pc, #236]	; (8001f78 <HAL_RCC_ClockConfig+0x1bc>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0302 	and.w	r3, r3, #2
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d101      	bne.n	8001e9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e067      	b.n	8001f6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e9a:	4b37      	ldr	r3, [pc, #220]	; (8001f78 <HAL_RCC_ClockConfig+0x1bc>)
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	f023 0203 	bic.w	r2, r3, #3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	4934      	ldr	r1, [pc, #208]	; (8001f78 <HAL_RCC_ClockConfig+0x1bc>)
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001eac:	f7ff f912 	bl	80010d4 <HAL_GetTick>
 8001eb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eb2:	e00a      	b.n	8001eca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001eb4:	f7ff f90e 	bl	80010d4 <HAL_GetTick>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d901      	bls.n	8001eca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e04f      	b.n	8001f6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eca:	4b2b      	ldr	r3, [pc, #172]	; (8001f78 <HAL_RCC_ClockConfig+0x1bc>)
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	f003 020c 	and.w	r2, r3, #12
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d1eb      	bne.n	8001eb4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001edc:	4b25      	ldr	r3, [pc, #148]	; (8001f74 <HAL_RCC_ClockConfig+0x1b8>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 030f 	and.w	r3, r3, #15
 8001ee4:	683a      	ldr	r2, [r7, #0]
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d20c      	bcs.n	8001f04 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eea:	4b22      	ldr	r3, [pc, #136]	; (8001f74 <HAL_RCC_ClockConfig+0x1b8>)
 8001eec:	683a      	ldr	r2, [r7, #0]
 8001eee:	b2d2      	uxtb	r2, r2
 8001ef0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ef2:	4b20      	ldr	r3, [pc, #128]	; (8001f74 <HAL_RCC_ClockConfig+0x1b8>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 030f 	and.w	r3, r3, #15
 8001efa:	683a      	ldr	r2, [r7, #0]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d001      	beq.n	8001f04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e032      	b.n	8001f6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0304 	and.w	r3, r3, #4
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d008      	beq.n	8001f22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f10:	4b19      	ldr	r3, [pc, #100]	; (8001f78 <HAL_RCC_ClockConfig+0x1bc>)
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	4916      	ldr	r1, [pc, #88]	; (8001f78 <HAL_RCC_ClockConfig+0x1bc>)
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0308 	and.w	r3, r3, #8
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d009      	beq.n	8001f42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f2e:	4b12      	ldr	r3, [pc, #72]	; (8001f78 <HAL_RCC_ClockConfig+0x1bc>)
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	691b      	ldr	r3, [r3, #16]
 8001f3a:	00db      	lsls	r3, r3, #3
 8001f3c:	490e      	ldr	r1, [pc, #56]	; (8001f78 <HAL_RCC_ClockConfig+0x1bc>)
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f42:	f000 f855 	bl	8001ff0 <HAL_RCC_GetSysClockFreq>
 8001f46:	4602      	mov	r2, r0
 8001f48:	4b0b      	ldr	r3, [pc, #44]	; (8001f78 <HAL_RCC_ClockConfig+0x1bc>)
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	091b      	lsrs	r3, r3, #4
 8001f4e:	f003 030f 	and.w	r3, r3, #15
 8001f52:	490a      	ldr	r1, [pc, #40]	; (8001f7c <HAL_RCC_ClockConfig+0x1c0>)
 8001f54:	5ccb      	ldrb	r3, [r1, r3]
 8001f56:	fa22 f303 	lsr.w	r3, r2, r3
 8001f5a:	4a09      	ldr	r2, [pc, #36]	; (8001f80 <HAL_RCC_ClockConfig+0x1c4>)
 8001f5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001f5e:	4b09      	ldr	r3, [pc, #36]	; (8001f84 <HAL_RCC_ClockConfig+0x1c8>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7ff f872 	bl	800104c <HAL_InitTick>

  return HAL_OK;
 8001f68:	2300      	movs	r3, #0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3710      	adds	r7, #16
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	40023c00 	.word	0x40023c00
 8001f78:	40023800 	.word	0x40023800
 8001f7c:	08003d30 	.word	0x08003d30
 8001f80:	20000000 	.word	0x20000000
 8001f84:	20000004 	.word	0x20000004

08001f88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f8c:	4b03      	ldr	r3, [pc, #12]	; (8001f9c <HAL_RCC_GetHCLKFreq+0x14>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	20000000 	.word	0x20000000

08001fa0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001fa4:	f7ff fff0 	bl	8001f88 <HAL_RCC_GetHCLKFreq>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	4b05      	ldr	r3, [pc, #20]	; (8001fc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	0a9b      	lsrs	r3, r3, #10
 8001fb0:	f003 0307 	and.w	r3, r3, #7
 8001fb4:	4903      	ldr	r1, [pc, #12]	; (8001fc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fb6:	5ccb      	ldrb	r3, [r1, r3]
 8001fb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	40023800 	.word	0x40023800
 8001fc4:	08003d40 	.word	0x08003d40

08001fc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001fcc:	f7ff ffdc 	bl	8001f88 <HAL_RCC_GetHCLKFreq>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	4b05      	ldr	r3, [pc, #20]	; (8001fe8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	0b5b      	lsrs	r3, r3, #13
 8001fd8:	f003 0307 	and.w	r3, r3, #7
 8001fdc:	4903      	ldr	r1, [pc, #12]	; (8001fec <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fde:	5ccb      	ldrb	r3, [r1, r3]
 8001fe0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	40023800 	.word	0x40023800
 8001fec:	08003d40 	.word	0x08003d40

08001ff0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ff0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ff4:	b0ae      	sub	sp, #184	; 0xb8
 8001ff6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001ffe:	2300      	movs	r3, #0
 8002000:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002004:	2300      	movs	r3, #0
 8002006:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800200a:	2300      	movs	r3, #0
 800200c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002010:	2300      	movs	r3, #0
 8002012:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002016:	4bcb      	ldr	r3, [pc, #812]	; (8002344 <HAL_RCC_GetSysClockFreq+0x354>)
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	f003 030c 	and.w	r3, r3, #12
 800201e:	2b0c      	cmp	r3, #12
 8002020:	f200 8206 	bhi.w	8002430 <HAL_RCC_GetSysClockFreq+0x440>
 8002024:	a201      	add	r2, pc, #4	; (adr r2, 800202c <HAL_RCC_GetSysClockFreq+0x3c>)
 8002026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800202a:	bf00      	nop
 800202c:	08002061 	.word	0x08002061
 8002030:	08002431 	.word	0x08002431
 8002034:	08002431 	.word	0x08002431
 8002038:	08002431 	.word	0x08002431
 800203c:	08002069 	.word	0x08002069
 8002040:	08002431 	.word	0x08002431
 8002044:	08002431 	.word	0x08002431
 8002048:	08002431 	.word	0x08002431
 800204c:	08002071 	.word	0x08002071
 8002050:	08002431 	.word	0x08002431
 8002054:	08002431 	.word	0x08002431
 8002058:	08002431 	.word	0x08002431
 800205c:	08002261 	.word	0x08002261
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002060:	4bb9      	ldr	r3, [pc, #740]	; (8002348 <HAL_RCC_GetSysClockFreq+0x358>)
 8002062:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002066:	e1e7      	b.n	8002438 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002068:	4bb8      	ldr	r3, [pc, #736]	; (800234c <HAL_RCC_GetSysClockFreq+0x35c>)
 800206a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800206e:	e1e3      	b.n	8002438 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002070:	4bb4      	ldr	r3, [pc, #720]	; (8002344 <HAL_RCC_GetSysClockFreq+0x354>)
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002078:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800207c:	4bb1      	ldr	r3, [pc, #708]	; (8002344 <HAL_RCC_GetSysClockFreq+0x354>)
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002084:	2b00      	cmp	r3, #0
 8002086:	d071      	beq.n	800216c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002088:	4bae      	ldr	r3, [pc, #696]	; (8002344 <HAL_RCC_GetSysClockFreq+0x354>)
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	099b      	lsrs	r3, r3, #6
 800208e:	2200      	movs	r2, #0
 8002090:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002094:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002098:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800209c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80020a4:	2300      	movs	r3, #0
 80020a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80020aa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80020ae:	4622      	mov	r2, r4
 80020b0:	462b      	mov	r3, r5
 80020b2:	f04f 0000 	mov.w	r0, #0
 80020b6:	f04f 0100 	mov.w	r1, #0
 80020ba:	0159      	lsls	r1, r3, #5
 80020bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020c0:	0150      	lsls	r0, r2, #5
 80020c2:	4602      	mov	r2, r0
 80020c4:	460b      	mov	r3, r1
 80020c6:	4621      	mov	r1, r4
 80020c8:	1a51      	subs	r1, r2, r1
 80020ca:	6439      	str	r1, [r7, #64]	; 0x40
 80020cc:	4629      	mov	r1, r5
 80020ce:	eb63 0301 	sbc.w	r3, r3, r1
 80020d2:	647b      	str	r3, [r7, #68]	; 0x44
 80020d4:	f04f 0200 	mov.w	r2, #0
 80020d8:	f04f 0300 	mov.w	r3, #0
 80020dc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80020e0:	4649      	mov	r1, r9
 80020e2:	018b      	lsls	r3, r1, #6
 80020e4:	4641      	mov	r1, r8
 80020e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80020ea:	4641      	mov	r1, r8
 80020ec:	018a      	lsls	r2, r1, #6
 80020ee:	4641      	mov	r1, r8
 80020f0:	1a51      	subs	r1, r2, r1
 80020f2:	63b9      	str	r1, [r7, #56]	; 0x38
 80020f4:	4649      	mov	r1, r9
 80020f6:	eb63 0301 	sbc.w	r3, r3, r1
 80020fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020fc:	f04f 0200 	mov.w	r2, #0
 8002100:	f04f 0300 	mov.w	r3, #0
 8002104:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002108:	4649      	mov	r1, r9
 800210a:	00cb      	lsls	r3, r1, #3
 800210c:	4641      	mov	r1, r8
 800210e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002112:	4641      	mov	r1, r8
 8002114:	00ca      	lsls	r2, r1, #3
 8002116:	4610      	mov	r0, r2
 8002118:	4619      	mov	r1, r3
 800211a:	4603      	mov	r3, r0
 800211c:	4622      	mov	r2, r4
 800211e:	189b      	adds	r3, r3, r2
 8002120:	633b      	str	r3, [r7, #48]	; 0x30
 8002122:	462b      	mov	r3, r5
 8002124:	460a      	mov	r2, r1
 8002126:	eb42 0303 	adc.w	r3, r2, r3
 800212a:	637b      	str	r3, [r7, #52]	; 0x34
 800212c:	f04f 0200 	mov.w	r2, #0
 8002130:	f04f 0300 	mov.w	r3, #0
 8002134:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002138:	4629      	mov	r1, r5
 800213a:	024b      	lsls	r3, r1, #9
 800213c:	4621      	mov	r1, r4
 800213e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002142:	4621      	mov	r1, r4
 8002144:	024a      	lsls	r2, r1, #9
 8002146:	4610      	mov	r0, r2
 8002148:	4619      	mov	r1, r3
 800214a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800214e:	2200      	movs	r2, #0
 8002150:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002154:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002158:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800215c:	f7fe f852 	bl	8000204 <__aeabi_uldivmod>
 8002160:	4602      	mov	r2, r0
 8002162:	460b      	mov	r3, r1
 8002164:	4613      	mov	r3, r2
 8002166:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800216a:	e067      	b.n	800223c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800216c:	4b75      	ldr	r3, [pc, #468]	; (8002344 <HAL_RCC_GetSysClockFreq+0x354>)
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	099b      	lsrs	r3, r3, #6
 8002172:	2200      	movs	r2, #0
 8002174:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002178:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800217c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002180:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002184:	67bb      	str	r3, [r7, #120]	; 0x78
 8002186:	2300      	movs	r3, #0
 8002188:	67fb      	str	r3, [r7, #124]	; 0x7c
 800218a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800218e:	4622      	mov	r2, r4
 8002190:	462b      	mov	r3, r5
 8002192:	f04f 0000 	mov.w	r0, #0
 8002196:	f04f 0100 	mov.w	r1, #0
 800219a:	0159      	lsls	r1, r3, #5
 800219c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021a0:	0150      	lsls	r0, r2, #5
 80021a2:	4602      	mov	r2, r0
 80021a4:	460b      	mov	r3, r1
 80021a6:	4621      	mov	r1, r4
 80021a8:	1a51      	subs	r1, r2, r1
 80021aa:	62b9      	str	r1, [r7, #40]	; 0x28
 80021ac:	4629      	mov	r1, r5
 80021ae:	eb63 0301 	sbc.w	r3, r3, r1
 80021b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021b4:	f04f 0200 	mov.w	r2, #0
 80021b8:	f04f 0300 	mov.w	r3, #0
 80021bc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80021c0:	4649      	mov	r1, r9
 80021c2:	018b      	lsls	r3, r1, #6
 80021c4:	4641      	mov	r1, r8
 80021c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80021ca:	4641      	mov	r1, r8
 80021cc:	018a      	lsls	r2, r1, #6
 80021ce:	4641      	mov	r1, r8
 80021d0:	ebb2 0a01 	subs.w	sl, r2, r1
 80021d4:	4649      	mov	r1, r9
 80021d6:	eb63 0b01 	sbc.w	fp, r3, r1
 80021da:	f04f 0200 	mov.w	r2, #0
 80021de:	f04f 0300 	mov.w	r3, #0
 80021e2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80021e6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80021ea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80021ee:	4692      	mov	sl, r2
 80021f0:	469b      	mov	fp, r3
 80021f2:	4623      	mov	r3, r4
 80021f4:	eb1a 0303 	adds.w	r3, sl, r3
 80021f8:	623b      	str	r3, [r7, #32]
 80021fa:	462b      	mov	r3, r5
 80021fc:	eb4b 0303 	adc.w	r3, fp, r3
 8002200:	627b      	str	r3, [r7, #36]	; 0x24
 8002202:	f04f 0200 	mov.w	r2, #0
 8002206:	f04f 0300 	mov.w	r3, #0
 800220a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800220e:	4629      	mov	r1, r5
 8002210:	028b      	lsls	r3, r1, #10
 8002212:	4621      	mov	r1, r4
 8002214:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002218:	4621      	mov	r1, r4
 800221a:	028a      	lsls	r2, r1, #10
 800221c:	4610      	mov	r0, r2
 800221e:	4619      	mov	r1, r3
 8002220:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002224:	2200      	movs	r2, #0
 8002226:	673b      	str	r3, [r7, #112]	; 0x70
 8002228:	677a      	str	r2, [r7, #116]	; 0x74
 800222a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800222e:	f7fd ffe9 	bl	8000204 <__aeabi_uldivmod>
 8002232:	4602      	mov	r2, r0
 8002234:	460b      	mov	r3, r1
 8002236:	4613      	mov	r3, r2
 8002238:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800223c:	4b41      	ldr	r3, [pc, #260]	; (8002344 <HAL_RCC_GetSysClockFreq+0x354>)
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	0c1b      	lsrs	r3, r3, #16
 8002242:	f003 0303 	and.w	r3, r3, #3
 8002246:	3301      	adds	r3, #1
 8002248:	005b      	lsls	r3, r3, #1
 800224a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800224e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002252:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002256:	fbb2 f3f3 	udiv	r3, r2, r3
 800225a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800225e:	e0eb      	b.n	8002438 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002260:	4b38      	ldr	r3, [pc, #224]	; (8002344 <HAL_RCC_GetSysClockFreq+0x354>)
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002268:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800226c:	4b35      	ldr	r3, [pc, #212]	; (8002344 <HAL_RCC_GetSysClockFreq+0x354>)
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d06b      	beq.n	8002350 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002278:	4b32      	ldr	r3, [pc, #200]	; (8002344 <HAL_RCC_GetSysClockFreq+0x354>)
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	099b      	lsrs	r3, r3, #6
 800227e:	2200      	movs	r2, #0
 8002280:	66bb      	str	r3, [r7, #104]	; 0x68
 8002282:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002284:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002286:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800228a:	663b      	str	r3, [r7, #96]	; 0x60
 800228c:	2300      	movs	r3, #0
 800228e:	667b      	str	r3, [r7, #100]	; 0x64
 8002290:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002294:	4622      	mov	r2, r4
 8002296:	462b      	mov	r3, r5
 8002298:	f04f 0000 	mov.w	r0, #0
 800229c:	f04f 0100 	mov.w	r1, #0
 80022a0:	0159      	lsls	r1, r3, #5
 80022a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022a6:	0150      	lsls	r0, r2, #5
 80022a8:	4602      	mov	r2, r0
 80022aa:	460b      	mov	r3, r1
 80022ac:	4621      	mov	r1, r4
 80022ae:	1a51      	subs	r1, r2, r1
 80022b0:	61b9      	str	r1, [r7, #24]
 80022b2:	4629      	mov	r1, r5
 80022b4:	eb63 0301 	sbc.w	r3, r3, r1
 80022b8:	61fb      	str	r3, [r7, #28]
 80022ba:	f04f 0200 	mov.w	r2, #0
 80022be:	f04f 0300 	mov.w	r3, #0
 80022c2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80022c6:	4659      	mov	r1, fp
 80022c8:	018b      	lsls	r3, r1, #6
 80022ca:	4651      	mov	r1, sl
 80022cc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80022d0:	4651      	mov	r1, sl
 80022d2:	018a      	lsls	r2, r1, #6
 80022d4:	4651      	mov	r1, sl
 80022d6:	ebb2 0801 	subs.w	r8, r2, r1
 80022da:	4659      	mov	r1, fp
 80022dc:	eb63 0901 	sbc.w	r9, r3, r1
 80022e0:	f04f 0200 	mov.w	r2, #0
 80022e4:	f04f 0300 	mov.w	r3, #0
 80022e8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80022ec:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80022f0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80022f4:	4690      	mov	r8, r2
 80022f6:	4699      	mov	r9, r3
 80022f8:	4623      	mov	r3, r4
 80022fa:	eb18 0303 	adds.w	r3, r8, r3
 80022fe:	613b      	str	r3, [r7, #16]
 8002300:	462b      	mov	r3, r5
 8002302:	eb49 0303 	adc.w	r3, r9, r3
 8002306:	617b      	str	r3, [r7, #20]
 8002308:	f04f 0200 	mov.w	r2, #0
 800230c:	f04f 0300 	mov.w	r3, #0
 8002310:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002314:	4629      	mov	r1, r5
 8002316:	024b      	lsls	r3, r1, #9
 8002318:	4621      	mov	r1, r4
 800231a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800231e:	4621      	mov	r1, r4
 8002320:	024a      	lsls	r2, r1, #9
 8002322:	4610      	mov	r0, r2
 8002324:	4619      	mov	r1, r3
 8002326:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800232a:	2200      	movs	r2, #0
 800232c:	65bb      	str	r3, [r7, #88]	; 0x58
 800232e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002330:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002334:	f7fd ff66 	bl	8000204 <__aeabi_uldivmod>
 8002338:	4602      	mov	r2, r0
 800233a:	460b      	mov	r3, r1
 800233c:	4613      	mov	r3, r2
 800233e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002342:	e065      	b.n	8002410 <HAL_RCC_GetSysClockFreq+0x420>
 8002344:	40023800 	.word	0x40023800
 8002348:	00f42400 	.word	0x00f42400
 800234c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002350:	4b3d      	ldr	r3, [pc, #244]	; (8002448 <HAL_RCC_GetSysClockFreq+0x458>)
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	099b      	lsrs	r3, r3, #6
 8002356:	2200      	movs	r2, #0
 8002358:	4618      	mov	r0, r3
 800235a:	4611      	mov	r1, r2
 800235c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002360:	653b      	str	r3, [r7, #80]	; 0x50
 8002362:	2300      	movs	r3, #0
 8002364:	657b      	str	r3, [r7, #84]	; 0x54
 8002366:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800236a:	4642      	mov	r2, r8
 800236c:	464b      	mov	r3, r9
 800236e:	f04f 0000 	mov.w	r0, #0
 8002372:	f04f 0100 	mov.w	r1, #0
 8002376:	0159      	lsls	r1, r3, #5
 8002378:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800237c:	0150      	lsls	r0, r2, #5
 800237e:	4602      	mov	r2, r0
 8002380:	460b      	mov	r3, r1
 8002382:	4641      	mov	r1, r8
 8002384:	1a51      	subs	r1, r2, r1
 8002386:	60b9      	str	r1, [r7, #8]
 8002388:	4649      	mov	r1, r9
 800238a:	eb63 0301 	sbc.w	r3, r3, r1
 800238e:	60fb      	str	r3, [r7, #12]
 8002390:	f04f 0200 	mov.w	r2, #0
 8002394:	f04f 0300 	mov.w	r3, #0
 8002398:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800239c:	4659      	mov	r1, fp
 800239e:	018b      	lsls	r3, r1, #6
 80023a0:	4651      	mov	r1, sl
 80023a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80023a6:	4651      	mov	r1, sl
 80023a8:	018a      	lsls	r2, r1, #6
 80023aa:	4651      	mov	r1, sl
 80023ac:	1a54      	subs	r4, r2, r1
 80023ae:	4659      	mov	r1, fp
 80023b0:	eb63 0501 	sbc.w	r5, r3, r1
 80023b4:	f04f 0200 	mov.w	r2, #0
 80023b8:	f04f 0300 	mov.w	r3, #0
 80023bc:	00eb      	lsls	r3, r5, #3
 80023be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80023c2:	00e2      	lsls	r2, r4, #3
 80023c4:	4614      	mov	r4, r2
 80023c6:	461d      	mov	r5, r3
 80023c8:	4643      	mov	r3, r8
 80023ca:	18e3      	adds	r3, r4, r3
 80023cc:	603b      	str	r3, [r7, #0]
 80023ce:	464b      	mov	r3, r9
 80023d0:	eb45 0303 	adc.w	r3, r5, r3
 80023d4:	607b      	str	r3, [r7, #4]
 80023d6:	f04f 0200 	mov.w	r2, #0
 80023da:	f04f 0300 	mov.w	r3, #0
 80023de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80023e2:	4629      	mov	r1, r5
 80023e4:	028b      	lsls	r3, r1, #10
 80023e6:	4621      	mov	r1, r4
 80023e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80023ec:	4621      	mov	r1, r4
 80023ee:	028a      	lsls	r2, r1, #10
 80023f0:	4610      	mov	r0, r2
 80023f2:	4619      	mov	r1, r3
 80023f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80023f8:	2200      	movs	r2, #0
 80023fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80023fc:	64fa      	str	r2, [r7, #76]	; 0x4c
 80023fe:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002402:	f7fd feff 	bl	8000204 <__aeabi_uldivmod>
 8002406:	4602      	mov	r2, r0
 8002408:	460b      	mov	r3, r1
 800240a:	4613      	mov	r3, r2
 800240c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002410:	4b0d      	ldr	r3, [pc, #52]	; (8002448 <HAL_RCC_GetSysClockFreq+0x458>)
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	0f1b      	lsrs	r3, r3, #28
 8002416:	f003 0307 	and.w	r3, r3, #7
 800241a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800241e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002422:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002426:	fbb2 f3f3 	udiv	r3, r2, r3
 800242a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800242e:	e003      	b.n	8002438 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002430:	4b06      	ldr	r3, [pc, #24]	; (800244c <HAL_RCC_GetSysClockFreq+0x45c>)
 8002432:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002436:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002438:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800243c:	4618      	mov	r0, r3
 800243e:	37b8      	adds	r7, #184	; 0xb8
 8002440:	46bd      	mov	sp, r7
 8002442:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002446:	bf00      	nop
 8002448:	40023800 	.word	0x40023800
 800244c:	00f42400 	.word	0x00f42400

08002450 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b086      	sub	sp, #24
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d101      	bne.n	8002462 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e28d      	b.n	800297e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0301 	and.w	r3, r3, #1
 800246a:	2b00      	cmp	r3, #0
 800246c:	f000 8083 	beq.w	8002576 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002470:	4b94      	ldr	r3, [pc, #592]	; (80026c4 <HAL_RCC_OscConfig+0x274>)
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f003 030c 	and.w	r3, r3, #12
 8002478:	2b04      	cmp	r3, #4
 800247a:	d019      	beq.n	80024b0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800247c:	4b91      	ldr	r3, [pc, #580]	; (80026c4 <HAL_RCC_OscConfig+0x274>)
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002484:	2b08      	cmp	r3, #8
 8002486:	d106      	bne.n	8002496 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002488:	4b8e      	ldr	r3, [pc, #568]	; (80026c4 <HAL_RCC_OscConfig+0x274>)
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002490:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002494:	d00c      	beq.n	80024b0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002496:	4b8b      	ldr	r3, [pc, #556]	; (80026c4 <HAL_RCC_OscConfig+0x274>)
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800249e:	2b0c      	cmp	r3, #12
 80024a0:	d112      	bne.n	80024c8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024a2:	4b88      	ldr	r3, [pc, #544]	; (80026c4 <HAL_RCC_OscConfig+0x274>)
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024ae:	d10b      	bne.n	80024c8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024b0:	4b84      	ldr	r3, [pc, #528]	; (80026c4 <HAL_RCC_OscConfig+0x274>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d05b      	beq.n	8002574 <HAL_RCC_OscConfig+0x124>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d157      	bne.n	8002574 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e25a      	b.n	800297e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024d0:	d106      	bne.n	80024e0 <HAL_RCC_OscConfig+0x90>
 80024d2:	4b7c      	ldr	r3, [pc, #496]	; (80026c4 <HAL_RCC_OscConfig+0x274>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a7b      	ldr	r2, [pc, #492]	; (80026c4 <HAL_RCC_OscConfig+0x274>)
 80024d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024dc:	6013      	str	r3, [r2, #0]
 80024de:	e01d      	b.n	800251c <HAL_RCC_OscConfig+0xcc>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024e8:	d10c      	bne.n	8002504 <HAL_RCC_OscConfig+0xb4>
 80024ea:	4b76      	ldr	r3, [pc, #472]	; (80026c4 <HAL_RCC_OscConfig+0x274>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a75      	ldr	r2, [pc, #468]	; (80026c4 <HAL_RCC_OscConfig+0x274>)
 80024f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024f4:	6013      	str	r3, [r2, #0]
 80024f6:	4b73      	ldr	r3, [pc, #460]	; (80026c4 <HAL_RCC_OscConfig+0x274>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a72      	ldr	r2, [pc, #456]	; (80026c4 <HAL_RCC_OscConfig+0x274>)
 80024fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002500:	6013      	str	r3, [r2, #0]
 8002502:	e00b      	b.n	800251c <HAL_RCC_OscConfig+0xcc>
 8002504:	4b6f      	ldr	r3, [pc, #444]	; (80026c4 <HAL_RCC_OscConfig+0x274>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a6e      	ldr	r2, [pc, #440]	; (80026c4 <HAL_RCC_OscConfig+0x274>)
 800250a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800250e:	6013      	str	r3, [r2, #0]
 8002510:	4b6c      	ldr	r3, [pc, #432]	; (80026c4 <HAL_RCC_OscConfig+0x274>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a6b      	ldr	r2, [pc, #428]	; (80026c4 <HAL_RCC_OscConfig+0x274>)
 8002516:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800251a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d013      	beq.n	800254c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002524:	f7fe fdd6 	bl	80010d4 <HAL_GetTick>
 8002528:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800252a:	e008      	b.n	800253e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800252c:	f7fe fdd2 	bl	80010d4 <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	2b64      	cmp	r3, #100	; 0x64
 8002538:	d901      	bls.n	800253e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800253a:	2303      	movs	r3, #3
 800253c:	e21f      	b.n	800297e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800253e:	4b61      	ldr	r3, [pc, #388]	; (80026c4 <HAL_RCC_OscConfig+0x274>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d0f0      	beq.n	800252c <HAL_RCC_OscConfig+0xdc>
 800254a:	e014      	b.n	8002576 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800254c:	f7fe fdc2 	bl	80010d4 <HAL_GetTick>
 8002550:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002552:	e008      	b.n	8002566 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002554:	f7fe fdbe 	bl	80010d4 <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	2b64      	cmp	r3, #100	; 0x64
 8002560:	d901      	bls.n	8002566 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e20b      	b.n	800297e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002566:	4b57      	ldr	r3, [pc, #348]	; (80026c4 <HAL_RCC_OscConfig+0x274>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d1f0      	bne.n	8002554 <HAL_RCC_OscConfig+0x104>
 8002572:	e000      	b.n	8002576 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002574:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0302 	and.w	r3, r3, #2
 800257e:	2b00      	cmp	r3, #0
 8002580:	d06f      	beq.n	8002662 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002582:	4b50      	ldr	r3, [pc, #320]	; (80026c4 <HAL_RCC_OscConfig+0x274>)
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	f003 030c 	and.w	r3, r3, #12
 800258a:	2b00      	cmp	r3, #0
 800258c:	d017      	beq.n	80025be <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800258e:	4b4d      	ldr	r3, [pc, #308]	; (80026c4 <HAL_RCC_OscConfig+0x274>)
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002596:	2b08      	cmp	r3, #8
 8002598:	d105      	bne.n	80025a6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800259a:	4b4a      	ldr	r3, [pc, #296]	; (80026c4 <HAL_RCC_OscConfig+0x274>)
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d00b      	beq.n	80025be <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025a6:	4b47      	ldr	r3, [pc, #284]	; (80026c4 <HAL_RCC_OscConfig+0x274>)
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80025ae:	2b0c      	cmp	r3, #12
 80025b0:	d11c      	bne.n	80025ec <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025b2:	4b44      	ldr	r3, [pc, #272]	; (80026c4 <HAL_RCC_OscConfig+0x274>)
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d116      	bne.n	80025ec <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025be:	4b41      	ldr	r3, [pc, #260]	; (80026c4 <HAL_RCC_OscConfig+0x274>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0302 	and.w	r3, r3, #2
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d005      	beq.n	80025d6 <HAL_RCC_OscConfig+0x186>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d001      	beq.n	80025d6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e1d3      	b.n	800297e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025d6:	4b3b      	ldr	r3, [pc, #236]	; (80026c4 <HAL_RCC_OscConfig+0x274>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	691b      	ldr	r3, [r3, #16]
 80025e2:	00db      	lsls	r3, r3, #3
 80025e4:	4937      	ldr	r1, [pc, #220]	; (80026c4 <HAL_RCC_OscConfig+0x274>)
 80025e6:	4313      	orrs	r3, r2
 80025e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ea:	e03a      	b.n	8002662 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d020      	beq.n	8002636 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025f4:	4b34      	ldr	r3, [pc, #208]	; (80026c8 <HAL_RCC_OscConfig+0x278>)
 80025f6:	2201      	movs	r2, #1
 80025f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025fa:	f7fe fd6b 	bl	80010d4 <HAL_GetTick>
 80025fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002600:	e008      	b.n	8002614 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002602:	f7fe fd67 	bl	80010d4 <HAL_GetTick>
 8002606:	4602      	mov	r2, r0
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	2b02      	cmp	r3, #2
 800260e:	d901      	bls.n	8002614 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	e1b4      	b.n	800297e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002614:	4b2b      	ldr	r3, [pc, #172]	; (80026c4 <HAL_RCC_OscConfig+0x274>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0302 	and.w	r3, r3, #2
 800261c:	2b00      	cmp	r3, #0
 800261e:	d0f0      	beq.n	8002602 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002620:	4b28      	ldr	r3, [pc, #160]	; (80026c4 <HAL_RCC_OscConfig+0x274>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	691b      	ldr	r3, [r3, #16]
 800262c:	00db      	lsls	r3, r3, #3
 800262e:	4925      	ldr	r1, [pc, #148]	; (80026c4 <HAL_RCC_OscConfig+0x274>)
 8002630:	4313      	orrs	r3, r2
 8002632:	600b      	str	r3, [r1, #0]
 8002634:	e015      	b.n	8002662 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002636:	4b24      	ldr	r3, [pc, #144]	; (80026c8 <HAL_RCC_OscConfig+0x278>)
 8002638:	2200      	movs	r2, #0
 800263a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800263c:	f7fe fd4a 	bl	80010d4 <HAL_GetTick>
 8002640:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002642:	e008      	b.n	8002656 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002644:	f7fe fd46 	bl	80010d4 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b02      	cmp	r3, #2
 8002650:	d901      	bls.n	8002656 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e193      	b.n	800297e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002656:	4b1b      	ldr	r3, [pc, #108]	; (80026c4 <HAL_RCC_OscConfig+0x274>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	2b00      	cmp	r3, #0
 8002660:	d1f0      	bne.n	8002644 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0308 	and.w	r3, r3, #8
 800266a:	2b00      	cmp	r3, #0
 800266c:	d036      	beq.n	80026dc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	695b      	ldr	r3, [r3, #20]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d016      	beq.n	80026a4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002676:	4b15      	ldr	r3, [pc, #84]	; (80026cc <HAL_RCC_OscConfig+0x27c>)
 8002678:	2201      	movs	r2, #1
 800267a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800267c:	f7fe fd2a 	bl	80010d4 <HAL_GetTick>
 8002680:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002682:	e008      	b.n	8002696 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002684:	f7fe fd26 	bl	80010d4 <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	2b02      	cmp	r3, #2
 8002690:	d901      	bls.n	8002696 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e173      	b.n	800297e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002696:	4b0b      	ldr	r3, [pc, #44]	; (80026c4 <HAL_RCC_OscConfig+0x274>)
 8002698:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800269a:	f003 0302 	and.w	r3, r3, #2
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d0f0      	beq.n	8002684 <HAL_RCC_OscConfig+0x234>
 80026a2:	e01b      	b.n	80026dc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026a4:	4b09      	ldr	r3, [pc, #36]	; (80026cc <HAL_RCC_OscConfig+0x27c>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026aa:	f7fe fd13 	bl	80010d4 <HAL_GetTick>
 80026ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026b0:	e00e      	b.n	80026d0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026b2:	f7fe fd0f 	bl	80010d4 <HAL_GetTick>
 80026b6:	4602      	mov	r2, r0
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d907      	bls.n	80026d0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80026c0:	2303      	movs	r3, #3
 80026c2:	e15c      	b.n	800297e <HAL_RCC_OscConfig+0x52e>
 80026c4:	40023800 	.word	0x40023800
 80026c8:	42470000 	.word	0x42470000
 80026cc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026d0:	4b8a      	ldr	r3, [pc, #552]	; (80028fc <HAL_RCC_OscConfig+0x4ac>)
 80026d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026d4:	f003 0302 	and.w	r3, r3, #2
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d1ea      	bne.n	80026b2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0304 	and.w	r3, r3, #4
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	f000 8097 	beq.w	8002818 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026ea:	2300      	movs	r3, #0
 80026ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026ee:	4b83      	ldr	r3, [pc, #524]	; (80028fc <HAL_RCC_OscConfig+0x4ac>)
 80026f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d10f      	bne.n	800271a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026fa:	2300      	movs	r3, #0
 80026fc:	60bb      	str	r3, [r7, #8]
 80026fe:	4b7f      	ldr	r3, [pc, #508]	; (80028fc <HAL_RCC_OscConfig+0x4ac>)
 8002700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002702:	4a7e      	ldr	r2, [pc, #504]	; (80028fc <HAL_RCC_OscConfig+0x4ac>)
 8002704:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002708:	6413      	str	r3, [r2, #64]	; 0x40
 800270a:	4b7c      	ldr	r3, [pc, #496]	; (80028fc <HAL_RCC_OscConfig+0x4ac>)
 800270c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002712:	60bb      	str	r3, [r7, #8]
 8002714:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002716:	2301      	movs	r3, #1
 8002718:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800271a:	4b79      	ldr	r3, [pc, #484]	; (8002900 <HAL_RCC_OscConfig+0x4b0>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002722:	2b00      	cmp	r3, #0
 8002724:	d118      	bne.n	8002758 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002726:	4b76      	ldr	r3, [pc, #472]	; (8002900 <HAL_RCC_OscConfig+0x4b0>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a75      	ldr	r2, [pc, #468]	; (8002900 <HAL_RCC_OscConfig+0x4b0>)
 800272c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002730:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002732:	f7fe fccf 	bl	80010d4 <HAL_GetTick>
 8002736:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002738:	e008      	b.n	800274c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800273a:	f7fe fccb 	bl	80010d4 <HAL_GetTick>
 800273e:	4602      	mov	r2, r0
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	2b02      	cmp	r3, #2
 8002746:	d901      	bls.n	800274c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	e118      	b.n	800297e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800274c:	4b6c      	ldr	r3, [pc, #432]	; (8002900 <HAL_RCC_OscConfig+0x4b0>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002754:	2b00      	cmp	r3, #0
 8002756:	d0f0      	beq.n	800273a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	2b01      	cmp	r3, #1
 800275e:	d106      	bne.n	800276e <HAL_RCC_OscConfig+0x31e>
 8002760:	4b66      	ldr	r3, [pc, #408]	; (80028fc <HAL_RCC_OscConfig+0x4ac>)
 8002762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002764:	4a65      	ldr	r2, [pc, #404]	; (80028fc <HAL_RCC_OscConfig+0x4ac>)
 8002766:	f043 0301 	orr.w	r3, r3, #1
 800276a:	6713      	str	r3, [r2, #112]	; 0x70
 800276c:	e01c      	b.n	80027a8 <HAL_RCC_OscConfig+0x358>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	2b05      	cmp	r3, #5
 8002774:	d10c      	bne.n	8002790 <HAL_RCC_OscConfig+0x340>
 8002776:	4b61      	ldr	r3, [pc, #388]	; (80028fc <HAL_RCC_OscConfig+0x4ac>)
 8002778:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800277a:	4a60      	ldr	r2, [pc, #384]	; (80028fc <HAL_RCC_OscConfig+0x4ac>)
 800277c:	f043 0304 	orr.w	r3, r3, #4
 8002780:	6713      	str	r3, [r2, #112]	; 0x70
 8002782:	4b5e      	ldr	r3, [pc, #376]	; (80028fc <HAL_RCC_OscConfig+0x4ac>)
 8002784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002786:	4a5d      	ldr	r2, [pc, #372]	; (80028fc <HAL_RCC_OscConfig+0x4ac>)
 8002788:	f043 0301 	orr.w	r3, r3, #1
 800278c:	6713      	str	r3, [r2, #112]	; 0x70
 800278e:	e00b      	b.n	80027a8 <HAL_RCC_OscConfig+0x358>
 8002790:	4b5a      	ldr	r3, [pc, #360]	; (80028fc <HAL_RCC_OscConfig+0x4ac>)
 8002792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002794:	4a59      	ldr	r2, [pc, #356]	; (80028fc <HAL_RCC_OscConfig+0x4ac>)
 8002796:	f023 0301 	bic.w	r3, r3, #1
 800279a:	6713      	str	r3, [r2, #112]	; 0x70
 800279c:	4b57      	ldr	r3, [pc, #348]	; (80028fc <HAL_RCC_OscConfig+0x4ac>)
 800279e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a0:	4a56      	ldr	r2, [pc, #344]	; (80028fc <HAL_RCC_OscConfig+0x4ac>)
 80027a2:	f023 0304 	bic.w	r3, r3, #4
 80027a6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d015      	beq.n	80027dc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027b0:	f7fe fc90 	bl	80010d4 <HAL_GetTick>
 80027b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027b6:	e00a      	b.n	80027ce <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027b8:	f7fe fc8c 	bl	80010d4 <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d901      	bls.n	80027ce <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e0d7      	b.n	800297e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027ce:	4b4b      	ldr	r3, [pc, #300]	; (80028fc <HAL_RCC_OscConfig+0x4ac>)
 80027d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d2:	f003 0302 	and.w	r3, r3, #2
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d0ee      	beq.n	80027b8 <HAL_RCC_OscConfig+0x368>
 80027da:	e014      	b.n	8002806 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027dc:	f7fe fc7a 	bl	80010d4 <HAL_GetTick>
 80027e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027e2:	e00a      	b.n	80027fa <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027e4:	f7fe fc76 	bl	80010d4 <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d901      	bls.n	80027fa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e0c1      	b.n	800297e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027fa:	4b40      	ldr	r3, [pc, #256]	; (80028fc <HAL_RCC_OscConfig+0x4ac>)
 80027fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027fe:	f003 0302 	and.w	r3, r3, #2
 8002802:	2b00      	cmp	r3, #0
 8002804:	d1ee      	bne.n	80027e4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002806:	7dfb      	ldrb	r3, [r7, #23]
 8002808:	2b01      	cmp	r3, #1
 800280a:	d105      	bne.n	8002818 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800280c:	4b3b      	ldr	r3, [pc, #236]	; (80028fc <HAL_RCC_OscConfig+0x4ac>)
 800280e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002810:	4a3a      	ldr	r2, [pc, #232]	; (80028fc <HAL_RCC_OscConfig+0x4ac>)
 8002812:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002816:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	699b      	ldr	r3, [r3, #24]
 800281c:	2b00      	cmp	r3, #0
 800281e:	f000 80ad 	beq.w	800297c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002822:	4b36      	ldr	r3, [pc, #216]	; (80028fc <HAL_RCC_OscConfig+0x4ac>)
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	f003 030c 	and.w	r3, r3, #12
 800282a:	2b08      	cmp	r3, #8
 800282c:	d060      	beq.n	80028f0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	699b      	ldr	r3, [r3, #24]
 8002832:	2b02      	cmp	r3, #2
 8002834:	d145      	bne.n	80028c2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002836:	4b33      	ldr	r3, [pc, #204]	; (8002904 <HAL_RCC_OscConfig+0x4b4>)
 8002838:	2200      	movs	r2, #0
 800283a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800283c:	f7fe fc4a 	bl	80010d4 <HAL_GetTick>
 8002840:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002842:	e008      	b.n	8002856 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002844:	f7fe fc46 	bl	80010d4 <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	2b02      	cmp	r3, #2
 8002850:	d901      	bls.n	8002856 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e093      	b.n	800297e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002856:	4b29      	ldr	r3, [pc, #164]	; (80028fc <HAL_RCC_OscConfig+0x4ac>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d1f0      	bne.n	8002844 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	69da      	ldr	r2, [r3, #28]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6a1b      	ldr	r3, [r3, #32]
 800286a:	431a      	orrs	r2, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002870:	019b      	lsls	r3, r3, #6
 8002872:	431a      	orrs	r2, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002878:	085b      	lsrs	r3, r3, #1
 800287a:	3b01      	subs	r3, #1
 800287c:	041b      	lsls	r3, r3, #16
 800287e:	431a      	orrs	r2, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002884:	061b      	lsls	r3, r3, #24
 8002886:	431a      	orrs	r2, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288c:	071b      	lsls	r3, r3, #28
 800288e:	491b      	ldr	r1, [pc, #108]	; (80028fc <HAL_RCC_OscConfig+0x4ac>)
 8002890:	4313      	orrs	r3, r2
 8002892:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002894:	4b1b      	ldr	r3, [pc, #108]	; (8002904 <HAL_RCC_OscConfig+0x4b4>)
 8002896:	2201      	movs	r2, #1
 8002898:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800289a:	f7fe fc1b 	bl	80010d4 <HAL_GetTick>
 800289e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028a0:	e008      	b.n	80028b4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028a2:	f7fe fc17 	bl	80010d4 <HAL_GetTick>
 80028a6:	4602      	mov	r2, r0
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	d901      	bls.n	80028b4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80028b0:	2303      	movs	r3, #3
 80028b2:	e064      	b.n	800297e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028b4:	4b11      	ldr	r3, [pc, #68]	; (80028fc <HAL_RCC_OscConfig+0x4ac>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d0f0      	beq.n	80028a2 <HAL_RCC_OscConfig+0x452>
 80028c0:	e05c      	b.n	800297c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028c2:	4b10      	ldr	r3, [pc, #64]	; (8002904 <HAL_RCC_OscConfig+0x4b4>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c8:	f7fe fc04 	bl	80010d4 <HAL_GetTick>
 80028cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028ce:	e008      	b.n	80028e2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028d0:	f7fe fc00 	bl	80010d4 <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d901      	bls.n	80028e2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80028de:	2303      	movs	r3, #3
 80028e0:	e04d      	b.n	800297e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028e2:	4b06      	ldr	r3, [pc, #24]	; (80028fc <HAL_RCC_OscConfig+0x4ac>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d1f0      	bne.n	80028d0 <HAL_RCC_OscConfig+0x480>
 80028ee:	e045      	b.n	800297c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	699b      	ldr	r3, [r3, #24]
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d107      	bne.n	8002908 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e040      	b.n	800297e <HAL_RCC_OscConfig+0x52e>
 80028fc:	40023800 	.word	0x40023800
 8002900:	40007000 	.word	0x40007000
 8002904:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002908:	4b1f      	ldr	r3, [pc, #124]	; (8002988 <HAL_RCC_OscConfig+0x538>)
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	699b      	ldr	r3, [r3, #24]
 8002912:	2b01      	cmp	r3, #1
 8002914:	d030      	beq.n	8002978 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002920:	429a      	cmp	r2, r3
 8002922:	d129      	bne.n	8002978 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800292e:	429a      	cmp	r2, r3
 8002930:	d122      	bne.n	8002978 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002932:	68fa      	ldr	r2, [r7, #12]
 8002934:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002938:	4013      	ands	r3, r2
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800293e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002940:	4293      	cmp	r3, r2
 8002942:	d119      	bne.n	8002978 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800294e:	085b      	lsrs	r3, r3, #1
 8002950:	3b01      	subs	r3, #1
 8002952:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002954:	429a      	cmp	r2, r3
 8002956:	d10f      	bne.n	8002978 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002962:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002964:	429a      	cmp	r2, r3
 8002966:	d107      	bne.n	8002978 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002972:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002974:	429a      	cmp	r2, r3
 8002976:	d001      	beq.n	800297c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e000      	b.n	800297e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800297c:	2300      	movs	r3, #0
}
 800297e:	4618      	mov	r0, r3
 8002980:	3718      	adds	r7, #24
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	40023800 	.word	0x40023800

0800298c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d101      	bne.n	800299e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e041      	b.n	8002a22 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d106      	bne.n	80029b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f7fe f9ae 	bl	8000d14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2202      	movs	r2, #2
 80029bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	3304      	adds	r3, #4
 80029c8:	4619      	mov	r1, r3
 80029ca:	4610      	mov	r0, r2
 80029cc:	f000 fad8 	bl	8002f80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2201      	movs	r2, #1
 80029e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2201      	movs	r2, #1
 8002a14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a20:	2300      	movs	r3, #0
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3708      	adds	r7, #8
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}

08002a2a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002a2a:	b580      	push	{r7, lr}
 8002a2c:	b082      	sub	sp, #8
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d101      	bne.n	8002a3c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e041      	b.n	8002ac0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d106      	bne.n	8002a56 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f000 f839 	bl	8002ac8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2202      	movs	r2, #2
 8002a5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	3304      	adds	r3, #4
 8002a66:	4619      	mov	r1, r3
 8002a68:	4610      	mov	r0, r2
 8002a6a:	f000 fa89 	bl	8002f80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2201      	movs	r2, #1
 8002a72:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2201      	movs	r2, #1
 8002a7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2201      	movs	r2, #1
 8002a82:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2201      	movs	r2, #1
 8002a8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2201      	movs	r2, #1
 8002a92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2201      	movs	r2, #1
 8002a9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2201      	movs	r2, #1
 8002aba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002abe:	2300      	movs	r3, #0
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3708      	adds	r7, #8
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002ad0:	bf00      	nop
 8002ad2:	370c      	adds	r7, #12
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr

08002adc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d109      	bne.n	8002b00 <HAL_TIM_PWM_Start+0x24>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	bf14      	ite	ne
 8002af8:	2301      	movne	r3, #1
 8002afa:	2300      	moveq	r3, #0
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	e022      	b.n	8002b46 <HAL_TIM_PWM_Start+0x6a>
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	2b04      	cmp	r3, #4
 8002b04:	d109      	bne.n	8002b1a <HAL_TIM_PWM_Start+0x3e>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	bf14      	ite	ne
 8002b12:	2301      	movne	r3, #1
 8002b14:	2300      	moveq	r3, #0
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	e015      	b.n	8002b46 <HAL_TIM_PWM_Start+0x6a>
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	2b08      	cmp	r3, #8
 8002b1e:	d109      	bne.n	8002b34 <HAL_TIM_PWM_Start+0x58>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	bf14      	ite	ne
 8002b2c:	2301      	movne	r3, #1
 8002b2e:	2300      	moveq	r3, #0
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	e008      	b.n	8002b46 <HAL_TIM_PWM_Start+0x6a>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	bf14      	ite	ne
 8002b40:	2301      	movne	r3, #1
 8002b42:	2300      	moveq	r3, #0
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d001      	beq.n	8002b4e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e07c      	b.n	8002c48 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d104      	bne.n	8002b5e <HAL_TIM_PWM_Start+0x82>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2202      	movs	r2, #2
 8002b58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b5c:	e013      	b.n	8002b86 <HAL_TIM_PWM_Start+0xaa>
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	2b04      	cmp	r3, #4
 8002b62:	d104      	bne.n	8002b6e <HAL_TIM_PWM_Start+0x92>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2202      	movs	r2, #2
 8002b68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b6c:	e00b      	b.n	8002b86 <HAL_TIM_PWM_Start+0xaa>
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	2b08      	cmp	r3, #8
 8002b72:	d104      	bne.n	8002b7e <HAL_TIM_PWM_Start+0xa2>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2202      	movs	r2, #2
 8002b78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b7c:	e003      	b.n	8002b86 <HAL_TIM_PWM_Start+0xaa>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2202      	movs	r2, #2
 8002b82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	6839      	ldr	r1, [r7, #0]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f000 fce0 	bl	8003554 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a2d      	ldr	r2, [pc, #180]	; (8002c50 <HAL_TIM_PWM_Start+0x174>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d004      	beq.n	8002ba8 <HAL_TIM_PWM_Start+0xcc>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a2c      	ldr	r2, [pc, #176]	; (8002c54 <HAL_TIM_PWM_Start+0x178>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d101      	bne.n	8002bac <HAL_TIM_PWM_Start+0xd0>
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e000      	b.n	8002bae <HAL_TIM_PWM_Start+0xd2>
 8002bac:	2300      	movs	r3, #0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d007      	beq.n	8002bc2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002bc0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a22      	ldr	r2, [pc, #136]	; (8002c50 <HAL_TIM_PWM_Start+0x174>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d022      	beq.n	8002c12 <HAL_TIM_PWM_Start+0x136>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bd4:	d01d      	beq.n	8002c12 <HAL_TIM_PWM_Start+0x136>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a1f      	ldr	r2, [pc, #124]	; (8002c58 <HAL_TIM_PWM_Start+0x17c>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d018      	beq.n	8002c12 <HAL_TIM_PWM_Start+0x136>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a1d      	ldr	r2, [pc, #116]	; (8002c5c <HAL_TIM_PWM_Start+0x180>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d013      	beq.n	8002c12 <HAL_TIM_PWM_Start+0x136>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a1c      	ldr	r2, [pc, #112]	; (8002c60 <HAL_TIM_PWM_Start+0x184>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d00e      	beq.n	8002c12 <HAL_TIM_PWM_Start+0x136>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a16      	ldr	r2, [pc, #88]	; (8002c54 <HAL_TIM_PWM_Start+0x178>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d009      	beq.n	8002c12 <HAL_TIM_PWM_Start+0x136>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a18      	ldr	r2, [pc, #96]	; (8002c64 <HAL_TIM_PWM_Start+0x188>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d004      	beq.n	8002c12 <HAL_TIM_PWM_Start+0x136>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a16      	ldr	r2, [pc, #88]	; (8002c68 <HAL_TIM_PWM_Start+0x18c>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d111      	bne.n	8002c36 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	f003 0307 	and.w	r3, r3, #7
 8002c1c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2b06      	cmp	r3, #6
 8002c22:	d010      	beq.n	8002c46 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f042 0201 	orr.w	r2, r2, #1
 8002c32:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c34:	e007      	b.n	8002c46 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f042 0201 	orr.w	r2, r2, #1
 8002c44:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c46:	2300      	movs	r3, #0
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3710      	adds	r7, #16
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	40010000 	.word	0x40010000
 8002c54:	40010400 	.word	0x40010400
 8002c58:	40000400 	.word	0x40000400
 8002c5c:	40000800 	.word	0x40000800
 8002c60:	40000c00 	.word	0x40000c00
 8002c64:	40014000 	.word	0x40014000
 8002c68:	40001800 	.word	0x40001800

08002c6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b086      	sub	sp, #24
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	60f8      	str	r0, [r7, #12]
 8002c74:	60b9      	str	r1, [r7, #8]
 8002c76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d101      	bne.n	8002c8a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002c86:	2302      	movs	r3, #2
 8002c88:	e0ae      	b.n	8002de8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2b0c      	cmp	r3, #12
 8002c96:	f200 809f 	bhi.w	8002dd8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002c9a:	a201      	add	r2, pc, #4	; (adr r2, 8002ca0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ca0:	08002cd5 	.word	0x08002cd5
 8002ca4:	08002dd9 	.word	0x08002dd9
 8002ca8:	08002dd9 	.word	0x08002dd9
 8002cac:	08002dd9 	.word	0x08002dd9
 8002cb0:	08002d15 	.word	0x08002d15
 8002cb4:	08002dd9 	.word	0x08002dd9
 8002cb8:	08002dd9 	.word	0x08002dd9
 8002cbc:	08002dd9 	.word	0x08002dd9
 8002cc0:	08002d57 	.word	0x08002d57
 8002cc4:	08002dd9 	.word	0x08002dd9
 8002cc8:	08002dd9 	.word	0x08002dd9
 8002ccc:	08002dd9 	.word	0x08002dd9
 8002cd0:	08002d97 	.word	0x08002d97
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	68b9      	ldr	r1, [r7, #8]
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f000 f9f0 	bl	80030c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	699a      	ldr	r2, [r3, #24]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f042 0208 	orr.w	r2, r2, #8
 8002cee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	699a      	ldr	r2, [r3, #24]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f022 0204 	bic.w	r2, r2, #4
 8002cfe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	6999      	ldr	r1, [r3, #24]
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	691a      	ldr	r2, [r3, #16]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	430a      	orrs	r2, r1
 8002d10:	619a      	str	r2, [r3, #24]
      break;
 8002d12:	e064      	b.n	8002dde <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	68b9      	ldr	r1, [r7, #8]
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f000 fa40 	bl	80031a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	699a      	ldr	r2, [r3, #24]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	699a      	ldr	r2, [r3, #24]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	6999      	ldr	r1, [r3, #24]
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	691b      	ldr	r3, [r3, #16]
 8002d4a:	021a      	lsls	r2, r3, #8
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	430a      	orrs	r2, r1
 8002d52:	619a      	str	r2, [r3, #24]
      break;
 8002d54:	e043      	b.n	8002dde <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	68b9      	ldr	r1, [r7, #8]
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f000 fa95 	bl	800328c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	69da      	ldr	r2, [r3, #28]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f042 0208 	orr.w	r2, r2, #8
 8002d70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	69da      	ldr	r2, [r3, #28]
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f022 0204 	bic.w	r2, r2, #4
 8002d80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	69d9      	ldr	r1, [r3, #28]
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	691a      	ldr	r2, [r3, #16]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	430a      	orrs	r2, r1
 8002d92:	61da      	str	r2, [r3, #28]
      break;
 8002d94:	e023      	b.n	8002dde <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	68b9      	ldr	r1, [r7, #8]
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f000 fae9 	bl	8003374 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	69da      	ldr	r2, [r3, #28]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002db0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	69da      	ldr	r2, [r3, #28]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	69d9      	ldr	r1, [r3, #28]
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	691b      	ldr	r3, [r3, #16]
 8002dcc:	021a      	lsls	r2, r3, #8
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	430a      	orrs	r2, r1
 8002dd4:	61da      	str	r2, [r3, #28]
      break;
 8002dd6:	e002      	b.n	8002dde <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	75fb      	strb	r3, [r7, #23]
      break;
 8002ddc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2200      	movs	r2, #0
 8002de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002de6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3718      	adds	r7, #24
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}

08002df0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b084      	sub	sp, #16
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d101      	bne.n	8002e0c <HAL_TIM_ConfigClockSource+0x1c>
 8002e08:	2302      	movs	r3, #2
 8002e0a:	e0b4      	b.n	8002f76 <HAL_TIM_ConfigClockSource+0x186>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2202      	movs	r2, #2
 8002e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002e2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e32:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	68ba      	ldr	r2, [r7, #8]
 8002e3a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e44:	d03e      	beq.n	8002ec4 <HAL_TIM_ConfigClockSource+0xd4>
 8002e46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e4a:	f200 8087 	bhi.w	8002f5c <HAL_TIM_ConfigClockSource+0x16c>
 8002e4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e52:	f000 8086 	beq.w	8002f62 <HAL_TIM_ConfigClockSource+0x172>
 8002e56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e5a:	d87f      	bhi.n	8002f5c <HAL_TIM_ConfigClockSource+0x16c>
 8002e5c:	2b70      	cmp	r3, #112	; 0x70
 8002e5e:	d01a      	beq.n	8002e96 <HAL_TIM_ConfigClockSource+0xa6>
 8002e60:	2b70      	cmp	r3, #112	; 0x70
 8002e62:	d87b      	bhi.n	8002f5c <HAL_TIM_ConfigClockSource+0x16c>
 8002e64:	2b60      	cmp	r3, #96	; 0x60
 8002e66:	d050      	beq.n	8002f0a <HAL_TIM_ConfigClockSource+0x11a>
 8002e68:	2b60      	cmp	r3, #96	; 0x60
 8002e6a:	d877      	bhi.n	8002f5c <HAL_TIM_ConfigClockSource+0x16c>
 8002e6c:	2b50      	cmp	r3, #80	; 0x50
 8002e6e:	d03c      	beq.n	8002eea <HAL_TIM_ConfigClockSource+0xfa>
 8002e70:	2b50      	cmp	r3, #80	; 0x50
 8002e72:	d873      	bhi.n	8002f5c <HAL_TIM_ConfigClockSource+0x16c>
 8002e74:	2b40      	cmp	r3, #64	; 0x40
 8002e76:	d058      	beq.n	8002f2a <HAL_TIM_ConfigClockSource+0x13a>
 8002e78:	2b40      	cmp	r3, #64	; 0x40
 8002e7a:	d86f      	bhi.n	8002f5c <HAL_TIM_ConfigClockSource+0x16c>
 8002e7c:	2b30      	cmp	r3, #48	; 0x30
 8002e7e:	d064      	beq.n	8002f4a <HAL_TIM_ConfigClockSource+0x15a>
 8002e80:	2b30      	cmp	r3, #48	; 0x30
 8002e82:	d86b      	bhi.n	8002f5c <HAL_TIM_ConfigClockSource+0x16c>
 8002e84:	2b20      	cmp	r3, #32
 8002e86:	d060      	beq.n	8002f4a <HAL_TIM_ConfigClockSource+0x15a>
 8002e88:	2b20      	cmp	r3, #32
 8002e8a:	d867      	bhi.n	8002f5c <HAL_TIM_ConfigClockSource+0x16c>
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d05c      	beq.n	8002f4a <HAL_TIM_ConfigClockSource+0x15a>
 8002e90:	2b10      	cmp	r3, #16
 8002e92:	d05a      	beq.n	8002f4a <HAL_TIM_ConfigClockSource+0x15a>
 8002e94:	e062      	b.n	8002f5c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6818      	ldr	r0, [r3, #0]
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	6899      	ldr	r1, [r3, #8]
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	685a      	ldr	r2, [r3, #4]
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	f000 fb35 	bl	8003514 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002eb8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	68ba      	ldr	r2, [r7, #8]
 8002ec0:	609a      	str	r2, [r3, #8]
      break;
 8002ec2:	e04f      	b.n	8002f64 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6818      	ldr	r0, [r3, #0]
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	6899      	ldr	r1, [r3, #8]
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	685a      	ldr	r2, [r3, #4]
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	f000 fb1e 	bl	8003514 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	689a      	ldr	r2, [r3, #8]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ee6:	609a      	str	r2, [r3, #8]
      break;
 8002ee8:	e03c      	b.n	8002f64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6818      	ldr	r0, [r3, #0]
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	6859      	ldr	r1, [r3, #4]
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	f000 fa92 	bl	8003420 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2150      	movs	r1, #80	; 0x50
 8002f02:	4618      	mov	r0, r3
 8002f04:	f000 faeb 	bl	80034de <TIM_ITRx_SetConfig>
      break;
 8002f08:	e02c      	b.n	8002f64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6818      	ldr	r0, [r3, #0]
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	6859      	ldr	r1, [r3, #4]
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	461a      	mov	r2, r3
 8002f18:	f000 fab1 	bl	800347e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	2160      	movs	r1, #96	; 0x60
 8002f22:	4618      	mov	r0, r3
 8002f24:	f000 fadb 	bl	80034de <TIM_ITRx_SetConfig>
      break;
 8002f28:	e01c      	b.n	8002f64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6818      	ldr	r0, [r3, #0]
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	6859      	ldr	r1, [r3, #4]
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	461a      	mov	r2, r3
 8002f38:	f000 fa72 	bl	8003420 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	2140      	movs	r1, #64	; 0x40
 8002f42:	4618      	mov	r0, r3
 8002f44:	f000 facb 	bl	80034de <TIM_ITRx_SetConfig>
      break;
 8002f48:	e00c      	b.n	8002f64 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4619      	mov	r1, r3
 8002f54:	4610      	mov	r0, r2
 8002f56:	f000 fac2 	bl	80034de <TIM_ITRx_SetConfig>
      break;
 8002f5a:	e003      	b.n	8002f64 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	73fb      	strb	r3, [r7, #15]
      break;
 8002f60:	e000      	b.n	8002f64 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002f62:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2201      	movs	r2, #1
 8002f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3710      	adds	r7, #16
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
	...

08002f80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b085      	sub	sp, #20
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	4a40      	ldr	r2, [pc, #256]	; (8003094 <TIM_Base_SetConfig+0x114>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d013      	beq.n	8002fc0 <TIM_Base_SetConfig+0x40>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f9e:	d00f      	beq.n	8002fc0 <TIM_Base_SetConfig+0x40>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	4a3d      	ldr	r2, [pc, #244]	; (8003098 <TIM_Base_SetConfig+0x118>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d00b      	beq.n	8002fc0 <TIM_Base_SetConfig+0x40>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	4a3c      	ldr	r2, [pc, #240]	; (800309c <TIM_Base_SetConfig+0x11c>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d007      	beq.n	8002fc0 <TIM_Base_SetConfig+0x40>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	4a3b      	ldr	r2, [pc, #236]	; (80030a0 <TIM_Base_SetConfig+0x120>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d003      	beq.n	8002fc0 <TIM_Base_SetConfig+0x40>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	4a3a      	ldr	r2, [pc, #232]	; (80030a4 <TIM_Base_SetConfig+0x124>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d108      	bne.n	8002fd2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	68fa      	ldr	r2, [r7, #12]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4a2f      	ldr	r2, [pc, #188]	; (8003094 <TIM_Base_SetConfig+0x114>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d02b      	beq.n	8003032 <TIM_Base_SetConfig+0xb2>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fe0:	d027      	beq.n	8003032 <TIM_Base_SetConfig+0xb2>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4a2c      	ldr	r2, [pc, #176]	; (8003098 <TIM_Base_SetConfig+0x118>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d023      	beq.n	8003032 <TIM_Base_SetConfig+0xb2>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4a2b      	ldr	r2, [pc, #172]	; (800309c <TIM_Base_SetConfig+0x11c>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d01f      	beq.n	8003032 <TIM_Base_SetConfig+0xb2>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4a2a      	ldr	r2, [pc, #168]	; (80030a0 <TIM_Base_SetConfig+0x120>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d01b      	beq.n	8003032 <TIM_Base_SetConfig+0xb2>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4a29      	ldr	r2, [pc, #164]	; (80030a4 <TIM_Base_SetConfig+0x124>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d017      	beq.n	8003032 <TIM_Base_SetConfig+0xb2>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4a28      	ldr	r2, [pc, #160]	; (80030a8 <TIM_Base_SetConfig+0x128>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d013      	beq.n	8003032 <TIM_Base_SetConfig+0xb2>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4a27      	ldr	r2, [pc, #156]	; (80030ac <TIM_Base_SetConfig+0x12c>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d00f      	beq.n	8003032 <TIM_Base_SetConfig+0xb2>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a26      	ldr	r2, [pc, #152]	; (80030b0 <TIM_Base_SetConfig+0x130>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d00b      	beq.n	8003032 <TIM_Base_SetConfig+0xb2>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4a25      	ldr	r2, [pc, #148]	; (80030b4 <TIM_Base_SetConfig+0x134>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d007      	beq.n	8003032 <TIM_Base_SetConfig+0xb2>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4a24      	ldr	r2, [pc, #144]	; (80030b8 <TIM_Base_SetConfig+0x138>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d003      	beq.n	8003032 <TIM_Base_SetConfig+0xb2>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4a23      	ldr	r2, [pc, #140]	; (80030bc <TIM_Base_SetConfig+0x13c>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d108      	bne.n	8003044 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003038:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	68fa      	ldr	r2, [r7, #12]
 8003040:	4313      	orrs	r3, r2
 8003042:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	695b      	ldr	r3, [r3, #20]
 800304e:	4313      	orrs	r3, r2
 8003050:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	68fa      	ldr	r2, [r7, #12]
 8003056:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	689a      	ldr	r2, [r3, #8]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	4a0a      	ldr	r2, [pc, #40]	; (8003094 <TIM_Base_SetConfig+0x114>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d003      	beq.n	8003078 <TIM_Base_SetConfig+0xf8>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	4a0c      	ldr	r2, [pc, #48]	; (80030a4 <TIM_Base_SetConfig+0x124>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d103      	bne.n	8003080 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	691a      	ldr	r2, [r3, #16]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2201      	movs	r2, #1
 8003084:	615a      	str	r2, [r3, #20]
}
 8003086:	bf00      	nop
 8003088:	3714      	adds	r7, #20
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	40010000 	.word	0x40010000
 8003098:	40000400 	.word	0x40000400
 800309c:	40000800 	.word	0x40000800
 80030a0:	40000c00 	.word	0x40000c00
 80030a4:	40010400 	.word	0x40010400
 80030a8:	40014000 	.word	0x40014000
 80030ac:	40014400 	.word	0x40014400
 80030b0:	40014800 	.word	0x40014800
 80030b4:	40001800 	.word	0x40001800
 80030b8:	40001c00 	.word	0x40001c00
 80030bc:	40002000 	.word	0x40002000

080030c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b087      	sub	sp, #28
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6a1b      	ldr	r3, [r3, #32]
 80030ce:	f023 0201 	bic.w	r2, r3, #1
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6a1b      	ldr	r3, [r3, #32]
 80030da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	699b      	ldr	r3, [r3, #24]
 80030e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f023 0303 	bic.w	r3, r3, #3
 80030f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	68fa      	ldr	r2, [r7, #12]
 80030fe:	4313      	orrs	r3, r2
 8003100:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	f023 0302 	bic.w	r3, r3, #2
 8003108:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	697a      	ldr	r2, [r7, #20]
 8003110:	4313      	orrs	r3, r2
 8003112:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	4a20      	ldr	r2, [pc, #128]	; (8003198 <TIM_OC1_SetConfig+0xd8>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d003      	beq.n	8003124 <TIM_OC1_SetConfig+0x64>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	4a1f      	ldr	r2, [pc, #124]	; (800319c <TIM_OC1_SetConfig+0xdc>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d10c      	bne.n	800313e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	f023 0308 	bic.w	r3, r3, #8
 800312a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	697a      	ldr	r2, [r7, #20]
 8003132:	4313      	orrs	r3, r2
 8003134:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	f023 0304 	bic.w	r3, r3, #4
 800313c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4a15      	ldr	r2, [pc, #84]	; (8003198 <TIM_OC1_SetConfig+0xd8>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d003      	beq.n	800314e <TIM_OC1_SetConfig+0x8e>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4a14      	ldr	r2, [pc, #80]	; (800319c <TIM_OC1_SetConfig+0xdc>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d111      	bne.n	8003172 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003154:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800315c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	695b      	ldr	r3, [r3, #20]
 8003162:	693a      	ldr	r2, [r7, #16]
 8003164:	4313      	orrs	r3, r2
 8003166:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	699b      	ldr	r3, [r3, #24]
 800316c:	693a      	ldr	r2, [r7, #16]
 800316e:	4313      	orrs	r3, r2
 8003170:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	693a      	ldr	r2, [r7, #16]
 8003176:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	68fa      	ldr	r2, [r7, #12]
 800317c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	685a      	ldr	r2, [r3, #4]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	697a      	ldr	r2, [r7, #20]
 800318a:	621a      	str	r2, [r3, #32]
}
 800318c:	bf00      	nop
 800318e:	371c      	adds	r7, #28
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr
 8003198:	40010000 	.word	0x40010000
 800319c:	40010400 	.word	0x40010400

080031a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b087      	sub	sp, #28
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6a1b      	ldr	r3, [r3, #32]
 80031ae:	f023 0210 	bic.w	r2, r3, #16
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a1b      	ldr	r3, [r3, #32]
 80031ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	699b      	ldr	r3, [r3, #24]
 80031c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	021b      	lsls	r3, r3, #8
 80031de:	68fa      	ldr	r2, [r7, #12]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	f023 0320 	bic.w	r3, r3, #32
 80031ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	011b      	lsls	r3, r3, #4
 80031f2:	697a      	ldr	r2, [r7, #20]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	4a22      	ldr	r2, [pc, #136]	; (8003284 <TIM_OC2_SetConfig+0xe4>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d003      	beq.n	8003208 <TIM_OC2_SetConfig+0x68>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	4a21      	ldr	r2, [pc, #132]	; (8003288 <TIM_OC2_SetConfig+0xe8>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d10d      	bne.n	8003224 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800320e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	011b      	lsls	r3, r3, #4
 8003216:	697a      	ldr	r2, [r7, #20]
 8003218:	4313      	orrs	r3, r2
 800321a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003222:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	4a17      	ldr	r2, [pc, #92]	; (8003284 <TIM_OC2_SetConfig+0xe4>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d003      	beq.n	8003234 <TIM_OC2_SetConfig+0x94>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	4a16      	ldr	r2, [pc, #88]	; (8003288 <TIM_OC2_SetConfig+0xe8>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d113      	bne.n	800325c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800323a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003242:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	695b      	ldr	r3, [r3, #20]
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	693a      	ldr	r2, [r7, #16]
 800324c:	4313      	orrs	r3, r2
 800324e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	699b      	ldr	r3, [r3, #24]
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	693a      	ldr	r2, [r7, #16]
 8003258:	4313      	orrs	r3, r2
 800325a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	693a      	ldr	r2, [r7, #16]
 8003260:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	68fa      	ldr	r2, [r7, #12]
 8003266:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	685a      	ldr	r2, [r3, #4]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	697a      	ldr	r2, [r7, #20]
 8003274:	621a      	str	r2, [r3, #32]
}
 8003276:	bf00      	nop
 8003278:	371c      	adds	r7, #28
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop
 8003284:	40010000 	.word	0x40010000
 8003288:	40010400 	.word	0x40010400

0800328c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800328c:	b480      	push	{r7}
 800328e:	b087      	sub	sp, #28
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a1b      	ldr	r3, [r3, #32]
 800329a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6a1b      	ldr	r3, [r3, #32]
 80032a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	69db      	ldr	r3, [r3, #28]
 80032b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f023 0303 	bic.w	r3, r3, #3
 80032c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	68fa      	ldr	r2, [r7, #12]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80032d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	021b      	lsls	r3, r3, #8
 80032dc:	697a      	ldr	r2, [r7, #20]
 80032de:	4313      	orrs	r3, r2
 80032e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a21      	ldr	r2, [pc, #132]	; (800336c <TIM_OC3_SetConfig+0xe0>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d003      	beq.n	80032f2 <TIM_OC3_SetConfig+0x66>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a20      	ldr	r2, [pc, #128]	; (8003370 <TIM_OC3_SetConfig+0xe4>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d10d      	bne.n	800330e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80032f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	021b      	lsls	r3, r3, #8
 8003300:	697a      	ldr	r2, [r7, #20]
 8003302:	4313      	orrs	r3, r2
 8003304:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800330c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a16      	ldr	r2, [pc, #88]	; (800336c <TIM_OC3_SetConfig+0xe0>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d003      	beq.n	800331e <TIM_OC3_SetConfig+0x92>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a15      	ldr	r2, [pc, #84]	; (8003370 <TIM_OC3_SetConfig+0xe4>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d113      	bne.n	8003346 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003324:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800332c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	695b      	ldr	r3, [r3, #20]
 8003332:	011b      	lsls	r3, r3, #4
 8003334:	693a      	ldr	r2, [r7, #16]
 8003336:	4313      	orrs	r3, r2
 8003338:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	699b      	ldr	r3, [r3, #24]
 800333e:	011b      	lsls	r3, r3, #4
 8003340:	693a      	ldr	r2, [r7, #16]
 8003342:	4313      	orrs	r3, r2
 8003344:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	693a      	ldr	r2, [r7, #16]
 800334a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	68fa      	ldr	r2, [r7, #12]
 8003350:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	685a      	ldr	r2, [r3, #4]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	697a      	ldr	r2, [r7, #20]
 800335e:	621a      	str	r2, [r3, #32]
}
 8003360:	bf00      	nop
 8003362:	371c      	adds	r7, #28
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr
 800336c:	40010000 	.word	0x40010000
 8003370:	40010400 	.word	0x40010400

08003374 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003374:	b480      	push	{r7}
 8003376:	b087      	sub	sp, #28
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a1b      	ldr	r3, [r3, #32]
 8003382:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6a1b      	ldr	r3, [r3, #32]
 800338e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	69db      	ldr	r3, [r3, #28]
 800339a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	021b      	lsls	r3, r3, #8
 80033b2:	68fa      	ldr	r2, [r7, #12]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80033be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	031b      	lsls	r3, r3, #12
 80033c6:	693a      	ldr	r2, [r7, #16]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	4a12      	ldr	r2, [pc, #72]	; (8003418 <TIM_OC4_SetConfig+0xa4>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d003      	beq.n	80033dc <TIM_OC4_SetConfig+0x68>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	4a11      	ldr	r2, [pc, #68]	; (800341c <TIM_OC4_SetConfig+0xa8>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d109      	bne.n	80033f0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	695b      	ldr	r3, [r3, #20]
 80033e8:	019b      	lsls	r3, r3, #6
 80033ea:	697a      	ldr	r2, [r7, #20]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	697a      	ldr	r2, [r7, #20]
 80033f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	68fa      	ldr	r2, [r7, #12]
 80033fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	685a      	ldr	r2, [r3, #4]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	693a      	ldr	r2, [r7, #16]
 8003408:	621a      	str	r2, [r3, #32]
}
 800340a:	bf00      	nop
 800340c:	371c      	adds	r7, #28
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr
 8003416:	bf00      	nop
 8003418:	40010000 	.word	0x40010000
 800341c:	40010400 	.word	0x40010400

08003420 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003420:	b480      	push	{r7}
 8003422:	b087      	sub	sp, #28
 8003424:	af00      	add	r7, sp, #0
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	60b9      	str	r1, [r7, #8]
 800342a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6a1b      	ldr	r3, [r3, #32]
 8003430:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6a1b      	ldr	r3, [r3, #32]
 8003436:	f023 0201 	bic.w	r2, r3, #1
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	699b      	ldr	r3, [r3, #24]
 8003442:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800344a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	011b      	lsls	r3, r3, #4
 8003450:	693a      	ldr	r2, [r7, #16]
 8003452:	4313      	orrs	r3, r2
 8003454:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	f023 030a 	bic.w	r3, r3, #10
 800345c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800345e:	697a      	ldr	r2, [r7, #20]
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	4313      	orrs	r3, r2
 8003464:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	693a      	ldr	r2, [r7, #16]
 800346a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	697a      	ldr	r2, [r7, #20]
 8003470:	621a      	str	r2, [r3, #32]
}
 8003472:	bf00      	nop
 8003474:	371c      	adds	r7, #28
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr

0800347e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800347e:	b480      	push	{r7}
 8003480:	b087      	sub	sp, #28
 8003482:	af00      	add	r7, sp, #0
 8003484:	60f8      	str	r0, [r7, #12]
 8003486:	60b9      	str	r1, [r7, #8]
 8003488:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	6a1b      	ldr	r3, [r3, #32]
 800348e:	f023 0210 	bic.w	r2, r3, #16
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	699b      	ldr	r3, [r3, #24]
 800349a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	6a1b      	ldr	r3, [r3, #32]
 80034a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80034a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	031b      	lsls	r3, r3, #12
 80034ae:	697a      	ldr	r2, [r7, #20]
 80034b0:	4313      	orrs	r3, r2
 80034b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80034ba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	011b      	lsls	r3, r3, #4
 80034c0:	693a      	ldr	r2, [r7, #16]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	697a      	ldr	r2, [r7, #20]
 80034ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	693a      	ldr	r2, [r7, #16]
 80034d0:	621a      	str	r2, [r3, #32]
}
 80034d2:	bf00      	nop
 80034d4:	371c      	adds	r7, #28
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr

080034de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80034de:	b480      	push	{r7}
 80034e0:	b085      	sub	sp, #20
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	6078      	str	r0, [r7, #4]
 80034e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80034f6:	683a      	ldr	r2, [r7, #0]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	f043 0307 	orr.w	r3, r3, #7
 8003500:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	68fa      	ldr	r2, [r7, #12]
 8003506:	609a      	str	r2, [r3, #8]
}
 8003508:	bf00      	nop
 800350a:	3714      	adds	r7, #20
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr

08003514 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003514:	b480      	push	{r7}
 8003516:	b087      	sub	sp, #28
 8003518:	af00      	add	r7, sp, #0
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	60b9      	str	r1, [r7, #8]
 800351e:	607a      	str	r2, [r7, #4]
 8003520:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800352e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	021a      	lsls	r2, r3, #8
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	431a      	orrs	r2, r3
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	4313      	orrs	r3, r2
 800353c:	697a      	ldr	r2, [r7, #20]
 800353e:	4313      	orrs	r3, r2
 8003540:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	697a      	ldr	r2, [r7, #20]
 8003546:	609a      	str	r2, [r3, #8]
}
 8003548:	bf00      	nop
 800354a:	371c      	adds	r7, #28
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr

08003554 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003554:	b480      	push	{r7}
 8003556:	b087      	sub	sp, #28
 8003558:	af00      	add	r7, sp, #0
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	60b9      	str	r1, [r7, #8]
 800355e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	f003 031f 	and.w	r3, r3, #31
 8003566:	2201      	movs	r2, #1
 8003568:	fa02 f303 	lsl.w	r3, r2, r3
 800356c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	6a1a      	ldr	r2, [r3, #32]
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	43db      	mvns	r3, r3
 8003576:	401a      	ands	r2, r3
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6a1a      	ldr	r2, [r3, #32]
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	f003 031f 	and.w	r3, r3, #31
 8003586:	6879      	ldr	r1, [r7, #4]
 8003588:	fa01 f303 	lsl.w	r3, r1, r3
 800358c:	431a      	orrs	r2, r3
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	621a      	str	r2, [r3, #32]
}
 8003592:	bf00      	nop
 8003594:	371c      	adds	r7, #28
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr
	...

080035a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b085      	sub	sp, #20
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d101      	bne.n	80035b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80035b4:	2302      	movs	r3, #2
 80035b6:	e05a      	b.n	800366e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2202      	movs	r2, #2
 80035c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	68fa      	ldr	r2, [r7, #12]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	68fa      	ldr	r2, [r7, #12]
 80035f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a21      	ldr	r2, [pc, #132]	; (800367c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d022      	beq.n	8003642 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003604:	d01d      	beq.n	8003642 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a1d      	ldr	r2, [pc, #116]	; (8003680 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d018      	beq.n	8003642 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a1b      	ldr	r2, [pc, #108]	; (8003684 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d013      	beq.n	8003642 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a1a      	ldr	r2, [pc, #104]	; (8003688 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d00e      	beq.n	8003642 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a18      	ldr	r2, [pc, #96]	; (800368c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d009      	beq.n	8003642 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a17      	ldr	r2, [pc, #92]	; (8003690 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d004      	beq.n	8003642 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a15      	ldr	r2, [pc, #84]	; (8003694 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d10c      	bne.n	800365c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003648:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	68ba      	ldr	r2, [r7, #8]
 8003650:	4313      	orrs	r3, r2
 8003652:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	68ba      	ldr	r2, [r7, #8]
 800365a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2200      	movs	r2, #0
 8003668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800366c:	2300      	movs	r3, #0
}
 800366e:	4618      	mov	r0, r3
 8003670:	3714      	adds	r7, #20
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr
 800367a:	bf00      	nop
 800367c:	40010000 	.word	0x40010000
 8003680:	40000400 	.word	0x40000400
 8003684:	40000800 	.word	0x40000800
 8003688:	40000c00 	.word	0x40000c00
 800368c:	40010400 	.word	0x40010400
 8003690:	40014000 	.word	0x40014000
 8003694:	40001800 	.word	0x40001800

08003698 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003698:	b480      	push	{r7}
 800369a:	b085      	sub	sp, #20
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80036a2:	2300      	movs	r3, #0
 80036a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d101      	bne.n	80036b4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80036b0:	2302      	movs	r3, #2
 80036b2:	e03d      	b.n	8003730 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	4313      	orrs	r3, r2
 80036d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	691b      	ldr	r3, [r3, #16]
 80036fe:	4313      	orrs	r3, r2
 8003700:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	695b      	ldr	r3, [r3, #20]
 800370c:	4313      	orrs	r3, r2
 800370e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	69db      	ldr	r3, [r3, #28]
 800371a:	4313      	orrs	r3, r2
 800371c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	68fa      	ldr	r2, [r7, #12]
 8003724:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800372e:	2300      	movs	r3, #0
}
 8003730:	4618      	mov	r0, r3
 8003732:	3714      	adds	r7, #20
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr

0800373c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d101      	bne.n	800374e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e03f      	b.n	80037ce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003754:	b2db      	uxtb	r3, r3
 8003756:	2b00      	cmp	r3, #0
 8003758:	d106      	bne.n	8003768 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f7fd fb84 	bl	8000e70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2224      	movs	r2, #36	; 0x24
 800376c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	68da      	ldr	r2, [r3, #12]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800377e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f000 f829 	bl	80037d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	691a      	ldr	r2, [r3, #16]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003794:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	695a      	ldr	r2, [r3, #20]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	68da      	ldr	r2, [r3, #12]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80037b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2220      	movs	r2, #32
 80037c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2220      	movs	r2, #32
 80037c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80037cc:	2300      	movs	r3, #0
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3708      	adds	r7, #8
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
	...

080037d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037dc:	b0c0      	sub	sp, #256	; 0x100
 80037de:	af00      	add	r7, sp, #0
 80037e0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	691b      	ldr	r3, [r3, #16]
 80037ec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80037f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037f4:	68d9      	ldr	r1, [r3, #12]
 80037f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	ea40 0301 	orr.w	r3, r0, r1
 8003800:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003802:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003806:	689a      	ldr	r2, [r3, #8]
 8003808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800380c:	691b      	ldr	r3, [r3, #16]
 800380e:	431a      	orrs	r2, r3
 8003810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003814:	695b      	ldr	r3, [r3, #20]
 8003816:	431a      	orrs	r2, r3
 8003818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800381c:	69db      	ldr	r3, [r3, #28]
 800381e:	4313      	orrs	r3, r2
 8003820:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003830:	f021 010c 	bic.w	r1, r1, #12
 8003834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800383e:	430b      	orrs	r3, r1
 8003840:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003842:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	695b      	ldr	r3, [r3, #20]
 800384a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800384e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003852:	6999      	ldr	r1, [r3, #24]
 8003854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	ea40 0301 	orr.w	r3, r0, r1
 800385e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	4b8f      	ldr	r3, [pc, #572]	; (8003aa4 <UART_SetConfig+0x2cc>)
 8003868:	429a      	cmp	r2, r3
 800386a:	d005      	beq.n	8003878 <UART_SetConfig+0xa0>
 800386c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	4b8d      	ldr	r3, [pc, #564]	; (8003aa8 <UART_SetConfig+0x2d0>)
 8003874:	429a      	cmp	r2, r3
 8003876:	d104      	bne.n	8003882 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003878:	f7fe fba6 	bl	8001fc8 <HAL_RCC_GetPCLK2Freq>
 800387c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003880:	e003      	b.n	800388a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003882:	f7fe fb8d 	bl	8001fa0 <HAL_RCC_GetPCLK1Freq>
 8003886:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800388a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800388e:	69db      	ldr	r3, [r3, #28]
 8003890:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003894:	f040 810c 	bne.w	8003ab0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003898:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800389c:	2200      	movs	r2, #0
 800389e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80038a2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80038a6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80038aa:	4622      	mov	r2, r4
 80038ac:	462b      	mov	r3, r5
 80038ae:	1891      	adds	r1, r2, r2
 80038b0:	65b9      	str	r1, [r7, #88]	; 0x58
 80038b2:	415b      	adcs	r3, r3
 80038b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80038b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80038ba:	4621      	mov	r1, r4
 80038bc:	eb12 0801 	adds.w	r8, r2, r1
 80038c0:	4629      	mov	r1, r5
 80038c2:	eb43 0901 	adc.w	r9, r3, r1
 80038c6:	f04f 0200 	mov.w	r2, #0
 80038ca:	f04f 0300 	mov.w	r3, #0
 80038ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80038d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80038d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80038da:	4690      	mov	r8, r2
 80038dc:	4699      	mov	r9, r3
 80038de:	4623      	mov	r3, r4
 80038e0:	eb18 0303 	adds.w	r3, r8, r3
 80038e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80038e8:	462b      	mov	r3, r5
 80038ea:	eb49 0303 	adc.w	r3, r9, r3
 80038ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80038f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80038fe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003902:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003906:	460b      	mov	r3, r1
 8003908:	18db      	adds	r3, r3, r3
 800390a:	653b      	str	r3, [r7, #80]	; 0x50
 800390c:	4613      	mov	r3, r2
 800390e:	eb42 0303 	adc.w	r3, r2, r3
 8003912:	657b      	str	r3, [r7, #84]	; 0x54
 8003914:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003918:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800391c:	f7fc fc72 	bl	8000204 <__aeabi_uldivmod>
 8003920:	4602      	mov	r2, r0
 8003922:	460b      	mov	r3, r1
 8003924:	4b61      	ldr	r3, [pc, #388]	; (8003aac <UART_SetConfig+0x2d4>)
 8003926:	fba3 2302 	umull	r2, r3, r3, r2
 800392a:	095b      	lsrs	r3, r3, #5
 800392c:	011c      	lsls	r4, r3, #4
 800392e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003932:	2200      	movs	r2, #0
 8003934:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003938:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800393c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003940:	4642      	mov	r2, r8
 8003942:	464b      	mov	r3, r9
 8003944:	1891      	adds	r1, r2, r2
 8003946:	64b9      	str	r1, [r7, #72]	; 0x48
 8003948:	415b      	adcs	r3, r3
 800394a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800394c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003950:	4641      	mov	r1, r8
 8003952:	eb12 0a01 	adds.w	sl, r2, r1
 8003956:	4649      	mov	r1, r9
 8003958:	eb43 0b01 	adc.w	fp, r3, r1
 800395c:	f04f 0200 	mov.w	r2, #0
 8003960:	f04f 0300 	mov.w	r3, #0
 8003964:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003968:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800396c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003970:	4692      	mov	sl, r2
 8003972:	469b      	mov	fp, r3
 8003974:	4643      	mov	r3, r8
 8003976:	eb1a 0303 	adds.w	r3, sl, r3
 800397a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800397e:	464b      	mov	r3, r9
 8003980:	eb4b 0303 	adc.w	r3, fp, r3
 8003984:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003994:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003998:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800399c:	460b      	mov	r3, r1
 800399e:	18db      	adds	r3, r3, r3
 80039a0:	643b      	str	r3, [r7, #64]	; 0x40
 80039a2:	4613      	mov	r3, r2
 80039a4:	eb42 0303 	adc.w	r3, r2, r3
 80039a8:	647b      	str	r3, [r7, #68]	; 0x44
 80039aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80039ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80039b2:	f7fc fc27 	bl	8000204 <__aeabi_uldivmod>
 80039b6:	4602      	mov	r2, r0
 80039b8:	460b      	mov	r3, r1
 80039ba:	4611      	mov	r1, r2
 80039bc:	4b3b      	ldr	r3, [pc, #236]	; (8003aac <UART_SetConfig+0x2d4>)
 80039be:	fba3 2301 	umull	r2, r3, r3, r1
 80039c2:	095b      	lsrs	r3, r3, #5
 80039c4:	2264      	movs	r2, #100	; 0x64
 80039c6:	fb02 f303 	mul.w	r3, r2, r3
 80039ca:	1acb      	subs	r3, r1, r3
 80039cc:	00db      	lsls	r3, r3, #3
 80039ce:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80039d2:	4b36      	ldr	r3, [pc, #216]	; (8003aac <UART_SetConfig+0x2d4>)
 80039d4:	fba3 2302 	umull	r2, r3, r3, r2
 80039d8:	095b      	lsrs	r3, r3, #5
 80039da:	005b      	lsls	r3, r3, #1
 80039dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80039e0:	441c      	add	r4, r3
 80039e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039e6:	2200      	movs	r2, #0
 80039e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80039ec:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80039f0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80039f4:	4642      	mov	r2, r8
 80039f6:	464b      	mov	r3, r9
 80039f8:	1891      	adds	r1, r2, r2
 80039fa:	63b9      	str	r1, [r7, #56]	; 0x38
 80039fc:	415b      	adcs	r3, r3
 80039fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a00:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003a04:	4641      	mov	r1, r8
 8003a06:	1851      	adds	r1, r2, r1
 8003a08:	6339      	str	r1, [r7, #48]	; 0x30
 8003a0a:	4649      	mov	r1, r9
 8003a0c:	414b      	adcs	r3, r1
 8003a0e:	637b      	str	r3, [r7, #52]	; 0x34
 8003a10:	f04f 0200 	mov.w	r2, #0
 8003a14:	f04f 0300 	mov.w	r3, #0
 8003a18:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003a1c:	4659      	mov	r1, fp
 8003a1e:	00cb      	lsls	r3, r1, #3
 8003a20:	4651      	mov	r1, sl
 8003a22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a26:	4651      	mov	r1, sl
 8003a28:	00ca      	lsls	r2, r1, #3
 8003a2a:	4610      	mov	r0, r2
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	4603      	mov	r3, r0
 8003a30:	4642      	mov	r2, r8
 8003a32:	189b      	adds	r3, r3, r2
 8003a34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003a38:	464b      	mov	r3, r9
 8003a3a:	460a      	mov	r2, r1
 8003a3c:	eb42 0303 	adc.w	r3, r2, r3
 8003a40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003a50:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003a54:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003a58:	460b      	mov	r3, r1
 8003a5a:	18db      	adds	r3, r3, r3
 8003a5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a5e:	4613      	mov	r3, r2
 8003a60:	eb42 0303 	adc.w	r3, r2, r3
 8003a64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a66:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003a6a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003a6e:	f7fc fbc9 	bl	8000204 <__aeabi_uldivmod>
 8003a72:	4602      	mov	r2, r0
 8003a74:	460b      	mov	r3, r1
 8003a76:	4b0d      	ldr	r3, [pc, #52]	; (8003aac <UART_SetConfig+0x2d4>)
 8003a78:	fba3 1302 	umull	r1, r3, r3, r2
 8003a7c:	095b      	lsrs	r3, r3, #5
 8003a7e:	2164      	movs	r1, #100	; 0x64
 8003a80:	fb01 f303 	mul.w	r3, r1, r3
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	00db      	lsls	r3, r3, #3
 8003a88:	3332      	adds	r3, #50	; 0x32
 8003a8a:	4a08      	ldr	r2, [pc, #32]	; (8003aac <UART_SetConfig+0x2d4>)
 8003a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a90:	095b      	lsrs	r3, r3, #5
 8003a92:	f003 0207 	and.w	r2, r3, #7
 8003a96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4422      	add	r2, r4
 8003a9e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003aa0:	e105      	b.n	8003cae <UART_SetConfig+0x4d6>
 8003aa2:	bf00      	nop
 8003aa4:	40011000 	.word	0x40011000
 8003aa8:	40011400 	.word	0x40011400
 8003aac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ab0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003aba:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003abe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003ac2:	4642      	mov	r2, r8
 8003ac4:	464b      	mov	r3, r9
 8003ac6:	1891      	adds	r1, r2, r2
 8003ac8:	6239      	str	r1, [r7, #32]
 8003aca:	415b      	adcs	r3, r3
 8003acc:	627b      	str	r3, [r7, #36]	; 0x24
 8003ace:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003ad2:	4641      	mov	r1, r8
 8003ad4:	1854      	adds	r4, r2, r1
 8003ad6:	4649      	mov	r1, r9
 8003ad8:	eb43 0501 	adc.w	r5, r3, r1
 8003adc:	f04f 0200 	mov.w	r2, #0
 8003ae0:	f04f 0300 	mov.w	r3, #0
 8003ae4:	00eb      	lsls	r3, r5, #3
 8003ae6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003aea:	00e2      	lsls	r2, r4, #3
 8003aec:	4614      	mov	r4, r2
 8003aee:	461d      	mov	r5, r3
 8003af0:	4643      	mov	r3, r8
 8003af2:	18e3      	adds	r3, r4, r3
 8003af4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003af8:	464b      	mov	r3, r9
 8003afa:	eb45 0303 	adc.w	r3, r5, r3
 8003afe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003b02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003b0e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003b12:	f04f 0200 	mov.w	r2, #0
 8003b16:	f04f 0300 	mov.w	r3, #0
 8003b1a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003b1e:	4629      	mov	r1, r5
 8003b20:	008b      	lsls	r3, r1, #2
 8003b22:	4621      	mov	r1, r4
 8003b24:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b28:	4621      	mov	r1, r4
 8003b2a:	008a      	lsls	r2, r1, #2
 8003b2c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003b30:	f7fc fb68 	bl	8000204 <__aeabi_uldivmod>
 8003b34:	4602      	mov	r2, r0
 8003b36:	460b      	mov	r3, r1
 8003b38:	4b60      	ldr	r3, [pc, #384]	; (8003cbc <UART_SetConfig+0x4e4>)
 8003b3a:	fba3 2302 	umull	r2, r3, r3, r2
 8003b3e:	095b      	lsrs	r3, r3, #5
 8003b40:	011c      	lsls	r4, r3, #4
 8003b42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b46:	2200      	movs	r2, #0
 8003b48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003b4c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003b50:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003b54:	4642      	mov	r2, r8
 8003b56:	464b      	mov	r3, r9
 8003b58:	1891      	adds	r1, r2, r2
 8003b5a:	61b9      	str	r1, [r7, #24]
 8003b5c:	415b      	adcs	r3, r3
 8003b5e:	61fb      	str	r3, [r7, #28]
 8003b60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b64:	4641      	mov	r1, r8
 8003b66:	1851      	adds	r1, r2, r1
 8003b68:	6139      	str	r1, [r7, #16]
 8003b6a:	4649      	mov	r1, r9
 8003b6c:	414b      	adcs	r3, r1
 8003b6e:	617b      	str	r3, [r7, #20]
 8003b70:	f04f 0200 	mov.w	r2, #0
 8003b74:	f04f 0300 	mov.w	r3, #0
 8003b78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b7c:	4659      	mov	r1, fp
 8003b7e:	00cb      	lsls	r3, r1, #3
 8003b80:	4651      	mov	r1, sl
 8003b82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b86:	4651      	mov	r1, sl
 8003b88:	00ca      	lsls	r2, r1, #3
 8003b8a:	4610      	mov	r0, r2
 8003b8c:	4619      	mov	r1, r3
 8003b8e:	4603      	mov	r3, r0
 8003b90:	4642      	mov	r2, r8
 8003b92:	189b      	adds	r3, r3, r2
 8003b94:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003b98:	464b      	mov	r3, r9
 8003b9a:	460a      	mov	r2, r1
 8003b9c:	eb42 0303 	adc.w	r3, r2, r3
 8003ba0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	2200      	movs	r2, #0
 8003bac:	67bb      	str	r3, [r7, #120]	; 0x78
 8003bae:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003bb0:	f04f 0200 	mov.w	r2, #0
 8003bb4:	f04f 0300 	mov.w	r3, #0
 8003bb8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003bbc:	4649      	mov	r1, r9
 8003bbe:	008b      	lsls	r3, r1, #2
 8003bc0:	4641      	mov	r1, r8
 8003bc2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003bc6:	4641      	mov	r1, r8
 8003bc8:	008a      	lsls	r2, r1, #2
 8003bca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003bce:	f7fc fb19 	bl	8000204 <__aeabi_uldivmod>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	460b      	mov	r3, r1
 8003bd6:	4b39      	ldr	r3, [pc, #228]	; (8003cbc <UART_SetConfig+0x4e4>)
 8003bd8:	fba3 1302 	umull	r1, r3, r3, r2
 8003bdc:	095b      	lsrs	r3, r3, #5
 8003bde:	2164      	movs	r1, #100	; 0x64
 8003be0:	fb01 f303 	mul.w	r3, r1, r3
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	011b      	lsls	r3, r3, #4
 8003be8:	3332      	adds	r3, #50	; 0x32
 8003bea:	4a34      	ldr	r2, [pc, #208]	; (8003cbc <UART_SetConfig+0x4e4>)
 8003bec:	fba2 2303 	umull	r2, r3, r2, r3
 8003bf0:	095b      	lsrs	r3, r3, #5
 8003bf2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bf6:	441c      	add	r4, r3
 8003bf8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	673b      	str	r3, [r7, #112]	; 0x70
 8003c00:	677a      	str	r2, [r7, #116]	; 0x74
 8003c02:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003c06:	4642      	mov	r2, r8
 8003c08:	464b      	mov	r3, r9
 8003c0a:	1891      	adds	r1, r2, r2
 8003c0c:	60b9      	str	r1, [r7, #8]
 8003c0e:	415b      	adcs	r3, r3
 8003c10:	60fb      	str	r3, [r7, #12]
 8003c12:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c16:	4641      	mov	r1, r8
 8003c18:	1851      	adds	r1, r2, r1
 8003c1a:	6039      	str	r1, [r7, #0]
 8003c1c:	4649      	mov	r1, r9
 8003c1e:	414b      	adcs	r3, r1
 8003c20:	607b      	str	r3, [r7, #4]
 8003c22:	f04f 0200 	mov.w	r2, #0
 8003c26:	f04f 0300 	mov.w	r3, #0
 8003c2a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003c2e:	4659      	mov	r1, fp
 8003c30:	00cb      	lsls	r3, r1, #3
 8003c32:	4651      	mov	r1, sl
 8003c34:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c38:	4651      	mov	r1, sl
 8003c3a:	00ca      	lsls	r2, r1, #3
 8003c3c:	4610      	mov	r0, r2
 8003c3e:	4619      	mov	r1, r3
 8003c40:	4603      	mov	r3, r0
 8003c42:	4642      	mov	r2, r8
 8003c44:	189b      	adds	r3, r3, r2
 8003c46:	66bb      	str	r3, [r7, #104]	; 0x68
 8003c48:	464b      	mov	r3, r9
 8003c4a:	460a      	mov	r2, r1
 8003c4c:	eb42 0303 	adc.w	r3, r2, r3
 8003c50:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003c52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	663b      	str	r3, [r7, #96]	; 0x60
 8003c5c:	667a      	str	r2, [r7, #100]	; 0x64
 8003c5e:	f04f 0200 	mov.w	r2, #0
 8003c62:	f04f 0300 	mov.w	r3, #0
 8003c66:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003c6a:	4649      	mov	r1, r9
 8003c6c:	008b      	lsls	r3, r1, #2
 8003c6e:	4641      	mov	r1, r8
 8003c70:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c74:	4641      	mov	r1, r8
 8003c76:	008a      	lsls	r2, r1, #2
 8003c78:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003c7c:	f7fc fac2 	bl	8000204 <__aeabi_uldivmod>
 8003c80:	4602      	mov	r2, r0
 8003c82:	460b      	mov	r3, r1
 8003c84:	4b0d      	ldr	r3, [pc, #52]	; (8003cbc <UART_SetConfig+0x4e4>)
 8003c86:	fba3 1302 	umull	r1, r3, r3, r2
 8003c8a:	095b      	lsrs	r3, r3, #5
 8003c8c:	2164      	movs	r1, #100	; 0x64
 8003c8e:	fb01 f303 	mul.w	r3, r1, r3
 8003c92:	1ad3      	subs	r3, r2, r3
 8003c94:	011b      	lsls	r3, r3, #4
 8003c96:	3332      	adds	r3, #50	; 0x32
 8003c98:	4a08      	ldr	r2, [pc, #32]	; (8003cbc <UART_SetConfig+0x4e4>)
 8003c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c9e:	095b      	lsrs	r3, r3, #5
 8003ca0:	f003 020f 	and.w	r2, r3, #15
 8003ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4422      	add	r2, r4
 8003cac:	609a      	str	r2, [r3, #8]
}
 8003cae:	bf00      	nop
 8003cb0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cba:	bf00      	nop
 8003cbc:	51eb851f 	.word	0x51eb851f

08003cc0 <__libc_init_array>:
 8003cc0:	b570      	push	{r4, r5, r6, lr}
 8003cc2:	4d0d      	ldr	r5, [pc, #52]	; (8003cf8 <__libc_init_array+0x38>)
 8003cc4:	4c0d      	ldr	r4, [pc, #52]	; (8003cfc <__libc_init_array+0x3c>)
 8003cc6:	1b64      	subs	r4, r4, r5
 8003cc8:	10a4      	asrs	r4, r4, #2
 8003cca:	2600      	movs	r6, #0
 8003ccc:	42a6      	cmp	r6, r4
 8003cce:	d109      	bne.n	8003ce4 <__libc_init_array+0x24>
 8003cd0:	4d0b      	ldr	r5, [pc, #44]	; (8003d00 <__libc_init_array+0x40>)
 8003cd2:	4c0c      	ldr	r4, [pc, #48]	; (8003d04 <__libc_init_array+0x44>)
 8003cd4:	f000 f820 	bl	8003d18 <_init>
 8003cd8:	1b64      	subs	r4, r4, r5
 8003cda:	10a4      	asrs	r4, r4, #2
 8003cdc:	2600      	movs	r6, #0
 8003cde:	42a6      	cmp	r6, r4
 8003ce0:	d105      	bne.n	8003cee <__libc_init_array+0x2e>
 8003ce2:	bd70      	pop	{r4, r5, r6, pc}
 8003ce4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ce8:	4798      	blx	r3
 8003cea:	3601      	adds	r6, #1
 8003cec:	e7ee      	b.n	8003ccc <__libc_init_array+0xc>
 8003cee:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cf2:	4798      	blx	r3
 8003cf4:	3601      	adds	r6, #1
 8003cf6:	e7f2      	b.n	8003cde <__libc_init_array+0x1e>
 8003cf8:	08003d50 	.word	0x08003d50
 8003cfc:	08003d50 	.word	0x08003d50
 8003d00:	08003d50 	.word	0x08003d50
 8003d04:	08003d54 	.word	0x08003d54

08003d08 <memset>:
 8003d08:	4402      	add	r2, r0
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d100      	bne.n	8003d12 <memset+0xa>
 8003d10:	4770      	bx	lr
 8003d12:	f803 1b01 	strb.w	r1, [r3], #1
 8003d16:	e7f9      	b.n	8003d0c <memset+0x4>

08003d18 <_init>:
 8003d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d1a:	bf00      	nop
 8003d1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d1e:	bc08      	pop	{r3}
 8003d20:	469e      	mov	lr, r3
 8003d22:	4770      	bx	lr

08003d24 <_fini>:
 8003d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d26:	bf00      	nop
 8003d28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d2a:	bc08      	pop	{r3}
 8003d2c:	469e      	mov	lr, r3
 8003d2e:	4770      	bx	lr
