
MOTOR_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000550c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  080056d0  080056d0  000156d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005754  08005754  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005754  08005754  00015754  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800575c  0800575c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800575c  0800575c  0001575c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005760  08005760  00015760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005764  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  20000070  080057d4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  080057d4  000201c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012106  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002562  00000000  00000000  000321a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f18  00000000  00000000  00034708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e40  00000000  00000000  00035620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026041  00000000  00000000  00036460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011184  00000000  00000000  0005c4a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000da94b  00000000  00000000  0006d625  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00147f70  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004720  00000000  00000000  00147fc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000070 	.word	0x20000070
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080056b8 	.word	0x080056b8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000074 	.word	0x20000074
 8000200:	080056b8 	.word	0x080056b8

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b08a      	sub	sp, #40	; 0x28
 800050c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	setbuf(stdout, NULL);
 800050e:	4b4d      	ldr	r3, [pc, #308]	; (8000644 <main+0x13c>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	689b      	ldr	r3, [r3, #8]
 8000514:	2100      	movs	r1, #0
 8000516:	4618      	mov	r0, r3
 8000518:	f004 fb70 	bl	8004bfc <setbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051c:	f001 fa06 	bl	800192c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000520:	f000 f89e 	bl	8000660 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000524:	f000 fb16 	bl	8000b54 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 8000528:	f000 fae6 	bl	8000af8 <_ZL19MX_USART2_UART_Initv>
  MX_TIM1_Init();
 800052c:	f000 f956 	bl	80007dc <_ZL12MX_TIM1_Initv>
  MX_TIM2_Init();
 8000530:	f000 fa34 	bl	800099c <_ZL12MX_TIM2_Initv>
  MX_CAN2_Init();
 8000534:	f000 f916 	bl	8000764 <_ZL12MX_CAN2_Initv>
  /* USER CODE BEGIN 2 */
	CAN_FilterTypeDef filter;
	  filter.FilterIdHigh         = 0;                        // フィルターID(上位16ビット)
 8000538:	2300      	movs	r3, #0
 800053a:	603b      	str	r3, [r7, #0]
	  filter.FilterIdLow          = 0;                        // フィルターID(下位16ビット)
 800053c:	2300      	movs	r3, #0
 800053e:	607b      	str	r3, [r7, #4]
	  filter.FilterMaskIdHigh     = 0;                        // フィルターマスク(上位16ビット)
 8000540:	2300      	movs	r3, #0
 8000542:	60bb      	str	r3, [r7, #8]
	  filter.FilterMaskIdLow      = 0;                        // フィルターマスク(下位16ビット)
 8000544:	2300      	movs	r3, #0
 8000546:	60fb      	str	r3, [r7, #12]
	  filter.FilterScale          = CAN_FILTERSCALE_32BIT;    // フィルタースケール
 8000548:	2301      	movs	r3, #1
 800054a:	61fb      	str	r3, [r7, #28]
	  filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;         // フィルターに割り当てるFIFO
 800054c:	2300      	movs	r3, #0
 800054e:	613b      	str	r3, [r7, #16]
	  filter.FilterBank           = 14;                        // フィルターバンクNo
 8000550:	230e      	movs	r3, #14
 8000552:	617b      	str	r3, [r7, #20]
	  filter.FilterMode           = CAN_FILTERMODE_IDMASK;    // フィルターモード
 8000554:	2300      	movs	r3, #0
 8000556:	61bb      	str	r3, [r7, #24]
	  filter.SlaveStartFilterBank = 14;                       // スレーブCANの開始フィルターバンクNo
 8000558:	230e      	movs	r3, #14
 800055a:	627b      	str	r3, [r7, #36]	; 0x24
	  filter.FilterActivation     = ENABLE;                   // フィルター無効／有効
 800055c:	2301      	movs	r3, #1
 800055e:	623b      	str	r3, [r7, #32]





HAL_CAN_ConfigFilter(&hcan2, &filter);
 8000560:	463b      	mov	r3, r7
 8000562:	4619      	mov	r1, r3
 8000564:	4838      	ldr	r0, [pc, #224]	; (8000648 <main+0x140>)
 8000566:	f001 fb73 	bl	8001c50 <HAL_CAN_ConfigFilter>
HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800056a:	2100      	movs	r1, #0
 800056c:	4837      	ldr	r0, [pc, #220]	; (800064c <main+0x144>)
 800056e:	f003 f99b 	bl	80038a8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000572:	2104      	movs	r1, #4
 8000574:	4835      	ldr	r0, [pc, #212]	; (800064c <main+0x144>)
 8000576:	f003 f997 	bl	80038a8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800057a:	2108      	movs	r1, #8
 800057c:	4833      	ldr	r0, [pc, #204]	; (800064c <main+0x144>)
 800057e:	f003 f993 	bl	80038a8 <HAL_TIM_PWM_Start>
  HAL_CAN_Start(&hcan2);
 8000582:	4831      	ldr	r0, [pc, #196]	; (8000648 <main+0x140>)
 8000584:	f001 fc44 	bl	8001e10 <HAL_CAN_Start>
  // 割り込み有効
  HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000588:	2102      	movs	r1, #2
 800058a:	482f      	ldr	r0, [pc, #188]	; (8000648 <main+0x140>)
 800058c:	f001 fd96 	bl	80020bc <HAL_CAN_ActivateNotification>
  printf("start\n");
 8000590:	482f      	ldr	r0, [pc, #188]	; (8000650 <main+0x148>)
 8000592:	f004 fb2b 	bl	8004bec <puts>


  HAL_GPIO_WritePin(GPIOC,PSB1_Pin,GPIO_PIN_SET);
 8000596:	2201      	movs	r2, #1
 8000598:	2102      	movs	r1, #2
 800059a:	482e      	ldr	r0, [pc, #184]	; (8000654 <main+0x14c>)
 800059c:	f002 fa8a 	bl	8002ab4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB,BRK1_Pin,GPIO_PIN_RESET);
 80005a0:	2200      	movs	r2, #0
 80005a2:	2101      	movs	r1, #1
 80005a4:	482c      	ldr	r0, [pc, #176]	; (8000658 <main+0x150>)
 80005a6:	f002 fa85 	bl	8002ab4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC,PSB2_Pin,GPIO_PIN_SET);
 80005aa:	2201      	movs	r2, #1
 80005ac:	2101      	movs	r1, #1
 80005ae:	4829      	ldr	r0, [pc, #164]	; (8000654 <main+0x14c>)
 80005b0:	f002 fa80 	bl	8002ab4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC,BRK2_Pin,GPIO_PIN_RESET);
 80005b4:	2200      	movs	r2, #0
 80005b6:	2104      	movs	r1, #4
 80005b8:	4826      	ldr	r0, [pc, #152]	; (8000654 <main+0x14c>)
 80005ba:	f002 fa7b 	bl	8002ab4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC,PSB3_Pin,GPIO_PIN_SET);
 80005be:	2201      	movs	r2, #1
 80005c0:	2110      	movs	r1, #16
 80005c2:	4824      	ldr	r0, [pc, #144]	; (8000654 <main+0x14c>)
 80005c4:	f002 fa76 	bl	8002ab4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB,BRK3_Pin,GPIO_PIN_RESET);
 80005c8:	2200      	movs	r2, #0
 80005ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005ce:	4822      	ldr	r0, [pc, #136]	; (8000658 <main+0x150>)
 80005d0:	f002 fa70 	bl	8002ab4 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOA, LED1_Pin, GPIO_PIN_SET);
 80005d4:	2201      	movs	r2, #1
 80005d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005da:	4820      	ldr	r0, [pc, #128]	; (800065c <main+0x154>)
 80005dc:	f002 fa6a 	bl	8002ab4 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80005e0:	2064      	movs	r0, #100	; 0x64
 80005e2:	f001 fa15 	bl	8001a10 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, LED2_Pin, GPIO_PIN_SET);
 80005e6:	2201      	movs	r2, #1
 80005e8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005ec:	481b      	ldr	r0, [pc, #108]	; (800065c <main+0x154>)
 80005ee:	f002 fa61 	bl	8002ab4 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80005f2:	2064      	movs	r0, #100	; 0x64
 80005f4:	f001 fa0c 	bl	8001a10 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, LED3_Pin, GPIO_PIN_SET);
 80005f8:	2201      	movs	r2, #1
 80005fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005fe:	4817      	ldr	r0, [pc, #92]	; (800065c <main+0x154>)
 8000600:	f002 fa58 	bl	8002ab4 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000604:	2064      	movs	r0, #100	; 0x64
 8000606:	f001 fa03 	bl	8001a10 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, LED1_Pin, GPIO_PIN_RESET);
 800060a:	2200      	movs	r2, #0
 800060c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000610:	4812      	ldr	r0, [pc, #72]	; (800065c <main+0x154>)
 8000612:	f002 fa4f 	bl	8002ab4 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000616:	2064      	movs	r0, #100	; 0x64
 8000618:	f001 f9fa 	bl	8001a10 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, LED2_Pin, GPIO_PIN_RESET);
 800061c:	2200      	movs	r2, #0
 800061e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000622:	480e      	ldr	r0, [pc, #56]	; (800065c <main+0x154>)
 8000624:	f002 fa46 	bl	8002ab4 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000628:	2064      	movs	r0, #100	; 0x64
 800062a:	f001 f9f1 	bl	8001a10 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, LED3_Pin, GPIO_PIN_RESET);
 800062e:	2200      	movs	r2, #0
 8000630:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000634:	4809      	ldr	r0, [pc, #36]	; (800065c <main+0x154>)
 8000636:	f002 fa3d 	bl	8002ab4 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 800063a:	2064      	movs	r0, #100	; 0x64
 800063c:	f001 f9e8 	bl	8001a10 <HAL_Delay>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000640:	e7fe      	b.n	8000640 <main+0x138>
 8000642:	bf00      	nop
 8000644:	2000000c 	.word	0x2000000c
 8000648:	2000008c 	.word	0x2000008c
 800064c:	200000b4 	.word	0x200000b4
 8000650:	080056d0 	.word	0x080056d0
 8000654:	40020800 	.word	0x40020800
 8000658:	40020400 	.word	0x40020400
 800065c:	40020000 	.word	0x40020000

08000660 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b094      	sub	sp, #80	; 0x50
 8000664:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000666:	f107 031c 	add.w	r3, r7, #28
 800066a:	2234      	movs	r2, #52	; 0x34
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f004 fa46 	bl	8004b00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000674:	f107 0308 	add.w	r3, r7, #8
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	605a      	str	r2, [r3, #4]
 800067e:	609a      	str	r2, [r3, #8]
 8000680:	60da      	str	r2, [r3, #12]
 8000682:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000684:	2300      	movs	r3, #0
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	4b34      	ldr	r3, [pc, #208]	; (800075c <_Z18SystemClock_Configv+0xfc>)
 800068a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068c:	4a33      	ldr	r2, [pc, #204]	; (800075c <_Z18SystemClock_Configv+0xfc>)
 800068e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000692:	6413      	str	r3, [r2, #64]	; 0x40
 8000694:	4b31      	ldr	r3, [pc, #196]	; (800075c <_Z18SystemClock_Configv+0xfc>)
 8000696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000698:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800069c:	607b      	str	r3, [r7, #4]
 800069e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006a0:	2300      	movs	r3, #0
 80006a2:	603b      	str	r3, [r7, #0]
 80006a4:	4b2e      	ldr	r3, [pc, #184]	; (8000760 <_Z18SystemClock_Configv+0x100>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a2d      	ldr	r2, [pc, #180]	; (8000760 <_Z18SystemClock_Configv+0x100>)
 80006aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006ae:	6013      	str	r3, [r2, #0]
 80006b0:	4b2b      	ldr	r3, [pc, #172]	; (8000760 <_Z18SystemClock_Configv+0x100>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006b8:	603b      	str	r3, [r7, #0]
 80006ba:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006bc:	2302      	movs	r3, #2
 80006be:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006c0:	2301      	movs	r3, #1
 80006c2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c4:	2310      	movs	r3, #16
 80006c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c8:	2302      	movs	r3, #2
 80006ca:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006cc:	2300      	movs	r3, #0
 80006ce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006d0:	2308      	movs	r3, #8
 80006d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80006d4:	23b4      	movs	r3, #180	; 0xb4
 80006d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006d8:	2302      	movs	r3, #2
 80006da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006dc:	2302      	movs	r3, #2
 80006de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006e0:	2302      	movs	r3, #2
 80006e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e4:	f107 031c 	add.w	r3, r7, #28
 80006e8:	4618      	mov	r0, r3
 80006ea:	f002 fd97 	bl	800321c <HAL_RCC_OscConfig>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	bf14      	ite	ne
 80006f4:	2301      	movne	r3, #1
 80006f6:	2300      	moveq	r3, #0
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 80006fe:	f000 fd5f 	bl	80011c0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000702:	f002 f9f1 	bl	8002ae8 <HAL_PWREx_EnableOverDrive>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	bf14      	ite	ne
 800070c:	2301      	movne	r3, #1
 800070e:	2300      	moveq	r3, #0
 8000710:	b2db      	uxtb	r3, r3
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <_Z18SystemClock_Configv+0xba>
  {
    Error_Handler();
 8000716:	f000 fd53 	bl	80011c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071a:	230f      	movs	r3, #15
 800071c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800071e:	2302      	movs	r3, #2
 8000720:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000722:	2300      	movs	r3, #0
 8000724:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000726:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800072a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800072c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000730:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000732:	f107 0308 	add.w	r3, r7, #8
 8000736:	2105      	movs	r1, #5
 8000738:	4618      	mov	r0, r3
 800073a:	f002 fa25 	bl	8002b88 <HAL_RCC_ClockConfig>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	bf14      	ite	ne
 8000744:	2301      	movne	r3, #1
 8000746:	2300      	moveq	r3, #0
 8000748:	b2db      	uxtb	r3, r3
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <_Z18SystemClock_Configv+0xf2>
  {
    Error_Handler();
 800074e:	f000 fd37 	bl	80011c0 <Error_Handler>
  }
}
 8000752:	bf00      	nop
 8000754:	3750      	adds	r7, #80	; 0x50
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	40023800 	.word	0x40023800
 8000760:	40007000 	.word	0x40007000

08000764 <_ZL12MX_CAN2_Initv>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000768:	4b1a      	ldr	r3, [pc, #104]	; (80007d4 <_ZL12MX_CAN2_Initv+0x70>)
 800076a:	4a1b      	ldr	r2, [pc, #108]	; (80007d8 <_ZL12MX_CAN2_Initv+0x74>)
 800076c:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 9;
 800076e:	4b19      	ldr	r3, [pc, #100]	; (80007d4 <_ZL12MX_CAN2_Initv+0x70>)
 8000770:	2209      	movs	r2, #9
 8000772:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000774:	4b17      	ldr	r3, [pc, #92]	; (80007d4 <_ZL12MX_CAN2_Initv+0x70>)
 8000776:	2200      	movs	r2, #0
 8000778:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_4TQ;
 800077a:	4b16      	ldr	r3, [pc, #88]	; (80007d4 <_ZL12MX_CAN2_Initv+0x70>)
 800077c:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 8000780:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_4TQ;
 8000782:	4b14      	ldr	r3, [pc, #80]	; (80007d4 <_ZL12MX_CAN2_Initv+0x70>)
 8000784:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000788:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_5TQ;
 800078a:	4b12      	ldr	r3, [pc, #72]	; (80007d4 <_ZL12MX_CAN2_Initv+0x70>)
 800078c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000790:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000792:	4b10      	ldr	r3, [pc, #64]	; (80007d4 <_ZL12MX_CAN2_Initv+0x70>)
 8000794:	2200      	movs	r2, #0
 8000796:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000798:	4b0e      	ldr	r3, [pc, #56]	; (80007d4 <_ZL12MX_CAN2_Initv+0x70>)
 800079a:	2200      	movs	r2, #0
 800079c:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 800079e:	4b0d      	ldr	r3, [pc, #52]	; (80007d4 <_ZL12MX_CAN2_Initv+0x70>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80007a4:	4b0b      	ldr	r3, [pc, #44]	; (80007d4 <_ZL12MX_CAN2_Initv+0x70>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80007aa:	4b0a      	ldr	r3, [pc, #40]	; (80007d4 <_ZL12MX_CAN2_Initv+0x70>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80007b0:	4b08      	ldr	r3, [pc, #32]	; (80007d4 <_ZL12MX_CAN2_Initv+0x70>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80007b6:	4807      	ldr	r0, [pc, #28]	; (80007d4 <_ZL12MX_CAN2_Initv+0x70>)
 80007b8:	f001 f94e 	bl	8001a58 <HAL_CAN_Init>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	bf14      	ite	ne
 80007c2:	2301      	movne	r3, #1
 80007c4:	2300      	moveq	r3, #0
 80007c6:	b2db      	uxtb	r3, r3
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <_ZL12MX_CAN2_Initv+0x6c>
  {
    Error_Handler();
 80007cc:	f000 fcf8 	bl	80011c0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80007d0:	bf00      	nop
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	2000008c 	.word	0x2000008c
 80007d8:	40006800 	.word	0x40006800

080007dc <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b096      	sub	sp, #88	; 0x58
 80007e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007e2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	605a      	str	r2, [r3, #4]
 80007ec:	609a      	str	r2, [r3, #8]
 80007ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007f0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80007f4:	2200      	movs	r2, #0
 80007f6:	601a      	str	r2, [r3, #0]
 80007f8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	605a      	str	r2, [r3, #4]
 8000804:	609a      	str	r2, [r3, #8]
 8000806:	60da      	str	r2, [r3, #12]
 8000808:	611a      	str	r2, [r3, #16]
 800080a:	615a      	str	r2, [r3, #20]
 800080c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800080e:	1d3b      	adds	r3, r7, #4
 8000810:	2220      	movs	r2, #32
 8000812:	2100      	movs	r1, #0
 8000814:	4618      	mov	r0, r3
 8000816:	f004 f973 	bl	8004b00 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800081a:	4b5e      	ldr	r3, [pc, #376]	; (8000994 <_ZL12MX_TIM1_Initv+0x1b8>)
 800081c:	4a5e      	ldr	r2, [pc, #376]	; (8000998 <_ZL12MX_TIM1_Initv+0x1bc>)
 800081e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000820:	4b5c      	ldr	r3, [pc, #368]	; (8000994 <_ZL12MX_TIM1_Initv+0x1b8>)
 8000822:	2200      	movs	r2, #0
 8000824:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000826:	4b5b      	ldr	r3, [pc, #364]	; (8000994 <_ZL12MX_TIM1_Initv+0x1b8>)
 8000828:	2200      	movs	r2, #0
 800082a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800082c:	4b59      	ldr	r3, [pc, #356]	; (8000994 <_ZL12MX_TIM1_Initv+0x1b8>)
 800082e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000832:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000834:	4b57      	ldr	r3, [pc, #348]	; (8000994 <_ZL12MX_TIM1_Initv+0x1b8>)
 8000836:	2200      	movs	r2, #0
 8000838:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800083a:	4b56      	ldr	r3, [pc, #344]	; (8000994 <_ZL12MX_TIM1_Initv+0x1b8>)
 800083c:	2200      	movs	r2, #0
 800083e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000840:	4b54      	ldr	r3, [pc, #336]	; (8000994 <_ZL12MX_TIM1_Initv+0x1b8>)
 8000842:	2200      	movs	r2, #0
 8000844:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000846:	4853      	ldr	r0, [pc, #332]	; (8000994 <_ZL12MX_TIM1_Initv+0x1b8>)
 8000848:	f002 ff86 	bl	8003758 <HAL_TIM_Base_Init>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	bf14      	ite	ne
 8000852:	2301      	movne	r3, #1
 8000854:	2300      	moveq	r3, #0
 8000856:	b2db      	uxtb	r3, r3
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <_ZL12MX_TIM1_Initv+0x84>
  {
    Error_Handler();
 800085c:	f000 fcb0 	bl	80011c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000860:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000864:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000866:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800086a:	4619      	mov	r1, r3
 800086c:	4849      	ldr	r0, [pc, #292]	; (8000994 <_ZL12MX_TIM1_Initv+0x1b8>)
 800086e:	f003 f9a5 	bl	8003bbc <HAL_TIM_ConfigClockSource>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	bf14      	ite	ne
 8000878:	2301      	movne	r3, #1
 800087a:	2300      	moveq	r3, #0
 800087c:	b2db      	uxtb	r3, r3
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <_ZL12MX_TIM1_Initv+0xaa>
  {
    Error_Handler();
 8000882:	f000 fc9d 	bl	80011c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000886:	4843      	ldr	r0, [pc, #268]	; (8000994 <_ZL12MX_TIM1_Initv+0x1b8>)
 8000888:	f002 ffb5 	bl	80037f6 <HAL_TIM_PWM_Init>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	bf14      	ite	ne
 8000892:	2301      	movne	r3, #1
 8000894:	2300      	moveq	r3, #0
 8000896:	b2db      	uxtb	r3, r3
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <_ZL12MX_TIM1_Initv+0xc4>
  {
    Error_Handler();
 800089c:	f000 fc90 	bl	80011c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008a0:	2300      	movs	r3, #0
 80008a2:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008a4:	2300      	movs	r3, #0
 80008a6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008a8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80008ac:	4619      	mov	r1, r3
 80008ae:	4839      	ldr	r0, [pc, #228]	; (8000994 <_ZL12MX_TIM1_Initv+0x1b8>)
 80008b0:	f003 fd5c 	bl	800436c <HAL_TIMEx_MasterConfigSynchronization>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	bf14      	ite	ne
 80008ba:	2301      	movne	r3, #1
 80008bc:	2300      	moveq	r3, #0
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <_ZL12MX_TIM1_Initv+0xec>
  {
    Error_Handler();
 80008c4:	f000 fc7c 	bl	80011c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008c8:	2360      	movs	r3, #96	; 0x60
 80008ca:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80008cc:	2300      	movs	r3, #0
 80008ce:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008d0:	2300      	movs	r3, #0
 80008d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008d4:	2300      	movs	r3, #0
 80008d6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008d8:	2300      	movs	r3, #0
 80008da:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008dc:	2300      	movs	r3, #0
 80008de:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008e0:	2300      	movs	r3, #0
 80008e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008e8:	2200      	movs	r2, #0
 80008ea:	4619      	mov	r1, r3
 80008ec:	4829      	ldr	r0, [pc, #164]	; (8000994 <_ZL12MX_TIM1_Initv+0x1b8>)
 80008ee:	f003 f8a3 	bl	8003a38 <HAL_TIM_PWM_ConfigChannel>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	bf14      	ite	ne
 80008f8:	2301      	movne	r3, #1
 80008fa:	2300      	moveq	r3, #0
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <_ZL12MX_TIM1_Initv+0x12a>
  {
    Error_Handler();
 8000902:	f000 fc5d 	bl	80011c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000906:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800090a:	2204      	movs	r2, #4
 800090c:	4619      	mov	r1, r3
 800090e:	4821      	ldr	r0, [pc, #132]	; (8000994 <_ZL12MX_TIM1_Initv+0x1b8>)
 8000910:	f003 f892 	bl	8003a38 <HAL_TIM_PWM_ConfigChannel>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	bf14      	ite	ne
 800091a:	2301      	movne	r3, #1
 800091c:	2300      	moveq	r3, #0
 800091e:	b2db      	uxtb	r3, r3
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <_ZL12MX_TIM1_Initv+0x14c>
  {
    Error_Handler();
 8000924:	f000 fc4c 	bl	80011c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000928:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800092c:	2208      	movs	r2, #8
 800092e:	4619      	mov	r1, r3
 8000930:	4818      	ldr	r0, [pc, #96]	; (8000994 <_ZL12MX_TIM1_Initv+0x1b8>)
 8000932:	f003 f881 	bl	8003a38 <HAL_TIM_PWM_ConfigChannel>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	bf14      	ite	ne
 800093c:	2301      	movne	r3, #1
 800093e:	2300      	moveq	r3, #0
 8000940:	b2db      	uxtb	r3, r3
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <_ZL12MX_TIM1_Initv+0x16e>
  {
    Error_Handler();
 8000946:	f000 fc3b 	bl	80011c0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800094a:	2300      	movs	r3, #0
 800094c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800094e:	2300      	movs	r3, #0
 8000950:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000952:	2300      	movs	r3, #0
 8000954:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000956:	2300      	movs	r3, #0
 8000958:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800095a:	2300      	movs	r3, #0
 800095c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800095e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000962:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000964:	2300      	movs	r3, #0
 8000966:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000968:	1d3b      	adds	r3, r7, #4
 800096a:	4619      	mov	r1, r3
 800096c:	4809      	ldr	r0, [pc, #36]	; (8000994 <_ZL12MX_TIM1_Initv+0x1b8>)
 800096e:	f003 fd79 	bl	8004464 <HAL_TIMEx_ConfigBreakDeadTime>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	bf14      	ite	ne
 8000978:	2301      	movne	r3, #1
 800097a:	2300      	moveq	r3, #0
 800097c:	b2db      	uxtb	r3, r3
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <_ZL12MX_TIM1_Initv+0x1aa>
  {
    Error_Handler();
 8000982:	f000 fc1d 	bl	80011c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000986:	4803      	ldr	r0, [pc, #12]	; (8000994 <_ZL12MX_TIM1_Initv+0x1b8>)
 8000988:	f000 fdfe 	bl	8001588 <HAL_TIM_MspPostInit>

}
 800098c:	bf00      	nop
 800098e:	3758      	adds	r7, #88	; 0x58
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	200000b4 	.word	0x200000b4
 8000998:	40010000 	.word	0x40010000

0800099c <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b08e      	sub	sp, #56	; 0x38
 80009a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009a6:	2200      	movs	r2, #0
 80009a8:	601a      	str	r2, [r3, #0]
 80009aa:	605a      	str	r2, [r3, #4]
 80009ac:	609a      	str	r2, [r3, #8]
 80009ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009b0:	f107 0320 	add.w	r3, r7, #32
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009ba:	1d3b      	adds	r3, r7, #4
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	605a      	str	r2, [r3, #4]
 80009c2:	609a      	str	r2, [r3, #8]
 80009c4:	60da      	str	r2, [r3, #12]
 80009c6:	611a      	str	r2, [r3, #16]
 80009c8:	615a      	str	r2, [r3, #20]
 80009ca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009cc:	4b49      	ldr	r3, [pc, #292]	; (8000af4 <_ZL12MX_TIM2_Initv+0x158>)
 80009ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009d2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80009d4:	4b47      	ldr	r3, [pc, #284]	; (8000af4 <_ZL12MX_TIM2_Initv+0x158>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009da:	4b46      	ldr	r3, [pc, #280]	; (8000af4 <_ZL12MX_TIM2_Initv+0x158>)
 80009dc:	2200      	movs	r2, #0
 80009de:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80009e0:	4b44      	ldr	r3, [pc, #272]	; (8000af4 <_ZL12MX_TIM2_Initv+0x158>)
 80009e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009e6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009e8:	4b42      	ldr	r3, [pc, #264]	; (8000af4 <_ZL12MX_TIM2_Initv+0x158>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ee:	4b41      	ldr	r3, [pc, #260]	; (8000af4 <_ZL12MX_TIM2_Initv+0x158>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009f4:	483f      	ldr	r0, [pc, #252]	; (8000af4 <_ZL12MX_TIM2_Initv+0x158>)
 80009f6:	f002 feaf 	bl	8003758 <HAL_TIM_Base_Init>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	bf14      	ite	ne
 8000a00:	2301      	movne	r3, #1
 8000a02:	2300      	moveq	r3, #0
 8000a04:	b2db      	uxtb	r3, r3
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <_ZL12MX_TIM2_Initv+0x72>
  {
    Error_Handler();
 8000a0a:	f000 fbd9 	bl	80011c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a12:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a14:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4836      	ldr	r0, [pc, #216]	; (8000af4 <_ZL12MX_TIM2_Initv+0x158>)
 8000a1c:	f003 f8ce 	bl	8003bbc <HAL_TIM_ConfigClockSource>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	bf14      	ite	ne
 8000a26:	2301      	movne	r3, #1
 8000a28:	2300      	moveq	r3, #0
 8000a2a:	b2db      	uxtb	r3, r3
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <_ZL12MX_TIM2_Initv+0x98>
  {
    Error_Handler();
 8000a30:	f000 fbc6 	bl	80011c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000a34:	482f      	ldr	r0, [pc, #188]	; (8000af4 <_ZL12MX_TIM2_Initv+0x158>)
 8000a36:	f002 fede 	bl	80037f6 <HAL_TIM_PWM_Init>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	bf14      	ite	ne
 8000a40:	2301      	movne	r3, #1
 8000a42:	2300      	moveq	r3, #0
 8000a44:	b2db      	uxtb	r3, r3
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <_ZL12MX_TIM2_Initv+0xb2>
  {
    Error_Handler();
 8000a4a:	f000 fbb9 	bl	80011c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a52:	2300      	movs	r3, #0
 8000a54:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a56:	f107 0320 	add.w	r3, r7, #32
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4825      	ldr	r0, [pc, #148]	; (8000af4 <_ZL12MX_TIM2_Initv+0x158>)
 8000a5e:	f003 fc85 	bl	800436c <HAL_TIMEx_MasterConfigSynchronization>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	bf14      	ite	ne
 8000a68:	2301      	movne	r3, #1
 8000a6a:	2300      	moveq	r3, #0
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <_ZL12MX_TIM2_Initv+0xda>
  {
    Error_Handler();
 8000a72:	f000 fba5 	bl	80011c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a76:	2360      	movs	r3, #96	; 0x60
 8000a78:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a82:	2300      	movs	r3, #0
 8000a84:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a86:	1d3b      	adds	r3, r7, #4
 8000a88:	2200      	movs	r2, #0
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4819      	ldr	r0, [pc, #100]	; (8000af4 <_ZL12MX_TIM2_Initv+0x158>)
 8000a8e:	f002 ffd3 	bl	8003a38 <HAL_TIM_PWM_ConfigChannel>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	bf14      	ite	ne
 8000a98:	2301      	movne	r3, #1
 8000a9a:	2300      	moveq	r3, #0
 8000a9c:	b2db      	uxtb	r3, r3
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <_ZL12MX_TIM2_Initv+0x10a>
  {
    Error_Handler();
 8000aa2:	f000 fb8d 	bl	80011c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000aa6:	1d3b      	adds	r3, r7, #4
 8000aa8:	2204      	movs	r2, #4
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4811      	ldr	r0, [pc, #68]	; (8000af4 <_ZL12MX_TIM2_Initv+0x158>)
 8000aae:	f002 ffc3 	bl	8003a38 <HAL_TIM_PWM_ConfigChannel>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	bf14      	ite	ne
 8000ab8:	2301      	movne	r3, #1
 8000aba:	2300      	moveq	r3, #0
 8000abc:	b2db      	uxtb	r3, r3
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <_ZL12MX_TIM2_Initv+0x12a>
  {
    Error_Handler();
 8000ac2:	f000 fb7d 	bl	80011c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ac6:	1d3b      	adds	r3, r7, #4
 8000ac8:	2208      	movs	r2, #8
 8000aca:	4619      	mov	r1, r3
 8000acc:	4809      	ldr	r0, [pc, #36]	; (8000af4 <_ZL12MX_TIM2_Initv+0x158>)
 8000ace:	f002 ffb3 	bl	8003a38 <HAL_TIM_PWM_ConfigChannel>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	bf14      	ite	ne
 8000ad8:	2301      	movne	r3, #1
 8000ada:	2300      	moveq	r3, #0
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <_ZL12MX_TIM2_Initv+0x14a>
  {
    Error_Handler();
 8000ae2:	f000 fb6d 	bl	80011c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000ae6:	4803      	ldr	r0, [pc, #12]	; (8000af4 <_ZL12MX_TIM2_Initv+0x158>)
 8000ae8:	f000 fd4e 	bl	8001588 <HAL_TIM_MspPostInit>

}
 8000aec:	bf00      	nop
 8000aee:	3738      	adds	r7, #56	; 0x38
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	200000fc 	.word	0x200000fc

08000af8 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000afc:	4b13      	ldr	r3, [pc, #76]	; (8000b4c <_ZL19MX_USART2_UART_Initv+0x54>)
 8000afe:	4a14      	ldr	r2, [pc, #80]	; (8000b50 <_ZL19MX_USART2_UART_Initv+0x58>)
 8000b00:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b02:	4b12      	ldr	r3, [pc, #72]	; (8000b4c <_ZL19MX_USART2_UART_Initv+0x54>)
 8000b04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b08:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b0a:	4b10      	ldr	r3, [pc, #64]	; (8000b4c <_ZL19MX_USART2_UART_Initv+0x54>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b10:	4b0e      	ldr	r3, [pc, #56]	; (8000b4c <_ZL19MX_USART2_UART_Initv+0x54>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b16:	4b0d      	ldr	r3, [pc, #52]	; (8000b4c <_ZL19MX_USART2_UART_Initv+0x54>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b1c:	4b0b      	ldr	r3, [pc, #44]	; (8000b4c <_ZL19MX_USART2_UART_Initv+0x54>)
 8000b1e:	220c      	movs	r2, #12
 8000b20:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b22:	4b0a      	ldr	r3, [pc, #40]	; (8000b4c <_ZL19MX_USART2_UART_Initv+0x54>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b28:	4b08      	ldr	r3, [pc, #32]	; (8000b4c <_ZL19MX_USART2_UART_Initv+0x54>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b2e:	4807      	ldr	r0, [pc, #28]	; (8000b4c <_ZL19MX_USART2_UART_Initv+0x54>)
 8000b30:	f003 fcea 	bl	8004508 <HAL_UART_Init>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	bf14      	ite	ne
 8000b3a:	2301      	movne	r3, #1
 8000b3c:	2300      	moveq	r3, #0
 8000b3e:	b2db      	uxtb	r3, r3
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8000b44:	f000 fb3c 	bl	80011c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b48:	bf00      	nop
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	20000144 	.word	0x20000144
 8000b50:	40004400 	.word	0x40004400

08000b54 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b08a      	sub	sp, #40	; 0x28
 8000b58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5a:	f107 0314 	add.w	r3, r7, #20
 8000b5e:	2200      	movs	r2, #0
 8000b60:	601a      	str	r2, [r3, #0]
 8000b62:	605a      	str	r2, [r3, #4]
 8000b64:	609a      	str	r2, [r3, #8]
 8000b66:	60da      	str	r2, [r3, #12]
 8000b68:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	613b      	str	r3, [r7, #16]
 8000b6e:	4b53      	ldr	r3, [pc, #332]	; (8000cbc <_ZL12MX_GPIO_Initv+0x168>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	4a52      	ldr	r2, [pc, #328]	; (8000cbc <_ZL12MX_GPIO_Initv+0x168>)
 8000b74:	f043 0304 	orr.w	r3, r3, #4
 8000b78:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7a:	4b50      	ldr	r3, [pc, #320]	; (8000cbc <_ZL12MX_GPIO_Initv+0x168>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	f003 0304 	and.w	r3, r3, #4
 8000b82:	613b      	str	r3, [r7, #16]
 8000b84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	60fb      	str	r3, [r7, #12]
 8000b8a:	4b4c      	ldr	r3, [pc, #304]	; (8000cbc <_ZL12MX_GPIO_Initv+0x168>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	4a4b      	ldr	r2, [pc, #300]	; (8000cbc <_ZL12MX_GPIO_Initv+0x168>)
 8000b90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b94:	6313      	str	r3, [r2, #48]	; 0x30
 8000b96:	4b49      	ldr	r3, [pc, #292]	; (8000cbc <_ZL12MX_GPIO_Initv+0x168>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	60bb      	str	r3, [r7, #8]
 8000ba6:	4b45      	ldr	r3, [pc, #276]	; (8000cbc <_ZL12MX_GPIO_Initv+0x168>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	4a44      	ldr	r2, [pc, #272]	; (8000cbc <_ZL12MX_GPIO_Initv+0x168>)
 8000bac:	f043 0301 	orr.w	r3, r3, #1
 8000bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb2:	4b42      	ldr	r3, [pc, #264]	; (8000cbc <_ZL12MX_GPIO_Initv+0x168>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	f003 0301 	and.w	r3, r3, #1
 8000bba:	60bb      	str	r3, [r7, #8]
 8000bbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	607b      	str	r3, [r7, #4]
 8000bc2:	4b3e      	ldr	r3, [pc, #248]	; (8000cbc <_ZL12MX_GPIO_Initv+0x168>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	4a3d      	ldr	r2, [pc, #244]	; (8000cbc <_ZL12MX_GPIO_Initv+0x168>)
 8000bc8:	f043 0302 	orr.w	r3, r3, #2
 8000bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bce:	4b3b      	ldr	r3, [pc, #236]	; (8000cbc <_ZL12MX_GPIO_Initv+0x168>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	f003 0302 	and.w	r3, r3, #2
 8000bd6:	607b      	str	r3, [r7, #4]
 8000bd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	603b      	str	r3, [r7, #0]
 8000bde:	4b37      	ldr	r3, [pc, #220]	; (8000cbc <_ZL12MX_GPIO_Initv+0x168>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	4a36      	ldr	r2, [pc, #216]	; (8000cbc <_ZL12MX_GPIO_Initv+0x168>)
 8000be4:	f043 0308 	orr.w	r3, r3, #8
 8000be8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bea:	4b34      	ldr	r3, [pc, #208]	; (8000cbc <_ZL12MX_GPIO_Initv+0x168>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	f003 0308 	and.w	r3, r3, #8
 8000bf2:	603b      	str	r3, [r7, #0]
 8000bf4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PSB2_Pin|PSB1_Pin|BRK2_Pin|BATT_Pin
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	211f      	movs	r1, #31
 8000bfa:	4831      	ldr	r0, [pc, #196]	; (8000cc0 <_ZL12MX_GPIO_Initv+0x16c>)
 8000bfc:	f001 ff5a 	bl	8002ab4 <HAL_GPIO_WritePin>
                          |PSB3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DIRECTION3_Pin|DIRECTION2_Pin|DIRECTION1_Pin|LED6_Pin
 8000c00:	2200      	movs	r2, #0
 8000c02:	f64e 0113 	movw	r1, #59411	; 0xe813
 8000c06:	482f      	ldr	r0, [pc, #188]	; (8000cc4 <_ZL12MX_GPIO_Initv+0x170>)
 8000c08:	f001 ff54 	bl	8002ab4 <HAL_GPIO_WritePin>
                          |LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BRK1_Pin|PSB5_Pin|BRK5_Pin|PSB6_Pin
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	f24f 0107 	movw	r1, #61447	; 0xf007
 8000c12:	482d      	ldr	r0, [pc, #180]	; (8000cc8 <_ZL12MX_GPIO_Initv+0x174>)
 8000c14:	f001 ff4e 	bl	8002ab4 <HAL_GPIO_WritePin>
                          |BRK3_Pin|PSB4_Pin|BRK4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIRECTION4_GPIO_Port, DIRECTION4_Pin, GPIO_PIN_RESET);
 8000c18:	2200      	movs	r2, #0
 8000c1a:	2104      	movs	r1, #4
 8000c1c:	482b      	ldr	r0, [pc, #172]	; (8000ccc <_ZL12MX_GPIO_Initv+0x178>)
 8000c1e:	f001 ff49 	bl	8002ab4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c28:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c32:	f107 0314 	add.w	r3, r7, #20
 8000c36:	4619      	mov	r1, r3
 8000c38:	4821      	ldr	r0, [pc, #132]	; (8000cc0 <_ZL12MX_GPIO_Initv+0x16c>)
 8000c3a:	f001 fda7 	bl	800278c <HAL_GPIO_Init>

  /*Configure GPIO pins : PSB2_Pin PSB1_Pin BRK2_Pin BATT_Pin
                           PSB3_Pin */
  GPIO_InitStruct.Pin = PSB2_Pin|PSB1_Pin|BRK2_Pin|BATT_Pin
 8000c3e:	231f      	movs	r3, #31
 8000c40:	617b      	str	r3, [r7, #20]
                          |PSB3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c42:	2301      	movs	r3, #1
 8000c44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c46:	2300      	movs	r3, #0
 8000c48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c4e:	f107 0314 	add.w	r3, r7, #20
 8000c52:	4619      	mov	r1, r3
 8000c54:	481a      	ldr	r0, [pc, #104]	; (8000cc0 <_ZL12MX_GPIO_Initv+0x16c>)
 8000c56:	f001 fd99 	bl	800278c <HAL_GPIO_Init>

  /*Configure GPIO pins : DIRECTION3_Pin DIRECTION2_Pin DIRECTION1_Pin LED6_Pin
                           LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = DIRECTION3_Pin|DIRECTION2_Pin|DIRECTION1_Pin|LED6_Pin
 8000c5a:	f64e 0313 	movw	r3, #59411	; 0xe813
 8000c5e:	617b      	str	r3, [r7, #20]
                          |LED1_Pin|LED2_Pin|LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c60:	2301      	movs	r3, #1
 8000c62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c64:	2300      	movs	r3, #0
 8000c66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c6c:	f107 0314 	add.w	r3, r7, #20
 8000c70:	4619      	mov	r1, r3
 8000c72:	4814      	ldr	r0, [pc, #80]	; (8000cc4 <_ZL12MX_GPIO_Initv+0x170>)
 8000c74:	f001 fd8a 	bl	800278c <HAL_GPIO_Init>

  /*Configure GPIO pins : BRK1_Pin PSB5_Pin BRK5_Pin PSB6_Pin
                           BRK3_Pin PSB4_Pin BRK4_Pin */
  GPIO_InitStruct.Pin = BRK1_Pin|PSB5_Pin|BRK5_Pin|PSB6_Pin
 8000c78:	f24f 0307 	movw	r3, #61447	; 0xf007
 8000c7c:	617b      	str	r3, [r7, #20]
                          |BRK3_Pin|PSB4_Pin|BRK4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c82:	2300      	movs	r3, #0
 8000c84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c86:	2300      	movs	r3, #0
 8000c88:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c8a:	f107 0314 	add.w	r3, r7, #20
 8000c8e:	4619      	mov	r1, r3
 8000c90:	480d      	ldr	r0, [pc, #52]	; (8000cc8 <_ZL12MX_GPIO_Initv+0x174>)
 8000c92:	f001 fd7b 	bl	800278c <HAL_GPIO_Init>

  /*Configure GPIO pin : DIRECTION4_Pin */
  GPIO_InitStruct.Pin = DIRECTION4_Pin;
 8000c96:	2304      	movs	r3, #4
 8000c98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIRECTION4_GPIO_Port, &GPIO_InitStruct);
 8000ca6:	f107 0314 	add.w	r3, r7, #20
 8000caa:	4619      	mov	r1, r3
 8000cac:	4807      	ldr	r0, [pc, #28]	; (8000ccc <_ZL12MX_GPIO_Initv+0x178>)
 8000cae:	f001 fd6d 	bl	800278c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cb2:	bf00      	nop
 8000cb4:	3728      	adds	r7, #40	; 0x28
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	40023800 	.word	0x40023800
 8000cc0:	40020800 	.word	0x40020800
 8000cc4:	40020000 	.word	0x40020000
 8000cc8:	40020400 	.word	0x40020400
 8000ccc:	40020c00 	.word	0x40020c00

08000cd0 <HAL_CAN_RxFifo0MsgPendingCallback>:
uint32_t id;
uint32_t dlc;
std::array<int,8> data;

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000cd0:	b5b0      	push	{r4, r5, r7, lr}
 8000cd2:	b096      	sub	sp, #88	; 0x58
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
	  CAN_RxHeaderTypeDef RxHeader;
	  std::array<int,5> arr_data;
	  std::array<int,5> arr_old_data;
	  //int last_hat;

	  if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 8000cd8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000cdc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	6878      	ldr	r0, [r7, #4]
 8000ce4:	f001 f8d8 	bl	8001e98 <HAL_CAN_GetRxMessage>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	bf0c      	ite	eq
 8000cee:	2301      	moveq	r3, #1
 8000cf0:	2300      	movne	r3, #0
 8000cf2:	b2db      	uxtb	r3, r3
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	f000 819c 	beq.w	8001032 <HAL_CAN_RxFifo0MsgPendingCallback+0x362>
	  {
		  id = (RxHeader.IDE == CAN_ID_STD)? RxHeader.StdId : RxHeader.ExtId;     // ID
 8000cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d101      	bne.n	8000d04 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>
 8000d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d02:	e000      	b.n	8000d06 <HAL_CAN_RxFifo0MsgPendingCallback+0x36>
 8000d04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d06:	4aa1      	ldr	r2, [pc, #644]	; (8000f8c <HAL_CAN_RxFifo0MsgPendingCallback+0x2bc>)
 8000d08:	6013      	str	r3, [r2, #0]
		  dlc = RxHeader.DLC;                                                     // DLC
 8000d0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d0c:	4aa0      	ldr	r2, [pc, #640]	; (8000f90 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 8000d0e:	6013      	str	r3, [r2, #0]
		  data[0] = RxData[0] - 128;                                                    // Data
 8000d10:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8000d14:	461c      	mov	r4, r3
 8000d16:	2100      	movs	r1, #0
 8000d18:	489e      	ldr	r0, [pc, #632]	; (8000f94 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c4>)
 8000d1a:	f000 fa56 	bl	80011ca <_ZNSt5arrayIiLj8EEixEj>
 8000d1e:	4602      	mov	r2, r0
 8000d20:	f1a4 0380 	sub.w	r3, r4, #128	; 0x80
 8000d24:	6013      	str	r3, [r2, #0]
		  data[1] = RxData[1] - 128;
 8000d26:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000d2a:	461c      	mov	r4, r3
 8000d2c:	2101      	movs	r1, #1
 8000d2e:	4899      	ldr	r0, [pc, #612]	; (8000f94 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c4>)
 8000d30:	f000 fa4b 	bl	80011ca <_ZNSt5arrayIiLj8EEixEj>
 8000d34:	4602      	mov	r2, r0
 8000d36:	f1a4 0380 	sub.w	r3, r4, #128	; 0x80
 8000d3a:	6013      	str	r3, [r2, #0]
		  data[2] = RxData[2] - 128;
 8000d3c:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000d40:	461c      	mov	r4, r3
 8000d42:	2102      	movs	r1, #2
 8000d44:	4893      	ldr	r0, [pc, #588]	; (8000f94 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c4>)
 8000d46:	f000 fa40 	bl	80011ca <_ZNSt5arrayIiLj8EEixEj>
 8000d4a:	4602      	mov	r2, r0
 8000d4c:	f1a4 0380 	sub.w	r3, r4, #128	; 0x80
 8000d50:	6013      	str	r3, [r2, #0]
		  data[3] = RxData[3];//A
 8000d52:	f897 404f 	ldrb.w	r4, [r7, #79]	; 0x4f
 8000d56:	2103      	movs	r1, #3
 8000d58:	488e      	ldr	r0, [pc, #568]	; (8000f94 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c4>)
 8000d5a:	f000 fa36 	bl	80011ca <_ZNSt5arrayIiLj8EEixEj>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	4622      	mov	r2, r4
 8000d62:	601a      	str	r2, [r3, #0]
		  data[4] = RxData[4];//B
 8000d64:	f897 4050 	ldrb.w	r4, [r7, #80]	; 0x50
 8000d68:	2104      	movs	r1, #4
 8000d6a:	488a      	ldr	r0, [pc, #552]	; (8000f94 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c4>)
 8000d6c:	f000 fa2d 	bl	80011ca <_ZNSt5arrayIiLj8EEixEj>
 8000d70:	4603      	mov	r3, r0
 8000d72:	4622      	mov	r2, r4
 8000d74:	601a      	str	r2, [r3, #0]
		  data[5] = RxData[5];//X
 8000d76:	f897 4051 	ldrb.w	r4, [r7, #81]	; 0x51
 8000d7a:	2105      	movs	r1, #5
 8000d7c:	4885      	ldr	r0, [pc, #532]	; (8000f94 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c4>)
 8000d7e:	f000 fa24 	bl	80011ca <_ZNSt5arrayIiLj8EEixEj>
 8000d82:	4603      	mov	r3, r0
 8000d84:	4622      	mov	r2, r4
 8000d86:	601a      	str	r2, [r3, #0]
		  data[6] = RxData[6];//Y
 8000d88:	f897 4052 	ldrb.w	r4, [r7, #82]	; 0x52
 8000d8c:	2106      	movs	r1, #6
 8000d8e:	4881      	ldr	r0, [pc, #516]	; (8000f94 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c4>)
 8000d90:	f000 fa1b 	bl	80011ca <_ZNSt5arrayIiLj8EEixEj>
 8000d94:	4603      	mov	r3, r0
 8000d96:	4622      	mov	r2, r4
 8000d98:	601a      	str	r2, [r3, #0]
		  data[7] = RxData[7];//HAT
 8000d9a:	f897 4053 	ldrb.w	r4, [r7, #83]	; 0x53
 8000d9e:	2107      	movs	r1, #7
 8000da0:	487c      	ldr	r0, [pc, #496]	; (8000f94 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c4>)
 8000da2:	f000 fa12 	bl	80011ca <_ZNSt5arrayIiLj8EEixEj>
 8000da6:	4603      	mov	r3, r0
 8000da8:	4622      	mov	r2, r4
 8000daa:	601a      	str	r2, [r3, #0]
		  //printf("%d %d %d %d %d %d %d %d\n",data[0],data[1],data[2],data[3],data[4],data[5],data[6],data[7]);

			for(int i = 0;i < 5;i++){
 8000dac:	2300      	movs	r3, #0
 8000dae:	657b      	str	r3, [r7, #84]	; 0x54
 8000db0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000db2:	2b04      	cmp	r3, #4
 8000db4:	dc14      	bgt.n	8000de0 <HAL_CAN_RxFifo0MsgPendingCallback+0x110>
				arr_data[i] = data[i+3];
 8000db6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000db8:	3303      	adds	r3, #3
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4875      	ldr	r0, [pc, #468]	; (8000f94 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c4>)
 8000dbe:	f000 fa04 	bl	80011ca <_ZNSt5arrayIiLj8EEixEj>
 8000dc2:	4604      	mov	r4, r0
 8000dc4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000dc6:	f107 031c 	add.w	r3, r7, #28
 8000dca:	4611      	mov	r1, r2
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f000 fa0b 	bl	80011e8 <_ZNSt5arrayIiLj5EEixEj>
 8000dd2:	4602      	mov	r2, r0
 8000dd4:	6823      	ldr	r3, [r4, #0]
 8000dd6:	6013      	str	r3, [r2, #0]
			for(int i = 0;i < 5;i++){
 8000dd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000dda:	3301      	adds	r3, #1
 8000ddc:	657b      	str	r3, [r7, #84]	; 0x54
 8000dde:	e7e7      	b.n	8000db0 <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>
			}
			if (arr_data[0] <= 1 or arr_data[1] <= 1 or arr_data[2] <= 1 or arr_data[3] <= 1){
 8000de0:	f107 031c 	add.w	r3, r7, #28
 8000de4:	2100      	movs	r1, #0
 8000de6:	4618      	mov	r0, r3
 8000de8:	f000 f9fe 	bl	80011e8 <_ZNSt5arrayIiLj5EEixEj>
 8000dec:	4603      	mov	r3, r0
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	dd1d      	ble.n	8000e30 <HAL_CAN_RxFifo0MsgPendingCallback+0x160>
 8000df4:	f107 031c 	add.w	r3, r7, #28
 8000df8:	2101      	movs	r1, #1
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f000 f9f4 	bl	80011e8 <_ZNSt5arrayIiLj5EEixEj>
 8000e00:	4603      	mov	r3, r0
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	2b01      	cmp	r3, #1
 8000e06:	dd13      	ble.n	8000e30 <HAL_CAN_RxFifo0MsgPendingCallback+0x160>
 8000e08:	f107 031c 	add.w	r3, r7, #28
 8000e0c:	2102      	movs	r1, #2
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f000 f9ea 	bl	80011e8 <_ZNSt5arrayIiLj5EEixEj>
 8000e14:	4603      	mov	r3, r0
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	dd09      	ble.n	8000e30 <HAL_CAN_RxFifo0MsgPendingCallback+0x160>
 8000e1c:	f107 031c 	add.w	r3, r7, #28
 8000e20:	2103      	movs	r1, #3
 8000e22:	4618      	mov	r0, r3
 8000e24:	f000 f9e0 	bl	80011e8 <_ZNSt5arrayIiLj5EEixEj>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	dc01      	bgt.n	8000e34 <HAL_CAN_RxFifo0MsgPendingCallback+0x164>
 8000e30:	2301      	movs	r3, #1
 8000e32:	e000      	b.n	8000e36 <HAL_CAN_RxFifo0MsgPendingCallback+0x166>
 8000e34:	2300      	movs	r3, #0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	f000 80f9 	beq.w	800102e <HAL_CAN_RxFifo0MsgPendingCallback+0x35e>
				recovery_prog();
 8000e3c:	f000 f9b9 	bl	80011b2 <_Z13recovery_progv>


				if (std::abs(data[0]) <= 5){ //perfect stop
 8000e40:	2100      	movs	r1, #0
 8000e42:	4854      	ldr	r0, [pc, #336]	; (8000f94 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c4>)
 8000e44:	f000 f9c1 	bl	80011ca <_ZNSt5arrayIiLj8EEixEj>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	bfb8      	it	lt
 8000e50:	425b      	neglt	r3, r3
 8000e52:	2b05      	cmp	r3, #5
 8000e54:	bfd4      	ite	le
 8000e56:	2301      	movle	r3, #1
 8000e58:	2300      	movgt	r3, #0
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d005      	beq.n	8000e6c <HAL_CAN_RxFifo0MsgPendingCallback+0x19c>
				  HAL_GPIO_WritePin(GPIOB,BRK1_Pin,GPIO_PIN_SET);
 8000e60:	2201      	movs	r2, #1
 8000e62:	2101      	movs	r1, #1
 8000e64:	484c      	ldr	r0, [pc, #304]	; (8000f98 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c8>)
 8000e66:	f001 fe25 	bl	8002ab4 <HAL_GPIO_WritePin>
 8000e6a:	e004      	b.n	8000e76 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a6>
				}
				else{
				  HAL_GPIO_WritePin(GPIOB,BRK1_Pin,GPIO_PIN_RESET);
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	2101      	movs	r1, #1
 8000e70:	4849      	ldr	r0, [pc, #292]	; (8000f98 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c8>)
 8000e72:	f001 fe1f 	bl	8002ab4 <HAL_GPIO_WritePin>
				}
				if (std::abs(data[1]) <= 5){
 8000e76:	2101      	movs	r1, #1
 8000e78:	4846      	ldr	r0, [pc, #280]	; (8000f94 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c4>)
 8000e7a:	f000 f9a6 	bl	80011ca <_ZNSt5arrayIiLj8EEixEj>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	bfb8      	it	lt
 8000e86:	425b      	neglt	r3, r3
 8000e88:	2b05      	cmp	r3, #5
 8000e8a:	bfd4      	ite	le
 8000e8c:	2301      	movle	r3, #1
 8000e8e:	2300      	movgt	r3, #0
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d005      	beq.n	8000ea2 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d2>
				  HAL_GPIO_WritePin(GPIOC,BRK2_Pin,GPIO_PIN_SET);
 8000e96:	2201      	movs	r2, #1
 8000e98:	2104      	movs	r1, #4
 8000e9a:	4840      	ldr	r0, [pc, #256]	; (8000f9c <HAL_CAN_RxFifo0MsgPendingCallback+0x2cc>)
 8000e9c:	f001 fe0a 	bl	8002ab4 <HAL_GPIO_WritePin>
 8000ea0:	e004      	b.n	8000eac <HAL_CAN_RxFifo0MsgPendingCallback+0x1dc>
				}
				else{
				  HAL_GPIO_WritePin(GPIOC,BRK2_Pin,GPIO_PIN_RESET);
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	2104      	movs	r1, #4
 8000ea6:	483d      	ldr	r0, [pc, #244]	; (8000f9c <HAL_CAN_RxFifo0MsgPendingCallback+0x2cc>)
 8000ea8:	f001 fe04 	bl	8002ab4 <HAL_GPIO_WritePin>
				}
				if (std::abs(data[2]) <= 5){
 8000eac:	2102      	movs	r1, #2
 8000eae:	4839      	ldr	r0, [pc, #228]	; (8000f94 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c4>)
 8000eb0:	f000 f98b 	bl	80011ca <_ZNSt5arrayIiLj8EEixEj>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	bfb8      	it	lt
 8000ebc:	425b      	neglt	r3, r3
 8000ebe:	2b05      	cmp	r3, #5
 8000ec0:	bfd4      	ite	le
 8000ec2:	2301      	movle	r3, #1
 8000ec4:	2300      	movgt	r3, #0
 8000ec6:	b2db      	uxtb	r3, r3
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d006      	beq.n	8000eda <HAL_CAN_RxFifo0MsgPendingCallback+0x20a>
				  HAL_GPIO_WritePin(GPIOB,BRK3_Pin,GPIO_PIN_SET);
 8000ecc:	2201      	movs	r2, #1
 8000ece:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ed2:	4831      	ldr	r0, [pc, #196]	; (8000f98 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c8>)
 8000ed4:	f001 fdee 	bl	8002ab4 <HAL_GPIO_WritePin>
 8000ed8:	e005      	b.n	8000ee6 <HAL_CAN_RxFifo0MsgPendingCallback+0x216>
				}
				else{
				  HAL_GPIO_WritePin(GPIOB,BRK3_Pin,GPIO_PIN_RESET);
 8000eda:	2200      	movs	r2, #0
 8000edc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ee0:	482d      	ldr	r0, [pc, #180]	; (8000f98 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c8>)
 8000ee2:	f001 fde7 	bl	8002ab4 <HAL_GPIO_WritePin>
				}
				//OMNI_3
				//data[0] < 0 じゃなくする

				if (data[0] < 0){
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	482a      	ldr	r0, [pc, #168]	; (8000f94 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c4>)
 8000eea:	f000 f96e 	bl	80011ca <_ZNSt5arrayIiLj8EEixEj>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	0fdb      	lsrs	r3, r3, #31
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d00d      	beq.n	8000f16 <HAL_CAN_RxFifo0MsgPendingCallback+0x246>
				  HAL_GPIO_WritePin(GPIOA,DIRECTION1_Pin,GPIO_PIN_RESET);
 8000efa:	2200      	movs	r2, #0
 8000efc:	2110      	movs	r1, #16
 8000efe:	4828      	ldr	r0, [pc, #160]	; (8000fa0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2d0>)
 8000f00:	f001 fdd8 	bl	8002ab4 <HAL_GPIO_WritePin>
				  data[0] *= -1;
 8000f04:	2100      	movs	r1, #0
 8000f06:	4823      	ldr	r0, [pc, #140]	; (8000f94 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c4>)
 8000f08:	f000 f95f 	bl	80011ca <_ZNSt5arrayIiLj8EEixEj>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	4252      	negs	r2, r2
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	e004      	b.n	8000f20 <HAL_CAN_RxFifo0MsgPendingCallback+0x250>
				}
				else{
				  HAL_GPIO_WritePin(GPIOA,DIRECTION1_Pin,GPIO_PIN_SET);
 8000f16:	2201      	movs	r2, #1
 8000f18:	2110      	movs	r1, #16
 8000f1a:	4821      	ldr	r0, [pc, #132]	; (8000fa0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2d0>)
 8000f1c:	f001 fdca 	bl	8002ab4 <HAL_GPIO_WritePin>
				}

				if (data[1] < 0){
 8000f20:	2101      	movs	r1, #1
 8000f22:	481c      	ldr	r0, [pc, #112]	; (8000f94 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c4>)
 8000f24:	f000 f951 	bl	80011ca <_ZNSt5arrayIiLj8EEixEj>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	0fdb      	lsrs	r3, r3, #31
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d00d      	beq.n	8000f50 <HAL_CAN_RxFifo0MsgPendingCallback+0x280>
				  HAL_GPIO_WritePin(GPIOA,DIRECTION2_Pin,GPIO_PIN_RESET);
 8000f34:	2200      	movs	r2, #0
 8000f36:	2102      	movs	r1, #2
 8000f38:	4819      	ldr	r0, [pc, #100]	; (8000fa0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2d0>)
 8000f3a:	f001 fdbb 	bl	8002ab4 <HAL_GPIO_WritePin>
				  data[1] *= -1;
 8000f3e:	2101      	movs	r1, #1
 8000f40:	4814      	ldr	r0, [pc, #80]	; (8000f94 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c4>)
 8000f42:	f000 f942 	bl	80011ca <_ZNSt5arrayIiLj8EEixEj>
 8000f46:	4603      	mov	r3, r0
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	4252      	negs	r2, r2
 8000f4c:	601a      	str	r2, [r3, #0]
 8000f4e:	e004      	b.n	8000f5a <HAL_CAN_RxFifo0MsgPendingCallback+0x28a>
				}
				else{
				  HAL_GPIO_WritePin(GPIOA,DIRECTION2_Pin,GPIO_PIN_SET);
 8000f50:	2201      	movs	r2, #1
 8000f52:	2102      	movs	r1, #2
 8000f54:	4812      	ldr	r0, [pc, #72]	; (8000fa0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2d0>)
 8000f56:	f001 fdad 	bl	8002ab4 <HAL_GPIO_WritePin>
				}

				if (data[2] < 0){
 8000f5a:	2102      	movs	r1, #2
 8000f5c:	480d      	ldr	r0, [pc, #52]	; (8000f94 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c4>)
 8000f5e:	f000 f934 	bl	80011ca <_ZNSt5arrayIiLj8EEixEj>
 8000f62:	4603      	mov	r3, r0
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	0fdb      	lsrs	r3, r3, #31
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d01a      	beq.n	8000fa4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2d4>
				  HAL_GPIO_WritePin(GPIOA,DIRECTION3_Pin,GPIO_PIN_RESET);
 8000f6e:	2200      	movs	r2, #0
 8000f70:	2101      	movs	r1, #1
 8000f72:	480b      	ldr	r0, [pc, #44]	; (8000fa0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2d0>)
 8000f74:	f001 fd9e 	bl	8002ab4 <HAL_GPIO_WritePin>
				  data[2] *= -1;
 8000f78:	2102      	movs	r1, #2
 8000f7a:	4806      	ldr	r0, [pc, #24]	; (8000f94 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c4>)
 8000f7c:	f000 f925 	bl	80011ca <_ZNSt5arrayIiLj8EEixEj>
 8000f80:	4603      	mov	r3, r0
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	4252      	negs	r2, r2
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	e011      	b.n	8000fae <HAL_CAN_RxFifo0MsgPendingCallback+0x2de>
 8000f8a:	bf00      	nop
 8000f8c:	20000188 	.word	0x20000188
 8000f90:	2000018c 	.word	0x2000018c
 8000f94:	20000190 	.word	0x20000190
 8000f98:	40020400 	.word	0x40020400
 8000f9c:	40020800 	.word	0x40020800
 8000fa0:	40020000 	.word	0x40020000
				}
				else{
				  HAL_GPIO_WritePin(GPIOA,DIRECTION3_Pin,GPIO_PIN_SET);
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	2101      	movs	r1, #1
 8000fa8:	4824      	ldr	r0, [pc, #144]	; (800103c <HAL_CAN_RxFifo0MsgPendingCallback+0x36c>)
 8000faa:	f001 fd83 	bl	8002ab4 <HAL_GPIO_WritePin>
				}

				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,data[0] * 500);
 8000fae:	2100      	movs	r1, #0
 8000fb0:	4823      	ldr	r0, [pc, #140]	; (8001040 <HAL_CAN_RxFifo0MsgPendingCallback+0x370>)
 8000fb2:	f000 f90a 	bl	80011ca <_ZNSt5arrayIiLj8EEixEj>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000fbe:	fb03 f202 	mul.w	r2, r3, r2
 8000fc2:	4b20      	ldr	r3, [pc, #128]	; (8001044 <HAL_CAN_RxFifo0MsgPendingCallback+0x374>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,data[1] * 500);
 8000fc8:	2101      	movs	r1, #1
 8000fca:	481d      	ldr	r0, [pc, #116]	; (8001040 <HAL_CAN_RxFifo0MsgPendingCallback+0x370>)
 8000fcc:	f000 f8fd 	bl	80011ca <_ZNSt5arrayIiLj8EEixEj>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000fd8:	fb03 f202 	mul.w	r2, r3, r2
 8000fdc:	4b19      	ldr	r3, [pc, #100]	; (8001044 <HAL_CAN_RxFifo0MsgPendingCallback+0x374>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	639a      	str	r2, [r3, #56]	; 0x38
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,data[2] * 500);
 8000fe2:	2102      	movs	r1, #2
 8000fe4:	4816      	ldr	r0, [pc, #88]	; (8001040 <HAL_CAN_RxFifo0MsgPendingCallback+0x370>)
 8000fe6:	f000 f8f0 	bl	80011ca <_ZNSt5arrayIiLj8EEixEj>
 8000fea:	4603      	mov	r3, r0
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000ff2:	fb03 f202 	mul.w	r2, r3, r2
 8000ff6:	4b13      	ldr	r3, [pc, #76]	; (8001044 <HAL_CAN_RxFifo0MsgPendingCallback+0x374>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	63da      	str	r2, [r3, #60]	; 0x3c

				if (arr_data != arr_old_data) { //等しくない場合に切り替え操作
 8000ffc:	f107 0208 	add.w	r2, r7, #8
 8001000:	f107 031c 	add.w	r3, r7, #28
 8001004:	4611      	mov	r1, r2
 8001006:	4618      	mov	r0, r3
 8001008:	f000 f8fd 	bl	8001206 <_ZStneIiLj5EEbRKSt5arrayIT_XT0_EES4_>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d004      	beq.n	800101c <HAL_CAN_RxFifo0MsgPendingCallback+0x34c>
					toggle_switch(arr_data);
 8001012:	f107 031c 	add.w	r3, r7, #28
 8001016:	4618      	mov	r0, r3
 8001018:	f000 f816 	bl	8001048 <_Z13toggle_switchRSt5arrayIiLj5EE>
				}
				arr_old_data = arr_data; //旧ボタンデータとして登録
 800101c:	f107 0408 	add.w	r4, r7, #8
 8001020:	f107 051c 	add.w	r5, r7, #28
 8001024:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001026:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001028:	682b      	ldr	r3, [r5, #0]
 800102a:	6023      	str	r3, [r4, #0]
			}
			else{
				emergency_prog();
			}
	  }
}
 800102c:	e001      	b.n	8001032 <HAL_CAN_RxFifo0MsgPendingCallback+0x362>
				emergency_prog();
 800102e:	f000 f8b9 	bl	80011a4 <_Z14emergency_progv>
}
 8001032:	bf00      	nop
 8001034:	3758      	adds	r7, #88	; 0x58
 8001036:	46bd      	mov	sp, r7
 8001038:	bdb0      	pop	{r4, r5, r7, pc}
 800103a:	bf00      	nop
 800103c:	40020000 	.word	0x40020000
 8001040:	20000190 	.word	0x20000190
 8001044:	200000b4 	.word	0x200000b4

08001048 <_Z13toggle_switchRSt5arrayIiLj5EE>:
{
  HAL_UART_Transmit(&huart2,(uint8_t *)ptr,len,10);
  return len;
}

void toggle_switch(std::array<int,5>& arr){
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
	if(arr[0] == 1){//COLLECT_PLUS
 8001050:	2100      	movs	r1, #0
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f000 f8c8 	bl	80011e8 <_ZNSt5arrayIiLj5EEixEj>
 8001058:	4603      	mov	r3, r0
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	2b01      	cmp	r3, #1
 800105e:	bf0c      	ite	eq
 8001060:	2301      	moveq	r3, #1
 8001062:	2300      	movne	r3, #0
 8001064:	b2db      	uxtb	r3, r3
 8001066:	2b00      	cmp	r3, #0
 8001068:	d006      	beq.n	8001078 <_Z13toggle_switchRSt5arrayIiLj5EE+0x30>
		//BRK_OFF
		//PLUS
		HAL_GPIO_WritePin(GPIOA, LED1_Pin, GPIO_PIN_SET);
 800106a:	2201      	movs	r2, #1
 800106c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001070:	484b      	ldr	r0, [pc, #300]	; (80011a0 <_Z13toggle_switchRSt5arrayIiLj5EE+0x158>)
 8001072:	f001 fd1f 	bl	8002ab4 <HAL_GPIO_WritePin>
 8001076:	e012      	b.n	800109e <_Z13toggle_switchRSt5arrayIiLj5EE+0x56>
	}
	else if (arr[0] == 0){//COLLECT_STOP
 8001078:	2100      	movs	r1, #0
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f000 f8b4 	bl	80011e8 <_ZNSt5arrayIiLj5EEixEj>
 8001080:	4603      	mov	r3, r0
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	2b00      	cmp	r3, #0
 8001086:	bf0c      	ite	eq
 8001088:	2301      	moveq	r3, #1
 800108a:	2300      	movne	r3, #0
 800108c:	b2db      	uxtb	r3, r3
 800108e:	2b00      	cmp	r3, #0
 8001090:	d005      	beq.n	800109e <_Z13toggle_switchRSt5arrayIiLj5EE+0x56>
		//BRK_ON
		HAL_GPIO_WritePin(GPIOA, LED1_Pin, GPIO_PIN_RESET);
 8001092:	2200      	movs	r2, #0
 8001094:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001098:	4841      	ldr	r0, [pc, #260]	; (80011a0 <_Z13toggle_switchRSt5arrayIiLj5EE+0x158>)
 800109a:	f001 fd0b 	bl	8002ab4 <HAL_GPIO_WritePin>
	}
	if(arr[1] == 1){//COLLECT_MINUS
 800109e:	2101      	movs	r1, #1
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f000 f8a1 	bl	80011e8 <_ZNSt5arrayIiLj5EEixEj>
 80010a6:	4603      	mov	r3, r0
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	bf0c      	ite	eq
 80010ae:	2301      	moveq	r3, #1
 80010b0:	2300      	movne	r3, #0
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d106      	bne.n	80010c6 <_Z13toggle_switchRSt5arrayIiLj5EE+0x7e>
		//BRK_OFF
		//MINUS
		//HAL_GPIO_WritePin(GPIOA, LED2_Pin, GPIO_PIN_SET);
	}
	else if (arr[1] == 0){//COLLECT_STOP
 80010b8:	2101      	movs	r1, #1
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f000 f894 	bl	80011e8 <_ZNSt5arrayIiLj5EEixEj>
 80010c0:	4603      	mov	r3, r0
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2b00      	cmp	r3, #0
		//BRK_ON
		//HAL_GPIO_WritePin(GPIOA, LED2_Pin, GPIO_PIN_RESET);
	}
	if(arr[2] == 1){//RELOAD_START
 80010c6:	2102      	movs	r1, #2
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f000 f88d 	bl	80011e8 <_ZNSt5arrayIiLj5EEixEj>
 80010ce:	4603      	mov	r3, r0
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	bf0c      	ite	eq
 80010d6:	2301      	moveq	r3, #1
 80010d8:	2300      	movne	r3, #0
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d106      	bne.n	80010ee <_Z13toggle_switchRSt5arrayIiLj5EE+0xa6>
		//BRK_OFF
		//HAL_GPIO_WritePin(GPIOA, LED3_Pin, GPIO_PIN_SET);
	}
	else if (arr[2] == 0){//RELOAD_KEEP
 80010e0:	2102      	movs	r1, #2
 80010e2:	6878      	ldr	r0, [r7, #4]
 80010e4:	f000 f880 	bl	80011e8 <_ZNSt5arrayIiLj5EEixEj>
 80010e8:	4603      	mov	r3, r0
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2b00      	cmp	r3, #0
		//BRK_ON & KEEP
		//HAL_GPIO_WritePin(GPIOA, LED3_Pin, GPIO_PIN_RESET);
	}
	if(arr[3] == 1){//SHOOT
 80010ee:	2103      	movs	r1, #3
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f000 f879 	bl	80011e8 <_ZNSt5arrayIiLj5EEixEj>
 80010f6:	4603      	mov	r3, r0
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	bf0c      	ite	eq
 80010fe:	2301      	moveq	r3, #1
 8001100:	2300      	movne	r3, #0
 8001102:	b2db      	uxtb	r3, r3
 8001104:	2b00      	cmp	r3, #0
 8001106:	d106      	bne.n	8001116 <_Z13toggle_switchRSt5arrayIiLj5EE+0xce>
		//BRK_OFF
	}
	else if (arr[3] == 0){//SHOOT_STOP
 8001108:	2103      	movs	r1, #3
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	f000 f86c 	bl	80011e8 <_ZNSt5arrayIiLj5EEixEj>
 8001110:	4603      	mov	r3, r0
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	2b00      	cmp	r3, #0
		//BRK_ON & KEEP
	}
	if(arr[4] == 2){//DEG_UP
 8001116:	2104      	movs	r1, #4
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	f000 f865 	bl	80011e8 <_ZNSt5arrayIiLj5EEixEj>
 800111e:	4603      	mov	r3, r0
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	2b02      	cmp	r3, #2
 8001124:	bf0c      	ite	eq
 8001126:	2301      	moveq	r3, #1
 8001128:	2300      	movne	r3, #0
 800112a:	b2db      	uxtb	r3, r3
 800112c:	2b00      	cmp	r3, #0
 800112e:	d006      	beq.n	800113e <_Z13toggle_switchRSt5arrayIiLj5EE+0xf6>
		//BRK_OFF & PLUS
		HAL_GPIO_WritePin(GPIOA, LED2_Pin, GPIO_PIN_SET);
 8001130:	2201      	movs	r2, #1
 8001132:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001136:	481a      	ldr	r0, [pc, #104]	; (80011a0 <_Z13toggle_switchRSt5arrayIiLj5EE+0x158>)
 8001138:	f001 fcbc 	bl	8002ab4 <HAL_GPIO_WritePin>
	}
	else if (arr[4] == 0){//DEG_DOWN
		//BRK_OFF & MINUS
		HAL_GPIO_WritePin(GPIOA, LED3_Pin, GPIO_PIN_SET);
	}
}
 800113c:	e02c      	b.n	8001198 <_Z13toggle_switchRSt5arrayIiLj5EE+0x150>
	else if (arr[4] == 1){//DEG_KEEP
 800113e:	2104      	movs	r1, #4
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	f000 f851 	bl	80011e8 <_ZNSt5arrayIiLj5EEixEj>
 8001146:	4603      	mov	r3, r0
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	2b01      	cmp	r3, #1
 800114c:	bf0c      	ite	eq
 800114e:	2301      	moveq	r3, #1
 8001150:	2300      	movne	r3, #0
 8001152:	b2db      	uxtb	r3, r3
 8001154:	2b00      	cmp	r3, #0
 8001156:	d00c      	beq.n	8001172 <_Z13toggle_switchRSt5arrayIiLj5EE+0x12a>
		HAL_GPIO_WritePin(GPIOA, LED2_Pin, GPIO_PIN_RESET);
 8001158:	2200      	movs	r2, #0
 800115a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800115e:	4810      	ldr	r0, [pc, #64]	; (80011a0 <_Z13toggle_switchRSt5arrayIiLj5EE+0x158>)
 8001160:	f001 fca8 	bl	8002ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED3_Pin, GPIO_PIN_RESET);
 8001164:	2200      	movs	r2, #0
 8001166:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800116a:	480d      	ldr	r0, [pc, #52]	; (80011a0 <_Z13toggle_switchRSt5arrayIiLj5EE+0x158>)
 800116c:	f001 fca2 	bl	8002ab4 <HAL_GPIO_WritePin>
}
 8001170:	e012      	b.n	8001198 <_Z13toggle_switchRSt5arrayIiLj5EE+0x150>
	else if (arr[4] == 0){//DEG_DOWN
 8001172:	2104      	movs	r1, #4
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	f000 f837 	bl	80011e8 <_ZNSt5arrayIiLj5EEixEj>
 800117a:	4603      	mov	r3, r0
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	2b00      	cmp	r3, #0
 8001180:	bf0c      	ite	eq
 8001182:	2301      	moveq	r3, #1
 8001184:	2300      	movne	r3, #0
 8001186:	b2db      	uxtb	r3, r3
 8001188:	2b00      	cmp	r3, #0
 800118a:	d005      	beq.n	8001198 <_Z13toggle_switchRSt5arrayIiLj5EE+0x150>
		HAL_GPIO_WritePin(GPIOA, LED3_Pin, GPIO_PIN_SET);
 800118c:	2201      	movs	r2, #1
 800118e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001192:	4803      	ldr	r0, [pc, #12]	; (80011a0 <_Z13toggle_switchRSt5arrayIiLj5EE+0x158>)
 8001194:	f001 fc8e 	bl	8002ab4 <HAL_GPIO_WritePin>
}
 8001198:	bf00      	nop
 800119a:	3708      	adds	r7, #8
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	40020000 	.word	0x40020000

080011a4 <_Z14emergency_progv>:

void emergency_prog(void){
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
	  //HAL_GPIO_WritePin(GPIOA, LED3_Pin, GPIO_PIN_SET);
	//ALL_PSB_ON
	;
}
 80011a8:	bf00      	nop
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr

080011b2 <_Z13recovery_progv>:

void recovery_prog(void){
 80011b2:	b480      	push	{r7}
 80011b4:	af00      	add	r7, sp, #0
	  //HAL_GPIO_WritePin(GPIOA, LED3_Pin, GPIO_PIN_RESET);
	//ALL_PSB_OFF
	;
}
 80011b6:	bf00      	nop
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr

080011c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011c4:	b672      	cpsid	i
}
 80011c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011c8:	e7fe      	b.n	80011c8 <Error_Handler+0x8>

080011ca <_ZNSt5arrayIiLj8EEixEj>:
      _GLIBCXX_NODISCARD constexpr bool
      empty() const noexcept { return size() == 0; }

      // Element access.
      _GLIBCXX17_CONSTEXPR reference
      operator[](size_type __n) noexcept
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b082      	sub	sp, #8
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	6078      	str	r0, [r7, #4]
 80011d2:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6839      	ldr	r1, [r7, #0]
 80011d8:	4618      	mov	r0, r3
 80011da:	f000 f825 	bl	8001228 <_ZNSt14__array_traitsIiLj8EE6_S_refERA8_Kij>
 80011de:	4603      	mov	r3, r0
 80011e0:	4618      	mov	r0, r3
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <_ZNSt5arrayIiLj5EEixEj>:
      operator[](size_type __n) noexcept
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6839      	ldr	r1, [r7, #0]
 80011f6:	4618      	mov	r0, r3
 80011f8:	f000 f825 	bl	8001246 <_ZNSt14__array_traitsIiLj5EE6_S_refERA5_Kij>
 80011fc:	4603      	mov	r3, r0
 80011fe:	4618      	mov	r0, r3
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}

08001206 <_ZStneIiLj5EEbRKSt5arrayIT_XT0_EES4_>:
    }
#else
  template<typename _Tp, std::size_t _Nm>
    _GLIBCXX20_CONSTEXPR
    inline bool
    operator!=(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)
 8001206:	b580      	push	{r7, lr}
 8001208:	b082      	sub	sp, #8
 800120a:	af00      	add	r7, sp, #0
 800120c:	6078      	str	r0, [r7, #4]
 800120e:	6039      	str	r1, [r7, #0]
    { return !(__one == __two); }
 8001210:	6839      	ldr	r1, [r7, #0]
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f000 f826 	bl	8001264 <_ZSteqIiLj5EEbRKSt5arrayIT_XT0_EES4_>
 8001218:	4603      	mov	r3, r0
 800121a:	f083 0301 	eor.w	r3, r3, #1
 800121e:	b2db      	uxtb	r3, r3
 8001220:	4618      	mov	r0, r3
 8001222:	3708      	adds	r7, #8
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}

08001228 <_ZNSt14__array_traitsIiLj8EE6_S_refERA8_Kij>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	687a      	ldr	r2, [r7, #4]
 8001238:	4413      	add	r3, r2
 800123a:	4618      	mov	r0, r3
 800123c:	370c      	adds	r7, #12
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr

08001246 <_ZNSt14__array_traitsIiLj5EE6_S_refERA5_Kij>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8001246:	b480      	push	{r7}
 8001248:	b083      	sub	sp, #12
 800124a:	af00      	add	r7, sp, #0
 800124c:	6078      	str	r0, [r7, #4]
 800124e:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	687a      	ldr	r2, [r7, #4]
 8001256:	4413      	add	r3, r2
 8001258:	4618      	mov	r0, r3
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <_ZSteqIiLj5EEbRKSt5arrayIT_XT0_EES4_>:
    operator==(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)
 8001264:	b5b0      	push	{r4, r5, r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	6039      	str	r1, [r7, #0]
    { return std::equal(__one.begin(), __one.end(), __two.begin()); }
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f000 f813 	bl	800129a <_ZNKSt5arrayIiLj5EE5beginEv>
 8001274:	4604      	mov	r4, r0
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f000 f81b 	bl	80012b2 <_ZNKSt5arrayIiLj5EE3endEv>
 800127c:	4605      	mov	r5, r0
 800127e:	6838      	ldr	r0, [r7, #0]
 8001280:	f000 f80b 	bl	800129a <_ZNKSt5arrayIiLj5EE5beginEv>
 8001284:	4603      	mov	r3, r0
 8001286:	461a      	mov	r2, r3
 8001288:	4629      	mov	r1, r5
 800128a:	4620      	mov	r0, r4
 800128c:	f000 f81e 	bl	80012cc <_ZSt5equalIPKiS1_EbT_S2_T0_>
 8001290:	4603      	mov	r3, r0
 8001292:	4618      	mov	r0, r3
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bdb0      	pop	{r4, r5, r7, pc}

0800129a <_ZNKSt5arrayIiLj5EE5beginEv>:
      begin() const noexcept
 800129a:	b580      	push	{r7, lr}
 800129c:	b082      	sub	sp, #8
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
      { return const_iterator(data()); }
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f000 f822 	bl	80012ec <_ZNKSt5arrayIiLj5EE4dataEv>
 80012a8:	4603      	mov	r3, r0
 80012aa:	4618      	mov	r0, r3
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <_ZNKSt5arrayIiLj5EE3endEv>:
      end() const noexcept
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b082      	sub	sp, #8
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
      { return const_iterator(data() + _Nm); }
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f000 f816 	bl	80012ec <_ZNKSt5arrayIiLj5EE4dataEv>
 80012c0:	4603      	mov	r3, r0
 80012c2:	3314      	adds	r3, #20
 80012c4:	4618      	mov	r0, r3
 80012c6:	3708      	adds	r7, #8
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}

080012cc <_ZSt5equalIPKiS1_EbT_S2_T0_>:
   *  ranges are equal.
  */
  template<typename _II1, typename _II2>
    _GLIBCXX20_CONSTEXPR
    inline bool
    equal(_II1 __first1, _II1 __last1, _II2 __first2)
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	60f8      	str	r0, [r7, #12]
 80012d4:	60b9      	str	r1, [r7, #8]
 80012d6:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_EqualOpConcept<
	    typename iterator_traits<_II1>::value_type,
	    typename iterator_traits<_II2>::value_type>)
      __glibcxx_requires_can_increment_range(__first1, __last1, __first2);

      return std::__equal_aux(__first1, __last1, __first2);
 80012d8:	687a      	ldr	r2, [r7, #4]
 80012da:	68b9      	ldr	r1, [r7, #8]
 80012dc:	68f8      	ldr	r0, [r7, #12]
 80012de:	f000 f812 	bl	8001306 <_ZSt11__equal_auxIPKiS1_EbT_S2_T0_>
 80012e2:	4603      	mov	r3, r0
    }
 80012e4:	4618      	mov	r0, r3
 80012e6:	3710      	adds	r7, #16
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}

080012ec <_ZNKSt5arrayIiLj5EE4dataEv>:
      data() const noexcept
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	4618      	mov	r0, r3
 80012f8:	f000 f821 	bl	800133e <_ZNSt14__array_traitsIiLj5EE6_S_ptrERA5_Ki>
 80012fc:	4603      	mov	r3, r0
 80012fe:	4618      	mov	r0, r3
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}

08001306 <_ZSt11__equal_auxIPKiS1_EbT_S2_T0_>:
    __equal_aux(_II1 __first1, _II1 __last1, _II2 __first2)
 8001306:	b5b0      	push	{r4, r5, r7, lr}
 8001308:	b084      	sub	sp, #16
 800130a:	af00      	add	r7, sp, #0
 800130c:	60f8      	str	r0, [r7, #12]
 800130e:	60b9      	str	r1, [r7, #8]
 8001310:	607a      	str	r2, [r7, #4]
      return std::__equal_aux1(std::__niter_base(__first1),
 8001312:	68f8      	ldr	r0, [r7, #12]
 8001314:	f000 f81e 	bl	8001354 <_ZSt12__niter_baseIPKiET_S2_>
 8001318:	4604      	mov	r4, r0
 800131a:	68b8      	ldr	r0, [r7, #8]
 800131c:	f000 f81a 	bl	8001354 <_ZSt12__niter_baseIPKiET_S2_>
 8001320:	4605      	mov	r5, r0
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f000 f816 	bl	8001354 <_ZSt12__niter_baseIPKiET_S2_>
 8001328:	4603      	mov	r3, r0
 800132a:	461a      	mov	r2, r3
 800132c:	4629      	mov	r1, r5
 800132e:	4620      	mov	r0, r4
 8001330:	f000 f81b 	bl	800136a <_ZSt12__equal_aux1IPKiS1_EbT_S2_T0_>
 8001334:	4603      	mov	r3, r0
    }
 8001336:	4618      	mov	r0, r3
 8001338:	3710      	adds	r7, #16
 800133a:	46bd      	mov	sp, r7
 800133c:	bdb0      	pop	{r4, r5, r7, pc}

0800133e <_ZNSt14__array_traitsIiLj5EE6_S_ptrERA5_Ki>:
      _S_ptr(const _Type& __t) noexcept
 800133e:	b480      	push	{r7}
 8001340:	b083      	sub	sp, #12
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4618      	mov	r0, r3
 800134a:	370c      	adds	r7, #12
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr

08001354 <_ZSt12__niter_baseIPKiET_S2_>:
    __niter_base(_Iterator __it)
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
    { return __it; }
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	4618      	mov	r0, r3
 8001360:	370c      	adds	r7, #12
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr

0800136a <_ZSt12__equal_aux1IPKiS1_EbT_S2_T0_>:
    __equal_aux1(_II1 __first1, _II1 __last1, _II2 __first2)
 800136a:	b580      	push	{r7, lr}
 800136c:	b086      	sub	sp, #24
 800136e:	af00      	add	r7, sp, #0
 8001370:	60f8      	str	r0, [r7, #12]
 8001372:	60b9      	str	r1, [r7, #8]
 8001374:	607a      	str	r2, [r7, #4]
      const bool __simple = ((__is_integer<_ValueType1>::__value
 8001376:	2301      	movs	r3, #1
 8001378:	75fb      	strb	r3, [r7, #23]
      return std::__equal<__simple>::equal(__first1, __last1, __first2);
 800137a:	687a      	ldr	r2, [r7, #4]
 800137c:	68b9      	ldr	r1, [r7, #8]
 800137e:	68f8      	ldr	r0, [r7, #12]
 8001380:	f000 f805 	bl	800138e <_ZNSt7__equalILb1EE5equalIiEEbPKT_S4_S4_>
 8001384:	4603      	mov	r3, r0
    }
 8001386:	4618      	mov	r0, r3
 8001388:	3718      	adds	r7, #24
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <_ZNSt7__equalILb1EE5equalIiEEbPKT_S4_S4_>:
	equal(const _Tp* __first1, const _Tp* __last1, const _Tp* __first2)
 800138e:	b580      	push	{r7, lr}
 8001390:	b086      	sub	sp, #24
 8001392:	af00      	add	r7, sp, #0
 8001394:	60f8      	str	r0, [r7, #12]
 8001396:	60b9      	str	r1, [r7, #8]
 8001398:	607a      	str	r2, [r7, #4]
	  if (const size_t __len = (__last1 - __first1))
 800139a:	68ba      	ldr	r2, [r7, #8]
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	109b      	asrs	r3, r3, #2
 80013a2:	617b      	str	r3, [r7, #20]
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d00b      	beq.n	80013c2 <_ZNSt7__equalILb1EE5equalIiEEbPKT_S4_S4_+0x34>
	    return !std::__memcmp(__first1, __first2, __len);
 80013aa:	697a      	ldr	r2, [r7, #20]
 80013ac:	6879      	ldr	r1, [r7, #4]
 80013ae:	68f8      	ldr	r0, [r7, #12]
 80013b0:	f000 f80c 	bl	80013cc <_ZSt8__memcmpIiiEiPKT_PKT0_j>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	bf0c      	ite	eq
 80013ba:	2301      	moveq	r3, #1
 80013bc:	2300      	movne	r3, #0
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	e000      	b.n	80013c4 <_ZNSt7__equalILb1EE5equalIiEEbPKT_S4_S4_+0x36>
	  return true;
 80013c2:	2301      	movs	r3, #1
	}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3718      	adds	r7, #24
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}

080013cc <_ZSt8__memcmpIiiEiPKT_PKT0_j>:
    __memcmp(const _Tp* __first1, const _Up* __first2, size_t __num)
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	60f8      	str	r0, [r7, #12]
 80013d4:	60b9      	str	r1, [r7, #8]
 80013d6:	607a      	str	r2, [r7, #4]
	return __builtin_memcmp(__first1, __first2, sizeof(_Tp) * __num);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	461a      	mov	r2, r3
 80013de:	68b9      	ldr	r1, [r7, #8]
 80013e0:	68f8      	ldr	r0, [r7, #12]
 80013e2:	f003 fb7d 	bl	8004ae0 <memcmp>
 80013e6:	4603      	mov	r3, r0
    }
 80013e8:	4618      	mov	r0, r3
 80013ea:	3710      	adds	r7, #16
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	607b      	str	r3, [r7, #4]
 80013fa:	4b10      	ldr	r3, [pc, #64]	; (800143c <HAL_MspInit+0x4c>)
 80013fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013fe:	4a0f      	ldr	r2, [pc, #60]	; (800143c <HAL_MspInit+0x4c>)
 8001400:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001404:	6453      	str	r3, [r2, #68]	; 0x44
 8001406:	4b0d      	ldr	r3, [pc, #52]	; (800143c <HAL_MspInit+0x4c>)
 8001408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800140a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800140e:	607b      	str	r3, [r7, #4]
 8001410:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001412:	2300      	movs	r3, #0
 8001414:	603b      	str	r3, [r7, #0]
 8001416:	4b09      	ldr	r3, [pc, #36]	; (800143c <HAL_MspInit+0x4c>)
 8001418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141a:	4a08      	ldr	r2, [pc, #32]	; (800143c <HAL_MspInit+0x4c>)
 800141c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001420:	6413      	str	r3, [r2, #64]	; 0x40
 8001422:	4b06      	ldr	r3, [pc, #24]	; (800143c <HAL_MspInit+0x4c>)
 8001424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001426:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800142a:	603b      	str	r3, [r7, #0]
 800142c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800142e:	2007      	movs	r0, #7
 8001430:	f001 f96a 	bl	8002708 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001434:	bf00      	nop
 8001436:	3708      	adds	r7, #8
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	40023800 	.word	0x40023800

08001440 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b08a      	sub	sp, #40	; 0x28
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001448:	f107 0314 	add.w	r3, r7, #20
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	605a      	str	r2, [r3, #4]
 8001452:	609a      	str	r2, [r3, #8]
 8001454:	60da      	str	r2, [r3, #12]
 8001456:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN2)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a2c      	ldr	r2, [pc, #176]	; (8001510 <HAL_CAN_MspInit+0xd0>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d151      	bne.n	8001506 <HAL_CAN_MspInit+0xc6>
  {
  /* USER CODE BEGIN CAN2_MspInit 0 */

  /* USER CODE END CAN2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	613b      	str	r3, [r7, #16]
 8001466:	4b2b      	ldr	r3, [pc, #172]	; (8001514 <HAL_CAN_MspInit+0xd4>)
 8001468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146a:	4a2a      	ldr	r2, [pc, #168]	; (8001514 <HAL_CAN_MspInit+0xd4>)
 800146c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001470:	6413      	str	r3, [r2, #64]	; 0x40
 8001472:	4b28      	ldr	r3, [pc, #160]	; (8001514 <HAL_CAN_MspInit+0xd4>)
 8001474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001476:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800147a:	613b      	str	r3, [r7, #16]
 800147c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_CAN1_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	60fb      	str	r3, [r7, #12]
 8001482:	4b24      	ldr	r3, [pc, #144]	; (8001514 <HAL_CAN_MspInit+0xd4>)
 8001484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001486:	4a23      	ldr	r2, [pc, #140]	; (8001514 <HAL_CAN_MspInit+0xd4>)
 8001488:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800148c:	6413      	str	r3, [r2, #64]	; 0x40
 800148e:	4b21      	ldr	r3, [pc, #132]	; (8001514 <HAL_CAN_MspInit+0xd4>)
 8001490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001492:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001496:	60fb      	str	r3, [r7, #12]
 8001498:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	60bb      	str	r3, [r7, #8]
 800149e:	4b1d      	ldr	r3, [pc, #116]	; (8001514 <HAL_CAN_MspInit+0xd4>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	4a1c      	ldr	r2, [pc, #112]	; (8001514 <HAL_CAN_MspInit+0xd4>)
 80014a4:	f043 0302 	orr.w	r3, r3, #2
 80014a8:	6313      	str	r3, [r2, #48]	; 0x30
 80014aa:	4b1a      	ldr	r3, [pc, #104]	; (8001514 <HAL_CAN_MspInit+0xd4>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	f003 0302 	and.w	r3, r3, #2
 80014b2:	60bb      	str	r3, [r7, #8]
 80014b4:	68bb      	ldr	r3, [r7, #8]
    /**CAN2 GPIO Configuration
    PB5     ------> CAN2_RX
    PB6     ------> CAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80014b6:	2360      	movs	r3, #96	; 0x60
 80014b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ba:	2302      	movs	r3, #2
 80014bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014be:	2300      	movs	r3, #0
 80014c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c2:	2303      	movs	r3, #3
 80014c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80014c6:	2309      	movs	r3, #9
 80014c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ca:	f107 0314 	add.w	r3, r7, #20
 80014ce:	4619      	mov	r1, r3
 80014d0:	4811      	ldr	r0, [pc, #68]	; (8001518 <HAL_CAN_MspInit+0xd8>)
 80014d2:	f001 f95b 	bl	800278c <HAL_GPIO_Init>

    /* CAN2 interrupt Init */
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 0, 0);
 80014d6:	2200      	movs	r2, #0
 80014d8:	2100      	movs	r1, #0
 80014da:	203f      	movs	r0, #63	; 0x3f
 80014dc:	f001 f91f 	bl	800271e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 80014e0:	203f      	movs	r0, #63	; 0x3f
 80014e2:	f001 f938 	bl	8002756 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 80014e6:	2200      	movs	r2, #0
 80014e8:	2100      	movs	r1, #0
 80014ea:	2040      	movs	r0, #64	; 0x40
 80014ec:	f001 f917 	bl	800271e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 80014f0:	2040      	movs	r0, #64	; 0x40
 80014f2:	f001 f930 	bl	8002756 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 80014f6:	2200      	movs	r2, #0
 80014f8:	2100      	movs	r1, #0
 80014fa:	2041      	movs	r0, #65	; 0x41
 80014fc:	f001 f90f 	bl	800271e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8001500:	2041      	movs	r0, #65	; 0x41
 8001502:	f001 f928 	bl	8002756 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8001506:	bf00      	nop
 8001508:	3728      	adds	r7, #40	; 0x28
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	40006800 	.word	0x40006800
 8001514:	40023800 	.word	0x40023800
 8001518:	40020400 	.word	0x40020400

0800151c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800151c:	b480      	push	{r7}
 800151e:	b085      	sub	sp, #20
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a15      	ldr	r2, [pc, #84]	; (8001580 <HAL_TIM_Base_MspInit+0x64>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d10e      	bne.n	800154c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800152e:	2300      	movs	r3, #0
 8001530:	60fb      	str	r3, [r7, #12]
 8001532:	4b14      	ldr	r3, [pc, #80]	; (8001584 <HAL_TIM_Base_MspInit+0x68>)
 8001534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001536:	4a13      	ldr	r2, [pc, #76]	; (8001584 <HAL_TIM_Base_MspInit+0x68>)
 8001538:	f043 0301 	orr.w	r3, r3, #1
 800153c:	6453      	str	r3, [r2, #68]	; 0x44
 800153e:	4b11      	ldr	r3, [pc, #68]	; (8001584 <HAL_TIM_Base_MspInit+0x68>)
 8001540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001542:	f003 0301 	and.w	r3, r3, #1
 8001546:	60fb      	str	r3, [r7, #12]
 8001548:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800154a:	e012      	b.n	8001572 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM2)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001554:	d10d      	bne.n	8001572 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001556:	2300      	movs	r3, #0
 8001558:	60bb      	str	r3, [r7, #8]
 800155a:	4b0a      	ldr	r3, [pc, #40]	; (8001584 <HAL_TIM_Base_MspInit+0x68>)
 800155c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155e:	4a09      	ldr	r2, [pc, #36]	; (8001584 <HAL_TIM_Base_MspInit+0x68>)
 8001560:	f043 0301 	orr.w	r3, r3, #1
 8001564:	6413      	str	r3, [r2, #64]	; 0x40
 8001566:	4b07      	ldr	r3, [pc, #28]	; (8001584 <HAL_TIM_Base_MspInit+0x68>)
 8001568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156a:	f003 0301 	and.w	r3, r3, #1
 800156e:	60bb      	str	r3, [r7, #8]
 8001570:	68bb      	ldr	r3, [r7, #8]
}
 8001572:	bf00      	nop
 8001574:	3714      	adds	r7, #20
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	40010000 	.word	0x40010000
 8001584:	40023800 	.word	0x40023800

08001588 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b08a      	sub	sp, #40	; 0x28
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001590:	f107 0314 	add.w	r3, r7, #20
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	605a      	str	r2, [r3, #4]
 800159a:	609a      	str	r2, [r3, #8]
 800159c:	60da      	str	r2, [r3, #12]
 800159e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a25      	ldr	r2, [pc, #148]	; (800163c <HAL_TIM_MspPostInit+0xb4>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d11f      	bne.n	80015ea <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015aa:	2300      	movs	r3, #0
 80015ac:	613b      	str	r3, [r7, #16]
 80015ae:	4b24      	ldr	r3, [pc, #144]	; (8001640 <HAL_TIM_MspPostInit+0xb8>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	4a23      	ldr	r2, [pc, #140]	; (8001640 <HAL_TIM_MspPostInit+0xb8>)
 80015b4:	f043 0301 	orr.w	r3, r3, #1
 80015b8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ba:	4b21      	ldr	r3, [pc, #132]	; (8001640 <HAL_TIM_MspPostInit+0xb8>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015be:	f003 0301 	and.w	r3, r3, #1
 80015c2:	613b      	str	r3, [r7, #16]
 80015c4:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = pwm1_Pin|pwm2_Pin|pwm3_Pin;
 80015c6:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80015ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015cc:	2302      	movs	r3, #2
 80015ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d0:	2300      	movs	r3, #0
 80015d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d4:	2300      	movs	r3, #0
 80015d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80015d8:	2301      	movs	r3, #1
 80015da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015dc:	f107 0314 	add.w	r3, r7, #20
 80015e0:	4619      	mov	r1, r3
 80015e2:	4818      	ldr	r0, [pc, #96]	; (8001644 <HAL_TIM_MspPostInit+0xbc>)
 80015e4:	f001 f8d2 	bl	800278c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80015e8:	e023      	b.n	8001632 <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM2)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015f2:	d11e      	bne.n	8001632 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015f4:	2300      	movs	r3, #0
 80015f6:	60fb      	str	r3, [r7, #12]
 80015f8:	4b11      	ldr	r3, [pc, #68]	; (8001640 <HAL_TIM_MspPostInit+0xb8>)
 80015fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fc:	4a10      	ldr	r2, [pc, #64]	; (8001640 <HAL_TIM_MspPostInit+0xb8>)
 80015fe:	f043 0302 	orr.w	r3, r3, #2
 8001602:	6313      	str	r3, [r2, #48]	; 0x30
 8001604:	4b0e      	ldr	r3, [pc, #56]	; (8001640 <HAL_TIM_MspPostInit+0xb8>)
 8001606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001608:	f003 0302 	and.w	r3, r3, #2
 800160c:	60fb      	str	r3, [r7, #12]
 800160e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = pwm6_Pin|pwm4_Pin|pwm5_Pin;
 8001610:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001614:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001616:	2302      	movs	r3, #2
 8001618:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161a:	2300      	movs	r3, #0
 800161c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800161e:	2300      	movs	r3, #0
 8001620:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001622:	2301      	movs	r3, #1
 8001624:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001626:	f107 0314 	add.w	r3, r7, #20
 800162a:	4619      	mov	r1, r3
 800162c:	4806      	ldr	r0, [pc, #24]	; (8001648 <HAL_TIM_MspPostInit+0xc0>)
 800162e:	f001 f8ad 	bl	800278c <HAL_GPIO_Init>
}
 8001632:	bf00      	nop
 8001634:	3728      	adds	r7, #40	; 0x28
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	40010000 	.word	0x40010000
 8001640:	40023800 	.word	0x40023800
 8001644:	40020000 	.word	0x40020000
 8001648:	40020400 	.word	0x40020400

0800164c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b08a      	sub	sp, #40	; 0x28
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001654:	f107 0314 	add.w	r3, r7, #20
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	605a      	str	r2, [r3, #4]
 800165e:	609a      	str	r2, [r3, #8]
 8001660:	60da      	str	r2, [r3, #12]
 8001662:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a19      	ldr	r2, [pc, #100]	; (80016d0 <HAL_UART_MspInit+0x84>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d12b      	bne.n	80016c6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	613b      	str	r3, [r7, #16]
 8001672:	4b18      	ldr	r3, [pc, #96]	; (80016d4 <HAL_UART_MspInit+0x88>)
 8001674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001676:	4a17      	ldr	r2, [pc, #92]	; (80016d4 <HAL_UART_MspInit+0x88>)
 8001678:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800167c:	6413      	str	r3, [r2, #64]	; 0x40
 800167e:	4b15      	ldr	r3, [pc, #84]	; (80016d4 <HAL_UART_MspInit+0x88>)
 8001680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001686:	613b      	str	r3, [r7, #16]
 8001688:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800168a:	2300      	movs	r3, #0
 800168c:	60fb      	str	r3, [r7, #12]
 800168e:	4b11      	ldr	r3, [pc, #68]	; (80016d4 <HAL_UART_MspInit+0x88>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	4a10      	ldr	r2, [pc, #64]	; (80016d4 <HAL_UART_MspInit+0x88>)
 8001694:	f043 0301 	orr.w	r3, r3, #1
 8001698:	6313      	str	r3, [r2, #48]	; 0x30
 800169a:	4b0e      	ldr	r3, [pc, #56]	; (80016d4 <HAL_UART_MspInit+0x88>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169e:	f003 0301 	and.w	r3, r3, #1
 80016a2:	60fb      	str	r3, [r7, #12]
 80016a4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80016a6:	230c      	movs	r3, #12
 80016a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016aa:	2302      	movs	r3, #2
 80016ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ae:	2300      	movs	r3, #0
 80016b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016b2:	2303      	movs	r3, #3
 80016b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016b6:	2307      	movs	r3, #7
 80016b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ba:	f107 0314 	add.w	r3, r7, #20
 80016be:	4619      	mov	r1, r3
 80016c0:	4805      	ldr	r0, [pc, #20]	; (80016d8 <HAL_UART_MspInit+0x8c>)
 80016c2:	f001 f863 	bl	800278c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80016c6:	bf00      	nop
 80016c8:	3728      	adds	r7, #40	; 0x28
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	40004400 	.word	0x40004400
 80016d4:	40023800 	.word	0x40023800
 80016d8:	40020000 	.word	0x40020000

080016dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016e0:	e7fe      	b.n	80016e0 <NMI_Handler+0x4>

080016e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016e2:	b480      	push	{r7}
 80016e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016e6:	e7fe      	b.n	80016e6 <HardFault_Handler+0x4>

080016e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016ec:	e7fe      	b.n	80016ec <MemManage_Handler+0x4>

080016ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016ee:	b480      	push	{r7}
 80016f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016f2:	e7fe      	b.n	80016f2 <BusFault_Handler+0x4>

080016f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016f8:	e7fe      	b.n	80016f8 <UsageFault_Handler+0x4>

080016fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016fa:	b480      	push	{r7}
 80016fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016fe:	bf00      	nop
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr

08001708 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800170c:	bf00      	nop
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr

08001716 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001716:	b480      	push	{r7}
 8001718:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800171a:	bf00      	nop
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr

08001724 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001728:	f000 f952 	bl	80019d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800172c:	bf00      	nop
 800172e:	bd80      	pop	{r7, pc}

08001730 <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupt.
  */
void CAN2_TX_IRQHandler(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001734:	4802      	ldr	r0, [pc, #8]	; (8001740 <CAN2_TX_IRQHandler+0x10>)
 8001736:	f000 fce7 	bl	8002108 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 800173a:	bf00      	nop
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	2000008c 	.word	0x2000008c

08001744 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupt.
  */
void CAN2_RX0_IRQHandler(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001748:	4802      	ldr	r0, [pc, #8]	; (8001754 <CAN2_RX0_IRQHandler+0x10>)
 800174a:	f000 fcdd 	bl	8002108 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 800174e:	bf00      	nop
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	2000008c 	.word	0x2000008c

08001758 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 800175c:	4802      	ldr	r0, [pc, #8]	; (8001768 <CAN2_RX1_IRQHandler+0x10>)
 800175e:	f000 fcd3 	bl	8002108 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8001762:	bf00      	nop
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	2000008c 	.word	0x2000008c

0800176c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b086      	sub	sp, #24
 8001770:	af00      	add	r7, sp, #0
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	60b9      	str	r1, [r7, #8]
 8001776:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001778:	2300      	movs	r3, #0
 800177a:	617b      	str	r3, [r7, #20]
 800177c:	e00a      	b.n	8001794 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800177e:	f3af 8000 	nop.w
 8001782:	4601      	mov	r1, r0
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	1c5a      	adds	r2, r3, #1
 8001788:	60ba      	str	r2, [r7, #8]
 800178a:	b2ca      	uxtb	r2, r1
 800178c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	3301      	adds	r3, #1
 8001792:	617b      	str	r3, [r7, #20]
 8001794:	697a      	ldr	r2, [r7, #20]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	429a      	cmp	r2, r3
 800179a:	dbf0      	blt.n	800177e <_read+0x12>
  }

  return len;
 800179c:	687b      	ldr	r3, [r7, #4]
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3718      	adds	r7, #24
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}

080017a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017a6:	b580      	push	{r7, lr}
 80017a8:	b086      	sub	sp, #24
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	60f8      	str	r0, [r7, #12]
 80017ae:	60b9      	str	r1, [r7, #8]
 80017b0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017b2:	2300      	movs	r3, #0
 80017b4:	617b      	str	r3, [r7, #20]
 80017b6:	e009      	b.n	80017cc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	1c5a      	adds	r2, r3, #1
 80017bc:	60ba      	str	r2, [r7, #8]
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	3301      	adds	r3, #1
 80017ca:	617b      	str	r3, [r7, #20]
 80017cc:	697a      	ldr	r2, [r7, #20]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	dbf1      	blt.n	80017b8 <_write+0x12>
  }
  return len;
 80017d4:	687b      	ldr	r3, [r7, #4]
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3718      	adds	r7, #24
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}

080017de <_close>:

int _close(int file)
{
 80017de:	b480      	push	{r7}
 80017e0:	b083      	sub	sp, #12
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80017e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr

080017f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017f6:	b480      	push	{r7}
 80017f8:	b083      	sub	sp, #12
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
 80017fe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001806:	605a      	str	r2, [r3, #4]
  return 0;
 8001808:	2300      	movs	r3, #0
}
 800180a:	4618      	mov	r0, r3
 800180c:	370c      	adds	r7, #12
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr

08001816 <_isatty>:

int _isatty(int file)
{
 8001816:	b480      	push	{r7}
 8001818:	b083      	sub	sp, #12
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800181e:	2301      	movs	r3, #1
}
 8001820:	4618      	mov	r0, r3
 8001822:	370c      	adds	r7, #12
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr

0800182c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800182c:	b480      	push	{r7}
 800182e:	b085      	sub	sp, #20
 8001830:	af00      	add	r7, sp, #0
 8001832:	60f8      	str	r0, [r7, #12]
 8001834:	60b9      	str	r1, [r7, #8]
 8001836:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001838:	2300      	movs	r3, #0
}
 800183a:	4618      	mov	r0, r3
 800183c:	3714      	adds	r7, #20
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
	...

08001848 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b086      	sub	sp, #24
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001850:	4a14      	ldr	r2, [pc, #80]	; (80018a4 <_sbrk+0x5c>)
 8001852:	4b15      	ldr	r3, [pc, #84]	; (80018a8 <_sbrk+0x60>)
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800185c:	4b13      	ldr	r3, [pc, #76]	; (80018ac <_sbrk+0x64>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d102      	bne.n	800186a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001864:	4b11      	ldr	r3, [pc, #68]	; (80018ac <_sbrk+0x64>)
 8001866:	4a12      	ldr	r2, [pc, #72]	; (80018b0 <_sbrk+0x68>)
 8001868:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800186a:	4b10      	ldr	r3, [pc, #64]	; (80018ac <_sbrk+0x64>)
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4413      	add	r3, r2
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	429a      	cmp	r2, r3
 8001876:	d207      	bcs.n	8001888 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001878:	f003 f908 	bl	8004a8c <__errno>
 800187c:	4603      	mov	r3, r0
 800187e:	220c      	movs	r2, #12
 8001880:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001882:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001886:	e009      	b.n	800189c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001888:	4b08      	ldr	r3, [pc, #32]	; (80018ac <_sbrk+0x64>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800188e:	4b07      	ldr	r3, [pc, #28]	; (80018ac <_sbrk+0x64>)
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4413      	add	r3, r2
 8001896:	4a05      	ldr	r2, [pc, #20]	; (80018ac <_sbrk+0x64>)
 8001898:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800189a:	68fb      	ldr	r3, [r7, #12]
}
 800189c:	4618      	mov	r0, r3
 800189e:	3718      	adds	r7, #24
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	20020000 	.word	0x20020000
 80018a8:	00000400 	.word	0x00000400
 80018ac:	200001b0 	.word	0x200001b0
 80018b0:	200001c8 	.word	0x200001c8

080018b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018b8:	4b06      	ldr	r3, [pc, #24]	; (80018d4 <SystemInit+0x20>)
 80018ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018be:	4a05      	ldr	r2, [pc, #20]	; (80018d4 <SystemInit+0x20>)
 80018c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018c8:	bf00      	nop
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	e000ed00 	.word	0xe000ed00

080018d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80018d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001910 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018dc:	480d      	ldr	r0, [pc, #52]	; (8001914 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80018de:	490e      	ldr	r1, [pc, #56]	; (8001918 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80018e0:	4a0e      	ldr	r2, [pc, #56]	; (800191c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018e4:	e002      	b.n	80018ec <LoopCopyDataInit>

080018e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018ea:	3304      	adds	r3, #4

080018ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018f0:	d3f9      	bcc.n	80018e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018f2:	4a0b      	ldr	r2, [pc, #44]	; (8001920 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80018f4:	4c0b      	ldr	r4, [pc, #44]	; (8001924 <LoopFillZerobss+0x26>)
  movs r3, #0
 80018f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018f8:	e001      	b.n	80018fe <LoopFillZerobss>

080018fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018fc:	3204      	adds	r2, #4

080018fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001900:	d3fb      	bcc.n	80018fa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001902:	f7ff ffd7 	bl	80018b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001906:	f003 f8c7 	bl	8004a98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800190a:	f7fe fdfd 	bl	8000508 <main>
  bx  lr    
 800190e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001910:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001914:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001918:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800191c:	08005764 	.word	0x08005764
  ldr r2, =_sbss
 8001920:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001924:	200001c8 	.word	0x200001c8

08001928 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001928:	e7fe      	b.n	8001928 <ADC_IRQHandler>
	...

0800192c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001930:	4b0e      	ldr	r3, [pc, #56]	; (800196c <HAL_Init+0x40>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a0d      	ldr	r2, [pc, #52]	; (800196c <HAL_Init+0x40>)
 8001936:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800193a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800193c:	4b0b      	ldr	r3, [pc, #44]	; (800196c <HAL_Init+0x40>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a0a      	ldr	r2, [pc, #40]	; (800196c <HAL_Init+0x40>)
 8001942:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001946:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001948:	4b08      	ldr	r3, [pc, #32]	; (800196c <HAL_Init+0x40>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a07      	ldr	r2, [pc, #28]	; (800196c <HAL_Init+0x40>)
 800194e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001952:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001954:	2003      	movs	r0, #3
 8001956:	f000 fed7 	bl	8002708 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800195a:	2000      	movs	r0, #0
 800195c:	f000 f808 	bl	8001970 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001960:	f7ff fd46 	bl	80013f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001964:	2300      	movs	r3, #0
}
 8001966:	4618      	mov	r0, r3
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	40023c00 	.word	0x40023c00

08001970 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001978:	4b12      	ldr	r3, [pc, #72]	; (80019c4 <HAL_InitTick+0x54>)
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	4b12      	ldr	r3, [pc, #72]	; (80019c8 <HAL_InitTick+0x58>)
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	4619      	mov	r1, r3
 8001982:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001986:	fbb3 f3f1 	udiv	r3, r3, r1
 800198a:	fbb2 f3f3 	udiv	r3, r2, r3
 800198e:	4618      	mov	r0, r3
 8001990:	f000 feef 	bl	8002772 <HAL_SYSTICK_Config>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e00e      	b.n	80019bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2b0f      	cmp	r3, #15
 80019a2:	d80a      	bhi.n	80019ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019a4:	2200      	movs	r2, #0
 80019a6:	6879      	ldr	r1, [r7, #4]
 80019a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019ac:	f000 feb7 	bl	800271e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019b0:	4a06      	ldr	r2, [pc, #24]	; (80019cc <HAL_InitTick+0x5c>)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019b6:	2300      	movs	r3, #0
 80019b8:	e000      	b.n	80019bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3708      	adds	r7, #8
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	20000000 	.word	0x20000000
 80019c8:	20000008 	.word	0x20000008
 80019cc:	20000004 	.word	0x20000004

080019d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019d4:	4b06      	ldr	r3, [pc, #24]	; (80019f0 <HAL_IncTick+0x20>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	461a      	mov	r2, r3
 80019da:	4b06      	ldr	r3, [pc, #24]	; (80019f4 <HAL_IncTick+0x24>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4413      	add	r3, r2
 80019e0:	4a04      	ldr	r2, [pc, #16]	; (80019f4 <HAL_IncTick+0x24>)
 80019e2:	6013      	str	r3, [r2, #0]
}
 80019e4:	bf00      	nop
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	20000008 	.word	0x20000008
 80019f4:	200001b4 	.word	0x200001b4

080019f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  return uwTick;
 80019fc:	4b03      	ldr	r3, [pc, #12]	; (8001a0c <HAL_GetTick+0x14>)
 80019fe:	681b      	ldr	r3, [r3, #0]
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	200001b4 	.word	0x200001b4

08001a10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a18:	f7ff ffee 	bl	80019f8 <HAL_GetTick>
 8001a1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a28:	d005      	beq.n	8001a36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a2a:	4b0a      	ldr	r3, [pc, #40]	; (8001a54 <HAL_Delay+0x44>)
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	461a      	mov	r2, r3
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	4413      	add	r3, r2
 8001a34:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a36:	bf00      	nop
 8001a38:	f7ff ffde 	bl	80019f8 <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	68fa      	ldr	r2, [r7, #12]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d8f7      	bhi.n	8001a38 <HAL_Delay+0x28>
  {
  }
}
 8001a48:	bf00      	nop
 8001a4a:	bf00      	nop
 8001a4c:	3710      	adds	r7, #16
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	20000008 	.word	0x20000008

08001a58 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d101      	bne.n	8001a6a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e0ed      	b.n	8001c46 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d102      	bne.n	8001a7c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f7ff fce2 	bl	8001440 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f042 0201 	orr.w	r2, r2, #1
 8001a8a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a8c:	f7ff ffb4 	bl	80019f8 <HAL_GetTick>
 8001a90:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001a92:	e012      	b.n	8001aba <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a94:	f7ff ffb0 	bl	80019f8 <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	2b0a      	cmp	r3, #10
 8001aa0:	d90b      	bls.n	8001aba <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2205      	movs	r2, #5
 8001ab2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e0c5      	b.n	8001c46 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f003 0301 	and.w	r3, r3, #1
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d0e5      	beq.n	8001a94 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f022 0202 	bic.w	r2, r2, #2
 8001ad6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ad8:	f7ff ff8e 	bl	80019f8 <HAL_GetTick>
 8001adc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001ade:	e012      	b.n	8001b06 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ae0:	f7ff ff8a 	bl	80019f8 <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	2b0a      	cmp	r3, #10
 8001aec:	d90b      	bls.n	8001b06 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2205      	movs	r2, #5
 8001afe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e09f      	b.n	8001c46 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f003 0302 	and.w	r3, r3, #2
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d1e5      	bne.n	8001ae0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	7e1b      	ldrb	r3, [r3, #24]
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d108      	bne.n	8001b2e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001b2a:	601a      	str	r2, [r3, #0]
 8001b2c:	e007      	b.n	8001b3e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b3c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	7e5b      	ldrb	r3, [r3, #25]
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d108      	bne.n	8001b58 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b54:	601a      	str	r2, [r3, #0]
 8001b56:	e007      	b.n	8001b68 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b66:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	7e9b      	ldrb	r3, [r3, #26]
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d108      	bne.n	8001b82 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f042 0220 	orr.w	r2, r2, #32
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	e007      	b.n	8001b92 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f022 0220 	bic.w	r2, r2, #32
 8001b90:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	7edb      	ldrb	r3, [r3, #27]
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d108      	bne.n	8001bac <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f022 0210 	bic.w	r2, r2, #16
 8001ba8:	601a      	str	r2, [r3, #0]
 8001baa:	e007      	b.n	8001bbc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f042 0210 	orr.w	r2, r2, #16
 8001bba:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	7f1b      	ldrb	r3, [r3, #28]
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d108      	bne.n	8001bd6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f042 0208 	orr.w	r2, r2, #8
 8001bd2:	601a      	str	r2, [r3, #0]
 8001bd4:	e007      	b.n	8001be6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f022 0208 	bic.w	r2, r2, #8
 8001be4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	7f5b      	ldrb	r3, [r3, #29]
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d108      	bne.n	8001c00 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f042 0204 	orr.w	r2, r2, #4
 8001bfc:	601a      	str	r2, [r3, #0]
 8001bfe:	e007      	b.n	8001c10 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f022 0204 	bic.w	r2, r2, #4
 8001c0e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	689a      	ldr	r2, [r3, #8]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	431a      	orrs	r2, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	691b      	ldr	r3, [r3, #16]
 8001c1e:	431a      	orrs	r2, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	695b      	ldr	r3, [r3, #20]
 8001c24:	ea42 0103 	orr.w	r1, r2, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	1e5a      	subs	r2, r3, #1
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	430a      	orrs	r2, r1
 8001c34:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001c44:	2300      	movs	r3, #0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3710      	adds	r7, #16
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
	...

08001c50 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b087      	sub	sp, #28
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c66:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001c68:	7cfb      	ldrb	r3, [r7, #19]
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d003      	beq.n	8001c76 <HAL_CAN_ConfigFilter+0x26>
 8001c6e:	7cfb      	ldrb	r3, [r7, #19]
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	f040 80be 	bne.w	8001df2 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001c76:	4b65      	ldr	r3, [pc, #404]	; (8001e0c <HAL_CAN_ConfigFilter+0x1bc>)
 8001c78:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001c80:	f043 0201 	orr.w	r2, r3, #1
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001c90:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca4:	021b      	lsls	r3, r3, #8
 8001ca6:	431a      	orrs	r2, r3
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	695b      	ldr	r3, [r3, #20]
 8001cb2:	f003 031f 	and.w	r3, r3, #31
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	43db      	mvns	r3, r3
 8001cc8:	401a      	ands	r2, r3
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	69db      	ldr	r3, [r3, #28]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d123      	bne.n	8001d20 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	43db      	mvns	r3, r3
 8001ce2:	401a      	ands	r2, r3
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	68db      	ldr	r3, [r3, #12]
 8001cee:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001cf6:	683a      	ldr	r2, [r7, #0]
 8001cf8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001cfa:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	3248      	adds	r2, #72	; 0x48
 8001d00:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001d14:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001d16:	6979      	ldr	r1, [r7, #20]
 8001d18:	3348      	adds	r3, #72	; 0x48
 8001d1a:	00db      	lsls	r3, r3, #3
 8001d1c:	440b      	add	r3, r1
 8001d1e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	69db      	ldr	r3, [r3, #28]
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d122      	bne.n	8001d6e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	431a      	orrs	r2, r3
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001d44:	683a      	ldr	r2, [r7, #0]
 8001d46:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001d48:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	3248      	adds	r2, #72	; 0x48
 8001d4e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001d62:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001d64:	6979      	ldr	r1, [r7, #20]
 8001d66:	3348      	adds	r3, #72	; 0x48
 8001d68:	00db      	lsls	r3, r3, #3
 8001d6a:	440b      	add	r3, r1
 8001d6c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	699b      	ldr	r3, [r3, #24]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d109      	bne.n	8001d8a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	43db      	mvns	r3, r3
 8001d80:	401a      	ands	r2, r3
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001d88:	e007      	b.n	8001d9a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	431a      	orrs	r2, r3
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	691b      	ldr	r3, [r3, #16]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d109      	bne.n	8001db6 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	43db      	mvns	r3, r3
 8001dac:	401a      	ands	r2, r3
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001db4:	e007      	b.n	8001dc6 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	431a      	orrs	r2, r3
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	6a1b      	ldr	r3, [r3, #32]
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d107      	bne.n	8001dde <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	431a      	orrs	r2, r3
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001de4:	f023 0201 	bic.w	r2, r3, #1
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001dee:	2300      	movs	r3, #0
 8001df0:	e006      	b.n	8001e00 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
  }
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	371c      	adds	r7, #28
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr
 8001e0c:	40006400 	.word	0x40006400

08001e10 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d12e      	bne.n	8001e82 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2202      	movs	r2, #2
 8001e28:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f022 0201 	bic.w	r2, r2, #1
 8001e3a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001e3c:	f7ff fddc 	bl	80019f8 <HAL_GetTick>
 8001e40:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001e42:	e012      	b.n	8001e6a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001e44:	f7ff fdd8 	bl	80019f8 <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	2b0a      	cmp	r3, #10
 8001e50:	d90b      	bls.n	8001e6a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e56:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2205      	movs	r2, #5
 8001e62:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e012      	b.n	8001e90 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f003 0301 	and.w	r3, r3, #1
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d1e5      	bne.n	8001e44 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	e006      	b.n	8001e90 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e86:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
  }
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3710      	adds	r7, #16
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b087      	sub	sp, #28
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	60f8      	str	r0, [r7, #12]
 8001ea0:	60b9      	str	r1, [r7, #8]
 8001ea2:	607a      	str	r2, [r7, #4]
 8001ea4:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001eac:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001eae:	7dfb      	ldrb	r3, [r7, #23]
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d003      	beq.n	8001ebc <HAL_CAN_GetRxMessage+0x24>
 8001eb4:	7dfb      	ldrb	r3, [r7, #23]
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	f040 80f3 	bne.w	80020a2 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d10e      	bne.n	8001ee0 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	f003 0303 	and.w	r3, r3, #3
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d116      	bne.n	8001efe <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e0e7      	b.n	80020b0 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	691b      	ldr	r3, [r3, #16]
 8001ee6:	f003 0303 	and.w	r3, r3, #3
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d107      	bne.n	8001efe <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e0d8      	b.n	80020b0 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	331b      	adds	r3, #27
 8001f06:	011b      	lsls	r3, r3, #4
 8001f08:	4413      	add	r3, r2
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0204 	and.w	r2, r3, #4
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d10c      	bne.n	8001f36 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	331b      	adds	r3, #27
 8001f24:	011b      	lsls	r3, r3, #4
 8001f26:	4413      	add	r3, r2
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	0d5b      	lsrs	r3, r3, #21
 8001f2c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	601a      	str	r2, [r3, #0]
 8001f34:	e00b      	b.n	8001f4e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	331b      	adds	r3, #27
 8001f3e:	011b      	lsls	r3, r3, #4
 8001f40:	4413      	add	r3, r2
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	08db      	lsrs	r3, r3, #3
 8001f46:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	331b      	adds	r3, #27
 8001f56:	011b      	lsls	r3, r3, #4
 8001f58:	4413      	add	r3, r2
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 0202 	and.w	r2, r3, #2
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	331b      	adds	r3, #27
 8001f6c:	011b      	lsls	r3, r3, #4
 8001f6e:	4413      	add	r3, r2
 8001f70:	3304      	adds	r3, #4
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 020f 	and.w	r2, r3, #15
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	331b      	adds	r3, #27
 8001f84:	011b      	lsls	r3, r3, #4
 8001f86:	4413      	add	r3, r2
 8001f88:	3304      	adds	r3, #4
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	0a1b      	lsrs	r3, r3, #8
 8001f8e:	b2da      	uxtb	r2, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	331b      	adds	r3, #27
 8001f9c:	011b      	lsls	r3, r3, #4
 8001f9e:	4413      	add	r3, r2
 8001fa0:	3304      	adds	r3, #4
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	0c1b      	lsrs	r3, r3, #16
 8001fa6:	b29a      	uxth	r2, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	011b      	lsls	r3, r3, #4
 8001fb4:	4413      	add	r3, r2
 8001fb6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	b2da      	uxtb	r2, r3
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	011b      	lsls	r3, r3, #4
 8001fca:	4413      	add	r3, r2
 8001fcc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	0a1a      	lsrs	r2, r3, #8
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	b2d2      	uxtb	r2, r2
 8001fda:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	011b      	lsls	r3, r3, #4
 8001fe4:	4413      	add	r3, r2
 8001fe6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	0c1a      	lsrs	r2, r3, #16
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	3302      	adds	r3, #2
 8001ff2:	b2d2      	uxtb	r2, r2
 8001ff4:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	011b      	lsls	r3, r3, #4
 8001ffe:	4413      	add	r3, r2
 8002000:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	0e1a      	lsrs	r2, r3, #24
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	3303      	adds	r3, #3
 800200c:	b2d2      	uxtb	r2, r2
 800200e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	011b      	lsls	r3, r3, #4
 8002018:	4413      	add	r3, r2
 800201a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	3304      	adds	r3, #4
 8002024:	b2d2      	uxtb	r2, r2
 8002026:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	011b      	lsls	r3, r3, #4
 8002030:	4413      	add	r3, r2
 8002032:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	0a1a      	lsrs	r2, r3, #8
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	3305      	adds	r3, #5
 800203e:	b2d2      	uxtb	r2, r2
 8002040:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	011b      	lsls	r3, r3, #4
 800204a:	4413      	add	r3, r2
 800204c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	0c1a      	lsrs	r2, r3, #16
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	3306      	adds	r3, #6
 8002058:	b2d2      	uxtb	r2, r2
 800205a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	011b      	lsls	r3, r3, #4
 8002064:	4413      	add	r3, r2
 8002066:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	0e1a      	lsrs	r2, r3, #24
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	3307      	adds	r3, #7
 8002072:	b2d2      	uxtb	r2, r2
 8002074:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d108      	bne.n	800208e <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	68da      	ldr	r2, [r3, #12]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f042 0220 	orr.w	r2, r2, #32
 800208a:	60da      	str	r2, [r3, #12]
 800208c:	e007      	b.n	800209e <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	691a      	ldr	r2, [r3, #16]
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f042 0220 	orr.w	r2, r2, #32
 800209c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800209e:	2300      	movs	r3, #0
 80020a0:	e006      	b.n	80020b0 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
  }
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	371c      	adds	r7, #28
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80020bc:	b480      	push	{r7}
 80020be:	b085      	sub	sp, #20
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020cc:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80020ce:	7bfb      	ldrb	r3, [r7, #15]
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d002      	beq.n	80020da <HAL_CAN_ActivateNotification+0x1e>
 80020d4:	7bfb      	ldrb	r3, [r7, #15]
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d109      	bne.n	80020ee <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	6959      	ldr	r1, [r3, #20]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	683a      	ldr	r2, [r7, #0]
 80020e6:	430a      	orrs	r2, r1
 80020e8:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80020ea:	2300      	movs	r3, #0
 80020ec:	e006      	b.n	80020fc <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
  }
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3714      	adds	r7, #20
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b08a      	sub	sp, #40	; 0x28
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002110:	2300      	movs	r3, #0
 8002112:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	695b      	ldr	r3, [r3, #20]
 800211a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	68db      	ldr	r3, [r3, #12]
 8002132:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	691b      	ldr	r3, [r3, #16]
 800213a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	699b      	ldr	r3, [r3, #24]
 8002142:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002144:	6a3b      	ldr	r3, [r7, #32]
 8002146:	f003 0301 	and.w	r3, r3, #1
 800214a:	2b00      	cmp	r3, #0
 800214c:	d07c      	beq.n	8002248 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800214e:	69bb      	ldr	r3, [r7, #24]
 8002150:	f003 0301 	and.w	r3, r3, #1
 8002154:	2b00      	cmp	r3, #0
 8002156:	d023      	beq.n	80021a0 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2201      	movs	r2, #1
 800215e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	f003 0302 	and.w	r3, r3, #2
 8002166:	2b00      	cmp	r3, #0
 8002168:	d003      	beq.n	8002172 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f000 f983 	bl	8002476 <HAL_CAN_TxMailbox0CompleteCallback>
 8002170:	e016      	b.n	80021a0 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002172:	69bb      	ldr	r3, [r7, #24]
 8002174:	f003 0304 	and.w	r3, r3, #4
 8002178:	2b00      	cmp	r3, #0
 800217a:	d004      	beq.n	8002186 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800217c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002182:	627b      	str	r3, [r7, #36]	; 0x24
 8002184:	e00c      	b.n	80021a0 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002186:	69bb      	ldr	r3, [r7, #24]
 8002188:	f003 0308 	and.w	r3, r3, #8
 800218c:	2b00      	cmp	r3, #0
 800218e:	d004      	beq.n	800219a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002192:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002196:	627b      	str	r3, [r7, #36]	; 0x24
 8002198:	e002      	b.n	80021a0 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f000 f989 	bl	80024b2 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80021a0:	69bb      	ldr	r3, [r7, #24]
 80021a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d024      	beq.n	80021f4 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021b2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80021b4:	69bb      	ldr	r3, [r7, #24]
 80021b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d003      	beq.n	80021c6 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f000 f963 	bl	800248a <HAL_CAN_TxMailbox1CompleteCallback>
 80021c4:	e016      	b.n	80021f4 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d004      	beq.n	80021da <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80021d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80021d6:	627b      	str	r3, [r7, #36]	; 0x24
 80021d8:	e00c      	b.n	80021f4 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80021da:	69bb      	ldr	r3, [r7, #24]
 80021dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d004      	beq.n	80021ee <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80021e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021ea:	627b      	str	r3, [r7, #36]	; 0x24
 80021ec:	e002      	b.n	80021f4 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f000 f969 	bl	80024c6 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80021f4:	69bb      	ldr	r3, [r7, #24]
 80021f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d024      	beq.n	8002248 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002206:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002208:	69bb      	ldr	r3, [r7, #24]
 800220a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d003      	beq.n	800221a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f000 f943 	bl	800249e <HAL_CAN_TxMailbox2CompleteCallback>
 8002218:	e016      	b.n	8002248 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d004      	beq.n	800222e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002226:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800222a:	627b      	str	r3, [r7, #36]	; 0x24
 800222c:	e00c      	b.n	8002248 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800222e:	69bb      	ldr	r3, [r7, #24]
 8002230:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002234:	2b00      	cmp	r3, #0
 8002236:	d004      	beq.n	8002242 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800223e:	627b      	str	r3, [r7, #36]	; 0x24
 8002240:	e002      	b.n	8002248 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f000 f949 	bl	80024da <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002248:	6a3b      	ldr	r3, [r7, #32]
 800224a:	f003 0308 	and.w	r3, r3, #8
 800224e:	2b00      	cmp	r3, #0
 8002250:	d00c      	beq.n	800226c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	f003 0310 	and.w	r3, r3, #16
 8002258:	2b00      	cmp	r3, #0
 800225a:	d007      	beq.n	800226c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800225c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002262:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	2210      	movs	r2, #16
 800226a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800226c:	6a3b      	ldr	r3, [r7, #32]
 800226e:	f003 0304 	and.w	r3, r3, #4
 8002272:	2b00      	cmp	r3, #0
 8002274:	d00b      	beq.n	800228e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	f003 0308 	and.w	r3, r3, #8
 800227c:	2b00      	cmp	r3, #0
 800227e:	d006      	beq.n	800228e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	2208      	movs	r2, #8
 8002286:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f000 f930 	bl	80024ee <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800228e:	6a3b      	ldr	r3, [r7, #32]
 8002290:	f003 0302 	and.w	r3, r3, #2
 8002294:	2b00      	cmp	r3, #0
 8002296:	d009      	beq.n	80022ac <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	f003 0303 	and.w	r3, r3, #3
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d002      	beq.n	80022ac <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f7fe fd12 	bl	8000cd0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80022ac:	6a3b      	ldr	r3, [r7, #32]
 80022ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d00c      	beq.n	80022d0 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	f003 0310 	and.w	r3, r3, #16
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d007      	beq.n	80022d0 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80022c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022c6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	2210      	movs	r2, #16
 80022ce:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80022d0:	6a3b      	ldr	r3, [r7, #32]
 80022d2:	f003 0320 	and.w	r3, r3, #32
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d00b      	beq.n	80022f2 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	f003 0308 	and.w	r3, r3, #8
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d006      	beq.n	80022f2 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	2208      	movs	r2, #8
 80022ea:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f000 f912 	bl	8002516 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80022f2:	6a3b      	ldr	r3, [r7, #32]
 80022f4:	f003 0310 	and.w	r3, r3, #16
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d009      	beq.n	8002310 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	691b      	ldr	r3, [r3, #16]
 8002302:	f003 0303 	and.w	r3, r3, #3
 8002306:	2b00      	cmp	r3, #0
 8002308:	d002      	beq.n	8002310 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f000 f8f9 	bl	8002502 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002310:	6a3b      	ldr	r3, [r7, #32]
 8002312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d00b      	beq.n	8002332 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	f003 0310 	and.w	r3, r3, #16
 8002320:	2b00      	cmp	r3, #0
 8002322:	d006      	beq.n	8002332 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2210      	movs	r2, #16
 800232a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f000 f8fc 	bl	800252a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002332:	6a3b      	ldr	r3, [r7, #32]
 8002334:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d00b      	beq.n	8002354 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	f003 0308 	and.w	r3, r3, #8
 8002342:	2b00      	cmp	r3, #0
 8002344:	d006      	beq.n	8002354 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	2208      	movs	r2, #8
 800234c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f000 f8f5 	bl	800253e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002354:	6a3b      	ldr	r3, [r7, #32]
 8002356:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d07b      	beq.n	8002456 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	f003 0304 	and.w	r3, r3, #4
 8002364:	2b00      	cmp	r3, #0
 8002366:	d072      	beq.n	800244e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002368:	6a3b      	ldr	r3, [r7, #32]
 800236a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800236e:	2b00      	cmp	r3, #0
 8002370:	d008      	beq.n	8002384 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002378:	2b00      	cmp	r3, #0
 800237a:	d003      	beq.n	8002384 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800237c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237e:	f043 0301 	orr.w	r3, r3, #1
 8002382:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002384:	6a3b      	ldr	r3, [r7, #32]
 8002386:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800238a:	2b00      	cmp	r3, #0
 800238c:	d008      	beq.n	80023a0 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002394:	2b00      	cmp	r3, #0
 8002396:	d003      	beq.n	80023a0 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239a:	f043 0302 	orr.w	r3, r3, #2
 800239e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80023a0:	6a3b      	ldr	r3, [r7, #32]
 80023a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d008      	beq.n	80023bc <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d003      	beq.n	80023bc <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80023b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b6:	f043 0304 	orr.w	r3, r3, #4
 80023ba:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80023bc:	6a3b      	ldr	r3, [r7, #32]
 80023be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d043      	beq.n	800244e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d03e      	beq.n	800244e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80023d6:	2b60      	cmp	r3, #96	; 0x60
 80023d8:	d02b      	beq.n	8002432 <HAL_CAN_IRQHandler+0x32a>
 80023da:	2b60      	cmp	r3, #96	; 0x60
 80023dc:	d82e      	bhi.n	800243c <HAL_CAN_IRQHandler+0x334>
 80023de:	2b50      	cmp	r3, #80	; 0x50
 80023e0:	d022      	beq.n	8002428 <HAL_CAN_IRQHandler+0x320>
 80023e2:	2b50      	cmp	r3, #80	; 0x50
 80023e4:	d82a      	bhi.n	800243c <HAL_CAN_IRQHandler+0x334>
 80023e6:	2b40      	cmp	r3, #64	; 0x40
 80023e8:	d019      	beq.n	800241e <HAL_CAN_IRQHandler+0x316>
 80023ea:	2b40      	cmp	r3, #64	; 0x40
 80023ec:	d826      	bhi.n	800243c <HAL_CAN_IRQHandler+0x334>
 80023ee:	2b30      	cmp	r3, #48	; 0x30
 80023f0:	d010      	beq.n	8002414 <HAL_CAN_IRQHandler+0x30c>
 80023f2:	2b30      	cmp	r3, #48	; 0x30
 80023f4:	d822      	bhi.n	800243c <HAL_CAN_IRQHandler+0x334>
 80023f6:	2b10      	cmp	r3, #16
 80023f8:	d002      	beq.n	8002400 <HAL_CAN_IRQHandler+0x2f8>
 80023fa:	2b20      	cmp	r3, #32
 80023fc:	d005      	beq.n	800240a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80023fe:	e01d      	b.n	800243c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002402:	f043 0308 	orr.w	r3, r3, #8
 8002406:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002408:	e019      	b.n	800243e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800240a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240c:	f043 0310 	orr.w	r3, r3, #16
 8002410:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002412:	e014      	b.n	800243e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002416:	f043 0320 	orr.w	r3, r3, #32
 800241a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800241c:	e00f      	b.n	800243e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800241e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002420:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002424:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002426:	e00a      	b.n	800243e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800242e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002430:	e005      	b.n	800243e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002434:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002438:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800243a:	e000      	b.n	800243e <HAL_CAN_IRQHandler+0x336>
            break;
 800243c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	699a      	ldr	r2, [r3, #24]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800244c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	2204      	movs	r2, #4
 8002454:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002458:	2b00      	cmp	r3, #0
 800245a:	d008      	beq.n	800246e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002462:	431a      	orrs	r2, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f000 f872 	bl	8002552 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800246e:	bf00      	nop
 8002470:	3728      	adds	r7, #40	; 0x28
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}

08002476 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002476:	b480      	push	{r7}
 8002478:	b083      	sub	sp, #12
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800247e:	bf00      	nop
 8002480:	370c      	adds	r7, #12
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr

0800248a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800248a:	b480      	push	{r7}
 800248c:	b083      	sub	sp, #12
 800248e:	af00      	add	r7, sp, #0
 8002490:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002492:	bf00      	nop
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr

0800249e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800249e:	b480      	push	{r7}
 80024a0:	b083      	sub	sp, #12
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80024a6:	bf00      	nop
 80024a8:	370c      	adds	r7, #12
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr

080024b2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80024b2:	b480      	push	{r7}
 80024b4:	b083      	sub	sp, #12
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80024ba:	bf00      	nop
 80024bc:	370c      	adds	r7, #12
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr

080024c6 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80024c6:	b480      	push	{r7}
 80024c8:	b083      	sub	sp, #12
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80024ce:	bf00      	nop
 80024d0:	370c      	adds	r7, #12
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr

080024da <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80024da:	b480      	push	{r7}
 80024dc:	b083      	sub	sp, #12
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80024e2:	bf00      	nop
 80024e4:	370c      	adds	r7, #12
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr

080024ee <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80024ee:	b480      	push	{r7}
 80024f0:	b083      	sub	sp, #12
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80024f6:	bf00      	nop
 80024f8:	370c      	adds	r7, #12
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr

08002502 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002502:	b480      	push	{r7}
 8002504:	b083      	sub	sp, #12
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800250a:	bf00      	nop
 800250c:	370c      	adds	r7, #12
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr

08002516 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002516:	b480      	push	{r7}
 8002518:	b083      	sub	sp, #12
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800251e:	bf00      	nop
 8002520:	370c      	adds	r7, #12
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr

0800252a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800252a:	b480      	push	{r7}
 800252c:	b083      	sub	sp, #12
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002532:	bf00      	nop
 8002534:	370c      	adds	r7, #12
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr

0800253e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800253e:	b480      	push	{r7}
 8002540:	b083      	sub	sp, #12
 8002542:	af00      	add	r7, sp, #0
 8002544:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002546:	bf00      	nop
 8002548:	370c      	adds	r7, #12
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr

08002552 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002552:	b480      	push	{r7}
 8002554:	b083      	sub	sp, #12
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800255a:	bf00      	nop
 800255c:	370c      	adds	r7, #12
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
	...

08002568 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002568:	b480      	push	{r7}
 800256a:	b085      	sub	sp, #20
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	f003 0307 	and.w	r3, r3, #7
 8002576:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002578:	4b0c      	ldr	r3, [pc, #48]	; (80025ac <__NVIC_SetPriorityGrouping+0x44>)
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800257e:	68ba      	ldr	r2, [r7, #8]
 8002580:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002584:	4013      	ands	r3, r2
 8002586:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002590:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002594:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002598:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800259a:	4a04      	ldr	r2, [pc, #16]	; (80025ac <__NVIC_SetPriorityGrouping+0x44>)
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	60d3      	str	r3, [r2, #12]
}
 80025a0:	bf00      	nop
 80025a2:	3714      	adds	r7, #20
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr
 80025ac:	e000ed00 	.word	0xe000ed00

080025b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025b4:	4b04      	ldr	r3, [pc, #16]	; (80025c8 <__NVIC_GetPriorityGrouping+0x18>)
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	0a1b      	lsrs	r3, r3, #8
 80025ba:	f003 0307 	and.w	r3, r3, #7
}
 80025be:	4618      	mov	r0, r3
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr
 80025c8:	e000ed00 	.word	0xe000ed00

080025cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	4603      	mov	r3, r0
 80025d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	db0b      	blt.n	80025f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025de:	79fb      	ldrb	r3, [r7, #7]
 80025e0:	f003 021f 	and.w	r2, r3, #31
 80025e4:	4907      	ldr	r1, [pc, #28]	; (8002604 <__NVIC_EnableIRQ+0x38>)
 80025e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ea:	095b      	lsrs	r3, r3, #5
 80025ec:	2001      	movs	r0, #1
 80025ee:	fa00 f202 	lsl.w	r2, r0, r2
 80025f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025f6:	bf00      	nop
 80025f8:	370c      	adds	r7, #12
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop
 8002604:	e000e100 	.word	0xe000e100

08002608 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	4603      	mov	r3, r0
 8002610:	6039      	str	r1, [r7, #0]
 8002612:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002614:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002618:	2b00      	cmp	r3, #0
 800261a:	db0a      	blt.n	8002632 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	b2da      	uxtb	r2, r3
 8002620:	490c      	ldr	r1, [pc, #48]	; (8002654 <__NVIC_SetPriority+0x4c>)
 8002622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002626:	0112      	lsls	r2, r2, #4
 8002628:	b2d2      	uxtb	r2, r2
 800262a:	440b      	add	r3, r1
 800262c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002630:	e00a      	b.n	8002648 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	b2da      	uxtb	r2, r3
 8002636:	4908      	ldr	r1, [pc, #32]	; (8002658 <__NVIC_SetPriority+0x50>)
 8002638:	79fb      	ldrb	r3, [r7, #7]
 800263a:	f003 030f 	and.w	r3, r3, #15
 800263e:	3b04      	subs	r3, #4
 8002640:	0112      	lsls	r2, r2, #4
 8002642:	b2d2      	uxtb	r2, r2
 8002644:	440b      	add	r3, r1
 8002646:	761a      	strb	r2, [r3, #24]
}
 8002648:	bf00      	nop
 800264a:	370c      	adds	r7, #12
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr
 8002654:	e000e100 	.word	0xe000e100
 8002658:	e000ed00 	.word	0xe000ed00

0800265c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800265c:	b480      	push	{r7}
 800265e:	b089      	sub	sp, #36	; 0x24
 8002660:	af00      	add	r7, sp, #0
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	60b9      	str	r1, [r7, #8]
 8002666:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f003 0307 	and.w	r3, r3, #7
 800266e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	f1c3 0307 	rsb	r3, r3, #7
 8002676:	2b04      	cmp	r3, #4
 8002678:	bf28      	it	cs
 800267a:	2304      	movcs	r3, #4
 800267c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	3304      	adds	r3, #4
 8002682:	2b06      	cmp	r3, #6
 8002684:	d902      	bls.n	800268c <NVIC_EncodePriority+0x30>
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	3b03      	subs	r3, #3
 800268a:	e000      	b.n	800268e <NVIC_EncodePriority+0x32>
 800268c:	2300      	movs	r3, #0
 800268e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002690:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	fa02 f303 	lsl.w	r3, r2, r3
 800269a:	43da      	mvns	r2, r3
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	401a      	ands	r2, r3
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	fa01 f303 	lsl.w	r3, r1, r3
 80026ae:	43d9      	mvns	r1, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026b4:	4313      	orrs	r3, r2
         );
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3724      	adds	r7, #36	; 0x24
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
	...

080026c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	3b01      	subs	r3, #1
 80026d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026d4:	d301      	bcc.n	80026da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026d6:	2301      	movs	r3, #1
 80026d8:	e00f      	b.n	80026fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026da:	4a0a      	ldr	r2, [pc, #40]	; (8002704 <SysTick_Config+0x40>)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	3b01      	subs	r3, #1
 80026e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026e2:	210f      	movs	r1, #15
 80026e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80026e8:	f7ff ff8e 	bl	8002608 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026ec:	4b05      	ldr	r3, [pc, #20]	; (8002704 <SysTick_Config+0x40>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026f2:	4b04      	ldr	r3, [pc, #16]	; (8002704 <SysTick_Config+0x40>)
 80026f4:	2207      	movs	r2, #7
 80026f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026f8:	2300      	movs	r3, #0
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3708      	adds	r7, #8
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	e000e010 	.word	0xe000e010

08002708 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f7ff ff29 	bl	8002568 <__NVIC_SetPriorityGrouping>
}
 8002716:	bf00      	nop
 8002718:	3708      	adds	r7, #8
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}

0800271e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800271e:	b580      	push	{r7, lr}
 8002720:	b086      	sub	sp, #24
 8002722:	af00      	add	r7, sp, #0
 8002724:	4603      	mov	r3, r0
 8002726:	60b9      	str	r1, [r7, #8]
 8002728:	607a      	str	r2, [r7, #4]
 800272a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800272c:	2300      	movs	r3, #0
 800272e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002730:	f7ff ff3e 	bl	80025b0 <__NVIC_GetPriorityGrouping>
 8002734:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	68b9      	ldr	r1, [r7, #8]
 800273a:	6978      	ldr	r0, [r7, #20]
 800273c:	f7ff ff8e 	bl	800265c <NVIC_EncodePriority>
 8002740:	4602      	mov	r2, r0
 8002742:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002746:	4611      	mov	r1, r2
 8002748:	4618      	mov	r0, r3
 800274a:	f7ff ff5d 	bl	8002608 <__NVIC_SetPriority>
}
 800274e:	bf00      	nop
 8002750:	3718      	adds	r7, #24
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}

08002756 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002756:	b580      	push	{r7, lr}
 8002758:	b082      	sub	sp, #8
 800275a:	af00      	add	r7, sp, #0
 800275c:	4603      	mov	r3, r0
 800275e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002760:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002764:	4618      	mov	r0, r3
 8002766:	f7ff ff31 	bl	80025cc <__NVIC_EnableIRQ>
}
 800276a:	bf00      	nop
 800276c:	3708      	adds	r7, #8
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}

08002772 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002772:	b580      	push	{r7, lr}
 8002774:	b082      	sub	sp, #8
 8002776:	af00      	add	r7, sp, #0
 8002778:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f7ff ffa2 	bl	80026c4 <SysTick_Config>
 8002780:	4603      	mov	r3, r0
}
 8002782:	4618      	mov	r0, r3
 8002784:	3708      	adds	r7, #8
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
	...

0800278c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800278c:	b480      	push	{r7}
 800278e:	b089      	sub	sp, #36	; 0x24
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002796:	2300      	movs	r3, #0
 8002798:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800279a:	2300      	movs	r3, #0
 800279c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800279e:	2300      	movs	r3, #0
 80027a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027a2:	2300      	movs	r3, #0
 80027a4:	61fb      	str	r3, [r7, #28]
 80027a6:	e165      	b.n	8002a74 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80027a8:	2201      	movs	r2, #1
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	fa02 f303 	lsl.w	r3, r2, r3
 80027b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	697a      	ldr	r2, [r7, #20]
 80027b8:	4013      	ands	r3, r2
 80027ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027bc:	693a      	ldr	r2, [r7, #16]
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	429a      	cmp	r2, r3
 80027c2:	f040 8154 	bne.w	8002a6e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	f003 0303 	and.w	r3, r3, #3
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d005      	beq.n	80027de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d130      	bne.n	8002840 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	005b      	lsls	r3, r3, #1
 80027e8:	2203      	movs	r2, #3
 80027ea:	fa02 f303 	lsl.w	r3, r2, r3
 80027ee:	43db      	mvns	r3, r3
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	4013      	ands	r3, r2
 80027f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	68da      	ldr	r2, [r3, #12]
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	005b      	lsls	r3, r3, #1
 80027fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002802:	69ba      	ldr	r2, [r7, #24]
 8002804:	4313      	orrs	r3, r2
 8002806:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	69ba      	ldr	r2, [r7, #24]
 800280c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002814:	2201      	movs	r2, #1
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	fa02 f303 	lsl.w	r3, r2, r3
 800281c:	43db      	mvns	r3, r3
 800281e:	69ba      	ldr	r2, [r7, #24]
 8002820:	4013      	ands	r3, r2
 8002822:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	091b      	lsrs	r3, r3, #4
 800282a:	f003 0201 	and.w	r2, r3, #1
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	fa02 f303 	lsl.w	r3, r2, r3
 8002834:	69ba      	ldr	r2, [r7, #24]
 8002836:	4313      	orrs	r3, r2
 8002838:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	69ba      	ldr	r2, [r7, #24]
 800283e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f003 0303 	and.w	r3, r3, #3
 8002848:	2b03      	cmp	r3, #3
 800284a:	d017      	beq.n	800287c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	005b      	lsls	r3, r3, #1
 8002856:	2203      	movs	r2, #3
 8002858:	fa02 f303 	lsl.w	r3, r2, r3
 800285c:	43db      	mvns	r3, r3
 800285e:	69ba      	ldr	r2, [r7, #24]
 8002860:	4013      	ands	r3, r2
 8002862:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	689a      	ldr	r2, [r3, #8]
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	005b      	lsls	r3, r3, #1
 800286c:	fa02 f303 	lsl.w	r3, r2, r3
 8002870:	69ba      	ldr	r2, [r7, #24]
 8002872:	4313      	orrs	r3, r2
 8002874:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	69ba      	ldr	r2, [r7, #24]
 800287a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f003 0303 	and.w	r3, r3, #3
 8002884:	2b02      	cmp	r3, #2
 8002886:	d123      	bne.n	80028d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	08da      	lsrs	r2, r3, #3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	3208      	adds	r2, #8
 8002890:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002894:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	f003 0307 	and.w	r3, r3, #7
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	220f      	movs	r2, #15
 80028a0:	fa02 f303 	lsl.w	r3, r2, r3
 80028a4:	43db      	mvns	r3, r3
 80028a6:	69ba      	ldr	r2, [r7, #24]
 80028a8:	4013      	ands	r3, r2
 80028aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	691a      	ldr	r2, [r3, #16]
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	f003 0307 	and.w	r3, r3, #7
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	fa02 f303 	lsl.w	r3, r2, r3
 80028bc:	69ba      	ldr	r2, [r7, #24]
 80028be:	4313      	orrs	r3, r2
 80028c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	08da      	lsrs	r2, r3, #3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	3208      	adds	r2, #8
 80028ca:	69b9      	ldr	r1, [r7, #24]
 80028cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	005b      	lsls	r3, r3, #1
 80028da:	2203      	movs	r2, #3
 80028dc:	fa02 f303 	lsl.w	r3, r2, r3
 80028e0:	43db      	mvns	r3, r3
 80028e2:	69ba      	ldr	r2, [r7, #24]
 80028e4:	4013      	ands	r3, r2
 80028e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f003 0203 	and.w	r2, r3, #3
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	005b      	lsls	r3, r3, #1
 80028f4:	fa02 f303 	lsl.w	r3, r2, r3
 80028f8:	69ba      	ldr	r2, [r7, #24]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	69ba      	ldr	r2, [r7, #24]
 8002902:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800290c:	2b00      	cmp	r3, #0
 800290e:	f000 80ae 	beq.w	8002a6e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002912:	2300      	movs	r3, #0
 8002914:	60fb      	str	r3, [r7, #12]
 8002916:	4b5d      	ldr	r3, [pc, #372]	; (8002a8c <HAL_GPIO_Init+0x300>)
 8002918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800291a:	4a5c      	ldr	r2, [pc, #368]	; (8002a8c <HAL_GPIO_Init+0x300>)
 800291c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002920:	6453      	str	r3, [r2, #68]	; 0x44
 8002922:	4b5a      	ldr	r3, [pc, #360]	; (8002a8c <HAL_GPIO_Init+0x300>)
 8002924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002926:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800292a:	60fb      	str	r3, [r7, #12]
 800292c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800292e:	4a58      	ldr	r2, [pc, #352]	; (8002a90 <HAL_GPIO_Init+0x304>)
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	089b      	lsrs	r3, r3, #2
 8002934:	3302      	adds	r3, #2
 8002936:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800293a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	f003 0303 	and.w	r3, r3, #3
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	220f      	movs	r2, #15
 8002946:	fa02 f303 	lsl.w	r3, r2, r3
 800294a:	43db      	mvns	r3, r3
 800294c:	69ba      	ldr	r2, [r7, #24]
 800294e:	4013      	ands	r3, r2
 8002950:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a4f      	ldr	r2, [pc, #316]	; (8002a94 <HAL_GPIO_Init+0x308>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d025      	beq.n	80029a6 <HAL_GPIO_Init+0x21a>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a4e      	ldr	r2, [pc, #312]	; (8002a98 <HAL_GPIO_Init+0x30c>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d01f      	beq.n	80029a2 <HAL_GPIO_Init+0x216>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a4d      	ldr	r2, [pc, #308]	; (8002a9c <HAL_GPIO_Init+0x310>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d019      	beq.n	800299e <HAL_GPIO_Init+0x212>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a4c      	ldr	r2, [pc, #304]	; (8002aa0 <HAL_GPIO_Init+0x314>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d013      	beq.n	800299a <HAL_GPIO_Init+0x20e>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a4b      	ldr	r2, [pc, #300]	; (8002aa4 <HAL_GPIO_Init+0x318>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d00d      	beq.n	8002996 <HAL_GPIO_Init+0x20a>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4a4a      	ldr	r2, [pc, #296]	; (8002aa8 <HAL_GPIO_Init+0x31c>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d007      	beq.n	8002992 <HAL_GPIO_Init+0x206>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4a49      	ldr	r2, [pc, #292]	; (8002aac <HAL_GPIO_Init+0x320>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d101      	bne.n	800298e <HAL_GPIO_Init+0x202>
 800298a:	2306      	movs	r3, #6
 800298c:	e00c      	b.n	80029a8 <HAL_GPIO_Init+0x21c>
 800298e:	2307      	movs	r3, #7
 8002990:	e00a      	b.n	80029a8 <HAL_GPIO_Init+0x21c>
 8002992:	2305      	movs	r3, #5
 8002994:	e008      	b.n	80029a8 <HAL_GPIO_Init+0x21c>
 8002996:	2304      	movs	r3, #4
 8002998:	e006      	b.n	80029a8 <HAL_GPIO_Init+0x21c>
 800299a:	2303      	movs	r3, #3
 800299c:	e004      	b.n	80029a8 <HAL_GPIO_Init+0x21c>
 800299e:	2302      	movs	r3, #2
 80029a0:	e002      	b.n	80029a8 <HAL_GPIO_Init+0x21c>
 80029a2:	2301      	movs	r3, #1
 80029a4:	e000      	b.n	80029a8 <HAL_GPIO_Init+0x21c>
 80029a6:	2300      	movs	r3, #0
 80029a8:	69fa      	ldr	r2, [r7, #28]
 80029aa:	f002 0203 	and.w	r2, r2, #3
 80029ae:	0092      	lsls	r2, r2, #2
 80029b0:	4093      	lsls	r3, r2
 80029b2:	69ba      	ldr	r2, [r7, #24]
 80029b4:	4313      	orrs	r3, r2
 80029b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029b8:	4935      	ldr	r1, [pc, #212]	; (8002a90 <HAL_GPIO_Init+0x304>)
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	089b      	lsrs	r3, r3, #2
 80029be:	3302      	adds	r3, #2
 80029c0:	69ba      	ldr	r2, [r7, #24]
 80029c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029c6:	4b3a      	ldr	r3, [pc, #232]	; (8002ab0 <HAL_GPIO_Init+0x324>)
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	43db      	mvns	r3, r3
 80029d0:	69ba      	ldr	r2, [r7, #24]
 80029d2:	4013      	ands	r3, r2
 80029d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d003      	beq.n	80029ea <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80029e2:	69ba      	ldr	r2, [r7, #24]
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029ea:	4a31      	ldr	r2, [pc, #196]	; (8002ab0 <HAL_GPIO_Init+0x324>)
 80029ec:	69bb      	ldr	r3, [r7, #24]
 80029ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029f0:	4b2f      	ldr	r3, [pc, #188]	; (8002ab0 <HAL_GPIO_Init+0x324>)
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	43db      	mvns	r3, r3
 80029fa:	69ba      	ldr	r2, [r7, #24]
 80029fc:	4013      	ands	r3, r2
 80029fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d003      	beq.n	8002a14 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002a0c:	69ba      	ldr	r2, [r7, #24]
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a14:	4a26      	ldr	r2, [pc, #152]	; (8002ab0 <HAL_GPIO_Init+0x324>)
 8002a16:	69bb      	ldr	r3, [r7, #24]
 8002a18:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a1a:	4b25      	ldr	r3, [pc, #148]	; (8002ab0 <HAL_GPIO_Init+0x324>)
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	43db      	mvns	r3, r3
 8002a24:	69ba      	ldr	r2, [r7, #24]
 8002a26:	4013      	ands	r3, r2
 8002a28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d003      	beq.n	8002a3e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002a36:	69ba      	ldr	r2, [r7, #24]
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a3e:	4a1c      	ldr	r2, [pc, #112]	; (8002ab0 <HAL_GPIO_Init+0x324>)
 8002a40:	69bb      	ldr	r3, [r7, #24]
 8002a42:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a44:	4b1a      	ldr	r3, [pc, #104]	; (8002ab0 <HAL_GPIO_Init+0x324>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	43db      	mvns	r3, r3
 8002a4e:	69ba      	ldr	r2, [r7, #24]
 8002a50:	4013      	ands	r3, r2
 8002a52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d003      	beq.n	8002a68 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a68:	4a11      	ldr	r2, [pc, #68]	; (8002ab0 <HAL_GPIO_Init+0x324>)
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	3301      	adds	r3, #1
 8002a72:	61fb      	str	r3, [r7, #28]
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	2b0f      	cmp	r3, #15
 8002a78:	f67f ae96 	bls.w	80027a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a7c:	bf00      	nop
 8002a7e:	bf00      	nop
 8002a80:	3724      	adds	r7, #36	; 0x24
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop
 8002a8c:	40023800 	.word	0x40023800
 8002a90:	40013800 	.word	0x40013800
 8002a94:	40020000 	.word	0x40020000
 8002a98:	40020400 	.word	0x40020400
 8002a9c:	40020800 	.word	0x40020800
 8002aa0:	40020c00 	.word	0x40020c00
 8002aa4:	40021000 	.word	0x40021000
 8002aa8:	40021400 	.word	0x40021400
 8002aac:	40021800 	.word	0x40021800
 8002ab0:	40013c00 	.word	0x40013c00

08002ab4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	460b      	mov	r3, r1
 8002abe:	807b      	strh	r3, [r7, #2]
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ac4:	787b      	ldrb	r3, [r7, #1]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d003      	beq.n	8002ad2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002aca:	887a      	ldrh	r2, [r7, #2]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ad0:	e003      	b.n	8002ada <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ad2:	887b      	ldrh	r3, [r7, #2]
 8002ad4:	041a      	lsls	r2, r3, #16
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	619a      	str	r2, [r3, #24]
}
 8002ada:	bf00      	nop
 8002adc:	370c      	adds	r7, #12
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr
	...

08002ae8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002aee:	2300      	movs	r3, #0
 8002af0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002af2:	2300      	movs	r3, #0
 8002af4:	603b      	str	r3, [r7, #0]
 8002af6:	4b20      	ldr	r3, [pc, #128]	; (8002b78 <HAL_PWREx_EnableOverDrive+0x90>)
 8002af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afa:	4a1f      	ldr	r2, [pc, #124]	; (8002b78 <HAL_PWREx_EnableOverDrive+0x90>)
 8002afc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b00:	6413      	str	r3, [r2, #64]	; 0x40
 8002b02:	4b1d      	ldr	r3, [pc, #116]	; (8002b78 <HAL_PWREx_EnableOverDrive+0x90>)
 8002b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b0a:	603b      	str	r3, [r7, #0]
 8002b0c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002b0e:	4b1b      	ldr	r3, [pc, #108]	; (8002b7c <HAL_PWREx_EnableOverDrive+0x94>)
 8002b10:	2201      	movs	r2, #1
 8002b12:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b14:	f7fe ff70 	bl	80019f8 <HAL_GetTick>
 8002b18:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002b1a:	e009      	b.n	8002b30 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002b1c:	f7fe ff6c 	bl	80019f8 <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b2a:	d901      	bls.n	8002b30 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	e01f      	b.n	8002b70 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002b30:	4b13      	ldr	r3, [pc, #76]	; (8002b80 <HAL_PWREx_EnableOverDrive+0x98>)
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b3c:	d1ee      	bne.n	8002b1c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002b3e:	4b11      	ldr	r3, [pc, #68]	; (8002b84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b40:	2201      	movs	r2, #1
 8002b42:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b44:	f7fe ff58 	bl	80019f8 <HAL_GetTick>
 8002b48:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002b4a:	e009      	b.n	8002b60 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002b4c:	f7fe ff54 	bl	80019f8 <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b5a:	d901      	bls.n	8002b60 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	e007      	b.n	8002b70 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002b60:	4b07      	ldr	r3, [pc, #28]	; (8002b80 <HAL_PWREx_EnableOverDrive+0x98>)
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b68:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b6c:	d1ee      	bne.n	8002b4c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002b6e:	2300      	movs	r3, #0
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3708      	adds	r7, #8
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	40023800 	.word	0x40023800
 8002b7c:	420e0040 	.word	0x420e0040
 8002b80:	40007000 	.word	0x40007000
 8002b84:	420e0044 	.word	0x420e0044

08002b88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b084      	sub	sp, #16
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d101      	bne.n	8002b9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e0cc      	b.n	8002d36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b9c:	4b68      	ldr	r3, [pc, #416]	; (8002d40 <HAL_RCC_ClockConfig+0x1b8>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 030f 	and.w	r3, r3, #15
 8002ba4:	683a      	ldr	r2, [r7, #0]
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d90c      	bls.n	8002bc4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002baa:	4b65      	ldr	r3, [pc, #404]	; (8002d40 <HAL_RCC_ClockConfig+0x1b8>)
 8002bac:	683a      	ldr	r2, [r7, #0]
 8002bae:	b2d2      	uxtb	r2, r2
 8002bb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bb2:	4b63      	ldr	r3, [pc, #396]	; (8002d40 <HAL_RCC_ClockConfig+0x1b8>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 030f 	and.w	r3, r3, #15
 8002bba:	683a      	ldr	r2, [r7, #0]
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d001      	beq.n	8002bc4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e0b8      	b.n	8002d36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0302 	and.w	r3, r3, #2
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d020      	beq.n	8002c12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0304 	and.w	r3, r3, #4
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d005      	beq.n	8002be8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bdc:	4b59      	ldr	r3, [pc, #356]	; (8002d44 <HAL_RCC_ClockConfig+0x1bc>)
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	4a58      	ldr	r2, [pc, #352]	; (8002d44 <HAL_RCC_ClockConfig+0x1bc>)
 8002be2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002be6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0308 	and.w	r3, r3, #8
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d005      	beq.n	8002c00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bf4:	4b53      	ldr	r3, [pc, #332]	; (8002d44 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	4a52      	ldr	r2, [pc, #328]	; (8002d44 <HAL_RCC_ClockConfig+0x1bc>)
 8002bfa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002bfe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c00:	4b50      	ldr	r3, [pc, #320]	; (8002d44 <HAL_RCC_ClockConfig+0x1bc>)
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	494d      	ldr	r1, [pc, #308]	; (8002d44 <HAL_RCC_ClockConfig+0x1bc>)
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0301 	and.w	r3, r3, #1
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d044      	beq.n	8002ca8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d107      	bne.n	8002c36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c26:	4b47      	ldr	r3, [pc, #284]	; (8002d44 <HAL_RCC_ClockConfig+0x1bc>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d119      	bne.n	8002c66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e07f      	b.n	8002d36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d003      	beq.n	8002c46 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c42:	2b03      	cmp	r3, #3
 8002c44:	d107      	bne.n	8002c56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c46:	4b3f      	ldr	r3, [pc, #252]	; (8002d44 <HAL_RCC_ClockConfig+0x1bc>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d109      	bne.n	8002c66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e06f      	b.n	8002d36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c56:	4b3b      	ldr	r3, [pc, #236]	; (8002d44 <HAL_RCC_ClockConfig+0x1bc>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0302 	and.w	r3, r3, #2
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d101      	bne.n	8002c66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e067      	b.n	8002d36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c66:	4b37      	ldr	r3, [pc, #220]	; (8002d44 <HAL_RCC_ClockConfig+0x1bc>)
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f023 0203 	bic.w	r2, r3, #3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	4934      	ldr	r1, [pc, #208]	; (8002d44 <HAL_RCC_ClockConfig+0x1bc>)
 8002c74:	4313      	orrs	r3, r2
 8002c76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c78:	f7fe febe 	bl	80019f8 <HAL_GetTick>
 8002c7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c7e:	e00a      	b.n	8002c96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c80:	f7fe feba 	bl	80019f8 <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d901      	bls.n	8002c96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e04f      	b.n	8002d36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c96:	4b2b      	ldr	r3, [pc, #172]	; (8002d44 <HAL_RCC_ClockConfig+0x1bc>)
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	f003 020c 	and.w	r2, r3, #12
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d1eb      	bne.n	8002c80 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ca8:	4b25      	ldr	r3, [pc, #148]	; (8002d40 <HAL_RCC_ClockConfig+0x1b8>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 030f 	and.w	r3, r3, #15
 8002cb0:	683a      	ldr	r2, [r7, #0]
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d20c      	bcs.n	8002cd0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cb6:	4b22      	ldr	r3, [pc, #136]	; (8002d40 <HAL_RCC_ClockConfig+0x1b8>)
 8002cb8:	683a      	ldr	r2, [r7, #0]
 8002cba:	b2d2      	uxtb	r2, r2
 8002cbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cbe:	4b20      	ldr	r3, [pc, #128]	; (8002d40 <HAL_RCC_ClockConfig+0x1b8>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 030f 	and.w	r3, r3, #15
 8002cc6:	683a      	ldr	r2, [r7, #0]
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d001      	beq.n	8002cd0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e032      	b.n	8002d36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0304 	and.w	r3, r3, #4
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d008      	beq.n	8002cee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cdc:	4b19      	ldr	r3, [pc, #100]	; (8002d44 <HAL_RCC_ClockConfig+0x1bc>)
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	4916      	ldr	r1, [pc, #88]	; (8002d44 <HAL_RCC_ClockConfig+0x1bc>)
 8002cea:	4313      	orrs	r3, r2
 8002cec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0308 	and.w	r3, r3, #8
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d009      	beq.n	8002d0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cfa:	4b12      	ldr	r3, [pc, #72]	; (8002d44 <HAL_RCC_ClockConfig+0x1bc>)
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	691b      	ldr	r3, [r3, #16]
 8002d06:	00db      	lsls	r3, r3, #3
 8002d08:	490e      	ldr	r1, [pc, #56]	; (8002d44 <HAL_RCC_ClockConfig+0x1bc>)
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d0e:	f000 f855 	bl	8002dbc <HAL_RCC_GetSysClockFreq>
 8002d12:	4602      	mov	r2, r0
 8002d14:	4b0b      	ldr	r3, [pc, #44]	; (8002d44 <HAL_RCC_ClockConfig+0x1bc>)
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	091b      	lsrs	r3, r3, #4
 8002d1a:	f003 030f 	and.w	r3, r3, #15
 8002d1e:	490a      	ldr	r1, [pc, #40]	; (8002d48 <HAL_RCC_ClockConfig+0x1c0>)
 8002d20:	5ccb      	ldrb	r3, [r1, r3]
 8002d22:	fa22 f303 	lsr.w	r3, r2, r3
 8002d26:	4a09      	ldr	r2, [pc, #36]	; (8002d4c <HAL_RCC_ClockConfig+0x1c4>)
 8002d28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d2a:	4b09      	ldr	r3, [pc, #36]	; (8002d50 <HAL_RCC_ClockConfig+0x1c8>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7fe fe1e 	bl	8001970 <HAL_InitTick>

  return HAL_OK;
 8002d34:	2300      	movs	r3, #0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3710      	adds	r7, #16
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	40023c00 	.word	0x40023c00
 8002d44:	40023800 	.word	0x40023800
 8002d48:	080056d8 	.word	0x080056d8
 8002d4c:	20000000 	.word	0x20000000
 8002d50:	20000004 	.word	0x20000004

08002d54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d54:	b480      	push	{r7}
 8002d56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d58:	4b03      	ldr	r3, [pc, #12]	; (8002d68 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr
 8002d66:	bf00      	nop
 8002d68:	20000000 	.word	0x20000000

08002d6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002d70:	f7ff fff0 	bl	8002d54 <HAL_RCC_GetHCLKFreq>
 8002d74:	4602      	mov	r2, r0
 8002d76:	4b05      	ldr	r3, [pc, #20]	; (8002d8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	0a9b      	lsrs	r3, r3, #10
 8002d7c:	f003 0307 	and.w	r3, r3, #7
 8002d80:	4903      	ldr	r1, [pc, #12]	; (8002d90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d82:	5ccb      	ldrb	r3, [r1, r3]
 8002d84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	40023800 	.word	0x40023800
 8002d90:	080056e8 	.word	0x080056e8

08002d94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002d98:	f7ff ffdc 	bl	8002d54 <HAL_RCC_GetHCLKFreq>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	4b05      	ldr	r3, [pc, #20]	; (8002db4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	0b5b      	lsrs	r3, r3, #13
 8002da4:	f003 0307 	and.w	r3, r3, #7
 8002da8:	4903      	ldr	r1, [pc, #12]	; (8002db8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002daa:	5ccb      	ldrb	r3, [r1, r3]
 8002dac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	40023800 	.word	0x40023800
 8002db8:	080056e8 	.word	0x080056e8

08002dbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002dc0:	b0ae      	sub	sp, #184	; 0xb8
 8002dc2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002de2:	4bcb      	ldr	r3, [pc, #812]	; (8003110 <HAL_RCC_GetSysClockFreq+0x354>)
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	f003 030c 	and.w	r3, r3, #12
 8002dea:	2b0c      	cmp	r3, #12
 8002dec:	f200 8206 	bhi.w	80031fc <HAL_RCC_GetSysClockFreq+0x440>
 8002df0:	a201      	add	r2, pc, #4	; (adr r2, 8002df8 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002df6:	bf00      	nop
 8002df8:	08002e2d 	.word	0x08002e2d
 8002dfc:	080031fd 	.word	0x080031fd
 8002e00:	080031fd 	.word	0x080031fd
 8002e04:	080031fd 	.word	0x080031fd
 8002e08:	08002e35 	.word	0x08002e35
 8002e0c:	080031fd 	.word	0x080031fd
 8002e10:	080031fd 	.word	0x080031fd
 8002e14:	080031fd 	.word	0x080031fd
 8002e18:	08002e3d 	.word	0x08002e3d
 8002e1c:	080031fd 	.word	0x080031fd
 8002e20:	080031fd 	.word	0x080031fd
 8002e24:	080031fd 	.word	0x080031fd
 8002e28:	0800302d 	.word	0x0800302d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e2c:	4bb9      	ldr	r3, [pc, #740]	; (8003114 <HAL_RCC_GetSysClockFreq+0x358>)
 8002e2e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002e32:	e1e7      	b.n	8003204 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e34:	4bb8      	ldr	r3, [pc, #736]	; (8003118 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002e36:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002e3a:	e1e3      	b.n	8003204 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e3c:	4bb4      	ldr	r3, [pc, #720]	; (8003110 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e44:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e48:	4bb1      	ldr	r3, [pc, #708]	; (8003110 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d071      	beq.n	8002f38 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e54:	4bae      	ldr	r3, [pc, #696]	; (8003110 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	099b      	lsrs	r3, r3, #6
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002e60:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002e64:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002e68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e6c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002e70:	2300      	movs	r3, #0
 8002e72:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002e76:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002e7a:	4622      	mov	r2, r4
 8002e7c:	462b      	mov	r3, r5
 8002e7e:	f04f 0000 	mov.w	r0, #0
 8002e82:	f04f 0100 	mov.w	r1, #0
 8002e86:	0159      	lsls	r1, r3, #5
 8002e88:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e8c:	0150      	lsls	r0, r2, #5
 8002e8e:	4602      	mov	r2, r0
 8002e90:	460b      	mov	r3, r1
 8002e92:	4621      	mov	r1, r4
 8002e94:	1a51      	subs	r1, r2, r1
 8002e96:	6439      	str	r1, [r7, #64]	; 0x40
 8002e98:	4629      	mov	r1, r5
 8002e9a:	eb63 0301 	sbc.w	r3, r3, r1
 8002e9e:	647b      	str	r3, [r7, #68]	; 0x44
 8002ea0:	f04f 0200 	mov.w	r2, #0
 8002ea4:	f04f 0300 	mov.w	r3, #0
 8002ea8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002eac:	4649      	mov	r1, r9
 8002eae:	018b      	lsls	r3, r1, #6
 8002eb0:	4641      	mov	r1, r8
 8002eb2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002eb6:	4641      	mov	r1, r8
 8002eb8:	018a      	lsls	r2, r1, #6
 8002eba:	4641      	mov	r1, r8
 8002ebc:	1a51      	subs	r1, r2, r1
 8002ebe:	63b9      	str	r1, [r7, #56]	; 0x38
 8002ec0:	4649      	mov	r1, r9
 8002ec2:	eb63 0301 	sbc.w	r3, r3, r1
 8002ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ec8:	f04f 0200 	mov.w	r2, #0
 8002ecc:	f04f 0300 	mov.w	r3, #0
 8002ed0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002ed4:	4649      	mov	r1, r9
 8002ed6:	00cb      	lsls	r3, r1, #3
 8002ed8:	4641      	mov	r1, r8
 8002eda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ede:	4641      	mov	r1, r8
 8002ee0:	00ca      	lsls	r2, r1, #3
 8002ee2:	4610      	mov	r0, r2
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	4622      	mov	r2, r4
 8002eea:	189b      	adds	r3, r3, r2
 8002eec:	633b      	str	r3, [r7, #48]	; 0x30
 8002eee:	462b      	mov	r3, r5
 8002ef0:	460a      	mov	r2, r1
 8002ef2:	eb42 0303 	adc.w	r3, r2, r3
 8002ef6:	637b      	str	r3, [r7, #52]	; 0x34
 8002ef8:	f04f 0200 	mov.w	r2, #0
 8002efc:	f04f 0300 	mov.w	r3, #0
 8002f00:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002f04:	4629      	mov	r1, r5
 8002f06:	024b      	lsls	r3, r1, #9
 8002f08:	4621      	mov	r1, r4
 8002f0a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f0e:	4621      	mov	r1, r4
 8002f10:	024a      	lsls	r2, r1, #9
 8002f12:	4610      	mov	r0, r2
 8002f14:	4619      	mov	r1, r3
 8002f16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002f20:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002f24:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002f28:	f7fd f96c 	bl	8000204 <__aeabi_uldivmod>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	460b      	mov	r3, r1
 8002f30:	4613      	mov	r3, r2
 8002f32:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f36:	e067      	b.n	8003008 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f38:	4b75      	ldr	r3, [pc, #468]	; (8003110 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	099b      	lsrs	r3, r3, #6
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002f44:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002f48:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002f4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f50:	67bb      	str	r3, [r7, #120]	; 0x78
 8002f52:	2300      	movs	r3, #0
 8002f54:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002f56:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002f5a:	4622      	mov	r2, r4
 8002f5c:	462b      	mov	r3, r5
 8002f5e:	f04f 0000 	mov.w	r0, #0
 8002f62:	f04f 0100 	mov.w	r1, #0
 8002f66:	0159      	lsls	r1, r3, #5
 8002f68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f6c:	0150      	lsls	r0, r2, #5
 8002f6e:	4602      	mov	r2, r0
 8002f70:	460b      	mov	r3, r1
 8002f72:	4621      	mov	r1, r4
 8002f74:	1a51      	subs	r1, r2, r1
 8002f76:	62b9      	str	r1, [r7, #40]	; 0x28
 8002f78:	4629      	mov	r1, r5
 8002f7a:	eb63 0301 	sbc.w	r3, r3, r1
 8002f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f80:	f04f 0200 	mov.w	r2, #0
 8002f84:	f04f 0300 	mov.w	r3, #0
 8002f88:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002f8c:	4649      	mov	r1, r9
 8002f8e:	018b      	lsls	r3, r1, #6
 8002f90:	4641      	mov	r1, r8
 8002f92:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f96:	4641      	mov	r1, r8
 8002f98:	018a      	lsls	r2, r1, #6
 8002f9a:	4641      	mov	r1, r8
 8002f9c:	ebb2 0a01 	subs.w	sl, r2, r1
 8002fa0:	4649      	mov	r1, r9
 8002fa2:	eb63 0b01 	sbc.w	fp, r3, r1
 8002fa6:	f04f 0200 	mov.w	r2, #0
 8002faa:	f04f 0300 	mov.w	r3, #0
 8002fae:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002fb2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002fb6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002fba:	4692      	mov	sl, r2
 8002fbc:	469b      	mov	fp, r3
 8002fbe:	4623      	mov	r3, r4
 8002fc0:	eb1a 0303 	adds.w	r3, sl, r3
 8002fc4:	623b      	str	r3, [r7, #32]
 8002fc6:	462b      	mov	r3, r5
 8002fc8:	eb4b 0303 	adc.w	r3, fp, r3
 8002fcc:	627b      	str	r3, [r7, #36]	; 0x24
 8002fce:	f04f 0200 	mov.w	r2, #0
 8002fd2:	f04f 0300 	mov.w	r3, #0
 8002fd6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002fda:	4629      	mov	r1, r5
 8002fdc:	028b      	lsls	r3, r1, #10
 8002fde:	4621      	mov	r1, r4
 8002fe0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002fe4:	4621      	mov	r1, r4
 8002fe6:	028a      	lsls	r2, r1, #10
 8002fe8:	4610      	mov	r0, r2
 8002fea:	4619      	mov	r1, r3
 8002fec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	673b      	str	r3, [r7, #112]	; 0x70
 8002ff4:	677a      	str	r2, [r7, #116]	; 0x74
 8002ff6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002ffa:	f7fd f903 	bl	8000204 <__aeabi_uldivmod>
 8002ffe:	4602      	mov	r2, r0
 8003000:	460b      	mov	r3, r1
 8003002:	4613      	mov	r3, r2
 8003004:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003008:	4b41      	ldr	r3, [pc, #260]	; (8003110 <HAL_RCC_GetSysClockFreq+0x354>)
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	0c1b      	lsrs	r3, r3, #16
 800300e:	f003 0303 	and.w	r3, r3, #3
 8003012:	3301      	adds	r3, #1
 8003014:	005b      	lsls	r3, r3, #1
 8003016:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800301a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800301e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003022:	fbb2 f3f3 	udiv	r3, r2, r3
 8003026:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800302a:	e0eb      	b.n	8003204 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800302c:	4b38      	ldr	r3, [pc, #224]	; (8003110 <HAL_RCC_GetSysClockFreq+0x354>)
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003034:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003038:	4b35      	ldr	r3, [pc, #212]	; (8003110 <HAL_RCC_GetSysClockFreq+0x354>)
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d06b      	beq.n	800311c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003044:	4b32      	ldr	r3, [pc, #200]	; (8003110 <HAL_RCC_GetSysClockFreq+0x354>)
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	099b      	lsrs	r3, r3, #6
 800304a:	2200      	movs	r2, #0
 800304c:	66bb      	str	r3, [r7, #104]	; 0x68
 800304e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003050:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003052:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003056:	663b      	str	r3, [r7, #96]	; 0x60
 8003058:	2300      	movs	r3, #0
 800305a:	667b      	str	r3, [r7, #100]	; 0x64
 800305c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003060:	4622      	mov	r2, r4
 8003062:	462b      	mov	r3, r5
 8003064:	f04f 0000 	mov.w	r0, #0
 8003068:	f04f 0100 	mov.w	r1, #0
 800306c:	0159      	lsls	r1, r3, #5
 800306e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003072:	0150      	lsls	r0, r2, #5
 8003074:	4602      	mov	r2, r0
 8003076:	460b      	mov	r3, r1
 8003078:	4621      	mov	r1, r4
 800307a:	1a51      	subs	r1, r2, r1
 800307c:	61b9      	str	r1, [r7, #24]
 800307e:	4629      	mov	r1, r5
 8003080:	eb63 0301 	sbc.w	r3, r3, r1
 8003084:	61fb      	str	r3, [r7, #28]
 8003086:	f04f 0200 	mov.w	r2, #0
 800308a:	f04f 0300 	mov.w	r3, #0
 800308e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003092:	4659      	mov	r1, fp
 8003094:	018b      	lsls	r3, r1, #6
 8003096:	4651      	mov	r1, sl
 8003098:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800309c:	4651      	mov	r1, sl
 800309e:	018a      	lsls	r2, r1, #6
 80030a0:	4651      	mov	r1, sl
 80030a2:	ebb2 0801 	subs.w	r8, r2, r1
 80030a6:	4659      	mov	r1, fp
 80030a8:	eb63 0901 	sbc.w	r9, r3, r1
 80030ac:	f04f 0200 	mov.w	r2, #0
 80030b0:	f04f 0300 	mov.w	r3, #0
 80030b4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80030b8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80030bc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80030c0:	4690      	mov	r8, r2
 80030c2:	4699      	mov	r9, r3
 80030c4:	4623      	mov	r3, r4
 80030c6:	eb18 0303 	adds.w	r3, r8, r3
 80030ca:	613b      	str	r3, [r7, #16]
 80030cc:	462b      	mov	r3, r5
 80030ce:	eb49 0303 	adc.w	r3, r9, r3
 80030d2:	617b      	str	r3, [r7, #20]
 80030d4:	f04f 0200 	mov.w	r2, #0
 80030d8:	f04f 0300 	mov.w	r3, #0
 80030dc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80030e0:	4629      	mov	r1, r5
 80030e2:	024b      	lsls	r3, r1, #9
 80030e4:	4621      	mov	r1, r4
 80030e6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80030ea:	4621      	mov	r1, r4
 80030ec:	024a      	lsls	r2, r1, #9
 80030ee:	4610      	mov	r0, r2
 80030f0:	4619      	mov	r1, r3
 80030f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80030f6:	2200      	movs	r2, #0
 80030f8:	65bb      	str	r3, [r7, #88]	; 0x58
 80030fa:	65fa      	str	r2, [r7, #92]	; 0x5c
 80030fc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003100:	f7fd f880 	bl	8000204 <__aeabi_uldivmod>
 8003104:	4602      	mov	r2, r0
 8003106:	460b      	mov	r3, r1
 8003108:	4613      	mov	r3, r2
 800310a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800310e:	e065      	b.n	80031dc <HAL_RCC_GetSysClockFreq+0x420>
 8003110:	40023800 	.word	0x40023800
 8003114:	00f42400 	.word	0x00f42400
 8003118:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800311c:	4b3d      	ldr	r3, [pc, #244]	; (8003214 <HAL_RCC_GetSysClockFreq+0x458>)
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	099b      	lsrs	r3, r3, #6
 8003122:	2200      	movs	r2, #0
 8003124:	4618      	mov	r0, r3
 8003126:	4611      	mov	r1, r2
 8003128:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800312c:	653b      	str	r3, [r7, #80]	; 0x50
 800312e:	2300      	movs	r3, #0
 8003130:	657b      	str	r3, [r7, #84]	; 0x54
 8003132:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003136:	4642      	mov	r2, r8
 8003138:	464b      	mov	r3, r9
 800313a:	f04f 0000 	mov.w	r0, #0
 800313e:	f04f 0100 	mov.w	r1, #0
 8003142:	0159      	lsls	r1, r3, #5
 8003144:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003148:	0150      	lsls	r0, r2, #5
 800314a:	4602      	mov	r2, r0
 800314c:	460b      	mov	r3, r1
 800314e:	4641      	mov	r1, r8
 8003150:	1a51      	subs	r1, r2, r1
 8003152:	60b9      	str	r1, [r7, #8]
 8003154:	4649      	mov	r1, r9
 8003156:	eb63 0301 	sbc.w	r3, r3, r1
 800315a:	60fb      	str	r3, [r7, #12]
 800315c:	f04f 0200 	mov.w	r2, #0
 8003160:	f04f 0300 	mov.w	r3, #0
 8003164:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003168:	4659      	mov	r1, fp
 800316a:	018b      	lsls	r3, r1, #6
 800316c:	4651      	mov	r1, sl
 800316e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003172:	4651      	mov	r1, sl
 8003174:	018a      	lsls	r2, r1, #6
 8003176:	4651      	mov	r1, sl
 8003178:	1a54      	subs	r4, r2, r1
 800317a:	4659      	mov	r1, fp
 800317c:	eb63 0501 	sbc.w	r5, r3, r1
 8003180:	f04f 0200 	mov.w	r2, #0
 8003184:	f04f 0300 	mov.w	r3, #0
 8003188:	00eb      	lsls	r3, r5, #3
 800318a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800318e:	00e2      	lsls	r2, r4, #3
 8003190:	4614      	mov	r4, r2
 8003192:	461d      	mov	r5, r3
 8003194:	4643      	mov	r3, r8
 8003196:	18e3      	adds	r3, r4, r3
 8003198:	603b      	str	r3, [r7, #0]
 800319a:	464b      	mov	r3, r9
 800319c:	eb45 0303 	adc.w	r3, r5, r3
 80031a0:	607b      	str	r3, [r7, #4]
 80031a2:	f04f 0200 	mov.w	r2, #0
 80031a6:	f04f 0300 	mov.w	r3, #0
 80031aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80031ae:	4629      	mov	r1, r5
 80031b0:	028b      	lsls	r3, r1, #10
 80031b2:	4621      	mov	r1, r4
 80031b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80031b8:	4621      	mov	r1, r4
 80031ba:	028a      	lsls	r2, r1, #10
 80031bc:	4610      	mov	r0, r2
 80031be:	4619      	mov	r1, r3
 80031c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80031c4:	2200      	movs	r2, #0
 80031c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80031c8:	64fa      	str	r2, [r7, #76]	; 0x4c
 80031ca:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80031ce:	f7fd f819 	bl	8000204 <__aeabi_uldivmod>
 80031d2:	4602      	mov	r2, r0
 80031d4:	460b      	mov	r3, r1
 80031d6:	4613      	mov	r3, r2
 80031d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80031dc:	4b0d      	ldr	r3, [pc, #52]	; (8003214 <HAL_RCC_GetSysClockFreq+0x458>)
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	0f1b      	lsrs	r3, r3, #28
 80031e2:	f003 0307 	and.w	r3, r3, #7
 80031e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80031ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80031ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80031f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80031f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80031fa:	e003      	b.n	8003204 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80031fc:	4b06      	ldr	r3, [pc, #24]	; (8003218 <HAL_RCC_GetSysClockFreq+0x45c>)
 80031fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003202:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003204:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003208:	4618      	mov	r0, r3
 800320a:	37b8      	adds	r7, #184	; 0xb8
 800320c:	46bd      	mov	sp, r7
 800320e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003212:	bf00      	nop
 8003214:	40023800 	.word	0x40023800
 8003218:	00f42400 	.word	0x00f42400

0800321c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b086      	sub	sp, #24
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d101      	bne.n	800322e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e28d      	b.n	800374a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0301 	and.w	r3, r3, #1
 8003236:	2b00      	cmp	r3, #0
 8003238:	f000 8083 	beq.w	8003342 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800323c:	4b94      	ldr	r3, [pc, #592]	; (8003490 <HAL_RCC_OscConfig+0x274>)
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	f003 030c 	and.w	r3, r3, #12
 8003244:	2b04      	cmp	r3, #4
 8003246:	d019      	beq.n	800327c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003248:	4b91      	ldr	r3, [pc, #580]	; (8003490 <HAL_RCC_OscConfig+0x274>)
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003250:	2b08      	cmp	r3, #8
 8003252:	d106      	bne.n	8003262 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003254:	4b8e      	ldr	r3, [pc, #568]	; (8003490 <HAL_RCC_OscConfig+0x274>)
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800325c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003260:	d00c      	beq.n	800327c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003262:	4b8b      	ldr	r3, [pc, #556]	; (8003490 <HAL_RCC_OscConfig+0x274>)
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800326a:	2b0c      	cmp	r3, #12
 800326c:	d112      	bne.n	8003294 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800326e:	4b88      	ldr	r3, [pc, #544]	; (8003490 <HAL_RCC_OscConfig+0x274>)
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003276:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800327a:	d10b      	bne.n	8003294 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800327c:	4b84      	ldr	r3, [pc, #528]	; (8003490 <HAL_RCC_OscConfig+0x274>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d05b      	beq.n	8003340 <HAL_RCC_OscConfig+0x124>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d157      	bne.n	8003340 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e25a      	b.n	800374a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800329c:	d106      	bne.n	80032ac <HAL_RCC_OscConfig+0x90>
 800329e:	4b7c      	ldr	r3, [pc, #496]	; (8003490 <HAL_RCC_OscConfig+0x274>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a7b      	ldr	r2, [pc, #492]	; (8003490 <HAL_RCC_OscConfig+0x274>)
 80032a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032a8:	6013      	str	r3, [r2, #0]
 80032aa:	e01d      	b.n	80032e8 <HAL_RCC_OscConfig+0xcc>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032b4:	d10c      	bne.n	80032d0 <HAL_RCC_OscConfig+0xb4>
 80032b6:	4b76      	ldr	r3, [pc, #472]	; (8003490 <HAL_RCC_OscConfig+0x274>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a75      	ldr	r2, [pc, #468]	; (8003490 <HAL_RCC_OscConfig+0x274>)
 80032bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032c0:	6013      	str	r3, [r2, #0]
 80032c2:	4b73      	ldr	r3, [pc, #460]	; (8003490 <HAL_RCC_OscConfig+0x274>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a72      	ldr	r2, [pc, #456]	; (8003490 <HAL_RCC_OscConfig+0x274>)
 80032c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032cc:	6013      	str	r3, [r2, #0]
 80032ce:	e00b      	b.n	80032e8 <HAL_RCC_OscConfig+0xcc>
 80032d0:	4b6f      	ldr	r3, [pc, #444]	; (8003490 <HAL_RCC_OscConfig+0x274>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a6e      	ldr	r2, [pc, #440]	; (8003490 <HAL_RCC_OscConfig+0x274>)
 80032d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032da:	6013      	str	r3, [r2, #0]
 80032dc:	4b6c      	ldr	r3, [pc, #432]	; (8003490 <HAL_RCC_OscConfig+0x274>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a6b      	ldr	r2, [pc, #428]	; (8003490 <HAL_RCC_OscConfig+0x274>)
 80032e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d013      	beq.n	8003318 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032f0:	f7fe fb82 	bl	80019f8 <HAL_GetTick>
 80032f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032f6:	e008      	b.n	800330a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032f8:	f7fe fb7e 	bl	80019f8 <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	2b64      	cmp	r3, #100	; 0x64
 8003304:	d901      	bls.n	800330a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e21f      	b.n	800374a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800330a:	4b61      	ldr	r3, [pc, #388]	; (8003490 <HAL_RCC_OscConfig+0x274>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d0f0      	beq.n	80032f8 <HAL_RCC_OscConfig+0xdc>
 8003316:	e014      	b.n	8003342 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003318:	f7fe fb6e 	bl	80019f8 <HAL_GetTick>
 800331c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800331e:	e008      	b.n	8003332 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003320:	f7fe fb6a 	bl	80019f8 <HAL_GetTick>
 8003324:	4602      	mov	r2, r0
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	2b64      	cmp	r3, #100	; 0x64
 800332c:	d901      	bls.n	8003332 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	e20b      	b.n	800374a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003332:	4b57      	ldr	r3, [pc, #348]	; (8003490 <HAL_RCC_OscConfig+0x274>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d1f0      	bne.n	8003320 <HAL_RCC_OscConfig+0x104>
 800333e:	e000      	b.n	8003342 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003340:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0302 	and.w	r3, r3, #2
 800334a:	2b00      	cmp	r3, #0
 800334c:	d06f      	beq.n	800342e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800334e:	4b50      	ldr	r3, [pc, #320]	; (8003490 <HAL_RCC_OscConfig+0x274>)
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	f003 030c 	and.w	r3, r3, #12
 8003356:	2b00      	cmp	r3, #0
 8003358:	d017      	beq.n	800338a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800335a:	4b4d      	ldr	r3, [pc, #308]	; (8003490 <HAL_RCC_OscConfig+0x274>)
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003362:	2b08      	cmp	r3, #8
 8003364:	d105      	bne.n	8003372 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003366:	4b4a      	ldr	r3, [pc, #296]	; (8003490 <HAL_RCC_OscConfig+0x274>)
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d00b      	beq.n	800338a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003372:	4b47      	ldr	r3, [pc, #284]	; (8003490 <HAL_RCC_OscConfig+0x274>)
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800337a:	2b0c      	cmp	r3, #12
 800337c:	d11c      	bne.n	80033b8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800337e:	4b44      	ldr	r3, [pc, #272]	; (8003490 <HAL_RCC_OscConfig+0x274>)
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d116      	bne.n	80033b8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800338a:	4b41      	ldr	r3, [pc, #260]	; (8003490 <HAL_RCC_OscConfig+0x274>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0302 	and.w	r3, r3, #2
 8003392:	2b00      	cmp	r3, #0
 8003394:	d005      	beq.n	80033a2 <HAL_RCC_OscConfig+0x186>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	68db      	ldr	r3, [r3, #12]
 800339a:	2b01      	cmp	r3, #1
 800339c:	d001      	beq.n	80033a2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e1d3      	b.n	800374a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033a2:	4b3b      	ldr	r3, [pc, #236]	; (8003490 <HAL_RCC_OscConfig+0x274>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	691b      	ldr	r3, [r3, #16]
 80033ae:	00db      	lsls	r3, r3, #3
 80033b0:	4937      	ldr	r1, [pc, #220]	; (8003490 <HAL_RCC_OscConfig+0x274>)
 80033b2:	4313      	orrs	r3, r2
 80033b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033b6:	e03a      	b.n	800342e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d020      	beq.n	8003402 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033c0:	4b34      	ldr	r3, [pc, #208]	; (8003494 <HAL_RCC_OscConfig+0x278>)
 80033c2:	2201      	movs	r2, #1
 80033c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c6:	f7fe fb17 	bl	80019f8 <HAL_GetTick>
 80033ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033cc:	e008      	b.n	80033e0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033ce:	f7fe fb13 	bl	80019f8 <HAL_GetTick>
 80033d2:	4602      	mov	r2, r0
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	1ad3      	subs	r3, r2, r3
 80033d8:	2b02      	cmp	r3, #2
 80033da:	d901      	bls.n	80033e0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80033dc:	2303      	movs	r3, #3
 80033de:	e1b4      	b.n	800374a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033e0:	4b2b      	ldr	r3, [pc, #172]	; (8003490 <HAL_RCC_OscConfig+0x274>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0302 	and.w	r3, r3, #2
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d0f0      	beq.n	80033ce <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033ec:	4b28      	ldr	r3, [pc, #160]	; (8003490 <HAL_RCC_OscConfig+0x274>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	691b      	ldr	r3, [r3, #16]
 80033f8:	00db      	lsls	r3, r3, #3
 80033fa:	4925      	ldr	r1, [pc, #148]	; (8003490 <HAL_RCC_OscConfig+0x274>)
 80033fc:	4313      	orrs	r3, r2
 80033fe:	600b      	str	r3, [r1, #0]
 8003400:	e015      	b.n	800342e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003402:	4b24      	ldr	r3, [pc, #144]	; (8003494 <HAL_RCC_OscConfig+0x278>)
 8003404:	2200      	movs	r2, #0
 8003406:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003408:	f7fe faf6 	bl	80019f8 <HAL_GetTick>
 800340c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800340e:	e008      	b.n	8003422 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003410:	f7fe faf2 	bl	80019f8 <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	2b02      	cmp	r3, #2
 800341c:	d901      	bls.n	8003422 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e193      	b.n	800374a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003422:	4b1b      	ldr	r3, [pc, #108]	; (8003490 <HAL_RCC_OscConfig+0x274>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0302 	and.w	r3, r3, #2
 800342a:	2b00      	cmp	r3, #0
 800342c:	d1f0      	bne.n	8003410 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0308 	and.w	r3, r3, #8
 8003436:	2b00      	cmp	r3, #0
 8003438:	d036      	beq.n	80034a8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	695b      	ldr	r3, [r3, #20]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d016      	beq.n	8003470 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003442:	4b15      	ldr	r3, [pc, #84]	; (8003498 <HAL_RCC_OscConfig+0x27c>)
 8003444:	2201      	movs	r2, #1
 8003446:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003448:	f7fe fad6 	bl	80019f8 <HAL_GetTick>
 800344c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800344e:	e008      	b.n	8003462 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003450:	f7fe fad2 	bl	80019f8 <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	2b02      	cmp	r3, #2
 800345c:	d901      	bls.n	8003462 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e173      	b.n	800374a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003462:	4b0b      	ldr	r3, [pc, #44]	; (8003490 <HAL_RCC_OscConfig+0x274>)
 8003464:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003466:	f003 0302 	and.w	r3, r3, #2
 800346a:	2b00      	cmp	r3, #0
 800346c:	d0f0      	beq.n	8003450 <HAL_RCC_OscConfig+0x234>
 800346e:	e01b      	b.n	80034a8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003470:	4b09      	ldr	r3, [pc, #36]	; (8003498 <HAL_RCC_OscConfig+0x27c>)
 8003472:	2200      	movs	r2, #0
 8003474:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003476:	f7fe fabf 	bl	80019f8 <HAL_GetTick>
 800347a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800347c:	e00e      	b.n	800349c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800347e:	f7fe fabb 	bl	80019f8 <HAL_GetTick>
 8003482:	4602      	mov	r2, r0
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	2b02      	cmp	r3, #2
 800348a:	d907      	bls.n	800349c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800348c:	2303      	movs	r3, #3
 800348e:	e15c      	b.n	800374a <HAL_RCC_OscConfig+0x52e>
 8003490:	40023800 	.word	0x40023800
 8003494:	42470000 	.word	0x42470000
 8003498:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800349c:	4b8a      	ldr	r3, [pc, #552]	; (80036c8 <HAL_RCC_OscConfig+0x4ac>)
 800349e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034a0:	f003 0302 	and.w	r3, r3, #2
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d1ea      	bne.n	800347e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0304 	and.w	r3, r3, #4
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	f000 8097 	beq.w	80035e4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034b6:	2300      	movs	r3, #0
 80034b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034ba:	4b83      	ldr	r3, [pc, #524]	; (80036c8 <HAL_RCC_OscConfig+0x4ac>)
 80034bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d10f      	bne.n	80034e6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034c6:	2300      	movs	r3, #0
 80034c8:	60bb      	str	r3, [r7, #8]
 80034ca:	4b7f      	ldr	r3, [pc, #508]	; (80036c8 <HAL_RCC_OscConfig+0x4ac>)
 80034cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ce:	4a7e      	ldr	r2, [pc, #504]	; (80036c8 <HAL_RCC_OscConfig+0x4ac>)
 80034d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034d4:	6413      	str	r3, [r2, #64]	; 0x40
 80034d6:	4b7c      	ldr	r3, [pc, #496]	; (80036c8 <HAL_RCC_OscConfig+0x4ac>)
 80034d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034de:	60bb      	str	r3, [r7, #8]
 80034e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034e2:	2301      	movs	r3, #1
 80034e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034e6:	4b79      	ldr	r3, [pc, #484]	; (80036cc <HAL_RCC_OscConfig+0x4b0>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d118      	bne.n	8003524 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034f2:	4b76      	ldr	r3, [pc, #472]	; (80036cc <HAL_RCC_OscConfig+0x4b0>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a75      	ldr	r2, [pc, #468]	; (80036cc <HAL_RCC_OscConfig+0x4b0>)
 80034f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034fe:	f7fe fa7b 	bl	80019f8 <HAL_GetTick>
 8003502:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003504:	e008      	b.n	8003518 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003506:	f7fe fa77 	bl	80019f8 <HAL_GetTick>
 800350a:	4602      	mov	r2, r0
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	2b02      	cmp	r3, #2
 8003512:	d901      	bls.n	8003518 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003514:	2303      	movs	r3, #3
 8003516:	e118      	b.n	800374a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003518:	4b6c      	ldr	r3, [pc, #432]	; (80036cc <HAL_RCC_OscConfig+0x4b0>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003520:	2b00      	cmp	r3, #0
 8003522:	d0f0      	beq.n	8003506 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	2b01      	cmp	r3, #1
 800352a:	d106      	bne.n	800353a <HAL_RCC_OscConfig+0x31e>
 800352c:	4b66      	ldr	r3, [pc, #408]	; (80036c8 <HAL_RCC_OscConfig+0x4ac>)
 800352e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003530:	4a65      	ldr	r2, [pc, #404]	; (80036c8 <HAL_RCC_OscConfig+0x4ac>)
 8003532:	f043 0301 	orr.w	r3, r3, #1
 8003536:	6713      	str	r3, [r2, #112]	; 0x70
 8003538:	e01c      	b.n	8003574 <HAL_RCC_OscConfig+0x358>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	2b05      	cmp	r3, #5
 8003540:	d10c      	bne.n	800355c <HAL_RCC_OscConfig+0x340>
 8003542:	4b61      	ldr	r3, [pc, #388]	; (80036c8 <HAL_RCC_OscConfig+0x4ac>)
 8003544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003546:	4a60      	ldr	r2, [pc, #384]	; (80036c8 <HAL_RCC_OscConfig+0x4ac>)
 8003548:	f043 0304 	orr.w	r3, r3, #4
 800354c:	6713      	str	r3, [r2, #112]	; 0x70
 800354e:	4b5e      	ldr	r3, [pc, #376]	; (80036c8 <HAL_RCC_OscConfig+0x4ac>)
 8003550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003552:	4a5d      	ldr	r2, [pc, #372]	; (80036c8 <HAL_RCC_OscConfig+0x4ac>)
 8003554:	f043 0301 	orr.w	r3, r3, #1
 8003558:	6713      	str	r3, [r2, #112]	; 0x70
 800355a:	e00b      	b.n	8003574 <HAL_RCC_OscConfig+0x358>
 800355c:	4b5a      	ldr	r3, [pc, #360]	; (80036c8 <HAL_RCC_OscConfig+0x4ac>)
 800355e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003560:	4a59      	ldr	r2, [pc, #356]	; (80036c8 <HAL_RCC_OscConfig+0x4ac>)
 8003562:	f023 0301 	bic.w	r3, r3, #1
 8003566:	6713      	str	r3, [r2, #112]	; 0x70
 8003568:	4b57      	ldr	r3, [pc, #348]	; (80036c8 <HAL_RCC_OscConfig+0x4ac>)
 800356a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800356c:	4a56      	ldr	r2, [pc, #344]	; (80036c8 <HAL_RCC_OscConfig+0x4ac>)
 800356e:	f023 0304 	bic.w	r3, r3, #4
 8003572:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d015      	beq.n	80035a8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800357c:	f7fe fa3c 	bl	80019f8 <HAL_GetTick>
 8003580:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003582:	e00a      	b.n	800359a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003584:	f7fe fa38 	bl	80019f8 <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003592:	4293      	cmp	r3, r2
 8003594:	d901      	bls.n	800359a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e0d7      	b.n	800374a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800359a:	4b4b      	ldr	r3, [pc, #300]	; (80036c8 <HAL_RCC_OscConfig+0x4ac>)
 800359c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800359e:	f003 0302 	and.w	r3, r3, #2
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d0ee      	beq.n	8003584 <HAL_RCC_OscConfig+0x368>
 80035a6:	e014      	b.n	80035d2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035a8:	f7fe fa26 	bl	80019f8 <HAL_GetTick>
 80035ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035ae:	e00a      	b.n	80035c6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035b0:	f7fe fa22 	bl	80019f8 <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80035be:	4293      	cmp	r3, r2
 80035c0:	d901      	bls.n	80035c6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e0c1      	b.n	800374a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035c6:	4b40      	ldr	r3, [pc, #256]	; (80036c8 <HAL_RCC_OscConfig+0x4ac>)
 80035c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ca:	f003 0302 	and.w	r3, r3, #2
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d1ee      	bne.n	80035b0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035d2:	7dfb      	ldrb	r3, [r7, #23]
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d105      	bne.n	80035e4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035d8:	4b3b      	ldr	r3, [pc, #236]	; (80036c8 <HAL_RCC_OscConfig+0x4ac>)
 80035da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035dc:	4a3a      	ldr	r2, [pc, #232]	; (80036c8 <HAL_RCC_OscConfig+0x4ac>)
 80035de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035e2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	699b      	ldr	r3, [r3, #24]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	f000 80ad 	beq.w	8003748 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80035ee:	4b36      	ldr	r3, [pc, #216]	; (80036c8 <HAL_RCC_OscConfig+0x4ac>)
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f003 030c 	and.w	r3, r3, #12
 80035f6:	2b08      	cmp	r3, #8
 80035f8:	d060      	beq.n	80036bc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	699b      	ldr	r3, [r3, #24]
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d145      	bne.n	800368e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003602:	4b33      	ldr	r3, [pc, #204]	; (80036d0 <HAL_RCC_OscConfig+0x4b4>)
 8003604:	2200      	movs	r2, #0
 8003606:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003608:	f7fe f9f6 	bl	80019f8 <HAL_GetTick>
 800360c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800360e:	e008      	b.n	8003622 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003610:	f7fe f9f2 	bl	80019f8 <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	2b02      	cmp	r3, #2
 800361c:	d901      	bls.n	8003622 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	e093      	b.n	800374a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003622:	4b29      	ldr	r3, [pc, #164]	; (80036c8 <HAL_RCC_OscConfig+0x4ac>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800362a:	2b00      	cmp	r3, #0
 800362c:	d1f0      	bne.n	8003610 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	69da      	ldr	r2, [r3, #28]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a1b      	ldr	r3, [r3, #32]
 8003636:	431a      	orrs	r2, r3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363c:	019b      	lsls	r3, r3, #6
 800363e:	431a      	orrs	r2, r3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003644:	085b      	lsrs	r3, r3, #1
 8003646:	3b01      	subs	r3, #1
 8003648:	041b      	lsls	r3, r3, #16
 800364a:	431a      	orrs	r2, r3
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003650:	061b      	lsls	r3, r3, #24
 8003652:	431a      	orrs	r2, r3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003658:	071b      	lsls	r3, r3, #28
 800365a:	491b      	ldr	r1, [pc, #108]	; (80036c8 <HAL_RCC_OscConfig+0x4ac>)
 800365c:	4313      	orrs	r3, r2
 800365e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003660:	4b1b      	ldr	r3, [pc, #108]	; (80036d0 <HAL_RCC_OscConfig+0x4b4>)
 8003662:	2201      	movs	r2, #1
 8003664:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003666:	f7fe f9c7 	bl	80019f8 <HAL_GetTick>
 800366a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800366c:	e008      	b.n	8003680 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800366e:	f7fe f9c3 	bl	80019f8 <HAL_GetTick>
 8003672:	4602      	mov	r2, r0
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	2b02      	cmp	r3, #2
 800367a:	d901      	bls.n	8003680 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800367c:	2303      	movs	r3, #3
 800367e:	e064      	b.n	800374a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003680:	4b11      	ldr	r3, [pc, #68]	; (80036c8 <HAL_RCC_OscConfig+0x4ac>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003688:	2b00      	cmp	r3, #0
 800368a:	d0f0      	beq.n	800366e <HAL_RCC_OscConfig+0x452>
 800368c:	e05c      	b.n	8003748 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800368e:	4b10      	ldr	r3, [pc, #64]	; (80036d0 <HAL_RCC_OscConfig+0x4b4>)
 8003690:	2200      	movs	r2, #0
 8003692:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003694:	f7fe f9b0 	bl	80019f8 <HAL_GetTick>
 8003698:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800369a:	e008      	b.n	80036ae <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800369c:	f7fe f9ac 	bl	80019f8 <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d901      	bls.n	80036ae <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e04d      	b.n	800374a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036ae:	4b06      	ldr	r3, [pc, #24]	; (80036c8 <HAL_RCC_OscConfig+0x4ac>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d1f0      	bne.n	800369c <HAL_RCC_OscConfig+0x480>
 80036ba:	e045      	b.n	8003748 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	699b      	ldr	r3, [r3, #24]
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d107      	bne.n	80036d4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e040      	b.n	800374a <HAL_RCC_OscConfig+0x52e>
 80036c8:	40023800 	.word	0x40023800
 80036cc:	40007000 	.word	0x40007000
 80036d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80036d4:	4b1f      	ldr	r3, [pc, #124]	; (8003754 <HAL_RCC_OscConfig+0x538>)
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	699b      	ldr	r3, [r3, #24]
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d030      	beq.n	8003744 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d129      	bne.n	8003744 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d122      	bne.n	8003744 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036fe:	68fa      	ldr	r2, [r7, #12]
 8003700:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003704:	4013      	ands	r3, r2
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800370a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800370c:	4293      	cmp	r3, r2
 800370e:	d119      	bne.n	8003744 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800371a:	085b      	lsrs	r3, r3, #1
 800371c:	3b01      	subs	r3, #1
 800371e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003720:	429a      	cmp	r2, r3
 8003722:	d10f      	bne.n	8003744 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800372e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003730:	429a      	cmp	r2, r3
 8003732:	d107      	bne.n	8003744 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800373e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003740:	429a      	cmp	r2, r3
 8003742:	d001      	beq.n	8003748 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e000      	b.n	800374a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003748:	2300      	movs	r3, #0
}
 800374a:	4618      	mov	r0, r3
 800374c:	3718      	adds	r7, #24
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	40023800 	.word	0x40023800

08003758 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d101      	bne.n	800376a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e041      	b.n	80037ee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003770:	b2db      	uxtb	r3, r3
 8003772:	2b00      	cmp	r3, #0
 8003774:	d106      	bne.n	8003784 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f7fd fecc 	bl	800151c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2202      	movs	r2, #2
 8003788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	3304      	adds	r3, #4
 8003794:	4619      	mov	r1, r3
 8003796:	4610      	mov	r0, r2
 8003798:	f000 fad8 	bl	8003d4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2201      	movs	r2, #1
 80037a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2201      	movs	r2, #1
 80037b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2201      	movs	r2, #1
 80037c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2201      	movs	r2, #1
 80037c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2201      	movs	r2, #1
 80037d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2201      	movs	r2, #1
 80037e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2201      	movs	r2, #1
 80037e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037ec:	2300      	movs	r3, #0
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3708      	adds	r7, #8
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}

080037f6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80037f6:	b580      	push	{r7, lr}
 80037f8:	b082      	sub	sp, #8
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d101      	bne.n	8003808 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e041      	b.n	800388c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800380e:	b2db      	uxtb	r3, r3
 8003810:	2b00      	cmp	r3, #0
 8003812:	d106      	bne.n	8003822 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f000 f839 	bl	8003894 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2202      	movs	r2, #2
 8003826:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	3304      	adds	r3, #4
 8003832:	4619      	mov	r1, r3
 8003834:	4610      	mov	r0, r2
 8003836:	f000 fa89 	bl	8003d4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2201      	movs	r2, #1
 800383e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2201      	movs	r2, #1
 8003846:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2201      	movs	r2, #1
 800384e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2201      	movs	r2, #1
 8003856:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2201      	movs	r2, #1
 800385e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2201      	movs	r2, #1
 8003866:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2201      	movs	r2, #1
 800386e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2201      	movs	r2, #1
 8003876:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2201      	movs	r2, #1
 800387e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2201      	movs	r2, #1
 8003886:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800388a:	2300      	movs	r3, #0
}
 800388c:	4618      	mov	r0, r3
 800388e:	3708      	adds	r7, #8
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}

08003894 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003894:	b480      	push	{r7}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800389c:	bf00      	nop
 800389e:	370c      	adds	r7, #12
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr

080038a8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d109      	bne.n	80038cc <HAL_TIM_PWM_Start+0x24>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	bf14      	ite	ne
 80038c4:	2301      	movne	r3, #1
 80038c6:	2300      	moveq	r3, #0
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	e022      	b.n	8003912 <HAL_TIM_PWM_Start+0x6a>
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	2b04      	cmp	r3, #4
 80038d0:	d109      	bne.n	80038e6 <HAL_TIM_PWM_Start+0x3e>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	2b01      	cmp	r3, #1
 80038dc:	bf14      	ite	ne
 80038de:	2301      	movne	r3, #1
 80038e0:	2300      	moveq	r3, #0
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	e015      	b.n	8003912 <HAL_TIM_PWM_Start+0x6a>
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	2b08      	cmp	r3, #8
 80038ea:	d109      	bne.n	8003900 <HAL_TIM_PWM_Start+0x58>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	bf14      	ite	ne
 80038f8:	2301      	movne	r3, #1
 80038fa:	2300      	moveq	r3, #0
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	e008      	b.n	8003912 <HAL_TIM_PWM_Start+0x6a>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003906:	b2db      	uxtb	r3, r3
 8003908:	2b01      	cmp	r3, #1
 800390a:	bf14      	ite	ne
 800390c:	2301      	movne	r3, #1
 800390e:	2300      	moveq	r3, #0
 8003910:	b2db      	uxtb	r3, r3
 8003912:	2b00      	cmp	r3, #0
 8003914:	d001      	beq.n	800391a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e07c      	b.n	8003a14 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d104      	bne.n	800392a <HAL_TIM_PWM_Start+0x82>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2202      	movs	r2, #2
 8003924:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003928:	e013      	b.n	8003952 <HAL_TIM_PWM_Start+0xaa>
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	2b04      	cmp	r3, #4
 800392e:	d104      	bne.n	800393a <HAL_TIM_PWM_Start+0x92>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2202      	movs	r2, #2
 8003934:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003938:	e00b      	b.n	8003952 <HAL_TIM_PWM_Start+0xaa>
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	2b08      	cmp	r3, #8
 800393e:	d104      	bne.n	800394a <HAL_TIM_PWM_Start+0xa2>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2202      	movs	r2, #2
 8003944:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003948:	e003      	b.n	8003952 <HAL_TIM_PWM_Start+0xaa>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2202      	movs	r2, #2
 800394e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	2201      	movs	r2, #1
 8003958:	6839      	ldr	r1, [r7, #0]
 800395a:	4618      	mov	r0, r3
 800395c:	f000 fce0 	bl	8004320 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a2d      	ldr	r2, [pc, #180]	; (8003a1c <HAL_TIM_PWM_Start+0x174>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d004      	beq.n	8003974 <HAL_TIM_PWM_Start+0xcc>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a2c      	ldr	r2, [pc, #176]	; (8003a20 <HAL_TIM_PWM_Start+0x178>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d101      	bne.n	8003978 <HAL_TIM_PWM_Start+0xd0>
 8003974:	2301      	movs	r3, #1
 8003976:	e000      	b.n	800397a <HAL_TIM_PWM_Start+0xd2>
 8003978:	2300      	movs	r3, #0
 800397a:	2b00      	cmp	r3, #0
 800397c:	d007      	beq.n	800398e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800398c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a22      	ldr	r2, [pc, #136]	; (8003a1c <HAL_TIM_PWM_Start+0x174>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d022      	beq.n	80039de <HAL_TIM_PWM_Start+0x136>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039a0:	d01d      	beq.n	80039de <HAL_TIM_PWM_Start+0x136>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a1f      	ldr	r2, [pc, #124]	; (8003a24 <HAL_TIM_PWM_Start+0x17c>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d018      	beq.n	80039de <HAL_TIM_PWM_Start+0x136>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a1d      	ldr	r2, [pc, #116]	; (8003a28 <HAL_TIM_PWM_Start+0x180>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d013      	beq.n	80039de <HAL_TIM_PWM_Start+0x136>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a1c      	ldr	r2, [pc, #112]	; (8003a2c <HAL_TIM_PWM_Start+0x184>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d00e      	beq.n	80039de <HAL_TIM_PWM_Start+0x136>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a16      	ldr	r2, [pc, #88]	; (8003a20 <HAL_TIM_PWM_Start+0x178>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d009      	beq.n	80039de <HAL_TIM_PWM_Start+0x136>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a18      	ldr	r2, [pc, #96]	; (8003a30 <HAL_TIM_PWM_Start+0x188>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d004      	beq.n	80039de <HAL_TIM_PWM_Start+0x136>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a16      	ldr	r2, [pc, #88]	; (8003a34 <HAL_TIM_PWM_Start+0x18c>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d111      	bne.n	8003a02 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	f003 0307 	and.w	r3, r3, #7
 80039e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2b06      	cmp	r3, #6
 80039ee:	d010      	beq.n	8003a12 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f042 0201 	orr.w	r2, r2, #1
 80039fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a00:	e007      	b.n	8003a12 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f042 0201 	orr.w	r2, r2, #1
 8003a10:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a12:	2300      	movs	r3, #0
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3710      	adds	r7, #16
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	40010000 	.word	0x40010000
 8003a20:	40010400 	.word	0x40010400
 8003a24:	40000400 	.word	0x40000400
 8003a28:	40000800 	.word	0x40000800
 8003a2c:	40000c00 	.word	0x40000c00
 8003a30:	40014000 	.word	0x40014000
 8003a34:	40001800 	.word	0x40001800

08003a38 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b086      	sub	sp, #24
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	60f8      	str	r0, [r7, #12]
 8003a40:	60b9      	str	r1, [r7, #8]
 8003a42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a44:	2300      	movs	r3, #0
 8003a46:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d101      	bne.n	8003a56 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003a52:	2302      	movs	r3, #2
 8003a54:	e0ae      	b.n	8003bb4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2201      	movs	r2, #1
 8003a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2b0c      	cmp	r3, #12
 8003a62:	f200 809f 	bhi.w	8003ba4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003a66:	a201      	add	r2, pc, #4	; (adr r2, 8003a6c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a6c:	08003aa1 	.word	0x08003aa1
 8003a70:	08003ba5 	.word	0x08003ba5
 8003a74:	08003ba5 	.word	0x08003ba5
 8003a78:	08003ba5 	.word	0x08003ba5
 8003a7c:	08003ae1 	.word	0x08003ae1
 8003a80:	08003ba5 	.word	0x08003ba5
 8003a84:	08003ba5 	.word	0x08003ba5
 8003a88:	08003ba5 	.word	0x08003ba5
 8003a8c:	08003b23 	.word	0x08003b23
 8003a90:	08003ba5 	.word	0x08003ba5
 8003a94:	08003ba5 	.word	0x08003ba5
 8003a98:	08003ba5 	.word	0x08003ba5
 8003a9c:	08003b63 	.word	0x08003b63
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	68b9      	ldr	r1, [r7, #8]
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f000 f9f0 	bl	8003e8c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	699a      	ldr	r2, [r3, #24]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f042 0208 	orr.w	r2, r2, #8
 8003aba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	699a      	ldr	r2, [r3, #24]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f022 0204 	bic.w	r2, r2, #4
 8003aca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	6999      	ldr	r1, [r3, #24]
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	691a      	ldr	r2, [r3, #16]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	430a      	orrs	r2, r1
 8003adc:	619a      	str	r2, [r3, #24]
      break;
 8003ade:	e064      	b.n	8003baa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	68b9      	ldr	r1, [r7, #8]
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f000 fa40 	bl	8003f6c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	699a      	ldr	r2, [r3, #24]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003afa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	699a      	ldr	r2, [r3, #24]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	6999      	ldr	r1, [r3, #24]
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	021a      	lsls	r2, r3, #8
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	430a      	orrs	r2, r1
 8003b1e:	619a      	str	r2, [r3, #24]
      break;
 8003b20:	e043      	b.n	8003baa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	68b9      	ldr	r1, [r7, #8]
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f000 fa95 	bl	8004058 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	69da      	ldr	r2, [r3, #28]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f042 0208 	orr.w	r2, r2, #8
 8003b3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	69da      	ldr	r2, [r3, #28]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f022 0204 	bic.w	r2, r2, #4
 8003b4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	69d9      	ldr	r1, [r3, #28]
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	691a      	ldr	r2, [r3, #16]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	430a      	orrs	r2, r1
 8003b5e:	61da      	str	r2, [r3, #28]
      break;
 8003b60:	e023      	b.n	8003baa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	68b9      	ldr	r1, [r7, #8]
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f000 fae9 	bl	8004140 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	69da      	ldr	r2, [r3, #28]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	69da      	ldr	r2, [r3, #28]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	69d9      	ldr	r1, [r3, #28]
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	691b      	ldr	r3, [r3, #16]
 8003b98:	021a      	lsls	r2, r3, #8
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	430a      	orrs	r2, r1
 8003ba0:	61da      	str	r2, [r3, #28]
      break;
 8003ba2:	e002      	b.n	8003baa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	75fb      	strb	r3, [r7, #23]
      break;
 8003ba8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003bb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3718      	adds	r7, #24
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b084      	sub	sp, #16
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d101      	bne.n	8003bd8 <HAL_TIM_ConfigClockSource+0x1c>
 8003bd4:	2302      	movs	r3, #2
 8003bd6:	e0b4      	b.n	8003d42 <HAL_TIM_ConfigClockSource+0x186>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2202      	movs	r2, #2
 8003be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003bf6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003bfe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	68ba      	ldr	r2, [r7, #8]
 8003c06:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c10:	d03e      	beq.n	8003c90 <HAL_TIM_ConfigClockSource+0xd4>
 8003c12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c16:	f200 8087 	bhi.w	8003d28 <HAL_TIM_ConfigClockSource+0x16c>
 8003c1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c1e:	f000 8086 	beq.w	8003d2e <HAL_TIM_ConfigClockSource+0x172>
 8003c22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c26:	d87f      	bhi.n	8003d28 <HAL_TIM_ConfigClockSource+0x16c>
 8003c28:	2b70      	cmp	r3, #112	; 0x70
 8003c2a:	d01a      	beq.n	8003c62 <HAL_TIM_ConfigClockSource+0xa6>
 8003c2c:	2b70      	cmp	r3, #112	; 0x70
 8003c2e:	d87b      	bhi.n	8003d28 <HAL_TIM_ConfigClockSource+0x16c>
 8003c30:	2b60      	cmp	r3, #96	; 0x60
 8003c32:	d050      	beq.n	8003cd6 <HAL_TIM_ConfigClockSource+0x11a>
 8003c34:	2b60      	cmp	r3, #96	; 0x60
 8003c36:	d877      	bhi.n	8003d28 <HAL_TIM_ConfigClockSource+0x16c>
 8003c38:	2b50      	cmp	r3, #80	; 0x50
 8003c3a:	d03c      	beq.n	8003cb6 <HAL_TIM_ConfigClockSource+0xfa>
 8003c3c:	2b50      	cmp	r3, #80	; 0x50
 8003c3e:	d873      	bhi.n	8003d28 <HAL_TIM_ConfigClockSource+0x16c>
 8003c40:	2b40      	cmp	r3, #64	; 0x40
 8003c42:	d058      	beq.n	8003cf6 <HAL_TIM_ConfigClockSource+0x13a>
 8003c44:	2b40      	cmp	r3, #64	; 0x40
 8003c46:	d86f      	bhi.n	8003d28 <HAL_TIM_ConfigClockSource+0x16c>
 8003c48:	2b30      	cmp	r3, #48	; 0x30
 8003c4a:	d064      	beq.n	8003d16 <HAL_TIM_ConfigClockSource+0x15a>
 8003c4c:	2b30      	cmp	r3, #48	; 0x30
 8003c4e:	d86b      	bhi.n	8003d28 <HAL_TIM_ConfigClockSource+0x16c>
 8003c50:	2b20      	cmp	r3, #32
 8003c52:	d060      	beq.n	8003d16 <HAL_TIM_ConfigClockSource+0x15a>
 8003c54:	2b20      	cmp	r3, #32
 8003c56:	d867      	bhi.n	8003d28 <HAL_TIM_ConfigClockSource+0x16c>
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d05c      	beq.n	8003d16 <HAL_TIM_ConfigClockSource+0x15a>
 8003c5c:	2b10      	cmp	r3, #16
 8003c5e:	d05a      	beq.n	8003d16 <HAL_TIM_ConfigClockSource+0x15a>
 8003c60:	e062      	b.n	8003d28 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6818      	ldr	r0, [r3, #0]
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	6899      	ldr	r1, [r3, #8]
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	685a      	ldr	r2, [r3, #4]
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	f000 fb35 	bl	80042e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003c84:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	68ba      	ldr	r2, [r7, #8]
 8003c8c:	609a      	str	r2, [r3, #8]
      break;
 8003c8e:	e04f      	b.n	8003d30 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6818      	ldr	r0, [r3, #0]
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	6899      	ldr	r1, [r3, #8]
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	685a      	ldr	r2, [r3, #4]
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	f000 fb1e 	bl	80042e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	689a      	ldr	r2, [r3, #8]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003cb2:	609a      	str	r2, [r3, #8]
      break;
 8003cb4:	e03c      	b.n	8003d30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6818      	ldr	r0, [r3, #0]
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	6859      	ldr	r1, [r3, #4]
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	f000 fa92 	bl	80041ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	2150      	movs	r1, #80	; 0x50
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f000 faeb 	bl	80042aa <TIM_ITRx_SetConfig>
      break;
 8003cd4:	e02c      	b.n	8003d30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6818      	ldr	r0, [r3, #0]
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	6859      	ldr	r1, [r3, #4]
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	f000 fab1 	bl	800424a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2160      	movs	r1, #96	; 0x60
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f000 fadb 	bl	80042aa <TIM_ITRx_SetConfig>
      break;
 8003cf4:	e01c      	b.n	8003d30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6818      	ldr	r0, [r3, #0]
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	6859      	ldr	r1, [r3, #4]
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	68db      	ldr	r3, [r3, #12]
 8003d02:	461a      	mov	r2, r3
 8003d04:	f000 fa72 	bl	80041ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	2140      	movs	r1, #64	; 0x40
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f000 facb 	bl	80042aa <TIM_ITRx_SetConfig>
      break;
 8003d14:	e00c      	b.n	8003d30 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4619      	mov	r1, r3
 8003d20:	4610      	mov	r0, r2
 8003d22:	f000 fac2 	bl	80042aa <TIM_ITRx_SetConfig>
      break;
 8003d26:	e003      	b.n	8003d30 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	73fb      	strb	r3, [r7, #15]
      break;
 8003d2c:	e000      	b.n	8003d30 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003d2e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2201      	movs	r2, #1
 8003d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3710      	adds	r7, #16
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
	...

08003d4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b085      	sub	sp, #20
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	4a40      	ldr	r2, [pc, #256]	; (8003e60 <TIM_Base_SetConfig+0x114>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d013      	beq.n	8003d8c <TIM_Base_SetConfig+0x40>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d6a:	d00f      	beq.n	8003d8c <TIM_Base_SetConfig+0x40>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	4a3d      	ldr	r2, [pc, #244]	; (8003e64 <TIM_Base_SetConfig+0x118>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d00b      	beq.n	8003d8c <TIM_Base_SetConfig+0x40>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	4a3c      	ldr	r2, [pc, #240]	; (8003e68 <TIM_Base_SetConfig+0x11c>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d007      	beq.n	8003d8c <TIM_Base_SetConfig+0x40>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	4a3b      	ldr	r2, [pc, #236]	; (8003e6c <TIM_Base_SetConfig+0x120>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d003      	beq.n	8003d8c <TIM_Base_SetConfig+0x40>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	4a3a      	ldr	r2, [pc, #232]	; (8003e70 <TIM_Base_SetConfig+0x124>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d108      	bne.n	8003d9e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	68fa      	ldr	r2, [r7, #12]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4a2f      	ldr	r2, [pc, #188]	; (8003e60 <TIM_Base_SetConfig+0x114>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d02b      	beq.n	8003dfe <TIM_Base_SetConfig+0xb2>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dac:	d027      	beq.n	8003dfe <TIM_Base_SetConfig+0xb2>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a2c      	ldr	r2, [pc, #176]	; (8003e64 <TIM_Base_SetConfig+0x118>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d023      	beq.n	8003dfe <TIM_Base_SetConfig+0xb2>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a2b      	ldr	r2, [pc, #172]	; (8003e68 <TIM_Base_SetConfig+0x11c>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d01f      	beq.n	8003dfe <TIM_Base_SetConfig+0xb2>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4a2a      	ldr	r2, [pc, #168]	; (8003e6c <TIM_Base_SetConfig+0x120>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d01b      	beq.n	8003dfe <TIM_Base_SetConfig+0xb2>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4a29      	ldr	r2, [pc, #164]	; (8003e70 <TIM_Base_SetConfig+0x124>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d017      	beq.n	8003dfe <TIM_Base_SetConfig+0xb2>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4a28      	ldr	r2, [pc, #160]	; (8003e74 <TIM_Base_SetConfig+0x128>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d013      	beq.n	8003dfe <TIM_Base_SetConfig+0xb2>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	4a27      	ldr	r2, [pc, #156]	; (8003e78 <TIM_Base_SetConfig+0x12c>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d00f      	beq.n	8003dfe <TIM_Base_SetConfig+0xb2>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4a26      	ldr	r2, [pc, #152]	; (8003e7c <TIM_Base_SetConfig+0x130>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d00b      	beq.n	8003dfe <TIM_Base_SetConfig+0xb2>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	4a25      	ldr	r2, [pc, #148]	; (8003e80 <TIM_Base_SetConfig+0x134>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d007      	beq.n	8003dfe <TIM_Base_SetConfig+0xb2>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4a24      	ldr	r2, [pc, #144]	; (8003e84 <TIM_Base_SetConfig+0x138>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d003      	beq.n	8003dfe <TIM_Base_SetConfig+0xb2>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4a23      	ldr	r2, [pc, #140]	; (8003e88 <TIM_Base_SetConfig+0x13c>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d108      	bne.n	8003e10 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	68fa      	ldr	r2, [r7, #12]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	695b      	ldr	r3, [r3, #20]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	68fa      	ldr	r2, [r7, #12]
 8003e22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	689a      	ldr	r2, [r3, #8]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	4a0a      	ldr	r2, [pc, #40]	; (8003e60 <TIM_Base_SetConfig+0x114>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d003      	beq.n	8003e44 <TIM_Base_SetConfig+0xf8>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	4a0c      	ldr	r2, [pc, #48]	; (8003e70 <TIM_Base_SetConfig+0x124>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d103      	bne.n	8003e4c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	691a      	ldr	r2, [r3, #16]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	615a      	str	r2, [r3, #20]
}
 8003e52:	bf00      	nop
 8003e54:	3714      	adds	r7, #20
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr
 8003e5e:	bf00      	nop
 8003e60:	40010000 	.word	0x40010000
 8003e64:	40000400 	.word	0x40000400
 8003e68:	40000800 	.word	0x40000800
 8003e6c:	40000c00 	.word	0x40000c00
 8003e70:	40010400 	.word	0x40010400
 8003e74:	40014000 	.word	0x40014000
 8003e78:	40014400 	.word	0x40014400
 8003e7c:	40014800 	.word	0x40014800
 8003e80:	40001800 	.word	0x40001800
 8003e84:	40001c00 	.word	0x40001c00
 8003e88:	40002000 	.word	0x40002000

08003e8c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b087      	sub	sp, #28
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6a1b      	ldr	r3, [r3, #32]
 8003e9a:	f023 0201 	bic.w	r2, r3, #1
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6a1b      	ldr	r3, [r3, #32]
 8003ea6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	699b      	ldr	r3, [r3, #24]
 8003eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f023 0303 	bic.w	r3, r3, #3
 8003ec2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	68fa      	ldr	r2, [r7, #12]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	f023 0302 	bic.w	r3, r3, #2
 8003ed4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	697a      	ldr	r2, [r7, #20]
 8003edc:	4313      	orrs	r3, r2
 8003ede:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	4a20      	ldr	r2, [pc, #128]	; (8003f64 <TIM_OC1_SetConfig+0xd8>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d003      	beq.n	8003ef0 <TIM_OC1_SetConfig+0x64>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	4a1f      	ldr	r2, [pc, #124]	; (8003f68 <TIM_OC1_SetConfig+0xdc>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d10c      	bne.n	8003f0a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	f023 0308 	bic.w	r3, r3, #8
 8003ef6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	697a      	ldr	r2, [r7, #20]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	f023 0304 	bic.w	r3, r3, #4
 8003f08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4a15      	ldr	r2, [pc, #84]	; (8003f64 <TIM_OC1_SetConfig+0xd8>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d003      	beq.n	8003f1a <TIM_OC1_SetConfig+0x8e>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a14      	ldr	r2, [pc, #80]	; (8003f68 <TIM_OC1_SetConfig+0xdc>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d111      	bne.n	8003f3e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	695b      	ldr	r3, [r3, #20]
 8003f2e:	693a      	ldr	r2, [r7, #16]
 8003f30:	4313      	orrs	r3, r2
 8003f32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	699b      	ldr	r3, [r3, #24]
 8003f38:	693a      	ldr	r2, [r7, #16]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	693a      	ldr	r2, [r7, #16]
 8003f42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	68fa      	ldr	r2, [r7, #12]
 8003f48:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	685a      	ldr	r2, [r3, #4]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	697a      	ldr	r2, [r7, #20]
 8003f56:	621a      	str	r2, [r3, #32]
}
 8003f58:	bf00      	nop
 8003f5a:	371c      	adds	r7, #28
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr
 8003f64:	40010000 	.word	0x40010000
 8003f68:	40010400 	.word	0x40010400

08003f6c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b087      	sub	sp, #28
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a1b      	ldr	r3, [r3, #32]
 8003f7a:	f023 0210 	bic.w	r2, r3, #16
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a1b      	ldr	r3, [r3, #32]
 8003f86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	699b      	ldr	r3, [r3, #24]
 8003f92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fa2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	021b      	lsls	r3, r3, #8
 8003faa:	68fa      	ldr	r2, [r7, #12]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	f023 0320 	bic.w	r3, r3, #32
 8003fb6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	011b      	lsls	r3, r3, #4
 8003fbe:	697a      	ldr	r2, [r7, #20]
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	4a22      	ldr	r2, [pc, #136]	; (8004050 <TIM_OC2_SetConfig+0xe4>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d003      	beq.n	8003fd4 <TIM_OC2_SetConfig+0x68>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	4a21      	ldr	r2, [pc, #132]	; (8004054 <TIM_OC2_SetConfig+0xe8>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d10d      	bne.n	8003ff0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	011b      	lsls	r3, r3, #4
 8003fe2:	697a      	ldr	r2, [r7, #20]
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	4a17      	ldr	r2, [pc, #92]	; (8004050 <TIM_OC2_SetConfig+0xe4>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d003      	beq.n	8004000 <TIM_OC2_SetConfig+0x94>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	4a16      	ldr	r2, [pc, #88]	; (8004054 <TIM_OC2_SetConfig+0xe8>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d113      	bne.n	8004028 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004006:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800400e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	695b      	ldr	r3, [r3, #20]
 8004014:	009b      	lsls	r3, r3, #2
 8004016:	693a      	ldr	r2, [r7, #16]
 8004018:	4313      	orrs	r3, r2
 800401a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	699b      	ldr	r3, [r3, #24]
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	693a      	ldr	r2, [r7, #16]
 8004024:	4313      	orrs	r3, r2
 8004026:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	693a      	ldr	r2, [r7, #16]
 800402c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	68fa      	ldr	r2, [r7, #12]
 8004032:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	685a      	ldr	r2, [r3, #4]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	697a      	ldr	r2, [r7, #20]
 8004040:	621a      	str	r2, [r3, #32]
}
 8004042:	bf00      	nop
 8004044:	371c      	adds	r7, #28
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr
 800404e:	bf00      	nop
 8004050:	40010000 	.word	0x40010000
 8004054:	40010400 	.word	0x40010400

08004058 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004058:	b480      	push	{r7}
 800405a:	b087      	sub	sp, #28
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6a1b      	ldr	r3, [r3, #32]
 8004066:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a1b      	ldr	r3, [r3, #32]
 8004072:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	69db      	ldr	r3, [r3, #28]
 800407e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004086:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f023 0303 	bic.w	r3, r3, #3
 800408e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68fa      	ldr	r2, [r7, #12]
 8004096:	4313      	orrs	r3, r2
 8004098:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80040a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	021b      	lsls	r3, r3, #8
 80040a8:	697a      	ldr	r2, [r7, #20]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4a21      	ldr	r2, [pc, #132]	; (8004138 <TIM_OC3_SetConfig+0xe0>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d003      	beq.n	80040be <TIM_OC3_SetConfig+0x66>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4a20      	ldr	r2, [pc, #128]	; (800413c <TIM_OC3_SetConfig+0xe4>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d10d      	bne.n	80040da <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80040c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	021b      	lsls	r3, r3, #8
 80040cc:	697a      	ldr	r2, [r7, #20]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80040d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	4a16      	ldr	r2, [pc, #88]	; (8004138 <TIM_OC3_SetConfig+0xe0>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d003      	beq.n	80040ea <TIM_OC3_SetConfig+0x92>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	4a15      	ldr	r2, [pc, #84]	; (800413c <TIM_OC3_SetConfig+0xe4>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d113      	bne.n	8004112 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80040f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80040f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	695b      	ldr	r3, [r3, #20]
 80040fe:	011b      	lsls	r3, r3, #4
 8004100:	693a      	ldr	r2, [r7, #16]
 8004102:	4313      	orrs	r3, r2
 8004104:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	699b      	ldr	r3, [r3, #24]
 800410a:	011b      	lsls	r3, r3, #4
 800410c:	693a      	ldr	r2, [r7, #16]
 800410e:	4313      	orrs	r3, r2
 8004110:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	693a      	ldr	r2, [r7, #16]
 8004116:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	68fa      	ldr	r2, [r7, #12]
 800411c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	685a      	ldr	r2, [r3, #4]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	697a      	ldr	r2, [r7, #20]
 800412a:	621a      	str	r2, [r3, #32]
}
 800412c:	bf00      	nop
 800412e:	371c      	adds	r7, #28
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr
 8004138:	40010000 	.word	0x40010000
 800413c:	40010400 	.word	0x40010400

08004140 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004140:	b480      	push	{r7}
 8004142:	b087      	sub	sp, #28
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6a1b      	ldr	r3, [r3, #32]
 800414e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a1b      	ldr	r3, [r3, #32]
 800415a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	69db      	ldr	r3, [r3, #28]
 8004166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800416e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004176:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	021b      	lsls	r3, r3, #8
 800417e:	68fa      	ldr	r2, [r7, #12]
 8004180:	4313      	orrs	r3, r2
 8004182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800418a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	031b      	lsls	r3, r3, #12
 8004192:	693a      	ldr	r2, [r7, #16]
 8004194:	4313      	orrs	r3, r2
 8004196:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	4a12      	ldr	r2, [pc, #72]	; (80041e4 <TIM_OC4_SetConfig+0xa4>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d003      	beq.n	80041a8 <TIM_OC4_SetConfig+0x68>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	4a11      	ldr	r2, [pc, #68]	; (80041e8 <TIM_OC4_SetConfig+0xa8>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d109      	bne.n	80041bc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80041ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	695b      	ldr	r3, [r3, #20]
 80041b4:	019b      	lsls	r3, r3, #6
 80041b6:	697a      	ldr	r2, [r7, #20]
 80041b8:	4313      	orrs	r3, r2
 80041ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	697a      	ldr	r2, [r7, #20]
 80041c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	68fa      	ldr	r2, [r7, #12]
 80041c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	685a      	ldr	r2, [r3, #4]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	693a      	ldr	r2, [r7, #16]
 80041d4:	621a      	str	r2, [r3, #32]
}
 80041d6:	bf00      	nop
 80041d8:	371c      	adds	r7, #28
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr
 80041e2:	bf00      	nop
 80041e4:	40010000 	.word	0x40010000
 80041e8:	40010400 	.word	0x40010400

080041ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b087      	sub	sp, #28
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	60f8      	str	r0, [r7, #12]
 80041f4:	60b9      	str	r1, [r7, #8]
 80041f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6a1b      	ldr	r3, [r3, #32]
 80041fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6a1b      	ldr	r3, [r3, #32]
 8004202:	f023 0201 	bic.w	r2, r3, #1
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	699b      	ldr	r3, [r3, #24]
 800420e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004216:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	011b      	lsls	r3, r3, #4
 800421c:	693a      	ldr	r2, [r7, #16]
 800421e:	4313      	orrs	r3, r2
 8004220:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	f023 030a 	bic.w	r3, r3, #10
 8004228:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800422a:	697a      	ldr	r2, [r7, #20]
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	4313      	orrs	r3, r2
 8004230:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	693a      	ldr	r2, [r7, #16]
 8004236:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	697a      	ldr	r2, [r7, #20]
 800423c:	621a      	str	r2, [r3, #32]
}
 800423e:	bf00      	nop
 8004240:	371c      	adds	r7, #28
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr

0800424a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800424a:	b480      	push	{r7}
 800424c:	b087      	sub	sp, #28
 800424e:	af00      	add	r7, sp, #0
 8004250:	60f8      	str	r0, [r7, #12]
 8004252:	60b9      	str	r1, [r7, #8]
 8004254:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6a1b      	ldr	r3, [r3, #32]
 800425a:	f023 0210 	bic.w	r2, r3, #16
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	699b      	ldr	r3, [r3, #24]
 8004266:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	6a1b      	ldr	r3, [r3, #32]
 800426c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004274:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	031b      	lsls	r3, r3, #12
 800427a:	697a      	ldr	r2, [r7, #20]
 800427c:	4313      	orrs	r3, r2
 800427e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004286:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	011b      	lsls	r3, r3, #4
 800428c:	693a      	ldr	r2, [r7, #16]
 800428e:	4313      	orrs	r3, r2
 8004290:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	697a      	ldr	r2, [r7, #20]
 8004296:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	693a      	ldr	r2, [r7, #16]
 800429c:	621a      	str	r2, [r3, #32]
}
 800429e:	bf00      	nop
 80042a0:	371c      	adds	r7, #28
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr

080042aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80042aa:	b480      	push	{r7}
 80042ac:	b085      	sub	sp, #20
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	6078      	str	r0, [r7, #4]
 80042b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80042c2:	683a      	ldr	r2, [r7, #0]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	f043 0307 	orr.w	r3, r3, #7
 80042cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	68fa      	ldr	r2, [r7, #12]
 80042d2:	609a      	str	r2, [r3, #8]
}
 80042d4:	bf00      	nop
 80042d6:	3714      	adds	r7, #20
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr

080042e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b087      	sub	sp, #28
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	60f8      	str	r0, [r7, #12]
 80042e8:	60b9      	str	r1, [r7, #8]
 80042ea:	607a      	str	r2, [r7, #4]
 80042ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	021a      	lsls	r2, r3, #8
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	431a      	orrs	r2, r3
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	4313      	orrs	r3, r2
 8004308:	697a      	ldr	r2, [r7, #20]
 800430a:	4313      	orrs	r3, r2
 800430c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	697a      	ldr	r2, [r7, #20]
 8004312:	609a      	str	r2, [r3, #8]
}
 8004314:	bf00      	nop
 8004316:	371c      	adds	r7, #28
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr

08004320 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004320:	b480      	push	{r7}
 8004322:	b087      	sub	sp, #28
 8004324:	af00      	add	r7, sp, #0
 8004326:	60f8      	str	r0, [r7, #12]
 8004328:	60b9      	str	r1, [r7, #8]
 800432a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	f003 031f 	and.w	r3, r3, #31
 8004332:	2201      	movs	r2, #1
 8004334:	fa02 f303 	lsl.w	r3, r2, r3
 8004338:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	6a1a      	ldr	r2, [r3, #32]
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	43db      	mvns	r3, r3
 8004342:	401a      	ands	r2, r3
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6a1a      	ldr	r2, [r3, #32]
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	f003 031f 	and.w	r3, r3, #31
 8004352:	6879      	ldr	r1, [r7, #4]
 8004354:	fa01 f303 	lsl.w	r3, r1, r3
 8004358:	431a      	orrs	r2, r3
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	621a      	str	r2, [r3, #32]
}
 800435e:	bf00      	nop
 8004360:	371c      	adds	r7, #28
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr
	...

0800436c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800436c:	b480      	push	{r7}
 800436e:	b085      	sub	sp, #20
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
 8004374:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800437c:	2b01      	cmp	r3, #1
 800437e:	d101      	bne.n	8004384 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004380:	2302      	movs	r3, #2
 8004382:	e05a      	b.n	800443a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2201      	movs	r2, #1
 8004388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2202      	movs	r2, #2
 8004390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	68fa      	ldr	r2, [r7, #12]
 80043b2:	4313      	orrs	r3, r2
 80043b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	68fa      	ldr	r2, [r7, #12]
 80043bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a21      	ldr	r2, [pc, #132]	; (8004448 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d022      	beq.n	800440e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043d0:	d01d      	beq.n	800440e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a1d      	ldr	r2, [pc, #116]	; (800444c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d018      	beq.n	800440e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a1b      	ldr	r2, [pc, #108]	; (8004450 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d013      	beq.n	800440e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a1a      	ldr	r2, [pc, #104]	; (8004454 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d00e      	beq.n	800440e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a18      	ldr	r2, [pc, #96]	; (8004458 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d009      	beq.n	800440e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a17      	ldr	r2, [pc, #92]	; (800445c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d004      	beq.n	800440e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a15      	ldr	r2, [pc, #84]	; (8004460 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d10c      	bne.n	8004428 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004414:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	68ba      	ldr	r2, [r7, #8]
 800441c:	4313      	orrs	r3, r2
 800441e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	68ba      	ldr	r2, [r7, #8]
 8004426:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004438:	2300      	movs	r3, #0
}
 800443a:	4618      	mov	r0, r3
 800443c:	3714      	adds	r7, #20
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr
 8004446:	bf00      	nop
 8004448:	40010000 	.word	0x40010000
 800444c:	40000400 	.word	0x40000400
 8004450:	40000800 	.word	0x40000800
 8004454:	40000c00 	.word	0x40000c00
 8004458:	40010400 	.word	0x40010400
 800445c:	40014000 	.word	0x40014000
 8004460:	40001800 	.word	0x40001800

08004464 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004464:	b480      	push	{r7}
 8004466:	b085      	sub	sp, #20
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800446e:	2300      	movs	r3, #0
 8004470:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004478:	2b01      	cmp	r3, #1
 800447a:	d101      	bne.n	8004480 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800447c:	2302      	movs	r3, #2
 800447e:	e03d      	b.n	80044fc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2201      	movs	r2, #1
 8004484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	4313      	orrs	r3, r2
 8004494:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	4313      	orrs	r3, r2
 80044a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	4313      	orrs	r3, r2
 80044b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4313      	orrs	r3, r2
 80044be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	691b      	ldr	r3, [r3, #16]
 80044ca:	4313      	orrs	r3, r2
 80044cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	695b      	ldr	r3, [r3, #20]
 80044d8:	4313      	orrs	r3, r2
 80044da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	69db      	ldr	r3, [r3, #28]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	68fa      	ldr	r2, [r7, #12]
 80044f0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044fa:	2300      	movs	r3, #0
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3714      	adds	r7, #20
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr

08004508 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b082      	sub	sp, #8
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d101      	bne.n	800451a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e03f      	b.n	800459a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004520:	b2db      	uxtb	r3, r3
 8004522:	2b00      	cmp	r3, #0
 8004524:	d106      	bne.n	8004534 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f7fd f88c 	bl	800164c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2224      	movs	r2, #36	; 0x24
 8004538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	68da      	ldr	r2, [r3, #12]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800454a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f000 f829 	bl	80045a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	691a      	ldr	r2, [r3, #16]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004560:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	695a      	ldr	r2, [r3, #20]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004570:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	68da      	ldr	r2, [r3, #12]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004580:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2200      	movs	r2, #0
 8004586:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2220      	movs	r2, #32
 800458c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2220      	movs	r2, #32
 8004594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004598:	2300      	movs	r3, #0
}
 800459a:	4618      	mov	r0, r3
 800459c:	3708      	adds	r7, #8
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
	...

080045a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045a8:	b0c0      	sub	sp, #256	; 0x100
 80045aa:	af00      	add	r7, sp, #0
 80045ac:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	691b      	ldr	r3, [r3, #16]
 80045b8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80045bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045c0:	68d9      	ldr	r1, [r3, #12]
 80045c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	ea40 0301 	orr.w	r3, r0, r1
 80045cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80045ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045d2:	689a      	ldr	r2, [r3, #8]
 80045d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	431a      	orrs	r2, r3
 80045dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045e0:	695b      	ldr	r3, [r3, #20]
 80045e2:	431a      	orrs	r2, r3
 80045e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045e8:	69db      	ldr	r3, [r3, #28]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80045f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	68db      	ldr	r3, [r3, #12]
 80045f8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80045fc:	f021 010c 	bic.w	r1, r1, #12
 8004600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800460a:	430b      	orrs	r3, r1
 800460c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800460e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	695b      	ldr	r3, [r3, #20]
 8004616:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800461a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800461e:	6999      	ldr	r1, [r3, #24]
 8004620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	ea40 0301 	orr.w	r3, r0, r1
 800462a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800462c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	4b8f      	ldr	r3, [pc, #572]	; (8004870 <UART_SetConfig+0x2cc>)
 8004634:	429a      	cmp	r2, r3
 8004636:	d005      	beq.n	8004644 <UART_SetConfig+0xa0>
 8004638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	4b8d      	ldr	r3, [pc, #564]	; (8004874 <UART_SetConfig+0x2d0>)
 8004640:	429a      	cmp	r2, r3
 8004642:	d104      	bne.n	800464e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004644:	f7fe fba6 	bl	8002d94 <HAL_RCC_GetPCLK2Freq>
 8004648:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800464c:	e003      	b.n	8004656 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800464e:	f7fe fb8d 	bl	8002d6c <HAL_RCC_GetPCLK1Freq>
 8004652:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004656:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800465a:	69db      	ldr	r3, [r3, #28]
 800465c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004660:	f040 810c 	bne.w	800487c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004664:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004668:	2200      	movs	r2, #0
 800466a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800466e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004672:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004676:	4622      	mov	r2, r4
 8004678:	462b      	mov	r3, r5
 800467a:	1891      	adds	r1, r2, r2
 800467c:	65b9      	str	r1, [r7, #88]	; 0x58
 800467e:	415b      	adcs	r3, r3
 8004680:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004682:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004686:	4621      	mov	r1, r4
 8004688:	eb12 0801 	adds.w	r8, r2, r1
 800468c:	4629      	mov	r1, r5
 800468e:	eb43 0901 	adc.w	r9, r3, r1
 8004692:	f04f 0200 	mov.w	r2, #0
 8004696:	f04f 0300 	mov.w	r3, #0
 800469a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800469e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80046a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80046a6:	4690      	mov	r8, r2
 80046a8:	4699      	mov	r9, r3
 80046aa:	4623      	mov	r3, r4
 80046ac:	eb18 0303 	adds.w	r3, r8, r3
 80046b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80046b4:	462b      	mov	r3, r5
 80046b6:	eb49 0303 	adc.w	r3, r9, r3
 80046ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80046be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80046ca:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80046ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80046d2:	460b      	mov	r3, r1
 80046d4:	18db      	adds	r3, r3, r3
 80046d6:	653b      	str	r3, [r7, #80]	; 0x50
 80046d8:	4613      	mov	r3, r2
 80046da:	eb42 0303 	adc.w	r3, r2, r3
 80046de:	657b      	str	r3, [r7, #84]	; 0x54
 80046e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80046e4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80046e8:	f7fb fd8c 	bl	8000204 <__aeabi_uldivmod>
 80046ec:	4602      	mov	r2, r0
 80046ee:	460b      	mov	r3, r1
 80046f0:	4b61      	ldr	r3, [pc, #388]	; (8004878 <UART_SetConfig+0x2d4>)
 80046f2:	fba3 2302 	umull	r2, r3, r3, r2
 80046f6:	095b      	lsrs	r3, r3, #5
 80046f8:	011c      	lsls	r4, r3, #4
 80046fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046fe:	2200      	movs	r2, #0
 8004700:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004704:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004708:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800470c:	4642      	mov	r2, r8
 800470e:	464b      	mov	r3, r9
 8004710:	1891      	adds	r1, r2, r2
 8004712:	64b9      	str	r1, [r7, #72]	; 0x48
 8004714:	415b      	adcs	r3, r3
 8004716:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004718:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800471c:	4641      	mov	r1, r8
 800471e:	eb12 0a01 	adds.w	sl, r2, r1
 8004722:	4649      	mov	r1, r9
 8004724:	eb43 0b01 	adc.w	fp, r3, r1
 8004728:	f04f 0200 	mov.w	r2, #0
 800472c:	f04f 0300 	mov.w	r3, #0
 8004730:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004734:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004738:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800473c:	4692      	mov	sl, r2
 800473e:	469b      	mov	fp, r3
 8004740:	4643      	mov	r3, r8
 8004742:	eb1a 0303 	adds.w	r3, sl, r3
 8004746:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800474a:	464b      	mov	r3, r9
 800474c:	eb4b 0303 	adc.w	r3, fp, r3
 8004750:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004760:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004764:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004768:	460b      	mov	r3, r1
 800476a:	18db      	adds	r3, r3, r3
 800476c:	643b      	str	r3, [r7, #64]	; 0x40
 800476e:	4613      	mov	r3, r2
 8004770:	eb42 0303 	adc.w	r3, r2, r3
 8004774:	647b      	str	r3, [r7, #68]	; 0x44
 8004776:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800477a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800477e:	f7fb fd41 	bl	8000204 <__aeabi_uldivmod>
 8004782:	4602      	mov	r2, r0
 8004784:	460b      	mov	r3, r1
 8004786:	4611      	mov	r1, r2
 8004788:	4b3b      	ldr	r3, [pc, #236]	; (8004878 <UART_SetConfig+0x2d4>)
 800478a:	fba3 2301 	umull	r2, r3, r3, r1
 800478e:	095b      	lsrs	r3, r3, #5
 8004790:	2264      	movs	r2, #100	; 0x64
 8004792:	fb02 f303 	mul.w	r3, r2, r3
 8004796:	1acb      	subs	r3, r1, r3
 8004798:	00db      	lsls	r3, r3, #3
 800479a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800479e:	4b36      	ldr	r3, [pc, #216]	; (8004878 <UART_SetConfig+0x2d4>)
 80047a0:	fba3 2302 	umull	r2, r3, r3, r2
 80047a4:	095b      	lsrs	r3, r3, #5
 80047a6:	005b      	lsls	r3, r3, #1
 80047a8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80047ac:	441c      	add	r4, r3
 80047ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047b2:	2200      	movs	r2, #0
 80047b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80047b8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80047bc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80047c0:	4642      	mov	r2, r8
 80047c2:	464b      	mov	r3, r9
 80047c4:	1891      	adds	r1, r2, r2
 80047c6:	63b9      	str	r1, [r7, #56]	; 0x38
 80047c8:	415b      	adcs	r3, r3
 80047ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80047d0:	4641      	mov	r1, r8
 80047d2:	1851      	adds	r1, r2, r1
 80047d4:	6339      	str	r1, [r7, #48]	; 0x30
 80047d6:	4649      	mov	r1, r9
 80047d8:	414b      	adcs	r3, r1
 80047da:	637b      	str	r3, [r7, #52]	; 0x34
 80047dc:	f04f 0200 	mov.w	r2, #0
 80047e0:	f04f 0300 	mov.w	r3, #0
 80047e4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80047e8:	4659      	mov	r1, fp
 80047ea:	00cb      	lsls	r3, r1, #3
 80047ec:	4651      	mov	r1, sl
 80047ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047f2:	4651      	mov	r1, sl
 80047f4:	00ca      	lsls	r2, r1, #3
 80047f6:	4610      	mov	r0, r2
 80047f8:	4619      	mov	r1, r3
 80047fa:	4603      	mov	r3, r0
 80047fc:	4642      	mov	r2, r8
 80047fe:	189b      	adds	r3, r3, r2
 8004800:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004804:	464b      	mov	r3, r9
 8004806:	460a      	mov	r2, r1
 8004808:	eb42 0303 	adc.w	r3, r2, r3
 800480c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	2200      	movs	r2, #0
 8004818:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800481c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004820:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004824:	460b      	mov	r3, r1
 8004826:	18db      	adds	r3, r3, r3
 8004828:	62bb      	str	r3, [r7, #40]	; 0x28
 800482a:	4613      	mov	r3, r2
 800482c:	eb42 0303 	adc.w	r3, r2, r3
 8004830:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004832:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004836:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800483a:	f7fb fce3 	bl	8000204 <__aeabi_uldivmod>
 800483e:	4602      	mov	r2, r0
 8004840:	460b      	mov	r3, r1
 8004842:	4b0d      	ldr	r3, [pc, #52]	; (8004878 <UART_SetConfig+0x2d4>)
 8004844:	fba3 1302 	umull	r1, r3, r3, r2
 8004848:	095b      	lsrs	r3, r3, #5
 800484a:	2164      	movs	r1, #100	; 0x64
 800484c:	fb01 f303 	mul.w	r3, r1, r3
 8004850:	1ad3      	subs	r3, r2, r3
 8004852:	00db      	lsls	r3, r3, #3
 8004854:	3332      	adds	r3, #50	; 0x32
 8004856:	4a08      	ldr	r2, [pc, #32]	; (8004878 <UART_SetConfig+0x2d4>)
 8004858:	fba2 2303 	umull	r2, r3, r2, r3
 800485c:	095b      	lsrs	r3, r3, #5
 800485e:	f003 0207 	and.w	r2, r3, #7
 8004862:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4422      	add	r2, r4
 800486a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800486c:	e105      	b.n	8004a7a <UART_SetConfig+0x4d6>
 800486e:	bf00      	nop
 8004870:	40011000 	.word	0x40011000
 8004874:	40011400 	.word	0x40011400
 8004878:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800487c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004880:	2200      	movs	r2, #0
 8004882:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004886:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800488a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800488e:	4642      	mov	r2, r8
 8004890:	464b      	mov	r3, r9
 8004892:	1891      	adds	r1, r2, r2
 8004894:	6239      	str	r1, [r7, #32]
 8004896:	415b      	adcs	r3, r3
 8004898:	627b      	str	r3, [r7, #36]	; 0x24
 800489a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800489e:	4641      	mov	r1, r8
 80048a0:	1854      	adds	r4, r2, r1
 80048a2:	4649      	mov	r1, r9
 80048a4:	eb43 0501 	adc.w	r5, r3, r1
 80048a8:	f04f 0200 	mov.w	r2, #0
 80048ac:	f04f 0300 	mov.w	r3, #0
 80048b0:	00eb      	lsls	r3, r5, #3
 80048b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80048b6:	00e2      	lsls	r2, r4, #3
 80048b8:	4614      	mov	r4, r2
 80048ba:	461d      	mov	r5, r3
 80048bc:	4643      	mov	r3, r8
 80048be:	18e3      	adds	r3, r4, r3
 80048c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80048c4:	464b      	mov	r3, r9
 80048c6:	eb45 0303 	adc.w	r3, r5, r3
 80048ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80048ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	2200      	movs	r2, #0
 80048d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80048da:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80048de:	f04f 0200 	mov.w	r2, #0
 80048e2:	f04f 0300 	mov.w	r3, #0
 80048e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80048ea:	4629      	mov	r1, r5
 80048ec:	008b      	lsls	r3, r1, #2
 80048ee:	4621      	mov	r1, r4
 80048f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048f4:	4621      	mov	r1, r4
 80048f6:	008a      	lsls	r2, r1, #2
 80048f8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80048fc:	f7fb fc82 	bl	8000204 <__aeabi_uldivmod>
 8004900:	4602      	mov	r2, r0
 8004902:	460b      	mov	r3, r1
 8004904:	4b60      	ldr	r3, [pc, #384]	; (8004a88 <UART_SetConfig+0x4e4>)
 8004906:	fba3 2302 	umull	r2, r3, r3, r2
 800490a:	095b      	lsrs	r3, r3, #5
 800490c:	011c      	lsls	r4, r3, #4
 800490e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004912:	2200      	movs	r2, #0
 8004914:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004918:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800491c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004920:	4642      	mov	r2, r8
 8004922:	464b      	mov	r3, r9
 8004924:	1891      	adds	r1, r2, r2
 8004926:	61b9      	str	r1, [r7, #24]
 8004928:	415b      	adcs	r3, r3
 800492a:	61fb      	str	r3, [r7, #28]
 800492c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004930:	4641      	mov	r1, r8
 8004932:	1851      	adds	r1, r2, r1
 8004934:	6139      	str	r1, [r7, #16]
 8004936:	4649      	mov	r1, r9
 8004938:	414b      	adcs	r3, r1
 800493a:	617b      	str	r3, [r7, #20]
 800493c:	f04f 0200 	mov.w	r2, #0
 8004940:	f04f 0300 	mov.w	r3, #0
 8004944:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004948:	4659      	mov	r1, fp
 800494a:	00cb      	lsls	r3, r1, #3
 800494c:	4651      	mov	r1, sl
 800494e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004952:	4651      	mov	r1, sl
 8004954:	00ca      	lsls	r2, r1, #3
 8004956:	4610      	mov	r0, r2
 8004958:	4619      	mov	r1, r3
 800495a:	4603      	mov	r3, r0
 800495c:	4642      	mov	r2, r8
 800495e:	189b      	adds	r3, r3, r2
 8004960:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004964:	464b      	mov	r3, r9
 8004966:	460a      	mov	r2, r1
 8004968:	eb42 0303 	adc.w	r3, r2, r3
 800496c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	2200      	movs	r2, #0
 8004978:	67bb      	str	r3, [r7, #120]	; 0x78
 800497a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800497c:	f04f 0200 	mov.w	r2, #0
 8004980:	f04f 0300 	mov.w	r3, #0
 8004984:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004988:	4649      	mov	r1, r9
 800498a:	008b      	lsls	r3, r1, #2
 800498c:	4641      	mov	r1, r8
 800498e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004992:	4641      	mov	r1, r8
 8004994:	008a      	lsls	r2, r1, #2
 8004996:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800499a:	f7fb fc33 	bl	8000204 <__aeabi_uldivmod>
 800499e:	4602      	mov	r2, r0
 80049a0:	460b      	mov	r3, r1
 80049a2:	4b39      	ldr	r3, [pc, #228]	; (8004a88 <UART_SetConfig+0x4e4>)
 80049a4:	fba3 1302 	umull	r1, r3, r3, r2
 80049a8:	095b      	lsrs	r3, r3, #5
 80049aa:	2164      	movs	r1, #100	; 0x64
 80049ac:	fb01 f303 	mul.w	r3, r1, r3
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	011b      	lsls	r3, r3, #4
 80049b4:	3332      	adds	r3, #50	; 0x32
 80049b6:	4a34      	ldr	r2, [pc, #208]	; (8004a88 <UART_SetConfig+0x4e4>)
 80049b8:	fba2 2303 	umull	r2, r3, r2, r3
 80049bc:	095b      	lsrs	r3, r3, #5
 80049be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049c2:	441c      	add	r4, r3
 80049c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049c8:	2200      	movs	r2, #0
 80049ca:	673b      	str	r3, [r7, #112]	; 0x70
 80049cc:	677a      	str	r2, [r7, #116]	; 0x74
 80049ce:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80049d2:	4642      	mov	r2, r8
 80049d4:	464b      	mov	r3, r9
 80049d6:	1891      	adds	r1, r2, r2
 80049d8:	60b9      	str	r1, [r7, #8]
 80049da:	415b      	adcs	r3, r3
 80049dc:	60fb      	str	r3, [r7, #12]
 80049de:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80049e2:	4641      	mov	r1, r8
 80049e4:	1851      	adds	r1, r2, r1
 80049e6:	6039      	str	r1, [r7, #0]
 80049e8:	4649      	mov	r1, r9
 80049ea:	414b      	adcs	r3, r1
 80049ec:	607b      	str	r3, [r7, #4]
 80049ee:	f04f 0200 	mov.w	r2, #0
 80049f2:	f04f 0300 	mov.w	r3, #0
 80049f6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80049fa:	4659      	mov	r1, fp
 80049fc:	00cb      	lsls	r3, r1, #3
 80049fe:	4651      	mov	r1, sl
 8004a00:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a04:	4651      	mov	r1, sl
 8004a06:	00ca      	lsls	r2, r1, #3
 8004a08:	4610      	mov	r0, r2
 8004a0a:	4619      	mov	r1, r3
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	4642      	mov	r2, r8
 8004a10:	189b      	adds	r3, r3, r2
 8004a12:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a14:	464b      	mov	r3, r9
 8004a16:	460a      	mov	r2, r1
 8004a18:	eb42 0303 	adc.w	r3, r2, r3
 8004a1c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004a1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	2200      	movs	r2, #0
 8004a26:	663b      	str	r3, [r7, #96]	; 0x60
 8004a28:	667a      	str	r2, [r7, #100]	; 0x64
 8004a2a:	f04f 0200 	mov.w	r2, #0
 8004a2e:	f04f 0300 	mov.w	r3, #0
 8004a32:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004a36:	4649      	mov	r1, r9
 8004a38:	008b      	lsls	r3, r1, #2
 8004a3a:	4641      	mov	r1, r8
 8004a3c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a40:	4641      	mov	r1, r8
 8004a42:	008a      	lsls	r2, r1, #2
 8004a44:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004a48:	f7fb fbdc 	bl	8000204 <__aeabi_uldivmod>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	460b      	mov	r3, r1
 8004a50:	4b0d      	ldr	r3, [pc, #52]	; (8004a88 <UART_SetConfig+0x4e4>)
 8004a52:	fba3 1302 	umull	r1, r3, r3, r2
 8004a56:	095b      	lsrs	r3, r3, #5
 8004a58:	2164      	movs	r1, #100	; 0x64
 8004a5a:	fb01 f303 	mul.w	r3, r1, r3
 8004a5e:	1ad3      	subs	r3, r2, r3
 8004a60:	011b      	lsls	r3, r3, #4
 8004a62:	3332      	adds	r3, #50	; 0x32
 8004a64:	4a08      	ldr	r2, [pc, #32]	; (8004a88 <UART_SetConfig+0x4e4>)
 8004a66:	fba2 2303 	umull	r2, r3, r2, r3
 8004a6a:	095b      	lsrs	r3, r3, #5
 8004a6c:	f003 020f 	and.w	r2, r3, #15
 8004a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4422      	add	r2, r4
 8004a78:	609a      	str	r2, [r3, #8]
}
 8004a7a:	bf00      	nop
 8004a7c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004a80:	46bd      	mov	sp, r7
 8004a82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a86:	bf00      	nop
 8004a88:	51eb851f 	.word	0x51eb851f

08004a8c <__errno>:
 8004a8c:	4b01      	ldr	r3, [pc, #4]	; (8004a94 <__errno+0x8>)
 8004a8e:	6818      	ldr	r0, [r3, #0]
 8004a90:	4770      	bx	lr
 8004a92:	bf00      	nop
 8004a94:	2000000c 	.word	0x2000000c

08004a98 <__libc_init_array>:
 8004a98:	b570      	push	{r4, r5, r6, lr}
 8004a9a:	4d0d      	ldr	r5, [pc, #52]	; (8004ad0 <__libc_init_array+0x38>)
 8004a9c:	4c0d      	ldr	r4, [pc, #52]	; (8004ad4 <__libc_init_array+0x3c>)
 8004a9e:	1b64      	subs	r4, r4, r5
 8004aa0:	10a4      	asrs	r4, r4, #2
 8004aa2:	2600      	movs	r6, #0
 8004aa4:	42a6      	cmp	r6, r4
 8004aa6:	d109      	bne.n	8004abc <__libc_init_array+0x24>
 8004aa8:	4d0b      	ldr	r5, [pc, #44]	; (8004ad8 <__libc_init_array+0x40>)
 8004aaa:	4c0c      	ldr	r4, [pc, #48]	; (8004adc <__libc_init_array+0x44>)
 8004aac:	f000 fe04 	bl	80056b8 <_init>
 8004ab0:	1b64      	subs	r4, r4, r5
 8004ab2:	10a4      	asrs	r4, r4, #2
 8004ab4:	2600      	movs	r6, #0
 8004ab6:	42a6      	cmp	r6, r4
 8004ab8:	d105      	bne.n	8004ac6 <__libc_init_array+0x2e>
 8004aba:	bd70      	pop	{r4, r5, r6, pc}
 8004abc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ac0:	4798      	blx	r3
 8004ac2:	3601      	adds	r6, #1
 8004ac4:	e7ee      	b.n	8004aa4 <__libc_init_array+0xc>
 8004ac6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004aca:	4798      	blx	r3
 8004acc:	3601      	adds	r6, #1
 8004ace:	e7f2      	b.n	8004ab6 <__libc_init_array+0x1e>
 8004ad0:	0800575c 	.word	0x0800575c
 8004ad4:	0800575c 	.word	0x0800575c
 8004ad8:	0800575c 	.word	0x0800575c
 8004adc:	08005760 	.word	0x08005760

08004ae0 <memcmp>:
 8004ae0:	b510      	push	{r4, lr}
 8004ae2:	3901      	subs	r1, #1
 8004ae4:	4402      	add	r2, r0
 8004ae6:	4290      	cmp	r0, r2
 8004ae8:	d101      	bne.n	8004aee <memcmp+0xe>
 8004aea:	2000      	movs	r0, #0
 8004aec:	e005      	b.n	8004afa <memcmp+0x1a>
 8004aee:	7803      	ldrb	r3, [r0, #0]
 8004af0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004af4:	42a3      	cmp	r3, r4
 8004af6:	d001      	beq.n	8004afc <memcmp+0x1c>
 8004af8:	1b18      	subs	r0, r3, r4
 8004afa:	bd10      	pop	{r4, pc}
 8004afc:	3001      	adds	r0, #1
 8004afe:	e7f2      	b.n	8004ae6 <memcmp+0x6>

08004b00 <memset>:
 8004b00:	4402      	add	r2, r0
 8004b02:	4603      	mov	r3, r0
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d100      	bne.n	8004b0a <memset+0xa>
 8004b08:	4770      	bx	lr
 8004b0a:	f803 1b01 	strb.w	r1, [r3], #1
 8004b0e:	e7f9      	b.n	8004b04 <memset+0x4>

08004b10 <_puts_r>:
 8004b10:	b570      	push	{r4, r5, r6, lr}
 8004b12:	460e      	mov	r6, r1
 8004b14:	4605      	mov	r5, r0
 8004b16:	b118      	cbz	r0, 8004b20 <_puts_r+0x10>
 8004b18:	6983      	ldr	r3, [r0, #24]
 8004b1a:	b90b      	cbnz	r3, 8004b20 <_puts_r+0x10>
 8004b1c:	f000 fb16 	bl	800514c <__sinit>
 8004b20:	69ab      	ldr	r3, [r5, #24]
 8004b22:	68ac      	ldr	r4, [r5, #8]
 8004b24:	b913      	cbnz	r3, 8004b2c <_puts_r+0x1c>
 8004b26:	4628      	mov	r0, r5
 8004b28:	f000 fb10 	bl	800514c <__sinit>
 8004b2c:	4b2c      	ldr	r3, [pc, #176]	; (8004be0 <_puts_r+0xd0>)
 8004b2e:	429c      	cmp	r4, r3
 8004b30:	d120      	bne.n	8004b74 <_puts_r+0x64>
 8004b32:	686c      	ldr	r4, [r5, #4]
 8004b34:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004b36:	07db      	lsls	r3, r3, #31
 8004b38:	d405      	bmi.n	8004b46 <_puts_r+0x36>
 8004b3a:	89a3      	ldrh	r3, [r4, #12]
 8004b3c:	0598      	lsls	r0, r3, #22
 8004b3e:	d402      	bmi.n	8004b46 <_puts_r+0x36>
 8004b40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b42:	f000 fba1 	bl	8005288 <__retarget_lock_acquire_recursive>
 8004b46:	89a3      	ldrh	r3, [r4, #12]
 8004b48:	0719      	lsls	r1, r3, #28
 8004b4a:	d51d      	bpl.n	8004b88 <_puts_r+0x78>
 8004b4c:	6923      	ldr	r3, [r4, #16]
 8004b4e:	b1db      	cbz	r3, 8004b88 <_puts_r+0x78>
 8004b50:	3e01      	subs	r6, #1
 8004b52:	68a3      	ldr	r3, [r4, #8]
 8004b54:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004b58:	3b01      	subs	r3, #1
 8004b5a:	60a3      	str	r3, [r4, #8]
 8004b5c:	bb39      	cbnz	r1, 8004bae <_puts_r+0x9e>
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	da38      	bge.n	8004bd4 <_puts_r+0xc4>
 8004b62:	4622      	mov	r2, r4
 8004b64:	210a      	movs	r1, #10
 8004b66:	4628      	mov	r0, r5
 8004b68:	f000 f916 	bl	8004d98 <__swbuf_r>
 8004b6c:	3001      	adds	r0, #1
 8004b6e:	d011      	beq.n	8004b94 <_puts_r+0x84>
 8004b70:	250a      	movs	r5, #10
 8004b72:	e011      	b.n	8004b98 <_puts_r+0x88>
 8004b74:	4b1b      	ldr	r3, [pc, #108]	; (8004be4 <_puts_r+0xd4>)
 8004b76:	429c      	cmp	r4, r3
 8004b78:	d101      	bne.n	8004b7e <_puts_r+0x6e>
 8004b7a:	68ac      	ldr	r4, [r5, #8]
 8004b7c:	e7da      	b.n	8004b34 <_puts_r+0x24>
 8004b7e:	4b1a      	ldr	r3, [pc, #104]	; (8004be8 <_puts_r+0xd8>)
 8004b80:	429c      	cmp	r4, r3
 8004b82:	bf08      	it	eq
 8004b84:	68ec      	ldreq	r4, [r5, #12]
 8004b86:	e7d5      	b.n	8004b34 <_puts_r+0x24>
 8004b88:	4621      	mov	r1, r4
 8004b8a:	4628      	mov	r0, r5
 8004b8c:	f000 f956 	bl	8004e3c <__swsetup_r>
 8004b90:	2800      	cmp	r0, #0
 8004b92:	d0dd      	beq.n	8004b50 <_puts_r+0x40>
 8004b94:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004b98:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004b9a:	07da      	lsls	r2, r3, #31
 8004b9c:	d405      	bmi.n	8004baa <_puts_r+0x9a>
 8004b9e:	89a3      	ldrh	r3, [r4, #12]
 8004ba0:	059b      	lsls	r3, r3, #22
 8004ba2:	d402      	bmi.n	8004baa <_puts_r+0x9a>
 8004ba4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ba6:	f000 fb70 	bl	800528a <__retarget_lock_release_recursive>
 8004baa:	4628      	mov	r0, r5
 8004bac:	bd70      	pop	{r4, r5, r6, pc}
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	da04      	bge.n	8004bbc <_puts_r+0xac>
 8004bb2:	69a2      	ldr	r2, [r4, #24]
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	dc06      	bgt.n	8004bc6 <_puts_r+0xb6>
 8004bb8:	290a      	cmp	r1, #10
 8004bba:	d004      	beq.n	8004bc6 <_puts_r+0xb6>
 8004bbc:	6823      	ldr	r3, [r4, #0]
 8004bbe:	1c5a      	adds	r2, r3, #1
 8004bc0:	6022      	str	r2, [r4, #0]
 8004bc2:	7019      	strb	r1, [r3, #0]
 8004bc4:	e7c5      	b.n	8004b52 <_puts_r+0x42>
 8004bc6:	4622      	mov	r2, r4
 8004bc8:	4628      	mov	r0, r5
 8004bca:	f000 f8e5 	bl	8004d98 <__swbuf_r>
 8004bce:	3001      	adds	r0, #1
 8004bd0:	d1bf      	bne.n	8004b52 <_puts_r+0x42>
 8004bd2:	e7df      	b.n	8004b94 <_puts_r+0x84>
 8004bd4:	6823      	ldr	r3, [r4, #0]
 8004bd6:	250a      	movs	r5, #10
 8004bd8:	1c5a      	adds	r2, r3, #1
 8004bda:	6022      	str	r2, [r4, #0]
 8004bdc:	701d      	strb	r5, [r3, #0]
 8004bde:	e7db      	b.n	8004b98 <_puts_r+0x88>
 8004be0:	08005714 	.word	0x08005714
 8004be4:	08005734 	.word	0x08005734
 8004be8:	080056f4 	.word	0x080056f4

08004bec <puts>:
 8004bec:	4b02      	ldr	r3, [pc, #8]	; (8004bf8 <puts+0xc>)
 8004bee:	4601      	mov	r1, r0
 8004bf0:	6818      	ldr	r0, [r3, #0]
 8004bf2:	f7ff bf8d 	b.w	8004b10 <_puts_r>
 8004bf6:	bf00      	nop
 8004bf8:	2000000c 	.word	0x2000000c

08004bfc <setbuf>:
 8004bfc:	2900      	cmp	r1, #0
 8004bfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c02:	bf0c      	ite	eq
 8004c04:	2202      	moveq	r2, #2
 8004c06:	2200      	movne	r2, #0
 8004c08:	f000 b800 	b.w	8004c0c <setvbuf>

08004c0c <setvbuf>:
 8004c0c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004c10:	461d      	mov	r5, r3
 8004c12:	4b5d      	ldr	r3, [pc, #372]	; (8004d88 <setvbuf+0x17c>)
 8004c14:	681f      	ldr	r7, [r3, #0]
 8004c16:	4604      	mov	r4, r0
 8004c18:	460e      	mov	r6, r1
 8004c1a:	4690      	mov	r8, r2
 8004c1c:	b127      	cbz	r7, 8004c28 <setvbuf+0x1c>
 8004c1e:	69bb      	ldr	r3, [r7, #24]
 8004c20:	b913      	cbnz	r3, 8004c28 <setvbuf+0x1c>
 8004c22:	4638      	mov	r0, r7
 8004c24:	f000 fa92 	bl	800514c <__sinit>
 8004c28:	4b58      	ldr	r3, [pc, #352]	; (8004d8c <setvbuf+0x180>)
 8004c2a:	429c      	cmp	r4, r3
 8004c2c:	d167      	bne.n	8004cfe <setvbuf+0xf2>
 8004c2e:	687c      	ldr	r4, [r7, #4]
 8004c30:	f1b8 0f02 	cmp.w	r8, #2
 8004c34:	d006      	beq.n	8004c44 <setvbuf+0x38>
 8004c36:	f1b8 0f01 	cmp.w	r8, #1
 8004c3a:	f200 809f 	bhi.w	8004d7c <setvbuf+0x170>
 8004c3e:	2d00      	cmp	r5, #0
 8004c40:	f2c0 809c 	blt.w	8004d7c <setvbuf+0x170>
 8004c44:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004c46:	07db      	lsls	r3, r3, #31
 8004c48:	d405      	bmi.n	8004c56 <setvbuf+0x4a>
 8004c4a:	89a3      	ldrh	r3, [r4, #12]
 8004c4c:	0598      	lsls	r0, r3, #22
 8004c4e:	d402      	bmi.n	8004c56 <setvbuf+0x4a>
 8004c50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c52:	f000 fb19 	bl	8005288 <__retarget_lock_acquire_recursive>
 8004c56:	4621      	mov	r1, r4
 8004c58:	4638      	mov	r0, r7
 8004c5a:	f000 f9e3 	bl	8005024 <_fflush_r>
 8004c5e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004c60:	b141      	cbz	r1, 8004c74 <setvbuf+0x68>
 8004c62:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004c66:	4299      	cmp	r1, r3
 8004c68:	d002      	beq.n	8004c70 <setvbuf+0x64>
 8004c6a:	4638      	mov	r0, r7
 8004c6c:	f000 fb7c 	bl	8005368 <_free_r>
 8004c70:	2300      	movs	r3, #0
 8004c72:	6363      	str	r3, [r4, #52]	; 0x34
 8004c74:	2300      	movs	r3, #0
 8004c76:	61a3      	str	r3, [r4, #24]
 8004c78:	6063      	str	r3, [r4, #4]
 8004c7a:	89a3      	ldrh	r3, [r4, #12]
 8004c7c:	0619      	lsls	r1, r3, #24
 8004c7e:	d503      	bpl.n	8004c88 <setvbuf+0x7c>
 8004c80:	6921      	ldr	r1, [r4, #16]
 8004c82:	4638      	mov	r0, r7
 8004c84:	f000 fb70 	bl	8005368 <_free_r>
 8004c88:	89a3      	ldrh	r3, [r4, #12]
 8004c8a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8004c8e:	f023 0303 	bic.w	r3, r3, #3
 8004c92:	f1b8 0f02 	cmp.w	r8, #2
 8004c96:	81a3      	strh	r3, [r4, #12]
 8004c98:	d06c      	beq.n	8004d74 <setvbuf+0x168>
 8004c9a:	ab01      	add	r3, sp, #4
 8004c9c:	466a      	mov	r2, sp
 8004c9e:	4621      	mov	r1, r4
 8004ca0:	4638      	mov	r0, r7
 8004ca2:	f000 faf3 	bl	800528c <__swhatbuf_r>
 8004ca6:	89a3      	ldrh	r3, [r4, #12]
 8004ca8:	4318      	orrs	r0, r3
 8004caa:	81a0      	strh	r0, [r4, #12]
 8004cac:	2d00      	cmp	r5, #0
 8004cae:	d130      	bne.n	8004d12 <setvbuf+0x106>
 8004cb0:	9d00      	ldr	r5, [sp, #0]
 8004cb2:	4628      	mov	r0, r5
 8004cb4:	f000 fb50 	bl	8005358 <malloc>
 8004cb8:	4606      	mov	r6, r0
 8004cba:	2800      	cmp	r0, #0
 8004cbc:	d155      	bne.n	8004d6a <setvbuf+0x15e>
 8004cbe:	f8dd 9000 	ldr.w	r9, [sp]
 8004cc2:	45a9      	cmp	r9, r5
 8004cc4:	d14a      	bne.n	8004d5c <setvbuf+0x150>
 8004cc6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004cca:	2200      	movs	r2, #0
 8004ccc:	60a2      	str	r2, [r4, #8]
 8004cce:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8004cd2:	6022      	str	r2, [r4, #0]
 8004cd4:	6122      	str	r2, [r4, #16]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004cdc:	6162      	str	r2, [r4, #20]
 8004cde:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004ce0:	f043 0302 	orr.w	r3, r3, #2
 8004ce4:	07d2      	lsls	r2, r2, #31
 8004ce6:	81a3      	strh	r3, [r4, #12]
 8004ce8:	d405      	bmi.n	8004cf6 <setvbuf+0xea>
 8004cea:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004cee:	d102      	bne.n	8004cf6 <setvbuf+0xea>
 8004cf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004cf2:	f000 faca 	bl	800528a <__retarget_lock_release_recursive>
 8004cf6:	4628      	mov	r0, r5
 8004cf8:	b003      	add	sp, #12
 8004cfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004cfe:	4b24      	ldr	r3, [pc, #144]	; (8004d90 <setvbuf+0x184>)
 8004d00:	429c      	cmp	r4, r3
 8004d02:	d101      	bne.n	8004d08 <setvbuf+0xfc>
 8004d04:	68bc      	ldr	r4, [r7, #8]
 8004d06:	e793      	b.n	8004c30 <setvbuf+0x24>
 8004d08:	4b22      	ldr	r3, [pc, #136]	; (8004d94 <setvbuf+0x188>)
 8004d0a:	429c      	cmp	r4, r3
 8004d0c:	bf08      	it	eq
 8004d0e:	68fc      	ldreq	r4, [r7, #12]
 8004d10:	e78e      	b.n	8004c30 <setvbuf+0x24>
 8004d12:	2e00      	cmp	r6, #0
 8004d14:	d0cd      	beq.n	8004cb2 <setvbuf+0xa6>
 8004d16:	69bb      	ldr	r3, [r7, #24]
 8004d18:	b913      	cbnz	r3, 8004d20 <setvbuf+0x114>
 8004d1a:	4638      	mov	r0, r7
 8004d1c:	f000 fa16 	bl	800514c <__sinit>
 8004d20:	f1b8 0f01 	cmp.w	r8, #1
 8004d24:	bf08      	it	eq
 8004d26:	89a3      	ldrheq	r3, [r4, #12]
 8004d28:	6026      	str	r6, [r4, #0]
 8004d2a:	bf04      	itt	eq
 8004d2c:	f043 0301 	orreq.w	r3, r3, #1
 8004d30:	81a3      	strheq	r3, [r4, #12]
 8004d32:	89a2      	ldrh	r2, [r4, #12]
 8004d34:	f012 0308 	ands.w	r3, r2, #8
 8004d38:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8004d3c:	d01c      	beq.n	8004d78 <setvbuf+0x16c>
 8004d3e:	07d3      	lsls	r3, r2, #31
 8004d40:	bf41      	itttt	mi
 8004d42:	2300      	movmi	r3, #0
 8004d44:	426d      	negmi	r5, r5
 8004d46:	60a3      	strmi	r3, [r4, #8]
 8004d48:	61a5      	strmi	r5, [r4, #24]
 8004d4a:	bf58      	it	pl
 8004d4c:	60a5      	strpl	r5, [r4, #8]
 8004d4e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8004d50:	f015 0501 	ands.w	r5, r5, #1
 8004d54:	d115      	bne.n	8004d82 <setvbuf+0x176>
 8004d56:	f412 7f00 	tst.w	r2, #512	; 0x200
 8004d5a:	e7c8      	b.n	8004cee <setvbuf+0xe2>
 8004d5c:	4648      	mov	r0, r9
 8004d5e:	f000 fafb 	bl	8005358 <malloc>
 8004d62:	4606      	mov	r6, r0
 8004d64:	2800      	cmp	r0, #0
 8004d66:	d0ae      	beq.n	8004cc6 <setvbuf+0xba>
 8004d68:	464d      	mov	r5, r9
 8004d6a:	89a3      	ldrh	r3, [r4, #12]
 8004d6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d70:	81a3      	strh	r3, [r4, #12]
 8004d72:	e7d0      	b.n	8004d16 <setvbuf+0x10a>
 8004d74:	2500      	movs	r5, #0
 8004d76:	e7a8      	b.n	8004cca <setvbuf+0xbe>
 8004d78:	60a3      	str	r3, [r4, #8]
 8004d7a:	e7e8      	b.n	8004d4e <setvbuf+0x142>
 8004d7c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004d80:	e7b9      	b.n	8004cf6 <setvbuf+0xea>
 8004d82:	2500      	movs	r5, #0
 8004d84:	e7b7      	b.n	8004cf6 <setvbuf+0xea>
 8004d86:	bf00      	nop
 8004d88:	2000000c 	.word	0x2000000c
 8004d8c:	08005714 	.word	0x08005714
 8004d90:	08005734 	.word	0x08005734
 8004d94:	080056f4 	.word	0x080056f4

08004d98 <__swbuf_r>:
 8004d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d9a:	460e      	mov	r6, r1
 8004d9c:	4614      	mov	r4, r2
 8004d9e:	4605      	mov	r5, r0
 8004da0:	b118      	cbz	r0, 8004daa <__swbuf_r+0x12>
 8004da2:	6983      	ldr	r3, [r0, #24]
 8004da4:	b90b      	cbnz	r3, 8004daa <__swbuf_r+0x12>
 8004da6:	f000 f9d1 	bl	800514c <__sinit>
 8004daa:	4b21      	ldr	r3, [pc, #132]	; (8004e30 <__swbuf_r+0x98>)
 8004dac:	429c      	cmp	r4, r3
 8004dae:	d12b      	bne.n	8004e08 <__swbuf_r+0x70>
 8004db0:	686c      	ldr	r4, [r5, #4]
 8004db2:	69a3      	ldr	r3, [r4, #24]
 8004db4:	60a3      	str	r3, [r4, #8]
 8004db6:	89a3      	ldrh	r3, [r4, #12]
 8004db8:	071a      	lsls	r2, r3, #28
 8004dba:	d52f      	bpl.n	8004e1c <__swbuf_r+0x84>
 8004dbc:	6923      	ldr	r3, [r4, #16]
 8004dbe:	b36b      	cbz	r3, 8004e1c <__swbuf_r+0x84>
 8004dc0:	6923      	ldr	r3, [r4, #16]
 8004dc2:	6820      	ldr	r0, [r4, #0]
 8004dc4:	1ac0      	subs	r0, r0, r3
 8004dc6:	6963      	ldr	r3, [r4, #20]
 8004dc8:	b2f6      	uxtb	r6, r6
 8004dca:	4283      	cmp	r3, r0
 8004dcc:	4637      	mov	r7, r6
 8004dce:	dc04      	bgt.n	8004dda <__swbuf_r+0x42>
 8004dd0:	4621      	mov	r1, r4
 8004dd2:	4628      	mov	r0, r5
 8004dd4:	f000 f926 	bl	8005024 <_fflush_r>
 8004dd8:	bb30      	cbnz	r0, 8004e28 <__swbuf_r+0x90>
 8004dda:	68a3      	ldr	r3, [r4, #8]
 8004ddc:	3b01      	subs	r3, #1
 8004dde:	60a3      	str	r3, [r4, #8]
 8004de0:	6823      	ldr	r3, [r4, #0]
 8004de2:	1c5a      	adds	r2, r3, #1
 8004de4:	6022      	str	r2, [r4, #0]
 8004de6:	701e      	strb	r6, [r3, #0]
 8004de8:	6963      	ldr	r3, [r4, #20]
 8004dea:	3001      	adds	r0, #1
 8004dec:	4283      	cmp	r3, r0
 8004dee:	d004      	beq.n	8004dfa <__swbuf_r+0x62>
 8004df0:	89a3      	ldrh	r3, [r4, #12]
 8004df2:	07db      	lsls	r3, r3, #31
 8004df4:	d506      	bpl.n	8004e04 <__swbuf_r+0x6c>
 8004df6:	2e0a      	cmp	r6, #10
 8004df8:	d104      	bne.n	8004e04 <__swbuf_r+0x6c>
 8004dfa:	4621      	mov	r1, r4
 8004dfc:	4628      	mov	r0, r5
 8004dfe:	f000 f911 	bl	8005024 <_fflush_r>
 8004e02:	b988      	cbnz	r0, 8004e28 <__swbuf_r+0x90>
 8004e04:	4638      	mov	r0, r7
 8004e06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e08:	4b0a      	ldr	r3, [pc, #40]	; (8004e34 <__swbuf_r+0x9c>)
 8004e0a:	429c      	cmp	r4, r3
 8004e0c:	d101      	bne.n	8004e12 <__swbuf_r+0x7a>
 8004e0e:	68ac      	ldr	r4, [r5, #8]
 8004e10:	e7cf      	b.n	8004db2 <__swbuf_r+0x1a>
 8004e12:	4b09      	ldr	r3, [pc, #36]	; (8004e38 <__swbuf_r+0xa0>)
 8004e14:	429c      	cmp	r4, r3
 8004e16:	bf08      	it	eq
 8004e18:	68ec      	ldreq	r4, [r5, #12]
 8004e1a:	e7ca      	b.n	8004db2 <__swbuf_r+0x1a>
 8004e1c:	4621      	mov	r1, r4
 8004e1e:	4628      	mov	r0, r5
 8004e20:	f000 f80c 	bl	8004e3c <__swsetup_r>
 8004e24:	2800      	cmp	r0, #0
 8004e26:	d0cb      	beq.n	8004dc0 <__swbuf_r+0x28>
 8004e28:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004e2c:	e7ea      	b.n	8004e04 <__swbuf_r+0x6c>
 8004e2e:	bf00      	nop
 8004e30:	08005714 	.word	0x08005714
 8004e34:	08005734 	.word	0x08005734
 8004e38:	080056f4 	.word	0x080056f4

08004e3c <__swsetup_r>:
 8004e3c:	4b32      	ldr	r3, [pc, #200]	; (8004f08 <__swsetup_r+0xcc>)
 8004e3e:	b570      	push	{r4, r5, r6, lr}
 8004e40:	681d      	ldr	r5, [r3, #0]
 8004e42:	4606      	mov	r6, r0
 8004e44:	460c      	mov	r4, r1
 8004e46:	b125      	cbz	r5, 8004e52 <__swsetup_r+0x16>
 8004e48:	69ab      	ldr	r3, [r5, #24]
 8004e4a:	b913      	cbnz	r3, 8004e52 <__swsetup_r+0x16>
 8004e4c:	4628      	mov	r0, r5
 8004e4e:	f000 f97d 	bl	800514c <__sinit>
 8004e52:	4b2e      	ldr	r3, [pc, #184]	; (8004f0c <__swsetup_r+0xd0>)
 8004e54:	429c      	cmp	r4, r3
 8004e56:	d10f      	bne.n	8004e78 <__swsetup_r+0x3c>
 8004e58:	686c      	ldr	r4, [r5, #4]
 8004e5a:	89a3      	ldrh	r3, [r4, #12]
 8004e5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004e60:	0719      	lsls	r1, r3, #28
 8004e62:	d42c      	bmi.n	8004ebe <__swsetup_r+0x82>
 8004e64:	06dd      	lsls	r5, r3, #27
 8004e66:	d411      	bmi.n	8004e8c <__swsetup_r+0x50>
 8004e68:	2309      	movs	r3, #9
 8004e6a:	6033      	str	r3, [r6, #0]
 8004e6c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004e70:	81a3      	strh	r3, [r4, #12]
 8004e72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004e76:	e03e      	b.n	8004ef6 <__swsetup_r+0xba>
 8004e78:	4b25      	ldr	r3, [pc, #148]	; (8004f10 <__swsetup_r+0xd4>)
 8004e7a:	429c      	cmp	r4, r3
 8004e7c:	d101      	bne.n	8004e82 <__swsetup_r+0x46>
 8004e7e:	68ac      	ldr	r4, [r5, #8]
 8004e80:	e7eb      	b.n	8004e5a <__swsetup_r+0x1e>
 8004e82:	4b24      	ldr	r3, [pc, #144]	; (8004f14 <__swsetup_r+0xd8>)
 8004e84:	429c      	cmp	r4, r3
 8004e86:	bf08      	it	eq
 8004e88:	68ec      	ldreq	r4, [r5, #12]
 8004e8a:	e7e6      	b.n	8004e5a <__swsetup_r+0x1e>
 8004e8c:	0758      	lsls	r0, r3, #29
 8004e8e:	d512      	bpl.n	8004eb6 <__swsetup_r+0x7a>
 8004e90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e92:	b141      	cbz	r1, 8004ea6 <__swsetup_r+0x6a>
 8004e94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004e98:	4299      	cmp	r1, r3
 8004e9a:	d002      	beq.n	8004ea2 <__swsetup_r+0x66>
 8004e9c:	4630      	mov	r0, r6
 8004e9e:	f000 fa63 	bl	8005368 <_free_r>
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	6363      	str	r3, [r4, #52]	; 0x34
 8004ea6:	89a3      	ldrh	r3, [r4, #12]
 8004ea8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004eac:	81a3      	strh	r3, [r4, #12]
 8004eae:	2300      	movs	r3, #0
 8004eb0:	6063      	str	r3, [r4, #4]
 8004eb2:	6923      	ldr	r3, [r4, #16]
 8004eb4:	6023      	str	r3, [r4, #0]
 8004eb6:	89a3      	ldrh	r3, [r4, #12]
 8004eb8:	f043 0308 	orr.w	r3, r3, #8
 8004ebc:	81a3      	strh	r3, [r4, #12]
 8004ebe:	6923      	ldr	r3, [r4, #16]
 8004ec0:	b94b      	cbnz	r3, 8004ed6 <__swsetup_r+0x9a>
 8004ec2:	89a3      	ldrh	r3, [r4, #12]
 8004ec4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004ec8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ecc:	d003      	beq.n	8004ed6 <__swsetup_r+0x9a>
 8004ece:	4621      	mov	r1, r4
 8004ed0:	4630      	mov	r0, r6
 8004ed2:	f000 fa01 	bl	80052d8 <__smakebuf_r>
 8004ed6:	89a0      	ldrh	r0, [r4, #12]
 8004ed8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004edc:	f010 0301 	ands.w	r3, r0, #1
 8004ee0:	d00a      	beq.n	8004ef8 <__swsetup_r+0xbc>
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	60a3      	str	r3, [r4, #8]
 8004ee6:	6963      	ldr	r3, [r4, #20]
 8004ee8:	425b      	negs	r3, r3
 8004eea:	61a3      	str	r3, [r4, #24]
 8004eec:	6923      	ldr	r3, [r4, #16]
 8004eee:	b943      	cbnz	r3, 8004f02 <__swsetup_r+0xc6>
 8004ef0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004ef4:	d1ba      	bne.n	8004e6c <__swsetup_r+0x30>
 8004ef6:	bd70      	pop	{r4, r5, r6, pc}
 8004ef8:	0781      	lsls	r1, r0, #30
 8004efa:	bf58      	it	pl
 8004efc:	6963      	ldrpl	r3, [r4, #20]
 8004efe:	60a3      	str	r3, [r4, #8]
 8004f00:	e7f4      	b.n	8004eec <__swsetup_r+0xb0>
 8004f02:	2000      	movs	r0, #0
 8004f04:	e7f7      	b.n	8004ef6 <__swsetup_r+0xba>
 8004f06:	bf00      	nop
 8004f08:	2000000c 	.word	0x2000000c
 8004f0c:	08005714 	.word	0x08005714
 8004f10:	08005734 	.word	0x08005734
 8004f14:	080056f4 	.word	0x080056f4

08004f18 <__sflush_r>:
 8004f18:	898a      	ldrh	r2, [r1, #12]
 8004f1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f1e:	4605      	mov	r5, r0
 8004f20:	0710      	lsls	r0, r2, #28
 8004f22:	460c      	mov	r4, r1
 8004f24:	d458      	bmi.n	8004fd8 <__sflush_r+0xc0>
 8004f26:	684b      	ldr	r3, [r1, #4]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	dc05      	bgt.n	8004f38 <__sflush_r+0x20>
 8004f2c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	dc02      	bgt.n	8004f38 <__sflush_r+0x20>
 8004f32:	2000      	movs	r0, #0
 8004f34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004f3a:	2e00      	cmp	r6, #0
 8004f3c:	d0f9      	beq.n	8004f32 <__sflush_r+0x1a>
 8004f3e:	2300      	movs	r3, #0
 8004f40:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004f44:	682f      	ldr	r7, [r5, #0]
 8004f46:	602b      	str	r3, [r5, #0]
 8004f48:	d032      	beq.n	8004fb0 <__sflush_r+0x98>
 8004f4a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004f4c:	89a3      	ldrh	r3, [r4, #12]
 8004f4e:	075a      	lsls	r2, r3, #29
 8004f50:	d505      	bpl.n	8004f5e <__sflush_r+0x46>
 8004f52:	6863      	ldr	r3, [r4, #4]
 8004f54:	1ac0      	subs	r0, r0, r3
 8004f56:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004f58:	b10b      	cbz	r3, 8004f5e <__sflush_r+0x46>
 8004f5a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004f5c:	1ac0      	subs	r0, r0, r3
 8004f5e:	2300      	movs	r3, #0
 8004f60:	4602      	mov	r2, r0
 8004f62:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004f64:	6a21      	ldr	r1, [r4, #32]
 8004f66:	4628      	mov	r0, r5
 8004f68:	47b0      	blx	r6
 8004f6a:	1c43      	adds	r3, r0, #1
 8004f6c:	89a3      	ldrh	r3, [r4, #12]
 8004f6e:	d106      	bne.n	8004f7e <__sflush_r+0x66>
 8004f70:	6829      	ldr	r1, [r5, #0]
 8004f72:	291d      	cmp	r1, #29
 8004f74:	d82c      	bhi.n	8004fd0 <__sflush_r+0xb8>
 8004f76:	4a2a      	ldr	r2, [pc, #168]	; (8005020 <__sflush_r+0x108>)
 8004f78:	40ca      	lsrs	r2, r1
 8004f7a:	07d6      	lsls	r6, r2, #31
 8004f7c:	d528      	bpl.n	8004fd0 <__sflush_r+0xb8>
 8004f7e:	2200      	movs	r2, #0
 8004f80:	6062      	str	r2, [r4, #4]
 8004f82:	04d9      	lsls	r1, r3, #19
 8004f84:	6922      	ldr	r2, [r4, #16]
 8004f86:	6022      	str	r2, [r4, #0]
 8004f88:	d504      	bpl.n	8004f94 <__sflush_r+0x7c>
 8004f8a:	1c42      	adds	r2, r0, #1
 8004f8c:	d101      	bne.n	8004f92 <__sflush_r+0x7a>
 8004f8e:	682b      	ldr	r3, [r5, #0]
 8004f90:	b903      	cbnz	r3, 8004f94 <__sflush_r+0x7c>
 8004f92:	6560      	str	r0, [r4, #84]	; 0x54
 8004f94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004f96:	602f      	str	r7, [r5, #0]
 8004f98:	2900      	cmp	r1, #0
 8004f9a:	d0ca      	beq.n	8004f32 <__sflush_r+0x1a>
 8004f9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004fa0:	4299      	cmp	r1, r3
 8004fa2:	d002      	beq.n	8004faa <__sflush_r+0x92>
 8004fa4:	4628      	mov	r0, r5
 8004fa6:	f000 f9df 	bl	8005368 <_free_r>
 8004faa:	2000      	movs	r0, #0
 8004fac:	6360      	str	r0, [r4, #52]	; 0x34
 8004fae:	e7c1      	b.n	8004f34 <__sflush_r+0x1c>
 8004fb0:	6a21      	ldr	r1, [r4, #32]
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	4628      	mov	r0, r5
 8004fb6:	47b0      	blx	r6
 8004fb8:	1c41      	adds	r1, r0, #1
 8004fba:	d1c7      	bne.n	8004f4c <__sflush_r+0x34>
 8004fbc:	682b      	ldr	r3, [r5, #0]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d0c4      	beq.n	8004f4c <__sflush_r+0x34>
 8004fc2:	2b1d      	cmp	r3, #29
 8004fc4:	d001      	beq.n	8004fca <__sflush_r+0xb2>
 8004fc6:	2b16      	cmp	r3, #22
 8004fc8:	d101      	bne.n	8004fce <__sflush_r+0xb6>
 8004fca:	602f      	str	r7, [r5, #0]
 8004fcc:	e7b1      	b.n	8004f32 <__sflush_r+0x1a>
 8004fce:	89a3      	ldrh	r3, [r4, #12]
 8004fd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004fd4:	81a3      	strh	r3, [r4, #12]
 8004fd6:	e7ad      	b.n	8004f34 <__sflush_r+0x1c>
 8004fd8:	690f      	ldr	r7, [r1, #16]
 8004fda:	2f00      	cmp	r7, #0
 8004fdc:	d0a9      	beq.n	8004f32 <__sflush_r+0x1a>
 8004fde:	0793      	lsls	r3, r2, #30
 8004fe0:	680e      	ldr	r6, [r1, #0]
 8004fe2:	bf08      	it	eq
 8004fe4:	694b      	ldreq	r3, [r1, #20]
 8004fe6:	600f      	str	r7, [r1, #0]
 8004fe8:	bf18      	it	ne
 8004fea:	2300      	movne	r3, #0
 8004fec:	eba6 0807 	sub.w	r8, r6, r7
 8004ff0:	608b      	str	r3, [r1, #8]
 8004ff2:	f1b8 0f00 	cmp.w	r8, #0
 8004ff6:	dd9c      	ble.n	8004f32 <__sflush_r+0x1a>
 8004ff8:	6a21      	ldr	r1, [r4, #32]
 8004ffa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004ffc:	4643      	mov	r3, r8
 8004ffe:	463a      	mov	r2, r7
 8005000:	4628      	mov	r0, r5
 8005002:	47b0      	blx	r6
 8005004:	2800      	cmp	r0, #0
 8005006:	dc06      	bgt.n	8005016 <__sflush_r+0xfe>
 8005008:	89a3      	ldrh	r3, [r4, #12]
 800500a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800500e:	81a3      	strh	r3, [r4, #12]
 8005010:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005014:	e78e      	b.n	8004f34 <__sflush_r+0x1c>
 8005016:	4407      	add	r7, r0
 8005018:	eba8 0800 	sub.w	r8, r8, r0
 800501c:	e7e9      	b.n	8004ff2 <__sflush_r+0xda>
 800501e:	bf00      	nop
 8005020:	20400001 	.word	0x20400001

08005024 <_fflush_r>:
 8005024:	b538      	push	{r3, r4, r5, lr}
 8005026:	690b      	ldr	r3, [r1, #16]
 8005028:	4605      	mov	r5, r0
 800502a:	460c      	mov	r4, r1
 800502c:	b913      	cbnz	r3, 8005034 <_fflush_r+0x10>
 800502e:	2500      	movs	r5, #0
 8005030:	4628      	mov	r0, r5
 8005032:	bd38      	pop	{r3, r4, r5, pc}
 8005034:	b118      	cbz	r0, 800503e <_fflush_r+0x1a>
 8005036:	6983      	ldr	r3, [r0, #24]
 8005038:	b90b      	cbnz	r3, 800503e <_fflush_r+0x1a>
 800503a:	f000 f887 	bl	800514c <__sinit>
 800503e:	4b14      	ldr	r3, [pc, #80]	; (8005090 <_fflush_r+0x6c>)
 8005040:	429c      	cmp	r4, r3
 8005042:	d11b      	bne.n	800507c <_fflush_r+0x58>
 8005044:	686c      	ldr	r4, [r5, #4]
 8005046:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d0ef      	beq.n	800502e <_fflush_r+0xa>
 800504e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005050:	07d0      	lsls	r0, r2, #31
 8005052:	d404      	bmi.n	800505e <_fflush_r+0x3a>
 8005054:	0599      	lsls	r1, r3, #22
 8005056:	d402      	bmi.n	800505e <_fflush_r+0x3a>
 8005058:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800505a:	f000 f915 	bl	8005288 <__retarget_lock_acquire_recursive>
 800505e:	4628      	mov	r0, r5
 8005060:	4621      	mov	r1, r4
 8005062:	f7ff ff59 	bl	8004f18 <__sflush_r>
 8005066:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005068:	07da      	lsls	r2, r3, #31
 800506a:	4605      	mov	r5, r0
 800506c:	d4e0      	bmi.n	8005030 <_fflush_r+0xc>
 800506e:	89a3      	ldrh	r3, [r4, #12]
 8005070:	059b      	lsls	r3, r3, #22
 8005072:	d4dd      	bmi.n	8005030 <_fflush_r+0xc>
 8005074:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005076:	f000 f908 	bl	800528a <__retarget_lock_release_recursive>
 800507a:	e7d9      	b.n	8005030 <_fflush_r+0xc>
 800507c:	4b05      	ldr	r3, [pc, #20]	; (8005094 <_fflush_r+0x70>)
 800507e:	429c      	cmp	r4, r3
 8005080:	d101      	bne.n	8005086 <_fflush_r+0x62>
 8005082:	68ac      	ldr	r4, [r5, #8]
 8005084:	e7df      	b.n	8005046 <_fflush_r+0x22>
 8005086:	4b04      	ldr	r3, [pc, #16]	; (8005098 <_fflush_r+0x74>)
 8005088:	429c      	cmp	r4, r3
 800508a:	bf08      	it	eq
 800508c:	68ec      	ldreq	r4, [r5, #12]
 800508e:	e7da      	b.n	8005046 <_fflush_r+0x22>
 8005090:	08005714 	.word	0x08005714
 8005094:	08005734 	.word	0x08005734
 8005098:	080056f4 	.word	0x080056f4

0800509c <std>:
 800509c:	2300      	movs	r3, #0
 800509e:	b510      	push	{r4, lr}
 80050a0:	4604      	mov	r4, r0
 80050a2:	e9c0 3300 	strd	r3, r3, [r0]
 80050a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80050aa:	6083      	str	r3, [r0, #8]
 80050ac:	8181      	strh	r1, [r0, #12]
 80050ae:	6643      	str	r3, [r0, #100]	; 0x64
 80050b0:	81c2      	strh	r2, [r0, #14]
 80050b2:	6183      	str	r3, [r0, #24]
 80050b4:	4619      	mov	r1, r3
 80050b6:	2208      	movs	r2, #8
 80050b8:	305c      	adds	r0, #92	; 0x5c
 80050ba:	f7ff fd21 	bl	8004b00 <memset>
 80050be:	4b05      	ldr	r3, [pc, #20]	; (80050d4 <std+0x38>)
 80050c0:	6263      	str	r3, [r4, #36]	; 0x24
 80050c2:	4b05      	ldr	r3, [pc, #20]	; (80050d8 <std+0x3c>)
 80050c4:	62a3      	str	r3, [r4, #40]	; 0x28
 80050c6:	4b05      	ldr	r3, [pc, #20]	; (80050dc <std+0x40>)
 80050c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80050ca:	4b05      	ldr	r3, [pc, #20]	; (80050e0 <std+0x44>)
 80050cc:	6224      	str	r4, [r4, #32]
 80050ce:	6323      	str	r3, [r4, #48]	; 0x30
 80050d0:	bd10      	pop	{r4, pc}
 80050d2:	bf00      	nop
 80050d4:	08005549 	.word	0x08005549
 80050d8:	0800556b 	.word	0x0800556b
 80050dc:	080055a3 	.word	0x080055a3
 80050e0:	080055c7 	.word	0x080055c7

080050e4 <_cleanup_r>:
 80050e4:	4901      	ldr	r1, [pc, #4]	; (80050ec <_cleanup_r+0x8>)
 80050e6:	f000 b8af 	b.w	8005248 <_fwalk_reent>
 80050ea:	bf00      	nop
 80050ec:	08005025 	.word	0x08005025

080050f0 <__sfmoreglue>:
 80050f0:	b570      	push	{r4, r5, r6, lr}
 80050f2:	2268      	movs	r2, #104	; 0x68
 80050f4:	1e4d      	subs	r5, r1, #1
 80050f6:	4355      	muls	r5, r2
 80050f8:	460e      	mov	r6, r1
 80050fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80050fe:	f000 f99f 	bl	8005440 <_malloc_r>
 8005102:	4604      	mov	r4, r0
 8005104:	b140      	cbz	r0, 8005118 <__sfmoreglue+0x28>
 8005106:	2100      	movs	r1, #0
 8005108:	e9c0 1600 	strd	r1, r6, [r0]
 800510c:	300c      	adds	r0, #12
 800510e:	60a0      	str	r0, [r4, #8]
 8005110:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005114:	f7ff fcf4 	bl	8004b00 <memset>
 8005118:	4620      	mov	r0, r4
 800511a:	bd70      	pop	{r4, r5, r6, pc}

0800511c <__sfp_lock_acquire>:
 800511c:	4801      	ldr	r0, [pc, #4]	; (8005124 <__sfp_lock_acquire+0x8>)
 800511e:	f000 b8b3 	b.w	8005288 <__retarget_lock_acquire_recursive>
 8005122:	bf00      	nop
 8005124:	200001b9 	.word	0x200001b9

08005128 <__sfp_lock_release>:
 8005128:	4801      	ldr	r0, [pc, #4]	; (8005130 <__sfp_lock_release+0x8>)
 800512a:	f000 b8ae 	b.w	800528a <__retarget_lock_release_recursive>
 800512e:	bf00      	nop
 8005130:	200001b9 	.word	0x200001b9

08005134 <__sinit_lock_acquire>:
 8005134:	4801      	ldr	r0, [pc, #4]	; (800513c <__sinit_lock_acquire+0x8>)
 8005136:	f000 b8a7 	b.w	8005288 <__retarget_lock_acquire_recursive>
 800513a:	bf00      	nop
 800513c:	200001ba 	.word	0x200001ba

08005140 <__sinit_lock_release>:
 8005140:	4801      	ldr	r0, [pc, #4]	; (8005148 <__sinit_lock_release+0x8>)
 8005142:	f000 b8a2 	b.w	800528a <__retarget_lock_release_recursive>
 8005146:	bf00      	nop
 8005148:	200001ba 	.word	0x200001ba

0800514c <__sinit>:
 800514c:	b510      	push	{r4, lr}
 800514e:	4604      	mov	r4, r0
 8005150:	f7ff fff0 	bl	8005134 <__sinit_lock_acquire>
 8005154:	69a3      	ldr	r3, [r4, #24]
 8005156:	b11b      	cbz	r3, 8005160 <__sinit+0x14>
 8005158:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800515c:	f7ff bff0 	b.w	8005140 <__sinit_lock_release>
 8005160:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005164:	6523      	str	r3, [r4, #80]	; 0x50
 8005166:	4b13      	ldr	r3, [pc, #76]	; (80051b4 <__sinit+0x68>)
 8005168:	4a13      	ldr	r2, [pc, #76]	; (80051b8 <__sinit+0x6c>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	62a2      	str	r2, [r4, #40]	; 0x28
 800516e:	42a3      	cmp	r3, r4
 8005170:	bf04      	itt	eq
 8005172:	2301      	moveq	r3, #1
 8005174:	61a3      	streq	r3, [r4, #24]
 8005176:	4620      	mov	r0, r4
 8005178:	f000 f820 	bl	80051bc <__sfp>
 800517c:	6060      	str	r0, [r4, #4]
 800517e:	4620      	mov	r0, r4
 8005180:	f000 f81c 	bl	80051bc <__sfp>
 8005184:	60a0      	str	r0, [r4, #8]
 8005186:	4620      	mov	r0, r4
 8005188:	f000 f818 	bl	80051bc <__sfp>
 800518c:	2200      	movs	r2, #0
 800518e:	60e0      	str	r0, [r4, #12]
 8005190:	2104      	movs	r1, #4
 8005192:	6860      	ldr	r0, [r4, #4]
 8005194:	f7ff ff82 	bl	800509c <std>
 8005198:	68a0      	ldr	r0, [r4, #8]
 800519a:	2201      	movs	r2, #1
 800519c:	2109      	movs	r1, #9
 800519e:	f7ff ff7d 	bl	800509c <std>
 80051a2:	68e0      	ldr	r0, [r4, #12]
 80051a4:	2202      	movs	r2, #2
 80051a6:	2112      	movs	r1, #18
 80051a8:	f7ff ff78 	bl	800509c <std>
 80051ac:	2301      	movs	r3, #1
 80051ae:	61a3      	str	r3, [r4, #24]
 80051b0:	e7d2      	b.n	8005158 <__sinit+0xc>
 80051b2:	bf00      	nop
 80051b4:	080056f0 	.word	0x080056f0
 80051b8:	080050e5 	.word	0x080050e5

080051bc <__sfp>:
 80051bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051be:	4607      	mov	r7, r0
 80051c0:	f7ff ffac 	bl	800511c <__sfp_lock_acquire>
 80051c4:	4b1e      	ldr	r3, [pc, #120]	; (8005240 <__sfp+0x84>)
 80051c6:	681e      	ldr	r6, [r3, #0]
 80051c8:	69b3      	ldr	r3, [r6, #24]
 80051ca:	b913      	cbnz	r3, 80051d2 <__sfp+0x16>
 80051cc:	4630      	mov	r0, r6
 80051ce:	f7ff ffbd 	bl	800514c <__sinit>
 80051d2:	3648      	adds	r6, #72	; 0x48
 80051d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80051d8:	3b01      	subs	r3, #1
 80051da:	d503      	bpl.n	80051e4 <__sfp+0x28>
 80051dc:	6833      	ldr	r3, [r6, #0]
 80051de:	b30b      	cbz	r3, 8005224 <__sfp+0x68>
 80051e0:	6836      	ldr	r6, [r6, #0]
 80051e2:	e7f7      	b.n	80051d4 <__sfp+0x18>
 80051e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80051e8:	b9d5      	cbnz	r5, 8005220 <__sfp+0x64>
 80051ea:	4b16      	ldr	r3, [pc, #88]	; (8005244 <__sfp+0x88>)
 80051ec:	60e3      	str	r3, [r4, #12]
 80051ee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80051f2:	6665      	str	r5, [r4, #100]	; 0x64
 80051f4:	f000 f847 	bl	8005286 <__retarget_lock_init_recursive>
 80051f8:	f7ff ff96 	bl	8005128 <__sfp_lock_release>
 80051fc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005200:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005204:	6025      	str	r5, [r4, #0]
 8005206:	61a5      	str	r5, [r4, #24]
 8005208:	2208      	movs	r2, #8
 800520a:	4629      	mov	r1, r5
 800520c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005210:	f7ff fc76 	bl	8004b00 <memset>
 8005214:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005218:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800521c:	4620      	mov	r0, r4
 800521e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005220:	3468      	adds	r4, #104	; 0x68
 8005222:	e7d9      	b.n	80051d8 <__sfp+0x1c>
 8005224:	2104      	movs	r1, #4
 8005226:	4638      	mov	r0, r7
 8005228:	f7ff ff62 	bl	80050f0 <__sfmoreglue>
 800522c:	4604      	mov	r4, r0
 800522e:	6030      	str	r0, [r6, #0]
 8005230:	2800      	cmp	r0, #0
 8005232:	d1d5      	bne.n	80051e0 <__sfp+0x24>
 8005234:	f7ff ff78 	bl	8005128 <__sfp_lock_release>
 8005238:	230c      	movs	r3, #12
 800523a:	603b      	str	r3, [r7, #0]
 800523c:	e7ee      	b.n	800521c <__sfp+0x60>
 800523e:	bf00      	nop
 8005240:	080056f0 	.word	0x080056f0
 8005244:	ffff0001 	.word	0xffff0001

08005248 <_fwalk_reent>:
 8005248:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800524c:	4606      	mov	r6, r0
 800524e:	4688      	mov	r8, r1
 8005250:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005254:	2700      	movs	r7, #0
 8005256:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800525a:	f1b9 0901 	subs.w	r9, r9, #1
 800525e:	d505      	bpl.n	800526c <_fwalk_reent+0x24>
 8005260:	6824      	ldr	r4, [r4, #0]
 8005262:	2c00      	cmp	r4, #0
 8005264:	d1f7      	bne.n	8005256 <_fwalk_reent+0xe>
 8005266:	4638      	mov	r0, r7
 8005268:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800526c:	89ab      	ldrh	r3, [r5, #12]
 800526e:	2b01      	cmp	r3, #1
 8005270:	d907      	bls.n	8005282 <_fwalk_reent+0x3a>
 8005272:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005276:	3301      	adds	r3, #1
 8005278:	d003      	beq.n	8005282 <_fwalk_reent+0x3a>
 800527a:	4629      	mov	r1, r5
 800527c:	4630      	mov	r0, r6
 800527e:	47c0      	blx	r8
 8005280:	4307      	orrs	r7, r0
 8005282:	3568      	adds	r5, #104	; 0x68
 8005284:	e7e9      	b.n	800525a <_fwalk_reent+0x12>

08005286 <__retarget_lock_init_recursive>:
 8005286:	4770      	bx	lr

08005288 <__retarget_lock_acquire_recursive>:
 8005288:	4770      	bx	lr

0800528a <__retarget_lock_release_recursive>:
 800528a:	4770      	bx	lr

0800528c <__swhatbuf_r>:
 800528c:	b570      	push	{r4, r5, r6, lr}
 800528e:	460e      	mov	r6, r1
 8005290:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005294:	2900      	cmp	r1, #0
 8005296:	b096      	sub	sp, #88	; 0x58
 8005298:	4614      	mov	r4, r2
 800529a:	461d      	mov	r5, r3
 800529c:	da08      	bge.n	80052b0 <__swhatbuf_r+0x24>
 800529e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80052a2:	2200      	movs	r2, #0
 80052a4:	602a      	str	r2, [r5, #0]
 80052a6:	061a      	lsls	r2, r3, #24
 80052a8:	d410      	bmi.n	80052cc <__swhatbuf_r+0x40>
 80052aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80052ae:	e00e      	b.n	80052ce <__swhatbuf_r+0x42>
 80052b0:	466a      	mov	r2, sp
 80052b2:	f000 f9af 	bl	8005614 <_fstat_r>
 80052b6:	2800      	cmp	r0, #0
 80052b8:	dbf1      	blt.n	800529e <__swhatbuf_r+0x12>
 80052ba:	9a01      	ldr	r2, [sp, #4]
 80052bc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80052c0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80052c4:	425a      	negs	r2, r3
 80052c6:	415a      	adcs	r2, r3
 80052c8:	602a      	str	r2, [r5, #0]
 80052ca:	e7ee      	b.n	80052aa <__swhatbuf_r+0x1e>
 80052cc:	2340      	movs	r3, #64	; 0x40
 80052ce:	2000      	movs	r0, #0
 80052d0:	6023      	str	r3, [r4, #0]
 80052d2:	b016      	add	sp, #88	; 0x58
 80052d4:	bd70      	pop	{r4, r5, r6, pc}
	...

080052d8 <__smakebuf_r>:
 80052d8:	898b      	ldrh	r3, [r1, #12]
 80052da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80052dc:	079d      	lsls	r5, r3, #30
 80052de:	4606      	mov	r6, r0
 80052e0:	460c      	mov	r4, r1
 80052e2:	d507      	bpl.n	80052f4 <__smakebuf_r+0x1c>
 80052e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80052e8:	6023      	str	r3, [r4, #0]
 80052ea:	6123      	str	r3, [r4, #16]
 80052ec:	2301      	movs	r3, #1
 80052ee:	6163      	str	r3, [r4, #20]
 80052f0:	b002      	add	sp, #8
 80052f2:	bd70      	pop	{r4, r5, r6, pc}
 80052f4:	ab01      	add	r3, sp, #4
 80052f6:	466a      	mov	r2, sp
 80052f8:	f7ff ffc8 	bl	800528c <__swhatbuf_r>
 80052fc:	9900      	ldr	r1, [sp, #0]
 80052fe:	4605      	mov	r5, r0
 8005300:	4630      	mov	r0, r6
 8005302:	f000 f89d 	bl	8005440 <_malloc_r>
 8005306:	b948      	cbnz	r0, 800531c <__smakebuf_r+0x44>
 8005308:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800530c:	059a      	lsls	r2, r3, #22
 800530e:	d4ef      	bmi.n	80052f0 <__smakebuf_r+0x18>
 8005310:	f023 0303 	bic.w	r3, r3, #3
 8005314:	f043 0302 	orr.w	r3, r3, #2
 8005318:	81a3      	strh	r3, [r4, #12]
 800531a:	e7e3      	b.n	80052e4 <__smakebuf_r+0xc>
 800531c:	4b0d      	ldr	r3, [pc, #52]	; (8005354 <__smakebuf_r+0x7c>)
 800531e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005320:	89a3      	ldrh	r3, [r4, #12]
 8005322:	6020      	str	r0, [r4, #0]
 8005324:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005328:	81a3      	strh	r3, [r4, #12]
 800532a:	9b00      	ldr	r3, [sp, #0]
 800532c:	6163      	str	r3, [r4, #20]
 800532e:	9b01      	ldr	r3, [sp, #4]
 8005330:	6120      	str	r0, [r4, #16]
 8005332:	b15b      	cbz	r3, 800534c <__smakebuf_r+0x74>
 8005334:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005338:	4630      	mov	r0, r6
 800533a:	f000 f97d 	bl	8005638 <_isatty_r>
 800533e:	b128      	cbz	r0, 800534c <__smakebuf_r+0x74>
 8005340:	89a3      	ldrh	r3, [r4, #12]
 8005342:	f023 0303 	bic.w	r3, r3, #3
 8005346:	f043 0301 	orr.w	r3, r3, #1
 800534a:	81a3      	strh	r3, [r4, #12]
 800534c:	89a0      	ldrh	r0, [r4, #12]
 800534e:	4305      	orrs	r5, r0
 8005350:	81a5      	strh	r5, [r4, #12]
 8005352:	e7cd      	b.n	80052f0 <__smakebuf_r+0x18>
 8005354:	080050e5 	.word	0x080050e5

08005358 <malloc>:
 8005358:	4b02      	ldr	r3, [pc, #8]	; (8005364 <malloc+0xc>)
 800535a:	4601      	mov	r1, r0
 800535c:	6818      	ldr	r0, [r3, #0]
 800535e:	f000 b86f 	b.w	8005440 <_malloc_r>
 8005362:	bf00      	nop
 8005364:	2000000c 	.word	0x2000000c

08005368 <_free_r>:
 8005368:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800536a:	2900      	cmp	r1, #0
 800536c:	d044      	beq.n	80053f8 <_free_r+0x90>
 800536e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005372:	9001      	str	r0, [sp, #4]
 8005374:	2b00      	cmp	r3, #0
 8005376:	f1a1 0404 	sub.w	r4, r1, #4
 800537a:	bfb8      	it	lt
 800537c:	18e4      	addlt	r4, r4, r3
 800537e:	f000 f97d 	bl	800567c <__malloc_lock>
 8005382:	4a1e      	ldr	r2, [pc, #120]	; (80053fc <_free_r+0x94>)
 8005384:	9801      	ldr	r0, [sp, #4]
 8005386:	6813      	ldr	r3, [r2, #0]
 8005388:	b933      	cbnz	r3, 8005398 <_free_r+0x30>
 800538a:	6063      	str	r3, [r4, #4]
 800538c:	6014      	str	r4, [r2, #0]
 800538e:	b003      	add	sp, #12
 8005390:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005394:	f000 b978 	b.w	8005688 <__malloc_unlock>
 8005398:	42a3      	cmp	r3, r4
 800539a:	d908      	bls.n	80053ae <_free_r+0x46>
 800539c:	6825      	ldr	r5, [r4, #0]
 800539e:	1961      	adds	r1, r4, r5
 80053a0:	428b      	cmp	r3, r1
 80053a2:	bf01      	itttt	eq
 80053a4:	6819      	ldreq	r1, [r3, #0]
 80053a6:	685b      	ldreq	r3, [r3, #4]
 80053a8:	1949      	addeq	r1, r1, r5
 80053aa:	6021      	streq	r1, [r4, #0]
 80053ac:	e7ed      	b.n	800538a <_free_r+0x22>
 80053ae:	461a      	mov	r2, r3
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	b10b      	cbz	r3, 80053b8 <_free_r+0x50>
 80053b4:	42a3      	cmp	r3, r4
 80053b6:	d9fa      	bls.n	80053ae <_free_r+0x46>
 80053b8:	6811      	ldr	r1, [r2, #0]
 80053ba:	1855      	adds	r5, r2, r1
 80053bc:	42a5      	cmp	r5, r4
 80053be:	d10b      	bne.n	80053d8 <_free_r+0x70>
 80053c0:	6824      	ldr	r4, [r4, #0]
 80053c2:	4421      	add	r1, r4
 80053c4:	1854      	adds	r4, r2, r1
 80053c6:	42a3      	cmp	r3, r4
 80053c8:	6011      	str	r1, [r2, #0]
 80053ca:	d1e0      	bne.n	800538e <_free_r+0x26>
 80053cc:	681c      	ldr	r4, [r3, #0]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	6053      	str	r3, [r2, #4]
 80053d2:	4421      	add	r1, r4
 80053d4:	6011      	str	r1, [r2, #0]
 80053d6:	e7da      	b.n	800538e <_free_r+0x26>
 80053d8:	d902      	bls.n	80053e0 <_free_r+0x78>
 80053da:	230c      	movs	r3, #12
 80053dc:	6003      	str	r3, [r0, #0]
 80053de:	e7d6      	b.n	800538e <_free_r+0x26>
 80053e0:	6825      	ldr	r5, [r4, #0]
 80053e2:	1961      	adds	r1, r4, r5
 80053e4:	428b      	cmp	r3, r1
 80053e6:	bf04      	itt	eq
 80053e8:	6819      	ldreq	r1, [r3, #0]
 80053ea:	685b      	ldreq	r3, [r3, #4]
 80053ec:	6063      	str	r3, [r4, #4]
 80053ee:	bf04      	itt	eq
 80053f0:	1949      	addeq	r1, r1, r5
 80053f2:	6021      	streq	r1, [r4, #0]
 80053f4:	6054      	str	r4, [r2, #4]
 80053f6:	e7ca      	b.n	800538e <_free_r+0x26>
 80053f8:	b003      	add	sp, #12
 80053fa:	bd30      	pop	{r4, r5, pc}
 80053fc:	200001bc 	.word	0x200001bc

08005400 <sbrk_aligned>:
 8005400:	b570      	push	{r4, r5, r6, lr}
 8005402:	4e0e      	ldr	r6, [pc, #56]	; (800543c <sbrk_aligned+0x3c>)
 8005404:	460c      	mov	r4, r1
 8005406:	6831      	ldr	r1, [r6, #0]
 8005408:	4605      	mov	r5, r0
 800540a:	b911      	cbnz	r1, 8005412 <sbrk_aligned+0x12>
 800540c:	f000 f88c 	bl	8005528 <_sbrk_r>
 8005410:	6030      	str	r0, [r6, #0]
 8005412:	4621      	mov	r1, r4
 8005414:	4628      	mov	r0, r5
 8005416:	f000 f887 	bl	8005528 <_sbrk_r>
 800541a:	1c43      	adds	r3, r0, #1
 800541c:	d00a      	beq.n	8005434 <sbrk_aligned+0x34>
 800541e:	1cc4      	adds	r4, r0, #3
 8005420:	f024 0403 	bic.w	r4, r4, #3
 8005424:	42a0      	cmp	r0, r4
 8005426:	d007      	beq.n	8005438 <sbrk_aligned+0x38>
 8005428:	1a21      	subs	r1, r4, r0
 800542a:	4628      	mov	r0, r5
 800542c:	f000 f87c 	bl	8005528 <_sbrk_r>
 8005430:	3001      	adds	r0, #1
 8005432:	d101      	bne.n	8005438 <sbrk_aligned+0x38>
 8005434:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005438:	4620      	mov	r0, r4
 800543a:	bd70      	pop	{r4, r5, r6, pc}
 800543c:	200001c0 	.word	0x200001c0

08005440 <_malloc_r>:
 8005440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005444:	1ccd      	adds	r5, r1, #3
 8005446:	f025 0503 	bic.w	r5, r5, #3
 800544a:	3508      	adds	r5, #8
 800544c:	2d0c      	cmp	r5, #12
 800544e:	bf38      	it	cc
 8005450:	250c      	movcc	r5, #12
 8005452:	2d00      	cmp	r5, #0
 8005454:	4607      	mov	r7, r0
 8005456:	db01      	blt.n	800545c <_malloc_r+0x1c>
 8005458:	42a9      	cmp	r1, r5
 800545a:	d905      	bls.n	8005468 <_malloc_r+0x28>
 800545c:	230c      	movs	r3, #12
 800545e:	603b      	str	r3, [r7, #0]
 8005460:	2600      	movs	r6, #0
 8005462:	4630      	mov	r0, r6
 8005464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005468:	4e2e      	ldr	r6, [pc, #184]	; (8005524 <_malloc_r+0xe4>)
 800546a:	f000 f907 	bl	800567c <__malloc_lock>
 800546e:	6833      	ldr	r3, [r6, #0]
 8005470:	461c      	mov	r4, r3
 8005472:	bb34      	cbnz	r4, 80054c2 <_malloc_r+0x82>
 8005474:	4629      	mov	r1, r5
 8005476:	4638      	mov	r0, r7
 8005478:	f7ff ffc2 	bl	8005400 <sbrk_aligned>
 800547c:	1c43      	adds	r3, r0, #1
 800547e:	4604      	mov	r4, r0
 8005480:	d14d      	bne.n	800551e <_malloc_r+0xde>
 8005482:	6834      	ldr	r4, [r6, #0]
 8005484:	4626      	mov	r6, r4
 8005486:	2e00      	cmp	r6, #0
 8005488:	d140      	bne.n	800550c <_malloc_r+0xcc>
 800548a:	6823      	ldr	r3, [r4, #0]
 800548c:	4631      	mov	r1, r6
 800548e:	4638      	mov	r0, r7
 8005490:	eb04 0803 	add.w	r8, r4, r3
 8005494:	f000 f848 	bl	8005528 <_sbrk_r>
 8005498:	4580      	cmp	r8, r0
 800549a:	d13a      	bne.n	8005512 <_malloc_r+0xd2>
 800549c:	6821      	ldr	r1, [r4, #0]
 800549e:	3503      	adds	r5, #3
 80054a0:	1a6d      	subs	r5, r5, r1
 80054a2:	f025 0503 	bic.w	r5, r5, #3
 80054a6:	3508      	adds	r5, #8
 80054a8:	2d0c      	cmp	r5, #12
 80054aa:	bf38      	it	cc
 80054ac:	250c      	movcc	r5, #12
 80054ae:	4629      	mov	r1, r5
 80054b0:	4638      	mov	r0, r7
 80054b2:	f7ff ffa5 	bl	8005400 <sbrk_aligned>
 80054b6:	3001      	adds	r0, #1
 80054b8:	d02b      	beq.n	8005512 <_malloc_r+0xd2>
 80054ba:	6823      	ldr	r3, [r4, #0]
 80054bc:	442b      	add	r3, r5
 80054be:	6023      	str	r3, [r4, #0]
 80054c0:	e00e      	b.n	80054e0 <_malloc_r+0xa0>
 80054c2:	6822      	ldr	r2, [r4, #0]
 80054c4:	1b52      	subs	r2, r2, r5
 80054c6:	d41e      	bmi.n	8005506 <_malloc_r+0xc6>
 80054c8:	2a0b      	cmp	r2, #11
 80054ca:	d916      	bls.n	80054fa <_malloc_r+0xba>
 80054cc:	1961      	adds	r1, r4, r5
 80054ce:	42a3      	cmp	r3, r4
 80054d0:	6025      	str	r5, [r4, #0]
 80054d2:	bf18      	it	ne
 80054d4:	6059      	strne	r1, [r3, #4]
 80054d6:	6863      	ldr	r3, [r4, #4]
 80054d8:	bf08      	it	eq
 80054da:	6031      	streq	r1, [r6, #0]
 80054dc:	5162      	str	r2, [r4, r5]
 80054de:	604b      	str	r3, [r1, #4]
 80054e0:	4638      	mov	r0, r7
 80054e2:	f104 060b 	add.w	r6, r4, #11
 80054e6:	f000 f8cf 	bl	8005688 <__malloc_unlock>
 80054ea:	f026 0607 	bic.w	r6, r6, #7
 80054ee:	1d23      	adds	r3, r4, #4
 80054f0:	1af2      	subs	r2, r6, r3
 80054f2:	d0b6      	beq.n	8005462 <_malloc_r+0x22>
 80054f4:	1b9b      	subs	r3, r3, r6
 80054f6:	50a3      	str	r3, [r4, r2]
 80054f8:	e7b3      	b.n	8005462 <_malloc_r+0x22>
 80054fa:	6862      	ldr	r2, [r4, #4]
 80054fc:	42a3      	cmp	r3, r4
 80054fe:	bf0c      	ite	eq
 8005500:	6032      	streq	r2, [r6, #0]
 8005502:	605a      	strne	r2, [r3, #4]
 8005504:	e7ec      	b.n	80054e0 <_malloc_r+0xa0>
 8005506:	4623      	mov	r3, r4
 8005508:	6864      	ldr	r4, [r4, #4]
 800550a:	e7b2      	b.n	8005472 <_malloc_r+0x32>
 800550c:	4634      	mov	r4, r6
 800550e:	6876      	ldr	r6, [r6, #4]
 8005510:	e7b9      	b.n	8005486 <_malloc_r+0x46>
 8005512:	230c      	movs	r3, #12
 8005514:	603b      	str	r3, [r7, #0]
 8005516:	4638      	mov	r0, r7
 8005518:	f000 f8b6 	bl	8005688 <__malloc_unlock>
 800551c:	e7a1      	b.n	8005462 <_malloc_r+0x22>
 800551e:	6025      	str	r5, [r4, #0]
 8005520:	e7de      	b.n	80054e0 <_malloc_r+0xa0>
 8005522:	bf00      	nop
 8005524:	200001bc 	.word	0x200001bc

08005528 <_sbrk_r>:
 8005528:	b538      	push	{r3, r4, r5, lr}
 800552a:	4d06      	ldr	r5, [pc, #24]	; (8005544 <_sbrk_r+0x1c>)
 800552c:	2300      	movs	r3, #0
 800552e:	4604      	mov	r4, r0
 8005530:	4608      	mov	r0, r1
 8005532:	602b      	str	r3, [r5, #0]
 8005534:	f7fc f988 	bl	8001848 <_sbrk>
 8005538:	1c43      	adds	r3, r0, #1
 800553a:	d102      	bne.n	8005542 <_sbrk_r+0x1a>
 800553c:	682b      	ldr	r3, [r5, #0]
 800553e:	b103      	cbz	r3, 8005542 <_sbrk_r+0x1a>
 8005540:	6023      	str	r3, [r4, #0]
 8005542:	bd38      	pop	{r3, r4, r5, pc}
 8005544:	200001c4 	.word	0x200001c4

08005548 <__sread>:
 8005548:	b510      	push	{r4, lr}
 800554a:	460c      	mov	r4, r1
 800554c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005550:	f000 f8a0 	bl	8005694 <_read_r>
 8005554:	2800      	cmp	r0, #0
 8005556:	bfab      	itete	ge
 8005558:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800555a:	89a3      	ldrhlt	r3, [r4, #12]
 800555c:	181b      	addge	r3, r3, r0
 800555e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005562:	bfac      	ite	ge
 8005564:	6563      	strge	r3, [r4, #84]	; 0x54
 8005566:	81a3      	strhlt	r3, [r4, #12]
 8005568:	bd10      	pop	{r4, pc}

0800556a <__swrite>:
 800556a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800556e:	461f      	mov	r7, r3
 8005570:	898b      	ldrh	r3, [r1, #12]
 8005572:	05db      	lsls	r3, r3, #23
 8005574:	4605      	mov	r5, r0
 8005576:	460c      	mov	r4, r1
 8005578:	4616      	mov	r6, r2
 800557a:	d505      	bpl.n	8005588 <__swrite+0x1e>
 800557c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005580:	2302      	movs	r3, #2
 8005582:	2200      	movs	r2, #0
 8005584:	f000 f868 	bl	8005658 <_lseek_r>
 8005588:	89a3      	ldrh	r3, [r4, #12]
 800558a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800558e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005592:	81a3      	strh	r3, [r4, #12]
 8005594:	4632      	mov	r2, r6
 8005596:	463b      	mov	r3, r7
 8005598:	4628      	mov	r0, r5
 800559a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800559e:	f000 b817 	b.w	80055d0 <_write_r>

080055a2 <__sseek>:
 80055a2:	b510      	push	{r4, lr}
 80055a4:	460c      	mov	r4, r1
 80055a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055aa:	f000 f855 	bl	8005658 <_lseek_r>
 80055ae:	1c43      	adds	r3, r0, #1
 80055b0:	89a3      	ldrh	r3, [r4, #12]
 80055b2:	bf15      	itete	ne
 80055b4:	6560      	strne	r0, [r4, #84]	; 0x54
 80055b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80055ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80055be:	81a3      	strheq	r3, [r4, #12]
 80055c0:	bf18      	it	ne
 80055c2:	81a3      	strhne	r3, [r4, #12]
 80055c4:	bd10      	pop	{r4, pc}

080055c6 <__sclose>:
 80055c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055ca:	f000 b813 	b.w	80055f4 <_close_r>
	...

080055d0 <_write_r>:
 80055d0:	b538      	push	{r3, r4, r5, lr}
 80055d2:	4d07      	ldr	r5, [pc, #28]	; (80055f0 <_write_r+0x20>)
 80055d4:	4604      	mov	r4, r0
 80055d6:	4608      	mov	r0, r1
 80055d8:	4611      	mov	r1, r2
 80055da:	2200      	movs	r2, #0
 80055dc:	602a      	str	r2, [r5, #0]
 80055de:	461a      	mov	r2, r3
 80055e0:	f7fc f8e1 	bl	80017a6 <_write>
 80055e4:	1c43      	adds	r3, r0, #1
 80055e6:	d102      	bne.n	80055ee <_write_r+0x1e>
 80055e8:	682b      	ldr	r3, [r5, #0]
 80055ea:	b103      	cbz	r3, 80055ee <_write_r+0x1e>
 80055ec:	6023      	str	r3, [r4, #0]
 80055ee:	bd38      	pop	{r3, r4, r5, pc}
 80055f0:	200001c4 	.word	0x200001c4

080055f4 <_close_r>:
 80055f4:	b538      	push	{r3, r4, r5, lr}
 80055f6:	4d06      	ldr	r5, [pc, #24]	; (8005610 <_close_r+0x1c>)
 80055f8:	2300      	movs	r3, #0
 80055fa:	4604      	mov	r4, r0
 80055fc:	4608      	mov	r0, r1
 80055fe:	602b      	str	r3, [r5, #0]
 8005600:	f7fc f8ed 	bl	80017de <_close>
 8005604:	1c43      	adds	r3, r0, #1
 8005606:	d102      	bne.n	800560e <_close_r+0x1a>
 8005608:	682b      	ldr	r3, [r5, #0]
 800560a:	b103      	cbz	r3, 800560e <_close_r+0x1a>
 800560c:	6023      	str	r3, [r4, #0]
 800560e:	bd38      	pop	{r3, r4, r5, pc}
 8005610:	200001c4 	.word	0x200001c4

08005614 <_fstat_r>:
 8005614:	b538      	push	{r3, r4, r5, lr}
 8005616:	4d07      	ldr	r5, [pc, #28]	; (8005634 <_fstat_r+0x20>)
 8005618:	2300      	movs	r3, #0
 800561a:	4604      	mov	r4, r0
 800561c:	4608      	mov	r0, r1
 800561e:	4611      	mov	r1, r2
 8005620:	602b      	str	r3, [r5, #0]
 8005622:	f7fc f8e8 	bl	80017f6 <_fstat>
 8005626:	1c43      	adds	r3, r0, #1
 8005628:	d102      	bne.n	8005630 <_fstat_r+0x1c>
 800562a:	682b      	ldr	r3, [r5, #0]
 800562c:	b103      	cbz	r3, 8005630 <_fstat_r+0x1c>
 800562e:	6023      	str	r3, [r4, #0]
 8005630:	bd38      	pop	{r3, r4, r5, pc}
 8005632:	bf00      	nop
 8005634:	200001c4 	.word	0x200001c4

08005638 <_isatty_r>:
 8005638:	b538      	push	{r3, r4, r5, lr}
 800563a:	4d06      	ldr	r5, [pc, #24]	; (8005654 <_isatty_r+0x1c>)
 800563c:	2300      	movs	r3, #0
 800563e:	4604      	mov	r4, r0
 8005640:	4608      	mov	r0, r1
 8005642:	602b      	str	r3, [r5, #0]
 8005644:	f7fc f8e7 	bl	8001816 <_isatty>
 8005648:	1c43      	adds	r3, r0, #1
 800564a:	d102      	bne.n	8005652 <_isatty_r+0x1a>
 800564c:	682b      	ldr	r3, [r5, #0]
 800564e:	b103      	cbz	r3, 8005652 <_isatty_r+0x1a>
 8005650:	6023      	str	r3, [r4, #0]
 8005652:	bd38      	pop	{r3, r4, r5, pc}
 8005654:	200001c4 	.word	0x200001c4

08005658 <_lseek_r>:
 8005658:	b538      	push	{r3, r4, r5, lr}
 800565a:	4d07      	ldr	r5, [pc, #28]	; (8005678 <_lseek_r+0x20>)
 800565c:	4604      	mov	r4, r0
 800565e:	4608      	mov	r0, r1
 8005660:	4611      	mov	r1, r2
 8005662:	2200      	movs	r2, #0
 8005664:	602a      	str	r2, [r5, #0]
 8005666:	461a      	mov	r2, r3
 8005668:	f7fc f8e0 	bl	800182c <_lseek>
 800566c:	1c43      	adds	r3, r0, #1
 800566e:	d102      	bne.n	8005676 <_lseek_r+0x1e>
 8005670:	682b      	ldr	r3, [r5, #0]
 8005672:	b103      	cbz	r3, 8005676 <_lseek_r+0x1e>
 8005674:	6023      	str	r3, [r4, #0]
 8005676:	bd38      	pop	{r3, r4, r5, pc}
 8005678:	200001c4 	.word	0x200001c4

0800567c <__malloc_lock>:
 800567c:	4801      	ldr	r0, [pc, #4]	; (8005684 <__malloc_lock+0x8>)
 800567e:	f7ff be03 	b.w	8005288 <__retarget_lock_acquire_recursive>
 8005682:	bf00      	nop
 8005684:	200001b8 	.word	0x200001b8

08005688 <__malloc_unlock>:
 8005688:	4801      	ldr	r0, [pc, #4]	; (8005690 <__malloc_unlock+0x8>)
 800568a:	f7ff bdfe 	b.w	800528a <__retarget_lock_release_recursive>
 800568e:	bf00      	nop
 8005690:	200001b8 	.word	0x200001b8

08005694 <_read_r>:
 8005694:	b538      	push	{r3, r4, r5, lr}
 8005696:	4d07      	ldr	r5, [pc, #28]	; (80056b4 <_read_r+0x20>)
 8005698:	4604      	mov	r4, r0
 800569a:	4608      	mov	r0, r1
 800569c:	4611      	mov	r1, r2
 800569e:	2200      	movs	r2, #0
 80056a0:	602a      	str	r2, [r5, #0]
 80056a2:	461a      	mov	r2, r3
 80056a4:	f7fc f862 	bl	800176c <_read>
 80056a8:	1c43      	adds	r3, r0, #1
 80056aa:	d102      	bne.n	80056b2 <_read_r+0x1e>
 80056ac:	682b      	ldr	r3, [r5, #0]
 80056ae:	b103      	cbz	r3, 80056b2 <_read_r+0x1e>
 80056b0:	6023      	str	r3, [r4, #0]
 80056b2:	bd38      	pop	{r3, r4, r5, pc}
 80056b4:	200001c4 	.word	0x200001c4

080056b8 <_init>:
 80056b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056ba:	bf00      	nop
 80056bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056be:	bc08      	pop	{r3}
 80056c0:	469e      	mov	lr, r3
 80056c2:	4770      	bx	lr

080056c4 <_fini>:
 80056c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056c6:	bf00      	nop
 80056c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056ca:	bc08      	pop	{r3}
 80056cc:	469e      	mov	lr, r3
 80056ce:	4770      	bx	lr
