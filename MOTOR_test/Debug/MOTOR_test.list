
MOTOR_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e34  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08005ff8  08005ff8  00015ff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800607c  0800607c  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800607c  0800607c  0001607c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006084  08006084  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006084  08006084  00016084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006088  08006088  00016088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800608c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000164  20000094  08006120  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001f8  08006120  000201f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001319f  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002598  00000000  00000000  00033263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f60  00000000  00000000  00035800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e88  00000000  00000000  00036760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000265dc  00000000  00000000  000375e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001141a  00000000  00000000  0005dbc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc14d  00000000  00000000  0006efde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014b12b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004980  00000000  00000000  0014b17c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000094 	.word	0x20000094
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08005fe0 	.word	0x08005fe0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000098 	.word	0x20000098
 8000200:	08005fe0 	.word	0x08005fe0

08000204 <__aeabi_drsub>:
 8000204:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000208:	e002      	b.n	8000210 <__adddf3>
 800020a:	bf00      	nop

0800020c <__aeabi_dsub>:
 800020c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000210 <__adddf3>:
 8000210:	b530      	push	{r4, r5, lr}
 8000212:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000216:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021a:	ea94 0f05 	teq	r4, r5
 800021e:	bf08      	it	eq
 8000220:	ea90 0f02 	teqeq	r0, r2
 8000224:	bf1f      	itttt	ne
 8000226:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000232:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000236:	f000 80e2 	beq.w	80003fe <__adddf3+0x1ee>
 800023a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000242:	bfb8      	it	lt
 8000244:	426d      	neglt	r5, r5
 8000246:	dd0c      	ble.n	8000262 <__adddf3+0x52>
 8000248:	442c      	add	r4, r5
 800024a:	ea80 0202 	eor.w	r2, r0, r2
 800024e:	ea81 0303 	eor.w	r3, r1, r3
 8000252:	ea82 0000 	eor.w	r0, r2, r0
 8000256:	ea83 0101 	eor.w	r1, r3, r1
 800025a:	ea80 0202 	eor.w	r2, r0, r2
 800025e:	ea81 0303 	eor.w	r3, r1, r3
 8000262:	2d36      	cmp	r5, #54	; 0x36
 8000264:	bf88      	it	hi
 8000266:	bd30      	pophi	{r4, r5, pc}
 8000268:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800026c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000270:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000274:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x70>
 800027a:	4240      	negs	r0, r0
 800027c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000280:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000284:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000288:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x84>
 800028e:	4252      	negs	r2, r2
 8000290:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000294:	ea94 0f05 	teq	r4, r5
 8000298:	f000 80a7 	beq.w	80003ea <__adddf3+0x1da>
 800029c:	f1a4 0401 	sub.w	r4, r4, #1
 80002a0:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a4:	db0d      	blt.n	80002c2 <__adddf3+0xb2>
 80002a6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002aa:	fa22 f205 	lsr.w	r2, r2, r5
 80002ae:	1880      	adds	r0, r0, r2
 80002b0:	f141 0100 	adc.w	r1, r1, #0
 80002b4:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b8:	1880      	adds	r0, r0, r2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	4159      	adcs	r1, r3
 80002c0:	e00e      	b.n	80002e0 <__adddf3+0xd0>
 80002c2:	f1a5 0520 	sub.w	r5, r5, #32
 80002c6:	f10e 0e20 	add.w	lr, lr, #32
 80002ca:	2a01      	cmp	r2, #1
 80002cc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d0:	bf28      	it	cs
 80002d2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	18c0      	adds	r0, r0, r3
 80002dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e4:	d507      	bpl.n	80002f6 <__adddf3+0xe6>
 80002e6:	f04f 0e00 	mov.w	lr, #0
 80002ea:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ee:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f2:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fa:	d31b      	bcc.n	8000334 <__adddf3+0x124>
 80002fc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000300:	d30c      	bcc.n	800031c <__adddf3+0x10c>
 8000302:	0849      	lsrs	r1, r1, #1
 8000304:	ea5f 0030 	movs.w	r0, r0, rrx
 8000308:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800030c:	f104 0401 	add.w	r4, r4, #1
 8000310:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000314:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000318:	f080 809a 	bcs.w	8000450 <__adddf3+0x240>
 800031c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000320:	bf08      	it	eq
 8000322:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000326:	f150 0000 	adcs.w	r0, r0, #0
 800032a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032e:	ea41 0105 	orr.w	r1, r1, r5
 8000332:	bd30      	pop	{r4, r5, pc}
 8000334:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000338:	4140      	adcs	r0, r0
 800033a:	eb41 0101 	adc.w	r1, r1, r1
 800033e:	3c01      	subs	r4, #1
 8000340:	bf28      	it	cs
 8000342:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000346:	d2e9      	bcs.n	800031c <__adddf3+0x10c>
 8000348:	f091 0f00 	teq	r1, #0
 800034c:	bf04      	itt	eq
 800034e:	4601      	moveq	r1, r0
 8000350:	2000      	moveq	r0, #0
 8000352:	fab1 f381 	clz	r3, r1
 8000356:	bf08      	it	eq
 8000358:	3320      	addeq	r3, #32
 800035a:	f1a3 030b 	sub.w	r3, r3, #11
 800035e:	f1b3 0220 	subs.w	r2, r3, #32
 8000362:	da0c      	bge.n	800037e <__adddf3+0x16e>
 8000364:	320c      	adds	r2, #12
 8000366:	dd08      	ble.n	800037a <__adddf3+0x16a>
 8000368:	f102 0c14 	add.w	ip, r2, #20
 800036c:	f1c2 020c 	rsb	r2, r2, #12
 8000370:	fa01 f00c 	lsl.w	r0, r1, ip
 8000374:	fa21 f102 	lsr.w	r1, r1, r2
 8000378:	e00c      	b.n	8000394 <__adddf3+0x184>
 800037a:	f102 0214 	add.w	r2, r2, #20
 800037e:	bfd8      	it	le
 8000380:	f1c2 0c20 	rsble	ip, r2, #32
 8000384:	fa01 f102 	lsl.w	r1, r1, r2
 8000388:	fa20 fc0c 	lsr.w	ip, r0, ip
 800038c:	bfdc      	itt	le
 800038e:	ea41 010c 	orrle.w	r1, r1, ip
 8000392:	4090      	lslle	r0, r2
 8000394:	1ae4      	subs	r4, r4, r3
 8000396:	bfa2      	ittt	ge
 8000398:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800039c:	4329      	orrge	r1, r5
 800039e:	bd30      	popge	{r4, r5, pc}
 80003a0:	ea6f 0404 	mvn.w	r4, r4
 80003a4:	3c1f      	subs	r4, #31
 80003a6:	da1c      	bge.n	80003e2 <__adddf3+0x1d2>
 80003a8:	340c      	adds	r4, #12
 80003aa:	dc0e      	bgt.n	80003ca <__adddf3+0x1ba>
 80003ac:	f104 0414 	add.w	r4, r4, #20
 80003b0:	f1c4 0220 	rsb	r2, r4, #32
 80003b4:	fa20 f004 	lsr.w	r0, r0, r4
 80003b8:	fa01 f302 	lsl.w	r3, r1, r2
 80003bc:	ea40 0003 	orr.w	r0, r0, r3
 80003c0:	fa21 f304 	lsr.w	r3, r1, r4
 80003c4:	ea45 0103 	orr.w	r1, r5, r3
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	f1c4 040c 	rsb	r4, r4, #12
 80003ce:	f1c4 0220 	rsb	r2, r4, #32
 80003d2:	fa20 f002 	lsr.w	r0, r0, r2
 80003d6:	fa01 f304 	lsl.w	r3, r1, r4
 80003da:	ea40 0003 	orr.w	r0, r0, r3
 80003de:	4629      	mov	r1, r5
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	fa21 f004 	lsr.w	r0, r1, r4
 80003e6:	4629      	mov	r1, r5
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	f094 0f00 	teq	r4, #0
 80003ee:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f2:	bf06      	itte	eq
 80003f4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f8:	3401      	addeq	r4, #1
 80003fa:	3d01      	subne	r5, #1
 80003fc:	e74e      	b.n	800029c <__adddf3+0x8c>
 80003fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000402:	bf18      	it	ne
 8000404:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000408:	d029      	beq.n	800045e <__adddf3+0x24e>
 800040a:	ea94 0f05 	teq	r4, r5
 800040e:	bf08      	it	eq
 8000410:	ea90 0f02 	teqeq	r0, r2
 8000414:	d005      	beq.n	8000422 <__adddf3+0x212>
 8000416:	ea54 0c00 	orrs.w	ip, r4, r0
 800041a:	bf04      	itt	eq
 800041c:	4619      	moveq	r1, r3
 800041e:	4610      	moveq	r0, r2
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea91 0f03 	teq	r1, r3
 8000426:	bf1e      	ittt	ne
 8000428:	2100      	movne	r1, #0
 800042a:	2000      	movne	r0, #0
 800042c:	bd30      	popne	{r4, r5, pc}
 800042e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000432:	d105      	bne.n	8000440 <__adddf3+0x230>
 8000434:	0040      	lsls	r0, r0, #1
 8000436:	4149      	adcs	r1, r1
 8000438:	bf28      	it	cs
 800043a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800043e:	bd30      	pop	{r4, r5, pc}
 8000440:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000444:	bf3c      	itt	cc
 8000446:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044a:	bd30      	popcc	{r4, r5, pc}
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000454:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000458:	f04f 0000 	mov.w	r0, #0
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000462:	bf1a      	itte	ne
 8000464:	4619      	movne	r1, r3
 8000466:	4610      	movne	r0, r2
 8000468:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800046c:	bf1c      	itt	ne
 800046e:	460b      	movne	r3, r1
 8000470:	4602      	movne	r2, r0
 8000472:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000476:	bf06      	itte	eq
 8000478:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800047c:	ea91 0f03 	teqeq	r1, r3
 8000480:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	bf00      	nop

08000488 <__aeabi_ui2d>:
 8000488:	f090 0f00 	teq	r0, #0
 800048c:	bf04      	itt	eq
 800048e:	2100      	moveq	r1, #0
 8000490:	4770      	bxeq	lr
 8000492:	b530      	push	{r4, r5, lr}
 8000494:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000498:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049c:	f04f 0500 	mov.w	r5, #0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e750      	b.n	8000348 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_i2d>:
 80004a8:	f090 0f00 	teq	r0, #0
 80004ac:	bf04      	itt	eq
 80004ae:	2100      	moveq	r1, #0
 80004b0:	4770      	bxeq	lr
 80004b2:	b530      	push	{r4, r5, lr}
 80004b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004bc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c0:	bf48      	it	mi
 80004c2:	4240      	negmi	r0, r0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e73e      	b.n	8000348 <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_f2d>:
 80004cc:	0042      	lsls	r2, r0, #1
 80004ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004da:	bf1f      	itttt	ne
 80004dc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e8:	4770      	bxne	lr
 80004ea:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ee:	bf08      	it	eq
 80004f0:	4770      	bxeq	lr
 80004f2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004f6:	bf04      	itt	eq
 80004f8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000504:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000508:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800050c:	e71c      	b.n	8000348 <__adddf3+0x138>
 800050e:	bf00      	nop

08000510 <__aeabi_ul2d>:
 8000510:	ea50 0201 	orrs.w	r2, r0, r1
 8000514:	bf08      	it	eq
 8000516:	4770      	bxeq	lr
 8000518:	b530      	push	{r4, r5, lr}
 800051a:	f04f 0500 	mov.w	r5, #0
 800051e:	e00a      	b.n	8000536 <__aeabi_l2d+0x16>

08000520 <__aeabi_l2d>:
 8000520:	ea50 0201 	orrs.w	r2, r0, r1
 8000524:	bf08      	it	eq
 8000526:	4770      	bxeq	lr
 8000528:	b530      	push	{r4, r5, lr}
 800052a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800052e:	d502      	bpl.n	8000536 <__aeabi_l2d+0x16>
 8000530:	4240      	negs	r0, r0
 8000532:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000536:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800053e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000542:	f43f aed8 	beq.w	80002f6 <__adddf3+0xe6>
 8000546:	f04f 0203 	mov.w	r2, #3
 800054a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054e:	bf18      	it	ne
 8000550:	3203      	addne	r2, #3
 8000552:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000556:	bf18      	it	ne
 8000558:	3203      	addne	r2, #3
 800055a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055e:	f1c2 0320 	rsb	r3, r2, #32
 8000562:	fa00 fc03 	lsl.w	ip, r0, r3
 8000566:	fa20 f002 	lsr.w	r0, r0, r2
 800056a:	fa01 fe03 	lsl.w	lr, r1, r3
 800056e:	ea40 000e 	orr.w	r0, r0, lr
 8000572:	fa21 f102 	lsr.w	r1, r1, r2
 8000576:	4414      	add	r4, r2
 8000578:	e6bd      	b.n	80002f6 <__adddf3+0xe6>
 800057a:	bf00      	nop

0800057c <__aeabi_d2f>:
 800057c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000580:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000584:	bf24      	itt	cs
 8000586:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800058a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800058e:	d90d      	bls.n	80005ac <__aeabi_d2f+0x30>
 8000590:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000594:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000598:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800059c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80005a0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80005a4:	bf08      	it	eq
 80005a6:	f020 0001 	biceq.w	r0, r0, #1
 80005aa:	4770      	bx	lr
 80005ac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80005b0:	d121      	bne.n	80005f6 <__aeabi_d2f+0x7a>
 80005b2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80005b6:	bfbc      	itt	lt
 80005b8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80005bc:	4770      	bxlt	lr
 80005be:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80005c6:	f1c2 0218 	rsb	r2, r2, #24
 80005ca:	f1c2 0c20 	rsb	ip, r2, #32
 80005ce:	fa10 f30c 	lsls.w	r3, r0, ip
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	bf18      	it	ne
 80005d8:	f040 0001 	orrne.w	r0, r0, #1
 80005dc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80005e0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80005e4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80005e8:	ea40 000c 	orr.w	r0, r0, ip
 80005ec:	fa23 f302 	lsr.w	r3, r3, r2
 80005f0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80005f4:	e7cc      	b.n	8000590 <__aeabi_d2f+0x14>
 80005f6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80005fa:	d107      	bne.n	800060c <__aeabi_d2f+0x90>
 80005fc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000600:	bf1e      	ittt	ne
 8000602:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000606:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800060a:	4770      	bxne	lr
 800060c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000610:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000614:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop

0800061c <__aeabi_uldivmod>:
 800061c:	b953      	cbnz	r3, 8000634 <__aeabi_uldivmod+0x18>
 800061e:	b94a      	cbnz	r2, 8000634 <__aeabi_uldivmod+0x18>
 8000620:	2900      	cmp	r1, #0
 8000622:	bf08      	it	eq
 8000624:	2800      	cmpeq	r0, #0
 8000626:	bf1c      	itt	ne
 8000628:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800062c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000630:	f000 b974 	b.w	800091c <__aeabi_idiv0>
 8000634:	f1ad 0c08 	sub.w	ip, sp, #8
 8000638:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800063c:	f000 f806 	bl	800064c <__udivmoddi4>
 8000640:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000644:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000648:	b004      	add	sp, #16
 800064a:	4770      	bx	lr

0800064c <__udivmoddi4>:
 800064c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000650:	9d08      	ldr	r5, [sp, #32]
 8000652:	4604      	mov	r4, r0
 8000654:	468e      	mov	lr, r1
 8000656:	2b00      	cmp	r3, #0
 8000658:	d14d      	bne.n	80006f6 <__udivmoddi4+0xaa>
 800065a:	428a      	cmp	r2, r1
 800065c:	4694      	mov	ip, r2
 800065e:	d969      	bls.n	8000734 <__udivmoddi4+0xe8>
 8000660:	fab2 f282 	clz	r2, r2
 8000664:	b152      	cbz	r2, 800067c <__udivmoddi4+0x30>
 8000666:	fa01 f302 	lsl.w	r3, r1, r2
 800066a:	f1c2 0120 	rsb	r1, r2, #32
 800066e:	fa20 f101 	lsr.w	r1, r0, r1
 8000672:	fa0c fc02 	lsl.w	ip, ip, r2
 8000676:	ea41 0e03 	orr.w	lr, r1, r3
 800067a:	4094      	lsls	r4, r2
 800067c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000680:	0c21      	lsrs	r1, r4, #16
 8000682:	fbbe f6f8 	udiv	r6, lr, r8
 8000686:	fa1f f78c 	uxth.w	r7, ip
 800068a:	fb08 e316 	mls	r3, r8, r6, lr
 800068e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000692:	fb06 f107 	mul.w	r1, r6, r7
 8000696:	4299      	cmp	r1, r3
 8000698:	d90a      	bls.n	80006b0 <__udivmoddi4+0x64>
 800069a:	eb1c 0303 	adds.w	r3, ip, r3
 800069e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80006a2:	f080 811f 	bcs.w	80008e4 <__udivmoddi4+0x298>
 80006a6:	4299      	cmp	r1, r3
 80006a8:	f240 811c 	bls.w	80008e4 <__udivmoddi4+0x298>
 80006ac:	3e02      	subs	r6, #2
 80006ae:	4463      	add	r3, ip
 80006b0:	1a5b      	subs	r3, r3, r1
 80006b2:	b2a4      	uxth	r4, r4
 80006b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80006b8:	fb08 3310 	mls	r3, r8, r0, r3
 80006bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006c0:	fb00 f707 	mul.w	r7, r0, r7
 80006c4:	42a7      	cmp	r7, r4
 80006c6:	d90a      	bls.n	80006de <__udivmoddi4+0x92>
 80006c8:	eb1c 0404 	adds.w	r4, ip, r4
 80006cc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80006d0:	f080 810a 	bcs.w	80008e8 <__udivmoddi4+0x29c>
 80006d4:	42a7      	cmp	r7, r4
 80006d6:	f240 8107 	bls.w	80008e8 <__udivmoddi4+0x29c>
 80006da:	4464      	add	r4, ip
 80006dc:	3802      	subs	r0, #2
 80006de:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80006e2:	1be4      	subs	r4, r4, r7
 80006e4:	2600      	movs	r6, #0
 80006e6:	b11d      	cbz	r5, 80006f0 <__udivmoddi4+0xa4>
 80006e8:	40d4      	lsrs	r4, r2
 80006ea:	2300      	movs	r3, #0
 80006ec:	e9c5 4300 	strd	r4, r3, [r5]
 80006f0:	4631      	mov	r1, r6
 80006f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006f6:	428b      	cmp	r3, r1
 80006f8:	d909      	bls.n	800070e <__udivmoddi4+0xc2>
 80006fa:	2d00      	cmp	r5, #0
 80006fc:	f000 80ef 	beq.w	80008de <__udivmoddi4+0x292>
 8000700:	2600      	movs	r6, #0
 8000702:	e9c5 0100 	strd	r0, r1, [r5]
 8000706:	4630      	mov	r0, r6
 8000708:	4631      	mov	r1, r6
 800070a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800070e:	fab3 f683 	clz	r6, r3
 8000712:	2e00      	cmp	r6, #0
 8000714:	d14a      	bne.n	80007ac <__udivmoddi4+0x160>
 8000716:	428b      	cmp	r3, r1
 8000718:	d302      	bcc.n	8000720 <__udivmoddi4+0xd4>
 800071a:	4282      	cmp	r2, r0
 800071c:	f200 80f9 	bhi.w	8000912 <__udivmoddi4+0x2c6>
 8000720:	1a84      	subs	r4, r0, r2
 8000722:	eb61 0303 	sbc.w	r3, r1, r3
 8000726:	2001      	movs	r0, #1
 8000728:	469e      	mov	lr, r3
 800072a:	2d00      	cmp	r5, #0
 800072c:	d0e0      	beq.n	80006f0 <__udivmoddi4+0xa4>
 800072e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000732:	e7dd      	b.n	80006f0 <__udivmoddi4+0xa4>
 8000734:	b902      	cbnz	r2, 8000738 <__udivmoddi4+0xec>
 8000736:	deff      	udf	#255	; 0xff
 8000738:	fab2 f282 	clz	r2, r2
 800073c:	2a00      	cmp	r2, #0
 800073e:	f040 8092 	bne.w	8000866 <__udivmoddi4+0x21a>
 8000742:	eba1 010c 	sub.w	r1, r1, ip
 8000746:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800074a:	fa1f fe8c 	uxth.w	lr, ip
 800074e:	2601      	movs	r6, #1
 8000750:	0c20      	lsrs	r0, r4, #16
 8000752:	fbb1 f3f7 	udiv	r3, r1, r7
 8000756:	fb07 1113 	mls	r1, r7, r3, r1
 800075a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800075e:	fb0e f003 	mul.w	r0, lr, r3
 8000762:	4288      	cmp	r0, r1
 8000764:	d908      	bls.n	8000778 <__udivmoddi4+0x12c>
 8000766:	eb1c 0101 	adds.w	r1, ip, r1
 800076a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800076e:	d202      	bcs.n	8000776 <__udivmoddi4+0x12a>
 8000770:	4288      	cmp	r0, r1
 8000772:	f200 80cb 	bhi.w	800090c <__udivmoddi4+0x2c0>
 8000776:	4643      	mov	r3, r8
 8000778:	1a09      	subs	r1, r1, r0
 800077a:	b2a4      	uxth	r4, r4
 800077c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000780:	fb07 1110 	mls	r1, r7, r0, r1
 8000784:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000788:	fb0e fe00 	mul.w	lr, lr, r0
 800078c:	45a6      	cmp	lr, r4
 800078e:	d908      	bls.n	80007a2 <__udivmoddi4+0x156>
 8000790:	eb1c 0404 	adds.w	r4, ip, r4
 8000794:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000798:	d202      	bcs.n	80007a0 <__udivmoddi4+0x154>
 800079a:	45a6      	cmp	lr, r4
 800079c:	f200 80bb 	bhi.w	8000916 <__udivmoddi4+0x2ca>
 80007a0:	4608      	mov	r0, r1
 80007a2:	eba4 040e 	sub.w	r4, r4, lr
 80007a6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80007aa:	e79c      	b.n	80006e6 <__udivmoddi4+0x9a>
 80007ac:	f1c6 0720 	rsb	r7, r6, #32
 80007b0:	40b3      	lsls	r3, r6
 80007b2:	fa22 fc07 	lsr.w	ip, r2, r7
 80007b6:	ea4c 0c03 	orr.w	ip, ip, r3
 80007ba:	fa20 f407 	lsr.w	r4, r0, r7
 80007be:	fa01 f306 	lsl.w	r3, r1, r6
 80007c2:	431c      	orrs	r4, r3
 80007c4:	40f9      	lsrs	r1, r7
 80007c6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80007ca:	fa00 f306 	lsl.w	r3, r0, r6
 80007ce:	fbb1 f8f9 	udiv	r8, r1, r9
 80007d2:	0c20      	lsrs	r0, r4, #16
 80007d4:	fa1f fe8c 	uxth.w	lr, ip
 80007d8:	fb09 1118 	mls	r1, r9, r8, r1
 80007dc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80007e0:	fb08 f00e 	mul.w	r0, r8, lr
 80007e4:	4288      	cmp	r0, r1
 80007e6:	fa02 f206 	lsl.w	r2, r2, r6
 80007ea:	d90b      	bls.n	8000804 <__udivmoddi4+0x1b8>
 80007ec:	eb1c 0101 	adds.w	r1, ip, r1
 80007f0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80007f4:	f080 8088 	bcs.w	8000908 <__udivmoddi4+0x2bc>
 80007f8:	4288      	cmp	r0, r1
 80007fa:	f240 8085 	bls.w	8000908 <__udivmoddi4+0x2bc>
 80007fe:	f1a8 0802 	sub.w	r8, r8, #2
 8000802:	4461      	add	r1, ip
 8000804:	1a09      	subs	r1, r1, r0
 8000806:	b2a4      	uxth	r4, r4
 8000808:	fbb1 f0f9 	udiv	r0, r1, r9
 800080c:	fb09 1110 	mls	r1, r9, r0, r1
 8000810:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000814:	fb00 fe0e 	mul.w	lr, r0, lr
 8000818:	458e      	cmp	lr, r1
 800081a:	d908      	bls.n	800082e <__udivmoddi4+0x1e2>
 800081c:	eb1c 0101 	adds.w	r1, ip, r1
 8000820:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000824:	d26c      	bcs.n	8000900 <__udivmoddi4+0x2b4>
 8000826:	458e      	cmp	lr, r1
 8000828:	d96a      	bls.n	8000900 <__udivmoddi4+0x2b4>
 800082a:	3802      	subs	r0, #2
 800082c:	4461      	add	r1, ip
 800082e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000832:	fba0 9402 	umull	r9, r4, r0, r2
 8000836:	eba1 010e 	sub.w	r1, r1, lr
 800083a:	42a1      	cmp	r1, r4
 800083c:	46c8      	mov	r8, r9
 800083e:	46a6      	mov	lr, r4
 8000840:	d356      	bcc.n	80008f0 <__udivmoddi4+0x2a4>
 8000842:	d053      	beq.n	80008ec <__udivmoddi4+0x2a0>
 8000844:	b15d      	cbz	r5, 800085e <__udivmoddi4+0x212>
 8000846:	ebb3 0208 	subs.w	r2, r3, r8
 800084a:	eb61 010e 	sbc.w	r1, r1, lr
 800084e:	fa01 f707 	lsl.w	r7, r1, r7
 8000852:	fa22 f306 	lsr.w	r3, r2, r6
 8000856:	40f1      	lsrs	r1, r6
 8000858:	431f      	orrs	r7, r3
 800085a:	e9c5 7100 	strd	r7, r1, [r5]
 800085e:	2600      	movs	r6, #0
 8000860:	4631      	mov	r1, r6
 8000862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000866:	f1c2 0320 	rsb	r3, r2, #32
 800086a:	40d8      	lsrs	r0, r3
 800086c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000870:	fa21 f303 	lsr.w	r3, r1, r3
 8000874:	4091      	lsls	r1, r2
 8000876:	4301      	orrs	r1, r0
 8000878:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800087c:	fa1f fe8c 	uxth.w	lr, ip
 8000880:	fbb3 f0f7 	udiv	r0, r3, r7
 8000884:	fb07 3610 	mls	r6, r7, r0, r3
 8000888:	0c0b      	lsrs	r3, r1, #16
 800088a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800088e:	fb00 f60e 	mul.w	r6, r0, lr
 8000892:	429e      	cmp	r6, r3
 8000894:	fa04 f402 	lsl.w	r4, r4, r2
 8000898:	d908      	bls.n	80008ac <__udivmoddi4+0x260>
 800089a:	eb1c 0303 	adds.w	r3, ip, r3
 800089e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80008a2:	d22f      	bcs.n	8000904 <__udivmoddi4+0x2b8>
 80008a4:	429e      	cmp	r6, r3
 80008a6:	d92d      	bls.n	8000904 <__udivmoddi4+0x2b8>
 80008a8:	3802      	subs	r0, #2
 80008aa:	4463      	add	r3, ip
 80008ac:	1b9b      	subs	r3, r3, r6
 80008ae:	b289      	uxth	r1, r1
 80008b0:	fbb3 f6f7 	udiv	r6, r3, r7
 80008b4:	fb07 3316 	mls	r3, r7, r6, r3
 80008b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008bc:	fb06 f30e 	mul.w	r3, r6, lr
 80008c0:	428b      	cmp	r3, r1
 80008c2:	d908      	bls.n	80008d6 <__udivmoddi4+0x28a>
 80008c4:	eb1c 0101 	adds.w	r1, ip, r1
 80008c8:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80008cc:	d216      	bcs.n	80008fc <__udivmoddi4+0x2b0>
 80008ce:	428b      	cmp	r3, r1
 80008d0:	d914      	bls.n	80008fc <__udivmoddi4+0x2b0>
 80008d2:	3e02      	subs	r6, #2
 80008d4:	4461      	add	r1, ip
 80008d6:	1ac9      	subs	r1, r1, r3
 80008d8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80008dc:	e738      	b.n	8000750 <__udivmoddi4+0x104>
 80008de:	462e      	mov	r6, r5
 80008e0:	4628      	mov	r0, r5
 80008e2:	e705      	b.n	80006f0 <__udivmoddi4+0xa4>
 80008e4:	4606      	mov	r6, r0
 80008e6:	e6e3      	b.n	80006b0 <__udivmoddi4+0x64>
 80008e8:	4618      	mov	r0, r3
 80008ea:	e6f8      	b.n	80006de <__udivmoddi4+0x92>
 80008ec:	454b      	cmp	r3, r9
 80008ee:	d2a9      	bcs.n	8000844 <__udivmoddi4+0x1f8>
 80008f0:	ebb9 0802 	subs.w	r8, r9, r2
 80008f4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80008f8:	3801      	subs	r0, #1
 80008fa:	e7a3      	b.n	8000844 <__udivmoddi4+0x1f8>
 80008fc:	4646      	mov	r6, r8
 80008fe:	e7ea      	b.n	80008d6 <__udivmoddi4+0x28a>
 8000900:	4620      	mov	r0, r4
 8000902:	e794      	b.n	800082e <__udivmoddi4+0x1e2>
 8000904:	4640      	mov	r0, r8
 8000906:	e7d1      	b.n	80008ac <__udivmoddi4+0x260>
 8000908:	46d0      	mov	r8, sl
 800090a:	e77b      	b.n	8000804 <__udivmoddi4+0x1b8>
 800090c:	3b02      	subs	r3, #2
 800090e:	4461      	add	r1, ip
 8000910:	e732      	b.n	8000778 <__udivmoddi4+0x12c>
 8000912:	4630      	mov	r0, r6
 8000914:	e709      	b.n	800072a <__udivmoddi4+0xde>
 8000916:	4464      	add	r4, ip
 8000918:	3802      	subs	r0, #2
 800091a:	e742      	b.n	80007a2 <__udivmoddi4+0x156>

0800091c <__aeabi_idiv0>:
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop

08000920 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8000920:	b480      	push	{r7}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
 8000926:	ed87 0a01 	vstr	s0, [r7, #4]
 800092a:	edd7 7a01 	vldr	s15, [r7, #4]
 800092e:	eef0 7ae7 	vabs.f32	s15, s15
 8000932:	eeb0 0a67 	vmov.f32	s0, s15
 8000936:	370c      	adds	r7, #12
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr

08000940 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b08a      	sub	sp, #40	; 0x28
 8000944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	setbuf(stdout, NULL);
 8000946:	4b64      	ldr	r3, [pc, #400]	; (8000ad8 <main+0x198>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	689b      	ldr	r3, [r3, #8]
 800094c:	2100      	movs	r1, #0
 800094e:	4618      	mov	r0, r3
 8000950:	f004 fde8 	bl	8005524 <setbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000954:	f001 fc7e 	bl	8002254 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000958:	f000 f8ce 	bl	8000af8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800095c:	f000 fb46 	bl	8000fec <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 8000960:	f000 fb16 	bl	8000f90 <_ZL19MX_USART2_UART_Initv>
  MX_TIM1_Init();
 8000964:	f000 f986 	bl	8000c74 <_ZL12MX_TIM1_Initv>
  MX_TIM2_Init();
 8000968:	f000 fa64 	bl	8000e34 <_ZL12MX_TIM2_Initv>
  MX_CAN2_Init();
 800096c:	f000 f946 	bl	8000bfc <_ZL12MX_CAN2_Initv>
  /* USER CODE BEGIN 2 */
	CAN_FilterTypeDef filter;
	  filter.FilterIdHigh         = 0;                        // フィルターID(上位16ビット)
 8000970:	2300      	movs	r3, #0
 8000972:	603b      	str	r3, [r7, #0]
	  filter.FilterIdLow          = 0;                        // フィルターID(下位16ビット)
 8000974:	2300      	movs	r3, #0
 8000976:	607b      	str	r3, [r7, #4]
	  filter.FilterMaskIdHigh     = 0;                        // フィルターマスク(上位16ビット)
 8000978:	2300      	movs	r3, #0
 800097a:	60bb      	str	r3, [r7, #8]
	  filter.FilterMaskIdLow      = 0;                        // フィルターマスク(下位16ビット)
 800097c:	2300      	movs	r3, #0
 800097e:	60fb      	str	r3, [r7, #12]
	  filter.FilterScale          = CAN_FILTERSCALE_32BIT;    // フィルタースケール
 8000980:	2301      	movs	r3, #1
 8000982:	61fb      	str	r3, [r7, #28]
	  filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;         // フィルターに割り当てるFIFO
 8000984:	2300      	movs	r3, #0
 8000986:	613b      	str	r3, [r7, #16]
	  filter.FilterBank           = 14;                        // フィルターバンクNo
 8000988:	230e      	movs	r3, #14
 800098a:	617b      	str	r3, [r7, #20]
	  filter.FilterMode           = CAN_FILTERMODE_IDMASK;    // フィルターモード
 800098c:	2300      	movs	r3, #0
 800098e:	61bb      	str	r3, [r7, #24]
	  filter.SlaveStartFilterBank = 14;                       // スレーブCANの開始フィルターバンクNo
 8000990:	230e      	movs	r3, #14
 8000992:	627b      	str	r3, [r7, #36]	; 0x24
	  filter.FilterActivation     = ENABLE;                   // フィルター無効／有効
 8000994:	2301      	movs	r3, #1
 8000996:	623b      	str	r3, [r7, #32]





  HAL_CAN_ConfigFilter(&hcan2, &filter);
 8000998:	463b      	mov	r3, r7
 800099a:	4619      	mov	r1, r3
 800099c:	484f      	ldr	r0, [pc, #316]	; (8000adc <main+0x19c>)
 800099e:	f001 fdeb 	bl	8002578 <HAL_CAN_ConfigFilter>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80009a2:	2100      	movs	r1, #0
 80009a4:	484e      	ldr	r0, [pc, #312]	; (8000ae0 <main+0x1a0>)
 80009a6:	f003 fc13 	bl	80041d0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80009aa:	2104      	movs	r1, #4
 80009ac:	484c      	ldr	r0, [pc, #304]	; (8000ae0 <main+0x1a0>)
 80009ae:	f003 fc0f 	bl	80041d0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80009b2:	2108      	movs	r1, #8
 80009b4:	484a      	ldr	r0, [pc, #296]	; (8000ae0 <main+0x1a0>)
 80009b6:	f003 fc0b 	bl	80041d0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80009ba:	2100      	movs	r1, #0
 80009bc:	4849      	ldr	r0, [pc, #292]	; (8000ae4 <main+0x1a4>)
 80009be:	f003 fc07 	bl	80041d0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80009c2:	2104      	movs	r1, #4
 80009c4:	4847      	ldr	r0, [pc, #284]	; (8000ae4 <main+0x1a4>)
 80009c6:	f003 fc03 	bl	80041d0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80009ca:	2108      	movs	r1, #8
 80009cc:	4845      	ldr	r0, [pc, #276]	; (8000ae4 <main+0x1a4>)
 80009ce:	f003 fbff 	bl	80041d0 <HAL_TIM_PWM_Start>
  HAL_CAN_Start(&hcan2);
 80009d2:	4842      	ldr	r0, [pc, #264]	; (8000adc <main+0x19c>)
 80009d4:	f001 feb0 	bl	8002738 <HAL_CAN_Start>
  // 割り込み有効
  HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 80009d8:	2102      	movs	r1, #2
 80009da:	4840      	ldr	r0, [pc, #256]	; (8000adc <main+0x19c>)
 80009dc:	f002 f802 	bl	80029e4 <HAL_CAN_ActivateNotification>
  printf("start\n");
 80009e0:	4841      	ldr	r0, [pc, #260]	; (8000ae8 <main+0x1a8>)
 80009e2:	f004 fd97 	bl	8005514 <puts>

  HAL_GPIO_WritePin(GPIOC,PSB1_Pin,GPIO_PIN_SET);
 80009e6:	2201      	movs	r2, #1
 80009e8:	2102      	movs	r1, #2
 80009ea:	4840      	ldr	r0, [pc, #256]	; (8000aec <main+0x1ac>)
 80009ec:	f002 fcf6 	bl	80033dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB,BRK1_Pin,GPIO_PIN_RESET);
 80009f0:	2200      	movs	r2, #0
 80009f2:	2101      	movs	r1, #1
 80009f4:	483e      	ldr	r0, [pc, #248]	; (8000af0 <main+0x1b0>)
 80009f6:	f002 fcf1 	bl	80033dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC,PSB2_Pin,GPIO_PIN_SET);
 80009fa:	2201      	movs	r2, #1
 80009fc:	2101      	movs	r1, #1
 80009fe:	483b      	ldr	r0, [pc, #236]	; (8000aec <main+0x1ac>)
 8000a00:	f002 fcec 	bl	80033dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC,BRK2_Pin,GPIO_PIN_RESET);
 8000a04:	2200      	movs	r2, #0
 8000a06:	2104      	movs	r1, #4
 8000a08:	4838      	ldr	r0, [pc, #224]	; (8000aec <main+0x1ac>)
 8000a0a:	f002 fce7 	bl	80033dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC,PSB3_Pin,GPIO_PIN_SET);
 8000a0e:	2201      	movs	r2, #1
 8000a10:	2110      	movs	r1, #16
 8000a12:	4836      	ldr	r0, [pc, #216]	; (8000aec <main+0x1ac>)
 8000a14:	f002 fce2 	bl	80033dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB,BRK3_Pin,GPIO_PIN_RESET);
 8000a18:	2200      	movs	r2, #0
 8000a1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a1e:	4834      	ldr	r0, [pc, #208]	; (8000af0 <main+0x1b0>)
 8000a20:	f002 fcdc 	bl	80033dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB,PSB4_Pin,GPIO_PIN_SET);
 8000a24:	2201      	movs	r2, #1
 8000a26:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a2a:	4831      	ldr	r0, [pc, #196]	; (8000af0 <main+0x1b0>)
 8000a2c:	f002 fcd6 	bl	80033dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB,BRK4_Pin,GPIO_PIN_RESET);
 8000a30:	2200      	movs	r2, #0
 8000a32:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a36:	482e      	ldr	r0, [pc, #184]	; (8000af0 <main+0x1b0>)
 8000a38:	f002 fcd0 	bl	80033dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB,PSB5_Pin,GPIO_PIN_SET);
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	2102      	movs	r1, #2
 8000a40:	482b      	ldr	r0, [pc, #172]	; (8000af0 <main+0x1b0>)
 8000a42:	f002 fccb 	bl	80033dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB,BRK5_Pin,GPIO_PIN_RESET);
 8000a46:	2200      	movs	r2, #0
 8000a48:	2104      	movs	r1, #4
 8000a4a:	4829      	ldr	r0, [pc, #164]	; (8000af0 <main+0x1b0>)
 8000a4c:	f002 fcc6 	bl	80033dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB,PSB6_Pin,GPIO_PIN_SET);
 8000a50:	2201      	movs	r2, #1
 8000a52:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a56:	4826      	ldr	r0, [pc, #152]	; (8000af0 <main+0x1b0>)
 8000a58:	f002 fcc0 	bl	80033dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB,BRK6_Pin,GPIO_PIN_RESET);
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a62:	4823      	ldr	r0, [pc, #140]	; (8000af0 <main+0x1b0>)
 8000a64:	f002 fcba 	bl	80033dc <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOA, LED1_Pin, GPIO_PIN_SET);
 8000a68:	2201      	movs	r2, #1
 8000a6a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a6e:	4821      	ldr	r0, [pc, #132]	; (8000af4 <main+0x1b4>)
 8000a70:	f002 fcb4 	bl	80033dc <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000a74:	2064      	movs	r0, #100	; 0x64
 8000a76:	f001 fc5f 	bl	8002338 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, LED2_Pin, GPIO_PIN_SET);
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a80:	481c      	ldr	r0, [pc, #112]	; (8000af4 <main+0x1b4>)
 8000a82:	f002 fcab 	bl	80033dc <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000a86:	2064      	movs	r0, #100	; 0x64
 8000a88:	f001 fc56 	bl	8002338 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, LED3_Pin, GPIO_PIN_SET);
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a92:	4818      	ldr	r0, [pc, #96]	; (8000af4 <main+0x1b4>)
 8000a94:	f002 fca2 	bl	80033dc <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000a98:	2064      	movs	r0, #100	; 0x64
 8000a9a:	f001 fc4d 	bl	8002338 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, LED1_Pin, GPIO_PIN_RESET);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aa4:	4813      	ldr	r0, [pc, #76]	; (8000af4 <main+0x1b4>)
 8000aa6:	f002 fc99 	bl	80033dc <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000aaa:	2064      	movs	r0, #100	; 0x64
 8000aac:	f001 fc44 	bl	8002338 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, LED2_Pin, GPIO_PIN_RESET);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ab6:	480f      	ldr	r0, [pc, #60]	; (8000af4 <main+0x1b4>)
 8000ab8:	f002 fc90 	bl	80033dc <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000abc:	2064      	movs	r0, #100	; 0x64
 8000abe:	f001 fc3b 	bl	8002338 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, LED3_Pin, GPIO_PIN_RESET);
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ac8:	480a      	ldr	r0, [pc, #40]	; (8000af4 <main+0x1b4>)
 8000aca:	f002 fc87 	bl	80033dc <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000ace:	2064      	movs	r0, #100	; 0x64
 8000ad0:	f001 fc32 	bl	8002338 <HAL_Delay>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ad4:	e7fe      	b.n	8000ad4 <main+0x194>
 8000ad6:	bf00      	nop
 8000ad8:	20000030 	.word	0x20000030
 8000adc:	200000b0 	.word	0x200000b0
 8000ae0:	200000d8 	.word	0x200000d8
 8000ae4:	20000120 	.word	0x20000120
 8000ae8:	08005ff8 	.word	0x08005ff8
 8000aec:	40020800 	.word	0x40020800
 8000af0:	40020400 	.word	0x40020400
 8000af4:	40020000 	.word	0x40020000

08000af8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b094      	sub	sp, #80	; 0x50
 8000afc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000afe:	f107 031c 	add.w	r3, r7, #28
 8000b02:	2234      	movs	r2, #52	; 0x34
 8000b04:	2100      	movs	r1, #0
 8000b06:	4618      	mov	r0, r3
 8000b08:	f004 fc8e 	bl	8005428 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b0c:	f107 0308 	add.w	r3, r7, #8
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
 8000b1a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	607b      	str	r3, [r7, #4]
 8000b20:	4b34      	ldr	r3, [pc, #208]	; (8000bf4 <_Z18SystemClock_Configv+0xfc>)
 8000b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b24:	4a33      	ldr	r2, [pc, #204]	; (8000bf4 <_Z18SystemClock_Configv+0xfc>)
 8000b26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b2a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b2c:	4b31      	ldr	r3, [pc, #196]	; (8000bf4 <_Z18SystemClock_Configv+0xfc>)
 8000b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b34:	607b      	str	r3, [r7, #4]
 8000b36:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b38:	2300      	movs	r3, #0
 8000b3a:	603b      	str	r3, [r7, #0]
 8000b3c:	4b2e      	ldr	r3, [pc, #184]	; (8000bf8 <_Z18SystemClock_Configv+0x100>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a2d      	ldr	r2, [pc, #180]	; (8000bf8 <_Z18SystemClock_Configv+0x100>)
 8000b42:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b46:	6013      	str	r3, [r2, #0]
 8000b48:	4b2b      	ldr	r3, [pc, #172]	; (8000bf8 <_Z18SystemClock_Configv+0x100>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b50:	603b      	str	r3, [r7, #0]
 8000b52:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b54:	2302      	movs	r3, #2
 8000b56:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b5c:	2310      	movs	r3, #16
 8000b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b60:	2302      	movs	r3, #2
 8000b62:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b64:	2300      	movs	r3, #0
 8000b66:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000b68:	2308      	movs	r3, #8
 8000b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000b6c:	23b4      	movs	r3, #180	; 0xb4
 8000b6e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b70:	2302      	movs	r3, #2
 8000b72:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000b74:	2302      	movs	r3, #2
 8000b76:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b78:	2302      	movs	r3, #2
 8000b7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b7c:	f107 031c 	add.w	r3, r7, #28
 8000b80:	4618      	mov	r0, r3
 8000b82:	f002 ffdf 	bl	8003b44 <HAL_RCC_OscConfig>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	bf14      	ite	ne
 8000b8c:	2301      	movne	r3, #1
 8000b8e:	2300      	moveq	r3, #0
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 8000b96:	f000 ff49 	bl	8001a2c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000b9a:	f002 fc39 	bl	8003410 <HAL_PWREx_EnableOverDrive>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	bf14      	ite	ne
 8000ba4:	2301      	movne	r3, #1
 8000ba6:	2300      	moveq	r3, #0
 8000ba8:	b2db      	uxtb	r3, r3
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <_Z18SystemClock_Configv+0xba>
  {
    Error_Handler();
 8000bae:	f000 ff3d 	bl	8001a2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bb2:	230f      	movs	r3, #15
 8000bb4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000bbe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000bc2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000bc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bc8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000bca:	f107 0308 	add.w	r3, r7, #8
 8000bce:	2105      	movs	r1, #5
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f002 fc6d 	bl	80034b0 <HAL_RCC_ClockConfig>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	bf14      	ite	ne
 8000bdc:	2301      	movne	r3, #1
 8000bde:	2300      	moveq	r3, #0
 8000be0:	b2db      	uxtb	r3, r3
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <_Z18SystemClock_Configv+0xf2>
  {
    Error_Handler();
 8000be6:	f000 ff21 	bl	8001a2c <Error_Handler>
  }
}
 8000bea:	bf00      	nop
 8000bec:	3750      	adds	r7, #80	; 0x50
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	40023800 	.word	0x40023800
 8000bf8:	40007000 	.word	0x40007000

08000bfc <_ZL12MX_CAN2_Initv>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000c00:	4b1a      	ldr	r3, [pc, #104]	; (8000c6c <_ZL12MX_CAN2_Initv+0x70>)
 8000c02:	4a1b      	ldr	r2, [pc, #108]	; (8000c70 <_ZL12MX_CAN2_Initv+0x74>)
 8000c04:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 9;
 8000c06:	4b19      	ldr	r3, [pc, #100]	; (8000c6c <_ZL12MX_CAN2_Initv+0x70>)
 8000c08:	2209      	movs	r2, #9
 8000c0a:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000c0c:	4b17      	ldr	r3, [pc, #92]	; (8000c6c <_ZL12MX_CAN2_Initv+0x70>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_4TQ;
 8000c12:	4b16      	ldr	r3, [pc, #88]	; (8000c6c <_ZL12MX_CAN2_Initv+0x70>)
 8000c14:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 8000c18:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_4TQ;
 8000c1a:	4b14      	ldr	r3, [pc, #80]	; (8000c6c <_ZL12MX_CAN2_Initv+0x70>)
 8000c1c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000c20:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_5TQ;
 8000c22:	4b12      	ldr	r3, [pc, #72]	; (8000c6c <_ZL12MX_CAN2_Initv+0x70>)
 8000c24:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000c28:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000c2a:	4b10      	ldr	r3, [pc, #64]	; (8000c6c <_ZL12MX_CAN2_Initv+0x70>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000c30:	4b0e      	ldr	r3, [pc, #56]	; (8000c6c <_ZL12MX_CAN2_Initv+0x70>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000c36:	4b0d      	ldr	r3, [pc, #52]	; (8000c6c <_ZL12MX_CAN2_Initv+0x70>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000c3c:	4b0b      	ldr	r3, [pc, #44]	; (8000c6c <_ZL12MX_CAN2_Initv+0x70>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000c42:	4b0a      	ldr	r3, [pc, #40]	; (8000c6c <_ZL12MX_CAN2_Initv+0x70>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000c48:	4b08      	ldr	r3, [pc, #32]	; (8000c6c <_ZL12MX_CAN2_Initv+0x70>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000c4e:	4807      	ldr	r0, [pc, #28]	; (8000c6c <_ZL12MX_CAN2_Initv+0x70>)
 8000c50:	f001 fb96 	bl	8002380 <HAL_CAN_Init>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	bf14      	ite	ne
 8000c5a:	2301      	movne	r3, #1
 8000c5c:	2300      	moveq	r3, #0
 8000c5e:	b2db      	uxtb	r3, r3
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <_ZL12MX_CAN2_Initv+0x6c>
  {
    Error_Handler();
 8000c64:	f000 fee2 	bl	8001a2c <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8000c68:	bf00      	nop
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	200000b0 	.word	0x200000b0
 8000c70:	40006800 	.word	0x40006800

08000c74 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b096      	sub	sp, #88	; 0x58
 8000c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c7a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000c7e:	2200      	movs	r2, #0
 8000c80:	601a      	str	r2, [r3, #0]
 8000c82:	605a      	str	r2, [r3, #4]
 8000c84:	609a      	str	r2, [r3, #8]
 8000c86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c88:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]
 8000c9a:	605a      	str	r2, [r3, #4]
 8000c9c:	609a      	str	r2, [r3, #8]
 8000c9e:	60da      	str	r2, [r3, #12]
 8000ca0:	611a      	str	r2, [r3, #16]
 8000ca2:	615a      	str	r2, [r3, #20]
 8000ca4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ca6:	1d3b      	adds	r3, r7, #4
 8000ca8:	2220      	movs	r2, #32
 8000caa:	2100      	movs	r1, #0
 8000cac:	4618      	mov	r0, r3
 8000cae:	f004 fbbb 	bl	8005428 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000cb2:	4b5e      	ldr	r3, [pc, #376]	; (8000e2c <_ZL12MX_TIM1_Initv+0x1b8>)
 8000cb4:	4a5e      	ldr	r2, [pc, #376]	; (8000e30 <_ZL12MX_TIM1_Initv+0x1bc>)
 8000cb6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000cb8:	4b5c      	ldr	r3, [pc, #368]	; (8000e2c <_ZL12MX_TIM1_Initv+0x1b8>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cbe:	4b5b      	ldr	r3, [pc, #364]	; (8000e2c <_ZL12MX_TIM1_Initv+0x1b8>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000cc4:	4b59      	ldr	r3, [pc, #356]	; (8000e2c <_ZL12MX_TIM1_Initv+0x1b8>)
 8000cc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cca:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ccc:	4b57      	ldr	r3, [pc, #348]	; (8000e2c <_ZL12MX_TIM1_Initv+0x1b8>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000cd2:	4b56      	ldr	r3, [pc, #344]	; (8000e2c <_ZL12MX_TIM1_Initv+0x1b8>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cd8:	4b54      	ldr	r3, [pc, #336]	; (8000e2c <_ZL12MX_TIM1_Initv+0x1b8>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000cde:	4853      	ldr	r0, [pc, #332]	; (8000e2c <_ZL12MX_TIM1_Initv+0x1b8>)
 8000ce0:	f003 f9ce 	bl	8004080 <HAL_TIM_Base_Init>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	bf14      	ite	ne
 8000cea:	2301      	movne	r3, #1
 8000cec:	2300      	moveq	r3, #0
 8000cee:	b2db      	uxtb	r3, r3
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <_ZL12MX_TIM1_Initv+0x84>
  {
    Error_Handler();
 8000cf4:	f000 fe9a 	bl	8001a2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cf8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cfc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000cfe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000d02:	4619      	mov	r1, r3
 8000d04:	4849      	ldr	r0, [pc, #292]	; (8000e2c <_ZL12MX_TIM1_Initv+0x1b8>)
 8000d06:	f003 fbed 	bl	80044e4 <HAL_TIM_ConfigClockSource>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	bf14      	ite	ne
 8000d10:	2301      	movne	r3, #1
 8000d12:	2300      	moveq	r3, #0
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <_ZL12MX_TIM1_Initv+0xaa>
  {
    Error_Handler();
 8000d1a:	f000 fe87 	bl	8001a2c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000d1e:	4843      	ldr	r0, [pc, #268]	; (8000e2c <_ZL12MX_TIM1_Initv+0x1b8>)
 8000d20:	f003 f9fd 	bl	800411e <HAL_TIM_PWM_Init>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	bf14      	ite	ne
 8000d2a:	2301      	movne	r3, #1
 8000d2c:	2300      	moveq	r3, #0
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <_ZL12MX_TIM1_Initv+0xc4>
  {
    Error_Handler();
 8000d34:	f000 fe7a 	bl	8001a2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d40:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000d44:	4619      	mov	r1, r3
 8000d46:	4839      	ldr	r0, [pc, #228]	; (8000e2c <_ZL12MX_TIM1_Initv+0x1b8>)
 8000d48:	f003 ffa4 	bl	8004c94 <HAL_TIMEx_MasterConfigSynchronization>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	bf14      	ite	ne
 8000d52:	2301      	movne	r3, #1
 8000d54:	2300      	moveq	r3, #0
 8000d56:	b2db      	uxtb	r3, r3
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <_ZL12MX_TIM1_Initv+0xec>
  {
    Error_Handler();
 8000d5c:	f000 fe66 	bl	8001a2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d60:	2360      	movs	r3, #96	; 0x60
 8000d62:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000d64:	2300      	movs	r3, #0
 8000d66:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d70:	2300      	movs	r3, #0
 8000d72:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d74:	2300      	movs	r3, #0
 8000d76:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d80:	2200      	movs	r2, #0
 8000d82:	4619      	mov	r1, r3
 8000d84:	4829      	ldr	r0, [pc, #164]	; (8000e2c <_ZL12MX_TIM1_Initv+0x1b8>)
 8000d86:	f003 faeb 	bl	8004360 <HAL_TIM_PWM_ConfigChannel>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	bf14      	ite	ne
 8000d90:	2301      	movne	r3, #1
 8000d92:	2300      	moveq	r3, #0
 8000d94:	b2db      	uxtb	r3, r3
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <_ZL12MX_TIM1_Initv+0x12a>
  {
    Error_Handler();
 8000d9a:	f000 fe47 	bl	8001a2c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000da2:	2204      	movs	r2, #4
 8000da4:	4619      	mov	r1, r3
 8000da6:	4821      	ldr	r0, [pc, #132]	; (8000e2c <_ZL12MX_TIM1_Initv+0x1b8>)
 8000da8:	f003 fada 	bl	8004360 <HAL_TIM_PWM_ConfigChannel>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	bf14      	ite	ne
 8000db2:	2301      	movne	r3, #1
 8000db4:	2300      	moveq	r3, #0
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <_ZL12MX_TIM1_Initv+0x14c>
  {
    Error_Handler();
 8000dbc:	f000 fe36 	bl	8001a2c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000dc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dc4:	2208      	movs	r2, #8
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4818      	ldr	r0, [pc, #96]	; (8000e2c <_ZL12MX_TIM1_Initv+0x1b8>)
 8000dca:	f003 fac9 	bl	8004360 <HAL_TIM_PWM_ConfigChannel>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	bf14      	ite	ne
 8000dd4:	2301      	movne	r3, #1
 8000dd6:	2300      	moveq	r3, #0
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <_ZL12MX_TIM1_Initv+0x16e>
  {
    Error_Handler();
 8000dde:	f000 fe25 	bl	8001a2c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000de2:	2300      	movs	r3, #0
 8000de4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000de6:	2300      	movs	r3, #0
 8000de8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000dea:	2300      	movs	r3, #0
 8000dec:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000dee:	2300      	movs	r3, #0
 8000df0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000df2:	2300      	movs	r3, #0
 8000df4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000df6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dfa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000e00:	1d3b      	adds	r3, r7, #4
 8000e02:	4619      	mov	r1, r3
 8000e04:	4809      	ldr	r0, [pc, #36]	; (8000e2c <_ZL12MX_TIM1_Initv+0x1b8>)
 8000e06:	f003 ffc1 	bl	8004d8c <HAL_TIMEx_ConfigBreakDeadTime>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	bf14      	ite	ne
 8000e10:	2301      	movne	r3, #1
 8000e12:	2300      	moveq	r3, #0
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <_ZL12MX_TIM1_Initv+0x1aa>
  {
    Error_Handler();
 8000e1a:	f000 fe07 	bl	8001a2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000e1e:	4803      	ldr	r0, [pc, #12]	; (8000e2c <_ZL12MX_TIM1_Initv+0x1b8>)
 8000e20:	f001 f846 	bl	8001eb0 <HAL_TIM_MspPostInit>

}
 8000e24:	bf00      	nop
 8000e26:	3758      	adds	r7, #88	; 0x58
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	200000d8 	.word	0x200000d8
 8000e30:	40010000 	.word	0x40010000

08000e34 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b08e      	sub	sp, #56	; 0x38
 8000e38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e3e:	2200      	movs	r2, #0
 8000e40:	601a      	str	r2, [r3, #0]
 8000e42:	605a      	str	r2, [r3, #4]
 8000e44:	609a      	str	r2, [r3, #8]
 8000e46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e48:	f107 0320 	add.w	r3, r7, #32
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e52:	1d3b      	adds	r3, r7, #4
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
 8000e5c:	60da      	str	r2, [r3, #12]
 8000e5e:	611a      	str	r2, [r3, #16]
 8000e60:	615a      	str	r2, [r3, #20]
 8000e62:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e64:	4b49      	ldr	r3, [pc, #292]	; (8000f8c <_ZL12MX_TIM2_Initv+0x158>)
 8000e66:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e6a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000e6c:	4b47      	ldr	r3, [pc, #284]	; (8000f8c <_ZL12MX_TIM2_Initv+0x158>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e72:	4b46      	ldr	r3, [pc, #280]	; (8000f8c <_ZL12MX_TIM2_Initv+0x158>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000e78:	4b44      	ldr	r3, [pc, #272]	; (8000f8c <_ZL12MX_TIM2_Initv+0x158>)
 8000e7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e7e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e80:	4b42      	ldr	r3, [pc, #264]	; (8000f8c <_ZL12MX_TIM2_Initv+0x158>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e86:	4b41      	ldr	r3, [pc, #260]	; (8000f8c <_ZL12MX_TIM2_Initv+0x158>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e8c:	483f      	ldr	r0, [pc, #252]	; (8000f8c <_ZL12MX_TIM2_Initv+0x158>)
 8000e8e:	f003 f8f7 	bl	8004080 <HAL_TIM_Base_Init>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	bf14      	ite	ne
 8000e98:	2301      	movne	r3, #1
 8000e9a:	2300      	moveq	r3, #0
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <_ZL12MX_TIM2_Initv+0x72>
  {
    Error_Handler();
 8000ea2:	f000 fdc3 	bl	8001a2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ea6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eaa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000eac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4836      	ldr	r0, [pc, #216]	; (8000f8c <_ZL12MX_TIM2_Initv+0x158>)
 8000eb4:	f003 fb16 	bl	80044e4 <HAL_TIM_ConfigClockSource>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	bf14      	ite	ne
 8000ebe:	2301      	movne	r3, #1
 8000ec0:	2300      	moveq	r3, #0
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <_ZL12MX_TIM2_Initv+0x98>
  {
    Error_Handler();
 8000ec8:	f000 fdb0 	bl	8001a2c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000ecc:	482f      	ldr	r0, [pc, #188]	; (8000f8c <_ZL12MX_TIM2_Initv+0x158>)
 8000ece:	f003 f926 	bl	800411e <HAL_TIM_PWM_Init>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	bf14      	ite	ne
 8000ed8:	2301      	movne	r3, #1
 8000eda:	2300      	moveq	r3, #0
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <_ZL12MX_TIM2_Initv+0xb2>
  {
    Error_Handler();
 8000ee2:	f000 fda3 	bl	8001a2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eea:	2300      	movs	r3, #0
 8000eec:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000eee:	f107 0320 	add.w	r3, r7, #32
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4825      	ldr	r0, [pc, #148]	; (8000f8c <_ZL12MX_TIM2_Initv+0x158>)
 8000ef6:	f003 fecd 	bl	8004c94 <HAL_TIMEx_MasterConfigSynchronization>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	bf14      	ite	ne
 8000f00:	2301      	movne	r3, #1
 8000f02:	2300      	moveq	r3, #0
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <_ZL12MX_TIM2_Initv+0xda>
  {
    Error_Handler();
 8000f0a:	f000 fd8f 	bl	8001a2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f0e:	2360      	movs	r3, #96	; 0x60
 8000f10:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000f12:	2300      	movs	r3, #0
 8000f14:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f16:	2300      	movs	r3, #0
 8000f18:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f1e:	1d3b      	adds	r3, r7, #4
 8000f20:	2200      	movs	r2, #0
 8000f22:	4619      	mov	r1, r3
 8000f24:	4819      	ldr	r0, [pc, #100]	; (8000f8c <_ZL12MX_TIM2_Initv+0x158>)
 8000f26:	f003 fa1b 	bl	8004360 <HAL_TIM_PWM_ConfigChannel>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	bf14      	ite	ne
 8000f30:	2301      	movne	r3, #1
 8000f32:	2300      	moveq	r3, #0
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <_ZL12MX_TIM2_Initv+0x10a>
  {
    Error_Handler();
 8000f3a:	f000 fd77 	bl	8001a2c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f3e:	1d3b      	adds	r3, r7, #4
 8000f40:	2204      	movs	r2, #4
 8000f42:	4619      	mov	r1, r3
 8000f44:	4811      	ldr	r0, [pc, #68]	; (8000f8c <_ZL12MX_TIM2_Initv+0x158>)
 8000f46:	f003 fa0b 	bl	8004360 <HAL_TIM_PWM_ConfigChannel>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	bf14      	ite	ne
 8000f50:	2301      	movne	r3, #1
 8000f52:	2300      	moveq	r3, #0
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <_ZL12MX_TIM2_Initv+0x12a>
  {
    Error_Handler();
 8000f5a:	f000 fd67 	bl	8001a2c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f5e:	1d3b      	adds	r3, r7, #4
 8000f60:	2208      	movs	r2, #8
 8000f62:	4619      	mov	r1, r3
 8000f64:	4809      	ldr	r0, [pc, #36]	; (8000f8c <_ZL12MX_TIM2_Initv+0x158>)
 8000f66:	f003 f9fb 	bl	8004360 <HAL_TIM_PWM_ConfigChannel>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	bf14      	ite	ne
 8000f70:	2301      	movne	r3, #1
 8000f72:	2300      	moveq	r3, #0
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <_ZL12MX_TIM2_Initv+0x14a>
  {
    Error_Handler();
 8000f7a:	f000 fd57 	bl	8001a2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000f7e:	4803      	ldr	r0, [pc, #12]	; (8000f8c <_ZL12MX_TIM2_Initv+0x158>)
 8000f80:	f000 ff96 	bl	8001eb0 <HAL_TIM_MspPostInit>

}
 8000f84:	bf00      	nop
 8000f86:	3738      	adds	r7, #56	; 0x38
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	20000120 	.word	0x20000120

08000f90 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f94:	4b13      	ldr	r3, [pc, #76]	; (8000fe4 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000f96:	4a14      	ldr	r2, [pc, #80]	; (8000fe8 <_ZL19MX_USART2_UART_Initv+0x58>)
 8000f98:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f9a:	4b12      	ldr	r3, [pc, #72]	; (8000fe4 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000f9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fa0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fa2:	4b10      	ldr	r3, [pc, #64]	; (8000fe4 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fa8:	4b0e      	ldr	r3, [pc, #56]	; (8000fe4 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fae:	4b0d      	ldr	r3, [pc, #52]	; (8000fe4 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fb4:	4b0b      	ldr	r3, [pc, #44]	; (8000fe4 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000fb6:	220c      	movs	r2, #12
 8000fb8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fba:	4b0a      	ldr	r3, [pc, #40]	; (8000fe4 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fc0:	4b08      	ldr	r3, [pc, #32]	; (8000fe4 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fc6:	4807      	ldr	r0, [pc, #28]	; (8000fe4 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000fc8:	f003 ff32 	bl	8004e30 <HAL_UART_Init>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	bf14      	ite	ne
 8000fd2:	2301      	movne	r3, #1
 8000fd4:	2300      	moveq	r3, #0
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8000fdc:	f000 fd26 	bl	8001a2c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fe0:	bf00      	nop
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20000168 	.word	0x20000168
 8000fe8:	40004400 	.word	0x40004400

08000fec <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b08a      	sub	sp, #40	; 0x28
 8000ff0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff2:	f107 0314 	add.w	r3, r7, #20
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	601a      	str	r2, [r3, #0]
 8000ffa:	605a      	str	r2, [r3, #4]
 8000ffc:	609a      	str	r2, [r3, #8]
 8000ffe:	60da      	str	r2, [r3, #12]
 8001000:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	613b      	str	r3, [r7, #16]
 8001006:	4b53      	ldr	r3, [pc, #332]	; (8001154 <_ZL12MX_GPIO_Initv+0x168>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100a:	4a52      	ldr	r2, [pc, #328]	; (8001154 <_ZL12MX_GPIO_Initv+0x168>)
 800100c:	f043 0304 	orr.w	r3, r3, #4
 8001010:	6313      	str	r3, [r2, #48]	; 0x30
 8001012:	4b50      	ldr	r3, [pc, #320]	; (8001154 <_ZL12MX_GPIO_Initv+0x168>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	f003 0304 	and.w	r3, r3, #4
 800101a:	613b      	str	r3, [r7, #16]
 800101c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	60fb      	str	r3, [r7, #12]
 8001022:	4b4c      	ldr	r3, [pc, #304]	; (8001154 <_ZL12MX_GPIO_Initv+0x168>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	4a4b      	ldr	r2, [pc, #300]	; (8001154 <_ZL12MX_GPIO_Initv+0x168>)
 8001028:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800102c:	6313      	str	r3, [r2, #48]	; 0x30
 800102e:	4b49      	ldr	r3, [pc, #292]	; (8001154 <_ZL12MX_GPIO_Initv+0x168>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	60bb      	str	r3, [r7, #8]
 800103e:	4b45      	ldr	r3, [pc, #276]	; (8001154 <_ZL12MX_GPIO_Initv+0x168>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	4a44      	ldr	r2, [pc, #272]	; (8001154 <_ZL12MX_GPIO_Initv+0x168>)
 8001044:	f043 0301 	orr.w	r3, r3, #1
 8001048:	6313      	str	r3, [r2, #48]	; 0x30
 800104a:	4b42      	ldr	r3, [pc, #264]	; (8001154 <_ZL12MX_GPIO_Initv+0x168>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	60bb      	str	r3, [r7, #8]
 8001054:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001056:	2300      	movs	r3, #0
 8001058:	607b      	str	r3, [r7, #4]
 800105a:	4b3e      	ldr	r3, [pc, #248]	; (8001154 <_ZL12MX_GPIO_Initv+0x168>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	4a3d      	ldr	r2, [pc, #244]	; (8001154 <_ZL12MX_GPIO_Initv+0x168>)
 8001060:	f043 0302 	orr.w	r3, r3, #2
 8001064:	6313      	str	r3, [r2, #48]	; 0x30
 8001066:	4b3b      	ldr	r3, [pc, #236]	; (8001154 <_ZL12MX_GPIO_Initv+0x168>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	f003 0302 	and.w	r3, r3, #2
 800106e:	607b      	str	r3, [r7, #4]
 8001070:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001072:	2300      	movs	r3, #0
 8001074:	603b      	str	r3, [r7, #0]
 8001076:	4b37      	ldr	r3, [pc, #220]	; (8001154 <_ZL12MX_GPIO_Initv+0x168>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	4a36      	ldr	r2, [pc, #216]	; (8001154 <_ZL12MX_GPIO_Initv+0x168>)
 800107c:	f043 0308 	orr.w	r3, r3, #8
 8001080:	6313      	str	r3, [r2, #48]	; 0x30
 8001082:	4b34      	ldr	r3, [pc, #208]	; (8001154 <_ZL12MX_GPIO_Initv+0x168>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	f003 0308 	and.w	r3, r3, #8
 800108a:	603b      	str	r3, [r7, #0]
 800108c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PSB2_Pin|PSB1_Pin|BRK2_Pin|BATT_Pin
 800108e:	2200      	movs	r2, #0
 8001090:	211f      	movs	r1, #31
 8001092:	4831      	ldr	r0, [pc, #196]	; (8001158 <_ZL12MX_GPIO_Initv+0x16c>)
 8001094:	f002 f9a2 	bl	80033dc <HAL_GPIO_WritePin>
                          |PSB3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DIRECTION3_Pin|DIRECTION2_Pin|DIRECTION1_Pin|DIRECTION6_Pin
 8001098:	2200      	movs	r2, #0
 800109a:	f64e 0173 	movw	r1, #59507	; 0xe873
 800109e:	482f      	ldr	r0, [pc, #188]	; (800115c <_ZL12MX_GPIO_Initv+0x170>)
 80010a0:	f002 f99c 	bl	80033dc <HAL_GPIO_WritePin>
                          |DIRECTION5_Pin|BRK6_Pin|LED1_Pin|LED2_Pin
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BRK1_Pin|PSB5_Pin|BRK5_Pin|PSB6_Pin
 80010a4:	2200      	movs	r2, #0
 80010a6:	f24f 0107 	movw	r1, #61447	; 0xf007
 80010aa:	482d      	ldr	r0, [pc, #180]	; (8001160 <_ZL12MX_GPIO_Initv+0x174>)
 80010ac:	f002 f996 	bl	80033dc <HAL_GPIO_WritePin>
                          |BRK3_Pin|PSB4_Pin|BRK4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIRECTION4_GPIO_Port, DIRECTION4_Pin, GPIO_PIN_RESET);
 80010b0:	2200      	movs	r2, #0
 80010b2:	2104      	movs	r1, #4
 80010b4:	482b      	ldr	r0, [pc, #172]	; (8001164 <_ZL12MX_GPIO_Initv+0x178>)
 80010b6:	f002 f991 	bl	80033dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010c0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80010c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c6:	2300      	movs	r3, #0
 80010c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010ca:	f107 0314 	add.w	r3, r7, #20
 80010ce:	4619      	mov	r1, r3
 80010d0:	4821      	ldr	r0, [pc, #132]	; (8001158 <_ZL12MX_GPIO_Initv+0x16c>)
 80010d2:	f001 ffef 	bl	80030b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PSB2_Pin PSB1_Pin BRK2_Pin BATT_Pin
                           PSB3_Pin */
  GPIO_InitStruct.Pin = PSB2_Pin|PSB1_Pin|BRK2_Pin|BATT_Pin
 80010d6:	231f      	movs	r3, #31
 80010d8:	617b      	str	r3, [r7, #20]
                          |PSB3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010da:	2301      	movs	r3, #1
 80010dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010de:	2300      	movs	r3, #0
 80010e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e2:	2300      	movs	r3, #0
 80010e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010e6:	f107 0314 	add.w	r3, r7, #20
 80010ea:	4619      	mov	r1, r3
 80010ec:	481a      	ldr	r0, [pc, #104]	; (8001158 <_ZL12MX_GPIO_Initv+0x16c>)
 80010ee:	f001 ffe1 	bl	80030b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIRECTION3_Pin DIRECTION2_Pin DIRECTION1_Pin DIRECTION6_Pin
                           DIRECTION5_Pin BRK6_Pin LED1_Pin LED2_Pin
                           LED3_Pin */
  GPIO_InitStruct.Pin = DIRECTION3_Pin|DIRECTION2_Pin|DIRECTION1_Pin|DIRECTION6_Pin
 80010f2:	f64e 0373 	movw	r3, #59507	; 0xe873
 80010f6:	617b      	str	r3, [r7, #20]
                          |DIRECTION5_Pin|BRK6_Pin|LED1_Pin|LED2_Pin
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f8:	2301      	movs	r3, #1
 80010fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fc:	2300      	movs	r3, #0
 80010fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001100:	2300      	movs	r3, #0
 8001102:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001104:	f107 0314 	add.w	r3, r7, #20
 8001108:	4619      	mov	r1, r3
 800110a:	4814      	ldr	r0, [pc, #80]	; (800115c <_ZL12MX_GPIO_Initv+0x170>)
 800110c:	f001 ffd2 	bl	80030b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BRK1_Pin PSB5_Pin BRK5_Pin PSB6_Pin
                           BRK3_Pin PSB4_Pin BRK4_Pin */
  GPIO_InitStruct.Pin = BRK1_Pin|PSB5_Pin|BRK5_Pin|PSB6_Pin
 8001110:	f24f 0307 	movw	r3, #61447	; 0xf007
 8001114:	617b      	str	r3, [r7, #20]
                          |BRK3_Pin|PSB4_Pin|BRK4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001116:	2301      	movs	r3, #1
 8001118:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111a:	2300      	movs	r3, #0
 800111c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111e:	2300      	movs	r3, #0
 8001120:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001122:	f107 0314 	add.w	r3, r7, #20
 8001126:	4619      	mov	r1, r3
 8001128:	480d      	ldr	r0, [pc, #52]	; (8001160 <_ZL12MX_GPIO_Initv+0x174>)
 800112a:	f001 ffc3 	bl	80030b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIRECTION4_Pin */
  GPIO_InitStruct.Pin = DIRECTION4_Pin;
 800112e:	2304      	movs	r3, #4
 8001130:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001132:	2301      	movs	r3, #1
 8001134:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001136:	2300      	movs	r3, #0
 8001138:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113a:	2300      	movs	r3, #0
 800113c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIRECTION4_GPIO_Port, &GPIO_InitStruct);
 800113e:	f107 0314 	add.w	r3, r7, #20
 8001142:	4619      	mov	r1, r3
 8001144:	4807      	ldr	r0, [pc, #28]	; (8001164 <_ZL12MX_GPIO_Initv+0x178>)
 8001146:	f001 ffb5 	bl	80030b4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800114a:	bf00      	nop
 800114c:	3728      	adds	r7, #40	; 0x28
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	40023800 	.word	0x40023800
 8001158:	40020800 	.word	0x40020800
 800115c:	40020000 	.word	0x40020000
 8001160:	40020400 	.word	0x40020400
 8001164:	40020c00 	.word	0x40020c00

08001168 <HAL_CAN_RxFifo0MsgPendingCallback>:
	{-1,0,-1},
	{1/2,std::sqrt(3)/-2,-1},
	{1/2,std::sqrt(3)/2,-1}
}};

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8001168:	b5b0      	push	{r4, r5, r7, lr}
 800116a:	ed2d 8b02 	vpush	{d8}
 800116e:	b09a      	sub	sp, #104	; 0x68
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
	  uint8_t RxData[8];
	  CAN_RxHeaderTypeDef RxHeader;
	  std::array<int,5> arr_data;
	  std::array<int,5> arr_old_data;
	  std::array<int,3>mechanism_pwm;
	  float motor_amp = 500;
 8001174:	4ba2      	ldr	r3, [pc, #648]	; (8001400 <HAL_CAN_RxFifo0MsgPendingCallback+0x298>)
 8001176:	663b      	str	r3, [r7, #96]	; 0x60
	  //int last_hat;

	  if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 8001178:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800117c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001180:	2100      	movs	r1, #0
 8001182:	6878      	ldr	r0, [r7, #4]
 8001184:	f001 fb1c 	bl	80027c0 <HAL_CAN_GetRxMessage>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	bf0c      	ite	eq
 800118e:	2301      	moveq	r3, #1
 8001190:	2300      	movne	r3, #0
 8001192:	b2db      	uxtb	r3, r3
 8001194:	2b00      	cmp	r3, #0
 8001196:	f000 81bc 	beq.w	8001512 <HAL_CAN_RxFifo0MsgPendingCallback+0x3aa>
	  {
		  id = (RxHeader.IDE == CAN_ID_STD)? RxHeader.StdId : RxHeader.ExtId;     // ID
 800119a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800119c:	2b00      	cmp	r3, #0
 800119e:	d101      	bne.n	80011a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>
 80011a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011a2:	e000      	b.n	80011a6 <HAL_CAN_RxFifo0MsgPendingCallback+0x3e>
 80011a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80011a6:	4a97      	ldr	r2, [pc, #604]	; (8001404 <HAL_CAN_RxFifo0MsgPendingCallback+0x29c>)
 80011a8:	6013      	str	r3, [r2, #0]
		  dlc = RxHeader.DLC;                                                     // DLC
 80011aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80011ac:	4a96      	ldr	r2, [pc, #600]	; (8001408 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a0>)
 80011ae:	6013      	str	r3, [r2, #0]
		  data[0] = RxData[0] - 128;                                                    // Data
 80011b0:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 80011b4:	461c      	mov	r4, r3
 80011b6:	2100      	movs	r1, #0
 80011b8:	4894      	ldr	r0, [pc, #592]	; (800140c <HAL_CAN_RxFifo0MsgPendingCallback+0x2a4>)
 80011ba:	f000 fc3c 	bl	8001a36 <_ZNSt5arrayIiLj8EEixEj>
 80011be:	4602      	mov	r2, r0
 80011c0:	f1a4 0380 	sub.w	r3, r4, #128	; 0x80
 80011c4:	6013      	str	r3, [r2, #0]
		  data[1] = RxData[1] - 128;
 80011c6:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 80011ca:	461c      	mov	r4, r3
 80011cc:	2101      	movs	r1, #1
 80011ce:	488f      	ldr	r0, [pc, #572]	; (800140c <HAL_CAN_RxFifo0MsgPendingCallback+0x2a4>)
 80011d0:	f000 fc31 	bl	8001a36 <_ZNSt5arrayIiLj8EEixEj>
 80011d4:	4602      	mov	r2, r0
 80011d6:	f1a4 0380 	sub.w	r3, r4, #128	; 0x80
 80011da:	6013      	str	r3, [r2, #0]
		  data[2] = RxData[2] - 128;
 80011dc:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 80011e0:	461c      	mov	r4, r3
 80011e2:	2102      	movs	r1, #2
 80011e4:	4889      	ldr	r0, [pc, #548]	; (800140c <HAL_CAN_RxFifo0MsgPendingCallback+0x2a4>)
 80011e6:	f000 fc26 	bl	8001a36 <_ZNSt5arrayIiLj8EEixEj>
 80011ea:	4602      	mov	r2, r0
 80011ec:	f1a4 0380 	sub.w	r3, r4, #128	; 0x80
 80011f0:	6013      	str	r3, [r2, #0]
		  data[3] = RxData[3];//A
 80011f2:	f897 405b 	ldrb.w	r4, [r7, #91]	; 0x5b
 80011f6:	2103      	movs	r1, #3
 80011f8:	4884      	ldr	r0, [pc, #528]	; (800140c <HAL_CAN_RxFifo0MsgPendingCallback+0x2a4>)
 80011fa:	f000 fc1c 	bl	8001a36 <_ZNSt5arrayIiLj8EEixEj>
 80011fe:	4603      	mov	r3, r0
 8001200:	4622      	mov	r2, r4
 8001202:	601a      	str	r2, [r3, #0]
		  data[4] = RxData[4];//B
 8001204:	f897 405c 	ldrb.w	r4, [r7, #92]	; 0x5c
 8001208:	2104      	movs	r1, #4
 800120a:	4880      	ldr	r0, [pc, #512]	; (800140c <HAL_CAN_RxFifo0MsgPendingCallback+0x2a4>)
 800120c:	f000 fc13 	bl	8001a36 <_ZNSt5arrayIiLj8EEixEj>
 8001210:	4603      	mov	r3, r0
 8001212:	4622      	mov	r2, r4
 8001214:	601a      	str	r2, [r3, #0]
		  data[5] = RxData[5];//X
 8001216:	f897 405d 	ldrb.w	r4, [r7, #93]	; 0x5d
 800121a:	2105      	movs	r1, #5
 800121c:	487b      	ldr	r0, [pc, #492]	; (800140c <HAL_CAN_RxFifo0MsgPendingCallback+0x2a4>)
 800121e:	f000 fc0a 	bl	8001a36 <_ZNSt5arrayIiLj8EEixEj>
 8001222:	4603      	mov	r3, r0
 8001224:	4622      	mov	r2, r4
 8001226:	601a      	str	r2, [r3, #0]
		  data[6] = RxData[6];//Y
 8001228:	f897 405e 	ldrb.w	r4, [r7, #94]	; 0x5e
 800122c:	2106      	movs	r1, #6
 800122e:	4877      	ldr	r0, [pc, #476]	; (800140c <HAL_CAN_RxFifo0MsgPendingCallback+0x2a4>)
 8001230:	f000 fc01 	bl	8001a36 <_ZNSt5arrayIiLj8EEixEj>
 8001234:	4603      	mov	r3, r0
 8001236:	4622      	mov	r2, r4
 8001238:	601a      	str	r2, [r3, #0]
		  data[7] = RxData[7];//HAT
 800123a:	f897 405f 	ldrb.w	r4, [r7, #95]	; 0x5f
 800123e:	2107      	movs	r1, #7
 8001240:	4872      	ldr	r0, [pc, #456]	; (800140c <HAL_CAN_RxFifo0MsgPendingCallback+0x2a4>)
 8001242:	f000 fbf8 	bl	8001a36 <_ZNSt5arrayIiLj8EEixEj>
 8001246:	4603      	mov	r3, r0
 8001248:	4622      	mov	r2, r4
 800124a:	601a      	str	r2, [r3, #0]

			for(int i = 0;i < 5;i++){
 800124c:	2300      	movs	r3, #0
 800124e:	667b      	str	r3, [r7, #100]	; 0x64
 8001250:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001252:	2b04      	cmp	r3, #4
 8001254:	dc14      	bgt.n	8001280 <HAL_CAN_RxFifo0MsgPendingCallback+0x118>
				arr_data[i] = data[i+3];
 8001256:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001258:	3303      	adds	r3, #3
 800125a:	4619      	mov	r1, r3
 800125c:	486b      	ldr	r0, [pc, #428]	; (800140c <HAL_CAN_RxFifo0MsgPendingCallback+0x2a4>)
 800125e:	f000 fbea 	bl	8001a36 <_ZNSt5arrayIiLj8EEixEj>
 8001262:	4604      	mov	r4, r0
 8001264:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001266:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800126a:	4611      	mov	r1, r2
 800126c:	4618      	mov	r0, r3
 800126e:	f000 fbf1 	bl	8001a54 <_ZNSt5arrayIiLj5EEixEj>
 8001272:	4602      	mov	r2, r0
 8001274:	6823      	ldr	r3, [r4, #0]
 8001276:	6013      	str	r3, [r2, #0]
			for(int i = 0;i < 5;i++){
 8001278:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800127a:	3301      	adds	r3, #1
 800127c:	667b      	str	r3, [r7, #100]	; 0x64
 800127e:	e7e7      	b.n	8001250 <HAL_CAN_RxFifo0MsgPendingCallback+0xe8>
			}
			if (arr_data[0] <= 1 or arr_data[1] <= 1 or arr_data[2] <= 1 or arr_data[3] <= 1){ //not emergency mode
 8001280:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001284:	2100      	movs	r1, #0
 8001286:	4618      	mov	r0, r3
 8001288:	f000 fbe4 	bl	8001a54 <_ZNSt5arrayIiLj5EEixEj>
 800128c:	4603      	mov	r3, r0
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2b01      	cmp	r3, #1
 8001292:	dd1d      	ble.n	80012d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x168>
 8001294:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001298:	2101      	movs	r1, #1
 800129a:	4618      	mov	r0, r3
 800129c:	f000 fbda 	bl	8001a54 <_ZNSt5arrayIiLj5EEixEj>
 80012a0:	4603      	mov	r3, r0
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	dd13      	ble.n	80012d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x168>
 80012a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012ac:	2102      	movs	r1, #2
 80012ae:	4618      	mov	r0, r3
 80012b0:	f000 fbd0 	bl	8001a54 <_ZNSt5arrayIiLj5EEixEj>
 80012b4:	4603      	mov	r3, r0
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	dd09      	ble.n	80012d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x168>
 80012bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012c0:	2103      	movs	r1, #3
 80012c2:	4618      	mov	r0, r3
 80012c4:	f000 fbc6 	bl	8001a54 <_ZNSt5arrayIiLj5EEixEj>
 80012c8:	4603      	mov	r3, r0
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	dc01      	bgt.n	80012d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x16c>
 80012d0:	2301      	movs	r3, #1
 80012d2:	e000      	b.n	80012d6 <HAL_CAN_RxFifo0MsgPendingCallback+0x16e>
 80012d4:	2300      	movs	r3, #0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	f000 8119 	beq.w	800150e <HAL_CAN_RxFifo0MsgPendingCallback+0x3a6>
				recovery_prog();
 80012dc:	f000 fa86 	bl	80017ec <_Z13recovery_progv>

				WE_3((float)data[1],(float)data[2],(float)data[0],motor_pwm); //omni
 80012e0:	2101      	movs	r1, #1
 80012e2:	484a      	ldr	r0, [pc, #296]	; (800140c <HAL_CAN_RxFifo0MsgPendingCallback+0x2a4>)
 80012e4:	f000 fba7 	bl	8001a36 <_ZNSt5arrayIiLj8EEixEj>
 80012e8:	4603      	mov	r3, r0
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	ee07 3a90 	vmov	s15, r3
 80012f0:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80012f4:	2102      	movs	r1, #2
 80012f6:	4845      	ldr	r0, [pc, #276]	; (800140c <HAL_CAN_RxFifo0MsgPendingCallback+0x2a4>)
 80012f8:	f000 fb9d 	bl	8001a36 <_ZNSt5arrayIiLj8EEixEj>
 80012fc:	4603      	mov	r3, r0
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	ee07 3a90 	vmov	s15, r3
 8001304:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 8001308:	2100      	movs	r1, #0
 800130a:	4840      	ldr	r0, [pc, #256]	; (800140c <HAL_CAN_RxFifo0MsgPendingCallback+0x2a4>)
 800130c:	f000 fb93 	bl	8001a36 <_ZNSt5arrayIiLj8EEixEj>
 8001310:	4603      	mov	r3, r0
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	ee07 3a90 	vmov	s15, r3
 8001318:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800131c:	483c      	ldr	r0, [pc, #240]	; (8001410 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a8>)
 800131e:	eeb0 1a67 	vmov.f32	s2, s15
 8001322:	eef0 0a68 	vmov.f32	s1, s17
 8001326:	eeb0 0a48 	vmov.f32	s0, s16
 800132a:	f000 fa8f 	bl	800184c <_Z4WE_3fffRSt5arrayIfLj3EE>
				//nomal_3((float)data[0],motor_pwm);//test

				if (std::abs(motor_pwm[0]) <= 10){ //perfect stop
 800132e:	2100      	movs	r1, #0
 8001330:	4837      	ldr	r0, [pc, #220]	; (8001410 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a8>)
 8001332:	f000 fb9e 	bl	8001a72 <_ZNSt5arrayIfLj3EEixEj>
 8001336:	4603      	mov	r3, r0
 8001338:	edd3 7a00 	vldr	s15, [r3]
 800133c:	eeb0 0a67 	vmov.f32	s0, s15
 8001340:	f7ff faee 	bl	8000920 <_ZSt3absf>
 8001344:	eef0 7a40 	vmov.f32	s15, s0
 8001348:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800134c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001354:	bf94      	ite	ls
 8001356:	2301      	movls	r3, #1
 8001358:	2300      	movhi	r3, #0
 800135a:	b2db      	uxtb	r3, r3
 800135c:	2b00      	cmp	r3, #0
 800135e:	d005      	beq.n	800136c <HAL_CAN_RxFifo0MsgPendingCallback+0x204>
				  HAL_GPIO_WritePin(GPIOB,BRK1_Pin,GPIO_PIN_SET);
 8001360:	2201      	movs	r2, #1
 8001362:	2101      	movs	r1, #1
 8001364:	482b      	ldr	r0, [pc, #172]	; (8001414 <HAL_CAN_RxFifo0MsgPendingCallback+0x2ac>)
 8001366:	f002 f839 	bl	80033dc <HAL_GPIO_WritePin>
 800136a:	e004      	b.n	8001376 <HAL_CAN_RxFifo0MsgPendingCallback+0x20e>
				}
				else{
				  HAL_GPIO_WritePin(GPIOB,BRK1_Pin,GPIO_PIN_RESET);
 800136c:	2200      	movs	r2, #0
 800136e:	2101      	movs	r1, #1
 8001370:	4828      	ldr	r0, [pc, #160]	; (8001414 <HAL_CAN_RxFifo0MsgPendingCallback+0x2ac>)
 8001372:	f002 f833 	bl	80033dc <HAL_GPIO_WritePin>
				}
				if (std::abs(motor_pwm[1]) <= 10){
 8001376:	2101      	movs	r1, #1
 8001378:	4825      	ldr	r0, [pc, #148]	; (8001410 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a8>)
 800137a:	f000 fb7a 	bl	8001a72 <_ZNSt5arrayIfLj3EEixEj>
 800137e:	4603      	mov	r3, r0
 8001380:	edd3 7a00 	vldr	s15, [r3]
 8001384:	eeb0 0a67 	vmov.f32	s0, s15
 8001388:	f7ff faca 	bl	8000920 <_ZSt3absf>
 800138c:	eef0 7a40 	vmov.f32	s15, s0
 8001390:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001394:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001398:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800139c:	bf94      	ite	ls
 800139e:	2301      	movls	r3, #1
 80013a0:	2300      	movhi	r3, #0
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d005      	beq.n	80013b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x24c>
				  HAL_GPIO_WritePin(GPIOC,BRK2_Pin,GPIO_PIN_SET);
 80013a8:	2201      	movs	r2, #1
 80013aa:	2104      	movs	r1, #4
 80013ac:	481a      	ldr	r0, [pc, #104]	; (8001418 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b0>)
 80013ae:	f002 f815 	bl	80033dc <HAL_GPIO_WritePin>
 80013b2:	e004      	b.n	80013be <HAL_CAN_RxFifo0MsgPendingCallback+0x256>
				}
				else{
				  HAL_GPIO_WritePin(GPIOC,BRK2_Pin,GPIO_PIN_RESET);
 80013b4:	2200      	movs	r2, #0
 80013b6:	2104      	movs	r1, #4
 80013b8:	4817      	ldr	r0, [pc, #92]	; (8001418 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b0>)
 80013ba:	f002 f80f 	bl	80033dc <HAL_GPIO_WritePin>
				}
				if (std::abs(motor_pwm[2]) <= 10){
 80013be:	2102      	movs	r1, #2
 80013c0:	4813      	ldr	r0, [pc, #76]	; (8001410 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a8>)
 80013c2:	f000 fb56 	bl	8001a72 <_ZNSt5arrayIfLj3EEixEj>
 80013c6:	4603      	mov	r3, r0
 80013c8:	edd3 7a00 	vldr	s15, [r3]
 80013cc:	eeb0 0a67 	vmov.f32	s0, s15
 80013d0:	f7ff faa6 	bl	8000920 <_ZSt3absf>
 80013d4:	eef0 7a40 	vmov.f32	s15, s0
 80013d8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80013dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013e4:	bf94      	ite	ls
 80013e6:	2301      	movls	r3, #1
 80013e8:	2300      	movhi	r3, #0
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d015      	beq.n	800141c <HAL_CAN_RxFifo0MsgPendingCallback+0x2b4>
				  HAL_GPIO_WritePin(GPIOB,BRK3_Pin,GPIO_PIN_SET);
 80013f0:	2201      	movs	r2, #1
 80013f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013f6:	4807      	ldr	r0, [pc, #28]	; (8001414 <HAL_CAN_RxFifo0MsgPendingCallback+0x2ac>)
 80013f8:	f001 fff0 	bl	80033dc <HAL_GPIO_WritePin>
 80013fc:	e014      	b.n	8001428 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>
 80013fe:	bf00      	nop
 8001400:	43fa0000 	.word	0x43fa0000
 8001404:	200001ac 	.word	0x200001ac
 8001408:	200001b0 	.word	0x200001b0
 800140c:	200001b4 	.word	0x200001b4
 8001410:	200001d4 	.word	0x200001d4
 8001414:	40020400 	.word	0x40020400
 8001418:	40020800 	.word	0x40020800
				}
				else{
				  HAL_GPIO_WritePin(GPIOB,BRK3_Pin,GPIO_PIN_RESET);
 800141c:	2200      	movs	r2, #0
 800141e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001422:	483f      	ldr	r0, [pc, #252]	; (8001520 <HAL_CAN_RxFifo0MsgPendingCallback+0x3b8>)
 8001424:	f001 ffda 	bl	80033dc <HAL_GPIO_WritePin>
				}

				if (arr_data != arr_old_data) { //等しくない場合に切り替え操作
 8001428:	f107 0214 	add.w	r2, r7, #20
 800142c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001430:	4611      	mov	r1, r2
 8001432:	4618      	mov	r0, r3
 8001434:	f000 fb2c 	bl	8001a90 <_ZStneIiLj5EEbRKSt5arrayIT_XT0_EES4_>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d007      	beq.n	800144e <HAL_CAN_RxFifo0MsgPendingCallback+0x2e6>
					toggle_switch(arr_data,mechanism_pwm);
 800143e:	f107 0208 	add.w	r2, r7, #8
 8001442:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001446:	4611      	mov	r1, r2
 8001448:	4618      	mov	r0, r3
 800144a:	f000 f871 	bl	8001530 <_Z13toggle_switchRSt5arrayIiLj5EERS_IiLj3EE>
				}
				arr_old_data = arr_data; //旧ボタンデータとして登録
 800144e:	f107 0414 	add.w	r4, r7, #20
 8001452:	f107 0528 	add.w	r5, r7, #40	; 0x28
 8001456:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001458:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800145a:	682b      	ldr	r3, [r5, #0]
 800145c:	6023      	str	r3, [r4, #0]

				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,motor_pwm[0] * motor_amp);
 800145e:	2100      	movs	r1, #0
 8001460:	4830      	ldr	r0, [pc, #192]	; (8001524 <HAL_CAN_RxFifo0MsgPendingCallback+0x3bc>)
 8001462:	f000 fb06 	bl	8001a72 <_ZNSt5arrayIfLj3EEixEj>
 8001466:	4603      	mov	r3, r0
 8001468:	ed93 7a00 	vldr	s14, [r3]
 800146c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001470:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001474:	4b2c      	ldr	r3, [pc, #176]	; (8001528 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c0>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800147c:	ee17 2a90 	vmov	r2, s15
 8001480:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,motor_pwm[1] * motor_amp);
 8001482:	2101      	movs	r1, #1
 8001484:	4827      	ldr	r0, [pc, #156]	; (8001524 <HAL_CAN_RxFifo0MsgPendingCallback+0x3bc>)
 8001486:	f000 faf4 	bl	8001a72 <_ZNSt5arrayIfLj3EEixEj>
 800148a:	4603      	mov	r3, r0
 800148c:	ed93 7a00 	vldr	s14, [r3]
 8001490:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001494:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001498:	4b23      	ldr	r3, [pc, #140]	; (8001528 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c0>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014a0:	ee17 2a90 	vmov	r2, s15
 80014a4:	639a      	str	r2, [r3, #56]	; 0x38
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,motor_pwm[2] * motor_amp);
 80014a6:	2102      	movs	r1, #2
 80014a8:	481e      	ldr	r0, [pc, #120]	; (8001524 <HAL_CAN_RxFifo0MsgPendingCallback+0x3bc>)
 80014aa:	f000 fae2 	bl	8001a72 <_ZNSt5arrayIfLj3EEixEj>
 80014ae:	4603      	mov	r3, r0
 80014b0:	ed93 7a00 	vldr	s14, [r3]
 80014b4:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80014b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014bc:	4b1a      	ldr	r3, [pc, #104]	; (8001528 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c0>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014c4:	ee17 2a90 	vmov	r2, s15
 80014c8:	63da      	str	r2, [r3, #60]	; 0x3c

				__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,(int)mechanism_pwm[0]);
 80014ca:	f107 0308 	add.w	r3, r7, #8
 80014ce:	2100      	movs	r1, #0
 80014d0:	4618      	mov	r0, r3
 80014d2:	f000 faee 	bl	8001ab2 <_ZNSt5arrayIiLj3EEixEj>
 80014d6:	4603      	mov	r3, r0
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	4b14      	ldr	r3, [pc, #80]	; (800152c <HAL_CAN_RxFifo0MsgPendingCallback+0x3c4>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,(int)mechanism_pwm[1]);
 80014e0:	f107 0308 	add.w	r3, r7, #8
 80014e4:	2101      	movs	r1, #1
 80014e6:	4618      	mov	r0, r3
 80014e8:	f000 fae3 	bl	8001ab2 <_ZNSt5arrayIiLj3EEixEj>
 80014ec:	4603      	mov	r3, r0
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	4b0e      	ldr	r3, [pc, #56]	; (800152c <HAL_CAN_RxFifo0MsgPendingCallback+0x3c4>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	639a      	str	r2, [r3, #56]	; 0x38
				__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3,(int)mechanism_pwm[2]);
 80014f6:	f107 0308 	add.w	r3, r7, #8
 80014fa:	2102      	movs	r1, #2
 80014fc:	4618      	mov	r0, r3
 80014fe:	f000 fad8 	bl	8001ab2 <_ZNSt5arrayIiLj3EEixEj>
 8001502:	4603      	mov	r3, r0
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	4b09      	ldr	r3, [pc, #36]	; (800152c <HAL_CAN_RxFifo0MsgPendingCallback+0x3c4>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	63da      	str	r2, [r3, #60]	; 0x3c
			}
			else{
				emergency_prog();
			}
	  }
}
 800150c:	e001      	b.n	8001512 <HAL_CAN_RxFifo0MsgPendingCallback+0x3aa>
				emergency_prog();
 800150e:	f000 f93d 	bl	800178c <_Z14emergency_progv>
}
 8001512:	bf00      	nop
 8001514:	3768      	adds	r7, #104	; 0x68
 8001516:	46bd      	mov	sp, r7
 8001518:	ecbd 8b02 	vpop	{d8}
 800151c:	bdb0      	pop	{r4, r5, r7, pc}
 800151e:	bf00      	nop
 8001520:	40020400 	.word	0x40020400
 8001524:	200001d4 	.word	0x200001d4
 8001528:	200000d8 	.word	0x200000d8
 800152c:	20000120 	.word	0x20000120

08001530 <_Z13toggle_switchRSt5arrayIiLj5EERS_IiLj3EE>:
{
  HAL_UART_Transmit(&huart2,(uint8_t *)ptr,len,10);
  return len;
}

void toggle_switch(std::array<int,5>& arr,std::array<int,3>& mec_pwm){
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	6039      	str	r1, [r7, #0]
	if(arr[0] == 1){//COLLECT_PLUS M4
 800153a:	2100      	movs	r1, #0
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f000 fa89 	bl	8001a54 <_ZNSt5arrayIiLj5EEixEj>
 8001542:	4603      	mov	r3, r0
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	2b01      	cmp	r3, #1
 8001548:	bf0c      	ite	eq
 800154a:	2301      	moveq	r3, #1
 800154c:	2300      	movne	r3, #0
 800154e:	b2db      	uxtb	r3, r3
 8001550:	2b00      	cmp	r3, #0
 8001552:	d013      	beq.n	800157c <_Z13toggle_switchRSt5arrayIiLj5EERS_IiLj3EE+0x4c>
		//BRK_OFF
		//PLUS
		HAL_GPIO_WritePin(GPIOD,DIRECTION4_Pin,GPIO_PIN_SET);
 8001554:	2201      	movs	r2, #1
 8001556:	2104      	movs	r1, #4
 8001558:	4889      	ldr	r0, [pc, #548]	; (8001780 <_Z13toggle_switchRSt5arrayIiLj5EERS_IiLj3EE+0x250>)
 800155a:	f001 ff3f 	bl	80033dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,BRK4_Pin,GPIO_PIN_RESET);
 800155e:	2200      	movs	r2, #0
 8001560:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001564:	4887      	ldr	r0, [pc, #540]	; (8001784 <_Z13toggle_switchRSt5arrayIiLj5EERS_IiLj3EE+0x254>)
 8001566:	f001 ff39 	bl	80033dc <HAL_GPIO_WritePin>
		mec_pwm[0] = 10000;
 800156a:	2100      	movs	r1, #0
 800156c:	6838      	ldr	r0, [r7, #0]
 800156e:	f000 faa0 	bl	8001ab2 <_ZNSt5arrayIiLj3EEixEj>
 8001572:	4603      	mov	r3, r0
 8001574:	f242 7210 	movw	r2, #10000	; 0x2710
 8001578:	601a      	str	r2, [r3, #0]
 800157a:	e021      	b.n	80015c0 <_Z13toggle_switchRSt5arrayIiLj5EERS_IiLj3EE+0x90>
	}
	else if (arr[0] == 0 and arr[1] == 0){//COLLECT_STOP M4
 800157c:	2100      	movs	r1, #0
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f000 fa68 	bl	8001a54 <_ZNSt5arrayIiLj5EEixEj>
 8001584:	4603      	mov	r3, r0
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d109      	bne.n	80015a0 <_Z13toggle_switchRSt5arrayIiLj5EERS_IiLj3EE+0x70>
 800158c:	2101      	movs	r1, #1
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f000 fa60 	bl	8001a54 <_ZNSt5arrayIiLj5EEixEj>
 8001594:	4603      	mov	r3, r0
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d101      	bne.n	80015a0 <_Z13toggle_switchRSt5arrayIiLj5EERS_IiLj3EE+0x70>
 800159c:	2301      	movs	r3, #1
 800159e:	e000      	b.n	80015a2 <_Z13toggle_switchRSt5arrayIiLj5EERS_IiLj3EE+0x72>
 80015a0:	2300      	movs	r3, #0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d00c      	beq.n	80015c0 <_Z13toggle_switchRSt5arrayIiLj5EERS_IiLj3EE+0x90>
		//BRK_ON
		HAL_GPIO_WritePin(GPIOB,BRK4_Pin,GPIO_PIN_SET);
 80015a6:	2201      	movs	r2, #1
 80015a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015ac:	4875      	ldr	r0, [pc, #468]	; (8001784 <_Z13toggle_switchRSt5arrayIiLj5EERS_IiLj3EE+0x254>)
 80015ae:	f001 ff15 	bl	80033dc <HAL_GPIO_WritePin>
		mec_pwm[0] = 0;
 80015b2:	2100      	movs	r1, #0
 80015b4:	6838      	ldr	r0, [r7, #0]
 80015b6:	f000 fa7c 	bl	8001ab2 <_ZNSt5arrayIiLj3EEixEj>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]
	}
	if(arr[1] == 1){//COLLECT_MINUS M4
 80015c0:	2101      	movs	r1, #1
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f000 fa46 	bl	8001a54 <_ZNSt5arrayIiLj5EEixEj>
 80015c8:	4603      	mov	r3, r0
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	bf0c      	ite	eq
 80015d0:	2301      	moveq	r3, #1
 80015d2:	2300      	movne	r3, #0
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d012      	beq.n	8001600 <_Z13toggle_switchRSt5arrayIiLj5EERS_IiLj3EE+0xd0>
		//BRK_OFF
		//MINUS
		HAL_GPIO_WritePin(GPIOD,DIRECTION4_Pin,GPIO_PIN_RESET);
 80015da:	2200      	movs	r2, #0
 80015dc:	2104      	movs	r1, #4
 80015de:	4868      	ldr	r0, [pc, #416]	; (8001780 <_Z13toggle_switchRSt5arrayIiLj5EERS_IiLj3EE+0x250>)
 80015e0:	f001 fefc 	bl	80033dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,BRK4_Pin,GPIO_PIN_RESET);
 80015e4:	2200      	movs	r2, #0
 80015e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015ea:	4866      	ldr	r0, [pc, #408]	; (8001784 <_Z13toggle_switchRSt5arrayIiLj5EERS_IiLj3EE+0x254>)
 80015ec:	f001 fef6 	bl	80033dc <HAL_GPIO_WritePin>
		mec_pwm[0] = 10000;
 80015f0:	2100      	movs	r1, #0
 80015f2:	6838      	ldr	r0, [r7, #0]
 80015f4:	f000 fa5d 	bl	8001ab2 <_ZNSt5arrayIiLj3EEixEj>
 80015f8:	4603      	mov	r3, r0
 80015fa:	f242 7210 	movw	r2, #10000	; 0x2710
 80015fe:	601a      	str	r2, [r3, #0]
	}
	if(arr[2] == 1){//RELOAD_START M5
 8001600:	2102      	movs	r1, #2
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	f000 fa26 	bl	8001a54 <_ZNSt5arrayIiLj5EEixEj>
 8001608:	4603      	mov	r3, r0
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	2b01      	cmp	r3, #1
 800160e:	bf0c      	ite	eq
 8001610:	2301      	moveq	r3, #1
 8001612:	2300      	movne	r3, #0
 8001614:	b2db      	uxtb	r3, r3
 8001616:	2b00      	cmp	r3, #0
 8001618:	d012      	beq.n	8001640 <_Z13toggle_switchRSt5arrayIiLj5EERS_IiLj3EE+0x110>
		//BRK_OFF
		HAL_GPIO_WritePin(GPIOA,DIRECTION5_Pin,GPIO_PIN_SET);
 800161a:	2201      	movs	r2, #1
 800161c:	2140      	movs	r1, #64	; 0x40
 800161e:	485a      	ldr	r0, [pc, #360]	; (8001788 <_Z13toggle_switchRSt5arrayIiLj5EERS_IiLj3EE+0x258>)
 8001620:	f001 fedc 	bl	80033dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,BRK5_Pin,GPIO_PIN_RESET);
 8001624:	2200      	movs	r2, #0
 8001626:	2104      	movs	r1, #4
 8001628:	4856      	ldr	r0, [pc, #344]	; (8001784 <_Z13toggle_switchRSt5arrayIiLj5EERS_IiLj3EE+0x254>)
 800162a:	f001 fed7 	bl	80033dc <HAL_GPIO_WritePin>
		mec_pwm[1] = 10000;
 800162e:	2101      	movs	r1, #1
 8001630:	6838      	ldr	r0, [r7, #0]
 8001632:	f000 fa3e 	bl	8001ab2 <_ZNSt5arrayIiLj3EEixEj>
 8001636:	4603      	mov	r3, r0
 8001638:	f242 7210 	movw	r2, #10000	; 0x2710
 800163c:	601a      	str	r2, [r3, #0]
 800163e:	e020      	b.n	8001682 <_Z13toggle_switchRSt5arrayIiLj5EERS_IiLj3EE+0x152>
	}
	else if (arr[2] == 0 and arr[3] == 0){//RELOAD_KEEP M5
 8001640:	2102      	movs	r1, #2
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f000 fa06 	bl	8001a54 <_ZNSt5arrayIiLj5EEixEj>
 8001648:	4603      	mov	r3, r0
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d109      	bne.n	8001664 <_Z13toggle_switchRSt5arrayIiLj5EERS_IiLj3EE+0x134>
 8001650:	2103      	movs	r1, #3
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f000 f9fe 	bl	8001a54 <_ZNSt5arrayIiLj5EEixEj>
 8001658:	4603      	mov	r3, r0
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d101      	bne.n	8001664 <_Z13toggle_switchRSt5arrayIiLj5EERS_IiLj3EE+0x134>
 8001660:	2301      	movs	r3, #1
 8001662:	e000      	b.n	8001666 <_Z13toggle_switchRSt5arrayIiLj5EERS_IiLj3EE+0x136>
 8001664:	2300      	movs	r3, #0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d00b      	beq.n	8001682 <_Z13toggle_switchRSt5arrayIiLj5EERS_IiLj3EE+0x152>
		//BRK_ON & KEEP
		HAL_GPIO_WritePin(GPIOB,BRK5_Pin,GPIO_PIN_SET);
 800166a:	2201      	movs	r2, #1
 800166c:	2104      	movs	r1, #4
 800166e:	4845      	ldr	r0, [pc, #276]	; (8001784 <_Z13toggle_switchRSt5arrayIiLj5EERS_IiLj3EE+0x254>)
 8001670:	f001 feb4 	bl	80033dc <HAL_GPIO_WritePin>
		mec_pwm[1] = 0;
 8001674:	2101      	movs	r1, #1
 8001676:	6838      	ldr	r0, [r7, #0]
 8001678:	f000 fa1b 	bl	8001ab2 <_ZNSt5arrayIiLj3EEixEj>
 800167c:	4603      	mov	r3, r0
 800167e:	2200      	movs	r2, #0
 8001680:	601a      	str	r2, [r3, #0]
	}
	if(arr[3] == 1){//SHOOT M5
 8001682:	2103      	movs	r1, #3
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f000 f9e5 	bl	8001a54 <_ZNSt5arrayIiLj5EEixEj>
 800168a:	4603      	mov	r3, r0
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	2b01      	cmp	r3, #1
 8001690:	bf0c      	ite	eq
 8001692:	2301      	moveq	r3, #1
 8001694:	2300      	movne	r3, #0
 8001696:	b2db      	uxtb	r3, r3
 8001698:	2b00      	cmp	r3, #0
 800169a:	d011      	beq.n	80016c0 <_Z13toggle_switchRSt5arrayIiLj5EERS_IiLj3EE+0x190>
		//BRK_OFF
		HAL_GPIO_WritePin(GPIOA,DIRECTION5_Pin,GPIO_PIN_RESET);
 800169c:	2200      	movs	r2, #0
 800169e:	2140      	movs	r1, #64	; 0x40
 80016a0:	4839      	ldr	r0, [pc, #228]	; (8001788 <_Z13toggle_switchRSt5arrayIiLj5EERS_IiLj3EE+0x258>)
 80016a2:	f001 fe9b 	bl	80033dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,BRK5_Pin,GPIO_PIN_RESET);
 80016a6:	2200      	movs	r2, #0
 80016a8:	2104      	movs	r1, #4
 80016aa:	4836      	ldr	r0, [pc, #216]	; (8001784 <_Z13toggle_switchRSt5arrayIiLj5EERS_IiLj3EE+0x254>)
 80016ac:	f001 fe96 	bl	80033dc <HAL_GPIO_WritePin>
		mec_pwm[1] = 10000;
 80016b0:	2101      	movs	r1, #1
 80016b2:	6838      	ldr	r0, [r7, #0]
 80016b4:	f000 f9fd 	bl	8001ab2 <_ZNSt5arrayIiLj3EEixEj>
 80016b8:	4603      	mov	r3, r0
 80016ba:	f242 7210 	movw	r2, #10000	; 0x2710
 80016be:	601a      	str	r2, [r3, #0]
	}
	if(arr[4] == 2){//DEG_UP M6
 80016c0:	2104      	movs	r1, #4
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f000 f9c6 	bl	8001a54 <_ZNSt5arrayIiLj5EEixEj>
 80016c8:	4603      	mov	r3, r0
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	2b02      	cmp	r3, #2
 80016ce:	bf0c      	ite	eq
 80016d0:	2301      	moveq	r3, #1
 80016d2:	2300      	movne	r3, #0
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d013      	beq.n	8001702 <_Z13toggle_switchRSt5arrayIiLj5EERS_IiLj3EE+0x1d2>
		//BRK_OFF & PLUS
		HAL_GPIO_WritePin(GPIOA,DIRECTION6_Pin,GPIO_PIN_SET);
 80016da:	2201      	movs	r2, #1
 80016dc:	2120      	movs	r1, #32
 80016de:	482a      	ldr	r0, [pc, #168]	; (8001788 <_Z13toggle_switchRSt5arrayIiLj5EERS_IiLj3EE+0x258>)
 80016e0:	f001 fe7c 	bl	80033dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,BRK6_Pin,GPIO_PIN_RESET);
 80016e4:	2200      	movs	r2, #0
 80016e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016ea:	4827      	ldr	r0, [pc, #156]	; (8001788 <_Z13toggle_switchRSt5arrayIiLj5EERS_IiLj3EE+0x258>)
 80016ec:	f001 fe76 	bl	80033dc <HAL_GPIO_WritePin>
		mec_pwm[2] = 10000;
 80016f0:	2102      	movs	r1, #2
 80016f2:	6838      	ldr	r0, [r7, #0]
 80016f4:	f000 f9dd 	bl	8001ab2 <_ZNSt5arrayIiLj3EEixEj>
 80016f8:	4603      	mov	r3, r0
 80016fa:	f242 7210 	movw	r2, #10000	; 0x2710
 80016fe:	601a      	str	r2, [r3, #0]
		//BRK_ON & KEEP
		HAL_GPIO_WritePin(GPIOA,BRK6_Pin,GPIO_PIN_SET);
		mec_pwm[2] = 0;
	}

}
 8001700:	e03a      	b.n	8001778 <_Z13toggle_switchRSt5arrayIiLj5EERS_IiLj3EE+0x248>
	else if (arr[4] == 0){//DEG_DOWN M6
 8001702:	2104      	movs	r1, #4
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f000 f9a5 	bl	8001a54 <_ZNSt5arrayIiLj5EEixEj>
 800170a:	4603      	mov	r3, r0
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	2b00      	cmp	r3, #0
 8001710:	bf0c      	ite	eq
 8001712:	2301      	moveq	r3, #1
 8001714:	2300      	movne	r3, #0
 8001716:	b2db      	uxtb	r3, r3
 8001718:	2b00      	cmp	r3, #0
 800171a:	d013      	beq.n	8001744 <_Z13toggle_switchRSt5arrayIiLj5EERS_IiLj3EE+0x214>
		HAL_GPIO_WritePin(GPIOA,DIRECTION6_Pin,GPIO_PIN_RESET);
 800171c:	2200      	movs	r2, #0
 800171e:	2120      	movs	r1, #32
 8001720:	4819      	ldr	r0, [pc, #100]	; (8001788 <_Z13toggle_switchRSt5arrayIiLj5EERS_IiLj3EE+0x258>)
 8001722:	f001 fe5b 	bl	80033dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,BRK6_Pin,GPIO_PIN_RESET);
 8001726:	2200      	movs	r2, #0
 8001728:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800172c:	4816      	ldr	r0, [pc, #88]	; (8001788 <_Z13toggle_switchRSt5arrayIiLj5EERS_IiLj3EE+0x258>)
 800172e:	f001 fe55 	bl	80033dc <HAL_GPIO_WritePin>
		mec_pwm[2] = 10000;
 8001732:	2102      	movs	r1, #2
 8001734:	6838      	ldr	r0, [r7, #0]
 8001736:	f000 f9bc 	bl	8001ab2 <_ZNSt5arrayIiLj3EEixEj>
 800173a:	4603      	mov	r3, r0
 800173c:	f242 7210 	movw	r2, #10000	; 0x2710
 8001740:	601a      	str	r2, [r3, #0]
}
 8001742:	e019      	b.n	8001778 <_Z13toggle_switchRSt5arrayIiLj5EERS_IiLj3EE+0x248>
	else if (arr[4] == 1){//DEG_KEEP M6
 8001744:	2104      	movs	r1, #4
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f000 f984 	bl	8001a54 <_ZNSt5arrayIiLj5EEixEj>
 800174c:	4603      	mov	r3, r0
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2b01      	cmp	r3, #1
 8001752:	bf0c      	ite	eq
 8001754:	2301      	moveq	r3, #1
 8001756:	2300      	movne	r3, #0
 8001758:	b2db      	uxtb	r3, r3
 800175a:	2b00      	cmp	r3, #0
 800175c:	d00c      	beq.n	8001778 <_Z13toggle_switchRSt5arrayIiLj5EERS_IiLj3EE+0x248>
		HAL_GPIO_WritePin(GPIOA,BRK6_Pin,GPIO_PIN_SET);
 800175e:	2201      	movs	r2, #1
 8001760:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001764:	4808      	ldr	r0, [pc, #32]	; (8001788 <_Z13toggle_switchRSt5arrayIiLj5EERS_IiLj3EE+0x258>)
 8001766:	f001 fe39 	bl	80033dc <HAL_GPIO_WritePin>
		mec_pwm[2] = 0;
 800176a:	2102      	movs	r1, #2
 800176c:	6838      	ldr	r0, [r7, #0]
 800176e:	f000 f9a0 	bl	8001ab2 <_ZNSt5arrayIiLj3EEixEj>
 8001772:	4603      	mov	r3, r0
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]
}
 8001778:	bf00      	nop
 800177a:	3708      	adds	r7, #8
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	40020c00 	.word	0x40020c00
 8001784:	40020400 	.word	0x40020400
 8001788:	40020000 	.word	0x40020000

0800178c <_Z14emergency_progv>:

void emergency_prog(void){
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
	//ALL_PSB_ON
	  HAL_GPIO_WritePin(GPIOC,PSB1_Pin,GPIO_PIN_RESET);
 8001790:	2200      	movs	r2, #0
 8001792:	2102      	movs	r1, #2
 8001794:	4812      	ldr	r0, [pc, #72]	; (80017e0 <_Z14emergency_progv+0x54>)
 8001796:	f001 fe21 	bl	80033dc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC,PSB2_Pin,GPIO_PIN_RESET);
 800179a:	2200      	movs	r2, #0
 800179c:	2101      	movs	r1, #1
 800179e:	4810      	ldr	r0, [pc, #64]	; (80017e0 <_Z14emergency_progv+0x54>)
 80017a0:	f001 fe1c 	bl	80033dc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC,PSB3_Pin,GPIO_PIN_RESET);
 80017a4:	2200      	movs	r2, #0
 80017a6:	2110      	movs	r1, #16
 80017a8:	480d      	ldr	r0, [pc, #52]	; (80017e0 <_Z14emergency_progv+0x54>)
 80017aa:	f001 fe17 	bl	80033dc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB,PSB4_Pin,GPIO_PIN_RESET);
 80017ae:	2200      	movs	r2, #0
 80017b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017b4:	480b      	ldr	r0, [pc, #44]	; (80017e4 <_Z14emergency_progv+0x58>)
 80017b6:	f001 fe11 	bl	80033dc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB,PSB5_Pin,GPIO_PIN_RESET);
 80017ba:	2200      	movs	r2, #0
 80017bc:	2102      	movs	r1, #2
 80017be:	4809      	ldr	r0, [pc, #36]	; (80017e4 <_Z14emergency_progv+0x58>)
 80017c0:	f001 fe0c 	bl	80033dc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB,PSB6_Pin,GPIO_PIN_RESET);
 80017c4:	2200      	movs	r2, #0
 80017c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017ca:	4806      	ldr	r0, [pc, #24]	; (80017e4 <_Z14emergency_progv+0x58>)
 80017cc:	f001 fe06 	bl	80033dc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA,LED3_Pin,GPIO_PIN_SET);
 80017d0:	2201      	movs	r2, #1
 80017d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017d6:	4804      	ldr	r0, [pc, #16]	; (80017e8 <_Z14emergency_progv+0x5c>)
 80017d8:	f001 fe00 	bl	80033dc <HAL_GPIO_WritePin>

}
 80017dc:	bf00      	nop
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	40020800 	.word	0x40020800
 80017e4:	40020400 	.word	0x40020400
 80017e8:	40020000 	.word	0x40020000

080017ec <_Z13recovery_progv>:

void recovery_prog(void){
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
	//ALL_PSB_OFF
	  HAL_GPIO_WritePin(GPIOC,PSB1_Pin,GPIO_PIN_SET);
 80017f0:	2201      	movs	r2, #1
 80017f2:	2102      	movs	r1, #2
 80017f4:	4812      	ldr	r0, [pc, #72]	; (8001840 <_Z13recovery_progv+0x54>)
 80017f6:	f001 fdf1 	bl	80033dc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC,PSB2_Pin,GPIO_PIN_SET);
 80017fa:	2201      	movs	r2, #1
 80017fc:	2101      	movs	r1, #1
 80017fe:	4810      	ldr	r0, [pc, #64]	; (8001840 <_Z13recovery_progv+0x54>)
 8001800:	f001 fdec 	bl	80033dc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC,PSB3_Pin,GPIO_PIN_SET);
 8001804:	2201      	movs	r2, #1
 8001806:	2110      	movs	r1, #16
 8001808:	480d      	ldr	r0, [pc, #52]	; (8001840 <_Z13recovery_progv+0x54>)
 800180a:	f001 fde7 	bl	80033dc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB,PSB4_Pin,GPIO_PIN_SET);
 800180e:	2201      	movs	r2, #1
 8001810:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001814:	480b      	ldr	r0, [pc, #44]	; (8001844 <_Z13recovery_progv+0x58>)
 8001816:	f001 fde1 	bl	80033dc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB,PSB5_Pin,GPIO_PIN_SET);
 800181a:	2201      	movs	r2, #1
 800181c:	2102      	movs	r1, #2
 800181e:	4809      	ldr	r0, [pc, #36]	; (8001844 <_Z13recovery_progv+0x58>)
 8001820:	f001 fddc 	bl	80033dc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB,PSB6_Pin,GPIO_PIN_SET);
 8001824:	2201      	movs	r2, #1
 8001826:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800182a:	4806      	ldr	r0, [pc, #24]	; (8001844 <_Z13recovery_progv+0x58>)
 800182c:	f001 fdd6 	bl	80033dc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA,LED3_Pin,GPIO_PIN_RESET);
 8001830:	2200      	movs	r2, #0
 8001832:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001836:	4804      	ldr	r0, [pc, #16]	; (8001848 <_Z13recovery_progv+0x5c>)
 8001838:	f001 fdd0 	bl	80033dc <HAL_GPIO_WritePin>
}
 800183c:	bf00      	nop
 800183e:	bd80      	pop	{r7, pc}
 8001840:	40020800 	.word	0x40020800
 8001844:	40020400 	.word	0x40020400
 8001848:	40020000 	.word	0x40020000

0800184c <_Z4WE_3fffRSt5arrayIfLj3EE>:

void WE_3(float Vx,float Vy,float Vr,std::array<float,3>& motor_pwm){
 800184c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001850:	ed2d 8b02 	vpush	{d8}
 8001854:	b087      	sub	sp, #28
 8001856:	af00      	add	r7, sp, #0
 8001858:	ed87 0a03 	vstr	s0, [r7, #12]
 800185c:	edc7 0a02 	vstr	s1, [r7, #8]
 8001860:	ed87 1a01 	vstr	s2, [r7, #4]
 8001864:	6038      	str	r0, [r7, #0]
    for(int i = 0;i < 3;i++){
 8001866:	2300      	movs	r3, #0
 8001868:	617b      	str	r3, [r7, #20]
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	2b02      	cmp	r3, #2
 800186e:	dc42      	bgt.n	80018f6 <_Z4WE_3fffRSt5arrayIfLj3EE+0xaa>
        motor_pwm[i] = Vx * motor_arr[i][0] + Vy * motor_arr[i][1] + Vr * motor_arr[i][2];
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	4619      	mov	r1, r3
 8001874:	486b      	ldr	r0, [pc, #428]	; (8001a24 <_Z4WE_3fffRSt5arrayIfLj3EE+0x1d8>)
 8001876:	f000 f92b 	bl	8001ad0 <_ZNSt5arrayIS_IfLj3EELj3EEixEj>
 800187a:	4603      	mov	r3, r0
 800187c:	2100      	movs	r1, #0
 800187e:	4618      	mov	r0, r3
 8001880:	f000 f8f7 	bl	8001a72 <_ZNSt5arrayIfLj3EEixEj>
 8001884:	4603      	mov	r3, r0
 8001886:	ed93 7a00 	vldr	s14, [r3]
 800188a:	edd7 7a03 	vldr	s15, [r7, #12]
 800188e:	ee27 8a27 	vmul.f32	s16, s14, s15
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	4619      	mov	r1, r3
 8001896:	4863      	ldr	r0, [pc, #396]	; (8001a24 <_Z4WE_3fffRSt5arrayIfLj3EE+0x1d8>)
 8001898:	f000 f91a 	bl	8001ad0 <_ZNSt5arrayIS_IfLj3EELj3EEixEj>
 800189c:	4603      	mov	r3, r0
 800189e:	2101      	movs	r1, #1
 80018a0:	4618      	mov	r0, r3
 80018a2:	f000 f8e6 	bl	8001a72 <_ZNSt5arrayIfLj3EEixEj>
 80018a6:	4603      	mov	r3, r0
 80018a8:	ed93 7a00 	vldr	s14, [r3]
 80018ac:	edd7 7a02 	vldr	s15, [r7, #8]
 80018b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018b4:	ee78 8a27 	vadd.f32	s17, s16, s15
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	4619      	mov	r1, r3
 80018bc:	4859      	ldr	r0, [pc, #356]	; (8001a24 <_Z4WE_3fffRSt5arrayIfLj3EE+0x1d8>)
 80018be:	f000 f907 	bl	8001ad0 <_ZNSt5arrayIS_IfLj3EELj3EEixEj>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2102      	movs	r1, #2
 80018c6:	4618      	mov	r0, r3
 80018c8:	f000 f8d3 	bl	8001a72 <_ZNSt5arrayIfLj3EEixEj>
 80018cc:	4603      	mov	r3, r0
 80018ce:	ed93 7a00 	vldr	s14, [r3]
 80018d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80018d6:	ee27 8a27 	vmul.f32	s16, s14, s15
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	4619      	mov	r1, r3
 80018de:	6838      	ldr	r0, [r7, #0]
 80018e0:	f000 f8c7 	bl	8001a72 <_ZNSt5arrayIfLj3EEixEj>
 80018e4:	4603      	mov	r3, r0
 80018e6:	ee78 7a88 	vadd.f32	s15, s17, s16
 80018ea:	edc3 7a00 	vstr	s15, [r3]
    for(int i = 0;i < 3;i++){
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	3301      	adds	r3, #1
 80018f2:	617b      	str	r3, [r7, #20]
 80018f4:	e7b9      	b.n	800186a <_Z4WE_3fffRSt5arrayIfLj3EE+0x1e>
    }
    if(motor_pwm[0] < 0){
 80018f6:	2100      	movs	r1, #0
 80018f8:	6838      	ldr	r0, [r7, #0]
 80018fa:	f000 f8ba 	bl	8001a72 <_ZNSt5arrayIfLj3EEixEj>
 80018fe:	4603      	mov	r3, r0
 8001900:	edd3 7a00 	vldr	s15, [r3]
 8001904:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800190c:	bf4c      	ite	mi
 800190e:	2301      	movmi	r3, #1
 8001910:	2300      	movpl	r3, #0
 8001912:	b2db      	uxtb	r3, r3
 8001914:	2b00      	cmp	r3, #0
 8001916:	d019      	beq.n	800194c <_Z4WE_3fffRSt5arrayIfLj3EE+0x100>
        //HAL_GPIOでDIRECTION_PINを操作
        motor_pwm[0] *= -1.0;
 8001918:	2100      	movs	r1, #0
 800191a:	6838      	ldr	r0, [r7, #0]
 800191c:	f000 f8a9 	bl	8001a72 <_ZNSt5arrayIfLj3EEixEj>
 8001920:	4606      	mov	r6, r0
 8001922:	6833      	ldr	r3, [r6, #0]
 8001924:	4618      	mov	r0, r3
 8001926:	f7fe fdd1 	bl	80004cc <__aeabi_f2d>
 800192a:	4602      	mov	r2, r0
 800192c:	460b      	mov	r3, r1
 800192e:	4692      	mov	sl, r2
 8001930:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 8001934:	4650      	mov	r0, sl
 8001936:	4659      	mov	r1, fp
 8001938:	f7fe fe20 	bl	800057c <__aeabi_d2f>
 800193c:	4603      	mov	r3, r0
 800193e:	6033      	str	r3, [r6, #0]
        HAL_GPIO_WritePin(GPIOA,DIRECTION1_Pin,GPIO_PIN_RESET);
 8001940:	2200      	movs	r2, #0
 8001942:	2110      	movs	r1, #16
 8001944:	4838      	ldr	r0, [pc, #224]	; (8001a28 <_Z4WE_3fffRSt5arrayIfLj3EE+0x1dc>)
 8001946:	f001 fd49 	bl	80033dc <HAL_GPIO_WritePin>
 800194a:	e004      	b.n	8001956 <_Z4WE_3fffRSt5arrayIfLj3EE+0x10a>
    }
    else{
        HAL_GPIO_WritePin(GPIOA,DIRECTION1_Pin,GPIO_PIN_SET);
 800194c:	2201      	movs	r2, #1
 800194e:	2110      	movs	r1, #16
 8001950:	4835      	ldr	r0, [pc, #212]	; (8001a28 <_Z4WE_3fffRSt5arrayIfLj3EE+0x1dc>)
 8001952:	f001 fd43 	bl	80033dc <HAL_GPIO_WritePin>
    }
    if(motor_pwm[1] < 0){
 8001956:	2101      	movs	r1, #1
 8001958:	6838      	ldr	r0, [r7, #0]
 800195a:	f000 f88a 	bl	8001a72 <_ZNSt5arrayIfLj3EEixEj>
 800195e:	4603      	mov	r3, r0
 8001960:	edd3 7a00 	vldr	s15, [r3]
 8001964:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001968:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800196c:	bf4c      	ite	mi
 800196e:	2301      	movmi	r3, #1
 8001970:	2300      	movpl	r3, #0
 8001972:	b2db      	uxtb	r3, r3
 8001974:	2b00      	cmp	r3, #0
 8001976:	d019      	beq.n	80019ac <_Z4WE_3fffRSt5arrayIfLj3EE+0x160>
        //HAL_GPIOでDIRECTION_PINを操作
        motor_pwm[1] *= -1.0;
 8001978:	2101      	movs	r1, #1
 800197a:	6838      	ldr	r0, [r7, #0]
 800197c:	f000 f879 	bl	8001a72 <_ZNSt5arrayIfLj3EEixEj>
 8001980:	4606      	mov	r6, r0
 8001982:	6833      	ldr	r3, [r6, #0]
 8001984:	4618      	mov	r0, r3
 8001986:	f7fe fda1 	bl	80004cc <__aeabi_f2d>
 800198a:	4602      	mov	r2, r0
 800198c:	460b      	mov	r3, r1
 800198e:	4690      	mov	r8, r2
 8001990:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8001994:	4640      	mov	r0, r8
 8001996:	4649      	mov	r1, r9
 8001998:	f7fe fdf0 	bl	800057c <__aeabi_d2f>
 800199c:	4603      	mov	r3, r0
 800199e:	6033      	str	r3, [r6, #0]
        HAL_GPIO_WritePin(GPIOA,DIRECTION2_Pin,GPIO_PIN_RESET);
 80019a0:	2200      	movs	r2, #0
 80019a2:	2102      	movs	r1, #2
 80019a4:	4820      	ldr	r0, [pc, #128]	; (8001a28 <_Z4WE_3fffRSt5arrayIfLj3EE+0x1dc>)
 80019a6:	f001 fd19 	bl	80033dc <HAL_GPIO_WritePin>
 80019aa:	e004      	b.n	80019b6 <_Z4WE_3fffRSt5arrayIfLj3EE+0x16a>
    }
    else{
        HAL_GPIO_WritePin(GPIOA,DIRECTION2_Pin,GPIO_PIN_SET);
 80019ac:	2201      	movs	r2, #1
 80019ae:	2102      	movs	r1, #2
 80019b0:	481d      	ldr	r0, [pc, #116]	; (8001a28 <_Z4WE_3fffRSt5arrayIfLj3EE+0x1dc>)
 80019b2:	f001 fd13 	bl	80033dc <HAL_GPIO_WritePin>
    }
    if(motor_pwm[2] < 0){
 80019b6:	2102      	movs	r1, #2
 80019b8:	6838      	ldr	r0, [r7, #0]
 80019ba:	f000 f85a 	bl	8001a72 <_ZNSt5arrayIfLj3EEixEj>
 80019be:	4603      	mov	r3, r0
 80019c0:	edd3 7a00 	vldr	s15, [r3]
 80019c4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019cc:	bf4c      	ite	mi
 80019ce:	2301      	movmi	r3, #1
 80019d0:	2300      	movpl	r3, #0
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d019      	beq.n	8001a0c <_Z4WE_3fffRSt5arrayIfLj3EE+0x1c0>
        //HAL_GPIOでDIRECTION_PINを操作
        motor_pwm[2] *= -1.0;
 80019d8:	2102      	movs	r1, #2
 80019da:	6838      	ldr	r0, [r7, #0]
 80019dc:	f000 f849 	bl	8001a72 <_ZNSt5arrayIfLj3EEixEj>
 80019e0:	4606      	mov	r6, r0
 80019e2:	6833      	ldr	r3, [r6, #0]
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7fe fd71 	bl	80004cc <__aeabi_f2d>
 80019ea:	4602      	mov	r2, r0
 80019ec:	460b      	mov	r3, r1
 80019ee:	4614      	mov	r4, r2
 80019f0:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80019f4:	4620      	mov	r0, r4
 80019f6:	4629      	mov	r1, r5
 80019f8:	f7fe fdc0 	bl	800057c <__aeabi_d2f>
 80019fc:	4603      	mov	r3, r0
 80019fe:	6033      	str	r3, [r6, #0]
        HAL_GPIO_WritePin(GPIOA,DIRECTION3_Pin,GPIO_PIN_RESET);
 8001a00:	2200      	movs	r2, #0
 8001a02:	2101      	movs	r1, #1
 8001a04:	4808      	ldr	r0, [pc, #32]	; (8001a28 <_Z4WE_3fffRSt5arrayIfLj3EE+0x1dc>)
 8001a06:	f001 fce9 	bl	80033dc <HAL_GPIO_WritePin>
    }
    else{
        HAL_GPIO_WritePin(GPIOA,DIRECTION3_Pin,GPIO_PIN_SET);
    }
}
 8001a0a:	e004      	b.n	8001a16 <_Z4WE_3fffRSt5arrayIfLj3EE+0x1ca>
        HAL_GPIO_WritePin(GPIOA,DIRECTION3_Pin,GPIO_PIN_SET);
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	2101      	movs	r1, #1
 8001a10:	4805      	ldr	r0, [pc, #20]	; (8001a28 <_Z4WE_3fffRSt5arrayIfLj3EE+0x1dc>)
 8001a12:	f001 fce3 	bl	80033dc <HAL_GPIO_WritePin>
}
 8001a16:	bf00      	nop
 8001a18:	371c      	adds	r7, #28
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	ecbd 8b02 	vpop	{d8}
 8001a20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a24:	20000000 	.word	0x20000000
 8001a28:	40020000 	.word	0x40020000

08001a2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a30:	b672      	cpsid	i
}
 8001a32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a34:	e7fe      	b.n	8001a34 <Error_Handler+0x8>

08001a36 <_ZNSt5arrayIiLj8EEixEj>:
      _GLIBCXX_NODISCARD constexpr bool
      empty() const noexcept { return size() == 0; }

      // Element access.
      _GLIBCXX17_CONSTEXPR reference
      operator[](size_type __n) noexcept
 8001a36:	b580      	push	{r7, lr}
 8001a38:	b082      	sub	sp, #8
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]
 8001a3e:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6839      	ldr	r1, [r7, #0]
 8001a44:	4618      	mov	r0, r3
 8001a46:	f000 f852 	bl	8001aee <_ZNSt14__array_traitsIiLj8EE6_S_refERA8_Kij>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3708      	adds	r7, #8
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}

08001a54 <_ZNSt5arrayIiLj5EEixEj>:
      operator[](size_type __n) noexcept
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6839      	ldr	r1, [r7, #0]
 8001a62:	4618      	mov	r0, r3
 8001a64:	f000 f852 	bl	8001b0c <_ZNSt14__array_traitsIiLj5EE6_S_refERA5_Kij>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}

08001a72 <_ZNSt5arrayIfLj3EEixEj>:
      operator[](size_type __n) noexcept
 8001a72:	b580      	push	{r7, lr}
 8001a74:	b082      	sub	sp, #8
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6078      	str	r0, [r7, #4]
 8001a7a:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6839      	ldr	r1, [r7, #0]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f000 f852 	bl	8001b2a <_ZNSt14__array_traitsIfLj3EE6_S_refERA3_Kfj>
 8001a86:	4603      	mov	r3, r0
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3708      	adds	r7, #8
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}

08001a90 <_ZStneIiLj5EEbRKSt5arrayIT_XT0_EES4_>:
    }
#else
  template<typename _Tp, std::size_t _Nm>
    _GLIBCXX20_CONSTEXPR
    inline bool
    operator!=(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	6039      	str	r1, [r7, #0]
    { return !(__one == __two); }
 8001a9a:	6839      	ldr	r1, [r7, #0]
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f000 f853 	bl	8001b48 <_ZSteqIiLj5EEbRKSt5arrayIT_XT0_EES4_>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	f083 0301 	eor.w	r3, r3, #1
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}

08001ab2 <_ZNSt5arrayIiLj3EEixEj>:
      operator[](size_type __n) noexcept
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	b082      	sub	sp, #8
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]
 8001aba:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6839      	ldr	r1, [r7, #0]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f000 f85c 	bl	8001b7e <_ZNSt14__array_traitsIiLj3EE6_S_refERA3_Kij>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3708      	adds	r7, #8
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}

08001ad0 <_ZNSt5arrayIS_IfLj3EELj3EEixEj>:
      operator[](size_type __n) noexcept
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6839      	ldr	r1, [r7, #0]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f000 f85c 	bl	8001b9c <_ZNSt14__array_traitsISt5arrayIfLj3EELj3EE6_S_refERA3_KS1_j>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <_ZNSt14__array_traitsIiLj8EE6_S_refERA8_Kij>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8001aee:	b480      	push	{r7}
 8001af0:	b083      	sub	sp, #12
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
 8001af6:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	4413      	add	r3, r2
 8001b00:	4618      	mov	r0, r3
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <_ZNSt14__array_traitsIiLj5EE6_S_refERA5_Kij>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	4413      	add	r3, r2
 8001b1e:	4618      	mov	r0, r3
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr

08001b2a <_ZNSt14__array_traitsIfLj3EE6_S_refERA3_Kfj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8001b2a:	b480      	push	{r7}
 8001b2c:	b083      	sub	sp, #12
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
 8001b32:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	687a      	ldr	r2, [r7, #4]
 8001b3a:	4413      	add	r3, r2
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	370c      	adds	r7, #12
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr

08001b48 <_ZSteqIiLj5EEbRKSt5arrayIT_XT0_EES4_>:
    operator==(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)
 8001b48:	b5b0      	push	{r4, r5, r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	6039      	str	r1, [r7, #0]
    { return std::equal(__one.begin(), __one.end(), __two.begin()); }
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f000 f834 	bl	8001bc0 <_ZNKSt5arrayIiLj5EE5beginEv>
 8001b58:	4604      	mov	r4, r0
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f000 f83c 	bl	8001bd8 <_ZNKSt5arrayIiLj5EE3endEv>
 8001b60:	4605      	mov	r5, r0
 8001b62:	6838      	ldr	r0, [r7, #0]
 8001b64:	f000 f82c 	bl	8001bc0 <_ZNKSt5arrayIiLj5EE5beginEv>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	4629      	mov	r1, r5
 8001b6e:	4620      	mov	r0, r4
 8001b70:	f000 f83f 	bl	8001bf2 <_ZSt5equalIPKiS1_EbT_S2_T0_>
 8001b74:	4603      	mov	r3, r0
 8001b76:	4618      	mov	r0, r3
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bdb0      	pop	{r4, r5, r7, pc}

08001b7e <_ZNSt14__array_traitsIiLj3EE6_S_refERA3_Kij>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8001b7e:	b480      	push	{r7}
 8001b80:	b083      	sub	sp, #12
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
 8001b86:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	687a      	ldr	r2, [r7, #4]
 8001b8e:	4413      	add	r3, r2
 8001b90:	4618      	mov	r0, r3
 8001b92:	370c      	adds	r7, #12
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr

08001b9c <_ZNSt14__array_traitsISt5arrayIfLj3EELj3EE6_S_refERA3_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8001ba6:	683a      	ldr	r2, [r7, #0]
 8001ba8:	4613      	mov	r3, r2
 8001baa:	005b      	lsls	r3, r3, #1
 8001bac:	4413      	add	r3, r2
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	370c      	adds	r7, #12
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr

08001bc0 <_ZNKSt5arrayIiLj5EE5beginEv>:
      begin() const noexcept
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
      { return const_iterator(data()); }
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f000 f822 	bl	8001c12 <_ZNKSt5arrayIiLj5EE4dataEv>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3708      	adds	r7, #8
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <_ZNKSt5arrayIiLj5EE3endEv>:
      end() const noexcept
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
      { return const_iterator(data() + _Nm); }
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f000 f816 	bl	8001c12 <_ZNKSt5arrayIiLj5EE4dataEv>
 8001be6:	4603      	mov	r3, r0
 8001be8:	3314      	adds	r3, #20
 8001bea:	4618      	mov	r0, r3
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <_ZSt5equalIPKiS1_EbT_S2_T0_>:
   *  ranges are equal.
  */
  template<typename _II1, typename _II2>
    _GLIBCXX20_CONSTEXPR
    inline bool
    equal(_II1 __first1, _II1 __last1, _II2 __first2)
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	b084      	sub	sp, #16
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	60f8      	str	r0, [r7, #12]
 8001bfa:	60b9      	str	r1, [r7, #8]
 8001bfc:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_EqualOpConcept<
	    typename iterator_traits<_II1>::value_type,
	    typename iterator_traits<_II2>::value_type>)
      __glibcxx_requires_can_increment_range(__first1, __last1, __first2);

      return std::__equal_aux(__first1, __last1, __first2);
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	68b9      	ldr	r1, [r7, #8]
 8001c02:	68f8      	ldr	r0, [r7, #12]
 8001c04:	f000 f812 	bl	8001c2c <_ZSt11__equal_auxIPKiS1_EbT_S2_T0_>
 8001c08:	4603      	mov	r3, r0
    }
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3710      	adds	r7, #16
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}

08001c12 <_ZNKSt5arrayIiLj5EE4dataEv>:
      data() const noexcept
 8001c12:	b580      	push	{r7, lr}
 8001c14:	b082      	sub	sp, #8
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f000 f821 	bl	8001c64 <_ZNSt14__array_traitsIiLj5EE6_S_ptrERA5_Ki>
 8001c22:	4603      	mov	r3, r0
 8001c24:	4618      	mov	r0, r3
 8001c26:	3708      	adds	r7, #8
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <_ZSt11__equal_auxIPKiS1_EbT_S2_T0_>:
    __equal_aux(_II1 __first1, _II1 __last1, _II2 __first2)
 8001c2c:	b5b0      	push	{r4, r5, r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	60f8      	str	r0, [r7, #12]
 8001c34:	60b9      	str	r1, [r7, #8]
 8001c36:	607a      	str	r2, [r7, #4]
      return std::__equal_aux1(std::__niter_base(__first1),
 8001c38:	68f8      	ldr	r0, [r7, #12]
 8001c3a:	f000 f81e 	bl	8001c7a <_ZSt12__niter_baseIPKiET_S2_>
 8001c3e:	4604      	mov	r4, r0
 8001c40:	68b8      	ldr	r0, [r7, #8]
 8001c42:	f000 f81a 	bl	8001c7a <_ZSt12__niter_baseIPKiET_S2_>
 8001c46:	4605      	mov	r5, r0
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f000 f816 	bl	8001c7a <_ZSt12__niter_baseIPKiET_S2_>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	461a      	mov	r2, r3
 8001c52:	4629      	mov	r1, r5
 8001c54:	4620      	mov	r0, r4
 8001c56:	f000 f81b 	bl	8001c90 <_ZSt12__equal_aux1IPKiS1_EbT_S2_T0_>
 8001c5a:	4603      	mov	r3, r0
    }
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3710      	adds	r7, #16
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bdb0      	pop	{r4, r5, r7, pc}

08001c64 <_ZNSt14__array_traitsIiLj5EE6_S_ptrERA5_Ki>:
      _S_ptr(const _Type& __t) noexcept
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	370c      	adds	r7, #12
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr

08001c7a <_ZSt12__niter_baseIPKiET_S2_>:
    __niter_base(_Iterator __it)
 8001c7a:	b480      	push	{r7}
 8001c7c:	b083      	sub	sp, #12
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	6078      	str	r0, [r7, #4]
    { return __it; }
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4618      	mov	r0, r3
 8001c86:	370c      	adds	r7, #12
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr

08001c90 <_ZSt12__equal_aux1IPKiS1_EbT_S2_T0_>:
    __equal_aux1(_II1 __first1, _II1 __last1, _II2 __first2)
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b086      	sub	sp, #24
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	60f8      	str	r0, [r7, #12]
 8001c98:	60b9      	str	r1, [r7, #8]
 8001c9a:	607a      	str	r2, [r7, #4]
      const bool __simple = ((__is_integer<_ValueType1>::__value
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	75fb      	strb	r3, [r7, #23]
      return std::__equal<__simple>::equal(__first1, __last1, __first2);
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	68b9      	ldr	r1, [r7, #8]
 8001ca4:	68f8      	ldr	r0, [r7, #12]
 8001ca6:	f000 f805 	bl	8001cb4 <_ZNSt7__equalILb1EE5equalIiEEbPKT_S4_S4_>
 8001caa:	4603      	mov	r3, r0
    }
 8001cac:	4618      	mov	r0, r3
 8001cae:	3718      	adds	r7, #24
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <_ZNSt7__equalILb1EE5equalIiEEbPKT_S4_S4_>:
	equal(const _Tp* __first1, const _Tp* __last1, const _Tp* __first2)
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b086      	sub	sp, #24
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	60f8      	str	r0, [r7, #12]
 8001cbc:	60b9      	str	r1, [r7, #8]
 8001cbe:	607a      	str	r2, [r7, #4]
	  if (const size_t __len = (__last1 - __first1))
 8001cc0:	68ba      	ldr	r2, [r7, #8]
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	109b      	asrs	r3, r3, #2
 8001cc8:	617b      	str	r3, [r7, #20]
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d00b      	beq.n	8001ce8 <_ZNSt7__equalILb1EE5equalIiEEbPKT_S4_S4_+0x34>
	    return !std::__memcmp(__first1, __first2, __len);
 8001cd0:	697a      	ldr	r2, [r7, #20]
 8001cd2:	6879      	ldr	r1, [r7, #4]
 8001cd4:	68f8      	ldr	r0, [r7, #12]
 8001cd6:	f000 f80c 	bl	8001cf2 <_ZSt8__memcmpIiiEiPKT_PKT0_j>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	bf0c      	ite	eq
 8001ce0:	2301      	moveq	r3, #1
 8001ce2:	2300      	movne	r3, #0
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	e000      	b.n	8001cea <_ZNSt7__equalILb1EE5equalIiEEbPKT_S4_S4_+0x36>
	  return true;
 8001ce8:	2301      	movs	r3, #1
	}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3718      	adds	r7, #24
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <_ZSt8__memcmpIiiEiPKT_PKT0_j>:
    __memcmp(const _Tp* __first1, const _Up* __first2, size_t __num)
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	b084      	sub	sp, #16
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	60f8      	str	r0, [r7, #12]
 8001cfa:	60b9      	str	r1, [r7, #8]
 8001cfc:	607a      	str	r2, [r7, #4]
	return __builtin_memcmp(__first1, __first2, sizeof(_Tp) * __num);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	461a      	mov	r2, r3
 8001d04:	68b9      	ldr	r1, [r7, #8]
 8001d06:	68f8      	ldr	r0, [r7, #12]
 8001d08:	f003 fb7e 	bl	8005408 <memcmp>
 8001d0c:	4603      	mov	r3, r0
    }
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3710      	adds	r7, #16
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
	...

08001d18 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d1e:	2300      	movs	r3, #0
 8001d20:	607b      	str	r3, [r7, #4]
 8001d22:	4b10      	ldr	r3, [pc, #64]	; (8001d64 <HAL_MspInit+0x4c>)
 8001d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d26:	4a0f      	ldr	r2, [pc, #60]	; (8001d64 <HAL_MspInit+0x4c>)
 8001d28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d2c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d2e:	4b0d      	ldr	r3, [pc, #52]	; (8001d64 <HAL_MspInit+0x4c>)
 8001d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d36:	607b      	str	r3, [r7, #4]
 8001d38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	603b      	str	r3, [r7, #0]
 8001d3e:	4b09      	ldr	r3, [pc, #36]	; (8001d64 <HAL_MspInit+0x4c>)
 8001d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d42:	4a08      	ldr	r2, [pc, #32]	; (8001d64 <HAL_MspInit+0x4c>)
 8001d44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d48:	6413      	str	r3, [r2, #64]	; 0x40
 8001d4a:	4b06      	ldr	r3, [pc, #24]	; (8001d64 <HAL_MspInit+0x4c>)
 8001d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d52:	603b      	str	r3, [r7, #0]
 8001d54:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001d56:	2007      	movs	r0, #7
 8001d58:	f001 f96a 	bl	8003030 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d5c:	bf00      	nop
 8001d5e:	3708      	adds	r7, #8
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	40023800 	.word	0x40023800

08001d68 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b08a      	sub	sp, #40	; 0x28
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d70:	f107 0314 	add.w	r3, r7, #20
 8001d74:	2200      	movs	r2, #0
 8001d76:	601a      	str	r2, [r3, #0]
 8001d78:	605a      	str	r2, [r3, #4]
 8001d7a:	609a      	str	r2, [r3, #8]
 8001d7c:	60da      	str	r2, [r3, #12]
 8001d7e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN2)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a2c      	ldr	r2, [pc, #176]	; (8001e38 <HAL_CAN_MspInit+0xd0>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d151      	bne.n	8001e2e <HAL_CAN_MspInit+0xc6>
  {
  /* USER CODE BEGIN CAN2_MspInit 0 */

  /* USER CODE END CAN2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	613b      	str	r3, [r7, #16]
 8001d8e:	4b2b      	ldr	r3, [pc, #172]	; (8001e3c <HAL_CAN_MspInit+0xd4>)
 8001d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d92:	4a2a      	ldr	r2, [pc, #168]	; (8001e3c <HAL_CAN_MspInit+0xd4>)
 8001d94:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001d98:	6413      	str	r3, [r2, #64]	; 0x40
 8001d9a:	4b28      	ldr	r3, [pc, #160]	; (8001e3c <HAL_CAN_MspInit+0xd4>)
 8001d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001da2:	613b      	str	r3, [r7, #16]
 8001da4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001da6:	2300      	movs	r3, #0
 8001da8:	60fb      	str	r3, [r7, #12]
 8001daa:	4b24      	ldr	r3, [pc, #144]	; (8001e3c <HAL_CAN_MspInit+0xd4>)
 8001dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dae:	4a23      	ldr	r2, [pc, #140]	; (8001e3c <HAL_CAN_MspInit+0xd4>)
 8001db0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001db4:	6413      	str	r3, [r2, #64]	; 0x40
 8001db6:	4b21      	ldr	r3, [pc, #132]	; (8001e3c <HAL_CAN_MspInit+0xd4>)
 8001db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dbe:	60fb      	str	r3, [r7, #12]
 8001dc0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	60bb      	str	r3, [r7, #8]
 8001dc6:	4b1d      	ldr	r3, [pc, #116]	; (8001e3c <HAL_CAN_MspInit+0xd4>)
 8001dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dca:	4a1c      	ldr	r2, [pc, #112]	; (8001e3c <HAL_CAN_MspInit+0xd4>)
 8001dcc:	f043 0302 	orr.w	r3, r3, #2
 8001dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001dd2:	4b1a      	ldr	r3, [pc, #104]	; (8001e3c <HAL_CAN_MspInit+0xd4>)
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd6:	f003 0302 	and.w	r3, r3, #2
 8001dda:	60bb      	str	r3, [r7, #8]
 8001ddc:	68bb      	ldr	r3, [r7, #8]
    /**CAN2 GPIO Configuration
    PB5     ------> CAN2_RX
    PB6     ------> CAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001dde:	2360      	movs	r3, #96	; 0x60
 8001de0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de2:	2302      	movs	r3, #2
 8001de4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de6:	2300      	movs	r3, #0
 8001de8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dea:	2303      	movs	r3, #3
 8001dec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001dee:	2309      	movs	r3, #9
 8001df0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001df2:	f107 0314 	add.w	r3, r7, #20
 8001df6:	4619      	mov	r1, r3
 8001df8:	4811      	ldr	r0, [pc, #68]	; (8001e40 <HAL_CAN_MspInit+0xd8>)
 8001dfa:	f001 f95b 	bl	80030b4 <HAL_GPIO_Init>

    /* CAN2 interrupt Init */
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 0, 0);
 8001dfe:	2200      	movs	r2, #0
 8001e00:	2100      	movs	r1, #0
 8001e02:	203f      	movs	r0, #63	; 0x3f
 8001e04:	f001 f91f 	bl	8003046 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 8001e08:	203f      	movs	r0, #63	; 0x3f
 8001e0a:	f001 f938 	bl	800307e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 8001e0e:	2200      	movs	r2, #0
 8001e10:	2100      	movs	r1, #0
 8001e12:	2040      	movs	r0, #64	; 0x40
 8001e14:	f001 f917 	bl	8003046 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8001e18:	2040      	movs	r0, #64	; 0x40
 8001e1a:	f001 f930 	bl	800307e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 8001e1e:	2200      	movs	r2, #0
 8001e20:	2100      	movs	r1, #0
 8001e22:	2041      	movs	r0, #65	; 0x41
 8001e24:	f001 f90f 	bl	8003046 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8001e28:	2041      	movs	r0, #65	; 0x41
 8001e2a:	f001 f928 	bl	800307e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8001e2e:	bf00      	nop
 8001e30:	3728      	adds	r7, #40	; 0x28
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	40006800 	.word	0x40006800
 8001e3c:	40023800 	.word	0x40023800
 8001e40:	40020400 	.word	0x40020400

08001e44 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b085      	sub	sp, #20
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a15      	ldr	r2, [pc, #84]	; (8001ea8 <HAL_TIM_Base_MspInit+0x64>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d10e      	bne.n	8001e74 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e56:	2300      	movs	r3, #0
 8001e58:	60fb      	str	r3, [r7, #12]
 8001e5a:	4b14      	ldr	r3, [pc, #80]	; (8001eac <HAL_TIM_Base_MspInit+0x68>)
 8001e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e5e:	4a13      	ldr	r2, [pc, #76]	; (8001eac <HAL_TIM_Base_MspInit+0x68>)
 8001e60:	f043 0301 	orr.w	r3, r3, #1
 8001e64:	6453      	str	r3, [r2, #68]	; 0x44
 8001e66:	4b11      	ldr	r3, [pc, #68]	; (8001eac <HAL_TIM_Base_MspInit+0x68>)
 8001e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e6a:	f003 0301 	and.w	r3, r3, #1
 8001e6e:	60fb      	str	r3, [r7, #12]
 8001e70:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001e72:	e012      	b.n	8001e9a <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM2)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e7c:	d10d      	bne.n	8001e9a <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e7e:	2300      	movs	r3, #0
 8001e80:	60bb      	str	r3, [r7, #8]
 8001e82:	4b0a      	ldr	r3, [pc, #40]	; (8001eac <HAL_TIM_Base_MspInit+0x68>)
 8001e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e86:	4a09      	ldr	r2, [pc, #36]	; (8001eac <HAL_TIM_Base_MspInit+0x68>)
 8001e88:	f043 0301 	orr.w	r3, r3, #1
 8001e8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e8e:	4b07      	ldr	r3, [pc, #28]	; (8001eac <HAL_TIM_Base_MspInit+0x68>)
 8001e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e92:	f003 0301 	and.w	r3, r3, #1
 8001e96:	60bb      	str	r3, [r7, #8]
 8001e98:	68bb      	ldr	r3, [r7, #8]
}
 8001e9a:	bf00      	nop
 8001e9c:	3714      	adds	r7, #20
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	40010000 	.word	0x40010000
 8001eac:	40023800 	.word	0x40023800

08001eb0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b08a      	sub	sp, #40	; 0x28
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb8:	f107 0314 	add.w	r3, r7, #20
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	601a      	str	r2, [r3, #0]
 8001ec0:	605a      	str	r2, [r3, #4]
 8001ec2:	609a      	str	r2, [r3, #8]
 8001ec4:	60da      	str	r2, [r3, #12]
 8001ec6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a25      	ldr	r2, [pc, #148]	; (8001f64 <HAL_TIM_MspPostInit+0xb4>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d11f      	bne.n	8001f12 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	613b      	str	r3, [r7, #16]
 8001ed6:	4b24      	ldr	r3, [pc, #144]	; (8001f68 <HAL_TIM_MspPostInit+0xb8>)
 8001ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eda:	4a23      	ldr	r2, [pc, #140]	; (8001f68 <HAL_TIM_MspPostInit+0xb8>)
 8001edc:	f043 0301 	orr.w	r3, r3, #1
 8001ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ee2:	4b21      	ldr	r3, [pc, #132]	; (8001f68 <HAL_TIM_MspPostInit+0xb8>)
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee6:	f003 0301 	and.w	r3, r3, #1
 8001eea:	613b      	str	r3, [r7, #16]
 8001eec:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = pwm1_Pin|pwm2_Pin|pwm3_Pin;
 8001eee:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001ef2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001efc:	2300      	movs	r3, #0
 8001efe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001f00:	2301      	movs	r3, #1
 8001f02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f04:	f107 0314 	add.w	r3, r7, #20
 8001f08:	4619      	mov	r1, r3
 8001f0a:	4818      	ldr	r0, [pc, #96]	; (8001f6c <HAL_TIM_MspPostInit+0xbc>)
 8001f0c:	f001 f8d2 	bl	80030b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001f10:	e023      	b.n	8001f5a <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM2)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f1a:	d11e      	bne.n	8001f5a <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	60fb      	str	r3, [r7, #12]
 8001f20:	4b11      	ldr	r3, [pc, #68]	; (8001f68 <HAL_TIM_MspPostInit+0xb8>)
 8001f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f24:	4a10      	ldr	r2, [pc, #64]	; (8001f68 <HAL_TIM_MspPostInit+0xb8>)
 8001f26:	f043 0302 	orr.w	r3, r3, #2
 8001f2a:	6313      	str	r3, [r2, #48]	; 0x30
 8001f2c:	4b0e      	ldr	r3, [pc, #56]	; (8001f68 <HAL_TIM_MspPostInit+0xb8>)
 8001f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f30:	f003 0302 	and.w	r3, r3, #2
 8001f34:	60fb      	str	r3, [r7, #12]
 8001f36:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = pwm6_Pin|pwm4_Pin|pwm5_Pin;
 8001f38:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001f3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f3e:	2302      	movs	r3, #2
 8001f40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f42:	2300      	movs	r3, #0
 8001f44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f46:	2300      	movs	r3, #0
 8001f48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f4e:	f107 0314 	add.w	r3, r7, #20
 8001f52:	4619      	mov	r1, r3
 8001f54:	4806      	ldr	r0, [pc, #24]	; (8001f70 <HAL_TIM_MspPostInit+0xc0>)
 8001f56:	f001 f8ad 	bl	80030b4 <HAL_GPIO_Init>
}
 8001f5a:	bf00      	nop
 8001f5c:	3728      	adds	r7, #40	; 0x28
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	40010000 	.word	0x40010000
 8001f68:	40023800 	.word	0x40023800
 8001f6c:	40020000 	.word	0x40020000
 8001f70:	40020400 	.word	0x40020400

08001f74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b08a      	sub	sp, #40	; 0x28
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f7c:	f107 0314 	add.w	r3, r7, #20
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]
 8001f84:	605a      	str	r2, [r3, #4]
 8001f86:	609a      	str	r2, [r3, #8]
 8001f88:	60da      	str	r2, [r3, #12]
 8001f8a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a19      	ldr	r2, [pc, #100]	; (8001ff8 <HAL_UART_MspInit+0x84>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d12b      	bne.n	8001fee <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f96:	2300      	movs	r3, #0
 8001f98:	613b      	str	r3, [r7, #16]
 8001f9a:	4b18      	ldr	r3, [pc, #96]	; (8001ffc <HAL_UART_MspInit+0x88>)
 8001f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9e:	4a17      	ldr	r2, [pc, #92]	; (8001ffc <HAL_UART_MspInit+0x88>)
 8001fa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fa4:	6413      	str	r3, [r2, #64]	; 0x40
 8001fa6:	4b15      	ldr	r3, [pc, #84]	; (8001ffc <HAL_UART_MspInit+0x88>)
 8001fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fae:	613b      	str	r3, [r7, #16]
 8001fb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	60fb      	str	r3, [r7, #12]
 8001fb6:	4b11      	ldr	r3, [pc, #68]	; (8001ffc <HAL_UART_MspInit+0x88>)
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fba:	4a10      	ldr	r2, [pc, #64]	; (8001ffc <HAL_UART_MspInit+0x88>)
 8001fbc:	f043 0301 	orr.w	r3, r3, #1
 8001fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fc2:	4b0e      	ldr	r3, [pc, #56]	; (8001ffc <HAL_UART_MspInit+0x88>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc6:	f003 0301 	and.w	r3, r3, #1
 8001fca:	60fb      	str	r3, [r7, #12]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001fce:	230c      	movs	r3, #12
 8001fd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001fde:	2307      	movs	r3, #7
 8001fe0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fe2:	f107 0314 	add.w	r3, r7, #20
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	4805      	ldr	r0, [pc, #20]	; (8002000 <HAL_UART_MspInit+0x8c>)
 8001fea:	f001 f863 	bl	80030b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001fee:	bf00      	nop
 8001ff0:	3728      	adds	r7, #40	; 0x28
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	40004400 	.word	0x40004400
 8001ffc:	40023800 	.word	0x40023800
 8002000:	40020000 	.word	0x40020000

08002004 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002008:	e7fe      	b.n	8002008 <NMI_Handler+0x4>

0800200a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800200a:	b480      	push	{r7}
 800200c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800200e:	e7fe      	b.n	800200e <HardFault_Handler+0x4>

08002010 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002014:	e7fe      	b.n	8002014 <MemManage_Handler+0x4>

08002016 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002016:	b480      	push	{r7}
 8002018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800201a:	e7fe      	b.n	800201a <BusFault_Handler+0x4>

0800201c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002020:	e7fe      	b.n	8002020 <UsageFault_Handler+0x4>

08002022 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002022:	b480      	push	{r7}
 8002024:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002026:	bf00      	nop
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002034:	bf00      	nop
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr

0800203e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800203e:	b480      	push	{r7}
 8002040:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002042:	bf00      	nop
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr

0800204c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002050:	f000 f952 	bl	80022f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002054:	bf00      	nop
 8002056:	bd80      	pop	{r7, pc}

08002058 <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupt.
  */
void CAN2_TX_IRQHandler(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 800205c:	4802      	ldr	r0, [pc, #8]	; (8002068 <CAN2_TX_IRQHandler+0x10>)
 800205e:	f000 fce7 	bl	8002a30 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 8002062:	bf00      	nop
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	200000b0 	.word	0x200000b0

0800206c <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupt.
  */
void CAN2_RX0_IRQHandler(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002070:	4802      	ldr	r0, [pc, #8]	; (800207c <CAN2_RX0_IRQHandler+0x10>)
 8002072:	f000 fcdd 	bl	8002a30 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8002076:	bf00      	nop
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	200000b0 	.word	0x200000b0

08002080 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002084:	4802      	ldr	r0, [pc, #8]	; (8002090 <CAN2_RX1_IRQHandler+0x10>)
 8002086:	f000 fcd3 	bl	8002a30 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 800208a:	bf00      	nop
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	200000b0 	.word	0x200000b0

08002094 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b086      	sub	sp, #24
 8002098:	af00      	add	r7, sp, #0
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	60b9      	str	r1, [r7, #8]
 800209e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020a0:	2300      	movs	r3, #0
 80020a2:	617b      	str	r3, [r7, #20]
 80020a4:	e00a      	b.n	80020bc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80020a6:	f3af 8000 	nop.w
 80020aa:	4601      	mov	r1, r0
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	1c5a      	adds	r2, r3, #1
 80020b0:	60ba      	str	r2, [r7, #8]
 80020b2:	b2ca      	uxtb	r2, r1
 80020b4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	3301      	adds	r3, #1
 80020ba:	617b      	str	r3, [r7, #20]
 80020bc:	697a      	ldr	r2, [r7, #20]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	dbf0      	blt.n	80020a6 <_read+0x12>
  }

  return len;
 80020c4:	687b      	ldr	r3, [r7, #4]
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3718      	adds	r7, #24
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}

080020ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020ce:	b580      	push	{r7, lr}
 80020d0:	b086      	sub	sp, #24
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	60f8      	str	r0, [r7, #12]
 80020d6:	60b9      	str	r1, [r7, #8]
 80020d8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020da:	2300      	movs	r3, #0
 80020dc:	617b      	str	r3, [r7, #20]
 80020de:	e009      	b.n	80020f4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	1c5a      	adds	r2, r3, #1
 80020e4:	60ba      	str	r2, [r7, #8]
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	4618      	mov	r0, r3
 80020ea:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	3301      	adds	r3, #1
 80020f2:	617b      	str	r3, [r7, #20]
 80020f4:	697a      	ldr	r2, [r7, #20]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	dbf1      	blt.n	80020e0 <_write+0x12>
  }
  return len;
 80020fc:	687b      	ldr	r3, [r7, #4]
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3718      	adds	r7, #24
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <_close>:

int _close(int file)
{
 8002106:	b480      	push	{r7}
 8002108:	b083      	sub	sp, #12
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800210e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002112:	4618      	mov	r0, r3
 8002114:	370c      	adds	r7, #12
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr

0800211e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800211e:	b480      	push	{r7}
 8002120:	b083      	sub	sp, #12
 8002122:	af00      	add	r7, sp, #0
 8002124:	6078      	str	r0, [r7, #4]
 8002126:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800212e:	605a      	str	r2, [r3, #4]
  return 0;
 8002130:	2300      	movs	r3, #0
}
 8002132:	4618      	mov	r0, r3
 8002134:	370c      	adds	r7, #12
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr

0800213e <_isatty>:

int _isatty(int file)
{
 800213e:	b480      	push	{r7}
 8002140:	b083      	sub	sp, #12
 8002142:	af00      	add	r7, sp, #0
 8002144:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002146:	2301      	movs	r3, #1
}
 8002148:	4618      	mov	r0, r3
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002154:	b480      	push	{r7}
 8002156:	b085      	sub	sp, #20
 8002158:	af00      	add	r7, sp, #0
 800215a:	60f8      	str	r0, [r7, #12]
 800215c:	60b9      	str	r1, [r7, #8]
 800215e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002160:	2300      	movs	r3, #0
}
 8002162:	4618      	mov	r0, r3
 8002164:	3714      	adds	r7, #20
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
	...

08002170 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b086      	sub	sp, #24
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002178:	4a14      	ldr	r2, [pc, #80]	; (80021cc <_sbrk+0x5c>)
 800217a:	4b15      	ldr	r3, [pc, #84]	; (80021d0 <_sbrk+0x60>)
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002184:	4b13      	ldr	r3, [pc, #76]	; (80021d4 <_sbrk+0x64>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d102      	bne.n	8002192 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800218c:	4b11      	ldr	r3, [pc, #68]	; (80021d4 <_sbrk+0x64>)
 800218e:	4a12      	ldr	r2, [pc, #72]	; (80021d8 <_sbrk+0x68>)
 8002190:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002192:	4b10      	ldr	r3, [pc, #64]	; (80021d4 <_sbrk+0x64>)
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4413      	add	r3, r2
 800219a:	693a      	ldr	r2, [r7, #16]
 800219c:	429a      	cmp	r2, r3
 800219e:	d207      	bcs.n	80021b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021a0:	f003 f908 	bl	80053b4 <__errno>
 80021a4:	4603      	mov	r3, r0
 80021a6:	220c      	movs	r2, #12
 80021a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80021ae:	e009      	b.n	80021c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021b0:	4b08      	ldr	r3, [pc, #32]	; (80021d4 <_sbrk+0x64>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021b6:	4b07      	ldr	r3, [pc, #28]	; (80021d4 <_sbrk+0x64>)
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4413      	add	r3, r2
 80021be:	4a05      	ldr	r2, [pc, #20]	; (80021d4 <_sbrk+0x64>)
 80021c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021c2:	68fb      	ldr	r3, [r7, #12]
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3718      	adds	r7, #24
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	20020000 	.word	0x20020000
 80021d0:	00000400 	.word	0x00000400
 80021d4:	200001e0 	.word	0x200001e0
 80021d8:	200001f8 	.word	0x200001f8

080021dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021e0:	4b06      	ldr	r3, [pc, #24]	; (80021fc <SystemInit+0x20>)
 80021e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021e6:	4a05      	ldr	r2, [pc, #20]	; (80021fc <SystemInit+0x20>)
 80021e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021f0:	bf00      	nop
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	e000ed00 	.word	0xe000ed00

08002200 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002200:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002238 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002204:	480d      	ldr	r0, [pc, #52]	; (800223c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002206:	490e      	ldr	r1, [pc, #56]	; (8002240 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002208:	4a0e      	ldr	r2, [pc, #56]	; (8002244 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800220a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800220c:	e002      	b.n	8002214 <LoopCopyDataInit>

0800220e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800220e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002210:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002212:	3304      	adds	r3, #4

08002214 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002214:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002216:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002218:	d3f9      	bcc.n	800220e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800221a:	4a0b      	ldr	r2, [pc, #44]	; (8002248 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800221c:	4c0b      	ldr	r4, [pc, #44]	; (800224c <LoopFillZerobss+0x26>)
  movs r3, #0
 800221e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002220:	e001      	b.n	8002226 <LoopFillZerobss>

08002222 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002222:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002224:	3204      	adds	r2, #4

08002226 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002226:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002228:	d3fb      	bcc.n	8002222 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800222a:	f7ff ffd7 	bl	80021dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800222e:	f003 f8c7 	bl	80053c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002232:	f7fe fb85 	bl	8000940 <main>
  bx  lr    
 8002236:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002238:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800223c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002240:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8002244:	0800608c 	.word	0x0800608c
  ldr r2, =_sbss
 8002248:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 800224c:	200001f8 	.word	0x200001f8

08002250 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002250:	e7fe      	b.n	8002250 <ADC_IRQHandler>
	...

08002254 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002258:	4b0e      	ldr	r3, [pc, #56]	; (8002294 <HAL_Init+0x40>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a0d      	ldr	r2, [pc, #52]	; (8002294 <HAL_Init+0x40>)
 800225e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002262:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002264:	4b0b      	ldr	r3, [pc, #44]	; (8002294 <HAL_Init+0x40>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a0a      	ldr	r2, [pc, #40]	; (8002294 <HAL_Init+0x40>)
 800226a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800226e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002270:	4b08      	ldr	r3, [pc, #32]	; (8002294 <HAL_Init+0x40>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a07      	ldr	r2, [pc, #28]	; (8002294 <HAL_Init+0x40>)
 8002276:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800227a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800227c:	2003      	movs	r0, #3
 800227e:	f000 fed7 	bl	8003030 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002282:	2000      	movs	r0, #0
 8002284:	f000 f808 	bl	8002298 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002288:	f7ff fd46 	bl	8001d18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800228c:	2300      	movs	r3, #0
}
 800228e:	4618      	mov	r0, r3
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	40023c00 	.word	0x40023c00

08002298 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022a0:	4b12      	ldr	r3, [pc, #72]	; (80022ec <HAL_InitTick+0x54>)
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	4b12      	ldr	r3, [pc, #72]	; (80022f0 <HAL_InitTick+0x58>)
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	4619      	mov	r1, r3
 80022aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80022b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80022b6:	4618      	mov	r0, r3
 80022b8:	f000 feef 	bl	800309a <HAL_SYSTICK_Config>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e00e      	b.n	80022e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2b0f      	cmp	r3, #15
 80022ca:	d80a      	bhi.n	80022e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022cc:	2200      	movs	r2, #0
 80022ce:	6879      	ldr	r1, [r7, #4]
 80022d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80022d4:	f000 feb7 	bl	8003046 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022d8:	4a06      	ldr	r2, [pc, #24]	; (80022f4 <HAL_InitTick+0x5c>)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022de:	2300      	movs	r3, #0
 80022e0:	e000      	b.n	80022e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3708      	adds	r7, #8
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	20000024 	.word	0x20000024
 80022f0:	2000002c 	.word	0x2000002c
 80022f4:	20000028 	.word	0x20000028

080022f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022fc:	4b06      	ldr	r3, [pc, #24]	; (8002318 <HAL_IncTick+0x20>)
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	461a      	mov	r2, r3
 8002302:	4b06      	ldr	r3, [pc, #24]	; (800231c <HAL_IncTick+0x24>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4413      	add	r3, r2
 8002308:	4a04      	ldr	r2, [pc, #16]	; (800231c <HAL_IncTick+0x24>)
 800230a:	6013      	str	r3, [r2, #0]
}
 800230c:	bf00      	nop
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	2000002c 	.word	0x2000002c
 800231c:	200001e4 	.word	0x200001e4

08002320 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  return uwTick;
 8002324:	4b03      	ldr	r3, [pc, #12]	; (8002334 <HAL_GetTick+0x14>)
 8002326:	681b      	ldr	r3, [r3, #0]
}
 8002328:	4618      	mov	r0, r3
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop
 8002334:	200001e4 	.word	0x200001e4

08002338 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002340:	f7ff ffee 	bl	8002320 <HAL_GetTick>
 8002344:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002350:	d005      	beq.n	800235e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002352:	4b0a      	ldr	r3, [pc, #40]	; (800237c <HAL_Delay+0x44>)
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	461a      	mov	r2, r3
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	4413      	add	r3, r2
 800235c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800235e:	bf00      	nop
 8002360:	f7ff ffde 	bl	8002320 <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	68fa      	ldr	r2, [r7, #12]
 800236c:	429a      	cmp	r2, r3
 800236e:	d8f7      	bhi.n	8002360 <HAL_Delay+0x28>
  {
  }
}
 8002370:	bf00      	nop
 8002372:	bf00      	nop
 8002374:	3710      	adds	r7, #16
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	2000002c 	.word	0x2000002c

08002380 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d101      	bne.n	8002392 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e0ed      	b.n	800256e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002398:	b2db      	uxtb	r3, r3
 800239a:	2b00      	cmp	r3, #0
 800239c:	d102      	bne.n	80023a4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f7ff fce2 	bl	8001d68 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f042 0201 	orr.w	r2, r2, #1
 80023b2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023b4:	f7ff ffb4 	bl	8002320 <HAL_GetTick>
 80023b8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80023ba:	e012      	b.n	80023e2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80023bc:	f7ff ffb0 	bl	8002320 <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	2b0a      	cmp	r3, #10
 80023c8:	d90b      	bls.n	80023e2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ce:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2205      	movs	r2, #5
 80023da:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e0c5      	b.n	800256e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f003 0301 	and.w	r3, r3, #1
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d0e5      	beq.n	80023bc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f022 0202 	bic.w	r2, r2, #2
 80023fe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002400:	f7ff ff8e 	bl	8002320 <HAL_GetTick>
 8002404:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002406:	e012      	b.n	800242e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002408:	f7ff ff8a 	bl	8002320 <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	2b0a      	cmp	r3, #10
 8002414:	d90b      	bls.n	800242e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2205      	movs	r2, #5
 8002426:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e09f      	b.n	800256e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f003 0302 	and.w	r3, r3, #2
 8002438:	2b00      	cmp	r3, #0
 800243a:	d1e5      	bne.n	8002408 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	7e1b      	ldrb	r3, [r3, #24]
 8002440:	2b01      	cmp	r3, #1
 8002442:	d108      	bne.n	8002456 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002452:	601a      	str	r2, [r3, #0]
 8002454:	e007      	b.n	8002466 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002464:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	7e5b      	ldrb	r3, [r3, #25]
 800246a:	2b01      	cmp	r3, #1
 800246c:	d108      	bne.n	8002480 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800247c:	601a      	str	r2, [r3, #0]
 800247e:	e007      	b.n	8002490 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800248e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	7e9b      	ldrb	r3, [r3, #26]
 8002494:	2b01      	cmp	r3, #1
 8002496:	d108      	bne.n	80024aa <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f042 0220 	orr.w	r2, r2, #32
 80024a6:	601a      	str	r2, [r3, #0]
 80024a8:	e007      	b.n	80024ba <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f022 0220 	bic.w	r2, r2, #32
 80024b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	7edb      	ldrb	r3, [r3, #27]
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d108      	bne.n	80024d4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f022 0210 	bic.w	r2, r2, #16
 80024d0:	601a      	str	r2, [r3, #0]
 80024d2:	e007      	b.n	80024e4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f042 0210 	orr.w	r2, r2, #16
 80024e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	7f1b      	ldrb	r3, [r3, #28]
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d108      	bne.n	80024fe <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f042 0208 	orr.w	r2, r2, #8
 80024fa:	601a      	str	r2, [r3, #0]
 80024fc:	e007      	b.n	800250e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f022 0208 	bic.w	r2, r2, #8
 800250c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	7f5b      	ldrb	r3, [r3, #29]
 8002512:	2b01      	cmp	r3, #1
 8002514:	d108      	bne.n	8002528 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f042 0204 	orr.w	r2, r2, #4
 8002524:	601a      	str	r2, [r3, #0]
 8002526:	e007      	b.n	8002538 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f022 0204 	bic.w	r2, r2, #4
 8002536:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	689a      	ldr	r2, [r3, #8]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	431a      	orrs	r2, r3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	691b      	ldr	r3, [r3, #16]
 8002546:	431a      	orrs	r2, r3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	695b      	ldr	r3, [r3, #20]
 800254c:	ea42 0103 	orr.w	r1, r2, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	1e5a      	subs	r2, r3, #1
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	430a      	orrs	r2, r1
 800255c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2200      	movs	r2, #0
 8002562:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2201      	movs	r2, #1
 8002568:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	3710      	adds	r7, #16
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
	...

08002578 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002578:	b480      	push	{r7}
 800257a:	b087      	sub	sp, #28
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800258e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002590:	7cfb      	ldrb	r3, [r7, #19]
 8002592:	2b01      	cmp	r3, #1
 8002594:	d003      	beq.n	800259e <HAL_CAN_ConfigFilter+0x26>
 8002596:	7cfb      	ldrb	r3, [r7, #19]
 8002598:	2b02      	cmp	r3, #2
 800259a:	f040 80be 	bne.w	800271a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800259e:	4b65      	ldr	r3, [pc, #404]	; (8002734 <HAL_CAN_ConfigFilter+0x1bc>)
 80025a0:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80025a8:	f043 0201 	orr.w	r2, r3, #1
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80025b8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025cc:	021b      	lsls	r3, r3, #8
 80025ce:	431a      	orrs	r2, r3
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	695b      	ldr	r3, [r3, #20]
 80025da:	f003 031f 	and.w	r3, r3, #31
 80025de:	2201      	movs	r2, #1
 80025e0:	fa02 f303 	lsl.w	r3, r2, r3
 80025e4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	43db      	mvns	r3, r3
 80025f0:	401a      	ands	r2, r3
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	69db      	ldr	r3, [r3, #28]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d123      	bne.n	8002648 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	43db      	mvns	r3, r3
 800260a:	401a      	ands	r2, r3
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800261e:	683a      	ldr	r2, [r7, #0]
 8002620:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002622:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	3248      	adds	r2, #72	; 0x48
 8002628:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800263c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800263e:	6979      	ldr	r1, [r7, #20]
 8002640:	3348      	adds	r3, #72	; 0x48
 8002642:	00db      	lsls	r3, r3, #3
 8002644:	440b      	add	r3, r1
 8002646:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	69db      	ldr	r3, [r3, #28]
 800264c:	2b01      	cmp	r3, #1
 800264e:	d122      	bne.n	8002696 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	431a      	orrs	r2, r3
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800266c:	683a      	ldr	r2, [r7, #0]
 800266e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002670:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	3248      	adds	r2, #72	; 0x48
 8002676:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800268a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800268c:	6979      	ldr	r1, [r7, #20]
 800268e:	3348      	adds	r3, #72	; 0x48
 8002690:	00db      	lsls	r3, r3, #3
 8002692:	440b      	add	r3, r1
 8002694:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	699b      	ldr	r3, [r3, #24]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d109      	bne.n	80026b2 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	43db      	mvns	r3, r3
 80026a8:	401a      	ands	r2, r3
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80026b0:	e007      	b.n	80026c2 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	431a      	orrs	r2, r3
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	691b      	ldr	r3, [r3, #16]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d109      	bne.n	80026de <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	43db      	mvns	r3, r3
 80026d4:	401a      	ands	r2, r3
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80026dc:	e007      	b.n	80026ee <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	431a      	orrs	r2, r3
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	6a1b      	ldr	r3, [r3, #32]
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d107      	bne.n	8002706 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	431a      	orrs	r2, r3
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800270c:	f023 0201 	bic.w	r2, r3, #1
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002716:	2300      	movs	r3, #0
 8002718:	e006      	b.n	8002728 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
  }
}
 8002728:	4618      	mov	r0, r3
 800272a:	371c      	adds	r7, #28
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr
 8002734:	40006400 	.word	0x40006400

08002738 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002746:	b2db      	uxtb	r3, r3
 8002748:	2b01      	cmp	r3, #1
 800274a:	d12e      	bne.n	80027aa <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2202      	movs	r2, #2
 8002750:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f022 0201 	bic.w	r2, r2, #1
 8002762:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002764:	f7ff fddc 	bl	8002320 <HAL_GetTick>
 8002768:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800276a:	e012      	b.n	8002792 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800276c:	f7ff fdd8 	bl	8002320 <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	2b0a      	cmp	r3, #10
 8002778:	d90b      	bls.n	8002792 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2205      	movs	r2, #5
 800278a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e012      	b.n	80027b8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f003 0301 	and.w	r3, r3, #1
 800279c:	2b00      	cmp	r3, #0
 800279e:	d1e5      	bne.n	800276c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80027a6:	2300      	movs	r3, #0
 80027a8:	e006      	b.n	80027b8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ae:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
  }
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3710      	adds	r7, #16
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}

080027c0 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80027c0:	b480      	push	{r7}
 80027c2:	b087      	sub	sp, #28
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	60f8      	str	r0, [r7, #12]
 80027c8:	60b9      	str	r1, [r7, #8]
 80027ca:	607a      	str	r2, [r7, #4]
 80027cc:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027d4:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80027d6:	7dfb      	ldrb	r3, [r7, #23]
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d003      	beq.n	80027e4 <HAL_CAN_GetRxMessage+0x24>
 80027dc:	7dfb      	ldrb	r3, [r7, #23]
 80027de:	2b02      	cmp	r3, #2
 80027e0:	f040 80f3 	bne.w	80029ca <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d10e      	bne.n	8002808 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	f003 0303 	and.w	r3, r3, #3
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d116      	bne.n	8002826 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e0e7      	b.n	80029d8 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	691b      	ldr	r3, [r3, #16]
 800280e:	f003 0303 	and.w	r3, r3, #3
 8002812:	2b00      	cmp	r3, #0
 8002814:	d107      	bne.n	8002826 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e0d8      	b.n	80029d8 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	331b      	adds	r3, #27
 800282e:	011b      	lsls	r3, r3, #4
 8002830:	4413      	add	r3, r2
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0204 	and.w	r2, r3, #4
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d10c      	bne.n	800285e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	331b      	adds	r3, #27
 800284c:	011b      	lsls	r3, r3, #4
 800284e:	4413      	add	r3, r2
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	0d5b      	lsrs	r3, r3, #21
 8002854:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	601a      	str	r2, [r3, #0]
 800285c:	e00b      	b.n	8002876 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	331b      	adds	r3, #27
 8002866:	011b      	lsls	r3, r3, #4
 8002868:	4413      	add	r3, r2
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	08db      	lsrs	r3, r3, #3
 800286e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	331b      	adds	r3, #27
 800287e:	011b      	lsls	r3, r3, #4
 8002880:	4413      	add	r3, r2
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 0202 	and.w	r2, r3, #2
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	331b      	adds	r3, #27
 8002894:	011b      	lsls	r3, r3, #4
 8002896:	4413      	add	r3, r2
 8002898:	3304      	adds	r3, #4
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 020f 	and.w	r2, r3, #15
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	331b      	adds	r3, #27
 80028ac:	011b      	lsls	r3, r3, #4
 80028ae:	4413      	add	r3, r2
 80028b0:	3304      	adds	r3, #4
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	0a1b      	lsrs	r3, r3, #8
 80028b6:	b2da      	uxtb	r2, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	331b      	adds	r3, #27
 80028c4:	011b      	lsls	r3, r3, #4
 80028c6:	4413      	add	r3, r2
 80028c8:	3304      	adds	r3, #4
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	0c1b      	lsrs	r3, r3, #16
 80028ce:	b29a      	uxth	r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	011b      	lsls	r3, r3, #4
 80028dc:	4413      	add	r3, r2
 80028de:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	b2da      	uxtb	r2, r3
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	011b      	lsls	r3, r3, #4
 80028f2:	4413      	add	r3, r2
 80028f4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	0a1a      	lsrs	r2, r3, #8
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	3301      	adds	r3, #1
 8002900:	b2d2      	uxtb	r2, r2
 8002902:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	011b      	lsls	r3, r3, #4
 800290c:	4413      	add	r3, r2
 800290e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	0c1a      	lsrs	r2, r3, #16
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	3302      	adds	r3, #2
 800291a:	b2d2      	uxtb	r2, r2
 800291c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	011b      	lsls	r3, r3, #4
 8002926:	4413      	add	r3, r2
 8002928:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	0e1a      	lsrs	r2, r3, #24
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	3303      	adds	r3, #3
 8002934:	b2d2      	uxtb	r2, r2
 8002936:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	011b      	lsls	r3, r3, #4
 8002940:	4413      	add	r3, r2
 8002942:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	3304      	adds	r3, #4
 800294c:	b2d2      	uxtb	r2, r2
 800294e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	011b      	lsls	r3, r3, #4
 8002958:	4413      	add	r3, r2
 800295a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	0a1a      	lsrs	r2, r3, #8
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	3305      	adds	r3, #5
 8002966:	b2d2      	uxtb	r2, r2
 8002968:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	011b      	lsls	r3, r3, #4
 8002972:	4413      	add	r3, r2
 8002974:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	0c1a      	lsrs	r2, r3, #16
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	3306      	adds	r3, #6
 8002980:	b2d2      	uxtb	r2, r2
 8002982:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	011b      	lsls	r3, r3, #4
 800298c:	4413      	add	r3, r2
 800298e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	0e1a      	lsrs	r2, r3, #24
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	3307      	adds	r3, #7
 800299a:	b2d2      	uxtb	r2, r2
 800299c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d108      	bne.n	80029b6 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	68da      	ldr	r2, [r3, #12]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f042 0220 	orr.w	r2, r2, #32
 80029b2:	60da      	str	r2, [r3, #12]
 80029b4:	e007      	b.n	80029c6 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	691a      	ldr	r2, [r3, #16]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f042 0220 	orr.w	r2, r2, #32
 80029c4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80029c6:	2300      	movs	r3, #0
 80029c8:	e006      	b.n	80029d8 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ce:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
  }
}
 80029d8:	4618      	mov	r0, r3
 80029da:	371c      	adds	r7, #28
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr

080029e4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b085      	sub	sp, #20
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029f4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80029f6:	7bfb      	ldrb	r3, [r7, #15]
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d002      	beq.n	8002a02 <HAL_CAN_ActivateNotification+0x1e>
 80029fc:	7bfb      	ldrb	r3, [r7, #15]
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d109      	bne.n	8002a16 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	6959      	ldr	r1, [r3, #20]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	683a      	ldr	r2, [r7, #0]
 8002a0e:	430a      	orrs	r2, r1
 8002a10:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002a12:	2300      	movs	r3, #0
 8002a14:	e006      	b.n	8002a24 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
  }
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3714      	adds	r7, #20
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr

08002a30 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b08a      	sub	sp, #40	; 0x28
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	695b      	ldr	r3, [r3, #20]
 8002a42:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	691b      	ldr	r3, [r3, #16]
 8002a62:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	699b      	ldr	r3, [r3, #24]
 8002a6a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002a6c:	6a3b      	ldr	r3, [r7, #32]
 8002a6e:	f003 0301 	and.w	r3, r3, #1
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d07c      	beq.n	8002b70 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002a76:	69bb      	ldr	r3, [r7, #24]
 8002a78:	f003 0301 	and.w	r3, r3, #1
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d023      	beq.n	8002ac8 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2201      	movs	r2, #1
 8002a86:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	f003 0302 	and.w	r3, r3, #2
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d003      	beq.n	8002a9a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f000 f983 	bl	8002d9e <HAL_CAN_TxMailbox0CompleteCallback>
 8002a98:	e016      	b.n	8002ac8 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	f003 0304 	and.w	r3, r3, #4
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d004      	beq.n	8002aae <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002aaa:	627b      	str	r3, [r7, #36]	; 0x24
 8002aac:	e00c      	b.n	8002ac8 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002aae:	69bb      	ldr	r3, [r7, #24]
 8002ab0:	f003 0308 	and.w	r3, r3, #8
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d004      	beq.n	8002ac2 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002abe:	627b      	str	r3, [r7, #36]	; 0x24
 8002ac0:	e002      	b.n	8002ac8 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f000 f989 	bl	8002dda <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d024      	beq.n	8002b1c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ada:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d003      	beq.n	8002aee <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f000 f963 	bl	8002db2 <HAL_CAN_TxMailbox1CompleteCallback>
 8002aec:	e016      	b.n	8002b1c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002aee:	69bb      	ldr	r3, [r7, #24]
 8002af0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d004      	beq.n	8002b02 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002afe:	627b      	str	r3, [r7, #36]	; 0x24
 8002b00:	e00c      	b.n	8002b1c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d004      	beq.n	8002b16 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b12:	627b      	str	r3, [r7, #36]	; 0x24
 8002b14:	e002      	b.n	8002b1c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f000 f969 	bl	8002dee <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002b1c:	69bb      	ldr	r3, [r7, #24]
 8002b1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d024      	beq.n	8002b70 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002b2e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002b30:	69bb      	ldr	r3, [r7, #24]
 8002b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d003      	beq.n	8002b42 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f000 f943 	bl	8002dc6 <HAL_CAN_TxMailbox2CompleteCallback>
 8002b40:	e016      	b.n	8002b70 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002b42:	69bb      	ldr	r3, [r7, #24]
 8002b44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d004      	beq.n	8002b56 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b52:	627b      	str	r3, [r7, #36]	; 0x24
 8002b54:	e00c      	b.n	8002b70 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002b56:	69bb      	ldr	r3, [r7, #24]
 8002b58:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d004      	beq.n	8002b6a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b66:	627b      	str	r3, [r7, #36]	; 0x24
 8002b68:	e002      	b.n	8002b70 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 f949 	bl	8002e02 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002b70:	6a3b      	ldr	r3, [r7, #32]
 8002b72:	f003 0308 	and.w	r3, r3, #8
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d00c      	beq.n	8002b94 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	f003 0310 	and.w	r3, r3, #16
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d007      	beq.n	8002b94 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b8a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2210      	movs	r2, #16
 8002b92:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002b94:	6a3b      	ldr	r3, [r7, #32]
 8002b96:	f003 0304 	and.w	r3, r3, #4
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d00b      	beq.n	8002bb6 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	f003 0308 	and.w	r3, r3, #8
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d006      	beq.n	8002bb6 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2208      	movs	r2, #8
 8002bae:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f000 f930 	bl	8002e16 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002bb6:	6a3b      	ldr	r3, [r7, #32]
 8002bb8:	f003 0302 	and.w	r3, r3, #2
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d009      	beq.n	8002bd4 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	f003 0303 	and.w	r3, r3, #3
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d002      	beq.n	8002bd4 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f7fe faca 	bl	8001168 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002bd4:	6a3b      	ldr	r3, [r7, #32]
 8002bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d00c      	beq.n	8002bf8 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	f003 0310 	and.w	r3, r3, #16
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d007      	beq.n	8002bf8 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002bee:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2210      	movs	r2, #16
 8002bf6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002bf8:	6a3b      	ldr	r3, [r7, #32]
 8002bfa:	f003 0320 	and.w	r3, r3, #32
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d00b      	beq.n	8002c1a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	f003 0308 	and.w	r3, r3, #8
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d006      	beq.n	8002c1a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	2208      	movs	r2, #8
 8002c12:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f000 f912 	bl	8002e3e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002c1a:	6a3b      	ldr	r3, [r7, #32]
 8002c1c:	f003 0310 	and.w	r3, r3, #16
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d009      	beq.n	8002c38 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	691b      	ldr	r3, [r3, #16]
 8002c2a:	f003 0303 	and.w	r3, r3, #3
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d002      	beq.n	8002c38 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f000 f8f9 	bl	8002e2a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002c38:	6a3b      	ldr	r3, [r7, #32]
 8002c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d00b      	beq.n	8002c5a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	f003 0310 	and.w	r3, r3, #16
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d006      	beq.n	8002c5a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2210      	movs	r2, #16
 8002c52:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f000 f8fc 	bl	8002e52 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002c5a:	6a3b      	ldr	r3, [r7, #32]
 8002c5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d00b      	beq.n	8002c7c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	f003 0308 	and.w	r3, r3, #8
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d006      	beq.n	8002c7c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	2208      	movs	r2, #8
 8002c74:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f000 f8f5 	bl	8002e66 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002c7c:	6a3b      	ldr	r3, [r7, #32]
 8002c7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d07b      	beq.n	8002d7e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	f003 0304 	and.w	r3, r3, #4
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d072      	beq.n	8002d76 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002c90:	6a3b      	ldr	r3, [r7, #32]
 8002c92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d008      	beq.n	8002cac <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d003      	beq.n	8002cac <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca6:	f043 0301 	orr.w	r3, r3, #1
 8002caa:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002cac:	6a3b      	ldr	r3, [r7, #32]
 8002cae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d008      	beq.n	8002cc8 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d003      	beq.n	8002cc8 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc2:	f043 0302 	orr.w	r3, r3, #2
 8002cc6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002cc8:	6a3b      	ldr	r3, [r7, #32]
 8002cca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d008      	beq.n	8002ce4 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d003      	beq.n	8002ce4 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cde:	f043 0304 	orr.w	r3, r3, #4
 8002ce2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002ce4:	6a3b      	ldr	r3, [r7, #32]
 8002ce6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d043      	beq.n	8002d76 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d03e      	beq.n	8002d76 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002cfe:	2b60      	cmp	r3, #96	; 0x60
 8002d00:	d02b      	beq.n	8002d5a <HAL_CAN_IRQHandler+0x32a>
 8002d02:	2b60      	cmp	r3, #96	; 0x60
 8002d04:	d82e      	bhi.n	8002d64 <HAL_CAN_IRQHandler+0x334>
 8002d06:	2b50      	cmp	r3, #80	; 0x50
 8002d08:	d022      	beq.n	8002d50 <HAL_CAN_IRQHandler+0x320>
 8002d0a:	2b50      	cmp	r3, #80	; 0x50
 8002d0c:	d82a      	bhi.n	8002d64 <HAL_CAN_IRQHandler+0x334>
 8002d0e:	2b40      	cmp	r3, #64	; 0x40
 8002d10:	d019      	beq.n	8002d46 <HAL_CAN_IRQHandler+0x316>
 8002d12:	2b40      	cmp	r3, #64	; 0x40
 8002d14:	d826      	bhi.n	8002d64 <HAL_CAN_IRQHandler+0x334>
 8002d16:	2b30      	cmp	r3, #48	; 0x30
 8002d18:	d010      	beq.n	8002d3c <HAL_CAN_IRQHandler+0x30c>
 8002d1a:	2b30      	cmp	r3, #48	; 0x30
 8002d1c:	d822      	bhi.n	8002d64 <HAL_CAN_IRQHandler+0x334>
 8002d1e:	2b10      	cmp	r3, #16
 8002d20:	d002      	beq.n	8002d28 <HAL_CAN_IRQHandler+0x2f8>
 8002d22:	2b20      	cmp	r3, #32
 8002d24:	d005      	beq.n	8002d32 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002d26:	e01d      	b.n	8002d64 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2a:	f043 0308 	orr.w	r3, r3, #8
 8002d2e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002d30:	e019      	b.n	8002d66 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d34:	f043 0310 	orr.w	r3, r3, #16
 8002d38:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002d3a:	e014      	b.n	8002d66 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3e:	f043 0320 	orr.w	r3, r3, #32
 8002d42:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002d44:	e00f      	b.n	8002d66 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d4c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002d4e:	e00a      	b.n	8002d66 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d56:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002d58:	e005      	b.n	8002d66 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d60:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002d62:	e000      	b.n	8002d66 <HAL_CAN_IRQHandler+0x336>
            break;
 8002d64:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	699a      	ldr	r2, [r3, #24]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002d74:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	2204      	movs	r2, #4
 8002d7c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d008      	beq.n	8002d96 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8a:	431a      	orrs	r2, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f000 f872 	bl	8002e7a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002d96:	bf00      	nop
 8002d98:	3728      	adds	r7, #40	; 0x28
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002d9e:	b480      	push	{r7}
 8002da0:	b083      	sub	sp, #12
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002da6:	bf00      	nop
 8002da8:	370c      	adds	r7, #12
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr

08002db2 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002db2:	b480      	push	{r7}
 8002db4:	b083      	sub	sp, #12
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002dba:	bf00      	nop
 8002dbc:	370c      	adds	r7, #12
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr

08002dc6 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002dc6:	b480      	push	{r7}
 8002dc8:	b083      	sub	sp, #12
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002dce:	bf00      	nop
 8002dd0:	370c      	adds	r7, #12
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr

08002dda <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002dda:	b480      	push	{r7}
 8002ddc:	b083      	sub	sp, #12
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002de2:	bf00      	nop
 8002de4:	370c      	adds	r7, #12
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr

08002dee <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002dee:	b480      	push	{r7}
 8002df0:	b083      	sub	sp, #12
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002df6:	bf00      	nop
 8002df8:	370c      	adds	r7, #12
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr

08002e02 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002e02:	b480      	push	{r7}
 8002e04:	b083      	sub	sp, #12
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002e0a:	bf00      	nop
 8002e0c:	370c      	adds	r7, #12
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr

08002e16 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002e16:	b480      	push	{r7}
 8002e18:	b083      	sub	sp, #12
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002e1e:	bf00      	nop
 8002e20:	370c      	adds	r7, #12
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr

08002e2a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002e2a:	b480      	push	{r7}
 8002e2c:	b083      	sub	sp, #12
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002e32:	bf00      	nop
 8002e34:	370c      	adds	r7, #12
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr

08002e3e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002e3e:	b480      	push	{r7}
 8002e40:	b083      	sub	sp, #12
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002e46:	bf00      	nop
 8002e48:	370c      	adds	r7, #12
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr

08002e52 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002e52:	b480      	push	{r7}
 8002e54:	b083      	sub	sp, #12
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002e5a:	bf00      	nop
 8002e5c:	370c      	adds	r7, #12
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr

08002e66 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002e66:	b480      	push	{r7}
 8002e68:	b083      	sub	sp, #12
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002e6e:	bf00      	nop
 8002e70:	370c      	adds	r7, #12
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr

08002e7a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002e7a:	b480      	push	{r7}
 8002e7c:	b083      	sub	sp, #12
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002e82:	bf00      	nop
 8002e84:	370c      	adds	r7, #12
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
	...

08002e90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b085      	sub	sp, #20
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f003 0307 	and.w	r3, r3, #7
 8002e9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ea0:	4b0c      	ldr	r3, [pc, #48]	; (8002ed4 <__NVIC_SetPriorityGrouping+0x44>)
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ea6:	68ba      	ldr	r2, [r7, #8]
 8002ea8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002eac:	4013      	ands	r3, r2
 8002eae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002eb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ebc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ec0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ec2:	4a04      	ldr	r2, [pc, #16]	; (8002ed4 <__NVIC_SetPriorityGrouping+0x44>)
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	60d3      	str	r3, [r2, #12]
}
 8002ec8:	bf00      	nop
 8002eca:	3714      	adds	r7, #20
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr
 8002ed4:	e000ed00 	.word	0xe000ed00

08002ed8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002edc:	4b04      	ldr	r3, [pc, #16]	; (8002ef0 <__NVIC_GetPriorityGrouping+0x18>)
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	0a1b      	lsrs	r3, r3, #8
 8002ee2:	f003 0307 	and.w	r3, r3, #7
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr
 8002ef0:	e000ed00 	.word	0xe000ed00

08002ef4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	4603      	mov	r3, r0
 8002efc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	db0b      	blt.n	8002f1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f06:	79fb      	ldrb	r3, [r7, #7]
 8002f08:	f003 021f 	and.w	r2, r3, #31
 8002f0c:	4907      	ldr	r1, [pc, #28]	; (8002f2c <__NVIC_EnableIRQ+0x38>)
 8002f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f12:	095b      	lsrs	r3, r3, #5
 8002f14:	2001      	movs	r0, #1
 8002f16:	fa00 f202 	lsl.w	r2, r0, r2
 8002f1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f1e:	bf00      	nop
 8002f20:	370c      	adds	r7, #12
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr
 8002f2a:	bf00      	nop
 8002f2c:	e000e100 	.word	0xe000e100

08002f30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b083      	sub	sp, #12
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	4603      	mov	r3, r0
 8002f38:	6039      	str	r1, [r7, #0]
 8002f3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	db0a      	blt.n	8002f5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	b2da      	uxtb	r2, r3
 8002f48:	490c      	ldr	r1, [pc, #48]	; (8002f7c <__NVIC_SetPriority+0x4c>)
 8002f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f4e:	0112      	lsls	r2, r2, #4
 8002f50:	b2d2      	uxtb	r2, r2
 8002f52:	440b      	add	r3, r1
 8002f54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f58:	e00a      	b.n	8002f70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	b2da      	uxtb	r2, r3
 8002f5e:	4908      	ldr	r1, [pc, #32]	; (8002f80 <__NVIC_SetPriority+0x50>)
 8002f60:	79fb      	ldrb	r3, [r7, #7]
 8002f62:	f003 030f 	and.w	r3, r3, #15
 8002f66:	3b04      	subs	r3, #4
 8002f68:	0112      	lsls	r2, r2, #4
 8002f6a:	b2d2      	uxtb	r2, r2
 8002f6c:	440b      	add	r3, r1
 8002f6e:	761a      	strb	r2, [r3, #24]
}
 8002f70:	bf00      	nop
 8002f72:	370c      	adds	r7, #12
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr
 8002f7c:	e000e100 	.word	0xe000e100
 8002f80:	e000ed00 	.word	0xe000ed00

08002f84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b089      	sub	sp, #36	; 0x24
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	60b9      	str	r1, [r7, #8]
 8002f8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f003 0307 	and.w	r3, r3, #7
 8002f96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	f1c3 0307 	rsb	r3, r3, #7
 8002f9e:	2b04      	cmp	r3, #4
 8002fa0:	bf28      	it	cs
 8002fa2:	2304      	movcs	r3, #4
 8002fa4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	3304      	adds	r3, #4
 8002faa:	2b06      	cmp	r3, #6
 8002fac:	d902      	bls.n	8002fb4 <NVIC_EncodePriority+0x30>
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	3b03      	subs	r3, #3
 8002fb2:	e000      	b.n	8002fb6 <NVIC_EncodePriority+0x32>
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fb8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc2:	43da      	mvns	r2, r3
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	401a      	ands	r2, r3
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fcc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8002fd6:	43d9      	mvns	r1, r3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fdc:	4313      	orrs	r3, r2
         );
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3724      	adds	r7, #36	; 0x24
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr
	...

08002fec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b082      	sub	sp, #8
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	3b01      	subs	r3, #1
 8002ff8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ffc:	d301      	bcc.n	8003002 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ffe:	2301      	movs	r3, #1
 8003000:	e00f      	b.n	8003022 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003002:	4a0a      	ldr	r2, [pc, #40]	; (800302c <SysTick_Config+0x40>)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	3b01      	subs	r3, #1
 8003008:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800300a:	210f      	movs	r1, #15
 800300c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003010:	f7ff ff8e 	bl	8002f30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003014:	4b05      	ldr	r3, [pc, #20]	; (800302c <SysTick_Config+0x40>)
 8003016:	2200      	movs	r2, #0
 8003018:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800301a:	4b04      	ldr	r3, [pc, #16]	; (800302c <SysTick_Config+0x40>)
 800301c:	2207      	movs	r2, #7
 800301e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003020:	2300      	movs	r3, #0
}
 8003022:	4618      	mov	r0, r3
 8003024:	3708      	adds	r7, #8
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	e000e010 	.word	0xe000e010

08003030 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f7ff ff29 	bl	8002e90 <__NVIC_SetPriorityGrouping>
}
 800303e:	bf00      	nop
 8003040:	3708      	adds	r7, #8
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}

08003046 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003046:	b580      	push	{r7, lr}
 8003048:	b086      	sub	sp, #24
 800304a:	af00      	add	r7, sp, #0
 800304c:	4603      	mov	r3, r0
 800304e:	60b9      	str	r1, [r7, #8]
 8003050:	607a      	str	r2, [r7, #4]
 8003052:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003054:	2300      	movs	r3, #0
 8003056:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003058:	f7ff ff3e 	bl	8002ed8 <__NVIC_GetPriorityGrouping>
 800305c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	68b9      	ldr	r1, [r7, #8]
 8003062:	6978      	ldr	r0, [r7, #20]
 8003064:	f7ff ff8e 	bl	8002f84 <NVIC_EncodePriority>
 8003068:	4602      	mov	r2, r0
 800306a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800306e:	4611      	mov	r1, r2
 8003070:	4618      	mov	r0, r3
 8003072:	f7ff ff5d 	bl	8002f30 <__NVIC_SetPriority>
}
 8003076:	bf00      	nop
 8003078:	3718      	adds	r7, #24
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}

0800307e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800307e:	b580      	push	{r7, lr}
 8003080:	b082      	sub	sp, #8
 8003082:	af00      	add	r7, sp, #0
 8003084:	4603      	mov	r3, r0
 8003086:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003088:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800308c:	4618      	mov	r0, r3
 800308e:	f7ff ff31 	bl	8002ef4 <__NVIC_EnableIRQ>
}
 8003092:	bf00      	nop
 8003094:	3708      	adds	r7, #8
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}

0800309a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800309a:	b580      	push	{r7, lr}
 800309c:	b082      	sub	sp, #8
 800309e:	af00      	add	r7, sp, #0
 80030a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f7ff ffa2 	bl	8002fec <SysTick_Config>
 80030a8:	4603      	mov	r3, r0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3708      	adds	r7, #8
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
	...

080030b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b089      	sub	sp, #36	; 0x24
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80030be:	2300      	movs	r3, #0
 80030c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80030c2:	2300      	movs	r3, #0
 80030c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80030c6:	2300      	movs	r3, #0
 80030c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030ca:	2300      	movs	r3, #0
 80030cc:	61fb      	str	r3, [r7, #28]
 80030ce:	e165      	b.n	800339c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80030d0:	2201      	movs	r2, #1
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	fa02 f303 	lsl.w	r3, r2, r3
 80030d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	697a      	ldr	r2, [r7, #20]
 80030e0:	4013      	ands	r3, r2
 80030e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80030e4:	693a      	ldr	r2, [r7, #16]
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	f040 8154 	bne.w	8003396 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	f003 0303 	and.w	r3, r3, #3
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d005      	beq.n	8003106 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003102:	2b02      	cmp	r3, #2
 8003104:	d130      	bne.n	8003168 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	005b      	lsls	r3, r3, #1
 8003110:	2203      	movs	r2, #3
 8003112:	fa02 f303 	lsl.w	r3, r2, r3
 8003116:	43db      	mvns	r3, r3
 8003118:	69ba      	ldr	r2, [r7, #24]
 800311a:	4013      	ands	r3, r2
 800311c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	68da      	ldr	r2, [r3, #12]
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	005b      	lsls	r3, r3, #1
 8003126:	fa02 f303 	lsl.w	r3, r2, r3
 800312a:	69ba      	ldr	r2, [r7, #24]
 800312c:	4313      	orrs	r3, r2
 800312e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	69ba      	ldr	r2, [r7, #24]
 8003134:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800313c:	2201      	movs	r2, #1
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	fa02 f303 	lsl.w	r3, r2, r3
 8003144:	43db      	mvns	r3, r3
 8003146:	69ba      	ldr	r2, [r7, #24]
 8003148:	4013      	ands	r3, r2
 800314a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	091b      	lsrs	r3, r3, #4
 8003152:	f003 0201 	and.w	r2, r3, #1
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	fa02 f303 	lsl.w	r3, r2, r3
 800315c:	69ba      	ldr	r2, [r7, #24]
 800315e:	4313      	orrs	r3, r2
 8003160:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	69ba      	ldr	r2, [r7, #24]
 8003166:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	f003 0303 	and.w	r3, r3, #3
 8003170:	2b03      	cmp	r3, #3
 8003172:	d017      	beq.n	80031a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	005b      	lsls	r3, r3, #1
 800317e:	2203      	movs	r2, #3
 8003180:	fa02 f303 	lsl.w	r3, r2, r3
 8003184:	43db      	mvns	r3, r3
 8003186:	69ba      	ldr	r2, [r7, #24]
 8003188:	4013      	ands	r3, r2
 800318a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	689a      	ldr	r2, [r3, #8]
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	005b      	lsls	r3, r3, #1
 8003194:	fa02 f303 	lsl.w	r3, r2, r3
 8003198:	69ba      	ldr	r2, [r7, #24]
 800319a:	4313      	orrs	r3, r2
 800319c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	69ba      	ldr	r2, [r7, #24]
 80031a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f003 0303 	and.w	r3, r3, #3
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	d123      	bne.n	80031f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	08da      	lsrs	r2, r3, #3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	3208      	adds	r2, #8
 80031b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	f003 0307 	and.w	r3, r3, #7
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	220f      	movs	r2, #15
 80031c8:	fa02 f303 	lsl.w	r3, r2, r3
 80031cc:	43db      	mvns	r3, r3
 80031ce:	69ba      	ldr	r2, [r7, #24]
 80031d0:	4013      	ands	r3, r2
 80031d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	691a      	ldr	r2, [r3, #16]
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	f003 0307 	and.w	r3, r3, #7
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	fa02 f303 	lsl.w	r3, r2, r3
 80031e4:	69ba      	ldr	r2, [r7, #24]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	08da      	lsrs	r2, r3, #3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	3208      	adds	r2, #8
 80031f2:	69b9      	ldr	r1, [r7, #24]
 80031f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	005b      	lsls	r3, r3, #1
 8003202:	2203      	movs	r2, #3
 8003204:	fa02 f303 	lsl.w	r3, r2, r3
 8003208:	43db      	mvns	r3, r3
 800320a:	69ba      	ldr	r2, [r7, #24]
 800320c:	4013      	ands	r3, r2
 800320e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f003 0203 	and.w	r2, r3, #3
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	005b      	lsls	r3, r3, #1
 800321c:	fa02 f303 	lsl.w	r3, r2, r3
 8003220:	69ba      	ldr	r2, [r7, #24]
 8003222:	4313      	orrs	r3, r2
 8003224:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	69ba      	ldr	r2, [r7, #24]
 800322a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003234:	2b00      	cmp	r3, #0
 8003236:	f000 80ae 	beq.w	8003396 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800323a:	2300      	movs	r3, #0
 800323c:	60fb      	str	r3, [r7, #12]
 800323e:	4b5d      	ldr	r3, [pc, #372]	; (80033b4 <HAL_GPIO_Init+0x300>)
 8003240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003242:	4a5c      	ldr	r2, [pc, #368]	; (80033b4 <HAL_GPIO_Init+0x300>)
 8003244:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003248:	6453      	str	r3, [r2, #68]	; 0x44
 800324a:	4b5a      	ldr	r3, [pc, #360]	; (80033b4 <HAL_GPIO_Init+0x300>)
 800324c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800324e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003252:	60fb      	str	r3, [r7, #12]
 8003254:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003256:	4a58      	ldr	r2, [pc, #352]	; (80033b8 <HAL_GPIO_Init+0x304>)
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	089b      	lsrs	r3, r3, #2
 800325c:	3302      	adds	r3, #2
 800325e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003262:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	f003 0303 	and.w	r3, r3, #3
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	220f      	movs	r2, #15
 800326e:	fa02 f303 	lsl.w	r3, r2, r3
 8003272:	43db      	mvns	r3, r3
 8003274:	69ba      	ldr	r2, [r7, #24]
 8003276:	4013      	ands	r3, r2
 8003278:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a4f      	ldr	r2, [pc, #316]	; (80033bc <HAL_GPIO_Init+0x308>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d025      	beq.n	80032ce <HAL_GPIO_Init+0x21a>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4a4e      	ldr	r2, [pc, #312]	; (80033c0 <HAL_GPIO_Init+0x30c>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d01f      	beq.n	80032ca <HAL_GPIO_Init+0x216>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a4d      	ldr	r2, [pc, #308]	; (80033c4 <HAL_GPIO_Init+0x310>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d019      	beq.n	80032c6 <HAL_GPIO_Init+0x212>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a4c      	ldr	r2, [pc, #304]	; (80033c8 <HAL_GPIO_Init+0x314>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d013      	beq.n	80032c2 <HAL_GPIO_Init+0x20e>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a4b      	ldr	r2, [pc, #300]	; (80033cc <HAL_GPIO_Init+0x318>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d00d      	beq.n	80032be <HAL_GPIO_Init+0x20a>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a4a      	ldr	r2, [pc, #296]	; (80033d0 <HAL_GPIO_Init+0x31c>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d007      	beq.n	80032ba <HAL_GPIO_Init+0x206>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a49      	ldr	r2, [pc, #292]	; (80033d4 <HAL_GPIO_Init+0x320>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d101      	bne.n	80032b6 <HAL_GPIO_Init+0x202>
 80032b2:	2306      	movs	r3, #6
 80032b4:	e00c      	b.n	80032d0 <HAL_GPIO_Init+0x21c>
 80032b6:	2307      	movs	r3, #7
 80032b8:	e00a      	b.n	80032d0 <HAL_GPIO_Init+0x21c>
 80032ba:	2305      	movs	r3, #5
 80032bc:	e008      	b.n	80032d0 <HAL_GPIO_Init+0x21c>
 80032be:	2304      	movs	r3, #4
 80032c0:	e006      	b.n	80032d0 <HAL_GPIO_Init+0x21c>
 80032c2:	2303      	movs	r3, #3
 80032c4:	e004      	b.n	80032d0 <HAL_GPIO_Init+0x21c>
 80032c6:	2302      	movs	r3, #2
 80032c8:	e002      	b.n	80032d0 <HAL_GPIO_Init+0x21c>
 80032ca:	2301      	movs	r3, #1
 80032cc:	e000      	b.n	80032d0 <HAL_GPIO_Init+0x21c>
 80032ce:	2300      	movs	r3, #0
 80032d0:	69fa      	ldr	r2, [r7, #28]
 80032d2:	f002 0203 	and.w	r2, r2, #3
 80032d6:	0092      	lsls	r2, r2, #2
 80032d8:	4093      	lsls	r3, r2
 80032da:	69ba      	ldr	r2, [r7, #24]
 80032dc:	4313      	orrs	r3, r2
 80032de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80032e0:	4935      	ldr	r1, [pc, #212]	; (80033b8 <HAL_GPIO_Init+0x304>)
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	089b      	lsrs	r3, r3, #2
 80032e6:	3302      	adds	r3, #2
 80032e8:	69ba      	ldr	r2, [r7, #24]
 80032ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032ee:	4b3a      	ldr	r3, [pc, #232]	; (80033d8 <HAL_GPIO_Init+0x324>)
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	43db      	mvns	r3, r3
 80032f8:	69ba      	ldr	r2, [r7, #24]
 80032fa:	4013      	ands	r3, r2
 80032fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d003      	beq.n	8003312 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800330a:	69ba      	ldr	r2, [r7, #24]
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	4313      	orrs	r3, r2
 8003310:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003312:	4a31      	ldr	r2, [pc, #196]	; (80033d8 <HAL_GPIO_Init+0x324>)
 8003314:	69bb      	ldr	r3, [r7, #24]
 8003316:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003318:	4b2f      	ldr	r3, [pc, #188]	; (80033d8 <HAL_GPIO_Init+0x324>)
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	43db      	mvns	r3, r3
 8003322:	69ba      	ldr	r2, [r7, #24]
 8003324:	4013      	ands	r3, r2
 8003326:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003330:	2b00      	cmp	r3, #0
 8003332:	d003      	beq.n	800333c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003334:	69ba      	ldr	r2, [r7, #24]
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	4313      	orrs	r3, r2
 800333a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800333c:	4a26      	ldr	r2, [pc, #152]	; (80033d8 <HAL_GPIO_Init+0x324>)
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003342:	4b25      	ldr	r3, [pc, #148]	; (80033d8 <HAL_GPIO_Init+0x324>)
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	43db      	mvns	r3, r3
 800334c:	69ba      	ldr	r2, [r7, #24]
 800334e:	4013      	ands	r3, r2
 8003350:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d003      	beq.n	8003366 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800335e:	69ba      	ldr	r2, [r7, #24]
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	4313      	orrs	r3, r2
 8003364:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003366:	4a1c      	ldr	r2, [pc, #112]	; (80033d8 <HAL_GPIO_Init+0x324>)
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800336c:	4b1a      	ldr	r3, [pc, #104]	; (80033d8 <HAL_GPIO_Init+0x324>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	43db      	mvns	r3, r3
 8003376:	69ba      	ldr	r2, [r7, #24]
 8003378:	4013      	ands	r3, r2
 800337a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003384:	2b00      	cmp	r3, #0
 8003386:	d003      	beq.n	8003390 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003388:	69ba      	ldr	r2, [r7, #24]
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	4313      	orrs	r3, r2
 800338e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003390:	4a11      	ldr	r2, [pc, #68]	; (80033d8 <HAL_GPIO_Init+0x324>)
 8003392:	69bb      	ldr	r3, [r7, #24]
 8003394:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	3301      	adds	r3, #1
 800339a:	61fb      	str	r3, [r7, #28]
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	2b0f      	cmp	r3, #15
 80033a0:	f67f ae96 	bls.w	80030d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80033a4:	bf00      	nop
 80033a6:	bf00      	nop
 80033a8:	3724      	adds	r7, #36	; 0x24
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr
 80033b2:	bf00      	nop
 80033b4:	40023800 	.word	0x40023800
 80033b8:	40013800 	.word	0x40013800
 80033bc:	40020000 	.word	0x40020000
 80033c0:	40020400 	.word	0x40020400
 80033c4:	40020800 	.word	0x40020800
 80033c8:	40020c00 	.word	0x40020c00
 80033cc:	40021000 	.word	0x40021000
 80033d0:	40021400 	.word	0x40021400
 80033d4:	40021800 	.word	0x40021800
 80033d8:	40013c00 	.word	0x40013c00

080033dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	460b      	mov	r3, r1
 80033e6:	807b      	strh	r3, [r7, #2]
 80033e8:	4613      	mov	r3, r2
 80033ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033ec:	787b      	ldrb	r3, [r7, #1]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d003      	beq.n	80033fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033f2:	887a      	ldrh	r2, [r7, #2]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80033f8:	e003      	b.n	8003402 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80033fa:	887b      	ldrh	r3, [r7, #2]
 80033fc:	041a      	lsls	r2, r3, #16
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	619a      	str	r2, [r3, #24]
}
 8003402:	bf00      	nop
 8003404:	370c      	adds	r7, #12
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr
	...

08003410 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b082      	sub	sp, #8
 8003414:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003416:	2300      	movs	r3, #0
 8003418:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800341a:	2300      	movs	r3, #0
 800341c:	603b      	str	r3, [r7, #0]
 800341e:	4b20      	ldr	r3, [pc, #128]	; (80034a0 <HAL_PWREx_EnableOverDrive+0x90>)
 8003420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003422:	4a1f      	ldr	r2, [pc, #124]	; (80034a0 <HAL_PWREx_EnableOverDrive+0x90>)
 8003424:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003428:	6413      	str	r3, [r2, #64]	; 0x40
 800342a:	4b1d      	ldr	r3, [pc, #116]	; (80034a0 <HAL_PWREx_EnableOverDrive+0x90>)
 800342c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003432:	603b      	str	r3, [r7, #0]
 8003434:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003436:	4b1b      	ldr	r3, [pc, #108]	; (80034a4 <HAL_PWREx_EnableOverDrive+0x94>)
 8003438:	2201      	movs	r2, #1
 800343a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800343c:	f7fe ff70 	bl	8002320 <HAL_GetTick>
 8003440:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003442:	e009      	b.n	8003458 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003444:	f7fe ff6c 	bl	8002320 <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003452:	d901      	bls.n	8003458 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003454:	2303      	movs	r3, #3
 8003456:	e01f      	b.n	8003498 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003458:	4b13      	ldr	r3, [pc, #76]	; (80034a8 <HAL_PWREx_EnableOverDrive+0x98>)
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003460:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003464:	d1ee      	bne.n	8003444 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003466:	4b11      	ldr	r3, [pc, #68]	; (80034ac <HAL_PWREx_EnableOverDrive+0x9c>)
 8003468:	2201      	movs	r2, #1
 800346a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800346c:	f7fe ff58 	bl	8002320 <HAL_GetTick>
 8003470:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003472:	e009      	b.n	8003488 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003474:	f7fe ff54 	bl	8002320 <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003482:	d901      	bls.n	8003488 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003484:	2303      	movs	r3, #3
 8003486:	e007      	b.n	8003498 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003488:	4b07      	ldr	r3, [pc, #28]	; (80034a8 <HAL_PWREx_EnableOverDrive+0x98>)
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003490:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003494:	d1ee      	bne.n	8003474 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003496:	2300      	movs	r3, #0
}
 8003498:	4618      	mov	r0, r3
 800349a:	3708      	adds	r7, #8
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	40023800 	.word	0x40023800
 80034a4:	420e0040 	.word	0x420e0040
 80034a8:	40007000 	.word	0x40007000
 80034ac:	420e0044 	.word	0x420e0044

080034b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b084      	sub	sp, #16
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d101      	bne.n	80034c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e0cc      	b.n	800365e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034c4:	4b68      	ldr	r3, [pc, #416]	; (8003668 <HAL_RCC_ClockConfig+0x1b8>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 030f 	and.w	r3, r3, #15
 80034cc:	683a      	ldr	r2, [r7, #0]
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d90c      	bls.n	80034ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034d2:	4b65      	ldr	r3, [pc, #404]	; (8003668 <HAL_RCC_ClockConfig+0x1b8>)
 80034d4:	683a      	ldr	r2, [r7, #0]
 80034d6:	b2d2      	uxtb	r2, r2
 80034d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034da:	4b63      	ldr	r3, [pc, #396]	; (8003668 <HAL_RCC_ClockConfig+0x1b8>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 030f 	and.w	r3, r3, #15
 80034e2:	683a      	ldr	r2, [r7, #0]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d001      	beq.n	80034ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e0b8      	b.n	800365e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0302 	and.w	r3, r3, #2
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d020      	beq.n	800353a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0304 	and.w	r3, r3, #4
 8003500:	2b00      	cmp	r3, #0
 8003502:	d005      	beq.n	8003510 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003504:	4b59      	ldr	r3, [pc, #356]	; (800366c <HAL_RCC_ClockConfig+0x1bc>)
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	4a58      	ldr	r2, [pc, #352]	; (800366c <HAL_RCC_ClockConfig+0x1bc>)
 800350a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800350e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0308 	and.w	r3, r3, #8
 8003518:	2b00      	cmp	r3, #0
 800351a:	d005      	beq.n	8003528 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800351c:	4b53      	ldr	r3, [pc, #332]	; (800366c <HAL_RCC_ClockConfig+0x1bc>)
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	4a52      	ldr	r2, [pc, #328]	; (800366c <HAL_RCC_ClockConfig+0x1bc>)
 8003522:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003526:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003528:	4b50      	ldr	r3, [pc, #320]	; (800366c <HAL_RCC_ClockConfig+0x1bc>)
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	494d      	ldr	r1, [pc, #308]	; (800366c <HAL_RCC_ClockConfig+0x1bc>)
 8003536:	4313      	orrs	r3, r2
 8003538:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0301 	and.w	r3, r3, #1
 8003542:	2b00      	cmp	r3, #0
 8003544:	d044      	beq.n	80035d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	2b01      	cmp	r3, #1
 800354c:	d107      	bne.n	800355e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800354e:	4b47      	ldr	r3, [pc, #284]	; (800366c <HAL_RCC_ClockConfig+0x1bc>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d119      	bne.n	800358e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e07f      	b.n	800365e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	2b02      	cmp	r3, #2
 8003564:	d003      	beq.n	800356e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800356a:	2b03      	cmp	r3, #3
 800356c:	d107      	bne.n	800357e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800356e:	4b3f      	ldr	r3, [pc, #252]	; (800366c <HAL_RCC_ClockConfig+0x1bc>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d109      	bne.n	800358e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e06f      	b.n	800365e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800357e:	4b3b      	ldr	r3, [pc, #236]	; (800366c <HAL_RCC_ClockConfig+0x1bc>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0302 	and.w	r3, r3, #2
 8003586:	2b00      	cmp	r3, #0
 8003588:	d101      	bne.n	800358e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e067      	b.n	800365e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800358e:	4b37      	ldr	r3, [pc, #220]	; (800366c <HAL_RCC_ClockConfig+0x1bc>)
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	f023 0203 	bic.w	r2, r3, #3
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	4934      	ldr	r1, [pc, #208]	; (800366c <HAL_RCC_ClockConfig+0x1bc>)
 800359c:	4313      	orrs	r3, r2
 800359e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035a0:	f7fe febe 	bl	8002320 <HAL_GetTick>
 80035a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035a6:	e00a      	b.n	80035be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035a8:	f7fe feba 	bl	8002320 <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d901      	bls.n	80035be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e04f      	b.n	800365e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035be:	4b2b      	ldr	r3, [pc, #172]	; (800366c <HAL_RCC_ClockConfig+0x1bc>)
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	f003 020c 	and.w	r2, r3, #12
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d1eb      	bne.n	80035a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035d0:	4b25      	ldr	r3, [pc, #148]	; (8003668 <HAL_RCC_ClockConfig+0x1b8>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 030f 	and.w	r3, r3, #15
 80035d8:	683a      	ldr	r2, [r7, #0]
 80035da:	429a      	cmp	r2, r3
 80035dc:	d20c      	bcs.n	80035f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035de:	4b22      	ldr	r3, [pc, #136]	; (8003668 <HAL_RCC_ClockConfig+0x1b8>)
 80035e0:	683a      	ldr	r2, [r7, #0]
 80035e2:	b2d2      	uxtb	r2, r2
 80035e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035e6:	4b20      	ldr	r3, [pc, #128]	; (8003668 <HAL_RCC_ClockConfig+0x1b8>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 030f 	and.w	r3, r3, #15
 80035ee:	683a      	ldr	r2, [r7, #0]
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d001      	beq.n	80035f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e032      	b.n	800365e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 0304 	and.w	r3, r3, #4
 8003600:	2b00      	cmp	r3, #0
 8003602:	d008      	beq.n	8003616 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003604:	4b19      	ldr	r3, [pc, #100]	; (800366c <HAL_RCC_ClockConfig+0x1bc>)
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	4916      	ldr	r1, [pc, #88]	; (800366c <HAL_RCC_ClockConfig+0x1bc>)
 8003612:	4313      	orrs	r3, r2
 8003614:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0308 	and.w	r3, r3, #8
 800361e:	2b00      	cmp	r3, #0
 8003620:	d009      	beq.n	8003636 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003622:	4b12      	ldr	r3, [pc, #72]	; (800366c <HAL_RCC_ClockConfig+0x1bc>)
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	691b      	ldr	r3, [r3, #16]
 800362e:	00db      	lsls	r3, r3, #3
 8003630:	490e      	ldr	r1, [pc, #56]	; (800366c <HAL_RCC_ClockConfig+0x1bc>)
 8003632:	4313      	orrs	r3, r2
 8003634:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003636:	f000 f855 	bl	80036e4 <HAL_RCC_GetSysClockFreq>
 800363a:	4602      	mov	r2, r0
 800363c:	4b0b      	ldr	r3, [pc, #44]	; (800366c <HAL_RCC_ClockConfig+0x1bc>)
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	091b      	lsrs	r3, r3, #4
 8003642:	f003 030f 	and.w	r3, r3, #15
 8003646:	490a      	ldr	r1, [pc, #40]	; (8003670 <HAL_RCC_ClockConfig+0x1c0>)
 8003648:	5ccb      	ldrb	r3, [r1, r3]
 800364a:	fa22 f303 	lsr.w	r3, r2, r3
 800364e:	4a09      	ldr	r2, [pc, #36]	; (8003674 <HAL_RCC_ClockConfig+0x1c4>)
 8003650:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003652:	4b09      	ldr	r3, [pc, #36]	; (8003678 <HAL_RCC_ClockConfig+0x1c8>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4618      	mov	r0, r3
 8003658:	f7fe fe1e 	bl	8002298 <HAL_InitTick>

  return HAL_OK;
 800365c:	2300      	movs	r3, #0
}
 800365e:	4618      	mov	r0, r3
 8003660:	3710      	adds	r7, #16
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	40023c00 	.word	0x40023c00
 800366c:	40023800 	.word	0x40023800
 8003670:	08006000 	.word	0x08006000
 8003674:	20000024 	.word	0x20000024
 8003678:	20000028 	.word	0x20000028

0800367c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800367c:	b480      	push	{r7}
 800367e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003680:	4b03      	ldr	r3, [pc, #12]	; (8003690 <HAL_RCC_GetHCLKFreq+0x14>)
 8003682:	681b      	ldr	r3, [r3, #0]
}
 8003684:	4618      	mov	r0, r3
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr
 800368e:	bf00      	nop
 8003690:	20000024 	.word	0x20000024

08003694 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003698:	f7ff fff0 	bl	800367c <HAL_RCC_GetHCLKFreq>
 800369c:	4602      	mov	r2, r0
 800369e:	4b05      	ldr	r3, [pc, #20]	; (80036b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	0a9b      	lsrs	r3, r3, #10
 80036a4:	f003 0307 	and.w	r3, r3, #7
 80036a8:	4903      	ldr	r1, [pc, #12]	; (80036b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036aa:	5ccb      	ldrb	r3, [r1, r3]
 80036ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	40023800 	.word	0x40023800
 80036b8:	08006010 	.word	0x08006010

080036bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80036c0:	f7ff ffdc 	bl	800367c <HAL_RCC_GetHCLKFreq>
 80036c4:	4602      	mov	r2, r0
 80036c6:	4b05      	ldr	r3, [pc, #20]	; (80036dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	0b5b      	lsrs	r3, r3, #13
 80036cc:	f003 0307 	and.w	r3, r3, #7
 80036d0:	4903      	ldr	r1, [pc, #12]	; (80036e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036d2:	5ccb      	ldrb	r3, [r1, r3]
 80036d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036d8:	4618      	mov	r0, r3
 80036da:	bd80      	pop	{r7, pc}
 80036dc:	40023800 	.word	0x40023800
 80036e0:	08006010 	.word	0x08006010

080036e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036e8:	b0ae      	sub	sp, #184	; 0xb8
 80036ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80036ec:	2300      	movs	r3, #0
 80036ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80036f2:	2300      	movs	r3, #0
 80036f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80036f8:	2300      	movs	r3, #0
 80036fa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80036fe:	2300      	movs	r3, #0
 8003700:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003704:	2300      	movs	r3, #0
 8003706:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800370a:	4bcb      	ldr	r3, [pc, #812]	; (8003a38 <HAL_RCC_GetSysClockFreq+0x354>)
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	f003 030c 	and.w	r3, r3, #12
 8003712:	2b0c      	cmp	r3, #12
 8003714:	f200 8206 	bhi.w	8003b24 <HAL_RCC_GetSysClockFreq+0x440>
 8003718:	a201      	add	r2, pc, #4	; (adr r2, 8003720 <HAL_RCC_GetSysClockFreq+0x3c>)
 800371a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800371e:	bf00      	nop
 8003720:	08003755 	.word	0x08003755
 8003724:	08003b25 	.word	0x08003b25
 8003728:	08003b25 	.word	0x08003b25
 800372c:	08003b25 	.word	0x08003b25
 8003730:	0800375d 	.word	0x0800375d
 8003734:	08003b25 	.word	0x08003b25
 8003738:	08003b25 	.word	0x08003b25
 800373c:	08003b25 	.word	0x08003b25
 8003740:	08003765 	.word	0x08003765
 8003744:	08003b25 	.word	0x08003b25
 8003748:	08003b25 	.word	0x08003b25
 800374c:	08003b25 	.word	0x08003b25
 8003750:	08003955 	.word	0x08003955
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003754:	4bb9      	ldr	r3, [pc, #740]	; (8003a3c <HAL_RCC_GetSysClockFreq+0x358>)
 8003756:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800375a:	e1e7      	b.n	8003b2c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800375c:	4bb8      	ldr	r3, [pc, #736]	; (8003a40 <HAL_RCC_GetSysClockFreq+0x35c>)
 800375e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003762:	e1e3      	b.n	8003b2c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003764:	4bb4      	ldr	r3, [pc, #720]	; (8003a38 <HAL_RCC_GetSysClockFreq+0x354>)
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800376c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003770:	4bb1      	ldr	r3, [pc, #708]	; (8003a38 <HAL_RCC_GetSysClockFreq+0x354>)
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003778:	2b00      	cmp	r3, #0
 800377a:	d071      	beq.n	8003860 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800377c:	4bae      	ldr	r3, [pc, #696]	; (8003a38 <HAL_RCC_GetSysClockFreq+0x354>)
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	099b      	lsrs	r3, r3, #6
 8003782:	2200      	movs	r2, #0
 8003784:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003788:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800378c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003790:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003794:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003798:	2300      	movs	r3, #0
 800379a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800379e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80037a2:	4622      	mov	r2, r4
 80037a4:	462b      	mov	r3, r5
 80037a6:	f04f 0000 	mov.w	r0, #0
 80037aa:	f04f 0100 	mov.w	r1, #0
 80037ae:	0159      	lsls	r1, r3, #5
 80037b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037b4:	0150      	lsls	r0, r2, #5
 80037b6:	4602      	mov	r2, r0
 80037b8:	460b      	mov	r3, r1
 80037ba:	4621      	mov	r1, r4
 80037bc:	1a51      	subs	r1, r2, r1
 80037be:	6439      	str	r1, [r7, #64]	; 0x40
 80037c0:	4629      	mov	r1, r5
 80037c2:	eb63 0301 	sbc.w	r3, r3, r1
 80037c6:	647b      	str	r3, [r7, #68]	; 0x44
 80037c8:	f04f 0200 	mov.w	r2, #0
 80037cc:	f04f 0300 	mov.w	r3, #0
 80037d0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80037d4:	4649      	mov	r1, r9
 80037d6:	018b      	lsls	r3, r1, #6
 80037d8:	4641      	mov	r1, r8
 80037da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80037de:	4641      	mov	r1, r8
 80037e0:	018a      	lsls	r2, r1, #6
 80037e2:	4641      	mov	r1, r8
 80037e4:	1a51      	subs	r1, r2, r1
 80037e6:	63b9      	str	r1, [r7, #56]	; 0x38
 80037e8:	4649      	mov	r1, r9
 80037ea:	eb63 0301 	sbc.w	r3, r3, r1
 80037ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037f0:	f04f 0200 	mov.w	r2, #0
 80037f4:	f04f 0300 	mov.w	r3, #0
 80037f8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80037fc:	4649      	mov	r1, r9
 80037fe:	00cb      	lsls	r3, r1, #3
 8003800:	4641      	mov	r1, r8
 8003802:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003806:	4641      	mov	r1, r8
 8003808:	00ca      	lsls	r2, r1, #3
 800380a:	4610      	mov	r0, r2
 800380c:	4619      	mov	r1, r3
 800380e:	4603      	mov	r3, r0
 8003810:	4622      	mov	r2, r4
 8003812:	189b      	adds	r3, r3, r2
 8003814:	633b      	str	r3, [r7, #48]	; 0x30
 8003816:	462b      	mov	r3, r5
 8003818:	460a      	mov	r2, r1
 800381a:	eb42 0303 	adc.w	r3, r2, r3
 800381e:	637b      	str	r3, [r7, #52]	; 0x34
 8003820:	f04f 0200 	mov.w	r2, #0
 8003824:	f04f 0300 	mov.w	r3, #0
 8003828:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800382c:	4629      	mov	r1, r5
 800382e:	024b      	lsls	r3, r1, #9
 8003830:	4621      	mov	r1, r4
 8003832:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003836:	4621      	mov	r1, r4
 8003838:	024a      	lsls	r2, r1, #9
 800383a:	4610      	mov	r0, r2
 800383c:	4619      	mov	r1, r3
 800383e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003842:	2200      	movs	r2, #0
 8003844:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003848:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800384c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003850:	f7fc fee4 	bl	800061c <__aeabi_uldivmod>
 8003854:	4602      	mov	r2, r0
 8003856:	460b      	mov	r3, r1
 8003858:	4613      	mov	r3, r2
 800385a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800385e:	e067      	b.n	8003930 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003860:	4b75      	ldr	r3, [pc, #468]	; (8003a38 <HAL_RCC_GetSysClockFreq+0x354>)
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	099b      	lsrs	r3, r3, #6
 8003866:	2200      	movs	r2, #0
 8003868:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800386c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003870:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003874:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003878:	67bb      	str	r3, [r7, #120]	; 0x78
 800387a:	2300      	movs	r3, #0
 800387c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800387e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003882:	4622      	mov	r2, r4
 8003884:	462b      	mov	r3, r5
 8003886:	f04f 0000 	mov.w	r0, #0
 800388a:	f04f 0100 	mov.w	r1, #0
 800388e:	0159      	lsls	r1, r3, #5
 8003890:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003894:	0150      	lsls	r0, r2, #5
 8003896:	4602      	mov	r2, r0
 8003898:	460b      	mov	r3, r1
 800389a:	4621      	mov	r1, r4
 800389c:	1a51      	subs	r1, r2, r1
 800389e:	62b9      	str	r1, [r7, #40]	; 0x28
 80038a0:	4629      	mov	r1, r5
 80038a2:	eb63 0301 	sbc.w	r3, r3, r1
 80038a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038a8:	f04f 0200 	mov.w	r2, #0
 80038ac:	f04f 0300 	mov.w	r3, #0
 80038b0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80038b4:	4649      	mov	r1, r9
 80038b6:	018b      	lsls	r3, r1, #6
 80038b8:	4641      	mov	r1, r8
 80038ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80038be:	4641      	mov	r1, r8
 80038c0:	018a      	lsls	r2, r1, #6
 80038c2:	4641      	mov	r1, r8
 80038c4:	ebb2 0a01 	subs.w	sl, r2, r1
 80038c8:	4649      	mov	r1, r9
 80038ca:	eb63 0b01 	sbc.w	fp, r3, r1
 80038ce:	f04f 0200 	mov.w	r2, #0
 80038d2:	f04f 0300 	mov.w	r3, #0
 80038d6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80038da:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80038de:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80038e2:	4692      	mov	sl, r2
 80038e4:	469b      	mov	fp, r3
 80038e6:	4623      	mov	r3, r4
 80038e8:	eb1a 0303 	adds.w	r3, sl, r3
 80038ec:	623b      	str	r3, [r7, #32]
 80038ee:	462b      	mov	r3, r5
 80038f0:	eb4b 0303 	adc.w	r3, fp, r3
 80038f4:	627b      	str	r3, [r7, #36]	; 0x24
 80038f6:	f04f 0200 	mov.w	r2, #0
 80038fa:	f04f 0300 	mov.w	r3, #0
 80038fe:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003902:	4629      	mov	r1, r5
 8003904:	028b      	lsls	r3, r1, #10
 8003906:	4621      	mov	r1, r4
 8003908:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800390c:	4621      	mov	r1, r4
 800390e:	028a      	lsls	r2, r1, #10
 8003910:	4610      	mov	r0, r2
 8003912:	4619      	mov	r1, r3
 8003914:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003918:	2200      	movs	r2, #0
 800391a:	673b      	str	r3, [r7, #112]	; 0x70
 800391c:	677a      	str	r2, [r7, #116]	; 0x74
 800391e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003922:	f7fc fe7b 	bl	800061c <__aeabi_uldivmod>
 8003926:	4602      	mov	r2, r0
 8003928:	460b      	mov	r3, r1
 800392a:	4613      	mov	r3, r2
 800392c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003930:	4b41      	ldr	r3, [pc, #260]	; (8003a38 <HAL_RCC_GetSysClockFreq+0x354>)
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	0c1b      	lsrs	r3, r3, #16
 8003936:	f003 0303 	and.w	r3, r3, #3
 800393a:	3301      	adds	r3, #1
 800393c:	005b      	lsls	r3, r3, #1
 800393e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003942:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003946:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800394a:	fbb2 f3f3 	udiv	r3, r2, r3
 800394e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003952:	e0eb      	b.n	8003b2c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003954:	4b38      	ldr	r3, [pc, #224]	; (8003a38 <HAL_RCC_GetSysClockFreq+0x354>)
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800395c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003960:	4b35      	ldr	r3, [pc, #212]	; (8003a38 <HAL_RCC_GetSysClockFreq+0x354>)
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003968:	2b00      	cmp	r3, #0
 800396a:	d06b      	beq.n	8003a44 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800396c:	4b32      	ldr	r3, [pc, #200]	; (8003a38 <HAL_RCC_GetSysClockFreq+0x354>)
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	099b      	lsrs	r3, r3, #6
 8003972:	2200      	movs	r2, #0
 8003974:	66bb      	str	r3, [r7, #104]	; 0x68
 8003976:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003978:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800397a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800397e:	663b      	str	r3, [r7, #96]	; 0x60
 8003980:	2300      	movs	r3, #0
 8003982:	667b      	str	r3, [r7, #100]	; 0x64
 8003984:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003988:	4622      	mov	r2, r4
 800398a:	462b      	mov	r3, r5
 800398c:	f04f 0000 	mov.w	r0, #0
 8003990:	f04f 0100 	mov.w	r1, #0
 8003994:	0159      	lsls	r1, r3, #5
 8003996:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800399a:	0150      	lsls	r0, r2, #5
 800399c:	4602      	mov	r2, r0
 800399e:	460b      	mov	r3, r1
 80039a0:	4621      	mov	r1, r4
 80039a2:	1a51      	subs	r1, r2, r1
 80039a4:	61b9      	str	r1, [r7, #24]
 80039a6:	4629      	mov	r1, r5
 80039a8:	eb63 0301 	sbc.w	r3, r3, r1
 80039ac:	61fb      	str	r3, [r7, #28]
 80039ae:	f04f 0200 	mov.w	r2, #0
 80039b2:	f04f 0300 	mov.w	r3, #0
 80039b6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80039ba:	4659      	mov	r1, fp
 80039bc:	018b      	lsls	r3, r1, #6
 80039be:	4651      	mov	r1, sl
 80039c0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80039c4:	4651      	mov	r1, sl
 80039c6:	018a      	lsls	r2, r1, #6
 80039c8:	4651      	mov	r1, sl
 80039ca:	ebb2 0801 	subs.w	r8, r2, r1
 80039ce:	4659      	mov	r1, fp
 80039d0:	eb63 0901 	sbc.w	r9, r3, r1
 80039d4:	f04f 0200 	mov.w	r2, #0
 80039d8:	f04f 0300 	mov.w	r3, #0
 80039dc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80039e0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80039e4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80039e8:	4690      	mov	r8, r2
 80039ea:	4699      	mov	r9, r3
 80039ec:	4623      	mov	r3, r4
 80039ee:	eb18 0303 	adds.w	r3, r8, r3
 80039f2:	613b      	str	r3, [r7, #16]
 80039f4:	462b      	mov	r3, r5
 80039f6:	eb49 0303 	adc.w	r3, r9, r3
 80039fa:	617b      	str	r3, [r7, #20]
 80039fc:	f04f 0200 	mov.w	r2, #0
 8003a00:	f04f 0300 	mov.w	r3, #0
 8003a04:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003a08:	4629      	mov	r1, r5
 8003a0a:	024b      	lsls	r3, r1, #9
 8003a0c:	4621      	mov	r1, r4
 8003a0e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003a12:	4621      	mov	r1, r4
 8003a14:	024a      	lsls	r2, r1, #9
 8003a16:	4610      	mov	r0, r2
 8003a18:	4619      	mov	r1, r3
 8003a1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003a1e:	2200      	movs	r2, #0
 8003a20:	65bb      	str	r3, [r7, #88]	; 0x58
 8003a22:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003a24:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003a28:	f7fc fdf8 	bl	800061c <__aeabi_uldivmod>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	460b      	mov	r3, r1
 8003a30:	4613      	mov	r3, r2
 8003a32:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003a36:	e065      	b.n	8003b04 <HAL_RCC_GetSysClockFreq+0x420>
 8003a38:	40023800 	.word	0x40023800
 8003a3c:	00f42400 	.word	0x00f42400
 8003a40:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a44:	4b3d      	ldr	r3, [pc, #244]	; (8003b3c <HAL_RCC_GetSysClockFreq+0x458>)
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	099b      	lsrs	r3, r3, #6
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	4611      	mov	r1, r2
 8003a50:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003a54:	653b      	str	r3, [r7, #80]	; 0x50
 8003a56:	2300      	movs	r3, #0
 8003a58:	657b      	str	r3, [r7, #84]	; 0x54
 8003a5a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003a5e:	4642      	mov	r2, r8
 8003a60:	464b      	mov	r3, r9
 8003a62:	f04f 0000 	mov.w	r0, #0
 8003a66:	f04f 0100 	mov.w	r1, #0
 8003a6a:	0159      	lsls	r1, r3, #5
 8003a6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a70:	0150      	lsls	r0, r2, #5
 8003a72:	4602      	mov	r2, r0
 8003a74:	460b      	mov	r3, r1
 8003a76:	4641      	mov	r1, r8
 8003a78:	1a51      	subs	r1, r2, r1
 8003a7a:	60b9      	str	r1, [r7, #8]
 8003a7c:	4649      	mov	r1, r9
 8003a7e:	eb63 0301 	sbc.w	r3, r3, r1
 8003a82:	60fb      	str	r3, [r7, #12]
 8003a84:	f04f 0200 	mov.w	r2, #0
 8003a88:	f04f 0300 	mov.w	r3, #0
 8003a8c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003a90:	4659      	mov	r1, fp
 8003a92:	018b      	lsls	r3, r1, #6
 8003a94:	4651      	mov	r1, sl
 8003a96:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a9a:	4651      	mov	r1, sl
 8003a9c:	018a      	lsls	r2, r1, #6
 8003a9e:	4651      	mov	r1, sl
 8003aa0:	1a54      	subs	r4, r2, r1
 8003aa2:	4659      	mov	r1, fp
 8003aa4:	eb63 0501 	sbc.w	r5, r3, r1
 8003aa8:	f04f 0200 	mov.w	r2, #0
 8003aac:	f04f 0300 	mov.w	r3, #0
 8003ab0:	00eb      	lsls	r3, r5, #3
 8003ab2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ab6:	00e2      	lsls	r2, r4, #3
 8003ab8:	4614      	mov	r4, r2
 8003aba:	461d      	mov	r5, r3
 8003abc:	4643      	mov	r3, r8
 8003abe:	18e3      	adds	r3, r4, r3
 8003ac0:	603b      	str	r3, [r7, #0]
 8003ac2:	464b      	mov	r3, r9
 8003ac4:	eb45 0303 	adc.w	r3, r5, r3
 8003ac8:	607b      	str	r3, [r7, #4]
 8003aca:	f04f 0200 	mov.w	r2, #0
 8003ace:	f04f 0300 	mov.w	r3, #0
 8003ad2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003ad6:	4629      	mov	r1, r5
 8003ad8:	028b      	lsls	r3, r1, #10
 8003ada:	4621      	mov	r1, r4
 8003adc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ae0:	4621      	mov	r1, r4
 8003ae2:	028a      	lsls	r2, r1, #10
 8003ae4:	4610      	mov	r0, r2
 8003ae6:	4619      	mov	r1, r3
 8003ae8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003aec:	2200      	movs	r2, #0
 8003aee:	64bb      	str	r3, [r7, #72]	; 0x48
 8003af0:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003af2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003af6:	f7fc fd91 	bl	800061c <__aeabi_uldivmod>
 8003afa:	4602      	mov	r2, r0
 8003afc:	460b      	mov	r3, r1
 8003afe:	4613      	mov	r3, r2
 8003b00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003b04:	4b0d      	ldr	r3, [pc, #52]	; (8003b3c <HAL_RCC_GetSysClockFreq+0x458>)
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	0f1b      	lsrs	r3, r3, #28
 8003b0a:	f003 0307 	and.w	r3, r3, #7
 8003b0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003b12:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003b16:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b1e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003b22:	e003      	b.n	8003b2c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b24:	4b06      	ldr	r3, [pc, #24]	; (8003b40 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003b26:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003b2a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b2c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	37b8      	adds	r7, #184	; 0xb8
 8003b34:	46bd      	mov	sp, r7
 8003b36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b3a:	bf00      	nop
 8003b3c:	40023800 	.word	0x40023800
 8003b40:	00f42400 	.word	0x00f42400

08003b44 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b086      	sub	sp, #24
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d101      	bne.n	8003b56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e28d      	b.n	8004072 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0301 	and.w	r3, r3, #1
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	f000 8083 	beq.w	8003c6a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003b64:	4b94      	ldr	r3, [pc, #592]	; (8003db8 <HAL_RCC_OscConfig+0x274>)
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	f003 030c 	and.w	r3, r3, #12
 8003b6c:	2b04      	cmp	r3, #4
 8003b6e:	d019      	beq.n	8003ba4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003b70:	4b91      	ldr	r3, [pc, #580]	; (8003db8 <HAL_RCC_OscConfig+0x274>)
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003b78:	2b08      	cmp	r3, #8
 8003b7a:	d106      	bne.n	8003b8a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003b7c:	4b8e      	ldr	r3, [pc, #568]	; (8003db8 <HAL_RCC_OscConfig+0x274>)
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b88:	d00c      	beq.n	8003ba4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b8a:	4b8b      	ldr	r3, [pc, #556]	; (8003db8 <HAL_RCC_OscConfig+0x274>)
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003b92:	2b0c      	cmp	r3, #12
 8003b94:	d112      	bne.n	8003bbc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b96:	4b88      	ldr	r3, [pc, #544]	; (8003db8 <HAL_RCC_OscConfig+0x274>)
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ba2:	d10b      	bne.n	8003bbc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ba4:	4b84      	ldr	r3, [pc, #528]	; (8003db8 <HAL_RCC_OscConfig+0x274>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d05b      	beq.n	8003c68 <HAL_RCC_OscConfig+0x124>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d157      	bne.n	8003c68 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e25a      	b.n	8004072 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bc4:	d106      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x90>
 8003bc6:	4b7c      	ldr	r3, [pc, #496]	; (8003db8 <HAL_RCC_OscConfig+0x274>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a7b      	ldr	r2, [pc, #492]	; (8003db8 <HAL_RCC_OscConfig+0x274>)
 8003bcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bd0:	6013      	str	r3, [r2, #0]
 8003bd2:	e01d      	b.n	8003c10 <HAL_RCC_OscConfig+0xcc>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bdc:	d10c      	bne.n	8003bf8 <HAL_RCC_OscConfig+0xb4>
 8003bde:	4b76      	ldr	r3, [pc, #472]	; (8003db8 <HAL_RCC_OscConfig+0x274>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a75      	ldr	r2, [pc, #468]	; (8003db8 <HAL_RCC_OscConfig+0x274>)
 8003be4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003be8:	6013      	str	r3, [r2, #0]
 8003bea:	4b73      	ldr	r3, [pc, #460]	; (8003db8 <HAL_RCC_OscConfig+0x274>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a72      	ldr	r2, [pc, #456]	; (8003db8 <HAL_RCC_OscConfig+0x274>)
 8003bf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bf4:	6013      	str	r3, [r2, #0]
 8003bf6:	e00b      	b.n	8003c10 <HAL_RCC_OscConfig+0xcc>
 8003bf8:	4b6f      	ldr	r3, [pc, #444]	; (8003db8 <HAL_RCC_OscConfig+0x274>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a6e      	ldr	r2, [pc, #440]	; (8003db8 <HAL_RCC_OscConfig+0x274>)
 8003bfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c02:	6013      	str	r3, [r2, #0]
 8003c04:	4b6c      	ldr	r3, [pc, #432]	; (8003db8 <HAL_RCC_OscConfig+0x274>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a6b      	ldr	r2, [pc, #428]	; (8003db8 <HAL_RCC_OscConfig+0x274>)
 8003c0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d013      	beq.n	8003c40 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c18:	f7fe fb82 	bl	8002320 <HAL_GetTick>
 8003c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c1e:	e008      	b.n	8003c32 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c20:	f7fe fb7e 	bl	8002320 <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	2b64      	cmp	r3, #100	; 0x64
 8003c2c:	d901      	bls.n	8003c32 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	e21f      	b.n	8004072 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c32:	4b61      	ldr	r3, [pc, #388]	; (8003db8 <HAL_RCC_OscConfig+0x274>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d0f0      	beq.n	8003c20 <HAL_RCC_OscConfig+0xdc>
 8003c3e:	e014      	b.n	8003c6a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c40:	f7fe fb6e 	bl	8002320 <HAL_GetTick>
 8003c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c46:	e008      	b.n	8003c5a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c48:	f7fe fb6a 	bl	8002320 <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	2b64      	cmp	r3, #100	; 0x64
 8003c54:	d901      	bls.n	8003c5a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e20b      	b.n	8004072 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c5a:	4b57      	ldr	r3, [pc, #348]	; (8003db8 <HAL_RCC_OscConfig+0x274>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d1f0      	bne.n	8003c48 <HAL_RCC_OscConfig+0x104>
 8003c66:	e000      	b.n	8003c6a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0302 	and.w	r3, r3, #2
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d06f      	beq.n	8003d56 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003c76:	4b50      	ldr	r3, [pc, #320]	; (8003db8 <HAL_RCC_OscConfig+0x274>)
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	f003 030c 	and.w	r3, r3, #12
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d017      	beq.n	8003cb2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003c82:	4b4d      	ldr	r3, [pc, #308]	; (8003db8 <HAL_RCC_OscConfig+0x274>)
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003c8a:	2b08      	cmp	r3, #8
 8003c8c:	d105      	bne.n	8003c9a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003c8e:	4b4a      	ldr	r3, [pc, #296]	; (8003db8 <HAL_RCC_OscConfig+0x274>)
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d00b      	beq.n	8003cb2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c9a:	4b47      	ldr	r3, [pc, #284]	; (8003db8 <HAL_RCC_OscConfig+0x274>)
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003ca2:	2b0c      	cmp	r3, #12
 8003ca4:	d11c      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ca6:	4b44      	ldr	r3, [pc, #272]	; (8003db8 <HAL_RCC_OscConfig+0x274>)
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d116      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cb2:	4b41      	ldr	r3, [pc, #260]	; (8003db8 <HAL_RCC_OscConfig+0x274>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0302 	and.w	r3, r3, #2
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d005      	beq.n	8003cca <HAL_RCC_OscConfig+0x186>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d001      	beq.n	8003cca <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e1d3      	b.n	8004072 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cca:	4b3b      	ldr	r3, [pc, #236]	; (8003db8 <HAL_RCC_OscConfig+0x274>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	691b      	ldr	r3, [r3, #16]
 8003cd6:	00db      	lsls	r3, r3, #3
 8003cd8:	4937      	ldr	r1, [pc, #220]	; (8003db8 <HAL_RCC_OscConfig+0x274>)
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cde:	e03a      	b.n	8003d56 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d020      	beq.n	8003d2a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ce8:	4b34      	ldr	r3, [pc, #208]	; (8003dbc <HAL_RCC_OscConfig+0x278>)
 8003cea:	2201      	movs	r2, #1
 8003cec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cee:	f7fe fb17 	bl	8002320 <HAL_GetTick>
 8003cf2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cf4:	e008      	b.n	8003d08 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cf6:	f7fe fb13 	bl	8002320 <HAL_GetTick>
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	1ad3      	subs	r3, r2, r3
 8003d00:	2b02      	cmp	r3, #2
 8003d02:	d901      	bls.n	8003d08 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003d04:	2303      	movs	r3, #3
 8003d06:	e1b4      	b.n	8004072 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d08:	4b2b      	ldr	r3, [pc, #172]	; (8003db8 <HAL_RCC_OscConfig+0x274>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 0302 	and.w	r3, r3, #2
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d0f0      	beq.n	8003cf6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d14:	4b28      	ldr	r3, [pc, #160]	; (8003db8 <HAL_RCC_OscConfig+0x274>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	691b      	ldr	r3, [r3, #16]
 8003d20:	00db      	lsls	r3, r3, #3
 8003d22:	4925      	ldr	r1, [pc, #148]	; (8003db8 <HAL_RCC_OscConfig+0x274>)
 8003d24:	4313      	orrs	r3, r2
 8003d26:	600b      	str	r3, [r1, #0]
 8003d28:	e015      	b.n	8003d56 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d2a:	4b24      	ldr	r3, [pc, #144]	; (8003dbc <HAL_RCC_OscConfig+0x278>)
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d30:	f7fe faf6 	bl	8002320 <HAL_GetTick>
 8003d34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d36:	e008      	b.n	8003d4a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d38:	f7fe faf2 	bl	8002320 <HAL_GetTick>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	2b02      	cmp	r3, #2
 8003d44:	d901      	bls.n	8003d4a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	e193      	b.n	8004072 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d4a:	4b1b      	ldr	r3, [pc, #108]	; (8003db8 <HAL_RCC_OscConfig+0x274>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0302 	and.w	r3, r3, #2
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d1f0      	bne.n	8003d38 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 0308 	and.w	r3, r3, #8
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d036      	beq.n	8003dd0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	695b      	ldr	r3, [r3, #20]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d016      	beq.n	8003d98 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d6a:	4b15      	ldr	r3, [pc, #84]	; (8003dc0 <HAL_RCC_OscConfig+0x27c>)
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d70:	f7fe fad6 	bl	8002320 <HAL_GetTick>
 8003d74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d76:	e008      	b.n	8003d8a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d78:	f7fe fad2 	bl	8002320 <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d901      	bls.n	8003d8a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e173      	b.n	8004072 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d8a:	4b0b      	ldr	r3, [pc, #44]	; (8003db8 <HAL_RCC_OscConfig+0x274>)
 8003d8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d8e:	f003 0302 	and.w	r3, r3, #2
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d0f0      	beq.n	8003d78 <HAL_RCC_OscConfig+0x234>
 8003d96:	e01b      	b.n	8003dd0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d98:	4b09      	ldr	r3, [pc, #36]	; (8003dc0 <HAL_RCC_OscConfig+0x27c>)
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d9e:	f7fe fabf 	bl	8002320 <HAL_GetTick>
 8003da2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003da4:	e00e      	b.n	8003dc4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003da6:	f7fe fabb 	bl	8002320 <HAL_GetTick>
 8003daa:	4602      	mov	r2, r0
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	1ad3      	subs	r3, r2, r3
 8003db0:	2b02      	cmp	r3, #2
 8003db2:	d907      	bls.n	8003dc4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003db4:	2303      	movs	r3, #3
 8003db6:	e15c      	b.n	8004072 <HAL_RCC_OscConfig+0x52e>
 8003db8:	40023800 	.word	0x40023800
 8003dbc:	42470000 	.word	0x42470000
 8003dc0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dc4:	4b8a      	ldr	r3, [pc, #552]	; (8003ff0 <HAL_RCC_OscConfig+0x4ac>)
 8003dc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dc8:	f003 0302 	and.w	r3, r3, #2
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d1ea      	bne.n	8003da6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 0304 	and.w	r3, r3, #4
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	f000 8097 	beq.w	8003f0c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dde:	2300      	movs	r3, #0
 8003de0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003de2:	4b83      	ldr	r3, [pc, #524]	; (8003ff0 <HAL_RCC_OscConfig+0x4ac>)
 8003de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d10f      	bne.n	8003e0e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dee:	2300      	movs	r3, #0
 8003df0:	60bb      	str	r3, [r7, #8]
 8003df2:	4b7f      	ldr	r3, [pc, #508]	; (8003ff0 <HAL_RCC_OscConfig+0x4ac>)
 8003df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df6:	4a7e      	ldr	r2, [pc, #504]	; (8003ff0 <HAL_RCC_OscConfig+0x4ac>)
 8003df8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dfc:	6413      	str	r3, [r2, #64]	; 0x40
 8003dfe:	4b7c      	ldr	r3, [pc, #496]	; (8003ff0 <HAL_RCC_OscConfig+0x4ac>)
 8003e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e06:	60bb      	str	r3, [r7, #8]
 8003e08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e0e:	4b79      	ldr	r3, [pc, #484]	; (8003ff4 <HAL_RCC_OscConfig+0x4b0>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d118      	bne.n	8003e4c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e1a:	4b76      	ldr	r3, [pc, #472]	; (8003ff4 <HAL_RCC_OscConfig+0x4b0>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a75      	ldr	r2, [pc, #468]	; (8003ff4 <HAL_RCC_OscConfig+0x4b0>)
 8003e20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e26:	f7fe fa7b 	bl	8002320 <HAL_GetTick>
 8003e2a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e2c:	e008      	b.n	8003e40 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e2e:	f7fe fa77 	bl	8002320 <HAL_GetTick>
 8003e32:	4602      	mov	r2, r0
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	1ad3      	subs	r3, r2, r3
 8003e38:	2b02      	cmp	r3, #2
 8003e3a:	d901      	bls.n	8003e40 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003e3c:	2303      	movs	r3, #3
 8003e3e:	e118      	b.n	8004072 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e40:	4b6c      	ldr	r3, [pc, #432]	; (8003ff4 <HAL_RCC_OscConfig+0x4b0>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d0f0      	beq.n	8003e2e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d106      	bne.n	8003e62 <HAL_RCC_OscConfig+0x31e>
 8003e54:	4b66      	ldr	r3, [pc, #408]	; (8003ff0 <HAL_RCC_OscConfig+0x4ac>)
 8003e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e58:	4a65      	ldr	r2, [pc, #404]	; (8003ff0 <HAL_RCC_OscConfig+0x4ac>)
 8003e5a:	f043 0301 	orr.w	r3, r3, #1
 8003e5e:	6713      	str	r3, [r2, #112]	; 0x70
 8003e60:	e01c      	b.n	8003e9c <HAL_RCC_OscConfig+0x358>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	2b05      	cmp	r3, #5
 8003e68:	d10c      	bne.n	8003e84 <HAL_RCC_OscConfig+0x340>
 8003e6a:	4b61      	ldr	r3, [pc, #388]	; (8003ff0 <HAL_RCC_OscConfig+0x4ac>)
 8003e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e6e:	4a60      	ldr	r2, [pc, #384]	; (8003ff0 <HAL_RCC_OscConfig+0x4ac>)
 8003e70:	f043 0304 	orr.w	r3, r3, #4
 8003e74:	6713      	str	r3, [r2, #112]	; 0x70
 8003e76:	4b5e      	ldr	r3, [pc, #376]	; (8003ff0 <HAL_RCC_OscConfig+0x4ac>)
 8003e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e7a:	4a5d      	ldr	r2, [pc, #372]	; (8003ff0 <HAL_RCC_OscConfig+0x4ac>)
 8003e7c:	f043 0301 	orr.w	r3, r3, #1
 8003e80:	6713      	str	r3, [r2, #112]	; 0x70
 8003e82:	e00b      	b.n	8003e9c <HAL_RCC_OscConfig+0x358>
 8003e84:	4b5a      	ldr	r3, [pc, #360]	; (8003ff0 <HAL_RCC_OscConfig+0x4ac>)
 8003e86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e88:	4a59      	ldr	r2, [pc, #356]	; (8003ff0 <HAL_RCC_OscConfig+0x4ac>)
 8003e8a:	f023 0301 	bic.w	r3, r3, #1
 8003e8e:	6713      	str	r3, [r2, #112]	; 0x70
 8003e90:	4b57      	ldr	r3, [pc, #348]	; (8003ff0 <HAL_RCC_OscConfig+0x4ac>)
 8003e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e94:	4a56      	ldr	r2, [pc, #344]	; (8003ff0 <HAL_RCC_OscConfig+0x4ac>)
 8003e96:	f023 0304 	bic.w	r3, r3, #4
 8003e9a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d015      	beq.n	8003ed0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ea4:	f7fe fa3c 	bl	8002320 <HAL_GetTick>
 8003ea8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eaa:	e00a      	b.n	8003ec2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003eac:	f7fe fa38 	bl	8002320 <HAL_GetTick>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d901      	bls.n	8003ec2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e0d7      	b.n	8004072 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ec2:	4b4b      	ldr	r3, [pc, #300]	; (8003ff0 <HAL_RCC_OscConfig+0x4ac>)
 8003ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ec6:	f003 0302 	and.w	r3, r3, #2
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d0ee      	beq.n	8003eac <HAL_RCC_OscConfig+0x368>
 8003ece:	e014      	b.n	8003efa <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ed0:	f7fe fa26 	bl	8002320 <HAL_GetTick>
 8003ed4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ed6:	e00a      	b.n	8003eee <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ed8:	f7fe fa22 	bl	8002320 <HAL_GetTick>
 8003edc:	4602      	mov	r2, r0
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d901      	bls.n	8003eee <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	e0c1      	b.n	8004072 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003eee:	4b40      	ldr	r3, [pc, #256]	; (8003ff0 <HAL_RCC_OscConfig+0x4ac>)
 8003ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef2:	f003 0302 	and.w	r3, r3, #2
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d1ee      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003efa:	7dfb      	ldrb	r3, [r7, #23]
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d105      	bne.n	8003f0c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f00:	4b3b      	ldr	r3, [pc, #236]	; (8003ff0 <HAL_RCC_OscConfig+0x4ac>)
 8003f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f04:	4a3a      	ldr	r2, [pc, #232]	; (8003ff0 <HAL_RCC_OscConfig+0x4ac>)
 8003f06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f0a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	699b      	ldr	r3, [r3, #24]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	f000 80ad 	beq.w	8004070 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f16:	4b36      	ldr	r3, [pc, #216]	; (8003ff0 <HAL_RCC_OscConfig+0x4ac>)
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	f003 030c 	and.w	r3, r3, #12
 8003f1e:	2b08      	cmp	r3, #8
 8003f20:	d060      	beq.n	8003fe4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	699b      	ldr	r3, [r3, #24]
 8003f26:	2b02      	cmp	r3, #2
 8003f28:	d145      	bne.n	8003fb6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f2a:	4b33      	ldr	r3, [pc, #204]	; (8003ff8 <HAL_RCC_OscConfig+0x4b4>)
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f30:	f7fe f9f6 	bl	8002320 <HAL_GetTick>
 8003f34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f36:	e008      	b.n	8003f4a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f38:	f7fe f9f2 	bl	8002320 <HAL_GetTick>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	2b02      	cmp	r3, #2
 8003f44:	d901      	bls.n	8003f4a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003f46:	2303      	movs	r3, #3
 8003f48:	e093      	b.n	8004072 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f4a:	4b29      	ldr	r3, [pc, #164]	; (8003ff0 <HAL_RCC_OscConfig+0x4ac>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d1f0      	bne.n	8003f38 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	69da      	ldr	r2, [r3, #28]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6a1b      	ldr	r3, [r3, #32]
 8003f5e:	431a      	orrs	r2, r3
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f64:	019b      	lsls	r3, r3, #6
 8003f66:	431a      	orrs	r2, r3
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f6c:	085b      	lsrs	r3, r3, #1
 8003f6e:	3b01      	subs	r3, #1
 8003f70:	041b      	lsls	r3, r3, #16
 8003f72:	431a      	orrs	r2, r3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f78:	061b      	lsls	r3, r3, #24
 8003f7a:	431a      	orrs	r2, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f80:	071b      	lsls	r3, r3, #28
 8003f82:	491b      	ldr	r1, [pc, #108]	; (8003ff0 <HAL_RCC_OscConfig+0x4ac>)
 8003f84:	4313      	orrs	r3, r2
 8003f86:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f88:	4b1b      	ldr	r3, [pc, #108]	; (8003ff8 <HAL_RCC_OscConfig+0x4b4>)
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f8e:	f7fe f9c7 	bl	8002320 <HAL_GetTick>
 8003f92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f94:	e008      	b.n	8003fa8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f96:	f7fe f9c3 	bl	8002320 <HAL_GetTick>
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	1ad3      	subs	r3, r2, r3
 8003fa0:	2b02      	cmp	r3, #2
 8003fa2:	d901      	bls.n	8003fa8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003fa4:	2303      	movs	r3, #3
 8003fa6:	e064      	b.n	8004072 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fa8:	4b11      	ldr	r3, [pc, #68]	; (8003ff0 <HAL_RCC_OscConfig+0x4ac>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d0f0      	beq.n	8003f96 <HAL_RCC_OscConfig+0x452>
 8003fb4:	e05c      	b.n	8004070 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fb6:	4b10      	ldr	r3, [pc, #64]	; (8003ff8 <HAL_RCC_OscConfig+0x4b4>)
 8003fb8:	2200      	movs	r2, #0
 8003fba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fbc:	f7fe f9b0 	bl	8002320 <HAL_GetTick>
 8003fc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fc2:	e008      	b.n	8003fd6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fc4:	f7fe f9ac 	bl	8002320 <HAL_GetTick>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	2b02      	cmp	r3, #2
 8003fd0:	d901      	bls.n	8003fd6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	e04d      	b.n	8004072 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fd6:	4b06      	ldr	r3, [pc, #24]	; (8003ff0 <HAL_RCC_OscConfig+0x4ac>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d1f0      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x480>
 8003fe2:	e045      	b.n	8004070 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	699b      	ldr	r3, [r3, #24]
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d107      	bne.n	8003ffc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e040      	b.n	8004072 <HAL_RCC_OscConfig+0x52e>
 8003ff0:	40023800 	.word	0x40023800
 8003ff4:	40007000 	.word	0x40007000
 8003ff8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ffc:	4b1f      	ldr	r3, [pc, #124]	; (800407c <HAL_RCC_OscConfig+0x538>)
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	699b      	ldr	r3, [r3, #24]
 8004006:	2b01      	cmp	r3, #1
 8004008:	d030      	beq.n	800406c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004014:	429a      	cmp	r2, r3
 8004016:	d129      	bne.n	800406c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004022:	429a      	cmp	r2, r3
 8004024:	d122      	bne.n	800406c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004026:	68fa      	ldr	r2, [r7, #12]
 8004028:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800402c:	4013      	ands	r3, r2
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004032:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004034:	4293      	cmp	r3, r2
 8004036:	d119      	bne.n	800406c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004042:	085b      	lsrs	r3, r3, #1
 8004044:	3b01      	subs	r3, #1
 8004046:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004048:	429a      	cmp	r2, r3
 800404a:	d10f      	bne.n	800406c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004056:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004058:	429a      	cmp	r2, r3
 800405a:	d107      	bne.n	800406c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004066:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004068:	429a      	cmp	r2, r3
 800406a:	d001      	beq.n	8004070 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e000      	b.n	8004072 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004070:	2300      	movs	r3, #0
}
 8004072:	4618      	mov	r0, r3
 8004074:	3718      	adds	r7, #24
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	40023800 	.word	0x40023800

08004080 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b082      	sub	sp, #8
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d101      	bne.n	8004092 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e041      	b.n	8004116 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004098:	b2db      	uxtb	r3, r3
 800409a:	2b00      	cmp	r3, #0
 800409c:	d106      	bne.n	80040ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f7fd fecc 	bl	8001e44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2202      	movs	r2, #2
 80040b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	3304      	adds	r3, #4
 80040bc:	4619      	mov	r1, r3
 80040be:	4610      	mov	r0, r2
 80040c0:	f000 fad8 	bl	8004674 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2201      	movs	r2, #1
 80040e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2201      	movs	r2, #1
 80040e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2201      	movs	r2, #1
 80040f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2201      	movs	r2, #1
 8004108:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004114:	2300      	movs	r3, #0
}
 8004116:	4618      	mov	r0, r3
 8004118:	3708      	adds	r7, #8
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}

0800411e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800411e:	b580      	push	{r7, lr}
 8004120:	b082      	sub	sp, #8
 8004122:	af00      	add	r7, sp, #0
 8004124:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d101      	bne.n	8004130 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	e041      	b.n	80041b4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004136:	b2db      	uxtb	r3, r3
 8004138:	2b00      	cmp	r3, #0
 800413a:	d106      	bne.n	800414a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	f000 f839 	bl	80041bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2202      	movs	r2, #2
 800414e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	3304      	adds	r3, #4
 800415a:	4619      	mov	r1, r3
 800415c:	4610      	mov	r0, r2
 800415e:	f000 fa89 	bl	8004674 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2201      	movs	r2, #1
 8004166:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2201      	movs	r2, #1
 800416e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2201      	movs	r2, #1
 8004176:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2201      	movs	r2, #1
 800417e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2201      	movs	r2, #1
 8004186:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2201      	movs	r2, #1
 800418e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2201      	movs	r2, #1
 8004196:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2201      	movs	r2, #1
 800419e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2201      	movs	r2, #1
 80041a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2201      	movs	r2, #1
 80041ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041b2:	2300      	movs	r3, #0
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3708      	adds	r7, #8
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}

080041bc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80041bc:	b480      	push	{r7}
 80041be:	b083      	sub	sp, #12
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80041c4:	bf00      	nop
 80041c6:	370c      	adds	r7, #12
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr

080041d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d109      	bne.n	80041f4 <HAL_TIM_PWM_Start+0x24>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	bf14      	ite	ne
 80041ec:	2301      	movne	r3, #1
 80041ee:	2300      	moveq	r3, #0
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	e022      	b.n	800423a <HAL_TIM_PWM_Start+0x6a>
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	2b04      	cmp	r3, #4
 80041f8:	d109      	bne.n	800420e <HAL_TIM_PWM_Start+0x3e>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004200:	b2db      	uxtb	r3, r3
 8004202:	2b01      	cmp	r3, #1
 8004204:	bf14      	ite	ne
 8004206:	2301      	movne	r3, #1
 8004208:	2300      	moveq	r3, #0
 800420a:	b2db      	uxtb	r3, r3
 800420c:	e015      	b.n	800423a <HAL_TIM_PWM_Start+0x6a>
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	2b08      	cmp	r3, #8
 8004212:	d109      	bne.n	8004228 <HAL_TIM_PWM_Start+0x58>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800421a:	b2db      	uxtb	r3, r3
 800421c:	2b01      	cmp	r3, #1
 800421e:	bf14      	ite	ne
 8004220:	2301      	movne	r3, #1
 8004222:	2300      	moveq	r3, #0
 8004224:	b2db      	uxtb	r3, r3
 8004226:	e008      	b.n	800423a <HAL_TIM_PWM_Start+0x6a>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800422e:	b2db      	uxtb	r3, r3
 8004230:	2b01      	cmp	r3, #1
 8004232:	bf14      	ite	ne
 8004234:	2301      	movne	r3, #1
 8004236:	2300      	moveq	r3, #0
 8004238:	b2db      	uxtb	r3, r3
 800423a:	2b00      	cmp	r3, #0
 800423c:	d001      	beq.n	8004242 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e07c      	b.n	800433c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d104      	bne.n	8004252 <HAL_TIM_PWM_Start+0x82>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2202      	movs	r2, #2
 800424c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004250:	e013      	b.n	800427a <HAL_TIM_PWM_Start+0xaa>
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	2b04      	cmp	r3, #4
 8004256:	d104      	bne.n	8004262 <HAL_TIM_PWM_Start+0x92>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2202      	movs	r2, #2
 800425c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004260:	e00b      	b.n	800427a <HAL_TIM_PWM_Start+0xaa>
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	2b08      	cmp	r3, #8
 8004266:	d104      	bne.n	8004272 <HAL_TIM_PWM_Start+0xa2>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2202      	movs	r2, #2
 800426c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004270:	e003      	b.n	800427a <HAL_TIM_PWM_Start+0xaa>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2202      	movs	r2, #2
 8004276:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	2201      	movs	r2, #1
 8004280:	6839      	ldr	r1, [r7, #0]
 8004282:	4618      	mov	r0, r3
 8004284:	f000 fce0 	bl	8004c48 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a2d      	ldr	r2, [pc, #180]	; (8004344 <HAL_TIM_PWM_Start+0x174>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d004      	beq.n	800429c <HAL_TIM_PWM_Start+0xcc>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a2c      	ldr	r2, [pc, #176]	; (8004348 <HAL_TIM_PWM_Start+0x178>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d101      	bne.n	80042a0 <HAL_TIM_PWM_Start+0xd0>
 800429c:	2301      	movs	r3, #1
 800429e:	e000      	b.n	80042a2 <HAL_TIM_PWM_Start+0xd2>
 80042a0:	2300      	movs	r3, #0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d007      	beq.n	80042b6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80042b4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a22      	ldr	r2, [pc, #136]	; (8004344 <HAL_TIM_PWM_Start+0x174>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d022      	beq.n	8004306 <HAL_TIM_PWM_Start+0x136>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042c8:	d01d      	beq.n	8004306 <HAL_TIM_PWM_Start+0x136>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a1f      	ldr	r2, [pc, #124]	; (800434c <HAL_TIM_PWM_Start+0x17c>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d018      	beq.n	8004306 <HAL_TIM_PWM_Start+0x136>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a1d      	ldr	r2, [pc, #116]	; (8004350 <HAL_TIM_PWM_Start+0x180>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d013      	beq.n	8004306 <HAL_TIM_PWM_Start+0x136>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a1c      	ldr	r2, [pc, #112]	; (8004354 <HAL_TIM_PWM_Start+0x184>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d00e      	beq.n	8004306 <HAL_TIM_PWM_Start+0x136>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a16      	ldr	r2, [pc, #88]	; (8004348 <HAL_TIM_PWM_Start+0x178>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d009      	beq.n	8004306 <HAL_TIM_PWM_Start+0x136>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a18      	ldr	r2, [pc, #96]	; (8004358 <HAL_TIM_PWM_Start+0x188>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d004      	beq.n	8004306 <HAL_TIM_PWM_Start+0x136>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a16      	ldr	r2, [pc, #88]	; (800435c <HAL_TIM_PWM_Start+0x18c>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d111      	bne.n	800432a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	f003 0307 	and.w	r3, r3, #7
 8004310:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2b06      	cmp	r3, #6
 8004316:	d010      	beq.n	800433a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f042 0201 	orr.w	r2, r2, #1
 8004326:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004328:	e007      	b.n	800433a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f042 0201 	orr.w	r2, r2, #1
 8004338:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800433a:	2300      	movs	r3, #0
}
 800433c:	4618      	mov	r0, r3
 800433e:	3710      	adds	r7, #16
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}
 8004344:	40010000 	.word	0x40010000
 8004348:	40010400 	.word	0x40010400
 800434c:	40000400 	.word	0x40000400
 8004350:	40000800 	.word	0x40000800
 8004354:	40000c00 	.word	0x40000c00
 8004358:	40014000 	.word	0x40014000
 800435c:	40001800 	.word	0x40001800

08004360 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b086      	sub	sp, #24
 8004364:	af00      	add	r7, sp, #0
 8004366:	60f8      	str	r0, [r7, #12]
 8004368:	60b9      	str	r1, [r7, #8]
 800436a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800436c:	2300      	movs	r3, #0
 800436e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004376:	2b01      	cmp	r3, #1
 8004378:	d101      	bne.n	800437e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800437a:	2302      	movs	r3, #2
 800437c:	e0ae      	b.n	80044dc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2201      	movs	r2, #1
 8004382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2b0c      	cmp	r3, #12
 800438a:	f200 809f 	bhi.w	80044cc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800438e:	a201      	add	r2, pc, #4	; (adr r2, 8004394 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004394:	080043c9 	.word	0x080043c9
 8004398:	080044cd 	.word	0x080044cd
 800439c:	080044cd 	.word	0x080044cd
 80043a0:	080044cd 	.word	0x080044cd
 80043a4:	08004409 	.word	0x08004409
 80043a8:	080044cd 	.word	0x080044cd
 80043ac:	080044cd 	.word	0x080044cd
 80043b0:	080044cd 	.word	0x080044cd
 80043b4:	0800444b 	.word	0x0800444b
 80043b8:	080044cd 	.word	0x080044cd
 80043bc:	080044cd 	.word	0x080044cd
 80043c0:	080044cd 	.word	0x080044cd
 80043c4:	0800448b 	.word	0x0800448b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	68b9      	ldr	r1, [r7, #8]
 80043ce:	4618      	mov	r0, r3
 80043d0:	f000 f9f0 	bl	80047b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	699a      	ldr	r2, [r3, #24]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f042 0208 	orr.w	r2, r2, #8
 80043e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	699a      	ldr	r2, [r3, #24]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f022 0204 	bic.w	r2, r2, #4
 80043f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	6999      	ldr	r1, [r3, #24]
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	691a      	ldr	r2, [r3, #16]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	430a      	orrs	r2, r1
 8004404:	619a      	str	r2, [r3, #24]
      break;
 8004406:	e064      	b.n	80044d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	68b9      	ldr	r1, [r7, #8]
 800440e:	4618      	mov	r0, r3
 8004410:	f000 fa40 	bl	8004894 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	699a      	ldr	r2, [r3, #24]
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004422:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	699a      	ldr	r2, [r3, #24]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004432:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	6999      	ldr	r1, [r3, #24]
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	691b      	ldr	r3, [r3, #16]
 800443e:	021a      	lsls	r2, r3, #8
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	430a      	orrs	r2, r1
 8004446:	619a      	str	r2, [r3, #24]
      break;
 8004448:	e043      	b.n	80044d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	68b9      	ldr	r1, [r7, #8]
 8004450:	4618      	mov	r0, r3
 8004452:	f000 fa95 	bl	8004980 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	69da      	ldr	r2, [r3, #28]
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f042 0208 	orr.w	r2, r2, #8
 8004464:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	69da      	ldr	r2, [r3, #28]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f022 0204 	bic.w	r2, r2, #4
 8004474:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	69d9      	ldr	r1, [r3, #28]
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	691a      	ldr	r2, [r3, #16]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	430a      	orrs	r2, r1
 8004486:	61da      	str	r2, [r3, #28]
      break;
 8004488:	e023      	b.n	80044d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	68b9      	ldr	r1, [r7, #8]
 8004490:	4618      	mov	r0, r3
 8004492:	f000 fae9 	bl	8004a68 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	69da      	ldr	r2, [r3, #28]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	69da      	ldr	r2, [r3, #28]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	69d9      	ldr	r1, [r3, #28]
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	691b      	ldr	r3, [r3, #16]
 80044c0:	021a      	lsls	r2, r3, #8
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	430a      	orrs	r2, r1
 80044c8:	61da      	str	r2, [r3, #28]
      break;
 80044ca:	e002      	b.n	80044d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	75fb      	strb	r3, [r7, #23]
      break;
 80044d0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2200      	movs	r2, #0
 80044d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80044da:	7dfb      	ldrb	r3, [r7, #23]
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3718      	adds	r7, #24
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}

080044e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b084      	sub	sp, #16
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044ee:	2300      	movs	r3, #0
 80044f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d101      	bne.n	8004500 <HAL_TIM_ConfigClockSource+0x1c>
 80044fc:	2302      	movs	r3, #2
 80044fe:	e0b4      	b.n	800466a <HAL_TIM_ConfigClockSource+0x186>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2202      	movs	r2, #2
 800450c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800451e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004526:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	68ba      	ldr	r2, [r7, #8]
 800452e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004538:	d03e      	beq.n	80045b8 <HAL_TIM_ConfigClockSource+0xd4>
 800453a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800453e:	f200 8087 	bhi.w	8004650 <HAL_TIM_ConfigClockSource+0x16c>
 8004542:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004546:	f000 8086 	beq.w	8004656 <HAL_TIM_ConfigClockSource+0x172>
 800454a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800454e:	d87f      	bhi.n	8004650 <HAL_TIM_ConfigClockSource+0x16c>
 8004550:	2b70      	cmp	r3, #112	; 0x70
 8004552:	d01a      	beq.n	800458a <HAL_TIM_ConfigClockSource+0xa6>
 8004554:	2b70      	cmp	r3, #112	; 0x70
 8004556:	d87b      	bhi.n	8004650 <HAL_TIM_ConfigClockSource+0x16c>
 8004558:	2b60      	cmp	r3, #96	; 0x60
 800455a:	d050      	beq.n	80045fe <HAL_TIM_ConfigClockSource+0x11a>
 800455c:	2b60      	cmp	r3, #96	; 0x60
 800455e:	d877      	bhi.n	8004650 <HAL_TIM_ConfigClockSource+0x16c>
 8004560:	2b50      	cmp	r3, #80	; 0x50
 8004562:	d03c      	beq.n	80045de <HAL_TIM_ConfigClockSource+0xfa>
 8004564:	2b50      	cmp	r3, #80	; 0x50
 8004566:	d873      	bhi.n	8004650 <HAL_TIM_ConfigClockSource+0x16c>
 8004568:	2b40      	cmp	r3, #64	; 0x40
 800456a:	d058      	beq.n	800461e <HAL_TIM_ConfigClockSource+0x13a>
 800456c:	2b40      	cmp	r3, #64	; 0x40
 800456e:	d86f      	bhi.n	8004650 <HAL_TIM_ConfigClockSource+0x16c>
 8004570:	2b30      	cmp	r3, #48	; 0x30
 8004572:	d064      	beq.n	800463e <HAL_TIM_ConfigClockSource+0x15a>
 8004574:	2b30      	cmp	r3, #48	; 0x30
 8004576:	d86b      	bhi.n	8004650 <HAL_TIM_ConfigClockSource+0x16c>
 8004578:	2b20      	cmp	r3, #32
 800457a:	d060      	beq.n	800463e <HAL_TIM_ConfigClockSource+0x15a>
 800457c:	2b20      	cmp	r3, #32
 800457e:	d867      	bhi.n	8004650 <HAL_TIM_ConfigClockSource+0x16c>
 8004580:	2b00      	cmp	r3, #0
 8004582:	d05c      	beq.n	800463e <HAL_TIM_ConfigClockSource+0x15a>
 8004584:	2b10      	cmp	r3, #16
 8004586:	d05a      	beq.n	800463e <HAL_TIM_ConfigClockSource+0x15a>
 8004588:	e062      	b.n	8004650 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6818      	ldr	r0, [r3, #0]
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	6899      	ldr	r1, [r3, #8]
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	685a      	ldr	r2, [r3, #4]
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	f000 fb35 	bl	8004c08 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80045ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	68ba      	ldr	r2, [r7, #8]
 80045b4:	609a      	str	r2, [r3, #8]
      break;
 80045b6:	e04f      	b.n	8004658 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6818      	ldr	r0, [r3, #0]
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	6899      	ldr	r1, [r3, #8]
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	685a      	ldr	r2, [r3, #4]
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	f000 fb1e 	bl	8004c08 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	689a      	ldr	r2, [r3, #8]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80045da:	609a      	str	r2, [r3, #8]
      break;
 80045dc:	e03c      	b.n	8004658 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6818      	ldr	r0, [r3, #0]
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	6859      	ldr	r1, [r3, #4]
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	461a      	mov	r2, r3
 80045ec:	f000 fa92 	bl	8004b14 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	2150      	movs	r1, #80	; 0x50
 80045f6:	4618      	mov	r0, r3
 80045f8:	f000 faeb 	bl	8004bd2 <TIM_ITRx_SetConfig>
      break;
 80045fc:	e02c      	b.n	8004658 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6818      	ldr	r0, [r3, #0]
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	6859      	ldr	r1, [r3, #4]
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	461a      	mov	r2, r3
 800460c:	f000 fab1 	bl	8004b72 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	2160      	movs	r1, #96	; 0x60
 8004616:	4618      	mov	r0, r3
 8004618:	f000 fadb 	bl	8004bd2 <TIM_ITRx_SetConfig>
      break;
 800461c:	e01c      	b.n	8004658 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6818      	ldr	r0, [r3, #0]
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	6859      	ldr	r1, [r3, #4]
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	68db      	ldr	r3, [r3, #12]
 800462a:	461a      	mov	r2, r3
 800462c:	f000 fa72 	bl	8004b14 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	2140      	movs	r1, #64	; 0x40
 8004636:	4618      	mov	r0, r3
 8004638:	f000 facb 	bl	8004bd2 <TIM_ITRx_SetConfig>
      break;
 800463c:	e00c      	b.n	8004658 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4619      	mov	r1, r3
 8004648:	4610      	mov	r0, r2
 800464a:	f000 fac2 	bl	8004bd2 <TIM_ITRx_SetConfig>
      break;
 800464e:	e003      	b.n	8004658 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	73fb      	strb	r3, [r7, #15]
      break;
 8004654:	e000      	b.n	8004658 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004656:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2201      	movs	r2, #1
 800465c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004668:	7bfb      	ldrb	r3, [r7, #15]
}
 800466a:	4618      	mov	r0, r3
 800466c:	3710      	adds	r7, #16
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}
	...

08004674 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004674:	b480      	push	{r7}
 8004676:	b085      	sub	sp, #20
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	4a40      	ldr	r2, [pc, #256]	; (8004788 <TIM_Base_SetConfig+0x114>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d013      	beq.n	80046b4 <TIM_Base_SetConfig+0x40>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004692:	d00f      	beq.n	80046b4 <TIM_Base_SetConfig+0x40>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	4a3d      	ldr	r2, [pc, #244]	; (800478c <TIM_Base_SetConfig+0x118>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d00b      	beq.n	80046b4 <TIM_Base_SetConfig+0x40>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	4a3c      	ldr	r2, [pc, #240]	; (8004790 <TIM_Base_SetConfig+0x11c>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d007      	beq.n	80046b4 <TIM_Base_SetConfig+0x40>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	4a3b      	ldr	r2, [pc, #236]	; (8004794 <TIM_Base_SetConfig+0x120>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d003      	beq.n	80046b4 <TIM_Base_SetConfig+0x40>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	4a3a      	ldr	r2, [pc, #232]	; (8004798 <TIM_Base_SetConfig+0x124>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d108      	bne.n	80046c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	68fa      	ldr	r2, [r7, #12]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4a2f      	ldr	r2, [pc, #188]	; (8004788 <TIM_Base_SetConfig+0x114>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d02b      	beq.n	8004726 <TIM_Base_SetConfig+0xb2>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046d4:	d027      	beq.n	8004726 <TIM_Base_SetConfig+0xb2>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4a2c      	ldr	r2, [pc, #176]	; (800478c <TIM_Base_SetConfig+0x118>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d023      	beq.n	8004726 <TIM_Base_SetConfig+0xb2>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	4a2b      	ldr	r2, [pc, #172]	; (8004790 <TIM_Base_SetConfig+0x11c>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d01f      	beq.n	8004726 <TIM_Base_SetConfig+0xb2>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4a2a      	ldr	r2, [pc, #168]	; (8004794 <TIM_Base_SetConfig+0x120>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d01b      	beq.n	8004726 <TIM_Base_SetConfig+0xb2>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4a29      	ldr	r2, [pc, #164]	; (8004798 <TIM_Base_SetConfig+0x124>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d017      	beq.n	8004726 <TIM_Base_SetConfig+0xb2>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4a28      	ldr	r2, [pc, #160]	; (800479c <TIM_Base_SetConfig+0x128>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d013      	beq.n	8004726 <TIM_Base_SetConfig+0xb2>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4a27      	ldr	r2, [pc, #156]	; (80047a0 <TIM_Base_SetConfig+0x12c>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d00f      	beq.n	8004726 <TIM_Base_SetConfig+0xb2>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4a26      	ldr	r2, [pc, #152]	; (80047a4 <TIM_Base_SetConfig+0x130>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d00b      	beq.n	8004726 <TIM_Base_SetConfig+0xb2>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	4a25      	ldr	r2, [pc, #148]	; (80047a8 <TIM_Base_SetConfig+0x134>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d007      	beq.n	8004726 <TIM_Base_SetConfig+0xb2>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4a24      	ldr	r2, [pc, #144]	; (80047ac <TIM_Base_SetConfig+0x138>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d003      	beq.n	8004726 <TIM_Base_SetConfig+0xb2>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4a23      	ldr	r2, [pc, #140]	; (80047b0 <TIM_Base_SetConfig+0x13c>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d108      	bne.n	8004738 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800472c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	68db      	ldr	r3, [r3, #12]
 8004732:	68fa      	ldr	r2, [r7, #12]
 8004734:	4313      	orrs	r3, r2
 8004736:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	695b      	ldr	r3, [r3, #20]
 8004742:	4313      	orrs	r3, r2
 8004744:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	68fa      	ldr	r2, [r7, #12]
 800474a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	689a      	ldr	r2, [r3, #8]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	4a0a      	ldr	r2, [pc, #40]	; (8004788 <TIM_Base_SetConfig+0x114>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d003      	beq.n	800476c <TIM_Base_SetConfig+0xf8>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	4a0c      	ldr	r2, [pc, #48]	; (8004798 <TIM_Base_SetConfig+0x124>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d103      	bne.n	8004774 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	691a      	ldr	r2, [r3, #16]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2201      	movs	r2, #1
 8004778:	615a      	str	r2, [r3, #20]
}
 800477a:	bf00      	nop
 800477c:	3714      	adds	r7, #20
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr
 8004786:	bf00      	nop
 8004788:	40010000 	.word	0x40010000
 800478c:	40000400 	.word	0x40000400
 8004790:	40000800 	.word	0x40000800
 8004794:	40000c00 	.word	0x40000c00
 8004798:	40010400 	.word	0x40010400
 800479c:	40014000 	.word	0x40014000
 80047a0:	40014400 	.word	0x40014400
 80047a4:	40014800 	.word	0x40014800
 80047a8:	40001800 	.word	0x40001800
 80047ac:	40001c00 	.word	0x40001c00
 80047b0:	40002000 	.word	0x40002000

080047b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b087      	sub	sp, #28
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
 80047bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6a1b      	ldr	r3, [r3, #32]
 80047c2:	f023 0201 	bic.w	r2, r3, #1
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6a1b      	ldr	r3, [r3, #32]
 80047ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	699b      	ldr	r3, [r3, #24]
 80047da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f023 0303 	bic.w	r3, r3, #3
 80047ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	68fa      	ldr	r2, [r7, #12]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	f023 0302 	bic.w	r3, r3, #2
 80047fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	697a      	ldr	r2, [r7, #20]
 8004804:	4313      	orrs	r3, r2
 8004806:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	4a20      	ldr	r2, [pc, #128]	; (800488c <TIM_OC1_SetConfig+0xd8>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d003      	beq.n	8004818 <TIM_OC1_SetConfig+0x64>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	4a1f      	ldr	r2, [pc, #124]	; (8004890 <TIM_OC1_SetConfig+0xdc>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d10c      	bne.n	8004832 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	f023 0308 	bic.w	r3, r3, #8
 800481e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	68db      	ldr	r3, [r3, #12]
 8004824:	697a      	ldr	r2, [r7, #20]
 8004826:	4313      	orrs	r3, r2
 8004828:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	f023 0304 	bic.w	r3, r3, #4
 8004830:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	4a15      	ldr	r2, [pc, #84]	; (800488c <TIM_OC1_SetConfig+0xd8>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d003      	beq.n	8004842 <TIM_OC1_SetConfig+0x8e>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4a14      	ldr	r2, [pc, #80]	; (8004890 <TIM_OC1_SetConfig+0xdc>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d111      	bne.n	8004866 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004848:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004850:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	695b      	ldr	r3, [r3, #20]
 8004856:	693a      	ldr	r2, [r7, #16]
 8004858:	4313      	orrs	r3, r2
 800485a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	699b      	ldr	r3, [r3, #24]
 8004860:	693a      	ldr	r2, [r7, #16]
 8004862:	4313      	orrs	r3, r2
 8004864:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	693a      	ldr	r2, [r7, #16]
 800486a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	68fa      	ldr	r2, [r7, #12]
 8004870:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	685a      	ldr	r2, [r3, #4]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	697a      	ldr	r2, [r7, #20]
 800487e:	621a      	str	r2, [r3, #32]
}
 8004880:	bf00      	nop
 8004882:	371c      	adds	r7, #28
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr
 800488c:	40010000 	.word	0x40010000
 8004890:	40010400 	.word	0x40010400

08004894 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004894:	b480      	push	{r7}
 8004896:	b087      	sub	sp, #28
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6a1b      	ldr	r3, [r3, #32]
 80048a2:	f023 0210 	bic.w	r2, r3, #16
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6a1b      	ldr	r3, [r3, #32]
 80048ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	699b      	ldr	r3, [r3, #24]
 80048ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	021b      	lsls	r3, r3, #8
 80048d2:	68fa      	ldr	r2, [r7, #12]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	f023 0320 	bic.w	r3, r3, #32
 80048de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	011b      	lsls	r3, r3, #4
 80048e6:	697a      	ldr	r2, [r7, #20]
 80048e8:	4313      	orrs	r3, r2
 80048ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	4a22      	ldr	r2, [pc, #136]	; (8004978 <TIM_OC2_SetConfig+0xe4>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d003      	beq.n	80048fc <TIM_OC2_SetConfig+0x68>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	4a21      	ldr	r2, [pc, #132]	; (800497c <TIM_OC2_SetConfig+0xe8>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d10d      	bne.n	8004918 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004902:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	68db      	ldr	r3, [r3, #12]
 8004908:	011b      	lsls	r3, r3, #4
 800490a:	697a      	ldr	r2, [r7, #20]
 800490c:	4313      	orrs	r3, r2
 800490e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004916:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	4a17      	ldr	r2, [pc, #92]	; (8004978 <TIM_OC2_SetConfig+0xe4>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d003      	beq.n	8004928 <TIM_OC2_SetConfig+0x94>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	4a16      	ldr	r2, [pc, #88]	; (800497c <TIM_OC2_SetConfig+0xe8>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d113      	bne.n	8004950 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800492e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004936:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	695b      	ldr	r3, [r3, #20]
 800493c:	009b      	lsls	r3, r3, #2
 800493e:	693a      	ldr	r2, [r7, #16]
 8004940:	4313      	orrs	r3, r2
 8004942:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	699b      	ldr	r3, [r3, #24]
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	693a      	ldr	r2, [r7, #16]
 800494c:	4313      	orrs	r3, r2
 800494e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	693a      	ldr	r2, [r7, #16]
 8004954:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	68fa      	ldr	r2, [r7, #12]
 800495a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	685a      	ldr	r2, [r3, #4]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	697a      	ldr	r2, [r7, #20]
 8004968:	621a      	str	r2, [r3, #32]
}
 800496a:	bf00      	nop
 800496c:	371c      	adds	r7, #28
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr
 8004976:	bf00      	nop
 8004978:	40010000 	.word	0x40010000
 800497c:	40010400 	.word	0x40010400

08004980 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004980:	b480      	push	{r7}
 8004982:	b087      	sub	sp, #28
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6a1b      	ldr	r3, [r3, #32]
 800498e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a1b      	ldr	r3, [r3, #32]
 800499a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	69db      	ldr	r3, [r3, #28]
 80049a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f023 0303 	bic.w	r3, r3, #3
 80049b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	68fa      	ldr	r2, [r7, #12]
 80049be:	4313      	orrs	r3, r2
 80049c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80049c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	021b      	lsls	r3, r3, #8
 80049d0:	697a      	ldr	r2, [r7, #20]
 80049d2:	4313      	orrs	r3, r2
 80049d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	4a21      	ldr	r2, [pc, #132]	; (8004a60 <TIM_OC3_SetConfig+0xe0>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d003      	beq.n	80049e6 <TIM_OC3_SetConfig+0x66>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4a20      	ldr	r2, [pc, #128]	; (8004a64 <TIM_OC3_SetConfig+0xe4>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d10d      	bne.n	8004a02 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80049ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	68db      	ldr	r3, [r3, #12]
 80049f2:	021b      	lsls	r3, r3, #8
 80049f4:	697a      	ldr	r2, [r7, #20]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a16      	ldr	r2, [pc, #88]	; (8004a60 <TIM_OC3_SetConfig+0xe0>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d003      	beq.n	8004a12 <TIM_OC3_SetConfig+0x92>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a15      	ldr	r2, [pc, #84]	; (8004a64 <TIM_OC3_SetConfig+0xe4>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d113      	bne.n	8004a3a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	695b      	ldr	r3, [r3, #20]
 8004a26:	011b      	lsls	r3, r3, #4
 8004a28:	693a      	ldr	r2, [r7, #16]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	699b      	ldr	r3, [r3, #24]
 8004a32:	011b      	lsls	r3, r3, #4
 8004a34:	693a      	ldr	r2, [r7, #16]
 8004a36:	4313      	orrs	r3, r2
 8004a38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	693a      	ldr	r2, [r7, #16]
 8004a3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	68fa      	ldr	r2, [r7, #12]
 8004a44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	685a      	ldr	r2, [r3, #4]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	697a      	ldr	r2, [r7, #20]
 8004a52:	621a      	str	r2, [r3, #32]
}
 8004a54:	bf00      	nop
 8004a56:	371c      	adds	r7, #28
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr
 8004a60:	40010000 	.word	0x40010000
 8004a64:	40010400 	.word	0x40010400

08004a68 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b087      	sub	sp, #28
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6a1b      	ldr	r3, [r3, #32]
 8004a76:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6a1b      	ldr	r3, [r3, #32]
 8004a82:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	69db      	ldr	r3, [r3, #28]
 8004a8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	021b      	lsls	r3, r3, #8
 8004aa6:	68fa      	ldr	r2, [r7, #12]
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ab2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	031b      	lsls	r3, r3, #12
 8004aba:	693a      	ldr	r2, [r7, #16]
 8004abc:	4313      	orrs	r3, r2
 8004abe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	4a12      	ldr	r2, [pc, #72]	; (8004b0c <TIM_OC4_SetConfig+0xa4>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d003      	beq.n	8004ad0 <TIM_OC4_SetConfig+0x68>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	4a11      	ldr	r2, [pc, #68]	; (8004b10 <TIM_OC4_SetConfig+0xa8>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d109      	bne.n	8004ae4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ad6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	695b      	ldr	r3, [r3, #20]
 8004adc:	019b      	lsls	r3, r3, #6
 8004ade:	697a      	ldr	r2, [r7, #20]
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	697a      	ldr	r2, [r7, #20]
 8004ae8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	68fa      	ldr	r2, [r7, #12]
 8004aee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	685a      	ldr	r2, [r3, #4]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	693a      	ldr	r2, [r7, #16]
 8004afc:	621a      	str	r2, [r3, #32]
}
 8004afe:	bf00      	nop
 8004b00:	371c      	adds	r7, #28
 8004b02:	46bd      	mov	sp, r7
 8004b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b08:	4770      	bx	lr
 8004b0a:	bf00      	nop
 8004b0c:	40010000 	.word	0x40010000
 8004b10:	40010400 	.word	0x40010400

08004b14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b087      	sub	sp, #28
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	60f8      	str	r0, [r7, #12]
 8004b1c:	60b9      	str	r1, [r7, #8]
 8004b1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6a1b      	ldr	r3, [r3, #32]
 8004b24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	6a1b      	ldr	r3, [r3, #32]
 8004b2a:	f023 0201 	bic.w	r2, r3, #1
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	699b      	ldr	r3, [r3, #24]
 8004b36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	011b      	lsls	r3, r3, #4
 8004b44:	693a      	ldr	r2, [r7, #16]
 8004b46:	4313      	orrs	r3, r2
 8004b48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	f023 030a 	bic.w	r3, r3, #10
 8004b50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b52:	697a      	ldr	r2, [r7, #20]
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	4313      	orrs	r3, r2
 8004b58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	693a      	ldr	r2, [r7, #16]
 8004b5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	697a      	ldr	r2, [r7, #20]
 8004b64:	621a      	str	r2, [r3, #32]
}
 8004b66:	bf00      	nop
 8004b68:	371c      	adds	r7, #28
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr

08004b72 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b72:	b480      	push	{r7}
 8004b74:	b087      	sub	sp, #28
 8004b76:	af00      	add	r7, sp, #0
 8004b78:	60f8      	str	r0, [r7, #12]
 8004b7a:	60b9      	str	r1, [r7, #8]
 8004b7c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	6a1b      	ldr	r3, [r3, #32]
 8004b82:	f023 0210 	bic.w	r2, r3, #16
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	699b      	ldr	r3, [r3, #24]
 8004b8e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	6a1b      	ldr	r3, [r3, #32]
 8004b94:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b9c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	031b      	lsls	r3, r3, #12
 8004ba2:	697a      	ldr	r2, [r7, #20]
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004bae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	011b      	lsls	r3, r3, #4
 8004bb4:	693a      	ldr	r2, [r7, #16]
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	697a      	ldr	r2, [r7, #20]
 8004bbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	693a      	ldr	r2, [r7, #16]
 8004bc4:	621a      	str	r2, [r3, #32]
}
 8004bc6:	bf00      	nop
 8004bc8:	371c      	adds	r7, #28
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr

08004bd2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004bd2:	b480      	push	{r7}
 8004bd4:	b085      	sub	sp, #20
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	6078      	str	r0, [r7, #4]
 8004bda:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004be8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004bea:	683a      	ldr	r2, [r7, #0]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	f043 0307 	orr.w	r3, r3, #7
 8004bf4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	68fa      	ldr	r2, [r7, #12]
 8004bfa:	609a      	str	r2, [r3, #8]
}
 8004bfc:	bf00      	nop
 8004bfe:	3714      	adds	r7, #20
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr

08004c08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b087      	sub	sp, #28
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	60f8      	str	r0, [r7, #12]
 8004c10:	60b9      	str	r1, [r7, #8]
 8004c12:	607a      	str	r2, [r7, #4]
 8004c14:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c22:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	021a      	lsls	r2, r3, #8
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	431a      	orrs	r2, r3
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	697a      	ldr	r2, [r7, #20]
 8004c32:	4313      	orrs	r3, r2
 8004c34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	697a      	ldr	r2, [r7, #20]
 8004c3a:	609a      	str	r2, [r3, #8]
}
 8004c3c:	bf00      	nop
 8004c3e:	371c      	adds	r7, #28
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr

08004c48 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b087      	sub	sp, #28
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	60f8      	str	r0, [r7, #12]
 8004c50:	60b9      	str	r1, [r7, #8]
 8004c52:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	f003 031f 	and.w	r3, r3, #31
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c60:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	6a1a      	ldr	r2, [r3, #32]
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	43db      	mvns	r3, r3
 8004c6a:	401a      	ands	r2, r3
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	6a1a      	ldr	r2, [r3, #32]
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	f003 031f 	and.w	r3, r3, #31
 8004c7a:	6879      	ldr	r1, [r7, #4]
 8004c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8004c80:	431a      	orrs	r2, r3
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	621a      	str	r2, [r3, #32]
}
 8004c86:	bf00      	nop
 8004c88:	371c      	adds	r7, #28
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr
	...

08004c94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b085      	sub	sp, #20
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
 8004c9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d101      	bne.n	8004cac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ca8:	2302      	movs	r3, #2
 8004caa:	e05a      	b.n	8004d62 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2202      	movs	r2, #2
 8004cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cd2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	68fa      	ldr	r2, [r7, #12]
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	68fa      	ldr	r2, [r7, #12]
 8004ce4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a21      	ldr	r2, [pc, #132]	; (8004d70 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d022      	beq.n	8004d36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cf8:	d01d      	beq.n	8004d36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a1d      	ldr	r2, [pc, #116]	; (8004d74 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d018      	beq.n	8004d36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a1b      	ldr	r2, [pc, #108]	; (8004d78 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d013      	beq.n	8004d36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a1a      	ldr	r2, [pc, #104]	; (8004d7c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d00e      	beq.n	8004d36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a18      	ldr	r2, [pc, #96]	; (8004d80 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d009      	beq.n	8004d36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a17      	ldr	r2, [pc, #92]	; (8004d84 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d004      	beq.n	8004d36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a15      	ldr	r2, [pc, #84]	; (8004d88 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d10c      	bne.n	8004d50 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d3c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	68ba      	ldr	r2, [r7, #8]
 8004d44:	4313      	orrs	r3, r2
 8004d46:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	68ba      	ldr	r2, [r7, #8]
 8004d4e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d60:	2300      	movs	r3, #0
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3714      	adds	r7, #20
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr
 8004d6e:	bf00      	nop
 8004d70:	40010000 	.word	0x40010000
 8004d74:	40000400 	.word	0x40000400
 8004d78:	40000800 	.word	0x40000800
 8004d7c:	40000c00 	.word	0x40000c00
 8004d80:	40010400 	.word	0x40010400
 8004d84:	40014000 	.word	0x40014000
 8004d88:	40001800 	.word	0x40001800

08004d8c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b085      	sub	sp, #20
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004d96:	2300      	movs	r3, #0
 8004d98:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d101      	bne.n	8004da8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004da4:	2302      	movs	r3, #2
 8004da6:	e03d      	b.n	8004e24 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2201      	movs	r2, #1
 8004dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4313      	orrs	r3, r2
 8004de6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	691b      	ldr	r3, [r3, #16]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	695b      	ldr	r3, [r3, #20]
 8004e00:	4313      	orrs	r3, r2
 8004e02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	69db      	ldr	r3, [r3, #28]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	68fa      	ldr	r2, [r7, #12]
 8004e18:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e22:	2300      	movs	r3, #0
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3714      	adds	r7, #20
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr

08004e30 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b082      	sub	sp, #8
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d101      	bne.n	8004e42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e03f      	b.n	8004ec2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e48:	b2db      	uxtb	r3, r3
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d106      	bne.n	8004e5c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2200      	movs	r2, #0
 8004e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f7fd f88c 	bl	8001f74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2224      	movs	r2, #36	; 0x24
 8004e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	68da      	ldr	r2, [r3, #12]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e72:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f000 f829 	bl	8004ecc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	691a      	ldr	r2, [r3, #16]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e88:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	695a      	ldr	r2, [r3, #20]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e98:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	68da      	ldr	r2, [r3, #12]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ea8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2200      	movs	r2, #0
 8004eae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2220      	movs	r2, #32
 8004eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2220      	movs	r2, #32
 8004ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004ec0:	2300      	movs	r3, #0
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3708      	adds	r7, #8
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}
	...

08004ecc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ecc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ed0:	b0c0      	sub	sp, #256	; 0x100
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	691b      	ldr	r3, [r3, #16]
 8004ee0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ee8:	68d9      	ldr	r1, [r3, #12]
 8004eea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	ea40 0301 	orr.w	r3, r0, r1
 8004ef4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004ef6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004efa:	689a      	ldr	r2, [r3, #8]
 8004efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f00:	691b      	ldr	r3, [r3, #16]
 8004f02:	431a      	orrs	r2, r3
 8004f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f08:	695b      	ldr	r3, [r3, #20]
 8004f0a:	431a      	orrs	r2, r3
 8004f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f10:	69db      	ldr	r3, [r3, #28]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	68db      	ldr	r3, [r3, #12]
 8004f20:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004f24:	f021 010c 	bic.w	r1, r1, #12
 8004f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004f32:	430b      	orrs	r3, r1
 8004f34:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	695b      	ldr	r3, [r3, #20]
 8004f3e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004f42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f46:	6999      	ldr	r1, [r3, #24]
 8004f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	ea40 0301 	orr.w	r3, r0, r1
 8004f52:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	4b8f      	ldr	r3, [pc, #572]	; (8005198 <UART_SetConfig+0x2cc>)
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d005      	beq.n	8004f6c <UART_SetConfig+0xa0>
 8004f60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	4b8d      	ldr	r3, [pc, #564]	; (800519c <UART_SetConfig+0x2d0>)
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d104      	bne.n	8004f76 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004f6c:	f7fe fba6 	bl	80036bc <HAL_RCC_GetPCLK2Freq>
 8004f70:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004f74:	e003      	b.n	8004f7e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004f76:	f7fe fb8d 	bl	8003694 <HAL_RCC_GetPCLK1Freq>
 8004f7a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f82:	69db      	ldr	r3, [r3, #28]
 8004f84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f88:	f040 810c 	bne.w	80051a4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004f8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f90:	2200      	movs	r2, #0
 8004f92:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004f96:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004f9a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004f9e:	4622      	mov	r2, r4
 8004fa0:	462b      	mov	r3, r5
 8004fa2:	1891      	adds	r1, r2, r2
 8004fa4:	65b9      	str	r1, [r7, #88]	; 0x58
 8004fa6:	415b      	adcs	r3, r3
 8004fa8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004faa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004fae:	4621      	mov	r1, r4
 8004fb0:	eb12 0801 	adds.w	r8, r2, r1
 8004fb4:	4629      	mov	r1, r5
 8004fb6:	eb43 0901 	adc.w	r9, r3, r1
 8004fba:	f04f 0200 	mov.w	r2, #0
 8004fbe:	f04f 0300 	mov.w	r3, #0
 8004fc2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004fc6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004fca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004fce:	4690      	mov	r8, r2
 8004fd0:	4699      	mov	r9, r3
 8004fd2:	4623      	mov	r3, r4
 8004fd4:	eb18 0303 	adds.w	r3, r8, r3
 8004fd8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004fdc:	462b      	mov	r3, r5
 8004fde:	eb49 0303 	adc.w	r3, r9, r3
 8004fe2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004fe6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	2200      	movs	r2, #0
 8004fee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004ff2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004ff6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004ffa:	460b      	mov	r3, r1
 8004ffc:	18db      	adds	r3, r3, r3
 8004ffe:	653b      	str	r3, [r7, #80]	; 0x50
 8005000:	4613      	mov	r3, r2
 8005002:	eb42 0303 	adc.w	r3, r2, r3
 8005006:	657b      	str	r3, [r7, #84]	; 0x54
 8005008:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800500c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005010:	f7fb fb04 	bl	800061c <__aeabi_uldivmod>
 8005014:	4602      	mov	r2, r0
 8005016:	460b      	mov	r3, r1
 8005018:	4b61      	ldr	r3, [pc, #388]	; (80051a0 <UART_SetConfig+0x2d4>)
 800501a:	fba3 2302 	umull	r2, r3, r3, r2
 800501e:	095b      	lsrs	r3, r3, #5
 8005020:	011c      	lsls	r4, r3, #4
 8005022:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005026:	2200      	movs	r2, #0
 8005028:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800502c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005030:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005034:	4642      	mov	r2, r8
 8005036:	464b      	mov	r3, r9
 8005038:	1891      	adds	r1, r2, r2
 800503a:	64b9      	str	r1, [r7, #72]	; 0x48
 800503c:	415b      	adcs	r3, r3
 800503e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005040:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005044:	4641      	mov	r1, r8
 8005046:	eb12 0a01 	adds.w	sl, r2, r1
 800504a:	4649      	mov	r1, r9
 800504c:	eb43 0b01 	adc.w	fp, r3, r1
 8005050:	f04f 0200 	mov.w	r2, #0
 8005054:	f04f 0300 	mov.w	r3, #0
 8005058:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800505c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005060:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005064:	4692      	mov	sl, r2
 8005066:	469b      	mov	fp, r3
 8005068:	4643      	mov	r3, r8
 800506a:	eb1a 0303 	adds.w	r3, sl, r3
 800506e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005072:	464b      	mov	r3, r9
 8005074:	eb4b 0303 	adc.w	r3, fp, r3
 8005078:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800507c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	2200      	movs	r2, #0
 8005084:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005088:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800508c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005090:	460b      	mov	r3, r1
 8005092:	18db      	adds	r3, r3, r3
 8005094:	643b      	str	r3, [r7, #64]	; 0x40
 8005096:	4613      	mov	r3, r2
 8005098:	eb42 0303 	adc.w	r3, r2, r3
 800509c:	647b      	str	r3, [r7, #68]	; 0x44
 800509e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80050a2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80050a6:	f7fb fab9 	bl	800061c <__aeabi_uldivmod>
 80050aa:	4602      	mov	r2, r0
 80050ac:	460b      	mov	r3, r1
 80050ae:	4611      	mov	r1, r2
 80050b0:	4b3b      	ldr	r3, [pc, #236]	; (80051a0 <UART_SetConfig+0x2d4>)
 80050b2:	fba3 2301 	umull	r2, r3, r3, r1
 80050b6:	095b      	lsrs	r3, r3, #5
 80050b8:	2264      	movs	r2, #100	; 0x64
 80050ba:	fb02 f303 	mul.w	r3, r2, r3
 80050be:	1acb      	subs	r3, r1, r3
 80050c0:	00db      	lsls	r3, r3, #3
 80050c2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80050c6:	4b36      	ldr	r3, [pc, #216]	; (80051a0 <UART_SetConfig+0x2d4>)
 80050c8:	fba3 2302 	umull	r2, r3, r3, r2
 80050cc:	095b      	lsrs	r3, r3, #5
 80050ce:	005b      	lsls	r3, r3, #1
 80050d0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80050d4:	441c      	add	r4, r3
 80050d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050da:	2200      	movs	r2, #0
 80050dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80050e0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80050e4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80050e8:	4642      	mov	r2, r8
 80050ea:	464b      	mov	r3, r9
 80050ec:	1891      	adds	r1, r2, r2
 80050ee:	63b9      	str	r1, [r7, #56]	; 0x38
 80050f0:	415b      	adcs	r3, r3
 80050f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80050f8:	4641      	mov	r1, r8
 80050fa:	1851      	adds	r1, r2, r1
 80050fc:	6339      	str	r1, [r7, #48]	; 0x30
 80050fe:	4649      	mov	r1, r9
 8005100:	414b      	adcs	r3, r1
 8005102:	637b      	str	r3, [r7, #52]	; 0x34
 8005104:	f04f 0200 	mov.w	r2, #0
 8005108:	f04f 0300 	mov.w	r3, #0
 800510c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005110:	4659      	mov	r1, fp
 8005112:	00cb      	lsls	r3, r1, #3
 8005114:	4651      	mov	r1, sl
 8005116:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800511a:	4651      	mov	r1, sl
 800511c:	00ca      	lsls	r2, r1, #3
 800511e:	4610      	mov	r0, r2
 8005120:	4619      	mov	r1, r3
 8005122:	4603      	mov	r3, r0
 8005124:	4642      	mov	r2, r8
 8005126:	189b      	adds	r3, r3, r2
 8005128:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800512c:	464b      	mov	r3, r9
 800512e:	460a      	mov	r2, r1
 8005130:	eb42 0303 	adc.w	r3, r2, r3
 8005134:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	2200      	movs	r2, #0
 8005140:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005144:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005148:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800514c:	460b      	mov	r3, r1
 800514e:	18db      	adds	r3, r3, r3
 8005150:	62bb      	str	r3, [r7, #40]	; 0x28
 8005152:	4613      	mov	r3, r2
 8005154:	eb42 0303 	adc.w	r3, r2, r3
 8005158:	62fb      	str	r3, [r7, #44]	; 0x2c
 800515a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800515e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005162:	f7fb fa5b 	bl	800061c <__aeabi_uldivmod>
 8005166:	4602      	mov	r2, r0
 8005168:	460b      	mov	r3, r1
 800516a:	4b0d      	ldr	r3, [pc, #52]	; (80051a0 <UART_SetConfig+0x2d4>)
 800516c:	fba3 1302 	umull	r1, r3, r3, r2
 8005170:	095b      	lsrs	r3, r3, #5
 8005172:	2164      	movs	r1, #100	; 0x64
 8005174:	fb01 f303 	mul.w	r3, r1, r3
 8005178:	1ad3      	subs	r3, r2, r3
 800517a:	00db      	lsls	r3, r3, #3
 800517c:	3332      	adds	r3, #50	; 0x32
 800517e:	4a08      	ldr	r2, [pc, #32]	; (80051a0 <UART_SetConfig+0x2d4>)
 8005180:	fba2 2303 	umull	r2, r3, r2, r3
 8005184:	095b      	lsrs	r3, r3, #5
 8005186:	f003 0207 	and.w	r2, r3, #7
 800518a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4422      	add	r2, r4
 8005192:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005194:	e105      	b.n	80053a2 <UART_SetConfig+0x4d6>
 8005196:	bf00      	nop
 8005198:	40011000 	.word	0x40011000
 800519c:	40011400 	.word	0x40011400
 80051a0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80051a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051a8:	2200      	movs	r2, #0
 80051aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80051ae:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80051b2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80051b6:	4642      	mov	r2, r8
 80051b8:	464b      	mov	r3, r9
 80051ba:	1891      	adds	r1, r2, r2
 80051bc:	6239      	str	r1, [r7, #32]
 80051be:	415b      	adcs	r3, r3
 80051c0:	627b      	str	r3, [r7, #36]	; 0x24
 80051c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80051c6:	4641      	mov	r1, r8
 80051c8:	1854      	adds	r4, r2, r1
 80051ca:	4649      	mov	r1, r9
 80051cc:	eb43 0501 	adc.w	r5, r3, r1
 80051d0:	f04f 0200 	mov.w	r2, #0
 80051d4:	f04f 0300 	mov.w	r3, #0
 80051d8:	00eb      	lsls	r3, r5, #3
 80051da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80051de:	00e2      	lsls	r2, r4, #3
 80051e0:	4614      	mov	r4, r2
 80051e2:	461d      	mov	r5, r3
 80051e4:	4643      	mov	r3, r8
 80051e6:	18e3      	adds	r3, r4, r3
 80051e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80051ec:	464b      	mov	r3, r9
 80051ee:	eb45 0303 	adc.w	r3, r5, r3
 80051f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80051f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	2200      	movs	r2, #0
 80051fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005202:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005206:	f04f 0200 	mov.w	r2, #0
 800520a:	f04f 0300 	mov.w	r3, #0
 800520e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005212:	4629      	mov	r1, r5
 8005214:	008b      	lsls	r3, r1, #2
 8005216:	4621      	mov	r1, r4
 8005218:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800521c:	4621      	mov	r1, r4
 800521e:	008a      	lsls	r2, r1, #2
 8005220:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005224:	f7fb f9fa 	bl	800061c <__aeabi_uldivmod>
 8005228:	4602      	mov	r2, r0
 800522a:	460b      	mov	r3, r1
 800522c:	4b60      	ldr	r3, [pc, #384]	; (80053b0 <UART_SetConfig+0x4e4>)
 800522e:	fba3 2302 	umull	r2, r3, r3, r2
 8005232:	095b      	lsrs	r3, r3, #5
 8005234:	011c      	lsls	r4, r3, #4
 8005236:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800523a:	2200      	movs	r2, #0
 800523c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005240:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005244:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005248:	4642      	mov	r2, r8
 800524a:	464b      	mov	r3, r9
 800524c:	1891      	adds	r1, r2, r2
 800524e:	61b9      	str	r1, [r7, #24]
 8005250:	415b      	adcs	r3, r3
 8005252:	61fb      	str	r3, [r7, #28]
 8005254:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005258:	4641      	mov	r1, r8
 800525a:	1851      	adds	r1, r2, r1
 800525c:	6139      	str	r1, [r7, #16]
 800525e:	4649      	mov	r1, r9
 8005260:	414b      	adcs	r3, r1
 8005262:	617b      	str	r3, [r7, #20]
 8005264:	f04f 0200 	mov.w	r2, #0
 8005268:	f04f 0300 	mov.w	r3, #0
 800526c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005270:	4659      	mov	r1, fp
 8005272:	00cb      	lsls	r3, r1, #3
 8005274:	4651      	mov	r1, sl
 8005276:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800527a:	4651      	mov	r1, sl
 800527c:	00ca      	lsls	r2, r1, #3
 800527e:	4610      	mov	r0, r2
 8005280:	4619      	mov	r1, r3
 8005282:	4603      	mov	r3, r0
 8005284:	4642      	mov	r2, r8
 8005286:	189b      	adds	r3, r3, r2
 8005288:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800528c:	464b      	mov	r3, r9
 800528e:	460a      	mov	r2, r1
 8005290:	eb42 0303 	adc.w	r3, r2, r3
 8005294:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	2200      	movs	r2, #0
 80052a0:	67bb      	str	r3, [r7, #120]	; 0x78
 80052a2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80052a4:	f04f 0200 	mov.w	r2, #0
 80052a8:	f04f 0300 	mov.w	r3, #0
 80052ac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80052b0:	4649      	mov	r1, r9
 80052b2:	008b      	lsls	r3, r1, #2
 80052b4:	4641      	mov	r1, r8
 80052b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80052ba:	4641      	mov	r1, r8
 80052bc:	008a      	lsls	r2, r1, #2
 80052be:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80052c2:	f7fb f9ab 	bl	800061c <__aeabi_uldivmod>
 80052c6:	4602      	mov	r2, r0
 80052c8:	460b      	mov	r3, r1
 80052ca:	4b39      	ldr	r3, [pc, #228]	; (80053b0 <UART_SetConfig+0x4e4>)
 80052cc:	fba3 1302 	umull	r1, r3, r3, r2
 80052d0:	095b      	lsrs	r3, r3, #5
 80052d2:	2164      	movs	r1, #100	; 0x64
 80052d4:	fb01 f303 	mul.w	r3, r1, r3
 80052d8:	1ad3      	subs	r3, r2, r3
 80052da:	011b      	lsls	r3, r3, #4
 80052dc:	3332      	adds	r3, #50	; 0x32
 80052de:	4a34      	ldr	r2, [pc, #208]	; (80053b0 <UART_SetConfig+0x4e4>)
 80052e0:	fba2 2303 	umull	r2, r3, r2, r3
 80052e4:	095b      	lsrs	r3, r3, #5
 80052e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80052ea:	441c      	add	r4, r3
 80052ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052f0:	2200      	movs	r2, #0
 80052f2:	673b      	str	r3, [r7, #112]	; 0x70
 80052f4:	677a      	str	r2, [r7, #116]	; 0x74
 80052f6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80052fa:	4642      	mov	r2, r8
 80052fc:	464b      	mov	r3, r9
 80052fe:	1891      	adds	r1, r2, r2
 8005300:	60b9      	str	r1, [r7, #8]
 8005302:	415b      	adcs	r3, r3
 8005304:	60fb      	str	r3, [r7, #12]
 8005306:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800530a:	4641      	mov	r1, r8
 800530c:	1851      	adds	r1, r2, r1
 800530e:	6039      	str	r1, [r7, #0]
 8005310:	4649      	mov	r1, r9
 8005312:	414b      	adcs	r3, r1
 8005314:	607b      	str	r3, [r7, #4]
 8005316:	f04f 0200 	mov.w	r2, #0
 800531a:	f04f 0300 	mov.w	r3, #0
 800531e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005322:	4659      	mov	r1, fp
 8005324:	00cb      	lsls	r3, r1, #3
 8005326:	4651      	mov	r1, sl
 8005328:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800532c:	4651      	mov	r1, sl
 800532e:	00ca      	lsls	r2, r1, #3
 8005330:	4610      	mov	r0, r2
 8005332:	4619      	mov	r1, r3
 8005334:	4603      	mov	r3, r0
 8005336:	4642      	mov	r2, r8
 8005338:	189b      	adds	r3, r3, r2
 800533a:	66bb      	str	r3, [r7, #104]	; 0x68
 800533c:	464b      	mov	r3, r9
 800533e:	460a      	mov	r2, r1
 8005340:	eb42 0303 	adc.w	r3, r2, r3
 8005344:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005346:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	2200      	movs	r2, #0
 800534e:	663b      	str	r3, [r7, #96]	; 0x60
 8005350:	667a      	str	r2, [r7, #100]	; 0x64
 8005352:	f04f 0200 	mov.w	r2, #0
 8005356:	f04f 0300 	mov.w	r3, #0
 800535a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800535e:	4649      	mov	r1, r9
 8005360:	008b      	lsls	r3, r1, #2
 8005362:	4641      	mov	r1, r8
 8005364:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005368:	4641      	mov	r1, r8
 800536a:	008a      	lsls	r2, r1, #2
 800536c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005370:	f7fb f954 	bl	800061c <__aeabi_uldivmod>
 8005374:	4602      	mov	r2, r0
 8005376:	460b      	mov	r3, r1
 8005378:	4b0d      	ldr	r3, [pc, #52]	; (80053b0 <UART_SetConfig+0x4e4>)
 800537a:	fba3 1302 	umull	r1, r3, r3, r2
 800537e:	095b      	lsrs	r3, r3, #5
 8005380:	2164      	movs	r1, #100	; 0x64
 8005382:	fb01 f303 	mul.w	r3, r1, r3
 8005386:	1ad3      	subs	r3, r2, r3
 8005388:	011b      	lsls	r3, r3, #4
 800538a:	3332      	adds	r3, #50	; 0x32
 800538c:	4a08      	ldr	r2, [pc, #32]	; (80053b0 <UART_SetConfig+0x4e4>)
 800538e:	fba2 2303 	umull	r2, r3, r2, r3
 8005392:	095b      	lsrs	r3, r3, #5
 8005394:	f003 020f 	and.w	r2, r3, #15
 8005398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4422      	add	r2, r4
 80053a0:	609a      	str	r2, [r3, #8]
}
 80053a2:	bf00      	nop
 80053a4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80053a8:	46bd      	mov	sp, r7
 80053aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053ae:	bf00      	nop
 80053b0:	51eb851f 	.word	0x51eb851f

080053b4 <__errno>:
 80053b4:	4b01      	ldr	r3, [pc, #4]	; (80053bc <__errno+0x8>)
 80053b6:	6818      	ldr	r0, [r3, #0]
 80053b8:	4770      	bx	lr
 80053ba:	bf00      	nop
 80053bc:	20000030 	.word	0x20000030

080053c0 <__libc_init_array>:
 80053c0:	b570      	push	{r4, r5, r6, lr}
 80053c2:	4d0d      	ldr	r5, [pc, #52]	; (80053f8 <__libc_init_array+0x38>)
 80053c4:	4c0d      	ldr	r4, [pc, #52]	; (80053fc <__libc_init_array+0x3c>)
 80053c6:	1b64      	subs	r4, r4, r5
 80053c8:	10a4      	asrs	r4, r4, #2
 80053ca:	2600      	movs	r6, #0
 80053cc:	42a6      	cmp	r6, r4
 80053ce:	d109      	bne.n	80053e4 <__libc_init_array+0x24>
 80053d0:	4d0b      	ldr	r5, [pc, #44]	; (8005400 <__libc_init_array+0x40>)
 80053d2:	4c0c      	ldr	r4, [pc, #48]	; (8005404 <__libc_init_array+0x44>)
 80053d4:	f000 fe04 	bl	8005fe0 <_init>
 80053d8:	1b64      	subs	r4, r4, r5
 80053da:	10a4      	asrs	r4, r4, #2
 80053dc:	2600      	movs	r6, #0
 80053de:	42a6      	cmp	r6, r4
 80053e0:	d105      	bne.n	80053ee <__libc_init_array+0x2e>
 80053e2:	bd70      	pop	{r4, r5, r6, pc}
 80053e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80053e8:	4798      	blx	r3
 80053ea:	3601      	adds	r6, #1
 80053ec:	e7ee      	b.n	80053cc <__libc_init_array+0xc>
 80053ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80053f2:	4798      	blx	r3
 80053f4:	3601      	adds	r6, #1
 80053f6:	e7f2      	b.n	80053de <__libc_init_array+0x1e>
 80053f8:	08006084 	.word	0x08006084
 80053fc:	08006084 	.word	0x08006084
 8005400:	08006084 	.word	0x08006084
 8005404:	08006088 	.word	0x08006088

08005408 <memcmp>:
 8005408:	b510      	push	{r4, lr}
 800540a:	3901      	subs	r1, #1
 800540c:	4402      	add	r2, r0
 800540e:	4290      	cmp	r0, r2
 8005410:	d101      	bne.n	8005416 <memcmp+0xe>
 8005412:	2000      	movs	r0, #0
 8005414:	e005      	b.n	8005422 <memcmp+0x1a>
 8005416:	7803      	ldrb	r3, [r0, #0]
 8005418:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800541c:	42a3      	cmp	r3, r4
 800541e:	d001      	beq.n	8005424 <memcmp+0x1c>
 8005420:	1b18      	subs	r0, r3, r4
 8005422:	bd10      	pop	{r4, pc}
 8005424:	3001      	adds	r0, #1
 8005426:	e7f2      	b.n	800540e <memcmp+0x6>

08005428 <memset>:
 8005428:	4402      	add	r2, r0
 800542a:	4603      	mov	r3, r0
 800542c:	4293      	cmp	r3, r2
 800542e:	d100      	bne.n	8005432 <memset+0xa>
 8005430:	4770      	bx	lr
 8005432:	f803 1b01 	strb.w	r1, [r3], #1
 8005436:	e7f9      	b.n	800542c <memset+0x4>

08005438 <_puts_r>:
 8005438:	b570      	push	{r4, r5, r6, lr}
 800543a:	460e      	mov	r6, r1
 800543c:	4605      	mov	r5, r0
 800543e:	b118      	cbz	r0, 8005448 <_puts_r+0x10>
 8005440:	6983      	ldr	r3, [r0, #24]
 8005442:	b90b      	cbnz	r3, 8005448 <_puts_r+0x10>
 8005444:	f000 fb16 	bl	8005a74 <__sinit>
 8005448:	69ab      	ldr	r3, [r5, #24]
 800544a:	68ac      	ldr	r4, [r5, #8]
 800544c:	b913      	cbnz	r3, 8005454 <_puts_r+0x1c>
 800544e:	4628      	mov	r0, r5
 8005450:	f000 fb10 	bl	8005a74 <__sinit>
 8005454:	4b2c      	ldr	r3, [pc, #176]	; (8005508 <_puts_r+0xd0>)
 8005456:	429c      	cmp	r4, r3
 8005458:	d120      	bne.n	800549c <_puts_r+0x64>
 800545a:	686c      	ldr	r4, [r5, #4]
 800545c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800545e:	07db      	lsls	r3, r3, #31
 8005460:	d405      	bmi.n	800546e <_puts_r+0x36>
 8005462:	89a3      	ldrh	r3, [r4, #12]
 8005464:	0598      	lsls	r0, r3, #22
 8005466:	d402      	bmi.n	800546e <_puts_r+0x36>
 8005468:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800546a:	f000 fba1 	bl	8005bb0 <__retarget_lock_acquire_recursive>
 800546e:	89a3      	ldrh	r3, [r4, #12]
 8005470:	0719      	lsls	r1, r3, #28
 8005472:	d51d      	bpl.n	80054b0 <_puts_r+0x78>
 8005474:	6923      	ldr	r3, [r4, #16]
 8005476:	b1db      	cbz	r3, 80054b0 <_puts_r+0x78>
 8005478:	3e01      	subs	r6, #1
 800547a:	68a3      	ldr	r3, [r4, #8]
 800547c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005480:	3b01      	subs	r3, #1
 8005482:	60a3      	str	r3, [r4, #8]
 8005484:	bb39      	cbnz	r1, 80054d6 <_puts_r+0x9e>
 8005486:	2b00      	cmp	r3, #0
 8005488:	da38      	bge.n	80054fc <_puts_r+0xc4>
 800548a:	4622      	mov	r2, r4
 800548c:	210a      	movs	r1, #10
 800548e:	4628      	mov	r0, r5
 8005490:	f000 f916 	bl	80056c0 <__swbuf_r>
 8005494:	3001      	adds	r0, #1
 8005496:	d011      	beq.n	80054bc <_puts_r+0x84>
 8005498:	250a      	movs	r5, #10
 800549a:	e011      	b.n	80054c0 <_puts_r+0x88>
 800549c:	4b1b      	ldr	r3, [pc, #108]	; (800550c <_puts_r+0xd4>)
 800549e:	429c      	cmp	r4, r3
 80054a0:	d101      	bne.n	80054a6 <_puts_r+0x6e>
 80054a2:	68ac      	ldr	r4, [r5, #8]
 80054a4:	e7da      	b.n	800545c <_puts_r+0x24>
 80054a6:	4b1a      	ldr	r3, [pc, #104]	; (8005510 <_puts_r+0xd8>)
 80054a8:	429c      	cmp	r4, r3
 80054aa:	bf08      	it	eq
 80054ac:	68ec      	ldreq	r4, [r5, #12]
 80054ae:	e7d5      	b.n	800545c <_puts_r+0x24>
 80054b0:	4621      	mov	r1, r4
 80054b2:	4628      	mov	r0, r5
 80054b4:	f000 f956 	bl	8005764 <__swsetup_r>
 80054b8:	2800      	cmp	r0, #0
 80054ba:	d0dd      	beq.n	8005478 <_puts_r+0x40>
 80054bc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80054c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80054c2:	07da      	lsls	r2, r3, #31
 80054c4:	d405      	bmi.n	80054d2 <_puts_r+0x9a>
 80054c6:	89a3      	ldrh	r3, [r4, #12]
 80054c8:	059b      	lsls	r3, r3, #22
 80054ca:	d402      	bmi.n	80054d2 <_puts_r+0x9a>
 80054cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80054ce:	f000 fb70 	bl	8005bb2 <__retarget_lock_release_recursive>
 80054d2:	4628      	mov	r0, r5
 80054d4:	bd70      	pop	{r4, r5, r6, pc}
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	da04      	bge.n	80054e4 <_puts_r+0xac>
 80054da:	69a2      	ldr	r2, [r4, #24]
 80054dc:	429a      	cmp	r2, r3
 80054de:	dc06      	bgt.n	80054ee <_puts_r+0xb6>
 80054e0:	290a      	cmp	r1, #10
 80054e2:	d004      	beq.n	80054ee <_puts_r+0xb6>
 80054e4:	6823      	ldr	r3, [r4, #0]
 80054e6:	1c5a      	adds	r2, r3, #1
 80054e8:	6022      	str	r2, [r4, #0]
 80054ea:	7019      	strb	r1, [r3, #0]
 80054ec:	e7c5      	b.n	800547a <_puts_r+0x42>
 80054ee:	4622      	mov	r2, r4
 80054f0:	4628      	mov	r0, r5
 80054f2:	f000 f8e5 	bl	80056c0 <__swbuf_r>
 80054f6:	3001      	adds	r0, #1
 80054f8:	d1bf      	bne.n	800547a <_puts_r+0x42>
 80054fa:	e7df      	b.n	80054bc <_puts_r+0x84>
 80054fc:	6823      	ldr	r3, [r4, #0]
 80054fe:	250a      	movs	r5, #10
 8005500:	1c5a      	adds	r2, r3, #1
 8005502:	6022      	str	r2, [r4, #0]
 8005504:	701d      	strb	r5, [r3, #0]
 8005506:	e7db      	b.n	80054c0 <_puts_r+0x88>
 8005508:	0800603c 	.word	0x0800603c
 800550c:	0800605c 	.word	0x0800605c
 8005510:	0800601c 	.word	0x0800601c

08005514 <puts>:
 8005514:	4b02      	ldr	r3, [pc, #8]	; (8005520 <puts+0xc>)
 8005516:	4601      	mov	r1, r0
 8005518:	6818      	ldr	r0, [r3, #0]
 800551a:	f7ff bf8d 	b.w	8005438 <_puts_r>
 800551e:	bf00      	nop
 8005520:	20000030 	.word	0x20000030

08005524 <setbuf>:
 8005524:	2900      	cmp	r1, #0
 8005526:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800552a:	bf0c      	ite	eq
 800552c:	2202      	moveq	r2, #2
 800552e:	2200      	movne	r2, #0
 8005530:	f000 b800 	b.w	8005534 <setvbuf>

08005534 <setvbuf>:
 8005534:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005538:	461d      	mov	r5, r3
 800553a:	4b5d      	ldr	r3, [pc, #372]	; (80056b0 <setvbuf+0x17c>)
 800553c:	681f      	ldr	r7, [r3, #0]
 800553e:	4604      	mov	r4, r0
 8005540:	460e      	mov	r6, r1
 8005542:	4690      	mov	r8, r2
 8005544:	b127      	cbz	r7, 8005550 <setvbuf+0x1c>
 8005546:	69bb      	ldr	r3, [r7, #24]
 8005548:	b913      	cbnz	r3, 8005550 <setvbuf+0x1c>
 800554a:	4638      	mov	r0, r7
 800554c:	f000 fa92 	bl	8005a74 <__sinit>
 8005550:	4b58      	ldr	r3, [pc, #352]	; (80056b4 <setvbuf+0x180>)
 8005552:	429c      	cmp	r4, r3
 8005554:	d167      	bne.n	8005626 <setvbuf+0xf2>
 8005556:	687c      	ldr	r4, [r7, #4]
 8005558:	f1b8 0f02 	cmp.w	r8, #2
 800555c:	d006      	beq.n	800556c <setvbuf+0x38>
 800555e:	f1b8 0f01 	cmp.w	r8, #1
 8005562:	f200 809f 	bhi.w	80056a4 <setvbuf+0x170>
 8005566:	2d00      	cmp	r5, #0
 8005568:	f2c0 809c 	blt.w	80056a4 <setvbuf+0x170>
 800556c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800556e:	07db      	lsls	r3, r3, #31
 8005570:	d405      	bmi.n	800557e <setvbuf+0x4a>
 8005572:	89a3      	ldrh	r3, [r4, #12]
 8005574:	0598      	lsls	r0, r3, #22
 8005576:	d402      	bmi.n	800557e <setvbuf+0x4a>
 8005578:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800557a:	f000 fb19 	bl	8005bb0 <__retarget_lock_acquire_recursive>
 800557e:	4621      	mov	r1, r4
 8005580:	4638      	mov	r0, r7
 8005582:	f000 f9e3 	bl	800594c <_fflush_r>
 8005586:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005588:	b141      	cbz	r1, 800559c <setvbuf+0x68>
 800558a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800558e:	4299      	cmp	r1, r3
 8005590:	d002      	beq.n	8005598 <setvbuf+0x64>
 8005592:	4638      	mov	r0, r7
 8005594:	f000 fb7c 	bl	8005c90 <_free_r>
 8005598:	2300      	movs	r3, #0
 800559a:	6363      	str	r3, [r4, #52]	; 0x34
 800559c:	2300      	movs	r3, #0
 800559e:	61a3      	str	r3, [r4, #24]
 80055a0:	6063      	str	r3, [r4, #4]
 80055a2:	89a3      	ldrh	r3, [r4, #12]
 80055a4:	0619      	lsls	r1, r3, #24
 80055a6:	d503      	bpl.n	80055b0 <setvbuf+0x7c>
 80055a8:	6921      	ldr	r1, [r4, #16]
 80055aa:	4638      	mov	r0, r7
 80055ac:	f000 fb70 	bl	8005c90 <_free_r>
 80055b0:	89a3      	ldrh	r3, [r4, #12]
 80055b2:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80055b6:	f023 0303 	bic.w	r3, r3, #3
 80055ba:	f1b8 0f02 	cmp.w	r8, #2
 80055be:	81a3      	strh	r3, [r4, #12]
 80055c0:	d06c      	beq.n	800569c <setvbuf+0x168>
 80055c2:	ab01      	add	r3, sp, #4
 80055c4:	466a      	mov	r2, sp
 80055c6:	4621      	mov	r1, r4
 80055c8:	4638      	mov	r0, r7
 80055ca:	f000 faf3 	bl	8005bb4 <__swhatbuf_r>
 80055ce:	89a3      	ldrh	r3, [r4, #12]
 80055d0:	4318      	orrs	r0, r3
 80055d2:	81a0      	strh	r0, [r4, #12]
 80055d4:	2d00      	cmp	r5, #0
 80055d6:	d130      	bne.n	800563a <setvbuf+0x106>
 80055d8:	9d00      	ldr	r5, [sp, #0]
 80055da:	4628      	mov	r0, r5
 80055dc:	f000 fb50 	bl	8005c80 <malloc>
 80055e0:	4606      	mov	r6, r0
 80055e2:	2800      	cmp	r0, #0
 80055e4:	d155      	bne.n	8005692 <setvbuf+0x15e>
 80055e6:	f8dd 9000 	ldr.w	r9, [sp]
 80055ea:	45a9      	cmp	r9, r5
 80055ec:	d14a      	bne.n	8005684 <setvbuf+0x150>
 80055ee:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80055f2:	2200      	movs	r2, #0
 80055f4:	60a2      	str	r2, [r4, #8]
 80055f6:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80055fa:	6022      	str	r2, [r4, #0]
 80055fc:	6122      	str	r2, [r4, #16]
 80055fe:	2201      	movs	r2, #1
 8005600:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005604:	6162      	str	r2, [r4, #20]
 8005606:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005608:	f043 0302 	orr.w	r3, r3, #2
 800560c:	07d2      	lsls	r2, r2, #31
 800560e:	81a3      	strh	r3, [r4, #12]
 8005610:	d405      	bmi.n	800561e <setvbuf+0xea>
 8005612:	f413 7f00 	tst.w	r3, #512	; 0x200
 8005616:	d102      	bne.n	800561e <setvbuf+0xea>
 8005618:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800561a:	f000 faca 	bl	8005bb2 <__retarget_lock_release_recursive>
 800561e:	4628      	mov	r0, r5
 8005620:	b003      	add	sp, #12
 8005622:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005626:	4b24      	ldr	r3, [pc, #144]	; (80056b8 <setvbuf+0x184>)
 8005628:	429c      	cmp	r4, r3
 800562a:	d101      	bne.n	8005630 <setvbuf+0xfc>
 800562c:	68bc      	ldr	r4, [r7, #8]
 800562e:	e793      	b.n	8005558 <setvbuf+0x24>
 8005630:	4b22      	ldr	r3, [pc, #136]	; (80056bc <setvbuf+0x188>)
 8005632:	429c      	cmp	r4, r3
 8005634:	bf08      	it	eq
 8005636:	68fc      	ldreq	r4, [r7, #12]
 8005638:	e78e      	b.n	8005558 <setvbuf+0x24>
 800563a:	2e00      	cmp	r6, #0
 800563c:	d0cd      	beq.n	80055da <setvbuf+0xa6>
 800563e:	69bb      	ldr	r3, [r7, #24]
 8005640:	b913      	cbnz	r3, 8005648 <setvbuf+0x114>
 8005642:	4638      	mov	r0, r7
 8005644:	f000 fa16 	bl	8005a74 <__sinit>
 8005648:	f1b8 0f01 	cmp.w	r8, #1
 800564c:	bf08      	it	eq
 800564e:	89a3      	ldrheq	r3, [r4, #12]
 8005650:	6026      	str	r6, [r4, #0]
 8005652:	bf04      	itt	eq
 8005654:	f043 0301 	orreq.w	r3, r3, #1
 8005658:	81a3      	strheq	r3, [r4, #12]
 800565a:	89a2      	ldrh	r2, [r4, #12]
 800565c:	f012 0308 	ands.w	r3, r2, #8
 8005660:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8005664:	d01c      	beq.n	80056a0 <setvbuf+0x16c>
 8005666:	07d3      	lsls	r3, r2, #31
 8005668:	bf41      	itttt	mi
 800566a:	2300      	movmi	r3, #0
 800566c:	426d      	negmi	r5, r5
 800566e:	60a3      	strmi	r3, [r4, #8]
 8005670:	61a5      	strmi	r5, [r4, #24]
 8005672:	bf58      	it	pl
 8005674:	60a5      	strpl	r5, [r4, #8]
 8005676:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8005678:	f015 0501 	ands.w	r5, r5, #1
 800567c:	d115      	bne.n	80056aa <setvbuf+0x176>
 800567e:	f412 7f00 	tst.w	r2, #512	; 0x200
 8005682:	e7c8      	b.n	8005616 <setvbuf+0xe2>
 8005684:	4648      	mov	r0, r9
 8005686:	f000 fafb 	bl	8005c80 <malloc>
 800568a:	4606      	mov	r6, r0
 800568c:	2800      	cmp	r0, #0
 800568e:	d0ae      	beq.n	80055ee <setvbuf+0xba>
 8005690:	464d      	mov	r5, r9
 8005692:	89a3      	ldrh	r3, [r4, #12]
 8005694:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005698:	81a3      	strh	r3, [r4, #12]
 800569a:	e7d0      	b.n	800563e <setvbuf+0x10a>
 800569c:	2500      	movs	r5, #0
 800569e:	e7a8      	b.n	80055f2 <setvbuf+0xbe>
 80056a0:	60a3      	str	r3, [r4, #8]
 80056a2:	e7e8      	b.n	8005676 <setvbuf+0x142>
 80056a4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80056a8:	e7b9      	b.n	800561e <setvbuf+0xea>
 80056aa:	2500      	movs	r5, #0
 80056ac:	e7b7      	b.n	800561e <setvbuf+0xea>
 80056ae:	bf00      	nop
 80056b0:	20000030 	.word	0x20000030
 80056b4:	0800603c 	.word	0x0800603c
 80056b8:	0800605c 	.word	0x0800605c
 80056bc:	0800601c 	.word	0x0800601c

080056c0 <__swbuf_r>:
 80056c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056c2:	460e      	mov	r6, r1
 80056c4:	4614      	mov	r4, r2
 80056c6:	4605      	mov	r5, r0
 80056c8:	b118      	cbz	r0, 80056d2 <__swbuf_r+0x12>
 80056ca:	6983      	ldr	r3, [r0, #24]
 80056cc:	b90b      	cbnz	r3, 80056d2 <__swbuf_r+0x12>
 80056ce:	f000 f9d1 	bl	8005a74 <__sinit>
 80056d2:	4b21      	ldr	r3, [pc, #132]	; (8005758 <__swbuf_r+0x98>)
 80056d4:	429c      	cmp	r4, r3
 80056d6:	d12b      	bne.n	8005730 <__swbuf_r+0x70>
 80056d8:	686c      	ldr	r4, [r5, #4]
 80056da:	69a3      	ldr	r3, [r4, #24]
 80056dc:	60a3      	str	r3, [r4, #8]
 80056de:	89a3      	ldrh	r3, [r4, #12]
 80056e0:	071a      	lsls	r2, r3, #28
 80056e2:	d52f      	bpl.n	8005744 <__swbuf_r+0x84>
 80056e4:	6923      	ldr	r3, [r4, #16]
 80056e6:	b36b      	cbz	r3, 8005744 <__swbuf_r+0x84>
 80056e8:	6923      	ldr	r3, [r4, #16]
 80056ea:	6820      	ldr	r0, [r4, #0]
 80056ec:	1ac0      	subs	r0, r0, r3
 80056ee:	6963      	ldr	r3, [r4, #20]
 80056f0:	b2f6      	uxtb	r6, r6
 80056f2:	4283      	cmp	r3, r0
 80056f4:	4637      	mov	r7, r6
 80056f6:	dc04      	bgt.n	8005702 <__swbuf_r+0x42>
 80056f8:	4621      	mov	r1, r4
 80056fa:	4628      	mov	r0, r5
 80056fc:	f000 f926 	bl	800594c <_fflush_r>
 8005700:	bb30      	cbnz	r0, 8005750 <__swbuf_r+0x90>
 8005702:	68a3      	ldr	r3, [r4, #8]
 8005704:	3b01      	subs	r3, #1
 8005706:	60a3      	str	r3, [r4, #8]
 8005708:	6823      	ldr	r3, [r4, #0]
 800570a:	1c5a      	adds	r2, r3, #1
 800570c:	6022      	str	r2, [r4, #0]
 800570e:	701e      	strb	r6, [r3, #0]
 8005710:	6963      	ldr	r3, [r4, #20]
 8005712:	3001      	adds	r0, #1
 8005714:	4283      	cmp	r3, r0
 8005716:	d004      	beq.n	8005722 <__swbuf_r+0x62>
 8005718:	89a3      	ldrh	r3, [r4, #12]
 800571a:	07db      	lsls	r3, r3, #31
 800571c:	d506      	bpl.n	800572c <__swbuf_r+0x6c>
 800571e:	2e0a      	cmp	r6, #10
 8005720:	d104      	bne.n	800572c <__swbuf_r+0x6c>
 8005722:	4621      	mov	r1, r4
 8005724:	4628      	mov	r0, r5
 8005726:	f000 f911 	bl	800594c <_fflush_r>
 800572a:	b988      	cbnz	r0, 8005750 <__swbuf_r+0x90>
 800572c:	4638      	mov	r0, r7
 800572e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005730:	4b0a      	ldr	r3, [pc, #40]	; (800575c <__swbuf_r+0x9c>)
 8005732:	429c      	cmp	r4, r3
 8005734:	d101      	bne.n	800573a <__swbuf_r+0x7a>
 8005736:	68ac      	ldr	r4, [r5, #8]
 8005738:	e7cf      	b.n	80056da <__swbuf_r+0x1a>
 800573a:	4b09      	ldr	r3, [pc, #36]	; (8005760 <__swbuf_r+0xa0>)
 800573c:	429c      	cmp	r4, r3
 800573e:	bf08      	it	eq
 8005740:	68ec      	ldreq	r4, [r5, #12]
 8005742:	e7ca      	b.n	80056da <__swbuf_r+0x1a>
 8005744:	4621      	mov	r1, r4
 8005746:	4628      	mov	r0, r5
 8005748:	f000 f80c 	bl	8005764 <__swsetup_r>
 800574c:	2800      	cmp	r0, #0
 800574e:	d0cb      	beq.n	80056e8 <__swbuf_r+0x28>
 8005750:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005754:	e7ea      	b.n	800572c <__swbuf_r+0x6c>
 8005756:	bf00      	nop
 8005758:	0800603c 	.word	0x0800603c
 800575c:	0800605c 	.word	0x0800605c
 8005760:	0800601c 	.word	0x0800601c

08005764 <__swsetup_r>:
 8005764:	4b32      	ldr	r3, [pc, #200]	; (8005830 <__swsetup_r+0xcc>)
 8005766:	b570      	push	{r4, r5, r6, lr}
 8005768:	681d      	ldr	r5, [r3, #0]
 800576a:	4606      	mov	r6, r0
 800576c:	460c      	mov	r4, r1
 800576e:	b125      	cbz	r5, 800577a <__swsetup_r+0x16>
 8005770:	69ab      	ldr	r3, [r5, #24]
 8005772:	b913      	cbnz	r3, 800577a <__swsetup_r+0x16>
 8005774:	4628      	mov	r0, r5
 8005776:	f000 f97d 	bl	8005a74 <__sinit>
 800577a:	4b2e      	ldr	r3, [pc, #184]	; (8005834 <__swsetup_r+0xd0>)
 800577c:	429c      	cmp	r4, r3
 800577e:	d10f      	bne.n	80057a0 <__swsetup_r+0x3c>
 8005780:	686c      	ldr	r4, [r5, #4]
 8005782:	89a3      	ldrh	r3, [r4, #12]
 8005784:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005788:	0719      	lsls	r1, r3, #28
 800578a:	d42c      	bmi.n	80057e6 <__swsetup_r+0x82>
 800578c:	06dd      	lsls	r5, r3, #27
 800578e:	d411      	bmi.n	80057b4 <__swsetup_r+0x50>
 8005790:	2309      	movs	r3, #9
 8005792:	6033      	str	r3, [r6, #0]
 8005794:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005798:	81a3      	strh	r3, [r4, #12]
 800579a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800579e:	e03e      	b.n	800581e <__swsetup_r+0xba>
 80057a0:	4b25      	ldr	r3, [pc, #148]	; (8005838 <__swsetup_r+0xd4>)
 80057a2:	429c      	cmp	r4, r3
 80057a4:	d101      	bne.n	80057aa <__swsetup_r+0x46>
 80057a6:	68ac      	ldr	r4, [r5, #8]
 80057a8:	e7eb      	b.n	8005782 <__swsetup_r+0x1e>
 80057aa:	4b24      	ldr	r3, [pc, #144]	; (800583c <__swsetup_r+0xd8>)
 80057ac:	429c      	cmp	r4, r3
 80057ae:	bf08      	it	eq
 80057b0:	68ec      	ldreq	r4, [r5, #12]
 80057b2:	e7e6      	b.n	8005782 <__swsetup_r+0x1e>
 80057b4:	0758      	lsls	r0, r3, #29
 80057b6:	d512      	bpl.n	80057de <__swsetup_r+0x7a>
 80057b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80057ba:	b141      	cbz	r1, 80057ce <__swsetup_r+0x6a>
 80057bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80057c0:	4299      	cmp	r1, r3
 80057c2:	d002      	beq.n	80057ca <__swsetup_r+0x66>
 80057c4:	4630      	mov	r0, r6
 80057c6:	f000 fa63 	bl	8005c90 <_free_r>
 80057ca:	2300      	movs	r3, #0
 80057cc:	6363      	str	r3, [r4, #52]	; 0x34
 80057ce:	89a3      	ldrh	r3, [r4, #12]
 80057d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80057d4:	81a3      	strh	r3, [r4, #12]
 80057d6:	2300      	movs	r3, #0
 80057d8:	6063      	str	r3, [r4, #4]
 80057da:	6923      	ldr	r3, [r4, #16]
 80057dc:	6023      	str	r3, [r4, #0]
 80057de:	89a3      	ldrh	r3, [r4, #12]
 80057e0:	f043 0308 	orr.w	r3, r3, #8
 80057e4:	81a3      	strh	r3, [r4, #12]
 80057e6:	6923      	ldr	r3, [r4, #16]
 80057e8:	b94b      	cbnz	r3, 80057fe <__swsetup_r+0x9a>
 80057ea:	89a3      	ldrh	r3, [r4, #12]
 80057ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80057f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057f4:	d003      	beq.n	80057fe <__swsetup_r+0x9a>
 80057f6:	4621      	mov	r1, r4
 80057f8:	4630      	mov	r0, r6
 80057fa:	f000 fa01 	bl	8005c00 <__smakebuf_r>
 80057fe:	89a0      	ldrh	r0, [r4, #12]
 8005800:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005804:	f010 0301 	ands.w	r3, r0, #1
 8005808:	d00a      	beq.n	8005820 <__swsetup_r+0xbc>
 800580a:	2300      	movs	r3, #0
 800580c:	60a3      	str	r3, [r4, #8]
 800580e:	6963      	ldr	r3, [r4, #20]
 8005810:	425b      	negs	r3, r3
 8005812:	61a3      	str	r3, [r4, #24]
 8005814:	6923      	ldr	r3, [r4, #16]
 8005816:	b943      	cbnz	r3, 800582a <__swsetup_r+0xc6>
 8005818:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800581c:	d1ba      	bne.n	8005794 <__swsetup_r+0x30>
 800581e:	bd70      	pop	{r4, r5, r6, pc}
 8005820:	0781      	lsls	r1, r0, #30
 8005822:	bf58      	it	pl
 8005824:	6963      	ldrpl	r3, [r4, #20]
 8005826:	60a3      	str	r3, [r4, #8]
 8005828:	e7f4      	b.n	8005814 <__swsetup_r+0xb0>
 800582a:	2000      	movs	r0, #0
 800582c:	e7f7      	b.n	800581e <__swsetup_r+0xba>
 800582e:	bf00      	nop
 8005830:	20000030 	.word	0x20000030
 8005834:	0800603c 	.word	0x0800603c
 8005838:	0800605c 	.word	0x0800605c
 800583c:	0800601c 	.word	0x0800601c

08005840 <__sflush_r>:
 8005840:	898a      	ldrh	r2, [r1, #12]
 8005842:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005846:	4605      	mov	r5, r0
 8005848:	0710      	lsls	r0, r2, #28
 800584a:	460c      	mov	r4, r1
 800584c:	d458      	bmi.n	8005900 <__sflush_r+0xc0>
 800584e:	684b      	ldr	r3, [r1, #4]
 8005850:	2b00      	cmp	r3, #0
 8005852:	dc05      	bgt.n	8005860 <__sflush_r+0x20>
 8005854:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005856:	2b00      	cmp	r3, #0
 8005858:	dc02      	bgt.n	8005860 <__sflush_r+0x20>
 800585a:	2000      	movs	r0, #0
 800585c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005860:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005862:	2e00      	cmp	r6, #0
 8005864:	d0f9      	beq.n	800585a <__sflush_r+0x1a>
 8005866:	2300      	movs	r3, #0
 8005868:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800586c:	682f      	ldr	r7, [r5, #0]
 800586e:	602b      	str	r3, [r5, #0]
 8005870:	d032      	beq.n	80058d8 <__sflush_r+0x98>
 8005872:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005874:	89a3      	ldrh	r3, [r4, #12]
 8005876:	075a      	lsls	r2, r3, #29
 8005878:	d505      	bpl.n	8005886 <__sflush_r+0x46>
 800587a:	6863      	ldr	r3, [r4, #4]
 800587c:	1ac0      	subs	r0, r0, r3
 800587e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005880:	b10b      	cbz	r3, 8005886 <__sflush_r+0x46>
 8005882:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005884:	1ac0      	subs	r0, r0, r3
 8005886:	2300      	movs	r3, #0
 8005888:	4602      	mov	r2, r0
 800588a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800588c:	6a21      	ldr	r1, [r4, #32]
 800588e:	4628      	mov	r0, r5
 8005890:	47b0      	blx	r6
 8005892:	1c43      	adds	r3, r0, #1
 8005894:	89a3      	ldrh	r3, [r4, #12]
 8005896:	d106      	bne.n	80058a6 <__sflush_r+0x66>
 8005898:	6829      	ldr	r1, [r5, #0]
 800589a:	291d      	cmp	r1, #29
 800589c:	d82c      	bhi.n	80058f8 <__sflush_r+0xb8>
 800589e:	4a2a      	ldr	r2, [pc, #168]	; (8005948 <__sflush_r+0x108>)
 80058a0:	40ca      	lsrs	r2, r1
 80058a2:	07d6      	lsls	r6, r2, #31
 80058a4:	d528      	bpl.n	80058f8 <__sflush_r+0xb8>
 80058a6:	2200      	movs	r2, #0
 80058a8:	6062      	str	r2, [r4, #4]
 80058aa:	04d9      	lsls	r1, r3, #19
 80058ac:	6922      	ldr	r2, [r4, #16]
 80058ae:	6022      	str	r2, [r4, #0]
 80058b0:	d504      	bpl.n	80058bc <__sflush_r+0x7c>
 80058b2:	1c42      	adds	r2, r0, #1
 80058b4:	d101      	bne.n	80058ba <__sflush_r+0x7a>
 80058b6:	682b      	ldr	r3, [r5, #0]
 80058b8:	b903      	cbnz	r3, 80058bc <__sflush_r+0x7c>
 80058ba:	6560      	str	r0, [r4, #84]	; 0x54
 80058bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80058be:	602f      	str	r7, [r5, #0]
 80058c0:	2900      	cmp	r1, #0
 80058c2:	d0ca      	beq.n	800585a <__sflush_r+0x1a>
 80058c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80058c8:	4299      	cmp	r1, r3
 80058ca:	d002      	beq.n	80058d2 <__sflush_r+0x92>
 80058cc:	4628      	mov	r0, r5
 80058ce:	f000 f9df 	bl	8005c90 <_free_r>
 80058d2:	2000      	movs	r0, #0
 80058d4:	6360      	str	r0, [r4, #52]	; 0x34
 80058d6:	e7c1      	b.n	800585c <__sflush_r+0x1c>
 80058d8:	6a21      	ldr	r1, [r4, #32]
 80058da:	2301      	movs	r3, #1
 80058dc:	4628      	mov	r0, r5
 80058de:	47b0      	blx	r6
 80058e0:	1c41      	adds	r1, r0, #1
 80058e2:	d1c7      	bne.n	8005874 <__sflush_r+0x34>
 80058e4:	682b      	ldr	r3, [r5, #0]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d0c4      	beq.n	8005874 <__sflush_r+0x34>
 80058ea:	2b1d      	cmp	r3, #29
 80058ec:	d001      	beq.n	80058f2 <__sflush_r+0xb2>
 80058ee:	2b16      	cmp	r3, #22
 80058f0:	d101      	bne.n	80058f6 <__sflush_r+0xb6>
 80058f2:	602f      	str	r7, [r5, #0]
 80058f4:	e7b1      	b.n	800585a <__sflush_r+0x1a>
 80058f6:	89a3      	ldrh	r3, [r4, #12]
 80058f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058fc:	81a3      	strh	r3, [r4, #12]
 80058fe:	e7ad      	b.n	800585c <__sflush_r+0x1c>
 8005900:	690f      	ldr	r7, [r1, #16]
 8005902:	2f00      	cmp	r7, #0
 8005904:	d0a9      	beq.n	800585a <__sflush_r+0x1a>
 8005906:	0793      	lsls	r3, r2, #30
 8005908:	680e      	ldr	r6, [r1, #0]
 800590a:	bf08      	it	eq
 800590c:	694b      	ldreq	r3, [r1, #20]
 800590e:	600f      	str	r7, [r1, #0]
 8005910:	bf18      	it	ne
 8005912:	2300      	movne	r3, #0
 8005914:	eba6 0807 	sub.w	r8, r6, r7
 8005918:	608b      	str	r3, [r1, #8]
 800591a:	f1b8 0f00 	cmp.w	r8, #0
 800591e:	dd9c      	ble.n	800585a <__sflush_r+0x1a>
 8005920:	6a21      	ldr	r1, [r4, #32]
 8005922:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005924:	4643      	mov	r3, r8
 8005926:	463a      	mov	r2, r7
 8005928:	4628      	mov	r0, r5
 800592a:	47b0      	blx	r6
 800592c:	2800      	cmp	r0, #0
 800592e:	dc06      	bgt.n	800593e <__sflush_r+0xfe>
 8005930:	89a3      	ldrh	r3, [r4, #12]
 8005932:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005936:	81a3      	strh	r3, [r4, #12]
 8005938:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800593c:	e78e      	b.n	800585c <__sflush_r+0x1c>
 800593e:	4407      	add	r7, r0
 8005940:	eba8 0800 	sub.w	r8, r8, r0
 8005944:	e7e9      	b.n	800591a <__sflush_r+0xda>
 8005946:	bf00      	nop
 8005948:	20400001 	.word	0x20400001

0800594c <_fflush_r>:
 800594c:	b538      	push	{r3, r4, r5, lr}
 800594e:	690b      	ldr	r3, [r1, #16]
 8005950:	4605      	mov	r5, r0
 8005952:	460c      	mov	r4, r1
 8005954:	b913      	cbnz	r3, 800595c <_fflush_r+0x10>
 8005956:	2500      	movs	r5, #0
 8005958:	4628      	mov	r0, r5
 800595a:	bd38      	pop	{r3, r4, r5, pc}
 800595c:	b118      	cbz	r0, 8005966 <_fflush_r+0x1a>
 800595e:	6983      	ldr	r3, [r0, #24]
 8005960:	b90b      	cbnz	r3, 8005966 <_fflush_r+0x1a>
 8005962:	f000 f887 	bl	8005a74 <__sinit>
 8005966:	4b14      	ldr	r3, [pc, #80]	; (80059b8 <_fflush_r+0x6c>)
 8005968:	429c      	cmp	r4, r3
 800596a:	d11b      	bne.n	80059a4 <_fflush_r+0x58>
 800596c:	686c      	ldr	r4, [r5, #4]
 800596e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d0ef      	beq.n	8005956 <_fflush_r+0xa>
 8005976:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005978:	07d0      	lsls	r0, r2, #31
 800597a:	d404      	bmi.n	8005986 <_fflush_r+0x3a>
 800597c:	0599      	lsls	r1, r3, #22
 800597e:	d402      	bmi.n	8005986 <_fflush_r+0x3a>
 8005980:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005982:	f000 f915 	bl	8005bb0 <__retarget_lock_acquire_recursive>
 8005986:	4628      	mov	r0, r5
 8005988:	4621      	mov	r1, r4
 800598a:	f7ff ff59 	bl	8005840 <__sflush_r>
 800598e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005990:	07da      	lsls	r2, r3, #31
 8005992:	4605      	mov	r5, r0
 8005994:	d4e0      	bmi.n	8005958 <_fflush_r+0xc>
 8005996:	89a3      	ldrh	r3, [r4, #12]
 8005998:	059b      	lsls	r3, r3, #22
 800599a:	d4dd      	bmi.n	8005958 <_fflush_r+0xc>
 800599c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800599e:	f000 f908 	bl	8005bb2 <__retarget_lock_release_recursive>
 80059a2:	e7d9      	b.n	8005958 <_fflush_r+0xc>
 80059a4:	4b05      	ldr	r3, [pc, #20]	; (80059bc <_fflush_r+0x70>)
 80059a6:	429c      	cmp	r4, r3
 80059a8:	d101      	bne.n	80059ae <_fflush_r+0x62>
 80059aa:	68ac      	ldr	r4, [r5, #8]
 80059ac:	e7df      	b.n	800596e <_fflush_r+0x22>
 80059ae:	4b04      	ldr	r3, [pc, #16]	; (80059c0 <_fflush_r+0x74>)
 80059b0:	429c      	cmp	r4, r3
 80059b2:	bf08      	it	eq
 80059b4:	68ec      	ldreq	r4, [r5, #12]
 80059b6:	e7da      	b.n	800596e <_fflush_r+0x22>
 80059b8:	0800603c 	.word	0x0800603c
 80059bc:	0800605c 	.word	0x0800605c
 80059c0:	0800601c 	.word	0x0800601c

080059c4 <std>:
 80059c4:	2300      	movs	r3, #0
 80059c6:	b510      	push	{r4, lr}
 80059c8:	4604      	mov	r4, r0
 80059ca:	e9c0 3300 	strd	r3, r3, [r0]
 80059ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80059d2:	6083      	str	r3, [r0, #8]
 80059d4:	8181      	strh	r1, [r0, #12]
 80059d6:	6643      	str	r3, [r0, #100]	; 0x64
 80059d8:	81c2      	strh	r2, [r0, #14]
 80059da:	6183      	str	r3, [r0, #24]
 80059dc:	4619      	mov	r1, r3
 80059de:	2208      	movs	r2, #8
 80059e0:	305c      	adds	r0, #92	; 0x5c
 80059e2:	f7ff fd21 	bl	8005428 <memset>
 80059e6:	4b05      	ldr	r3, [pc, #20]	; (80059fc <std+0x38>)
 80059e8:	6263      	str	r3, [r4, #36]	; 0x24
 80059ea:	4b05      	ldr	r3, [pc, #20]	; (8005a00 <std+0x3c>)
 80059ec:	62a3      	str	r3, [r4, #40]	; 0x28
 80059ee:	4b05      	ldr	r3, [pc, #20]	; (8005a04 <std+0x40>)
 80059f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80059f2:	4b05      	ldr	r3, [pc, #20]	; (8005a08 <std+0x44>)
 80059f4:	6224      	str	r4, [r4, #32]
 80059f6:	6323      	str	r3, [r4, #48]	; 0x30
 80059f8:	bd10      	pop	{r4, pc}
 80059fa:	bf00      	nop
 80059fc:	08005e71 	.word	0x08005e71
 8005a00:	08005e93 	.word	0x08005e93
 8005a04:	08005ecb 	.word	0x08005ecb
 8005a08:	08005eef 	.word	0x08005eef

08005a0c <_cleanup_r>:
 8005a0c:	4901      	ldr	r1, [pc, #4]	; (8005a14 <_cleanup_r+0x8>)
 8005a0e:	f000 b8af 	b.w	8005b70 <_fwalk_reent>
 8005a12:	bf00      	nop
 8005a14:	0800594d 	.word	0x0800594d

08005a18 <__sfmoreglue>:
 8005a18:	b570      	push	{r4, r5, r6, lr}
 8005a1a:	2268      	movs	r2, #104	; 0x68
 8005a1c:	1e4d      	subs	r5, r1, #1
 8005a1e:	4355      	muls	r5, r2
 8005a20:	460e      	mov	r6, r1
 8005a22:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005a26:	f000 f99f 	bl	8005d68 <_malloc_r>
 8005a2a:	4604      	mov	r4, r0
 8005a2c:	b140      	cbz	r0, 8005a40 <__sfmoreglue+0x28>
 8005a2e:	2100      	movs	r1, #0
 8005a30:	e9c0 1600 	strd	r1, r6, [r0]
 8005a34:	300c      	adds	r0, #12
 8005a36:	60a0      	str	r0, [r4, #8]
 8005a38:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005a3c:	f7ff fcf4 	bl	8005428 <memset>
 8005a40:	4620      	mov	r0, r4
 8005a42:	bd70      	pop	{r4, r5, r6, pc}

08005a44 <__sfp_lock_acquire>:
 8005a44:	4801      	ldr	r0, [pc, #4]	; (8005a4c <__sfp_lock_acquire+0x8>)
 8005a46:	f000 b8b3 	b.w	8005bb0 <__retarget_lock_acquire_recursive>
 8005a4a:	bf00      	nop
 8005a4c:	200001e9 	.word	0x200001e9

08005a50 <__sfp_lock_release>:
 8005a50:	4801      	ldr	r0, [pc, #4]	; (8005a58 <__sfp_lock_release+0x8>)
 8005a52:	f000 b8ae 	b.w	8005bb2 <__retarget_lock_release_recursive>
 8005a56:	bf00      	nop
 8005a58:	200001e9 	.word	0x200001e9

08005a5c <__sinit_lock_acquire>:
 8005a5c:	4801      	ldr	r0, [pc, #4]	; (8005a64 <__sinit_lock_acquire+0x8>)
 8005a5e:	f000 b8a7 	b.w	8005bb0 <__retarget_lock_acquire_recursive>
 8005a62:	bf00      	nop
 8005a64:	200001ea 	.word	0x200001ea

08005a68 <__sinit_lock_release>:
 8005a68:	4801      	ldr	r0, [pc, #4]	; (8005a70 <__sinit_lock_release+0x8>)
 8005a6a:	f000 b8a2 	b.w	8005bb2 <__retarget_lock_release_recursive>
 8005a6e:	bf00      	nop
 8005a70:	200001ea 	.word	0x200001ea

08005a74 <__sinit>:
 8005a74:	b510      	push	{r4, lr}
 8005a76:	4604      	mov	r4, r0
 8005a78:	f7ff fff0 	bl	8005a5c <__sinit_lock_acquire>
 8005a7c:	69a3      	ldr	r3, [r4, #24]
 8005a7e:	b11b      	cbz	r3, 8005a88 <__sinit+0x14>
 8005a80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a84:	f7ff bff0 	b.w	8005a68 <__sinit_lock_release>
 8005a88:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005a8c:	6523      	str	r3, [r4, #80]	; 0x50
 8005a8e:	4b13      	ldr	r3, [pc, #76]	; (8005adc <__sinit+0x68>)
 8005a90:	4a13      	ldr	r2, [pc, #76]	; (8005ae0 <__sinit+0x6c>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	62a2      	str	r2, [r4, #40]	; 0x28
 8005a96:	42a3      	cmp	r3, r4
 8005a98:	bf04      	itt	eq
 8005a9a:	2301      	moveq	r3, #1
 8005a9c:	61a3      	streq	r3, [r4, #24]
 8005a9e:	4620      	mov	r0, r4
 8005aa0:	f000 f820 	bl	8005ae4 <__sfp>
 8005aa4:	6060      	str	r0, [r4, #4]
 8005aa6:	4620      	mov	r0, r4
 8005aa8:	f000 f81c 	bl	8005ae4 <__sfp>
 8005aac:	60a0      	str	r0, [r4, #8]
 8005aae:	4620      	mov	r0, r4
 8005ab0:	f000 f818 	bl	8005ae4 <__sfp>
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	60e0      	str	r0, [r4, #12]
 8005ab8:	2104      	movs	r1, #4
 8005aba:	6860      	ldr	r0, [r4, #4]
 8005abc:	f7ff ff82 	bl	80059c4 <std>
 8005ac0:	68a0      	ldr	r0, [r4, #8]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	2109      	movs	r1, #9
 8005ac6:	f7ff ff7d 	bl	80059c4 <std>
 8005aca:	68e0      	ldr	r0, [r4, #12]
 8005acc:	2202      	movs	r2, #2
 8005ace:	2112      	movs	r1, #18
 8005ad0:	f7ff ff78 	bl	80059c4 <std>
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	61a3      	str	r3, [r4, #24]
 8005ad8:	e7d2      	b.n	8005a80 <__sinit+0xc>
 8005ada:	bf00      	nop
 8005adc:	08006018 	.word	0x08006018
 8005ae0:	08005a0d 	.word	0x08005a0d

08005ae4 <__sfp>:
 8005ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ae6:	4607      	mov	r7, r0
 8005ae8:	f7ff ffac 	bl	8005a44 <__sfp_lock_acquire>
 8005aec:	4b1e      	ldr	r3, [pc, #120]	; (8005b68 <__sfp+0x84>)
 8005aee:	681e      	ldr	r6, [r3, #0]
 8005af0:	69b3      	ldr	r3, [r6, #24]
 8005af2:	b913      	cbnz	r3, 8005afa <__sfp+0x16>
 8005af4:	4630      	mov	r0, r6
 8005af6:	f7ff ffbd 	bl	8005a74 <__sinit>
 8005afa:	3648      	adds	r6, #72	; 0x48
 8005afc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005b00:	3b01      	subs	r3, #1
 8005b02:	d503      	bpl.n	8005b0c <__sfp+0x28>
 8005b04:	6833      	ldr	r3, [r6, #0]
 8005b06:	b30b      	cbz	r3, 8005b4c <__sfp+0x68>
 8005b08:	6836      	ldr	r6, [r6, #0]
 8005b0a:	e7f7      	b.n	8005afc <__sfp+0x18>
 8005b0c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005b10:	b9d5      	cbnz	r5, 8005b48 <__sfp+0x64>
 8005b12:	4b16      	ldr	r3, [pc, #88]	; (8005b6c <__sfp+0x88>)
 8005b14:	60e3      	str	r3, [r4, #12]
 8005b16:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005b1a:	6665      	str	r5, [r4, #100]	; 0x64
 8005b1c:	f000 f847 	bl	8005bae <__retarget_lock_init_recursive>
 8005b20:	f7ff ff96 	bl	8005a50 <__sfp_lock_release>
 8005b24:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005b28:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005b2c:	6025      	str	r5, [r4, #0]
 8005b2e:	61a5      	str	r5, [r4, #24]
 8005b30:	2208      	movs	r2, #8
 8005b32:	4629      	mov	r1, r5
 8005b34:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005b38:	f7ff fc76 	bl	8005428 <memset>
 8005b3c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005b40:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005b44:	4620      	mov	r0, r4
 8005b46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b48:	3468      	adds	r4, #104	; 0x68
 8005b4a:	e7d9      	b.n	8005b00 <__sfp+0x1c>
 8005b4c:	2104      	movs	r1, #4
 8005b4e:	4638      	mov	r0, r7
 8005b50:	f7ff ff62 	bl	8005a18 <__sfmoreglue>
 8005b54:	4604      	mov	r4, r0
 8005b56:	6030      	str	r0, [r6, #0]
 8005b58:	2800      	cmp	r0, #0
 8005b5a:	d1d5      	bne.n	8005b08 <__sfp+0x24>
 8005b5c:	f7ff ff78 	bl	8005a50 <__sfp_lock_release>
 8005b60:	230c      	movs	r3, #12
 8005b62:	603b      	str	r3, [r7, #0]
 8005b64:	e7ee      	b.n	8005b44 <__sfp+0x60>
 8005b66:	bf00      	nop
 8005b68:	08006018 	.word	0x08006018
 8005b6c:	ffff0001 	.word	0xffff0001

08005b70 <_fwalk_reent>:
 8005b70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b74:	4606      	mov	r6, r0
 8005b76:	4688      	mov	r8, r1
 8005b78:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005b7c:	2700      	movs	r7, #0
 8005b7e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005b82:	f1b9 0901 	subs.w	r9, r9, #1
 8005b86:	d505      	bpl.n	8005b94 <_fwalk_reent+0x24>
 8005b88:	6824      	ldr	r4, [r4, #0]
 8005b8a:	2c00      	cmp	r4, #0
 8005b8c:	d1f7      	bne.n	8005b7e <_fwalk_reent+0xe>
 8005b8e:	4638      	mov	r0, r7
 8005b90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b94:	89ab      	ldrh	r3, [r5, #12]
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d907      	bls.n	8005baa <_fwalk_reent+0x3a>
 8005b9a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005b9e:	3301      	adds	r3, #1
 8005ba0:	d003      	beq.n	8005baa <_fwalk_reent+0x3a>
 8005ba2:	4629      	mov	r1, r5
 8005ba4:	4630      	mov	r0, r6
 8005ba6:	47c0      	blx	r8
 8005ba8:	4307      	orrs	r7, r0
 8005baa:	3568      	adds	r5, #104	; 0x68
 8005bac:	e7e9      	b.n	8005b82 <_fwalk_reent+0x12>

08005bae <__retarget_lock_init_recursive>:
 8005bae:	4770      	bx	lr

08005bb0 <__retarget_lock_acquire_recursive>:
 8005bb0:	4770      	bx	lr

08005bb2 <__retarget_lock_release_recursive>:
 8005bb2:	4770      	bx	lr

08005bb4 <__swhatbuf_r>:
 8005bb4:	b570      	push	{r4, r5, r6, lr}
 8005bb6:	460e      	mov	r6, r1
 8005bb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bbc:	2900      	cmp	r1, #0
 8005bbe:	b096      	sub	sp, #88	; 0x58
 8005bc0:	4614      	mov	r4, r2
 8005bc2:	461d      	mov	r5, r3
 8005bc4:	da08      	bge.n	8005bd8 <__swhatbuf_r+0x24>
 8005bc6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	602a      	str	r2, [r5, #0]
 8005bce:	061a      	lsls	r2, r3, #24
 8005bd0:	d410      	bmi.n	8005bf4 <__swhatbuf_r+0x40>
 8005bd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005bd6:	e00e      	b.n	8005bf6 <__swhatbuf_r+0x42>
 8005bd8:	466a      	mov	r2, sp
 8005bda:	f000 f9af 	bl	8005f3c <_fstat_r>
 8005bde:	2800      	cmp	r0, #0
 8005be0:	dbf1      	blt.n	8005bc6 <__swhatbuf_r+0x12>
 8005be2:	9a01      	ldr	r2, [sp, #4]
 8005be4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005be8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005bec:	425a      	negs	r2, r3
 8005bee:	415a      	adcs	r2, r3
 8005bf0:	602a      	str	r2, [r5, #0]
 8005bf2:	e7ee      	b.n	8005bd2 <__swhatbuf_r+0x1e>
 8005bf4:	2340      	movs	r3, #64	; 0x40
 8005bf6:	2000      	movs	r0, #0
 8005bf8:	6023      	str	r3, [r4, #0]
 8005bfa:	b016      	add	sp, #88	; 0x58
 8005bfc:	bd70      	pop	{r4, r5, r6, pc}
	...

08005c00 <__smakebuf_r>:
 8005c00:	898b      	ldrh	r3, [r1, #12]
 8005c02:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005c04:	079d      	lsls	r5, r3, #30
 8005c06:	4606      	mov	r6, r0
 8005c08:	460c      	mov	r4, r1
 8005c0a:	d507      	bpl.n	8005c1c <__smakebuf_r+0x1c>
 8005c0c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005c10:	6023      	str	r3, [r4, #0]
 8005c12:	6123      	str	r3, [r4, #16]
 8005c14:	2301      	movs	r3, #1
 8005c16:	6163      	str	r3, [r4, #20]
 8005c18:	b002      	add	sp, #8
 8005c1a:	bd70      	pop	{r4, r5, r6, pc}
 8005c1c:	ab01      	add	r3, sp, #4
 8005c1e:	466a      	mov	r2, sp
 8005c20:	f7ff ffc8 	bl	8005bb4 <__swhatbuf_r>
 8005c24:	9900      	ldr	r1, [sp, #0]
 8005c26:	4605      	mov	r5, r0
 8005c28:	4630      	mov	r0, r6
 8005c2a:	f000 f89d 	bl	8005d68 <_malloc_r>
 8005c2e:	b948      	cbnz	r0, 8005c44 <__smakebuf_r+0x44>
 8005c30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c34:	059a      	lsls	r2, r3, #22
 8005c36:	d4ef      	bmi.n	8005c18 <__smakebuf_r+0x18>
 8005c38:	f023 0303 	bic.w	r3, r3, #3
 8005c3c:	f043 0302 	orr.w	r3, r3, #2
 8005c40:	81a3      	strh	r3, [r4, #12]
 8005c42:	e7e3      	b.n	8005c0c <__smakebuf_r+0xc>
 8005c44:	4b0d      	ldr	r3, [pc, #52]	; (8005c7c <__smakebuf_r+0x7c>)
 8005c46:	62b3      	str	r3, [r6, #40]	; 0x28
 8005c48:	89a3      	ldrh	r3, [r4, #12]
 8005c4a:	6020      	str	r0, [r4, #0]
 8005c4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c50:	81a3      	strh	r3, [r4, #12]
 8005c52:	9b00      	ldr	r3, [sp, #0]
 8005c54:	6163      	str	r3, [r4, #20]
 8005c56:	9b01      	ldr	r3, [sp, #4]
 8005c58:	6120      	str	r0, [r4, #16]
 8005c5a:	b15b      	cbz	r3, 8005c74 <__smakebuf_r+0x74>
 8005c5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c60:	4630      	mov	r0, r6
 8005c62:	f000 f97d 	bl	8005f60 <_isatty_r>
 8005c66:	b128      	cbz	r0, 8005c74 <__smakebuf_r+0x74>
 8005c68:	89a3      	ldrh	r3, [r4, #12]
 8005c6a:	f023 0303 	bic.w	r3, r3, #3
 8005c6e:	f043 0301 	orr.w	r3, r3, #1
 8005c72:	81a3      	strh	r3, [r4, #12]
 8005c74:	89a0      	ldrh	r0, [r4, #12]
 8005c76:	4305      	orrs	r5, r0
 8005c78:	81a5      	strh	r5, [r4, #12]
 8005c7a:	e7cd      	b.n	8005c18 <__smakebuf_r+0x18>
 8005c7c:	08005a0d 	.word	0x08005a0d

08005c80 <malloc>:
 8005c80:	4b02      	ldr	r3, [pc, #8]	; (8005c8c <malloc+0xc>)
 8005c82:	4601      	mov	r1, r0
 8005c84:	6818      	ldr	r0, [r3, #0]
 8005c86:	f000 b86f 	b.w	8005d68 <_malloc_r>
 8005c8a:	bf00      	nop
 8005c8c:	20000030 	.word	0x20000030

08005c90 <_free_r>:
 8005c90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005c92:	2900      	cmp	r1, #0
 8005c94:	d044      	beq.n	8005d20 <_free_r+0x90>
 8005c96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c9a:	9001      	str	r0, [sp, #4]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	f1a1 0404 	sub.w	r4, r1, #4
 8005ca2:	bfb8      	it	lt
 8005ca4:	18e4      	addlt	r4, r4, r3
 8005ca6:	f000 f97d 	bl	8005fa4 <__malloc_lock>
 8005caa:	4a1e      	ldr	r2, [pc, #120]	; (8005d24 <_free_r+0x94>)
 8005cac:	9801      	ldr	r0, [sp, #4]
 8005cae:	6813      	ldr	r3, [r2, #0]
 8005cb0:	b933      	cbnz	r3, 8005cc0 <_free_r+0x30>
 8005cb2:	6063      	str	r3, [r4, #4]
 8005cb4:	6014      	str	r4, [r2, #0]
 8005cb6:	b003      	add	sp, #12
 8005cb8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005cbc:	f000 b978 	b.w	8005fb0 <__malloc_unlock>
 8005cc0:	42a3      	cmp	r3, r4
 8005cc2:	d908      	bls.n	8005cd6 <_free_r+0x46>
 8005cc4:	6825      	ldr	r5, [r4, #0]
 8005cc6:	1961      	adds	r1, r4, r5
 8005cc8:	428b      	cmp	r3, r1
 8005cca:	bf01      	itttt	eq
 8005ccc:	6819      	ldreq	r1, [r3, #0]
 8005cce:	685b      	ldreq	r3, [r3, #4]
 8005cd0:	1949      	addeq	r1, r1, r5
 8005cd2:	6021      	streq	r1, [r4, #0]
 8005cd4:	e7ed      	b.n	8005cb2 <_free_r+0x22>
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	b10b      	cbz	r3, 8005ce0 <_free_r+0x50>
 8005cdc:	42a3      	cmp	r3, r4
 8005cde:	d9fa      	bls.n	8005cd6 <_free_r+0x46>
 8005ce0:	6811      	ldr	r1, [r2, #0]
 8005ce2:	1855      	adds	r5, r2, r1
 8005ce4:	42a5      	cmp	r5, r4
 8005ce6:	d10b      	bne.n	8005d00 <_free_r+0x70>
 8005ce8:	6824      	ldr	r4, [r4, #0]
 8005cea:	4421      	add	r1, r4
 8005cec:	1854      	adds	r4, r2, r1
 8005cee:	42a3      	cmp	r3, r4
 8005cf0:	6011      	str	r1, [r2, #0]
 8005cf2:	d1e0      	bne.n	8005cb6 <_free_r+0x26>
 8005cf4:	681c      	ldr	r4, [r3, #0]
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	6053      	str	r3, [r2, #4]
 8005cfa:	4421      	add	r1, r4
 8005cfc:	6011      	str	r1, [r2, #0]
 8005cfe:	e7da      	b.n	8005cb6 <_free_r+0x26>
 8005d00:	d902      	bls.n	8005d08 <_free_r+0x78>
 8005d02:	230c      	movs	r3, #12
 8005d04:	6003      	str	r3, [r0, #0]
 8005d06:	e7d6      	b.n	8005cb6 <_free_r+0x26>
 8005d08:	6825      	ldr	r5, [r4, #0]
 8005d0a:	1961      	adds	r1, r4, r5
 8005d0c:	428b      	cmp	r3, r1
 8005d0e:	bf04      	itt	eq
 8005d10:	6819      	ldreq	r1, [r3, #0]
 8005d12:	685b      	ldreq	r3, [r3, #4]
 8005d14:	6063      	str	r3, [r4, #4]
 8005d16:	bf04      	itt	eq
 8005d18:	1949      	addeq	r1, r1, r5
 8005d1a:	6021      	streq	r1, [r4, #0]
 8005d1c:	6054      	str	r4, [r2, #4]
 8005d1e:	e7ca      	b.n	8005cb6 <_free_r+0x26>
 8005d20:	b003      	add	sp, #12
 8005d22:	bd30      	pop	{r4, r5, pc}
 8005d24:	200001ec 	.word	0x200001ec

08005d28 <sbrk_aligned>:
 8005d28:	b570      	push	{r4, r5, r6, lr}
 8005d2a:	4e0e      	ldr	r6, [pc, #56]	; (8005d64 <sbrk_aligned+0x3c>)
 8005d2c:	460c      	mov	r4, r1
 8005d2e:	6831      	ldr	r1, [r6, #0]
 8005d30:	4605      	mov	r5, r0
 8005d32:	b911      	cbnz	r1, 8005d3a <sbrk_aligned+0x12>
 8005d34:	f000 f88c 	bl	8005e50 <_sbrk_r>
 8005d38:	6030      	str	r0, [r6, #0]
 8005d3a:	4621      	mov	r1, r4
 8005d3c:	4628      	mov	r0, r5
 8005d3e:	f000 f887 	bl	8005e50 <_sbrk_r>
 8005d42:	1c43      	adds	r3, r0, #1
 8005d44:	d00a      	beq.n	8005d5c <sbrk_aligned+0x34>
 8005d46:	1cc4      	adds	r4, r0, #3
 8005d48:	f024 0403 	bic.w	r4, r4, #3
 8005d4c:	42a0      	cmp	r0, r4
 8005d4e:	d007      	beq.n	8005d60 <sbrk_aligned+0x38>
 8005d50:	1a21      	subs	r1, r4, r0
 8005d52:	4628      	mov	r0, r5
 8005d54:	f000 f87c 	bl	8005e50 <_sbrk_r>
 8005d58:	3001      	adds	r0, #1
 8005d5a:	d101      	bne.n	8005d60 <sbrk_aligned+0x38>
 8005d5c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005d60:	4620      	mov	r0, r4
 8005d62:	bd70      	pop	{r4, r5, r6, pc}
 8005d64:	200001f0 	.word	0x200001f0

08005d68 <_malloc_r>:
 8005d68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d6c:	1ccd      	adds	r5, r1, #3
 8005d6e:	f025 0503 	bic.w	r5, r5, #3
 8005d72:	3508      	adds	r5, #8
 8005d74:	2d0c      	cmp	r5, #12
 8005d76:	bf38      	it	cc
 8005d78:	250c      	movcc	r5, #12
 8005d7a:	2d00      	cmp	r5, #0
 8005d7c:	4607      	mov	r7, r0
 8005d7e:	db01      	blt.n	8005d84 <_malloc_r+0x1c>
 8005d80:	42a9      	cmp	r1, r5
 8005d82:	d905      	bls.n	8005d90 <_malloc_r+0x28>
 8005d84:	230c      	movs	r3, #12
 8005d86:	603b      	str	r3, [r7, #0]
 8005d88:	2600      	movs	r6, #0
 8005d8a:	4630      	mov	r0, r6
 8005d8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d90:	4e2e      	ldr	r6, [pc, #184]	; (8005e4c <_malloc_r+0xe4>)
 8005d92:	f000 f907 	bl	8005fa4 <__malloc_lock>
 8005d96:	6833      	ldr	r3, [r6, #0]
 8005d98:	461c      	mov	r4, r3
 8005d9a:	bb34      	cbnz	r4, 8005dea <_malloc_r+0x82>
 8005d9c:	4629      	mov	r1, r5
 8005d9e:	4638      	mov	r0, r7
 8005da0:	f7ff ffc2 	bl	8005d28 <sbrk_aligned>
 8005da4:	1c43      	adds	r3, r0, #1
 8005da6:	4604      	mov	r4, r0
 8005da8:	d14d      	bne.n	8005e46 <_malloc_r+0xde>
 8005daa:	6834      	ldr	r4, [r6, #0]
 8005dac:	4626      	mov	r6, r4
 8005dae:	2e00      	cmp	r6, #0
 8005db0:	d140      	bne.n	8005e34 <_malloc_r+0xcc>
 8005db2:	6823      	ldr	r3, [r4, #0]
 8005db4:	4631      	mov	r1, r6
 8005db6:	4638      	mov	r0, r7
 8005db8:	eb04 0803 	add.w	r8, r4, r3
 8005dbc:	f000 f848 	bl	8005e50 <_sbrk_r>
 8005dc0:	4580      	cmp	r8, r0
 8005dc2:	d13a      	bne.n	8005e3a <_malloc_r+0xd2>
 8005dc4:	6821      	ldr	r1, [r4, #0]
 8005dc6:	3503      	adds	r5, #3
 8005dc8:	1a6d      	subs	r5, r5, r1
 8005dca:	f025 0503 	bic.w	r5, r5, #3
 8005dce:	3508      	adds	r5, #8
 8005dd0:	2d0c      	cmp	r5, #12
 8005dd2:	bf38      	it	cc
 8005dd4:	250c      	movcc	r5, #12
 8005dd6:	4629      	mov	r1, r5
 8005dd8:	4638      	mov	r0, r7
 8005dda:	f7ff ffa5 	bl	8005d28 <sbrk_aligned>
 8005dde:	3001      	adds	r0, #1
 8005de0:	d02b      	beq.n	8005e3a <_malloc_r+0xd2>
 8005de2:	6823      	ldr	r3, [r4, #0]
 8005de4:	442b      	add	r3, r5
 8005de6:	6023      	str	r3, [r4, #0]
 8005de8:	e00e      	b.n	8005e08 <_malloc_r+0xa0>
 8005dea:	6822      	ldr	r2, [r4, #0]
 8005dec:	1b52      	subs	r2, r2, r5
 8005dee:	d41e      	bmi.n	8005e2e <_malloc_r+0xc6>
 8005df0:	2a0b      	cmp	r2, #11
 8005df2:	d916      	bls.n	8005e22 <_malloc_r+0xba>
 8005df4:	1961      	adds	r1, r4, r5
 8005df6:	42a3      	cmp	r3, r4
 8005df8:	6025      	str	r5, [r4, #0]
 8005dfa:	bf18      	it	ne
 8005dfc:	6059      	strne	r1, [r3, #4]
 8005dfe:	6863      	ldr	r3, [r4, #4]
 8005e00:	bf08      	it	eq
 8005e02:	6031      	streq	r1, [r6, #0]
 8005e04:	5162      	str	r2, [r4, r5]
 8005e06:	604b      	str	r3, [r1, #4]
 8005e08:	4638      	mov	r0, r7
 8005e0a:	f104 060b 	add.w	r6, r4, #11
 8005e0e:	f000 f8cf 	bl	8005fb0 <__malloc_unlock>
 8005e12:	f026 0607 	bic.w	r6, r6, #7
 8005e16:	1d23      	adds	r3, r4, #4
 8005e18:	1af2      	subs	r2, r6, r3
 8005e1a:	d0b6      	beq.n	8005d8a <_malloc_r+0x22>
 8005e1c:	1b9b      	subs	r3, r3, r6
 8005e1e:	50a3      	str	r3, [r4, r2]
 8005e20:	e7b3      	b.n	8005d8a <_malloc_r+0x22>
 8005e22:	6862      	ldr	r2, [r4, #4]
 8005e24:	42a3      	cmp	r3, r4
 8005e26:	bf0c      	ite	eq
 8005e28:	6032      	streq	r2, [r6, #0]
 8005e2a:	605a      	strne	r2, [r3, #4]
 8005e2c:	e7ec      	b.n	8005e08 <_malloc_r+0xa0>
 8005e2e:	4623      	mov	r3, r4
 8005e30:	6864      	ldr	r4, [r4, #4]
 8005e32:	e7b2      	b.n	8005d9a <_malloc_r+0x32>
 8005e34:	4634      	mov	r4, r6
 8005e36:	6876      	ldr	r6, [r6, #4]
 8005e38:	e7b9      	b.n	8005dae <_malloc_r+0x46>
 8005e3a:	230c      	movs	r3, #12
 8005e3c:	603b      	str	r3, [r7, #0]
 8005e3e:	4638      	mov	r0, r7
 8005e40:	f000 f8b6 	bl	8005fb0 <__malloc_unlock>
 8005e44:	e7a1      	b.n	8005d8a <_malloc_r+0x22>
 8005e46:	6025      	str	r5, [r4, #0]
 8005e48:	e7de      	b.n	8005e08 <_malloc_r+0xa0>
 8005e4a:	bf00      	nop
 8005e4c:	200001ec 	.word	0x200001ec

08005e50 <_sbrk_r>:
 8005e50:	b538      	push	{r3, r4, r5, lr}
 8005e52:	4d06      	ldr	r5, [pc, #24]	; (8005e6c <_sbrk_r+0x1c>)
 8005e54:	2300      	movs	r3, #0
 8005e56:	4604      	mov	r4, r0
 8005e58:	4608      	mov	r0, r1
 8005e5a:	602b      	str	r3, [r5, #0]
 8005e5c:	f7fc f988 	bl	8002170 <_sbrk>
 8005e60:	1c43      	adds	r3, r0, #1
 8005e62:	d102      	bne.n	8005e6a <_sbrk_r+0x1a>
 8005e64:	682b      	ldr	r3, [r5, #0]
 8005e66:	b103      	cbz	r3, 8005e6a <_sbrk_r+0x1a>
 8005e68:	6023      	str	r3, [r4, #0]
 8005e6a:	bd38      	pop	{r3, r4, r5, pc}
 8005e6c:	200001f4 	.word	0x200001f4

08005e70 <__sread>:
 8005e70:	b510      	push	{r4, lr}
 8005e72:	460c      	mov	r4, r1
 8005e74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e78:	f000 f8a0 	bl	8005fbc <_read_r>
 8005e7c:	2800      	cmp	r0, #0
 8005e7e:	bfab      	itete	ge
 8005e80:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005e82:	89a3      	ldrhlt	r3, [r4, #12]
 8005e84:	181b      	addge	r3, r3, r0
 8005e86:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005e8a:	bfac      	ite	ge
 8005e8c:	6563      	strge	r3, [r4, #84]	; 0x54
 8005e8e:	81a3      	strhlt	r3, [r4, #12]
 8005e90:	bd10      	pop	{r4, pc}

08005e92 <__swrite>:
 8005e92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e96:	461f      	mov	r7, r3
 8005e98:	898b      	ldrh	r3, [r1, #12]
 8005e9a:	05db      	lsls	r3, r3, #23
 8005e9c:	4605      	mov	r5, r0
 8005e9e:	460c      	mov	r4, r1
 8005ea0:	4616      	mov	r6, r2
 8005ea2:	d505      	bpl.n	8005eb0 <__swrite+0x1e>
 8005ea4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ea8:	2302      	movs	r3, #2
 8005eaa:	2200      	movs	r2, #0
 8005eac:	f000 f868 	bl	8005f80 <_lseek_r>
 8005eb0:	89a3      	ldrh	r3, [r4, #12]
 8005eb2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005eb6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005eba:	81a3      	strh	r3, [r4, #12]
 8005ebc:	4632      	mov	r2, r6
 8005ebe:	463b      	mov	r3, r7
 8005ec0:	4628      	mov	r0, r5
 8005ec2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ec6:	f000 b817 	b.w	8005ef8 <_write_r>

08005eca <__sseek>:
 8005eca:	b510      	push	{r4, lr}
 8005ecc:	460c      	mov	r4, r1
 8005ece:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ed2:	f000 f855 	bl	8005f80 <_lseek_r>
 8005ed6:	1c43      	adds	r3, r0, #1
 8005ed8:	89a3      	ldrh	r3, [r4, #12]
 8005eda:	bf15      	itete	ne
 8005edc:	6560      	strne	r0, [r4, #84]	; 0x54
 8005ede:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005ee2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005ee6:	81a3      	strheq	r3, [r4, #12]
 8005ee8:	bf18      	it	ne
 8005eea:	81a3      	strhne	r3, [r4, #12]
 8005eec:	bd10      	pop	{r4, pc}

08005eee <__sclose>:
 8005eee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ef2:	f000 b813 	b.w	8005f1c <_close_r>
	...

08005ef8 <_write_r>:
 8005ef8:	b538      	push	{r3, r4, r5, lr}
 8005efa:	4d07      	ldr	r5, [pc, #28]	; (8005f18 <_write_r+0x20>)
 8005efc:	4604      	mov	r4, r0
 8005efe:	4608      	mov	r0, r1
 8005f00:	4611      	mov	r1, r2
 8005f02:	2200      	movs	r2, #0
 8005f04:	602a      	str	r2, [r5, #0]
 8005f06:	461a      	mov	r2, r3
 8005f08:	f7fc f8e1 	bl	80020ce <_write>
 8005f0c:	1c43      	adds	r3, r0, #1
 8005f0e:	d102      	bne.n	8005f16 <_write_r+0x1e>
 8005f10:	682b      	ldr	r3, [r5, #0]
 8005f12:	b103      	cbz	r3, 8005f16 <_write_r+0x1e>
 8005f14:	6023      	str	r3, [r4, #0]
 8005f16:	bd38      	pop	{r3, r4, r5, pc}
 8005f18:	200001f4 	.word	0x200001f4

08005f1c <_close_r>:
 8005f1c:	b538      	push	{r3, r4, r5, lr}
 8005f1e:	4d06      	ldr	r5, [pc, #24]	; (8005f38 <_close_r+0x1c>)
 8005f20:	2300      	movs	r3, #0
 8005f22:	4604      	mov	r4, r0
 8005f24:	4608      	mov	r0, r1
 8005f26:	602b      	str	r3, [r5, #0]
 8005f28:	f7fc f8ed 	bl	8002106 <_close>
 8005f2c:	1c43      	adds	r3, r0, #1
 8005f2e:	d102      	bne.n	8005f36 <_close_r+0x1a>
 8005f30:	682b      	ldr	r3, [r5, #0]
 8005f32:	b103      	cbz	r3, 8005f36 <_close_r+0x1a>
 8005f34:	6023      	str	r3, [r4, #0]
 8005f36:	bd38      	pop	{r3, r4, r5, pc}
 8005f38:	200001f4 	.word	0x200001f4

08005f3c <_fstat_r>:
 8005f3c:	b538      	push	{r3, r4, r5, lr}
 8005f3e:	4d07      	ldr	r5, [pc, #28]	; (8005f5c <_fstat_r+0x20>)
 8005f40:	2300      	movs	r3, #0
 8005f42:	4604      	mov	r4, r0
 8005f44:	4608      	mov	r0, r1
 8005f46:	4611      	mov	r1, r2
 8005f48:	602b      	str	r3, [r5, #0]
 8005f4a:	f7fc f8e8 	bl	800211e <_fstat>
 8005f4e:	1c43      	adds	r3, r0, #1
 8005f50:	d102      	bne.n	8005f58 <_fstat_r+0x1c>
 8005f52:	682b      	ldr	r3, [r5, #0]
 8005f54:	b103      	cbz	r3, 8005f58 <_fstat_r+0x1c>
 8005f56:	6023      	str	r3, [r4, #0]
 8005f58:	bd38      	pop	{r3, r4, r5, pc}
 8005f5a:	bf00      	nop
 8005f5c:	200001f4 	.word	0x200001f4

08005f60 <_isatty_r>:
 8005f60:	b538      	push	{r3, r4, r5, lr}
 8005f62:	4d06      	ldr	r5, [pc, #24]	; (8005f7c <_isatty_r+0x1c>)
 8005f64:	2300      	movs	r3, #0
 8005f66:	4604      	mov	r4, r0
 8005f68:	4608      	mov	r0, r1
 8005f6a:	602b      	str	r3, [r5, #0]
 8005f6c:	f7fc f8e7 	bl	800213e <_isatty>
 8005f70:	1c43      	adds	r3, r0, #1
 8005f72:	d102      	bne.n	8005f7a <_isatty_r+0x1a>
 8005f74:	682b      	ldr	r3, [r5, #0]
 8005f76:	b103      	cbz	r3, 8005f7a <_isatty_r+0x1a>
 8005f78:	6023      	str	r3, [r4, #0]
 8005f7a:	bd38      	pop	{r3, r4, r5, pc}
 8005f7c:	200001f4 	.word	0x200001f4

08005f80 <_lseek_r>:
 8005f80:	b538      	push	{r3, r4, r5, lr}
 8005f82:	4d07      	ldr	r5, [pc, #28]	; (8005fa0 <_lseek_r+0x20>)
 8005f84:	4604      	mov	r4, r0
 8005f86:	4608      	mov	r0, r1
 8005f88:	4611      	mov	r1, r2
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	602a      	str	r2, [r5, #0]
 8005f8e:	461a      	mov	r2, r3
 8005f90:	f7fc f8e0 	bl	8002154 <_lseek>
 8005f94:	1c43      	adds	r3, r0, #1
 8005f96:	d102      	bne.n	8005f9e <_lseek_r+0x1e>
 8005f98:	682b      	ldr	r3, [r5, #0]
 8005f9a:	b103      	cbz	r3, 8005f9e <_lseek_r+0x1e>
 8005f9c:	6023      	str	r3, [r4, #0]
 8005f9e:	bd38      	pop	{r3, r4, r5, pc}
 8005fa0:	200001f4 	.word	0x200001f4

08005fa4 <__malloc_lock>:
 8005fa4:	4801      	ldr	r0, [pc, #4]	; (8005fac <__malloc_lock+0x8>)
 8005fa6:	f7ff be03 	b.w	8005bb0 <__retarget_lock_acquire_recursive>
 8005faa:	bf00      	nop
 8005fac:	200001e8 	.word	0x200001e8

08005fb0 <__malloc_unlock>:
 8005fb0:	4801      	ldr	r0, [pc, #4]	; (8005fb8 <__malloc_unlock+0x8>)
 8005fb2:	f7ff bdfe 	b.w	8005bb2 <__retarget_lock_release_recursive>
 8005fb6:	bf00      	nop
 8005fb8:	200001e8 	.word	0x200001e8

08005fbc <_read_r>:
 8005fbc:	b538      	push	{r3, r4, r5, lr}
 8005fbe:	4d07      	ldr	r5, [pc, #28]	; (8005fdc <_read_r+0x20>)
 8005fc0:	4604      	mov	r4, r0
 8005fc2:	4608      	mov	r0, r1
 8005fc4:	4611      	mov	r1, r2
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	602a      	str	r2, [r5, #0]
 8005fca:	461a      	mov	r2, r3
 8005fcc:	f7fc f862 	bl	8002094 <_read>
 8005fd0:	1c43      	adds	r3, r0, #1
 8005fd2:	d102      	bne.n	8005fda <_read_r+0x1e>
 8005fd4:	682b      	ldr	r3, [r5, #0]
 8005fd6:	b103      	cbz	r3, 8005fda <_read_r+0x1e>
 8005fd8:	6023      	str	r3, [r4, #0]
 8005fda:	bd38      	pop	{r3, r4, r5, pc}
 8005fdc:	200001f4 	.word	0x200001f4

08005fe0 <_init>:
 8005fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fe2:	bf00      	nop
 8005fe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fe6:	bc08      	pop	{r3}
 8005fe8:	469e      	mov	lr, r3
 8005fea:	4770      	bx	lr

08005fec <_fini>:
 8005fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fee:	bf00      	nop
 8005ff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ff2:	bc08      	pop	{r3}
 8005ff4:	469e      	mov	lr, r3
 8005ff6:	4770      	bx	lr
