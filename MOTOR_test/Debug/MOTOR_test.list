
MOTOR_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054f0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  080056c0  080056c0  000156c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005794  08005794  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005794  08005794  00015794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800579c  0800579c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800579c  0800579c  0001579c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080057a0  080057a0  000157a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080057a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  20000070  08005814  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  08005814  000201c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011b37  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024d3  00000000  00000000  00031bd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e90  00000000  00000000  000340b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000db8  00000000  00000000  00034f40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025f99  00000000  00000000  00035cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010e67  00000000  00000000  0005bc91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000da448  00000000  00000000  0006caf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00146f40  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004608  00000000  00000000  00146f90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080056a8 	.word	0x080056a8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	080056a8 	.word	0x080056a8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b08a      	sub	sp, #40	; 0x28
 80005b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	setbuf(stdout, NULL);
 80005ba:	4b25      	ldr	r3, [pc, #148]	; (8000650 <main+0x9c>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	689b      	ldr	r3, [r3, #8]
 80005c0:	2100      	movs	r1, #0
 80005c2:	4618      	mov	r0, r3
 80005c4:	f004 f824 	bl	8004610 <setbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c8:	f000 fed6 	bl	8001378 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005cc:	f000 f84c 	bl	8000668 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d0:	f000 fa94 	bl	8000afc <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 80005d4:	f000 fa64 	bl	8000aa0 <_ZL19MX_USART2_UART_Initv>
  MX_TIM1_Init();
 80005d8:	f000 f904 	bl	80007e4 <_ZL12MX_TIM1_Initv>
  MX_TIM2_Init();
 80005dc:	f000 f9d2 	bl	8000984 <_ZL12MX_TIM2_Initv>
  MX_CAN2_Init();
 80005e0:	f000 f8c4 	bl	800076c <_ZL12MX_CAN2_Initv>
  /* USER CODE BEGIN 2 */
	CAN_FilterTypeDef filter;
	  filter.FilterIdHigh         = 0;                        // フィルターID(上位16ビット)
 80005e4:	2300      	movs	r3, #0
 80005e6:	603b      	str	r3, [r7, #0]
	  filter.FilterIdLow          = 0;                        // フィルターID(下位16ビット)
 80005e8:	2300      	movs	r3, #0
 80005ea:	607b      	str	r3, [r7, #4]
	  filter.FilterMaskIdHigh     = 0;                        // フィルターマスク(上位16ビット)
 80005ec:	2300      	movs	r3, #0
 80005ee:	60bb      	str	r3, [r7, #8]
	  filter.FilterMaskIdLow      = 0;                        // フィルターマスク(下位16ビット)
 80005f0:	2300      	movs	r3, #0
 80005f2:	60fb      	str	r3, [r7, #12]
	  filter.FilterScale          = CAN_FILTERSCALE_32BIT;    // フィルタースケール
 80005f4:	2301      	movs	r3, #1
 80005f6:	61fb      	str	r3, [r7, #28]
	  filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;         // フィルターに割り当てるFIFO
 80005f8:	2300      	movs	r3, #0
 80005fa:	613b      	str	r3, [r7, #16]
	  filter.FilterBank           = 14;                        // フィルターバンクNo
 80005fc:	230e      	movs	r3, #14
 80005fe:	617b      	str	r3, [r7, #20]
	  filter.FilterMode           = CAN_FILTERMODE_IDMASK;    // フィルターモード
 8000600:	2300      	movs	r3, #0
 8000602:	61bb      	str	r3, [r7, #24]
	  filter.SlaveStartFilterBank = 14;                       // スレーブCANの開始フィルターバンクNo
 8000604:	230e      	movs	r3, #14
 8000606:	627b      	str	r3, [r7, #36]	; 0x24
	  filter.FilterActivation     = ENABLE;                   // フィルター無効／有効
 8000608:	2301      	movs	r3, #1
 800060a:	623b      	str	r3, [r7, #32]

HAL_CAN_ConfigFilter(&hcan2, &filter);
 800060c:	463b      	mov	r3, r7
 800060e:	4619      	mov	r1, r3
 8000610:	4810      	ldr	r0, [pc, #64]	; (8000654 <main+0xa0>)
 8000612:	f001 f81f 	bl	8001654 <HAL_CAN_ConfigFilter>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000616:	2100      	movs	r1, #0
 8000618:	480f      	ldr	r0, [pc, #60]	; (8000658 <main+0xa4>)
 800061a:	f002 fe47 	bl	80032ac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800061e:	2104      	movs	r1, #4
 8000620:	480d      	ldr	r0, [pc, #52]	; (8000658 <main+0xa4>)
 8000622:	f002 fe43 	bl	80032ac <HAL_TIM_PWM_Start>
  HAL_CAN_Start(&hcan2);
 8000626:	480b      	ldr	r0, [pc, #44]	; (8000654 <main+0xa0>)
 8000628:	f001 f8f4 	bl	8001814 <HAL_CAN_Start>
  // 割り込み有効
  HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 800062c:	2102      	movs	r1, #2
 800062e:	4809      	ldr	r0, [pc, #36]	; (8000654 <main+0xa0>)
 8000630:	f001 fa46 	bl	8001ac0 <HAL_CAN_ActivateNotification>
  printf("start\n");
 8000634:	4809      	ldr	r0, [pc, #36]	; (800065c <main+0xa8>)
 8000636:	f003 ffe3 	bl	8004600 <puts>

  HAL_GPIO_WritePin(GPIOC,PSB1_Pin,GPIO_PIN_SET);
 800063a:	2201      	movs	r2, #1
 800063c:	2102      	movs	r1, #2
 800063e:	4808      	ldr	r0, [pc, #32]	; (8000660 <main+0xac>)
 8000640:	f001 ff3a 	bl	80024b8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB,BRK1_Pin,GPIO_PIN_RESET);
 8000644:	2200      	movs	r2, #0
 8000646:	2101      	movs	r1, #1
 8000648:	4806      	ldr	r0, [pc, #24]	; (8000664 <main+0xb0>)
 800064a:	f001 ff35 	bl	80024b8 <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800064e:	e7fe      	b.n	800064e <main+0x9a>
 8000650:	2000000c 	.word	0x2000000c
 8000654:	2000008c 	.word	0x2000008c
 8000658:	200000b4 	.word	0x200000b4
 800065c:	080056c0 	.word	0x080056c0
 8000660:	40020800 	.word	0x40020800
 8000664:	40020400 	.word	0x40020400

08000668 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b094      	sub	sp, #80	; 0x50
 800066c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066e:	f107 031c 	add.w	r3, r7, #28
 8000672:	2234      	movs	r2, #52	; 0x34
 8000674:	2100      	movs	r1, #0
 8000676:	4618      	mov	r0, r3
 8000678:	f003 ff34 	bl	80044e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800067c:	f107 0308 	add.w	r3, r7, #8
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	605a      	str	r2, [r3, #4]
 8000686:	609a      	str	r2, [r3, #8]
 8000688:	60da      	str	r2, [r3, #12]
 800068a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800068c:	2300      	movs	r3, #0
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	4b34      	ldr	r3, [pc, #208]	; (8000764 <_Z18SystemClock_Configv+0xfc>)
 8000692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000694:	4a33      	ldr	r2, [pc, #204]	; (8000764 <_Z18SystemClock_Configv+0xfc>)
 8000696:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800069a:	6413      	str	r3, [r2, #64]	; 0x40
 800069c:	4b31      	ldr	r3, [pc, #196]	; (8000764 <_Z18SystemClock_Configv+0xfc>)
 800069e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006a4:	607b      	str	r3, [r7, #4]
 80006a6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006a8:	2300      	movs	r3, #0
 80006aa:	603b      	str	r3, [r7, #0]
 80006ac:	4b2e      	ldr	r3, [pc, #184]	; (8000768 <_Z18SystemClock_Configv+0x100>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a2d      	ldr	r2, [pc, #180]	; (8000768 <_Z18SystemClock_Configv+0x100>)
 80006b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006b6:	6013      	str	r3, [r2, #0]
 80006b8:	4b2b      	ldr	r3, [pc, #172]	; (8000768 <_Z18SystemClock_Configv+0x100>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006c0:	603b      	str	r3, [r7, #0]
 80006c2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006c4:	2302      	movs	r3, #2
 80006c6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006c8:	2301      	movs	r3, #1
 80006ca:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006cc:	2310      	movs	r3, #16
 80006ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d0:	2302      	movs	r3, #2
 80006d2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006d4:	2300      	movs	r3, #0
 80006d6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006d8:	2308      	movs	r3, #8
 80006da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80006dc:	23b4      	movs	r3, #180	; 0xb4
 80006de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006e0:	2302      	movs	r3, #2
 80006e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006e4:	2302      	movs	r3, #2
 80006e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006e8:	2302      	movs	r3, #2
 80006ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ec:	f107 031c 	add.w	r3, r7, #28
 80006f0:	4618      	mov	r0, r3
 80006f2:	f002 fa95 	bl	8002c20 <HAL_RCC_OscConfig>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	bf14      	ite	ne
 80006fc:	2301      	movne	r3, #1
 80006fe:	2300      	moveq	r3, #0
 8000700:	b2db      	uxtb	r3, r3
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 8000706:	f000 fb79 	bl	8000dfc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800070a:	f001 feef 	bl	80024ec <HAL_PWREx_EnableOverDrive>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	bf14      	ite	ne
 8000714:	2301      	movne	r3, #1
 8000716:	2300      	moveq	r3, #0
 8000718:	b2db      	uxtb	r3, r3
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <_Z18SystemClock_Configv+0xba>
  {
    Error_Handler();
 800071e:	f000 fb6d 	bl	8000dfc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000722:	230f      	movs	r3, #15
 8000724:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000726:	2302      	movs	r3, #2
 8000728:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800072a:	2300      	movs	r3, #0
 800072c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800072e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000732:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000734:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000738:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800073a:	f107 0308 	add.w	r3, r7, #8
 800073e:	2105      	movs	r1, #5
 8000740:	4618      	mov	r0, r3
 8000742:	f001 ff23 	bl	800258c <HAL_RCC_ClockConfig>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	bf14      	ite	ne
 800074c:	2301      	movne	r3, #1
 800074e:	2300      	moveq	r3, #0
 8000750:	b2db      	uxtb	r3, r3
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <_Z18SystemClock_Configv+0xf2>
  {
    Error_Handler();
 8000756:	f000 fb51 	bl	8000dfc <Error_Handler>
  }
}
 800075a:	bf00      	nop
 800075c:	3750      	adds	r7, #80	; 0x50
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	40023800 	.word	0x40023800
 8000768:	40007000 	.word	0x40007000

0800076c <_ZL12MX_CAN2_Initv>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000770:	4b1a      	ldr	r3, [pc, #104]	; (80007dc <_ZL12MX_CAN2_Initv+0x70>)
 8000772:	4a1b      	ldr	r2, [pc, #108]	; (80007e0 <_ZL12MX_CAN2_Initv+0x74>)
 8000774:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 9;
 8000776:	4b19      	ldr	r3, [pc, #100]	; (80007dc <_ZL12MX_CAN2_Initv+0x70>)
 8000778:	2209      	movs	r2, #9
 800077a:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 800077c:	4b17      	ldr	r3, [pc, #92]	; (80007dc <_ZL12MX_CAN2_Initv+0x70>)
 800077e:	2200      	movs	r2, #0
 8000780:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_4TQ;
 8000782:	4b16      	ldr	r3, [pc, #88]	; (80007dc <_ZL12MX_CAN2_Initv+0x70>)
 8000784:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 8000788:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_4TQ;
 800078a:	4b14      	ldr	r3, [pc, #80]	; (80007dc <_ZL12MX_CAN2_Initv+0x70>)
 800078c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000790:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_5TQ;
 8000792:	4b12      	ldr	r3, [pc, #72]	; (80007dc <_ZL12MX_CAN2_Initv+0x70>)
 8000794:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000798:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 800079a:	4b10      	ldr	r3, [pc, #64]	; (80007dc <_ZL12MX_CAN2_Initv+0x70>)
 800079c:	2200      	movs	r2, #0
 800079e:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80007a0:	4b0e      	ldr	r3, [pc, #56]	; (80007dc <_ZL12MX_CAN2_Initv+0x70>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80007a6:	4b0d      	ldr	r3, [pc, #52]	; (80007dc <_ZL12MX_CAN2_Initv+0x70>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80007ac:	4b0b      	ldr	r3, [pc, #44]	; (80007dc <_ZL12MX_CAN2_Initv+0x70>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80007b2:	4b0a      	ldr	r3, [pc, #40]	; (80007dc <_ZL12MX_CAN2_Initv+0x70>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80007b8:	4b08      	ldr	r3, [pc, #32]	; (80007dc <_ZL12MX_CAN2_Initv+0x70>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80007be:	4807      	ldr	r0, [pc, #28]	; (80007dc <_ZL12MX_CAN2_Initv+0x70>)
 80007c0:	f000 fe4c 	bl	800145c <HAL_CAN_Init>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	bf14      	ite	ne
 80007ca:	2301      	movne	r3, #1
 80007cc:	2300      	moveq	r3, #0
 80007ce:	b2db      	uxtb	r3, r3
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <_ZL12MX_CAN2_Initv+0x6c>
  {
    Error_Handler();
 80007d4:	f000 fb12 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80007d8:	bf00      	nop
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	2000008c 	.word	0x2000008c
 80007e0:	40006800 	.word	0x40006800

080007e4 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b096      	sub	sp, #88	; 0x58
 80007e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007ea:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	605a      	str	r2, [r3, #4]
 80007f4:	609a      	str	r2, [r3, #8]
 80007f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007f8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80007fc:	2200      	movs	r2, #0
 80007fe:	601a      	str	r2, [r3, #0]
 8000800:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000802:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	605a      	str	r2, [r3, #4]
 800080c:	609a      	str	r2, [r3, #8]
 800080e:	60da      	str	r2, [r3, #12]
 8000810:	611a      	str	r2, [r3, #16]
 8000812:	615a      	str	r2, [r3, #20]
 8000814:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000816:	1d3b      	adds	r3, r7, #4
 8000818:	2220      	movs	r2, #32
 800081a:	2100      	movs	r1, #0
 800081c:	4618      	mov	r0, r3
 800081e:	f003 fe61 	bl	80044e4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000822:	4b56      	ldr	r3, [pc, #344]	; (800097c <_ZL12MX_TIM1_Initv+0x198>)
 8000824:	4a56      	ldr	r2, [pc, #344]	; (8000980 <_ZL12MX_TIM1_Initv+0x19c>)
 8000826:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000828:	4b54      	ldr	r3, [pc, #336]	; (800097c <_ZL12MX_TIM1_Initv+0x198>)
 800082a:	2200      	movs	r2, #0
 800082c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800082e:	4b53      	ldr	r3, [pc, #332]	; (800097c <_ZL12MX_TIM1_Initv+0x198>)
 8000830:	2200      	movs	r2, #0
 8000832:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000834:	4b51      	ldr	r3, [pc, #324]	; (800097c <_ZL12MX_TIM1_Initv+0x198>)
 8000836:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800083a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800083c:	4b4f      	ldr	r3, [pc, #316]	; (800097c <_ZL12MX_TIM1_Initv+0x198>)
 800083e:	2200      	movs	r2, #0
 8000840:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000842:	4b4e      	ldr	r3, [pc, #312]	; (800097c <_ZL12MX_TIM1_Initv+0x198>)
 8000844:	2200      	movs	r2, #0
 8000846:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000848:	4b4c      	ldr	r3, [pc, #304]	; (800097c <_ZL12MX_TIM1_Initv+0x198>)
 800084a:	2200      	movs	r2, #0
 800084c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800084e:	484b      	ldr	r0, [pc, #300]	; (800097c <_ZL12MX_TIM1_Initv+0x198>)
 8000850:	f002 fc84 	bl	800315c <HAL_TIM_Base_Init>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	bf14      	ite	ne
 800085a:	2301      	movne	r3, #1
 800085c:	2300      	moveq	r3, #0
 800085e:	b2db      	uxtb	r3, r3
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <_ZL12MX_TIM1_Initv+0x84>
  {
    Error_Handler();
 8000864:	f000 faca 	bl	8000dfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000868:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800086c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800086e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000872:	4619      	mov	r1, r3
 8000874:	4841      	ldr	r0, [pc, #260]	; (800097c <_ZL12MX_TIM1_Initv+0x198>)
 8000876:	f002 fea3 	bl	80035c0 <HAL_TIM_ConfigClockSource>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	bf14      	ite	ne
 8000880:	2301      	movne	r3, #1
 8000882:	2300      	moveq	r3, #0
 8000884:	b2db      	uxtb	r3, r3
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <_ZL12MX_TIM1_Initv+0xaa>
  {
    Error_Handler();
 800088a:	f000 fab7 	bl	8000dfc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800088e:	483b      	ldr	r0, [pc, #236]	; (800097c <_ZL12MX_TIM1_Initv+0x198>)
 8000890:	f002 fcb3 	bl	80031fa <HAL_TIM_PWM_Init>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	bf14      	ite	ne
 800089a:	2301      	movne	r3, #1
 800089c:	2300      	moveq	r3, #0
 800089e:	b2db      	uxtb	r3, r3
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <_ZL12MX_TIM1_Initv+0xc4>
  {
    Error_Handler();
 80008a4:	f000 faaa 	bl	8000dfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008a8:	2300      	movs	r3, #0
 80008aa:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ac:	2300      	movs	r3, #0
 80008ae:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008b0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80008b4:	4619      	mov	r1, r3
 80008b6:	4831      	ldr	r0, [pc, #196]	; (800097c <_ZL12MX_TIM1_Initv+0x198>)
 80008b8:	f003 fa5a 	bl	8003d70 <HAL_TIMEx_MasterConfigSynchronization>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	bf14      	ite	ne
 80008c2:	2301      	movne	r3, #1
 80008c4:	2300      	moveq	r3, #0
 80008c6:	b2db      	uxtb	r3, r3
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <_ZL12MX_TIM1_Initv+0xec>
  {
    Error_Handler();
 80008cc:	f000 fa96 	bl	8000dfc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008d0:	2360      	movs	r3, #96	; 0x60
 80008d2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80008d4:	2300      	movs	r3, #0
 80008d6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008d8:	2300      	movs	r3, #0
 80008da:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008dc:	2300      	movs	r3, #0
 80008de:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008e0:	2300      	movs	r3, #0
 80008e2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008e4:	2300      	movs	r3, #0
 80008e6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008e8:	2300      	movs	r3, #0
 80008ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008f0:	2200      	movs	r2, #0
 80008f2:	4619      	mov	r1, r3
 80008f4:	4821      	ldr	r0, [pc, #132]	; (800097c <_ZL12MX_TIM1_Initv+0x198>)
 80008f6:	f002 fda1 	bl	800343c <HAL_TIM_PWM_ConfigChannel>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	bf14      	ite	ne
 8000900:	2301      	movne	r3, #1
 8000902:	2300      	moveq	r3, #0
 8000904:	b2db      	uxtb	r3, r3
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <_ZL12MX_TIM1_Initv+0x12a>
  {
    Error_Handler();
 800090a:	f000 fa77 	bl	8000dfc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800090e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000912:	2204      	movs	r2, #4
 8000914:	4619      	mov	r1, r3
 8000916:	4819      	ldr	r0, [pc, #100]	; (800097c <_ZL12MX_TIM1_Initv+0x198>)
 8000918:	f002 fd90 	bl	800343c <HAL_TIM_PWM_ConfigChannel>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	bf14      	ite	ne
 8000922:	2301      	movne	r3, #1
 8000924:	2300      	moveq	r3, #0
 8000926:	b2db      	uxtb	r3, r3
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <_ZL12MX_TIM1_Initv+0x14c>
  {
    Error_Handler();
 800092c:	f000 fa66 	bl	8000dfc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000930:	2300      	movs	r3, #0
 8000932:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000934:	2300      	movs	r3, #0
 8000936:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000938:	2300      	movs	r3, #0
 800093a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800093c:	2300      	movs	r3, #0
 800093e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000940:	2300      	movs	r3, #0
 8000942:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000944:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000948:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800094a:	2300      	movs	r3, #0
 800094c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800094e:	1d3b      	adds	r3, r7, #4
 8000950:	4619      	mov	r1, r3
 8000952:	480a      	ldr	r0, [pc, #40]	; (800097c <_ZL12MX_TIM1_Initv+0x198>)
 8000954:	f003 fa88 	bl	8003e68 <HAL_TIMEx_ConfigBreakDeadTime>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	bf14      	ite	ne
 800095e:	2301      	movne	r3, #1
 8000960:	2300      	moveq	r3, #0
 8000962:	b2db      	uxtb	r3, r3
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <_ZL12MX_TIM1_Initv+0x188>
  {
    Error_Handler();
 8000968:	f000 fa48 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800096c:	4803      	ldr	r0, [pc, #12]	; (800097c <_ZL12MX_TIM1_Initv+0x198>)
 800096e:	f000 fb35 	bl	8000fdc <HAL_TIM_MspPostInit>

}
 8000972:	bf00      	nop
 8000974:	3758      	adds	r7, #88	; 0x58
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	200000b4 	.word	0x200000b4
 8000980:	40010000 	.word	0x40010000

08000984 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b08e      	sub	sp, #56	; 0x38
 8000988:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800098a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800098e:	2200      	movs	r2, #0
 8000990:	601a      	str	r2, [r3, #0]
 8000992:	605a      	str	r2, [r3, #4]
 8000994:	609a      	str	r2, [r3, #8]
 8000996:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000998:	f107 0320 	add.w	r3, r7, #32
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
 80009a0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009a2:	1d3b      	adds	r3, r7, #4
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	605a      	str	r2, [r3, #4]
 80009aa:	609a      	str	r2, [r3, #8]
 80009ac:	60da      	str	r2, [r3, #12]
 80009ae:	611a      	str	r2, [r3, #16]
 80009b0:	615a      	str	r2, [r3, #20]
 80009b2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009b4:	4b39      	ldr	r3, [pc, #228]	; (8000a9c <_ZL12MX_TIM2_Initv+0x118>)
 80009b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009ba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80009bc:	4b37      	ldr	r3, [pc, #220]	; (8000a9c <_ZL12MX_TIM2_Initv+0x118>)
 80009be:	2200      	movs	r2, #0
 80009c0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009c2:	4b36      	ldr	r3, [pc, #216]	; (8000a9c <_ZL12MX_TIM2_Initv+0x118>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80009c8:	4b34      	ldr	r3, [pc, #208]	; (8000a9c <_ZL12MX_TIM2_Initv+0x118>)
 80009ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009ce:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009d0:	4b32      	ldr	r3, [pc, #200]	; (8000a9c <_ZL12MX_TIM2_Initv+0x118>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009d6:	4b31      	ldr	r3, [pc, #196]	; (8000a9c <_ZL12MX_TIM2_Initv+0x118>)
 80009d8:	2200      	movs	r2, #0
 80009da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009dc:	482f      	ldr	r0, [pc, #188]	; (8000a9c <_ZL12MX_TIM2_Initv+0x118>)
 80009de:	f002 fbbd 	bl	800315c <HAL_TIM_Base_Init>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	bf14      	ite	ne
 80009e8:	2301      	movne	r3, #1
 80009ea:	2300      	moveq	r3, #0
 80009ec:	b2db      	uxtb	r3, r3
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <_ZL12MX_TIM2_Initv+0x72>
  {
    Error_Handler();
 80009f2:	f000 fa03 	bl	8000dfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009fa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a00:	4619      	mov	r1, r3
 8000a02:	4826      	ldr	r0, [pc, #152]	; (8000a9c <_ZL12MX_TIM2_Initv+0x118>)
 8000a04:	f002 fddc 	bl	80035c0 <HAL_TIM_ConfigClockSource>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	bf14      	ite	ne
 8000a0e:	2301      	movne	r3, #1
 8000a10:	2300      	moveq	r3, #0
 8000a12:	b2db      	uxtb	r3, r3
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <_ZL12MX_TIM2_Initv+0x98>
  {
    Error_Handler();
 8000a18:	f000 f9f0 	bl	8000dfc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000a1c:	481f      	ldr	r0, [pc, #124]	; (8000a9c <_ZL12MX_TIM2_Initv+0x118>)
 8000a1e:	f002 fbec 	bl	80031fa <HAL_TIM_PWM_Init>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	bf14      	ite	ne
 8000a28:	2301      	movne	r3, #1
 8000a2a:	2300      	moveq	r3, #0
 8000a2c:	b2db      	uxtb	r3, r3
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <_ZL12MX_TIM2_Initv+0xb2>
  {
    Error_Handler();
 8000a32:	f000 f9e3 	bl	8000dfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a36:	2300      	movs	r3, #0
 8000a38:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a3e:	f107 0320 	add.w	r3, r7, #32
 8000a42:	4619      	mov	r1, r3
 8000a44:	4815      	ldr	r0, [pc, #84]	; (8000a9c <_ZL12MX_TIM2_Initv+0x118>)
 8000a46:	f003 f993 	bl	8003d70 <HAL_TIMEx_MasterConfigSynchronization>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	bf14      	ite	ne
 8000a50:	2301      	movne	r3, #1
 8000a52:	2300      	moveq	r3, #0
 8000a54:	b2db      	uxtb	r3, r3
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <_ZL12MX_TIM2_Initv+0xda>
  {
    Error_Handler();
 8000a5a:	f000 f9cf 	bl	8000dfc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a5e:	2360      	movs	r3, #96	; 0x60
 8000a60:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a62:	2300      	movs	r3, #0
 8000a64:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a66:	2300      	movs	r3, #0
 8000a68:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a6e:	1d3b      	adds	r3, r7, #4
 8000a70:	2200      	movs	r2, #0
 8000a72:	4619      	mov	r1, r3
 8000a74:	4809      	ldr	r0, [pc, #36]	; (8000a9c <_ZL12MX_TIM2_Initv+0x118>)
 8000a76:	f002 fce1 	bl	800343c <HAL_TIM_PWM_ConfigChannel>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	bf14      	ite	ne
 8000a80:	2301      	movne	r3, #1
 8000a82:	2300      	moveq	r3, #0
 8000a84:	b2db      	uxtb	r3, r3
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <_ZL12MX_TIM2_Initv+0x10a>
  {
    Error_Handler();
 8000a8a:	f000 f9b7 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000a8e:	4803      	ldr	r0, [pc, #12]	; (8000a9c <_ZL12MX_TIM2_Initv+0x118>)
 8000a90:	f000 faa4 	bl	8000fdc <HAL_TIM_MspPostInit>

}
 8000a94:	bf00      	nop
 8000a96:	3738      	adds	r7, #56	; 0x38
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	200000fc 	.word	0x200000fc

08000aa0 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000aa4:	4b13      	ldr	r3, [pc, #76]	; (8000af4 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000aa6:	4a14      	ldr	r2, [pc, #80]	; (8000af8 <_ZL19MX_USART2_UART_Initv+0x58>)
 8000aa8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000aaa:	4b12      	ldr	r3, [pc, #72]	; (8000af4 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000aac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ab0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ab2:	4b10      	ldr	r3, [pc, #64]	; (8000af4 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ab8:	4b0e      	ldr	r3, [pc, #56]	; (8000af4 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000abe:	4b0d      	ldr	r3, [pc, #52]	; (8000af4 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ac4:	4b0b      	ldr	r3, [pc, #44]	; (8000af4 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000ac6:	220c      	movs	r2, #12
 8000ac8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aca:	4b0a      	ldr	r3, [pc, #40]	; (8000af4 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ad0:	4b08      	ldr	r3, [pc, #32]	; (8000af4 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ad6:	4807      	ldr	r0, [pc, #28]	; (8000af4 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000ad8:	f003 fa18 	bl	8003f0c <HAL_UART_Init>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	bf14      	ite	ne
 8000ae2:	2301      	movne	r3, #1
 8000ae4:	2300      	moveq	r3, #0
 8000ae6:	b2db      	uxtb	r3, r3
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8000aec:	f000 f986 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000af0:	bf00      	nop
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	20000144 	.word	0x20000144
 8000af8:	40004400 	.word	0x40004400

08000afc <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b08a      	sub	sp, #40	; 0x28
 8000b00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b02:	f107 0314 	add.w	r3, r7, #20
 8000b06:	2200      	movs	r2, #0
 8000b08:	601a      	str	r2, [r3, #0]
 8000b0a:	605a      	str	r2, [r3, #4]
 8000b0c:	609a      	str	r2, [r3, #8]
 8000b0e:	60da      	str	r2, [r3, #12]
 8000b10:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b12:	2300      	movs	r3, #0
 8000b14:	613b      	str	r3, [r7, #16]
 8000b16:	4b40      	ldr	r3, [pc, #256]	; (8000c18 <_ZL12MX_GPIO_Initv+0x11c>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	4a3f      	ldr	r2, [pc, #252]	; (8000c18 <_ZL12MX_GPIO_Initv+0x11c>)
 8000b1c:	f043 0304 	orr.w	r3, r3, #4
 8000b20:	6313      	str	r3, [r2, #48]	; 0x30
 8000b22:	4b3d      	ldr	r3, [pc, #244]	; (8000c18 <_ZL12MX_GPIO_Initv+0x11c>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	f003 0304 	and.w	r3, r3, #4
 8000b2a:	613b      	str	r3, [r7, #16]
 8000b2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	60fb      	str	r3, [r7, #12]
 8000b32:	4b39      	ldr	r3, [pc, #228]	; (8000c18 <_ZL12MX_GPIO_Initv+0x11c>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	4a38      	ldr	r2, [pc, #224]	; (8000c18 <_ZL12MX_GPIO_Initv+0x11c>)
 8000b38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3e:	4b36      	ldr	r3, [pc, #216]	; (8000c18 <_ZL12MX_GPIO_Initv+0x11c>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b46:	60fb      	str	r3, [r7, #12]
 8000b48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	60bb      	str	r3, [r7, #8]
 8000b4e:	4b32      	ldr	r3, [pc, #200]	; (8000c18 <_ZL12MX_GPIO_Initv+0x11c>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	4a31      	ldr	r2, [pc, #196]	; (8000c18 <_ZL12MX_GPIO_Initv+0x11c>)
 8000b54:	f043 0301 	orr.w	r3, r3, #1
 8000b58:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5a:	4b2f      	ldr	r3, [pc, #188]	; (8000c18 <_ZL12MX_GPIO_Initv+0x11c>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	f003 0301 	and.w	r3, r3, #1
 8000b62:	60bb      	str	r3, [r7, #8]
 8000b64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	607b      	str	r3, [r7, #4]
 8000b6a:	4b2b      	ldr	r3, [pc, #172]	; (8000c18 <_ZL12MX_GPIO_Initv+0x11c>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	4a2a      	ldr	r2, [pc, #168]	; (8000c18 <_ZL12MX_GPIO_Initv+0x11c>)
 8000b70:	f043 0302 	orr.w	r3, r3, #2
 8000b74:	6313      	str	r3, [r2, #48]	; 0x30
 8000b76:	4b28      	ldr	r3, [pc, #160]	; (8000c18 <_ZL12MX_GPIO_Initv+0x11c>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	f003 0302 	and.w	r3, r3, #2
 8000b7e:	607b      	str	r3, [r7, #4]
 8000b80:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PSB2_Pin|PSB1_Pin|BRK2_Pin|BATT_Pin, GPIO_PIN_RESET);
 8000b82:	2200      	movs	r2, #0
 8000b84:	210f      	movs	r1, #15
 8000b86:	4825      	ldr	r0, [pc, #148]	; (8000c1c <_ZL12MX_GPIO_Initv+0x120>)
 8000b88:	f001 fc96 	bl	80024b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DIRECTION2_Pin|DIRECTION1_Pin, GPIO_PIN_RESET);
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	2112      	movs	r1, #18
 8000b90:	4823      	ldr	r0, [pc, #140]	; (8000c20 <_ZL12MX_GPIO_Initv+0x124>)
 8000b92:	f001 fc91 	bl	80024b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BRK1_GPIO_Port, BRK1_Pin, GPIO_PIN_RESET);
 8000b96:	2200      	movs	r2, #0
 8000b98:	2101      	movs	r1, #1
 8000b9a:	4822      	ldr	r0, [pc, #136]	; (8000c24 <_ZL12MX_GPIO_Initv+0x128>)
 8000b9c:	f001 fc8c 	bl	80024b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ba0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ba4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ba6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000baa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bac:	2300      	movs	r3, #0
 8000bae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bb0:	f107 0314 	add.w	r3, r7, #20
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4819      	ldr	r0, [pc, #100]	; (8000c1c <_ZL12MX_GPIO_Initv+0x120>)
 8000bb8:	f001 faea 	bl	8002190 <HAL_GPIO_Init>

  /*Configure GPIO pins : PSB2_Pin PSB1_Pin BRK2_Pin BATT_Pin */
  GPIO_InitStruct.Pin = PSB2_Pin|PSB1_Pin|BRK2_Pin|BATT_Pin;
 8000bbc:	230f      	movs	r3, #15
 8000bbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bcc:	f107 0314 	add.w	r3, r7, #20
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4812      	ldr	r0, [pc, #72]	; (8000c1c <_ZL12MX_GPIO_Initv+0x120>)
 8000bd4:	f001 fadc 	bl	8002190 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIRECTION2_Pin DIRECTION1_Pin */
  GPIO_InitStruct.Pin = DIRECTION2_Pin|DIRECTION1_Pin;
 8000bd8:	2312      	movs	r3, #18
 8000bda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be4:	2300      	movs	r3, #0
 8000be6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be8:	f107 0314 	add.w	r3, r7, #20
 8000bec:	4619      	mov	r1, r3
 8000bee:	480c      	ldr	r0, [pc, #48]	; (8000c20 <_ZL12MX_GPIO_Initv+0x124>)
 8000bf0:	f001 face 	bl	8002190 <HAL_GPIO_Init>

  /*Configure GPIO pin : BRK1_Pin */
  GPIO_InitStruct.Pin = BRK1_Pin;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c00:	2300      	movs	r3, #0
 8000c02:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BRK1_GPIO_Port, &GPIO_InitStruct);
 8000c04:	f107 0314 	add.w	r3, r7, #20
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4806      	ldr	r0, [pc, #24]	; (8000c24 <_ZL12MX_GPIO_Initv+0x128>)
 8000c0c:	f001 fac0 	bl	8002190 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c10:	bf00      	nop
 8000c12:	3728      	adds	r7, #40	; 0x28
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	40023800 	.word	0x40023800
 8000c1c:	40020800 	.word	0x40020800
 8000c20:	40020000 	.word	0x40020000
 8000c24:	40020400 	.word	0x40020400

08000c28 <HAL_CAN_RxFifo0MsgPendingCallback>:
uint32_t id;
uint32_t dlc;
std::array<int,8> data;

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000c28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c2a:	b097      	sub	sp, #92	; 0x5c
 8000c2c:	af06      	add	r7, sp, #24
 8000c2e:	6178      	str	r0, [r7, #20]
	  uint8_t RxData[8];
	  CAN_RxHeaderTypeDef RxHeader;

	  if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 8000c30:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000c34:	f107 021c 	add.w	r2, r7, #28
 8000c38:	2100      	movs	r1, #0
 8000c3a:	6978      	ldr	r0, [r7, #20]
 8000c3c:	f000 fe2e 	bl	800189c <HAL_CAN_GetRxMessage>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	bf0c      	ite	eq
 8000c46:	2301      	moveq	r3, #1
 8000c48:	2300      	movne	r3, #0
 8000c4a:	b2db      	uxtb	r3, r3
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	f000 80c5 	beq.w	8000ddc <HAL_CAN_RxFifo0MsgPendingCallback+0x1b4>
	  {
		  id = (RxHeader.IDE == CAN_ID_STD)? RxHeader.StdId : RxHeader.ExtId;     // ID
 8000c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d101      	bne.n	8000c5c <HAL_CAN_RxFifo0MsgPendingCallback+0x34>
 8000c58:	69fb      	ldr	r3, [r7, #28]
 8000c5a:	e000      	b.n	8000c5e <HAL_CAN_RxFifo0MsgPendingCallback+0x36>
 8000c5c:	6a3b      	ldr	r3, [r7, #32]
 8000c5e:	4a61      	ldr	r2, [pc, #388]	; (8000de4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1bc>)
 8000c60:	6013      	str	r3, [r2, #0]
		  dlc = RxHeader.DLC;                                                     // DLC
 8000c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c64:	4a60      	ldr	r2, [pc, #384]	; (8000de8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c0>)
 8000c66:	6013      	str	r3, [r2, #0]
		  data[0] = RxData[0] - 128;                                                    // Data
 8000c68:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8000c6c:	461c      	mov	r4, r3
 8000c6e:	2100      	movs	r1, #0
 8000c70:	485e      	ldr	r0, [pc, #376]	; (8000dec <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8000c72:	f000 f8c8 	bl	8000e06 <_ZNSt5arrayIiLj8EEixEj>
 8000c76:	4602      	mov	r2, r0
 8000c78:	f1a4 0380 	sub.w	r3, r4, #128	; 0x80
 8000c7c:	6013      	str	r3, [r2, #0]
		  data[1] = RxData[1] - 128;
 8000c7e:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8000c82:	461c      	mov	r4, r3
 8000c84:	2101      	movs	r1, #1
 8000c86:	4859      	ldr	r0, [pc, #356]	; (8000dec <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8000c88:	f000 f8bd 	bl	8000e06 <_ZNSt5arrayIiLj8EEixEj>
 8000c8c:	4602      	mov	r2, r0
 8000c8e:	f1a4 0380 	sub.w	r3, r4, #128	; 0x80
 8000c92:	6013      	str	r3, [r2, #0]
		  data[2] = RxData[2] - 128;
 8000c94:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8000c98:	461c      	mov	r4, r3
 8000c9a:	2102      	movs	r1, #2
 8000c9c:	4853      	ldr	r0, [pc, #332]	; (8000dec <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8000c9e:	f000 f8b2 	bl	8000e06 <_ZNSt5arrayIiLj8EEixEj>
 8000ca2:	4602      	mov	r2, r0
 8000ca4:	f1a4 0380 	sub.w	r3, r4, #128	; 0x80
 8000ca8:	6013      	str	r3, [r2, #0]
		  data[3] = RxData[3] - 128;
 8000caa:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000cae:	461c      	mov	r4, r3
 8000cb0:	2103      	movs	r1, #3
 8000cb2:	484e      	ldr	r0, [pc, #312]	; (8000dec <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8000cb4:	f000 f8a7 	bl	8000e06 <_ZNSt5arrayIiLj8EEixEj>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	f1a4 0380 	sub.w	r3, r4, #128	; 0x80
 8000cbe:	6013      	str	r3, [r2, #0]
		  data[4] = RxData[4];
 8000cc0:	f897 403c 	ldrb.w	r4, [r7, #60]	; 0x3c
 8000cc4:	2104      	movs	r1, #4
 8000cc6:	4849      	ldr	r0, [pc, #292]	; (8000dec <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8000cc8:	f000 f89d 	bl	8000e06 <_ZNSt5arrayIiLj8EEixEj>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	4622      	mov	r2, r4
 8000cd0:	601a      	str	r2, [r3, #0]
		  data[5] = RxData[5];
 8000cd2:	f897 403d 	ldrb.w	r4, [r7, #61]	; 0x3d
 8000cd6:	2105      	movs	r1, #5
 8000cd8:	4844      	ldr	r0, [pc, #272]	; (8000dec <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8000cda:	f000 f894 	bl	8000e06 <_ZNSt5arrayIiLj8EEixEj>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	4622      	mov	r2, r4
 8000ce2:	601a      	str	r2, [r3, #0]
		  data[6] = RxData[6];
 8000ce4:	f897 403e 	ldrb.w	r4, [r7, #62]	; 0x3e
 8000ce8:	2106      	movs	r1, #6
 8000cea:	4840      	ldr	r0, [pc, #256]	; (8000dec <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8000cec:	f000 f88b 	bl	8000e06 <_ZNSt5arrayIiLj8EEixEj>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	4622      	mov	r2, r4
 8000cf4:	601a      	str	r2, [r3, #0]
		  data[7] = RxData[7];
 8000cf6:	f897 403f 	ldrb.w	r4, [r7, #63]	; 0x3f
 8000cfa:	2107      	movs	r1, #7
 8000cfc:	483b      	ldr	r0, [pc, #236]	; (8000dec <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8000cfe:	f000 f882 	bl	8000e06 <_ZNSt5arrayIiLj8EEixEj>
 8000d02:	4603      	mov	r3, r0
 8000d04:	4622      	mov	r2, r4
 8000d06:	601a      	str	r2, [r3, #0]
		  printf("%d %d %d %d %d %d %d %d\n",data[0],data[1],data[2],data[3],data[4],data[5],data[6],data[7]);
 8000d08:	2100      	movs	r1, #0
 8000d0a:	4838      	ldr	r0, [pc, #224]	; (8000dec <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8000d0c:	f000 f87b 	bl	8000e06 <_ZNSt5arrayIiLj8EEixEj>
 8000d10:	4603      	mov	r3, r0
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	613b      	str	r3, [r7, #16]
 8000d16:	2101      	movs	r1, #1
 8000d18:	4834      	ldr	r0, [pc, #208]	; (8000dec <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8000d1a:	f000 f874 	bl	8000e06 <_ZNSt5arrayIiLj8EEixEj>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	60fa      	str	r2, [r7, #12]
 8000d24:	2102      	movs	r1, #2
 8000d26:	4831      	ldr	r0, [pc, #196]	; (8000dec <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8000d28:	f000 f86d 	bl	8000e06 <_ZNSt5arrayIiLj8EEixEj>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	6818      	ldr	r0, [r3, #0]
 8000d30:	60b8      	str	r0, [r7, #8]
 8000d32:	2103      	movs	r1, #3
 8000d34:	482d      	ldr	r0, [pc, #180]	; (8000dec <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8000d36:	f000 f866 	bl	8000e06 <_ZNSt5arrayIiLj8EEixEj>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	681c      	ldr	r4, [r3, #0]
 8000d3e:	2104      	movs	r1, #4
 8000d40:	482a      	ldr	r0, [pc, #168]	; (8000dec <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8000d42:	f000 f860 	bl	8000e06 <_ZNSt5arrayIiLj8EEixEj>
 8000d46:	4603      	mov	r3, r0
 8000d48:	681d      	ldr	r5, [r3, #0]
 8000d4a:	2105      	movs	r1, #5
 8000d4c:	4827      	ldr	r0, [pc, #156]	; (8000dec <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8000d4e:	f000 f85a 	bl	8000e06 <_ZNSt5arrayIiLj8EEixEj>
 8000d52:	4603      	mov	r3, r0
 8000d54:	681e      	ldr	r6, [r3, #0]
 8000d56:	2106      	movs	r1, #6
 8000d58:	4824      	ldr	r0, [pc, #144]	; (8000dec <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8000d5a:	f000 f854 	bl	8000e06 <_ZNSt5arrayIiLj8EEixEj>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	6819      	ldr	r1, [r3, #0]
 8000d62:	6079      	str	r1, [r7, #4]
 8000d64:	2107      	movs	r1, #7
 8000d66:	4821      	ldr	r0, [pc, #132]	; (8000dec <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8000d68:	f000 f84d 	bl	8000e06 <_ZNSt5arrayIiLj8EEixEj>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	9304      	str	r3, [sp, #16]
 8000d72:	6879      	ldr	r1, [r7, #4]
 8000d74:	9103      	str	r1, [sp, #12]
 8000d76:	9602      	str	r6, [sp, #8]
 8000d78:	9501      	str	r5, [sp, #4]
 8000d7a:	9400      	str	r4, [sp, #0]
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	68fa      	ldr	r2, [r7, #12]
 8000d80:	6939      	ldr	r1, [r7, #16]
 8000d82:	481b      	ldr	r0, [pc, #108]	; (8000df0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 8000d84:	f003 fbb6 	bl	80044f4 <iprintf>

		  if (data[0] < 0){
 8000d88:	2100      	movs	r1, #0
 8000d8a:	4818      	ldr	r0, [pc, #96]	; (8000dec <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8000d8c:	f000 f83b 	bl	8000e06 <_ZNSt5arrayIiLj8EEixEj>
 8000d90:	4603      	mov	r3, r0
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	0fdb      	lsrs	r3, r3, #31
 8000d96:	b2db      	uxtb	r3, r3
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d00d      	beq.n	8000db8 <HAL_CAN_RxFifo0MsgPendingCallback+0x190>
			  HAL_GPIO_WritePin(GPIOA,DIRECTION1_Pin,GPIO_PIN_RESET);
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	2110      	movs	r1, #16
 8000da0:	4814      	ldr	r0, [pc, #80]	; (8000df4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1cc>)
 8000da2:	f001 fb89 	bl	80024b8 <HAL_GPIO_WritePin>
			  data[0] *= -1;
 8000da6:	2100      	movs	r1, #0
 8000da8:	4810      	ldr	r0, [pc, #64]	; (8000dec <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8000daa:	f000 f82c 	bl	8000e06 <_ZNSt5arrayIiLj8EEixEj>
 8000dae:	4603      	mov	r3, r0
 8000db0:	681a      	ldr	r2, [r3, #0]
 8000db2:	4252      	negs	r2, r2
 8000db4:	601a      	str	r2, [r3, #0]
 8000db6:	e004      	b.n	8000dc2 <HAL_CAN_RxFifo0MsgPendingCallback+0x19a>
		  }
		  else{
			  HAL_GPIO_WritePin(GPIOA,DIRECTION1_Pin,GPIO_PIN_SET);
 8000db8:	2201      	movs	r2, #1
 8000dba:	2110      	movs	r1, #16
 8000dbc:	480d      	ldr	r0, [pc, #52]	; (8000df4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1cc>)
 8000dbe:	f001 fb7b 	bl	80024b8 <HAL_GPIO_WritePin>
		  }
		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,data[0] * 500);
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	4809      	ldr	r0, [pc, #36]	; (8000dec <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8000dc6:	f000 f81e 	bl	8000e06 <_ZNSt5arrayIiLj8EEixEj>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000dd2:	fb03 f202 	mul.w	r2, r3, r2
 8000dd6:	4b08      	ldr	r3, [pc, #32]	; (8000df8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d0>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	635a      	str	r2, [r3, #52]	; 0x34


	  }
}
 8000ddc:	bf00      	nop
 8000dde:	3744      	adds	r7, #68	; 0x44
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000de4:	20000188 	.word	0x20000188
 8000de8:	2000018c 	.word	0x2000018c
 8000dec:	20000190 	.word	0x20000190
 8000df0:	080056c8 	.word	0x080056c8
 8000df4:	40020000 	.word	0x40020000
 8000df8:	200000b4 	.word	0x200000b4

08000dfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e00:	b672      	cpsid	i
}
 8000e02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e04:	e7fe      	b.n	8000e04 <Error_Handler+0x8>

08000e06 <_ZNSt5arrayIiLj8EEixEj>:
      _GLIBCXX_NODISCARD constexpr bool
      empty() const noexcept { return size() == 0; }

      // Element access.
      _GLIBCXX17_CONSTEXPR reference
      operator[](size_type __n) noexcept
 8000e06:	b580      	push	{r7, lr}
 8000e08:	b082      	sub	sp, #8
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	6078      	str	r0, [r7, #4]
 8000e0e:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	6839      	ldr	r1, [r7, #0]
 8000e14:	4618      	mov	r0, r3
 8000e16:	f000 f805 	bl	8000e24 <_ZNSt14__array_traitsIiLj8EE6_S_refERA8_Kij>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	3708      	adds	r7, #8
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}

08000e24 <_ZNSt14__array_traitsIiLj8EE6_S_refERA8_Kij>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	009b      	lsls	r3, r3, #2
 8000e32:	687a      	ldr	r2, [r7, #4]
 8000e34:	4413      	add	r3, r2
 8000e36:	4618      	mov	r0, r3
 8000e38:	370c      	adds	r7, #12
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
	...

08000e44 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	607b      	str	r3, [r7, #4]
 8000e4e:	4b10      	ldr	r3, [pc, #64]	; (8000e90 <HAL_MspInit+0x4c>)
 8000e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e52:	4a0f      	ldr	r2, [pc, #60]	; (8000e90 <HAL_MspInit+0x4c>)
 8000e54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e58:	6453      	str	r3, [r2, #68]	; 0x44
 8000e5a:	4b0d      	ldr	r3, [pc, #52]	; (8000e90 <HAL_MspInit+0x4c>)
 8000e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e62:	607b      	str	r3, [r7, #4]
 8000e64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	603b      	str	r3, [r7, #0]
 8000e6a:	4b09      	ldr	r3, [pc, #36]	; (8000e90 <HAL_MspInit+0x4c>)
 8000e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6e:	4a08      	ldr	r2, [pc, #32]	; (8000e90 <HAL_MspInit+0x4c>)
 8000e70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e74:	6413      	str	r3, [r2, #64]	; 0x40
 8000e76:	4b06      	ldr	r3, [pc, #24]	; (8000e90 <HAL_MspInit+0x4c>)
 8000e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e7e:	603b      	str	r3, [r7, #0]
 8000e80:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e82:	2007      	movs	r0, #7
 8000e84:	f001 f942 	bl	800210c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e88:	bf00      	nop
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	40023800 	.word	0x40023800

08000e94 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b08a      	sub	sp, #40	; 0x28
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e9c:	f107 0314 	add.w	r3, r7, #20
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	605a      	str	r2, [r3, #4]
 8000ea6:	609a      	str	r2, [r3, #8]
 8000ea8:	60da      	str	r2, [r3, #12]
 8000eaa:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN2)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a2c      	ldr	r2, [pc, #176]	; (8000f64 <HAL_CAN_MspInit+0xd0>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d151      	bne.n	8000f5a <HAL_CAN_MspInit+0xc6>
  {
  /* USER CODE BEGIN CAN2_MspInit 0 */

  /* USER CODE END CAN2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	613b      	str	r3, [r7, #16]
 8000eba:	4b2b      	ldr	r3, [pc, #172]	; (8000f68 <HAL_CAN_MspInit+0xd4>)
 8000ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ebe:	4a2a      	ldr	r2, [pc, #168]	; (8000f68 <HAL_CAN_MspInit+0xd4>)
 8000ec0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000ec4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ec6:	4b28      	ldr	r3, [pc, #160]	; (8000f68 <HAL_CAN_MspInit+0xd4>)
 8000ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000ece:	613b      	str	r3, [r7, #16]
 8000ed0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	60fb      	str	r3, [r7, #12]
 8000ed6:	4b24      	ldr	r3, [pc, #144]	; (8000f68 <HAL_CAN_MspInit+0xd4>)
 8000ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eda:	4a23      	ldr	r2, [pc, #140]	; (8000f68 <HAL_CAN_MspInit+0xd4>)
 8000edc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ee0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ee2:	4b21      	ldr	r3, [pc, #132]	; (8000f68 <HAL_CAN_MspInit+0xd4>)
 8000ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000eea:	60fb      	str	r3, [r7, #12]
 8000eec:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60bb      	str	r3, [r7, #8]
 8000ef2:	4b1d      	ldr	r3, [pc, #116]	; (8000f68 <HAL_CAN_MspInit+0xd4>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	4a1c      	ldr	r2, [pc, #112]	; (8000f68 <HAL_CAN_MspInit+0xd4>)
 8000ef8:	f043 0302 	orr.w	r3, r3, #2
 8000efc:	6313      	str	r3, [r2, #48]	; 0x30
 8000efe:	4b1a      	ldr	r3, [pc, #104]	; (8000f68 <HAL_CAN_MspInit+0xd4>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	f003 0302 	and.w	r3, r3, #2
 8000f06:	60bb      	str	r3, [r7, #8]
 8000f08:	68bb      	ldr	r3, [r7, #8]
    /**CAN2 GPIO Configuration
    PB5     ------> CAN2_RX
    PB6     ------> CAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000f0a:	2360      	movs	r3, #96	; 0x60
 8000f0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0e:	2302      	movs	r3, #2
 8000f10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f12:	2300      	movs	r3, #0
 8000f14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f16:	2303      	movs	r3, #3
 8000f18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000f1a:	2309      	movs	r3, #9
 8000f1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f1e:	f107 0314 	add.w	r3, r7, #20
 8000f22:	4619      	mov	r1, r3
 8000f24:	4811      	ldr	r0, [pc, #68]	; (8000f6c <HAL_CAN_MspInit+0xd8>)
 8000f26:	f001 f933 	bl	8002190 <HAL_GPIO_Init>

    /* CAN2 interrupt Init */
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 0, 0);
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	203f      	movs	r0, #63	; 0x3f
 8000f30:	f001 f8f7 	bl	8002122 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 8000f34:	203f      	movs	r0, #63	; 0x3f
 8000f36:	f001 f910 	bl	800215a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	2040      	movs	r0, #64	; 0x40
 8000f40:	f001 f8ef 	bl	8002122 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8000f44:	2040      	movs	r0, #64	; 0x40
 8000f46:	f001 f908 	bl	800215a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	2041      	movs	r0, #65	; 0x41
 8000f50:	f001 f8e7 	bl	8002122 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8000f54:	2041      	movs	r0, #65	; 0x41
 8000f56:	f001 f900 	bl	800215a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8000f5a:	bf00      	nop
 8000f5c:	3728      	adds	r7, #40	; 0x28
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40006800 	.word	0x40006800
 8000f68:	40023800 	.word	0x40023800
 8000f6c:	40020400 	.word	0x40020400

08000f70 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b085      	sub	sp, #20
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a15      	ldr	r2, [pc, #84]	; (8000fd4 <HAL_TIM_Base_MspInit+0x64>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d10e      	bne.n	8000fa0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f82:	2300      	movs	r3, #0
 8000f84:	60fb      	str	r3, [r7, #12]
 8000f86:	4b14      	ldr	r3, [pc, #80]	; (8000fd8 <HAL_TIM_Base_MspInit+0x68>)
 8000f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f8a:	4a13      	ldr	r2, [pc, #76]	; (8000fd8 <HAL_TIM_Base_MspInit+0x68>)
 8000f8c:	f043 0301 	orr.w	r3, r3, #1
 8000f90:	6453      	str	r3, [r2, #68]	; 0x44
 8000f92:	4b11      	ldr	r3, [pc, #68]	; (8000fd8 <HAL_TIM_Base_MspInit+0x68>)
 8000f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f96:	f003 0301 	and.w	r3, r3, #1
 8000f9a:	60fb      	str	r3, [r7, #12]
 8000f9c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000f9e:	e012      	b.n	8000fc6 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM2)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fa8:	d10d      	bne.n	8000fc6 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000faa:	2300      	movs	r3, #0
 8000fac:	60bb      	str	r3, [r7, #8]
 8000fae:	4b0a      	ldr	r3, [pc, #40]	; (8000fd8 <HAL_TIM_Base_MspInit+0x68>)
 8000fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb2:	4a09      	ldr	r2, [pc, #36]	; (8000fd8 <HAL_TIM_Base_MspInit+0x68>)
 8000fb4:	f043 0301 	orr.w	r3, r3, #1
 8000fb8:	6413      	str	r3, [r2, #64]	; 0x40
 8000fba:	4b07      	ldr	r3, [pc, #28]	; (8000fd8 <HAL_TIM_Base_MspInit+0x68>)
 8000fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fbe:	f003 0301 	and.w	r3, r3, #1
 8000fc2:	60bb      	str	r3, [r7, #8]
 8000fc4:	68bb      	ldr	r3, [r7, #8]
}
 8000fc6:	bf00      	nop
 8000fc8:	3714      	adds	r7, #20
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	40010000 	.word	0x40010000
 8000fd8:	40023800 	.word	0x40023800

08000fdc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b08a      	sub	sp, #40	; 0x28
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe4:	f107 0314 	add.w	r3, r7, #20
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	605a      	str	r2, [r3, #4]
 8000fee:	609a      	str	r2, [r3, #8]
 8000ff0:	60da      	str	r2, [r3, #12]
 8000ff2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a24      	ldr	r2, [pc, #144]	; (800108c <HAL_TIM_MspPostInit+0xb0>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d11f      	bne.n	800103e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	613b      	str	r3, [r7, #16]
 8001002:	4b23      	ldr	r3, [pc, #140]	; (8001090 <HAL_TIM_MspPostInit+0xb4>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	4a22      	ldr	r2, [pc, #136]	; (8001090 <HAL_TIM_MspPostInit+0xb4>)
 8001008:	f043 0301 	orr.w	r3, r3, #1
 800100c:	6313      	str	r3, [r2, #48]	; 0x30
 800100e:	4b20      	ldr	r3, [pc, #128]	; (8001090 <HAL_TIM_MspPostInit+0xb4>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	f003 0301 	and.w	r3, r3, #1
 8001016:	613b      	str	r3, [r7, #16]
 8001018:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = pwm1_Pin|pwm2_Pin;
 800101a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800101e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001020:	2302      	movs	r3, #2
 8001022:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001024:	2300      	movs	r3, #0
 8001026:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001028:	2300      	movs	r3, #0
 800102a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800102c:	2301      	movs	r3, #1
 800102e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001030:	f107 0314 	add.w	r3, r7, #20
 8001034:	4619      	mov	r1, r3
 8001036:	4817      	ldr	r0, [pc, #92]	; (8001094 <HAL_TIM_MspPostInit+0xb8>)
 8001038:	f001 f8aa 	bl	8002190 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800103c:	e022      	b.n	8001084 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM2)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001046:	d11d      	bne.n	8001084 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001048:	2300      	movs	r3, #0
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	4b10      	ldr	r3, [pc, #64]	; (8001090 <HAL_TIM_MspPostInit+0xb4>)
 800104e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001050:	4a0f      	ldr	r2, [pc, #60]	; (8001090 <HAL_TIM_MspPostInit+0xb4>)
 8001052:	f043 0301 	orr.w	r3, r3, #1
 8001056:	6313      	str	r3, [r2, #48]	; 0x30
 8001058:	4b0d      	ldr	r3, [pc, #52]	; (8001090 <HAL_TIM_MspPostInit+0xb4>)
 800105a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105c:	f003 0301 	and.w	r3, r3, #1
 8001060:	60fb      	str	r3, [r7, #12]
 8001062:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DIRECTION3_Pin;
 8001064:	2301      	movs	r3, #1
 8001066:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001068:	2302      	movs	r3, #2
 800106a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106c:	2300      	movs	r3, #0
 800106e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001070:	2300      	movs	r3, #0
 8001072:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001074:	2301      	movs	r3, #1
 8001076:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DIRECTION3_GPIO_Port, &GPIO_InitStruct);
 8001078:	f107 0314 	add.w	r3, r7, #20
 800107c:	4619      	mov	r1, r3
 800107e:	4805      	ldr	r0, [pc, #20]	; (8001094 <HAL_TIM_MspPostInit+0xb8>)
 8001080:	f001 f886 	bl	8002190 <HAL_GPIO_Init>
}
 8001084:	bf00      	nop
 8001086:	3728      	adds	r7, #40	; 0x28
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	40010000 	.word	0x40010000
 8001090:	40023800 	.word	0x40023800
 8001094:	40020000 	.word	0x40020000

08001098 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b08a      	sub	sp, #40	; 0x28
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a0:	f107 0314 	add.w	r3, r7, #20
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	605a      	str	r2, [r3, #4]
 80010aa:	609a      	str	r2, [r3, #8]
 80010ac:	60da      	str	r2, [r3, #12]
 80010ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a19      	ldr	r2, [pc, #100]	; (800111c <HAL_UART_MspInit+0x84>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d12b      	bne.n	8001112 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010ba:	2300      	movs	r3, #0
 80010bc:	613b      	str	r3, [r7, #16]
 80010be:	4b18      	ldr	r3, [pc, #96]	; (8001120 <HAL_UART_MspInit+0x88>)
 80010c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c2:	4a17      	ldr	r2, [pc, #92]	; (8001120 <HAL_UART_MspInit+0x88>)
 80010c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010c8:	6413      	str	r3, [r2, #64]	; 0x40
 80010ca:	4b15      	ldr	r3, [pc, #84]	; (8001120 <HAL_UART_MspInit+0x88>)
 80010cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010d2:	613b      	str	r3, [r7, #16]
 80010d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	60fb      	str	r3, [r7, #12]
 80010da:	4b11      	ldr	r3, [pc, #68]	; (8001120 <HAL_UART_MspInit+0x88>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	4a10      	ldr	r2, [pc, #64]	; (8001120 <HAL_UART_MspInit+0x88>)
 80010e0:	f043 0301 	orr.w	r3, r3, #1
 80010e4:	6313      	str	r3, [r2, #48]	; 0x30
 80010e6:	4b0e      	ldr	r3, [pc, #56]	; (8001120 <HAL_UART_MspInit+0x88>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	f003 0301 	and.w	r3, r3, #1
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80010f2:	230c      	movs	r3, #12
 80010f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f6:	2302      	movs	r3, #2
 80010f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fa:	2300      	movs	r3, #0
 80010fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010fe:	2303      	movs	r3, #3
 8001100:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001102:	2307      	movs	r3, #7
 8001104:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001106:	f107 0314 	add.w	r3, r7, #20
 800110a:	4619      	mov	r1, r3
 800110c:	4805      	ldr	r0, [pc, #20]	; (8001124 <HAL_UART_MspInit+0x8c>)
 800110e:	f001 f83f 	bl	8002190 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001112:	bf00      	nop
 8001114:	3728      	adds	r7, #40	; 0x28
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40004400 	.word	0x40004400
 8001120:	40023800 	.word	0x40023800
 8001124:	40020000 	.word	0x40020000

08001128 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800112c:	e7fe      	b.n	800112c <NMI_Handler+0x4>

0800112e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800112e:	b480      	push	{r7}
 8001130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001132:	e7fe      	b.n	8001132 <HardFault_Handler+0x4>

08001134 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001138:	e7fe      	b.n	8001138 <MemManage_Handler+0x4>

0800113a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800113a:	b480      	push	{r7}
 800113c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800113e:	e7fe      	b.n	800113e <BusFault_Handler+0x4>

08001140 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001144:	e7fe      	b.n	8001144 <UsageFault_Handler+0x4>

08001146 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001146:	b480      	push	{r7}
 8001148:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800114a:	bf00      	nop
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr

08001154 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001158:	bf00      	nop
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr

08001162 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001162:	b480      	push	{r7}
 8001164:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001166:	bf00      	nop
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr

08001170 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001174:	f000 f952 	bl	800141c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001178:	bf00      	nop
 800117a:	bd80      	pop	{r7, pc}

0800117c <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupt.
  */
void CAN2_TX_IRQHandler(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001180:	4802      	ldr	r0, [pc, #8]	; (800118c <CAN2_TX_IRQHandler+0x10>)
 8001182:	f000 fcc3 	bl	8001b0c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 8001186:	bf00      	nop
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	2000008c 	.word	0x2000008c

08001190 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupt.
  */
void CAN2_RX0_IRQHandler(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001194:	4802      	ldr	r0, [pc, #8]	; (80011a0 <CAN2_RX0_IRQHandler+0x10>)
 8001196:	f000 fcb9 	bl	8001b0c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 800119a:	bf00      	nop
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	2000008c 	.word	0x2000008c

080011a4 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80011a8:	4802      	ldr	r0, [pc, #8]	; (80011b4 <CAN2_RX1_IRQHandler+0x10>)
 80011aa:	f000 fcaf 	bl	8001b0c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 80011ae:	bf00      	nop
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	2000008c 	.word	0x2000008c

080011b8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b086      	sub	sp, #24
 80011bc:	af00      	add	r7, sp, #0
 80011be:	60f8      	str	r0, [r7, #12]
 80011c0:	60b9      	str	r1, [r7, #8]
 80011c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011c4:	2300      	movs	r3, #0
 80011c6:	617b      	str	r3, [r7, #20]
 80011c8:	e00a      	b.n	80011e0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80011ca:	f3af 8000 	nop.w
 80011ce:	4601      	mov	r1, r0
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	1c5a      	adds	r2, r3, #1
 80011d4:	60ba      	str	r2, [r7, #8]
 80011d6:	b2ca      	uxtb	r2, r1
 80011d8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	3301      	adds	r3, #1
 80011de:	617b      	str	r3, [r7, #20]
 80011e0:	697a      	ldr	r2, [r7, #20]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	429a      	cmp	r2, r3
 80011e6:	dbf0      	blt.n	80011ca <_read+0x12>
  }

  return len;
 80011e8:	687b      	ldr	r3, [r7, #4]
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3718      	adds	r7, #24
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}

080011f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011f2:	b580      	push	{r7, lr}
 80011f4:	b086      	sub	sp, #24
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	60f8      	str	r0, [r7, #12]
 80011fa:	60b9      	str	r1, [r7, #8]
 80011fc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011fe:	2300      	movs	r3, #0
 8001200:	617b      	str	r3, [r7, #20]
 8001202:	e009      	b.n	8001218 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	1c5a      	adds	r2, r3, #1
 8001208:	60ba      	str	r2, [r7, #8]
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	4618      	mov	r0, r3
 800120e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	3301      	adds	r3, #1
 8001216:	617b      	str	r3, [r7, #20]
 8001218:	697a      	ldr	r2, [r7, #20]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	429a      	cmp	r2, r3
 800121e:	dbf1      	blt.n	8001204 <_write+0x12>
  }
  return len;
 8001220:	687b      	ldr	r3, [r7, #4]
}
 8001222:	4618      	mov	r0, r3
 8001224:	3718      	adds	r7, #24
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}

0800122a <_close>:

int _close(int file)
{
 800122a:	b480      	push	{r7}
 800122c:	b083      	sub	sp, #12
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001232:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001236:	4618      	mov	r0, r3
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr

08001242 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001242:	b480      	push	{r7}
 8001244:	b083      	sub	sp, #12
 8001246:	af00      	add	r7, sp, #0
 8001248:	6078      	str	r0, [r7, #4]
 800124a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001252:	605a      	str	r2, [r3, #4]
  return 0;
 8001254:	2300      	movs	r3, #0
}
 8001256:	4618      	mov	r0, r3
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr

08001262 <_isatty>:

int _isatty(int file)
{
 8001262:	b480      	push	{r7}
 8001264:	b083      	sub	sp, #12
 8001266:	af00      	add	r7, sp, #0
 8001268:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800126a:	2301      	movs	r3, #1
}
 800126c:	4618      	mov	r0, r3
 800126e:	370c      	adds	r7, #12
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr

08001278 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001278:	b480      	push	{r7}
 800127a:	b085      	sub	sp, #20
 800127c:	af00      	add	r7, sp, #0
 800127e:	60f8      	str	r0, [r7, #12]
 8001280:	60b9      	str	r1, [r7, #8]
 8001282:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001284:	2300      	movs	r3, #0
}
 8001286:	4618      	mov	r0, r3
 8001288:	3714      	adds	r7, #20
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
	...

08001294 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b086      	sub	sp, #24
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800129c:	4a14      	ldr	r2, [pc, #80]	; (80012f0 <_sbrk+0x5c>)
 800129e:	4b15      	ldr	r3, [pc, #84]	; (80012f4 <_sbrk+0x60>)
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012a8:	4b13      	ldr	r3, [pc, #76]	; (80012f8 <_sbrk+0x64>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d102      	bne.n	80012b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012b0:	4b11      	ldr	r3, [pc, #68]	; (80012f8 <_sbrk+0x64>)
 80012b2:	4a12      	ldr	r2, [pc, #72]	; (80012fc <_sbrk+0x68>)
 80012b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012b6:	4b10      	ldr	r3, [pc, #64]	; (80012f8 <_sbrk+0x64>)
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4413      	add	r3, r2
 80012be:	693a      	ldr	r2, [r7, #16]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d207      	bcs.n	80012d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012c4:	f003 f8e4 	bl	8004490 <__errno>
 80012c8:	4603      	mov	r3, r0
 80012ca:	220c      	movs	r2, #12
 80012cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012d2:	e009      	b.n	80012e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012d4:	4b08      	ldr	r3, [pc, #32]	; (80012f8 <_sbrk+0x64>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012da:	4b07      	ldr	r3, [pc, #28]	; (80012f8 <_sbrk+0x64>)
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4413      	add	r3, r2
 80012e2:	4a05      	ldr	r2, [pc, #20]	; (80012f8 <_sbrk+0x64>)
 80012e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012e6:	68fb      	ldr	r3, [r7, #12]
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3718      	adds	r7, #24
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	20020000 	.word	0x20020000
 80012f4:	00000400 	.word	0x00000400
 80012f8:	200001b0 	.word	0x200001b0
 80012fc:	200001c8 	.word	0x200001c8

08001300 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001304:	4b06      	ldr	r3, [pc, #24]	; (8001320 <SystemInit+0x20>)
 8001306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800130a:	4a05      	ldr	r2, [pc, #20]	; (8001320 <SystemInit+0x20>)
 800130c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001310:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001314:	bf00      	nop
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	e000ed00 	.word	0xe000ed00

08001324 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001324:	f8df d034 	ldr.w	sp, [pc, #52]	; 800135c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001328:	480d      	ldr	r0, [pc, #52]	; (8001360 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800132a:	490e      	ldr	r1, [pc, #56]	; (8001364 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800132c:	4a0e      	ldr	r2, [pc, #56]	; (8001368 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800132e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001330:	e002      	b.n	8001338 <LoopCopyDataInit>

08001332 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001332:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001334:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001336:	3304      	adds	r3, #4

08001338 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001338:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800133a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800133c:	d3f9      	bcc.n	8001332 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800133e:	4a0b      	ldr	r2, [pc, #44]	; (800136c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001340:	4c0b      	ldr	r4, [pc, #44]	; (8001370 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001342:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001344:	e001      	b.n	800134a <LoopFillZerobss>

08001346 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001346:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001348:	3204      	adds	r2, #4

0800134a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800134a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800134c:	d3fb      	bcc.n	8001346 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800134e:	f7ff ffd7 	bl	8001300 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001352:	f003 f8a3 	bl	800449c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001356:	f7ff f92d 	bl	80005b4 <main>
  bx  lr    
 800135a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800135c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001360:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001364:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001368:	080057a4 	.word	0x080057a4
  ldr r2, =_sbss
 800136c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001370:	200001c8 	.word	0x200001c8

08001374 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001374:	e7fe      	b.n	8001374 <ADC_IRQHandler>
	...

08001378 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800137c:	4b0e      	ldr	r3, [pc, #56]	; (80013b8 <HAL_Init+0x40>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a0d      	ldr	r2, [pc, #52]	; (80013b8 <HAL_Init+0x40>)
 8001382:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001386:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001388:	4b0b      	ldr	r3, [pc, #44]	; (80013b8 <HAL_Init+0x40>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a0a      	ldr	r2, [pc, #40]	; (80013b8 <HAL_Init+0x40>)
 800138e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001392:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001394:	4b08      	ldr	r3, [pc, #32]	; (80013b8 <HAL_Init+0x40>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a07      	ldr	r2, [pc, #28]	; (80013b8 <HAL_Init+0x40>)
 800139a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800139e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013a0:	2003      	movs	r0, #3
 80013a2:	f000 feb3 	bl	800210c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013a6:	2000      	movs	r0, #0
 80013a8:	f000 f808 	bl	80013bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013ac:	f7ff fd4a 	bl	8000e44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013b0:	2300      	movs	r3, #0
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	40023c00 	.word	0x40023c00

080013bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013c4:	4b12      	ldr	r3, [pc, #72]	; (8001410 <HAL_InitTick+0x54>)
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	4b12      	ldr	r3, [pc, #72]	; (8001414 <HAL_InitTick+0x58>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	4619      	mov	r1, r3
 80013ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80013d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80013da:	4618      	mov	r0, r3
 80013dc:	f000 fecb 	bl	8002176 <HAL_SYSTICK_Config>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e00e      	b.n	8001408 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2b0f      	cmp	r3, #15
 80013ee:	d80a      	bhi.n	8001406 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013f0:	2200      	movs	r2, #0
 80013f2:	6879      	ldr	r1, [r7, #4]
 80013f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013f8:	f000 fe93 	bl	8002122 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013fc:	4a06      	ldr	r2, [pc, #24]	; (8001418 <HAL_InitTick+0x5c>)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001402:	2300      	movs	r3, #0
 8001404:	e000      	b.n	8001408 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
}
 8001408:	4618      	mov	r0, r3
 800140a:	3708      	adds	r7, #8
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	20000000 	.word	0x20000000
 8001414:	20000008 	.word	0x20000008
 8001418:	20000004 	.word	0x20000004

0800141c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001420:	4b06      	ldr	r3, [pc, #24]	; (800143c <HAL_IncTick+0x20>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	461a      	mov	r2, r3
 8001426:	4b06      	ldr	r3, [pc, #24]	; (8001440 <HAL_IncTick+0x24>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4413      	add	r3, r2
 800142c:	4a04      	ldr	r2, [pc, #16]	; (8001440 <HAL_IncTick+0x24>)
 800142e:	6013      	str	r3, [r2, #0]
}
 8001430:	bf00      	nop
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	20000008 	.word	0x20000008
 8001440:	200001b4 	.word	0x200001b4

08001444 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  return uwTick;
 8001448:	4b03      	ldr	r3, [pc, #12]	; (8001458 <HAL_GetTick+0x14>)
 800144a:	681b      	ldr	r3, [r3, #0]
}
 800144c:	4618      	mov	r0, r3
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	200001b4 	.word	0x200001b4

0800145c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d101      	bne.n	800146e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e0ed      	b.n	800164a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001474:	b2db      	uxtb	r3, r3
 8001476:	2b00      	cmp	r3, #0
 8001478:	d102      	bne.n	8001480 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f7ff fd0a 	bl	8000e94 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f042 0201 	orr.w	r2, r2, #1
 800148e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001490:	f7ff ffd8 	bl	8001444 <HAL_GetTick>
 8001494:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001496:	e012      	b.n	80014be <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001498:	f7ff ffd4 	bl	8001444 <HAL_GetTick>
 800149c:	4602      	mov	r2, r0
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	2b0a      	cmp	r3, #10
 80014a4:	d90b      	bls.n	80014be <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014aa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2205      	movs	r2, #5
 80014b6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	e0c5      	b.n	800164a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f003 0301 	and.w	r3, r3, #1
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d0e5      	beq.n	8001498 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f022 0202 	bic.w	r2, r2, #2
 80014da:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014dc:	f7ff ffb2 	bl	8001444 <HAL_GetTick>
 80014e0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80014e2:	e012      	b.n	800150a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80014e4:	f7ff ffae 	bl	8001444 <HAL_GetTick>
 80014e8:	4602      	mov	r2, r0
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	2b0a      	cmp	r3, #10
 80014f0:	d90b      	bls.n	800150a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2205      	movs	r2, #5
 8001502:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e09f      	b.n	800164a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f003 0302 	and.w	r3, r3, #2
 8001514:	2b00      	cmp	r3, #0
 8001516:	d1e5      	bne.n	80014e4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	7e1b      	ldrb	r3, [r3, #24]
 800151c:	2b01      	cmp	r3, #1
 800151e:	d108      	bne.n	8001532 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	e007      	b.n	8001542 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001540:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	7e5b      	ldrb	r3, [r3, #25]
 8001546:	2b01      	cmp	r3, #1
 8001548:	d108      	bne.n	800155c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001558:	601a      	str	r2, [r3, #0]
 800155a:	e007      	b.n	800156c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800156a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	7e9b      	ldrb	r3, [r3, #26]
 8001570:	2b01      	cmp	r3, #1
 8001572:	d108      	bne.n	8001586 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f042 0220 	orr.w	r2, r2, #32
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	e007      	b.n	8001596 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f022 0220 	bic.w	r2, r2, #32
 8001594:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	7edb      	ldrb	r3, [r3, #27]
 800159a:	2b01      	cmp	r3, #1
 800159c:	d108      	bne.n	80015b0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f022 0210 	bic.w	r2, r2, #16
 80015ac:	601a      	str	r2, [r3, #0]
 80015ae:	e007      	b.n	80015c0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f042 0210 	orr.w	r2, r2, #16
 80015be:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	7f1b      	ldrb	r3, [r3, #28]
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d108      	bne.n	80015da <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f042 0208 	orr.w	r2, r2, #8
 80015d6:	601a      	str	r2, [r3, #0]
 80015d8:	e007      	b.n	80015ea <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f022 0208 	bic.w	r2, r2, #8
 80015e8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	7f5b      	ldrb	r3, [r3, #29]
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d108      	bne.n	8001604 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f042 0204 	orr.w	r2, r2, #4
 8001600:	601a      	str	r2, [r3, #0]
 8001602:	e007      	b.n	8001614 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f022 0204 	bic.w	r2, r2, #4
 8001612:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	689a      	ldr	r2, [r3, #8]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	431a      	orrs	r2, r3
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	691b      	ldr	r3, [r3, #16]
 8001622:	431a      	orrs	r2, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	695b      	ldr	r3, [r3, #20]
 8001628:	ea42 0103 	orr.w	r1, r2, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	1e5a      	subs	r2, r3, #1
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	430a      	orrs	r2, r1
 8001638:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2200      	movs	r2, #0
 800163e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2201      	movs	r2, #1
 8001644:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001648:	2300      	movs	r3, #0
}
 800164a:	4618      	mov	r0, r3
 800164c:	3710      	adds	r7, #16
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
	...

08001654 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001654:	b480      	push	{r7}
 8001656:	b087      	sub	sp, #28
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f893 3020 	ldrb.w	r3, [r3, #32]
 800166a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800166c:	7cfb      	ldrb	r3, [r7, #19]
 800166e:	2b01      	cmp	r3, #1
 8001670:	d003      	beq.n	800167a <HAL_CAN_ConfigFilter+0x26>
 8001672:	7cfb      	ldrb	r3, [r7, #19]
 8001674:	2b02      	cmp	r3, #2
 8001676:	f040 80be 	bne.w	80017f6 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800167a:	4b65      	ldr	r3, [pc, #404]	; (8001810 <HAL_CAN_ConfigFilter+0x1bc>)
 800167c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001684:	f043 0201 	orr.w	r2, r3, #1
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001694:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a8:	021b      	lsls	r3, r3, #8
 80016aa:	431a      	orrs	r2, r3
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	695b      	ldr	r3, [r3, #20]
 80016b6:	f003 031f 	and.w	r3, r3, #31
 80016ba:	2201      	movs	r2, #1
 80016bc:	fa02 f303 	lsl.w	r3, r2, r3
 80016c0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	43db      	mvns	r3, r3
 80016cc:	401a      	ands	r2, r3
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	69db      	ldr	r3, [r3, #28]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d123      	bne.n	8001724 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	43db      	mvns	r3, r3
 80016e6:	401a      	ands	r2, r3
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	68db      	ldr	r3, [r3, #12]
 80016f2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80016fa:	683a      	ldr	r2, [r7, #0]
 80016fc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80016fe:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	3248      	adds	r2, #72	; 0x48
 8001704:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001718:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800171a:	6979      	ldr	r1, [r7, #20]
 800171c:	3348      	adds	r3, #72	; 0x48
 800171e:	00db      	lsls	r3, r3, #3
 8001720:	440b      	add	r3, r1
 8001722:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	69db      	ldr	r3, [r3, #28]
 8001728:	2b01      	cmp	r3, #1
 800172a:	d122      	bne.n	8001772 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	431a      	orrs	r2, r3
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001748:	683a      	ldr	r2, [r7, #0]
 800174a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800174c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	3248      	adds	r2, #72	; 0x48
 8001752:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001766:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001768:	6979      	ldr	r1, [r7, #20]
 800176a:	3348      	adds	r3, #72	; 0x48
 800176c:	00db      	lsls	r3, r3, #3
 800176e:	440b      	add	r3, r1
 8001770:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	699b      	ldr	r3, [r3, #24]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d109      	bne.n	800178e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	43db      	mvns	r3, r3
 8001784:	401a      	ands	r2, r3
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800178c:	e007      	b.n	800179e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	431a      	orrs	r2, r3
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	691b      	ldr	r3, [r3, #16]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d109      	bne.n	80017ba <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	43db      	mvns	r3, r3
 80017b0:	401a      	ands	r2, r3
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80017b8:	e007      	b.n	80017ca <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	431a      	orrs	r2, r3
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	6a1b      	ldr	r3, [r3, #32]
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d107      	bne.n	80017e2 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	431a      	orrs	r2, r3
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80017e8:	f023 0201 	bic.w	r2, r3, #1
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80017f2:	2300      	movs	r3, #0
 80017f4:	e006      	b.n	8001804 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017fa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
  }
}
 8001804:	4618      	mov	r0, r3
 8001806:	371c      	adds	r7, #28
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr
 8001810:	40006400 	.word	0x40006400

08001814 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001822:	b2db      	uxtb	r3, r3
 8001824:	2b01      	cmp	r3, #1
 8001826:	d12e      	bne.n	8001886 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2202      	movs	r2, #2
 800182c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f022 0201 	bic.w	r2, r2, #1
 800183e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001840:	f7ff fe00 	bl	8001444 <HAL_GetTick>
 8001844:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001846:	e012      	b.n	800186e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001848:	f7ff fdfc 	bl	8001444 <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	2b0a      	cmp	r3, #10
 8001854:	d90b      	bls.n	800186e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800185a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2205      	movs	r2, #5
 8001866:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e012      	b.n	8001894 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f003 0301 	and.w	r3, r3, #1
 8001878:	2b00      	cmp	r3, #0
 800187a:	d1e5      	bne.n	8001848 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2200      	movs	r2, #0
 8001880:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001882:	2300      	movs	r3, #0
 8001884:	e006      	b.n	8001894 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800188a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
  }
}
 8001894:	4618      	mov	r0, r3
 8001896:	3710      	adds	r7, #16
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}

0800189c <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800189c:	b480      	push	{r7}
 800189e:	b087      	sub	sp, #28
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	60f8      	str	r0, [r7, #12]
 80018a4:	60b9      	str	r1, [r7, #8]
 80018a6:	607a      	str	r2, [r7, #4]
 80018a8:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018b0:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80018b2:	7dfb      	ldrb	r3, [r7, #23]
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d003      	beq.n	80018c0 <HAL_CAN_GetRxMessage+0x24>
 80018b8:	7dfb      	ldrb	r3, [r7, #23]
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	f040 80f3 	bne.w	8001aa6 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d10e      	bne.n	80018e4 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	f003 0303 	and.w	r3, r3, #3
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d116      	bne.n	8001902 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	e0e7      	b.n	8001ab4 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	691b      	ldr	r3, [r3, #16]
 80018ea:	f003 0303 	and.w	r3, r3, #3
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d107      	bne.n	8001902 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e0d8      	b.n	8001ab4 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	331b      	adds	r3, #27
 800190a:	011b      	lsls	r3, r3, #4
 800190c:	4413      	add	r3, r2
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 0204 	and.w	r2, r3, #4
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d10c      	bne.n	800193a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	331b      	adds	r3, #27
 8001928:	011b      	lsls	r3, r3, #4
 800192a:	4413      	add	r3, r2
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	0d5b      	lsrs	r3, r3, #21
 8001930:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	601a      	str	r2, [r3, #0]
 8001938:	e00b      	b.n	8001952 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	331b      	adds	r3, #27
 8001942:	011b      	lsls	r3, r3, #4
 8001944:	4413      	add	r3, r2
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	08db      	lsrs	r3, r3, #3
 800194a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	331b      	adds	r3, #27
 800195a:	011b      	lsls	r3, r3, #4
 800195c:	4413      	add	r3, r2
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 0202 	and.w	r2, r3, #2
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	331b      	adds	r3, #27
 8001970:	011b      	lsls	r3, r3, #4
 8001972:	4413      	add	r3, r2
 8001974:	3304      	adds	r3, #4
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 020f 	and.w	r2, r3, #15
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	331b      	adds	r3, #27
 8001988:	011b      	lsls	r3, r3, #4
 800198a:	4413      	add	r3, r2
 800198c:	3304      	adds	r3, #4
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	0a1b      	lsrs	r3, r3, #8
 8001992:	b2da      	uxtb	r2, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	331b      	adds	r3, #27
 80019a0:	011b      	lsls	r3, r3, #4
 80019a2:	4413      	add	r3, r2
 80019a4:	3304      	adds	r3, #4
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	0c1b      	lsrs	r3, r3, #16
 80019aa:	b29a      	uxth	r2, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	011b      	lsls	r3, r3, #4
 80019b8:	4413      	add	r3, r2
 80019ba:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	b2da      	uxtb	r2, r3
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	011b      	lsls	r3, r3, #4
 80019ce:	4413      	add	r3, r2
 80019d0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	0a1a      	lsrs	r2, r3, #8
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	3301      	adds	r3, #1
 80019dc:	b2d2      	uxtb	r2, r2
 80019de:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	011b      	lsls	r3, r3, #4
 80019e8:	4413      	add	r3, r2
 80019ea:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	0c1a      	lsrs	r2, r3, #16
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	3302      	adds	r3, #2
 80019f6:	b2d2      	uxtb	r2, r2
 80019f8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	011b      	lsls	r3, r3, #4
 8001a02:	4413      	add	r3, r2
 8001a04:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	0e1a      	lsrs	r2, r3, #24
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	3303      	adds	r3, #3
 8001a10:	b2d2      	uxtb	r2, r2
 8001a12:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	011b      	lsls	r3, r3, #4
 8001a1c:	4413      	add	r3, r2
 8001a1e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	3304      	adds	r3, #4
 8001a28:	b2d2      	uxtb	r2, r2
 8001a2a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	011b      	lsls	r3, r3, #4
 8001a34:	4413      	add	r3, r2
 8001a36:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	0a1a      	lsrs	r2, r3, #8
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	3305      	adds	r3, #5
 8001a42:	b2d2      	uxtb	r2, r2
 8001a44:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	011b      	lsls	r3, r3, #4
 8001a4e:	4413      	add	r3, r2
 8001a50:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	0c1a      	lsrs	r2, r3, #16
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	3306      	adds	r3, #6
 8001a5c:	b2d2      	uxtb	r2, r2
 8001a5e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	011b      	lsls	r3, r3, #4
 8001a68:	4413      	add	r3, r2
 8001a6a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	0e1a      	lsrs	r2, r3, #24
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	3307      	adds	r3, #7
 8001a76:	b2d2      	uxtb	r2, r2
 8001a78:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d108      	bne.n	8001a92 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	68da      	ldr	r2, [r3, #12]
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f042 0220 	orr.w	r2, r2, #32
 8001a8e:	60da      	str	r2, [r3, #12]
 8001a90:	e007      	b.n	8001aa2 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	691a      	ldr	r2, [r3, #16]
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f042 0220 	orr.w	r2, r2, #32
 8001aa0:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	e006      	b.n	8001ab4 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aaa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
  }
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	371c      	adds	r7, #28
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b085      	sub	sp, #20
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ad0:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001ad2:	7bfb      	ldrb	r3, [r7, #15]
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d002      	beq.n	8001ade <HAL_CAN_ActivateNotification+0x1e>
 8001ad8:	7bfb      	ldrb	r3, [r7, #15]
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d109      	bne.n	8001af2 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	6959      	ldr	r1, [r3, #20]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	683a      	ldr	r2, [r7, #0]
 8001aea:	430a      	orrs	r2, r1
 8001aec:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001aee:	2300      	movs	r3, #0
 8001af0:	e006      	b.n	8001b00 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
  }
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3714      	adds	r7, #20
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b08a      	sub	sp, #40	; 0x28
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001b14:	2300      	movs	r3, #0
 8001b16:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	695b      	ldr	r3, [r3, #20]
 8001b1e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	68db      	ldr	r3, [r3, #12]
 8001b36:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	691b      	ldr	r3, [r3, #16]
 8001b3e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	699b      	ldr	r3, [r3, #24]
 8001b46:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001b48:	6a3b      	ldr	r3, [r7, #32]
 8001b4a:	f003 0301 	and.w	r3, r3, #1
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d07c      	beq.n	8001c4c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	f003 0301 	and.w	r3, r3, #1
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d023      	beq.n	8001ba4 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2201      	movs	r2, #1
 8001b62:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	f003 0302 	and.w	r3, r3, #2
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d003      	beq.n	8001b76 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f000 f983 	bl	8001e7a <HAL_CAN_TxMailbox0CompleteCallback>
 8001b74:	e016      	b.n	8001ba4 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001b76:	69bb      	ldr	r3, [r7, #24]
 8001b78:	f003 0304 	and.w	r3, r3, #4
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d004      	beq.n	8001b8a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b82:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b86:	627b      	str	r3, [r7, #36]	; 0x24
 8001b88:	e00c      	b.n	8001ba4 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001b8a:	69bb      	ldr	r3, [r7, #24]
 8001b8c:	f003 0308 	and.w	r3, r3, #8
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d004      	beq.n	8001b9e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b96:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b9a:	627b      	str	r3, [r7, #36]	; 0x24
 8001b9c:	e002      	b.n	8001ba4 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f000 f989 	bl	8001eb6 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001ba4:	69bb      	ldr	r3, [r7, #24]
 8001ba6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d024      	beq.n	8001bf8 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bb6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001bb8:	69bb      	ldr	r3, [r7, #24]
 8001bba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d003      	beq.n	8001bca <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f000 f963 	bl	8001e8e <HAL_CAN_TxMailbox1CompleteCallback>
 8001bc8:	e016      	b.n	8001bf8 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001bca:	69bb      	ldr	r3, [r7, #24]
 8001bcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d004      	beq.n	8001bde <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001bda:	627b      	str	r3, [r7, #36]	; 0x24
 8001bdc:	e00c      	b.n	8001bf8 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d004      	beq.n	8001bf2 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bee:	627b      	str	r3, [r7, #36]	; 0x24
 8001bf0:	e002      	b.n	8001bf8 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f000 f969 	bl	8001eca <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001bf8:	69bb      	ldr	r3, [r7, #24]
 8001bfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d024      	beq.n	8001c4c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001c0a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001c0c:	69bb      	ldr	r3, [r7, #24]
 8001c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d003      	beq.n	8001c1e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f000 f943 	bl	8001ea2 <HAL_CAN_TxMailbox2CompleteCallback>
 8001c1c:	e016      	b.n	8001c4c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d004      	beq.n	8001c32 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c2e:	627b      	str	r3, [r7, #36]	; 0x24
 8001c30:	e00c      	b.n	8001c4c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001c32:	69bb      	ldr	r3, [r7, #24]
 8001c34:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d004      	beq.n	8001c46 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c42:	627b      	str	r3, [r7, #36]	; 0x24
 8001c44:	e002      	b.n	8001c4c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f000 f949 	bl	8001ede <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001c4c:	6a3b      	ldr	r3, [r7, #32]
 8001c4e:	f003 0308 	and.w	r3, r3, #8
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d00c      	beq.n	8001c70 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	f003 0310 	and.w	r3, r3, #16
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d007      	beq.n	8001c70 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c66:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2210      	movs	r2, #16
 8001c6e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001c70:	6a3b      	ldr	r3, [r7, #32]
 8001c72:	f003 0304 	and.w	r3, r3, #4
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d00b      	beq.n	8001c92 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	f003 0308 	and.w	r3, r3, #8
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d006      	beq.n	8001c92 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2208      	movs	r2, #8
 8001c8a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f000 f930 	bl	8001ef2 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001c92:	6a3b      	ldr	r3, [r7, #32]
 8001c94:	f003 0302 	and.w	r3, r3, #2
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d009      	beq.n	8001cb0 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	68db      	ldr	r3, [r3, #12]
 8001ca2:	f003 0303 	and.w	r3, r3, #3
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d002      	beq.n	8001cb0 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f7fe ffbc 	bl	8000c28 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001cb0:	6a3b      	ldr	r3, [r7, #32]
 8001cb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d00c      	beq.n	8001cd4 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	f003 0310 	and.w	r3, r3, #16
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d007      	beq.n	8001cd4 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cca:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	2210      	movs	r2, #16
 8001cd2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001cd4:	6a3b      	ldr	r3, [r7, #32]
 8001cd6:	f003 0320 	and.w	r3, r3, #32
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d00b      	beq.n	8001cf6 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	f003 0308 	and.w	r3, r3, #8
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d006      	beq.n	8001cf6 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2208      	movs	r2, #8
 8001cee:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f000 f912 	bl	8001f1a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001cf6:	6a3b      	ldr	r3, [r7, #32]
 8001cf8:	f003 0310 	and.w	r3, r3, #16
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d009      	beq.n	8001d14 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	691b      	ldr	r3, [r3, #16]
 8001d06:	f003 0303 	and.w	r3, r3, #3
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d002      	beq.n	8001d14 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f000 f8f9 	bl	8001f06 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001d14:	6a3b      	ldr	r3, [r7, #32]
 8001d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d00b      	beq.n	8001d36 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	f003 0310 	and.w	r3, r3, #16
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d006      	beq.n	8001d36 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	2210      	movs	r2, #16
 8001d2e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f000 f8fc 	bl	8001f2e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001d36:	6a3b      	ldr	r3, [r7, #32]
 8001d38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d00b      	beq.n	8001d58 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	f003 0308 	and.w	r3, r3, #8
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d006      	beq.n	8001d58 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	2208      	movs	r2, #8
 8001d50:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f000 f8f5 	bl	8001f42 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001d58:	6a3b      	ldr	r3, [r7, #32]
 8001d5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d07b      	beq.n	8001e5a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	f003 0304 	and.w	r3, r3, #4
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d072      	beq.n	8001e52 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001d6c:	6a3b      	ldr	r3, [r7, #32]
 8001d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d008      	beq.n	8001d88 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d003      	beq.n	8001d88 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d82:	f043 0301 	orr.w	r3, r3, #1
 8001d86:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001d88:	6a3b      	ldr	r3, [r7, #32]
 8001d8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d008      	beq.n	8001da4 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d003      	beq.n	8001da4 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9e:	f043 0302 	orr.w	r3, r3, #2
 8001da2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001da4:	6a3b      	ldr	r3, [r7, #32]
 8001da6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d008      	beq.n	8001dc0 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d003      	beq.n	8001dc0 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dba:	f043 0304 	orr.w	r3, r3, #4
 8001dbe:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001dc0:	6a3b      	ldr	r3, [r7, #32]
 8001dc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d043      	beq.n	8001e52 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d03e      	beq.n	8001e52 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001dda:	2b60      	cmp	r3, #96	; 0x60
 8001ddc:	d02b      	beq.n	8001e36 <HAL_CAN_IRQHandler+0x32a>
 8001dde:	2b60      	cmp	r3, #96	; 0x60
 8001de0:	d82e      	bhi.n	8001e40 <HAL_CAN_IRQHandler+0x334>
 8001de2:	2b50      	cmp	r3, #80	; 0x50
 8001de4:	d022      	beq.n	8001e2c <HAL_CAN_IRQHandler+0x320>
 8001de6:	2b50      	cmp	r3, #80	; 0x50
 8001de8:	d82a      	bhi.n	8001e40 <HAL_CAN_IRQHandler+0x334>
 8001dea:	2b40      	cmp	r3, #64	; 0x40
 8001dec:	d019      	beq.n	8001e22 <HAL_CAN_IRQHandler+0x316>
 8001dee:	2b40      	cmp	r3, #64	; 0x40
 8001df0:	d826      	bhi.n	8001e40 <HAL_CAN_IRQHandler+0x334>
 8001df2:	2b30      	cmp	r3, #48	; 0x30
 8001df4:	d010      	beq.n	8001e18 <HAL_CAN_IRQHandler+0x30c>
 8001df6:	2b30      	cmp	r3, #48	; 0x30
 8001df8:	d822      	bhi.n	8001e40 <HAL_CAN_IRQHandler+0x334>
 8001dfa:	2b10      	cmp	r3, #16
 8001dfc:	d002      	beq.n	8001e04 <HAL_CAN_IRQHandler+0x2f8>
 8001dfe:	2b20      	cmp	r3, #32
 8001e00:	d005      	beq.n	8001e0e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001e02:	e01d      	b.n	8001e40 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e06:	f043 0308 	orr.w	r3, r3, #8
 8001e0a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001e0c:	e019      	b.n	8001e42 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e10:	f043 0310 	orr.w	r3, r3, #16
 8001e14:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001e16:	e014      	b.n	8001e42 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1a:	f043 0320 	orr.w	r3, r3, #32
 8001e1e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001e20:	e00f      	b.n	8001e42 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e28:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001e2a:	e00a      	b.n	8001e42 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e32:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001e34:	e005      	b.n	8001e42 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e3c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001e3e:	e000      	b.n	8001e42 <HAL_CAN_IRQHandler+0x336>
            break;
 8001e40:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	699a      	ldr	r2, [r3, #24]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001e50:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	2204      	movs	r2, #4
 8001e58:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d008      	beq.n	8001e72 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e66:	431a      	orrs	r2, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f000 f872 	bl	8001f56 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001e72:	bf00      	nop
 8001e74:	3728      	adds	r7, #40	; 0x28
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}

08001e7a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001e7a:	b480      	push	{r7}
 8001e7c:	b083      	sub	sp, #12
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001e82:	bf00      	nop
 8001e84:	370c      	adds	r7, #12
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr

08001e8e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001e8e:	b480      	push	{r7}
 8001e90:	b083      	sub	sp, #12
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001e96:	bf00      	nop
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr

08001ea2 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	b083      	sub	sp, #12
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001eaa:	bf00      	nop
 8001eac:	370c      	adds	r7, #12
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr

08001eb6 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001eb6:	b480      	push	{r7}
 8001eb8:	b083      	sub	sp, #12
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001ebe:	bf00      	nop
 8001ec0:	370c      	adds	r7, #12
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr

08001eca <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001eca:	b480      	push	{r7}
 8001ecc:	b083      	sub	sp, #12
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001ed2:	bf00      	nop
 8001ed4:	370c      	adds	r7, #12
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr

08001ede <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001ede:	b480      	push	{r7}
 8001ee0:	b083      	sub	sp, #12
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001ee6:	bf00      	nop
 8001ee8:	370c      	adds	r7, #12
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr

08001ef2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	b083      	sub	sp, #12
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001efa:	bf00      	nop
 8001efc:	370c      	adds	r7, #12
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr

08001f06 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001f06:	b480      	push	{r7}
 8001f08:	b083      	sub	sp, #12
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001f0e:	bf00      	nop
 8001f10:	370c      	adds	r7, #12
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr

08001f1a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001f1a:	b480      	push	{r7}
 8001f1c:	b083      	sub	sp, #12
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001f22:	bf00      	nop
 8001f24:	370c      	adds	r7, #12
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr

08001f2e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001f2e:	b480      	push	{r7}
 8001f30:	b083      	sub	sp, #12
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001f36:	bf00      	nop
 8001f38:	370c      	adds	r7, #12
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr

08001f42 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001f42:	b480      	push	{r7}
 8001f44:	b083      	sub	sp, #12
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001f4a:	bf00      	nop
 8001f4c:	370c      	adds	r7, #12
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr

08001f56 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001f56:	b480      	push	{r7}
 8001f58:	b083      	sub	sp, #12
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001f5e:	bf00      	nop
 8001f60:	370c      	adds	r7, #12
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
	...

08001f6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b085      	sub	sp, #20
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f003 0307 	and.w	r3, r3, #7
 8001f7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f7c:	4b0c      	ldr	r3, [pc, #48]	; (8001fb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f82:	68ba      	ldr	r2, [r7, #8]
 8001f84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f88:	4013      	ands	r3, r2
 8001f8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f9e:	4a04      	ldr	r2, [pc, #16]	; (8001fb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	60d3      	str	r3, [r2, #12]
}
 8001fa4:	bf00      	nop
 8001fa6:	3714      	adds	r7, #20
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr
 8001fb0:	e000ed00 	.word	0xe000ed00

08001fb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fb8:	4b04      	ldr	r3, [pc, #16]	; (8001fcc <__NVIC_GetPriorityGrouping+0x18>)
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	0a1b      	lsrs	r3, r3, #8
 8001fbe:	f003 0307 	and.w	r3, r3, #7
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr
 8001fcc:	e000ed00 	.word	0xe000ed00

08001fd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	db0b      	blt.n	8001ffa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fe2:	79fb      	ldrb	r3, [r7, #7]
 8001fe4:	f003 021f 	and.w	r2, r3, #31
 8001fe8:	4907      	ldr	r1, [pc, #28]	; (8002008 <__NVIC_EnableIRQ+0x38>)
 8001fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fee:	095b      	lsrs	r3, r3, #5
 8001ff0:	2001      	movs	r0, #1
 8001ff2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ff6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ffa:	bf00      	nop
 8001ffc:	370c      	adds	r7, #12
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	e000e100 	.word	0xe000e100

0800200c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	4603      	mov	r3, r0
 8002014:	6039      	str	r1, [r7, #0]
 8002016:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002018:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800201c:	2b00      	cmp	r3, #0
 800201e:	db0a      	blt.n	8002036 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	b2da      	uxtb	r2, r3
 8002024:	490c      	ldr	r1, [pc, #48]	; (8002058 <__NVIC_SetPriority+0x4c>)
 8002026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800202a:	0112      	lsls	r2, r2, #4
 800202c:	b2d2      	uxtb	r2, r2
 800202e:	440b      	add	r3, r1
 8002030:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002034:	e00a      	b.n	800204c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	b2da      	uxtb	r2, r3
 800203a:	4908      	ldr	r1, [pc, #32]	; (800205c <__NVIC_SetPriority+0x50>)
 800203c:	79fb      	ldrb	r3, [r7, #7]
 800203e:	f003 030f 	and.w	r3, r3, #15
 8002042:	3b04      	subs	r3, #4
 8002044:	0112      	lsls	r2, r2, #4
 8002046:	b2d2      	uxtb	r2, r2
 8002048:	440b      	add	r3, r1
 800204a:	761a      	strb	r2, [r3, #24]
}
 800204c:	bf00      	nop
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr
 8002058:	e000e100 	.word	0xe000e100
 800205c:	e000ed00 	.word	0xe000ed00

08002060 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002060:	b480      	push	{r7}
 8002062:	b089      	sub	sp, #36	; 0x24
 8002064:	af00      	add	r7, sp, #0
 8002066:	60f8      	str	r0, [r7, #12]
 8002068:	60b9      	str	r1, [r7, #8]
 800206a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	f003 0307 	and.w	r3, r3, #7
 8002072:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	f1c3 0307 	rsb	r3, r3, #7
 800207a:	2b04      	cmp	r3, #4
 800207c:	bf28      	it	cs
 800207e:	2304      	movcs	r3, #4
 8002080:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	3304      	adds	r3, #4
 8002086:	2b06      	cmp	r3, #6
 8002088:	d902      	bls.n	8002090 <NVIC_EncodePriority+0x30>
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	3b03      	subs	r3, #3
 800208e:	e000      	b.n	8002092 <NVIC_EncodePriority+0x32>
 8002090:	2300      	movs	r3, #0
 8002092:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002094:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	fa02 f303 	lsl.w	r3, r2, r3
 800209e:	43da      	mvns	r2, r3
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	401a      	ands	r2, r3
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	fa01 f303 	lsl.w	r3, r1, r3
 80020b2:	43d9      	mvns	r1, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020b8:	4313      	orrs	r3, r2
         );
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3724      	adds	r7, #36	; 0x24
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
	...

080020c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	3b01      	subs	r3, #1
 80020d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020d8:	d301      	bcc.n	80020de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020da:	2301      	movs	r3, #1
 80020dc:	e00f      	b.n	80020fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020de:	4a0a      	ldr	r2, [pc, #40]	; (8002108 <SysTick_Config+0x40>)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	3b01      	subs	r3, #1
 80020e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020e6:	210f      	movs	r1, #15
 80020e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80020ec:	f7ff ff8e 	bl	800200c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020f0:	4b05      	ldr	r3, [pc, #20]	; (8002108 <SysTick_Config+0x40>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020f6:	4b04      	ldr	r3, [pc, #16]	; (8002108 <SysTick_Config+0x40>)
 80020f8:	2207      	movs	r2, #7
 80020fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	e000e010 	.word	0xe000e010

0800210c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f7ff ff29 	bl	8001f6c <__NVIC_SetPriorityGrouping>
}
 800211a:	bf00      	nop
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}

08002122 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002122:	b580      	push	{r7, lr}
 8002124:	b086      	sub	sp, #24
 8002126:	af00      	add	r7, sp, #0
 8002128:	4603      	mov	r3, r0
 800212a:	60b9      	str	r1, [r7, #8]
 800212c:	607a      	str	r2, [r7, #4]
 800212e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002130:	2300      	movs	r3, #0
 8002132:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002134:	f7ff ff3e 	bl	8001fb4 <__NVIC_GetPriorityGrouping>
 8002138:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	68b9      	ldr	r1, [r7, #8]
 800213e:	6978      	ldr	r0, [r7, #20]
 8002140:	f7ff ff8e 	bl	8002060 <NVIC_EncodePriority>
 8002144:	4602      	mov	r2, r0
 8002146:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800214a:	4611      	mov	r1, r2
 800214c:	4618      	mov	r0, r3
 800214e:	f7ff ff5d 	bl	800200c <__NVIC_SetPriority>
}
 8002152:	bf00      	nop
 8002154:	3718      	adds	r7, #24
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}

0800215a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800215a:	b580      	push	{r7, lr}
 800215c:	b082      	sub	sp, #8
 800215e:	af00      	add	r7, sp, #0
 8002160:	4603      	mov	r3, r0
 8002162:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002164:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002168:	4618      	mov	r0, r3
 800216a:	f7ff ff31 	bl	8001fd0 <__NVIC_EnableIRQ>
}
 800216e:	bf00      	nop
 8002170:	3708      	adds	r7, #8
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}

08002176 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002176:	b580      	push	{r7, lr}
 8002178:	b082      	sub	sp, #8
 800217a:	af00      	add	r7, sp, #0
 800217c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f7ff ffa2 	bl	80020c8 <SysTick_Config>
 8002184:	4603      	mov	r3, r0
}
 8002186:	4618      	mov	r0, r3
 8002188:	3708      	adds	r7, #8
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
	...

08002190 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002190:	b480      	push	{r7}
 8002192:	b089      	sub	sp, #36	; 0x24
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800219a:	2300      	movs	r3, #0
 800219c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800219e:	2300      	movs	r3, #0
 80021a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021a2:	2300      	movs	r3, #0
 80021a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021a6:	2300      	movs	r3, #0
 80021a8:	61fb      	str	r3, [r7, #28]
 80021aa:	e165      	b.n	8002478 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021ac:	2201      	movs	r2, #1
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	fa02 f303 	lsl.w	r3, r2, r3
 80021b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	697a      	ldr	r2, [r7, #20]
 80021bc:	4013      	ands	r3, r2
 80021be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021c0:	693a      	ldr	r2, [r7, #16]
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	f040 8154 	bne.w	8002472 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f003 0303 	and.w	r3, r3, #3
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d005      	beq.n	80021e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d130      	bne.n	8002244 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	005b      	lsls	r3, r3, #1
 80021ec:	2203      	movs	r2, #3
 80021ee:	fa02 f303 	lsl.w	r3, r2, r3
 80021f2:	43db      	mvns	r3, r3
 80021f4:	69ba      	ldr	r2, [r7, #24]
 80021f6:	4013      	ands	r3, r2
 80021f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	68da      	ldr	r2, [r3, #12]
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	005b      	lsls	r3, r3, #1
 8002202:	fa02 f303 	lsl.w	r3, r2, r3
 8002206:	69ba      	ldr	r2, [r7, #24]
 8002208:	4313      	orrs	r3, r2
 800220a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	69ba      	ldr	r2, [r7, #24]
 8002210:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002218:	2201      	movs	r2, #1
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	43db      	mvns	r3, r3
 8002222:	69ba      	ldr	r2, [r7, #24]
 8002224:	4013      	ands	r3, r2
 8002226:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	091b      	lsrs	r3, r3, #4
 800222e:	f003 0201 	and.w	r2, r3, #1
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	fa02 f303 	lsl.w	r3, r2, r3
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	4313      	orrs	r3, r2
 800223c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f003 0303 	and.w	r3, r3, #3
 800224c:	2b03      	cmp	r3, #3
 800224e:	d017      	beq.n	8002280 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	005b      	lsls	r3, r3, #1
 800225a:	2203      	movs	r2, #3
 800225c:	fa02 f303 	lsl.w	r3, r2, r3
 8002260:	43db      	mvns	r3, r3
 8002262:	69ba      	ldr	r2, [r7, #24]
 8002264:	4013      	ands	r3, r2
 8002266:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	689a      	ldr	r2, [r3, #8]
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	005b      	lsls	r3, r3, #1
 8002270:	fa02 f303 	lsl.w	r3, r2, r3
 8002274:	69ba      	ldr	r2, [r7, #24]
 8002276:	4313      	orrs	r3, r2
 8002278:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f003 0303 	and.w	r3, r3, #3
 8002288:	2b02      	cmp	r3, #2
 800228a:	d123      	bne.n	80022d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	08da      	lsrs	r2, r3, #3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	3208      	adds	r2, #8
 8002294:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002298:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	f003 0307 	and.w	r3, r3, #7
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	220f      	movs	r2, #15
 80022a4:	fa02 f303 	lsl.w	r3, r2, r3
 80022a8:	43db      	mvns	r3, r3
 80022aa:	69ba      	ldr	r2, [r7, #24]
 80022ac:	4013      	ands	r3, r2
 80022ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	691a      	ldr	r2, [r3, #16]
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	f003 0307 	and.w	r3, r3, #7
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	fa02 f303 	lsl.w	r3, r2, r3
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	08da      	lsrs	r2, r3, #3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	3208      	adds	r2, #8
 80022ce:	69b9      	ldr	r1, [r7, #24]
 80022d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	2203      	movs	r2, #3
 80022e0:	fa02 f303 	lsl.w	r3, r2, r3
 80022e4:	43db      	mvns	r3, r3
 80022e6:	69ba      	ldr	r2, [r7, #24]
 80022e8:	4013      	ands	r3, r2
 80022ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f003 0203 	and.w	r2, r3, #3
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	fa02 f303 	lsl.w	r3, r2, r3
 80022fc:	69ba      	ldr	r2, [r7, #24]
 80022fe:	4313      	orrs	r3, r2
 8002300:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002310:	2b00      	cmp	r3, #0
 8002312:	f000 80ae 	beq.w	8002472 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002316:	2300      	movs	r3, #0
 8002318:	60fb      	str	r3, [r7, #12]
 800231a:	4b5d      	ldr	r3, [pc, #372]	; (8002490 <HAL_GPIO_Init+0x300>)
 800231c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800231e:	4a5c      	ldr	r2, [pc, #368]	; (8002490 <HAL_GPIO_Init+0x300>)
 8002320:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002324:	6453      	str	r3, [r2, #68]	; 0x44
 8002326:	4b5a      	ldr	r3, [pc, #360]	; (8002490 <HAL_GPIO_Init+0x300>)
 8002328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800232a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800232e:	60fb      	str	r3, [r7, #12]
 8002330:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002332:	4a58      	ldr	r2, [pc, #352]	; (8002494 <HAL_GPIO_Init+0x304>)
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	089b      	lsrs	r3, r3, #2
 8002338:	3302      	adds	r3, #2
 800233a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800233e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	f003 0303 	and.w	r3, r3, #3
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	220f      	movs	r2, #15
 800234a:	fa02 f303 	lsl.w	r3, r2, r3
 800234e:	43db      	mvns	r3, r3
 8002350:	69ba      	ldr	r2, [r7, #24]
 8002352:	4013      	ands	r3, r2
 8002354:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a4f      	ldr	r2, [pc, #316]	; (8002498 <HAL_GPIO_Init+0x308>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d025      	beq.n	80023aa <HAL_GPIO_Init+0x21a>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4a4e      	ldr	r2, [pc, #312]	; (800249c <HAL_GPIO_Init+0x30c>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d01f      	beq.n	80023a6 <HAL_GPIO_Init+0x216>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4a4d      	ldr	r2, [pc, #308]	; (80024a0 <HAL_GPIO_Init+0x310>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d019      	beq.n	80023a2 <HAL_GPIO_Init+0x212>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a4c      	ldr	r2, [pc, #304]	; (80024a4 <HAL_GPIO_Init+0x314>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d013      	beq.n	800239e <HAL_GPIO_Init+0x20e>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a4b      	ldr	r2, [pc, #300]	; (80024a8 <HAL_GPIO_Init+0x318>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d00d      	beq.n	800239a <HAL_GPIO_Init+0x20a>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a4a      	ldr	r2, [pc, #296]	; (80024ac <HAL_GPIO_Init+0x31c>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d007      	beq.n	8002396 <HAL_GPIO_Init+0x206>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4a49      	ldr	r2, [pc, #292]	; (80024b0 <HAL_GPIO_Init+0x320>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d101      	bne.n	8002392 <HAL_GPIO_Init+0x202>
 800238e:	2306      	movs	r3, #6
 8002390:	e00c      	b.n	80023ac <HAL_GPIO_Init+0x21c>
 8002392:	2307      	movs	r3, #7
 8002394:	e00a      	b.n	80023ac <HAL_GPIO_Init+0x21c>
 8002396:	2305      	movs	r3, #5
 8002398:	e008      	b.n	80023ac <HAL_GPIO_Init+0x21c>
 800239a:	2304      	movs	r3, #4
 800239c:	e006      	b.n	80023ac <HAL_GPIO_Init+0x21c>
 800239e:	2303      	movs	r3, #3
 80023a0:	e004      	b.n	80023ac <HAL_GPIO_Init+0x21c>
 80023a2:	2302      	movs	r3, #2
 80023a4:	e002      	b.n	80023ac <HAL_GPIO_Init+0x21c>
 80023a6:	2301      	movs	r3, #1
 80023a8:	e000      	b.n	80023ac <HAL_GPIO_Init+0x21c>
 80023aa:	2300      	movs	r3, #0
 80023ac:	69fa      	ldr	r2, [r7, #28]
 80023ae:	f002 0203 	and.w	r2, r2, #3
 80023b2:	0092      	lsls	r2, r2, #2
 80023b4:	4093      	lsls	r3, r2
 80023b6:	69ba      	ldr	r2, [r7, #24]
 80023b8:	4313      	orrs	r3, r2
 80023ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023bc:	4935      	ldr	r1, [pc, #212]	; (8002494 <HAL_GPIO_Init+0x304>)
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	089b      	lsrs	r3, r3, #2
 80023c2:	3302      	adds	r3, #2
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023ca:	4b3a      	ldr	r3, [pc, #232]	; (80024b4 <HAL_GPIO_Init+0x324>)
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	43db      	mvns	r3, r3
 80023d4:	69ba      	ldr	r2, [r7, #24]
 80023d6:	4013      	ands	r3, r2
 80023d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d003      	beq.n	80023ee <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80023e6:	69ba      	ldr	r2, [r7, #24]
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023ee:	4a31      	ldr	r2, [pc, #196]	; (80024b4 <HAL_GPIO_Init+0x324>)
 80023f0:	69bb      	ldr	r3, [r7, #24]
 80023f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023f4:	4b2f      	ldr	r3, [pc, #188]	; (80024b4 <HAL_GPIO_Init+0x324>)
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	43db      	mvns	r3, r3
 80023fe:	69ba      	ldr	r2, [r7, #24]
 8002400:	4013      	ands	r3, r2
 8002402:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800240c:	2b00      	cmp	r3, #0
 800240e:	d003      	beq.n	8002418 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	4313      	orrs	r3, r2
 8002416:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002418:	4a26      	ldr	r2, [pc, #152]	; (80024b4 <HAL_GPIO_Init+0x324>)
 800241a:	69bb      	ldr	r3, [r7, #24]
 800241c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800241e:	4b25      	ldr	r3, [pc, #148]	; (80024b4 <HAL_GPIO_Init+0x324>)
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	43db      	mvns	r3, r3
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	4013      	ands	r3, r2
 800242c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d003      	beq.n	8002442 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800243a:	69ba      	ldr	r2, [r7, #24]
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	4313      	orrs	r3, r2
 8002440:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002442:	4a1c      	ldr	r2, [pc, #112]	; (80024b4 <HAL_GPIO_Init+0x324>)
 8002444:	69bb      	ldr	r3, [r7, #24]
 8002446:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002448:	4b1a      	ldr	r3, [pc, #104]	; (80024b4 <HAL_GPIO_Init+0x324>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	43db      	mvns	r3, r3
 8002452:	69ba      	ldr	r2, [r7, #24]
 8002454:	4013      	ands	r3, r2
 8002456:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002460:	2b00      	cmp	r3, #0
 8002462:	d003      	beq.n	800246c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	4313      	orrs	r3, r2
 800246a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800246c:	4a11      	ldr	r2, [pc, #68]	; (80024b4 <HAL_GPIO_Init+0x324>)
 800246e:	69bb      	ldr	r3, [r7, #24]
 8002470:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	3301      	adds	r3, #1
 8002476:	61fb      	str	r3, [r7, #28]
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	2b0f      	cmp	r3, #15
 800247c:	f67f ae96 	bls.w	80021ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002480:	bf00      	nop
 8002482:	bf00      	nop
 8002484:	3724      	adds	r7, #36	; 0x24
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	40023800 	.word	0x40023800
 8002494:	40013800 	.word	0x40013800
 8002498:	40020000 	.word	0x40020000
 800249c:	40020400 	.word	0x40020400
 80024a0:	40020800 	.word	0x40020800
 80024a4:	40020c00 	.word	0x40020c00
 80024a8:	40021000 	.word	0x40021000
 80024ac:	40021400 	.word	0x40021400
 80024b0:	40021800 	.word	0x40021800
 80024b4:	40013c00 	.word	0x40013c00

080024b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	460b      	mov	r3, r1
 80024c2:	807b      	strh	r3, [r7, #2]
 80024c4:	4613      	mov	r3, r2
 80024c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024c8:	787b      	ldrb	r3, [r7, #1]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d003      	beq.n	80024d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024ce:	887a      	ldrh	r2, [r7, #2]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80024d4:	e003      	b.n	80024de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024d6:	887b      	ldrh	r3, [r7, #2]
 80024d8:	041a      	lsls	r2, r3, #16
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	619a      	str	r2, [r3, #24]
}
 80024de:	bf00      	nop
 80024e0:	370c      	adds	r7, #12
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
	...

080024ec <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80024f2:	2300      	movs	r3, #0
 80024f4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80024f6:	2300      	movs	r3, #0
 80024f8:	603b      	str	r3, [r7, #0]
 80024fa:	4b20      	ldr	r3, [pc, #128]	; (800257c <HAL_PWREx_EnableOverDrive+0x90>)
 80024fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fe:	4a1f      	ldr	r2, [pc, #124]	; (800257c <HAL_PWREx_EnableOverDrive+0x90>)
 8002500:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002504:	6413      	str	r3, [r2, #64]	; 0x40
 8002506:	4b1d      	ldr	r3, [pc, #116]	; (800257c <HAL_PWREx_EnableOverDrive+0x90>)
 8002508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800250e:	603b      	str	r3, [r7, #0]
 8002510:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002512:	4b1b      	ldr	r3, [pc, #108]	; (8002580 <HAL_PWREx_EnableOverDrive+0x94>)
 8002514:	2201      	movs	r2, #1
 8002516:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002518:	f7fe ff94 	bl	8001444 <HAL_GetTick>
 800251c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800251e:	e009      	b.n	8002534 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002520:	f7fe ff90 	bl	8001444 <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800252e:	d901      	bls.n	8002534 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002530:	2303      	movs	r3, #3
 8002532:	e01f      	b.n	8002574 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002534:	4b13      	ldr	r3, [pc, #76]	; (8002584 <HAL_PWREx_EnableOverDrive+0x98>)
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800253c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002540:	d1ee      	bne.n	8002520 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002542:	4b11      	ldr	r3, [pc, #68]	; (8002588 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002544:	2201      	movs	r2, #1
 8002546:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002548:	f7fe ff7c 	bl	8001444 <HAL_GetTick>
 800254c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800254e:	e009      	b.n	8002564 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002550:	f7fe ff78 	bl	8001444 <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800255e:	d901      	bls.n	8002564 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002560:	2303      	movs	r3, #3
 8002562:	e007      	b.n	8002574 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002564:	4b07      	ldr	r3, [pc, #28]	; (8002584 <HAL_PWREx_EnableOverDrive+0x98>)
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800256c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002570:	d1ee      	bne.n	8002550 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002572:	2300      	movs	r3, #0
}
 8002574:	4618      	mov	r0, r3
 8002576:	3708      	adds	r7, #8
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	40023800 	.word	0x40023800
 8002580:	420e0040 	.word	0x420e0040
 8002584:	40007000 	.word	0x40007000
 8002588:	420e0044 	.word	0x420e0044

0800258c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d101      	bne.n	80025a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e0cc      	b.n	800273a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025a0:	4b68      	ldr	r3, [pc, #416]	; (8002744 <HAL_RCC_ClockConfig+0x1b8>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 030f 	and.w	r3, r3, #15
 80025a8:	683a      	ldr	r2, [r7, #0]
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d90c      	bls.n	80025c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ae:	4b65      	ldr	r3, [pc, #404]	; (8002744 <HAL_RCC_ClockConfig+0x1b8>)
 80025b0:	683a      	ldr	r2, [r7, #0]
 80025b2:	b2d2      	uxtb	r2, r2
 80025b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025b6:	4b63      	ldr	r3, [pc, #396]	; (8002744 <HAL_RCC_ClockConfig+0x1b8>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 030f 	and.w	r3, r3, #15
 80025be:	683a      	ldr	r2, [r7, #0]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d001      	beq.n	80025c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e0b8      	b.n	800273a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0302 	and.w	r3, r3, #2
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d020      	beq.n	8002616 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0304 	and.w	r3, r3, #4
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d005      	beq.n	80025ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025e0:	4b59      	ldr	r3, [pc, #356]	; (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	4a58      	ldr	r2, [pc, #352]	; (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 80025e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80025ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0308 	and.w	r3, r3, #8
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d005      	beq.n	8002604 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025f8:	4b53      	ldr	r3, [pc, #332]	; (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	4a52      	ldr	r2, [pc, #328]	; (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 80025fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002602:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002604:	4b50      	ldr	r3, [pc, #320]	; (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	494d      	ldr	r1, [pc, #308]	; (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 8002612:	4313      	orrs	r3, r2
 8002614:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0301 	and.w	r3, r3, #1
 800261e:	2b00      	cmp	r3, #0
 8002620:	d044      	beq.n	80026ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	2b01      	cmp	r3, #1
 8002628:	d107      	bne.n	800263a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800262a:	4b47      	ldr	r3, [pc, #284]	; (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d119      	bne.n	800266a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e07f      	b.n	800273a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	2b02      	cmp	r3, #2
 8002640:	d003      	beq.n	800264a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002646:	2b03      	cmp	r3, #3
 8002648:	d107      	bne.n	800265a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800264a:	4b3f      	ldr	r3, [pc, #252]	; (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d109      	bne.n	800266a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e06f      	b.n	800273a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800265a:	4b3b      	ldr	r3, [pc, #236]	; (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	2b00      	cmp	r3, #0
 8002664:	d101      	bne.n	800266a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e067      	b.n	800273a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800266a:	4b37      	ldr	r3, [pc, #220]	; (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	f023 0203 	bic.w	r2, r3, #3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	4934      	ldr	r1, [pc, #208]	; (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 8002678:	4313      	orrs	r3, r2
 800267a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800267c:	f7fe fee2 	bl	8001444 <HAL_GetTick>
 8002680:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002682:	e00a      	b.n	800269a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002684:	f7fe fede 	bl	8001444 <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002692:	4293      	cmp	r3, r2
 8002694:	d901      	bls.n	800269a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e04f      	b.n	800273a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800269a:	4b2b      	ldr	r3, [pc, #172]	; (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	f003 020c 	and.w	r2, r3, #12
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d1eb      	bne.n	8002684 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026ac:	4b25      	ldr	r3, [pc, #148]	; (8002744 <HAL_RCC_ClockConfig+0x1b8>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 030f 	and.w	r3, r3, #15
 80026b4:	683a      	ldr	r2, [r7, #0]
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d20c      	bcs.n	80026d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ba:	4b22      	ldr	r3, [pc, #136]	; (8002744 <HAL_RCC_ClockConfig+0x1b8>)
 80026bc:	683a      	ldr	r2, [r7, #0]
 80026be:	b2d2      	uxtb	r2, r2
 80026c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026c2:	4b20      	ldr	r3, [pc, #128]	; (8002744 <HAL_RCC_ClockConfig+0x1b8>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 030f 	and.w	r3, r3, #15
 80026ca:	683a      	ldr	r2, [r7, #0]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d001      	beq.n	80026d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e032      	b.n	800273a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0304 	and.w	r3, r3, #4
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d008      	beq.n	80026f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026e0:	4b19      	ldr	r3, [pc, #100]	; (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	4916      	ldr	r1, [pc, #88]	; (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 80026ee:	4313      	orrs	r3, r2
 80026f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0308 	and.w	r3, r3, #8
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d009      	beq.n	8002712 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026fe:	4b12      	ldr	r3, [pc, #72]	; (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	691b      	ldr	r3, [r3, #16]
 800270a:	00db      	lsls	r3, r3, #3
 800270c:	490e      	ldr	r1, [pc, #56]	; (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 800270e:	4313      	orrs	r3, r2
 8002710:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002712:	f000 f855 	bl	80027c0 <HAL_RCC_GetSysClockFreq>
 8002716:	4602      	mov	r2, r0
 8002718:	4b0b      	ldr	r3, [pc, #44]	; (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	091b      	lsrs	r3, r3, #4
 800271e:	f003 030f 	and.w	r3, r3, #15
 8002722:	490a      	ldr	r1, [pc, #40]	; (800274c <HAL_RCC_ClockConfig+0x1c0>)
 8002724:	5ccb      	ldrb	r3, [r1, r3]
 8002726:	fa22 f303 	lsr.w	r3, r2, r3
 800272a:	4a09      	ldr	r2, [pc, #36]	; (8002750 <HAL_RCC_ClockConfig+0x1c4>)
 800272c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800272e:	4b09      	ldr	r3, [pc, #36]	; (8002754 <HAL_RCC_ClockConfig+0x1c8>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4618      	mov	r0, r3
 8002734:	f7fe fe42 	bl	80013bc <HAL_InitTick>

  return HAL_OK;
 8002738:	2300      	movs	r3, #0
}
 800273a:	4618      	mov	r0, r3
 800273c:	3710      	adds	r7, #16
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	40023c00 	.word	0x40023c00
 8002748:	40023800 	.word	0x40023800
 800274c:	080056e4 	.word	0x080056e4
 8002750:	20000000 	.word	0x20000000
 8002754:	20000004 	.word	0x20000004

08002758 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800275c:	4b03      	ldr	r3, [pc, #12]	; (800276c <HAL_RCC_GetHCLKFreq+0x14>)
 800275e:	681b      	ldr	r3, [r3, #0]
}
 8002760:	4618      	mov	r0, r3
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	20000000 	.word	0x20000000

08002770 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002774:	f7ff fff0 	bl	8002758 <HAL_RCC_GetHCLKFreq>
 8002778:	4602      	mov	r2, r0
 800277a:	4b05      	ldr	r3, [pc, #20]	; (8002790 <HAL_RCC_GetPCLK1Freq+0x20>)
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	0a9b      	lsrs	r3, r3, #10
 8002780:	f003 0307 	and.w	r3, r3, #7
 8002784:	4903      	ldr	r1, [pc, #12]	; (8002794 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002786:	5ccb      	ldrb	r3, [r1, r3]
 8002788:	fa22 f303 	lsr.w	r3, r2, r3
}
 800278c:	4618      	mov	r0, r3
 800278e:	bd80      	pop	{r7, pc}
 8002790:	40023800 	.word	0x40023800
 8002794:	080056f4 	.word	0x080056f4

08002798 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800279c:	f7ff ffdc 	bl	8002758 <HAL_RCC_GetHCLKFreq>
 80027a0:	4602      	mov	r2, r0
 80027a2:	4b05      	ldr	r3, [pc, #20]	; (80027b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	0b5b      	lsrs	r3, r3, #13
 80027a8:	f003 0307 	and.w	r3, r3, #7
 80027ac:	4903      	ldr	r1, [pc, #12]	; (80027bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80027ae:	5ccb      	ldrb	r3, [r1, r3]
 80027b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	40023800 	.word	0x40023800
 80027bc:	080056f4 	.word	0x080056f4

080027c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027c4:	b0ae      	sub	sp, #184	; 0xb8
 80027c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80027c8:	2300      	movs	r3, #0
 80027ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80027ce:	2300      	movs	r3, #0
 80027d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80027d4:	2300      	movs	r3, #0
 80027d6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80027da:	2300      	movs	r3, #0
 80027dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80027e0:	2300      	movs	r3, #0
 80027e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027e6:	4bcb      	ldr	r3, [pc, #812]	; (8002b14 <HAL_RCC_GetSysClockFreq+0x354>)
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	f003 030c 	and.w	r3, r3, #12
 80027ee:	2b0c      	cmp	r3, #12
 80027f0:	f200 8206 	bhi.w	8002c00 <HAL_RCC_GetSysClockFreq+0x440>
 80027f4:	a201      	add	r2, pc, #4	; (adr r2, 80027fc <HAL_RCC_GetSysClockFreq+0x3c>)
 80027f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027fa:	bf00      	nop
 80027fc:	08002831 	.word	0x08002831
 8002800:	08002c01 	.word	0x08002c01
 8002804:	08002c01 	.word	0x08002c01
 8002808:	08002c01 	.word	0x08002c01
 800280c:	08002839 	.word	0x08002839
 8002810:	08002c01 	.word	0x08002c01
 8002814:	08002c01 	.word	0x08002c01
 8002818:	08002c01 	.word	0x08002c01
 800281c:	08002841 	.word	0x08002841
 8002820:	08002c01 	.word	0x08002c01
 8002824:	08002c01 	.word	0x08002c01
 8002828:	08002c01 	.word	0x08002c01
 800282c:	08002a31 	.word	0x08002a31
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002830:	4bb9      	ldr	r3, [pc, #740]	; (8002b18 <HAL_RCC_GetSysClockFreq+0x358>)
 8002832:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002836:	e1e7      	b.n	8002c08 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002838:	4bb8      	ldr	r3, [pc, #736]	; (8002b1c <HAL_RCC_GetSysClockFreq+0x35c>)
 800283a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800283e:	e1e3      	b.n	8002c08 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002840:	4bb4      	ldr	r3, [pc, #720]	; (8002b14 <HAL_RCC_GetSysClockFreq+0x354>)
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002848:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800284c:	4bb1      	ldr	r3, [pc, #708]	; (8002b14 <HAL_RCC_GetSysClockFreq+0x354>)
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d071      	beq.n	800293c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002858:	4bae      	ldr	r3, [pc, #696]	; (8002b14 <HAL_RCC_GetSysClockFreq+0x354>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	099b      	lsrs	r3, r3, #6
 800285e:	2200      	movs	r2, #0
 8002860:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002864:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002868:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800286c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002870:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002874:	2300      	movs	r3, #0
 8002876:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800287a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800287e:	4622      	mov	r2, r4
 8002880:	462b      	mov	r3, r5
 8002882:	f04f 0000 	mov.w	r0, #0
 8002886:	f04f 0100 	mov.w	r1, #0
 800288a:	0159      	lsls	r1, r3, #5
 800288c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002890:	0150      	lsls	r0, r2, #5
 8002892:	4602      	mov	r2, r0
 8002894:	460b      	mov	r3, r1
 8002896:	4621      	mov	r1, r4
 8002898:	1a51      	subs	r1, r2, r1
 800289a:	6439      	str	r1, [r7, #64]	; 0x40
 800289c:	4629      	mov	r1, r5
 800289e:	eb63 0301 	sbc.w	r3, r3, r1
 80028a2:	647b      	str	r3, [r7, #68]	; 0x44
 80028a4:	f04f 0200 	mov.w	r2, #0
 80028a8:	f04f 0300 	mov.w	r3, #0
 80028ac:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80028b0:	4649      	mov	r1, r9
 80028b2:	018b      	lsls	r3, r1, #6
 80028b4:	4641      	mov	r1, r8
 80028b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80028ba:	4641      	mov	r1, r8
 80028bc:	018a      	lsls	r2, r1, #6
 80028be:	4641      	mov	r1, r8
 80028c0:	1a51      	subs	r1, r2, r1
 80028c2:	63b9      	str	r1, [r7, #56]	; 0x38
 80028c4:	4649      	mov	r1, r9
 80028c6:	eb63 0301 	sbc.w	r3, r3, r1
 80028ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028cc:	f04f 0200 	mov.w	r2, #0
 80028d0:	f04f 0300 	mov.w	r3, #0
 80028d4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80028d8:	4649      	mov	r1, r9
 80028da:	00cb      	lsls	r3, r1, #3
 80028dc:	4641      	mov	r1, r8
 80028de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80028e2:	4641      	mov	r1, r8
 80028e4:	00ca      	lsls	r2, r1, #3
 80028e6:	4610      	mov	r0, r2
 80028e8:	4619      	mov	r1, r3
 80028ea:	4603      	mov	r3, r0
 80028ec:	4622      	mov	r2, r4
 80028ee:	189b      	adds	r3, r3, r2
 80028f0:	633b      	str	r3, [r7, #48]	; 0x30
 80028f2:	462b      	mov	r3, r5
 80028f4:	460a      	mov	r2, r1
 80028f6:	eb42 0303 	adc.w	r3, r2, r3
 80028fa:	637b      	str	r3, [r7, #52]	; 0x34
 80028fc:	f04f 0200 	mov.w	r2, #0
 8002900:	f04f 0300 	mov.w	r3, #0
 8002904:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002908:	4629      	mov	r1, r5
 800290a:	024b      	lsls	r3, r1, #9
 800290c:	4621      	mov	r1, r4
 800290e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002912:	4621      	mov	r1, r4
 8002914:	024a      	lsls	r2, r1, #9
 8002916:	4610      	mov	r0, r2
 8002918:	4619      	mov	r1, r3
 800291a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800291e:	2200      	movs	r2, #0
 8002920:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002924:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002928:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800292c:	f7fd fcc0 	bl	80002b0 <__aeabi_uldivmod>
 8002930:	4602      	mov	r2, r0
 8002932:	460b      	mov	r3, r1
 8002934:	4613      	mov	r3, r2
 8002936:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800293a:	e067      	b.n	8002a0c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800293c:	4b75      	ldr	r3, [pc, #468]	; (8002b14 <HAL_RCC_GetSysClockFreq+0x354>)
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	099b      	lsrs	r3, r3, #6
 8002942:	2200      	movs	r2, #0
 8002944:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002948:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800294c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002950:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002954:	67bb      	str	r3, [r7, #120]	; 0x78
 8002956:	2300      	movs	r3, #0
 8002958:	67fb      	str	r3, [r7, #124]	; 0x7c
 800295a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800295e:	4622      	mov	r2, r4
 8002960:	462b      	mov	r3, r5
 8002962:	f04f 0000 	mov.w	r0, #0
 8002966:	f04f 0100 	mov.w	r1, #0
 800296a:	0159      	lsls	r1, r3, #5
 800296c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002970:	0150      	lsls	r0, r2, #5
 8002972:	4602      	mov	r2, r0
 8002974:	460b      	mov	r3, r1
 8002976:	4621      	mov	r1, r4
 8002978:	1a51      	subs	r1, r2, r1
 800297a:	62b9      	str	r1, [r7, #40]	; 0x28
 800297c:	4629      	mov	r1, r5
 800297e:	eb63 0301 	sbc.w	r3, r3, r1
 8002982:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002984:	f04f 0200 	mov.w	r2, #0
 8002988:	f04f 0300 	mov.w	r3, #0
 800298c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002990:	4649      	mov	r1, r9
 8002992:	018b      	lsls	r3, r1, #6
 8002994:	4641      	mov	r1, r8
 8002996:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800299a:	4641      	mov	r1, r8
 800299c:	018a      	lsls	r2, r1, #6
 800299e:	4641      	mov	r1, r8
 80029a0:	ebb2 0a01 	subs.w	sl, r2, r1
 80029a4:	4649      	mov	r1, r9
 80029a6:	eb63 0b01 	sbc.w	fp, r3, r1
 80029aa:	f04f 0200 	mov.w	r2, #0
 80029ae:	f04f 0300 	mov.w	r3, #0
 80029b2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80029b6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80029ba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80029be:	4692      	mov	sl, r2
 80029c0:	469b      	mov	fp, r3
 80029c2:	4623      	mov	r3, r4
 80029c4:	eb1a 0303 	adds.w	r3, sl, r3
 80029c8:	623b      	str	r3, [r7, #32]
 80029ca:	462b      	mov	r3, r5
 80029cc:	eb4b 0303 	adc.w	r3, fp, r3
 80029d0:	627b      	str	r3, [r7, #36]	; 0x24
 80029d2:	f04f 0200 	mov.w	r2, #0
 80029d6:	f04f 0300 	mov.w	r3, #0
 80029da:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80029de:	4629      	mov	r1, r5
 80029e0:	028b      	lsls	r3, r1, #10
 80029e2:	4621      	mov	r1, r4
 80029e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029e8:	4621      	mov	r1, r4
 80029ea:	028a      	lsls	r2, r1, #10
 80029ec:	4610      	mov	r0, r2
 80029ee:	4619      	mov	r1, r3
 80029f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80029f4:	2200      	movs	r2, #0
 80029f6:	673b      	str	r3, [r7, #112]	; 0x70
 80029f8:	677a      	str	r2, [r7, #116]	; 0x74
 80029fa:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80029fe:	f7fd fc57 	bl	80002b0 <__aeabi_uldivmod>
 8002a02:	4602      	mov	r2, r0
 8002a04:	460b      	mov	r3, r1
 8002a06:	4613      	mov	r3, r2
 8002a08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a0c:	4b41      	ldr	r3, [pc, #260]	; (8002b14 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	0c1b      	lsrs	r3, r3, #16
 8002a12:	f003 0303 	and.w	r3, r3, #3
 8002a16:	3301      	adds	r3, #1
 8002a18:	005b      	lsls	r3, r3, #1
 8002a1a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002a1e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002a22:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a2a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002a2e:	e0eb      	b.n	8002c08 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a30:	4b38      	ldr	r3, [pc, #224]	; (8002b14 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a38:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a3c:	4b35      	ldr	r3, [pc, #212]	; (8002b14 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d06b      	beq.n	8002b20 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a48:	4b32      	ldr	r3, [pc, #200]	; (8002b14 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	099b      	lsrs	r3, r3, #6
 8002a4e:	2200      	movs	r2, #0
 8002a50:	66bb      	str	r3, [r7, #104]	; 0x68
 8002a52:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002a54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a5a:	663b      	str	r3, [r7, #96]	; 0x60
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	667b      	str	r3, [r7, #100]	; 0x64
 8002a60:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002a64:	4622      	mov	r2, r4
 8002a66:	462b      	mov	r3, r5
 8002a68:	f04f 0000 	mov.w	r0, #0
 8002a6c:	f04f 0100 	mov.w	r1, #0
 8002a70:	0159      	lsls	r1, r3, #5
 8002a72:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a76:	0150      	lsls	r0, r2, #5
 8002a78:	4602      	mov	r2, r0
 8002a7a:	460b      	mov	r3, r1
 8002a7c:	4621      	mov	r1, r4
 8002a7e:	1a51      	subs	r1, r2, r1
 8002a80:	61b9      	str	r1, [r7, #24]
 8002a82:	4629      	mov	r1, r5
 8002a84:	eb63 0301 	sbc.w	r3, r3, r1
 8002a88:	61fb      	str	r3, [r7, #28]
 8002a8a:	f04f 0200 	mov.w	r2, #0
 8002a8e:	f04f 0300 	mov.w	r3, #0
 8002a92:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002a96:	4659      	mov	r1, fp
 8002a98:	018b      	lsls	r3, r1, #6
 8002a9a:	4651      	mov	r1, sl
 8002a9c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002aa0:	4651      	mov	r1, sl
 8002aa2:	018a      	lsls	r2, r1, #6
 8002aa4:	4651      	mov	r1, sl
 8002aa6:	ebb2 0801 	subs.w	r8, r2, r1
 8002aaa:	4659      	mov	r1, fp
 8002aac:	eb63 0901 	sbc.w	r9, r3, r1
 8002ab0:	f04f 0200 	mov.w	r2, #0
 8002ab4:	f04f 0300 	mov.w	r3, #0
 8002ab8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002abc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ac0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ac4:	4690      	mov	r8, r2
 8002ac6:	4699      	mov	r9, r3
 8002ac8:	4623      	mov	r3, r4
 8002aca:	eb18 0303 	adds.w	r3, r8, r3
 8002ace:	613b      	str	r3, [r7, #16]
 8002ad0:	462b      	mov	r3, r5
 8002ad2:	eb49 0303 	adc.w	r3, r9, r3
 8002ad6:	617b      	str	r3, [r7, #20]
 8002ad8:	f04f 0200 	mov.w	r2, #0
 8002adc:	f04f 0300 	mov.w	r3, #0
 8002ae0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002ae4:	4629      	mov	r1, r5
 8002ae6:	024b      	lsls	r3, r1, #9
 8002ae8:	4621      	mov	r1, r4
 8002aea:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002aee:	4621      	mov	r1, r4
 8002af0:	024a      	lsls	r2, r1, #9
 8002af2:	4610      	mov	r0, r2
 8002af4:	4619      	mov	r1, r3
 8002af6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002afa:	2200      	movs	r2, #0
 8002afc:	65bb      	str	r3, [r7, #88]	; 0x58
 8002afe:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002b00:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002b04:	f7fd fbd4 	bl	80002b0 <__aeabi_uldivmod>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	460b      	mov	r3, r1
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002b12:	e065      	b.n	8002be0 <HAL_RCC_GetSysClockFreq+0x420>
 8002b14:	40023800 	.word	0x40023800
 8002b18:	00f42400 	.word	0x00f42400
 8002b1c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b20:	4b3d      	ldr	r3, [pc, #244]	; (8002c18 <HAL_RCC_GetSysClockFreq+0x458>)
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	099b      	lsrs	r3, r3, #6
 8002b26:	2200      	movs	r2, #0
 8002b28:	4618      	mov	r0, r3
 8002b2a:	4611      	mov	r1, r2
 8002b2c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002b30:	653b      	str	r3, [r7, #80]	; 0x50
 8002b32:	2300      	movs	r3, #0
 8002b34:	657b      	str	r3, [r7, #84]	; 0x54
 8002b36:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002b3a:	4642      	mov	r2, r8
 8002b3c:	464b      	mov	r3, r9
 8002b3e:	f04f 0000 	mov.w	r0, #0
 8002b42:	f04f 0100 	mov.w	r1, #0
 8002b46:	0159      	lsls	r1, r3, #5
 8002b48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b4c:	0150      	lsls	r0, r2, #5
 8002b4e:	4602      	mov	r2, r0
 8002b50:	460b      	mov	r3, r1
 8002b52:	4641      	mov	r1, r8
 8002b54:	1a51      	subs	r1, r2, r1
 8002b56:	60b9      	str	r1, [r7, #8]
 8002b58:	4649      	mov	r1, r9
 8002b5a:	eb63 0301 	sbc.w	r3, r3, r1
 8002b5e:	60fb      	str	r3, [r7, #12]
 8002b60:	f04f 0200 	mov.w	r2, #0
 8002b64:	f04f 0300 	mov.w	r3, #0
 8002b68:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002b6c:	4659      	mov	r1, fp
 8002b6e:	018b      	lsls	r3, r1, #6
 8002b70:	4651      	mov	r1, sl
 8002b72:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b76:	4651      	mov	r1, sl
 8002b78:	018a      	lsls	r2, r1, #6
 8002b7a:	4651      	mov	r1, sl
 8002b7c:	1a54      	subs	r4, r2, r1
 8002b7e:	4659      	mov	r1, fp
 8002b80:	eb63 0501 	sbc.w	r5, r3, r1
 8002b84:	f04f 0200 	mov.w	r2, #0
 8002b88:	f04f 0300 	mov.w	r3, #0
 8002b8c:	00eb      	lsls	r3, r5, #3
 8002b8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b92:	00e2      	lsls	r2, r4, #3
 8002b94:	4614      	mov	r4, r2
 8002b96:	461d      	mov	r5, r3
 8002b98:	4643      	mov	r3, r8
 8002b9a:	18e3      	adds	r3, r4, r3
 8002b9c:	603b      	str	r3, [r7, #0]
 8002b9e:	464b      	mov	r3, r9
 8002ba0:	eb45 0303 	adc.w	r3, r5, r3
 8002ba4:	607b      	str	r3, [r7, #4]
 8002ba6:	f04f 0200 	mov.w	r2, #0
 8002baa:	f04f 0300 	mov.w	r3, #0
 8002bae:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002bb2:	4629      	mov	r1, r5
 8002bb4:	028b      	lsls	r3, r1, #10
 8002bb6:	4621      	mov	r1, r4
 8002bb8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002bbc:	4621      	mov	r1, r4
 8002bbe:	028a      	lsls	r2, r1, #10
 8002bc0:	4610      	mov	r0, r2
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002bc8:	2200      	movs	r2, #0
 8002bca:	64bb      	str	r3, [r7, #72]	; 0x48
 8002bcc:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002bce:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002bd2:	f7fd fb6d 	bl	80002b0 <__aeabi_uldivmod>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	460b      	mov	r3, r1
 8002bda:	4613      	mov	r3, r2
 8002bdc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002be0:	4b0d      	ldr	r3, [pc, #52]	; (8002c18 <HAL_RCC_GetSysClockFreq+0x458>)
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	0f1b      	lsrs	r3, r3, #28
 8002be6:	f003 0307 	and.w	r3, r3, #7
 8002bea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002bee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002bf2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002bf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bfa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002bfe:	e003      	b.n	8002c08 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c00:	4b06      	ldr	r3, [pc, #24]	; (8002c1c <HAL_RCC_GetSysClockFreq+0x45c>)
 8002c02:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002c06:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c08:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	37b8      	adds	r7, #184	; 0xb8
 8002c10:	46bd      	mov	sp, r7
 8002c12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c16:	bf00      	nop
 8002c18:	40023800 	.word	0x40023800
 8002c1c:	00f42400 	.word	0x00f42400

08002c20 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b086      	sub	sp, #24
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d101      	bne.n	8002c32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e28d      	b.n	800314e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0301 	and.w	r3, r3, #1
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	f000 8083 	beq.w	8002d46 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002c40:	4b94      	ldr	r3, [pc, #592]	; (8002e94 <HAL_RCC_OscConfig+0x274>)
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	f003 030c 	and.w	r3, r3, #12
 8002c48:	2b04      	cmp	r3, #4
 8002c4a:	d019      	beq.n	8002c80 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002c4c:	4b91      	ldr	r3, [pc, #580]	; (8002e94 <HAL_RCC_OscConfig+0x274>)
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002c54:	2b08      	cmp	r3, #8
 8002c56:	d106      	bne.n	8002c66 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002c58:	4b8e      	ldr	r3, [pc, #568]	; (8002e94 <HAL_RCC_OscConfig+0x274>)
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c64:	d00c      	beq.n	8002c80 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c66:	4b8b      	ldr	r3, [pc, #556]	; (8002e94 <HAL_RCC_OscConfig+0x274>)
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002c6e:	2b0c      	cmp	r3, #12
 8002c70:	d112      	bne.n	8002c98 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c72:	4b88      	ldr	r3, [pc, #544]	; (8002e94 <HAL_RCC_OscConfig+0x274>)
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c7e:	d10b      	bne.n	8002c98 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c80:	4b84      	ldr	r3, [pc, #528]	; (8002e94 <HAL_RCC_OscConfig+0x274>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d05b      	beq.n	8002d44 <HAL_RCC_OscConfig+0x124>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d157      	bne.n	8002d44 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e25a      	b.n	800314e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ca0:	d106      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x90>
 8002ca2:	4b7c      	ldr	r3, [pc, #496]	; (8002e94 <HAL_RCC_OscConfig+0x274>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a7b      	ldr	r2, [pc, #492]	; (8002e94 <HAL_RCC_OscConfig+0x274>)
 8002ca8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cac:	6013      	str	r3, [r2, #0]
 8002cae:	e01d      	b.n	8002cec <HAL_RCC_OscConfig+0xcc>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cb8:	d10c      	bne.n	8002cd4 <HAL_RCC_OscConfig+0xb4>
 8002cba:	4b76      	ldr	r3, [pc, #472]	; (8002e94 <HAL_RCC_OscConfig+0x274>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a75      	ldr	r2, [pc, #468]	; (8002e94 <HAL_RCC_OscConfig+0x274>)
 8002cc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cc4:	6013      	str	r3, [r2, #0]
 8002cc6:	4b73      	ldr	r3, [pc, #460]	; (8002e94 <HAL_RCC_OscConfig+0x274>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a72      	ldr	r2, [pc, #456]	; (8002e94 <HAL_RCC_OscConfig+0x274>)
 8002ccc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cd0:	6013      	str	r3, [r2, #0]
 8002cd2:	e00b      	b.n	8002cec <HAL_RCC_OscConfig+0xcc>
 8002cd4:	4b6f      	ldr	r3, [pc, #444]	; (8002e94 <HAL_RCC_OscConfig+0x274>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a6e      	ldr	r2, [pc, #440]	; (8002e94 <HAL_RCC_OscConfig+0x274>)
 8002cda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cde:	6013      	str	r3, [r2, #0]
 8002ce0:	4b6c      	ldr	r3, [pc, #432]	; (8002e94 <HAL_RCC_OscConfig+0x274>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a6b      	ldr	r2, [pc, #428]	; (8002e94 <HAL_RCC_OscConfig+0x274>)
 8002ce6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d013      	beq.n	8002d1c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf4:	f7fe fba6 	bl	8001444 <HAL_GetTick>
 8002cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cfa:	e008      	b.n	8002d0e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cfc:	f7fe fba2 	bl	8001444 <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	2b64      	cmp	r3, #100	; 0x64
 8002d08:	d901      	bls.n	8002d0e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e21f      	b.n	800314e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d0e:	4b61      	ldr	r3, [pc, #388]	; (8002e94 <HAL_RCC_OscConfig+0x274>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d0f0      	beq.n	8002cfc <HAL_RCC_OscConfig+0xdc>
 8002d1a:	e014      	b.n	8002d46 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d1c:	f7fe fb92 	bl	8001444 <HAL_GetTick>
 8002d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d22:	e008      	b.n	8002d36 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d24:	f7fe fb8e 	bl	8001444 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	2b64      	cmp	r3, #100	; 0x64
 8002d30:	d901      	bls.n	8002d36 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e20b      	b.n	800314e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d36:	4b57      	ldr	r3, [pc, #348]	; (8002e94 <HAL_RCC_OscConfig+0x274>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d1f0      	bne.n	8002d24 <HAL_RCC_OscConfig+0x104>
 8002d42:	e000      	b.n	8002d46 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0302 	and.w	r3, r3, #2
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d06f      	beq.n	8002e32 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002d52:	4b50      	ldr	r3, [pc, #320]	; (8002e94 <HAL_RCC_OscConfig+0x274>)
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	f003 030c 	and.w	r3, r3, #12
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d017      	beq.n	8002d8e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002d5e:	4b4d      	ldr	r3, [pc, #308]	; (8002e94 <HAL_RCC_OscConfig+0x274>)
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002d66:	2b08      	cmp	r3, #8
 8002d68:	d105      	bne.n	8002d76 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002d6a:	4b4a      	ldr	r3, [pc, #296]	; (8002e94 <HAL_RCC_OscConfig+0x274>)
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d00b      	beq.n	8002d8e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d76:	4b47      	ldr	r3, [pc, #284]	; (8002e94 <HAL_RCC_OscConfig+0x274>)
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002d7e:	2b0c      	cmp	r3, #12
 8002d80:	d11c      	bne.n	8002dbc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d82:	4b44      	ldr	r3, [pc, #272]	; (8002e94 <HAL_RCC_OscConfig+0x274>)
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d116      	bne.n	8002dbc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d8e:	4b41      	ldr	r3, [pc, #260]	; (8002e94 <HAL_RCC_OscConfig+0x274>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0302 	and.w	r3, r3, #2
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d005      	beq.n	8002da6 <HAL_RCC_OscConfig+0x186>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d001      	beq.n	8002da6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e1d3      	b.n	800314e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002da6:	4b3b      	ldr	r3, [pc, #236]	; (8002e94 <HAL_RCC_OscConfig+0x274>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	691b      	ldr	r3, [r3, #16]
 8002db2:	00db      	lsls	r3, r3, #3
 8002db4:	4937      	ldr	r1, [pc, #220]	; (8002e94 <HAL_RCC_OscConfig+0x274>)
 8002db6:	4313      	orrs	r3, r2
 8002db8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dba:	e03a      	b.n	8002e32 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d020      	beq.n	8002e06 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002dc4:	4b34      	ldr	r3, [pc, #208]	; (8002e98 <HAL_RCC_OscConfig+0x278>)
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dca:	f7fe fb3b 	bl	8001444 <HAL_GetTick>
 8002dce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dd0:	e008      	b.n	8002de4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dd2:	f7fe fb37 	bl	8001444 <HAL_GetTick>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d901      	bls.n	8002de4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002de0:	2303      	movs	r3, #3
 8002de2:	e1b4      	b.n	800314e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002de4:	4b2b      	ldr	r3, [pc, #172]	; (8002e94 <HAL_RCC_OscConfig+0x274>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0302 	and.w	r3, r3, #2
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d0f0      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002df0:	4b28      	ldr	r3, [pc, #160]	; (8002e94 <HAL_RCC_OscConfig+0x274>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	691b      	ldr	r3, [r3, #16]
 8002dfc:	00db      	lsls	r3, r3, #3
 8002dfe:	4925      	ldr	r1, [pc, #148]	; (8002e94 <HAL_RCC_OscConfig+0x274>)
 8002e00:	4313      	orrs	r3, r2
 8002e02:	600b      	str	r3, [r1, #0]
 8002e04:	e015      	b.n	8002e32 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e06:	4b24      	ldr	r3, [pc, #144]	; (8002e98 <HAL_RCC_OscConfig+0x278>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e0c:	f7fe fb1a 	bl	8001444 <HAL_GetTick>
 8002e10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e12:	e008      	b.n	8002e26 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e14:	f7fe fb16 	bl	8001444 <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d901      	bls.n	8002e26 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e193      	b.n	800314e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e26:	4b1b      	ldr	r3, [pc, #108]	; (8002e94 <HAL_RCC_OscConfig+0x274>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0302 	and.w	r3, r3, #2
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d1f0      	bne.n	8002e14 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0308 	and.w	r3, r3, #8
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d036      	beq.n	8002eac <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	695b      	ldr	r3, [r3, #20]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d016      	beq.n	8002e74 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e46:	4b15      	ldr	r3, [pc, #84]	; (8002e9c <HAL_RCC_OscConfig+0x27c>)
 8002e48:	2201      	movs	r2, #1
 8002e4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e4c:	f7fe fafa 	bl	8001444 <HAL_GetTick>
 8002e50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e52:	e008      	b.n	8002e66 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e54:	f7fe faf6 	bl	8001444 <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d901      	bls.n	8002e66 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e173      	b.n	800314e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e66:	4b0b      	ldr	r3, [pc, #44]	; (8002e94 <HAL_RCC_OscConfig+0x274>)
 8002e68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e6a:	f003 0302 	and.w	r3, r3, #2
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d0f0      	beq.n	8002e54 <HAL_RCC_OscConfig+0x234>
 8002e72:	e01b      	b.n	8002eac <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e74:	4b09      	ldr	r3, [pc, #36]	; (8002e9c <HAL_RCC_OscConfig+0x27c>)
 8002e76:	2200      	movs	r2, #0
 8002e78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e7a:	f7fe fae3 	bl	8001444 <HAL_GetTick>
 8002e7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e80:	e00e      	b.n	8002ea0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e82:	f7fe fadf 	bl	8001444 <HAL_GetTick>
 8002e86:	4602      	mov	r2, r0
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	1ad3      	subs	r3, r2, r3
 8002e8c:	2b02      	cmp	r3, #2
 8002e8e:	d907      	bls.n	8002ea0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002e90:	2303      	movs	r3, #3
 8002e92:	e15c      	b.n	800314e <HAL_RCC_OscConfig+0x52e>
 8002e94:	40023800 	.word	0x40023800
 8002e98:	42470000 	.word	0x42470000
 8002e9c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ea0:	4b8a      	ldr	r3, [pc, #552]	; (80030cc <HAL_RCC_OscConfig+0x4ac>)
 8002ea2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ea4:	f003 0302 	and.w	r3, r3, #2
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d1ea      	bne.n	8002e82 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0304 	and.w	r3, r3, #4
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	f000 8097 	beq.w	8002fe8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ebe:	4b83      	ldr	r3, [pc, #524]	; (80030cc <HAL_RCC_OscConfig+0x4ac>)
 8002ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d10f      	bne.n	8002eea <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002eca:	2300      	movs	r3, #0
 8002ecc:	60bb      	str	r3, [r7, #8]
 8002ece:	4b7f      	ldr	r3, [pc, #508]	; (80030cc <HAL_RCC_OscConfig+0x4ac>)
 8002ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed2:	4a7e      	ldr	r2, [pc, #504]	; (80030cc <HAL_RCC_OscConfig+0x4ac>)
 8002ed4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ed8:	6413      	str	r3, [r2, #64]	; 0x40
 8002eda:	4b7c      	ldr	r3, [pc, #496]	; (80030cc <HAL_RCC_OscConfig+0x4ac>)
 8002edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ee2:	60bb      	str	r3, [r7, #8]
 8002ee4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eea:	4b79      	ldr	r3, [pc, #484]	; (80030d0 <HAL_RCC_OscConfig+0x4b0>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d118      	bne.n	8002f28 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ef6:	4b76      	ldr	r3, [pc, #472]	; (80030d0 <HAL_RCC_OscConfig+0x4b0>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a75      	ldr	r2, [pc, #468]	; (80030d0 <HAL_RCC_OscConfig+0x4b0>)
 8002efc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f02:	f7fe fa9f 	bl	8001444 <HAL_GetTick>
 8002f06:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f08:	e008      	b.n	8002f1c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f0a:	f7fe fa9b 	bl	8001444 <HAL_GetTick>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	2b02      	cmp	r3, #2
 8002f16:	d901      	bls.n	8002f1c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002f18:	2303      	movs	r3, #3
 8002f1a:	e118      	b.n	800314e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f1c:	4b6c      	ldr	r3, [pc, #432]	; (80030d0 <HAL_RCC_OscConfig+0x4b0>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d0f0      	beq.n	8002f0a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d106      	bne.n	8002f3e <HAL_RCC_OscConfig+0x31e>
 8002f30:	4b66      	ldr	r3, [pc, #408]	; (80030cc <HAL_RCC_OscConfig+0x4ac>)
 8002f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f34:	4a65      	ldr	r2, [pc, #404]	; (80030cc <HAL_RCC_OscConfig+0x4ac>)
 8002f36:	f043 0301 	orr.w	r3, r3, #1
 8002f3a:	6713      	str	r3, [r2, #112]	; 0x70
 8002f3c:	e01c      	b.n	8002f78 <HAL_RCC_OscConfig+0x358>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	2b05      	cmp	r3, #5
 8002f44:	d10c      	bne.n	8002f60 <HAL_RCC_OscConfig+0x340>
 8002f46:	4b61      	ldr	r3, [pc, #388]	; (80030cc <HAL_RCC_OscConfig+0x4ac>)
 8002f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f4a:	4a60      	ldr	r2, [pc, #384]	; (80030cc <HAL_RCC_OscConfig+0x4ac>)
 8002f4c:	f043 0304 	orr.w	r3, r3, #4
 8002f50:	6713      	str	r3, [r2, #112]	; 0x70
 8002f52:	4b5e      	ldr	r3, [pc, #376]	; (80030cc <HAL_RCC_OscConfig+0x4ac>)
 8002f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f56:	4a5d      	ldr	r2, [pc, #372]	; (80030cc <HAL_RCC_OscConfig+0x4ac>)
 8002f58:	f043 0301 	orr.w	r3, r3, #1
 8002f5c:	6713      	str	r3, [r2, #112]	; 0x70
 8002f5e:	e00b      	b.n	8002f78 <HAL_RCC_OscConfig+0x358>
 8002f60:	4b5a      	ldr	r3, [pc, #360]	; (80030cc <HAL_RCC_OscConfig+0x4ac>)
 8002f62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f64:	4a59      	ldr	r2, [pc, #356]	; (80030cc <HAL_RCC_OscConfig+0x4ac>)
 8002f66:	f023 0301 	bic.w	r3, r3, #1
 8002f6a:	6713      	str	r3, [r2, #112]	; 0x70
 8002f6c:	4b57      	ldr	r3, [pc, #348]	; (80030cc <HAL_RCC_OscConfig+0x4ac>)
 8002f6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f70:	4a56      	ldr	r2, [pc, #344]	; (80030cc <HAL_RCC_OscConfig+0x4ac>)
 8002f72:	f023 0304 	bic.w	r3, r3, #4
 8002f76:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d015      	beq.n	8002fac <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f80:	f7fe fa60 	bl	8001444 <HAL_GetTick>
 8002f84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f86:	e00a      	b.n	8002f9e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f88:	f7fe fa5c 	bl	8001444 <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d901      	bls.n	8002f9e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e0d7      	b.n	800314e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f9e:	4b4b      	ldr	r3, [pc, #300]	; (80030cc <HAL_RCC_OscConfig+0x4ac>)
 8002fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fa2:	f003 0302 	and.w	r3, r3, #2
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d0ee      	beq.n	8002f88 <HAL_RCC_OscConfig+0x368>
 8002faa:	e014      	b.n	8002fd6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fac:	f7fe fa4a 	bl	8001444 <HAL_GetTick>
 8002fb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fb2:	e00a      	b.n	8002fca <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fb4:	f7fe fa46 	bl	8001444 <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d901      	bls.n	8002fca <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e0c1      	b.n	800314e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fca:	4b40      	ldr	r3, [pc, #256]	; (80030cc <HAL_RCC_OscConfig+0x4ac>)
 8002fcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fce:	f003 0302 	and.w	r3, r3, #2
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d1ee      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fd6:	7dfb      	ldrb	r3, [r7, #23]
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d105      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fdc:	4b3b      	ldr	r3, [pc, #236]	; (80030cc <HAL_RCC_OscConfig+0x4ac>)
 8002fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe0:	4a3a      	ldr	r2, [pc, #232]	; (80030cc <HAL_RCC_OscConfig+0x4ac>)
 8002fe2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fe6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	699b      	ldr	r3, [r3, #24]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	f000 80ad 	beq.w	800314c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ff2:	4b36      	ldr	r3, [pc, #216]	; (80030cc <HAL_RCC_OscConfig+0x4ac>)
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	f003 030c 	and.w	r3, r3, #12
 8002ffa:	2b08      	cmp	r3, #8
 8002ffc:	d060      	beq.n	80030c0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	699b      	ldr	r3, [r3, #24]
 8003002:	2b02      	cmp	r3, #2
 8003004:	d145      	bne.n	8003092 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003006:	4b33      	ldr	r3, [pc, #204]	; (80030d4 <HAL_RCC_OscConfig+0x4b4>)
 8003008:	2200      	movs	r2, #0
 800300a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800300c:	f7fe fa1a 	bl	8001444 <HAL_GetTick>
 8003010:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003012:	e008      	b.n	8003026 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003014:	f7fe fa16 	bl	8001444 <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	2b02      	cmp	r3, #2
 8003020:	d901      	bls.n	8003026 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	e093      	b.n	800314e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003026:	4b29      	ldr	r3, [pc, #164]	; (80030cc <HAL_RCC_OscConfig+0x4ac>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d1f0      	bne.n	8003014 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	69da      	ldr	r2, [r3, #28]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6a1b      	ldr	r3, [r3, #32]
 800303a:	431a      	orrs	r2, r3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003040:	019b      	lsls	r3, r3, #6
 8003042:	431a      	orrs	r2, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003048:	085b      	lsrs	r3, r3, #1
 800304a:	3b01      	subs	r3, #1
 800304c:	041b      	lsls	r3, r3, #16
 800304e:	431a      	orrs	r2, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003054:	061b      	lsls	r3, r3, #24
 8003056:	431a      	orrs	r2, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800305c:	071b      	lsls	r3, r3, #28
 800305e:	491b      	ldr	r1, [pc, #108]	; (80030cc <HAL_RCC_OscConfig+0x4ac>)
 8003060:	4313      	orrs	r3, r2
 8003062:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003064:	4b1b      	ldr	r3, [pc, #108]	; (80030d4 <HAL_RCC_OscConfig+0x4b4>)
 8003066:	2201      	movs	r2, #1
 8003068:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800306a:	f7fe f9eb 	bl	8001444 <HAL_GetTick>
 800306e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003070:	e008      	b.n	8003084 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003072:	f7fe f9e7 	bl	8001444 <HAL_GetTick>
 8003076:	4602      	mov	r2, r0
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	2b02      	cmp	r3, #2
 800307e:	d901      	bls.n	8003084 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003080:	2303      	movs	r3, #3
 8003082:	e064      	b.n	800314e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003084:	4b11      	ldr	r3, [pc, #68]	; (80030cc <HAL_RCC_OscConfig+0x4ac>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800308c:	2b00      	cmp	r3, #0
 800308e:	d0f0      	beq.n	8003072 <HAL_RCC_OscConfig+0x452>
 8003090:	e05c      	b.n	800314c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003092:	4b10      	ldr	r3, [pc, #64]	; (80030d4 <HAL_RCC_OscConfig+0x4b4>)
 8003094:	2200      	movs	r2, #0
 8003096:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003098:	f7fe f9d4 	bl	8001444 <HAL_GetTick>
 800309c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800309e:	e008      	b.n	80030b2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030a0:	f7fe f9d0 	bl	8001444 <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	2b02      	cmp	r3, #2
 80030ac:	d901      	bls.n	80030b2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e04d      	b.n	800314e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030b2:	4b06      	ldr	r3, [pc, #24]	; (80030cc <HAL_RCC_OscConfig+0x4ac>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d1f0      	bne.n	80030a0 <HAL_RCC_OscConfig+0x480>
 80030be:	e045      	b.n	800314c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	699b      	ldr	r3, [r3, #24]
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d107      	bne.n	80030d8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e040      	b.n	800314e <HAL_RCC_OscConfig+0x52e>
 80030cc:	40023800 	.word	0x40023800
 80030d0:	40007000 	.word	0x40007000
 80030d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80030d8:	4b1f      	ldr	r3, [pc, #124]	; (8003158 <HAL_RCC_OscConfig+0x538>)
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	699b      	ldr	r3, [r3, #24]
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d030      	beq.n	8003148 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d129      	bne.n	8003148 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030fe:	429a      	cmp	r2, r3
 8003100:	d122      	bne.n	8003148 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003102:	68fa      	ldr	r2, [r7, #12]
 8003104:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003108:	4013      	ands	r3, r2
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800310e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003110:	4293      	cmp	r3, r2
 8003112:	d119      	bne.n	8003148 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800311e:	085b      	lsrs	r3, r3, #1
 8003120:	3b01      	subs	r3, #1
 8003122:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003124:	429a      	cmp	r2, r3
 8003126:	d10f      	bne.n	8003148 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003132:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003134:	429a      	cmp	r2, r3
 8003136:	d107      	bne.n	8003148 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003142:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003144:	429a      	cmp	r2, r3
 8003146:	d001      	beq.n	800314c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e000      	b.n	800314e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800314c:	2300      	movs	r3, #0
}
 800314e:	4618      	mov	r0, r3
 8003150:	3718      	adds	r7, #24
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	40023800 	.word	0x40023800

0800315c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d101      	bne.n	800316e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e041      	b.n	80031f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003174:	b2db      	uxtb	r3, r3
 8003176:	2b00      	cmp	r3, #0
 8003178:	d106      	bne.n	8003188 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f7fd fef4 	bl	8000f70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2202      	movs	r2, #2
 800318c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	3304      	adds	r3, #4
 8003198:	4619      	mov	r1, r3
 800319a:	4610      	mov	r0, r2
 800319c:	f000 fad8 	bl	8003750 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031f0:	2300      	movs	r3, #0
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3708      	adds	r7, #8
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}

080031fa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80031fa:	b580      	push	{r7, lr}
 80031fc:	b082      	sub	sp, #8
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d101      	bne.n	800320c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e041      	b.n	8003290 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003212:	b2db      	uxtb	r3, r3
 8003214:	2b00      	cmp	r3, #0
 8003216:	d106      	bne.n	8003226 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f000 f839 	bl	8003298 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2202      	movs	r2, #2
 800322a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	3304      	adds	r3, #4
 8003236:	4619      	mov	r1, r3
 8003238:	4610      	mov	r0, r2
 800323a:	f000 fa89 	bl	8003750 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2201      	movs	r2, #1
 8003242:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2201      	movs	r2, #1
 800324a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2201      	movs	r2, #1
 8003252:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2201      	movs	r2, #1
 800325a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2201      	movs	r2, #1
 8003262:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2201      	movs	r2, #1
 800326a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2201      	movs	r2, #1
 8003272:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2201      	movs	r2, #1
 800327a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2201      	movs	r2, #1
 8003282:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2201      	movs	r2, #1
 800328a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800328e:	2300      	movs	r3, #0
}
 8003290:	4618      	mov	r0, r3
 8003292:	3708      	adds	r7, #8
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}

08003298 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003298:	b480      	push	{r7}
 800329a:	b083      	sub	sp, #12
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80032a0:	bf00      	nop
 80032a2:	370c      	adds	r7, #12
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr

080032ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d109      	bne.n	80032d0 <HAL_TIM_PWM_Start+0x24>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	bf14      	ite	ne
 80032c8:	2301      	movne	r3, #1
 80032ca:	2300      	moveq	r3, #0
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	e022      	b.n	8003316 <HAL_TIM_PWM_Start+0x6a>
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	2b04      	cmp	r3, #4
 80032d4:	d109      	bne.n	80032ea <HAL_TIM_PWM_Start+0x3e>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	2b01      	cmp	r3, #1
 80032e0:	bf14      	ite	ne
 80032e2:	2301      	movne	r3, #1
 80032e4:	2300      	moveq	r3, #0
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	e015      	b.n	8003316 <HAL_TIM_PWM_Start+0x6a>
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	2b08      	cmp	r3, #8
 80032ee:	d109      	bne.n	8003304 <HAL_TIM_PWM_Start+0x58>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	bf14      	ite	ne
 80032fc:	2301      	movne	r3, #1
 80032fe:	2300      	moveq	r3, #0
 8003300:	b2db      	uxtb	r3, r3
 8003302:	e008      	b.n	8003316 <HAL_TIM_PWM_Start+0x6a>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800330a:	b2db      	uxtb	r3, r3
 800330c:	2b01      	cmp	r3, #1
 800330e:	bf14      	ite	ne
 8003310:	2301      	movne	r3, #1
 8003312:	2300      	moveq	r3, #0
 8003314:	b2db      	uxtb	r3, r3
 8003316:	2b00      	cmp	r3, #0
 8003318:	d001      	beq.n	800331e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e07c      	b.n	8003418 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d104      	bne.n	800332e <HAL_TIM_PWM_Start+0x82>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2202      	movs	r2, #2
 8003328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800332c:	e013      	b.n	8003356 <HAL_TIM_PWM_Start+0xaa>
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	2b04      	cmp	r3, #4
 8003332:	d104      	bne.n	800333e <HAL_TIM_PWM_Start+0x92>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2202      	movs	r2, #2
 8003338:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800333c:	e00b      	b.n	8003356 <HAL_TIM_PWM_Start+0xaa>
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	2b08      	cmp	r3, #8
 8003342:	d104      	bne.n	800334e <HAL_TIM_PWM_Start+0xa2>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2202      	movs	r2, #2
 8003348:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800334c:	e003      	b.n	8003356 <HAL_TIM_PWM_Start+0xaa>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2202      	movs	r2, #2
 8003352:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	2201      	movs	r2, #1
 800335c:	6839      	ldr	r1, [r7, #0]
 800335e:	4618      	mov	r0, r3
 8003360:	f000 fce0 	bl	8003d24 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a2d      	ldr	r2, [pc, #180]	; (8003420 <HAL_TIM_PWM_Start+0x174>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d004      	beq.n	8003378 <HAL_TIM_PWM_Start+0xcc>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a2c      	ldr	r2, [pc, #176]	; (8003424 <HAL_TIM_PWM_Start+0x178>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d101      	bne.n	800337c <HAL_TIM_PWM_Start+0xd0>
 8003378:	2301      	movs	r3, #1
 800337a:	e000      	b.n	800337e <HAL_TIM_PWM_Start+0xd2>
 800337c:	2300      	movs	r3, #0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d007      	beq.n	8003392 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003390:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a22      	ldr	r2, [pc, #136]	; (8003420 <HAL_TIM_PWM_Start+0x174>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d022      	beq.n	80033e2 <HAL_TIM_PWM_Start+0x136>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033a4:	d01d      	beq.n	80033e2 <HAL_TIM_PWM_Start+0x136>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a1f      	ldr	r2, [pc, #124]	; (8003428 <HAL_TIM_PWM_Start+0x17c>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d018      	beq.n	80033e2 <HAL_TIM_PWM_Start+0x136>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a1d      	ldr	r2, [pc, #116]	; (800342c <HAL_TIM_PWM_Start+0x180>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d013      	beq.n	80033e2 <HAL_TIM_PWM_Start+0x136>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a1c      	ldr	r2, [pc, #112]	; (8003430 <HAL_TIM_PWM_Start+0x184>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d00e      	beq.n	80033e2 <HAL_TIM_PWM_Start+0x136>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a16      	ldr	r2, [pc, #88]	; (8003424 <HAL_TIM_PWM_Start+0x178>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d009      	beq.n	80033e2 <HAL_TIM_PWM_Start+0x136>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a18      	ldr	r2, [pc, #96]	; (8003434 <HAL_TIM_PWM_Start+0x188>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d004      	beq.n	80033e2 <HAL_TIM_PWM_Start+0x136>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a16      	ldr	r2, [pc, #88]	; (8003438 <HAL_TIM_PWM_Start+0x18c>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d111      	bne.n	8003406 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	f003 0307 	and.w	r3, r3, #7
 80033ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2b06      	cmp	r3, #6
 80033f2:	d010      	beq.n	8003416 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f042 0201 	orr.w	r2, r2, #1
 8003402:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003404:	e007      	b.n	8003416 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f042 0201 	orr.w	r2, r2, #1
 8003414:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003416:	2300      	movs	r3, #0
}
 8003418:	4618      	mov	r0, r3
 800341a:	3710      	adds	r7, #16
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}
 8003420:	40010000 	.word	0x40010000
 8003424:	40010400 	.word	0x40010400
 8003428:	40000400 	.word	0x40000400
 800342c:	40000800 	.word	0x40000800
 8003430:	40000c00 	.word	0x40000c00
 8003434:	40014000 	.word	0x40014000
 8003438:	40001800 	.word	0x40001800

0800343c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b086      	sub	sp, #24
 8003440:	af00      	add	r7, sp, #0
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003448:	2300      	movs	r3, #0
 800344a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003452:	2b01      	cmp	r3, #1
 8003454:	d101      	bne.n	800345a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003456:	2302      	movs	r3, #2
 8003458:	e0ae      	b.n	80035b8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2201      	movs	r2, #1
 800345e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2b0c      	cmp	r3, #12
 8003466:	f200 809f 	bhi.w	80035a8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800346a:	a201      	add	r2, pc, #4	; (adr r2, 8003470 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800346c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003470:	080034a5 	.word	0x080034a5
 8003474:	080035a9 	.word	0x080035a9
 8003478:	080035a9 	.word	0x080035a9
 800347c:	080035a9 	.word	0x080035a9
 8003480:	080034e5 	.word	0x080034e5
 8003484:	080035a9 	.word	0x080035a9
 8003488:	080035a9 	.word	0x080035a9
 800348c:	080035a9 	.word	0x080035a9
 8003490:	08003527 	.word	0x08003527
 8003494:	080035a9 	.word	0x080035a9
 8003498:	080035a9 	.word	0x080035a9
 800349c:	080035a9 	.word	0x080035a9
 80034a0:	08003567 	.word	0x08003567
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	68b9      	ldr	r1, [r7, #8]
 80034aa:	4618      	mov	r0, r3
 80034ac:	f000 f9f0 	bl	8003890 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	699a      	ldr	r2, [r3, #24]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f042 0208 	orr.w	r2, r2, #8
 80034be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	699a      	ldr	r2, [r3, #24]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f022 0204 	bic.w	r2, r2, #4
 80034ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	6999      	ldr	r1, [r3, #24]
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	691a      	ldr	r2, [r3, #16]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	430a      	orrs	r2, r1
 80034e0:	619a      	str	r2, [r3, #24]
      break;
 80034e2:	e064      	b.n	80035ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	68b9      	ldr	r1, [r7, #8]
 80034ea:	4618      	mov	r0, r3
 80034ec:	f000 fa40 	bl	8003970 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	699a      	ldr	r2, [r3, #24]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	699a      	ldr	r2, [r3, #24]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800350e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	6999      	ldr	r1, [r3, #24]
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	691b      	ldr	r3, [r3, #16]
 800351a:	021a      	lsls	r2, r3, #8
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	430a      	orrs	r2, r1
 8003522:	619a      	str	r2, [r3, #24]
      break;
 8003524:	e043      	b.n	80035ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	68b9      	ldr	r1, [r7, #8]
 800352c:	4618      	mov	r0, r3
 800352e:	f000 fa95 	bl	8003a5c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	69da      	ldr	r2, [r3, #28]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f042 0208 	orr.w	r2, r2, #8
 8003540:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	69da      	ldr	r2, [r3, #28]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f022 0204 	bic.w	r2, r2, #4
 8003550:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	69d9      	ldr	r1, [r3, #28]
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	691a      	ldr	r2, [r3, #16]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	430a      	orrs	r2, r1
 8003562:	61da      	str	r2, [r3, #28]
      break;
 8003564:	e023      	b.n	80035ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	68b9      	ldr	r1, [r7, #8]
 800356c:	4618      	mov	r0, r3
 800356e:	f000 fae9 	bl	8003b44 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	69da      	ldr	r2, [r3, #28]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003580:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	69da      	ldr	r2, [r3, #28]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003590:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	69d9      	ldr	r1, [r3, #28]
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	691b      	ldr	r3, [r3, #16]
 800359c:	021a      	lsls	r2, r3, #8
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	430a      	orrs	r2, r1
 80035a4:	61da      	str	r2, [r3, #28]
      break;
 80035a6:	e002      	b.n	80035ae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	75fb      	strb	r3, [r7, #23]
      break;
 80035ac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2200      	movs	r2, #0
 80035b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80035b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3718      	adds	r7, #24
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}

080035c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b084      	sub	sp, #16
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035ca:	2300      	movs	r3, #0
 80035cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d101      	bne.n	80035dc <HAL_TIM_ConfigClockSource+0x1c>
 80035d8:	2302      	movs	r3, #2
 80035da:	e0b4      	b.n	8003746 <HAL_TIM_ConfigClockSource+0x186>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2202      	movs	r2, #2
 80035e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80035fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003602:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	68ba      	ldr	r2, [r7, #8]
 800360a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003614:	d03e      	beq.n	8003694 <HAL_TIM_ConfigClockSource+0xd4>
 8003616:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800361a:	f200 8087 	bhi.w	800372c <HAL_TIM_ConfigClockSource+0x16c>
 800361e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003622:	f000 8086 	beq.w	8003732 <HAL_TIM_ConfigClockSource+0x172>
 8003626:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800362a:	d87f      	bhi.n	800372c <HAL_TIM_ConfigClockSource+0x16c>
 800362c:	2b70      	cmp	r3, #112	; 0x70
 800362e:	d01a      	beq.n	8003666 <HAL_TIM_ConfigClockSource+0xa6>
 8003630:	2b70      	cmp	r3, #112	; 0x70
 8003632:	d87b      	bhi.n	800372c <HAL_TIM_ConfigClockSource+0x16c>
 8003634:	2b60      	cmp	r3, #96	; 0x60
 8003636:	d050      	beq.n	80036da <HAL_TIM_ConfigClockSource+0x11a>
 8003638:	2b60      	cmp	r3, #96	; 0x60
 800363a:	d877      	bhi.n	800372c <HAL_TIM_ConfigClockSource+0x16c>
 800363c:	2b50      	cmp	r3, #80	; 0x50
 800363e:	d03c      	beq.n	80036ba <HAL_TIM_ConfigClockSource+0xfa>
 8003640:	2b50      	cmp	r3, #80	; 0x50
 8003642:	d873      	bhi.n	800372c <HAL_TIM_ConfigClockSource+0x16c>
 8003644:	2b40      	cmp	r3, #64	; 0x40
 8003646:	d058      	beq.n	80036fa <HAL_TIM_ConfigClockSource+0x13a>
 8003648:	2b40      	cmp	r3, #64	; 0x40
 800364a:	d86f      	bhi.n	800372c <HAL_TIM_ConfigClockSource+0x16c>
 800364c:	2b30      	cmp	r3, #48	; 0x30
 800364e:	d064      	beq.n	800371a <HAL_TIM_ConfigClockSource+0x15a>
 8003650:	2b30      	cmp	r3, #48	; 0x30
 8003652:	d86b      	bhi.n	800372c <HAL_TIM_ConfigClockSource+0x16c>
 8003654:	2b20      	cmp	r3, #32
 8003656:	d060      	beq.n	800371a <HAL_TIM_ConfigClockSource+0x15a>
 8003658:	2b20      	cmp	r3, #32
 800365a:	d867      	bhi.n	800372c <HAL_TIM_ConfigClockSource+0x16c>
 800365c:	2b00      	cmp	r3, #0
 800365e:	d05c      	beq.n	800371a <HAL_TIM_ConfigClockSource+0x15a>
 8003660:	2b10      	cmp	r3, #16
 8003662:	d05a      	beq.n	800371a <HAL_TIM_ConfigClockSource+0x15a>
 8003664:	e062      	b.n	800372c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6818      	ldr	r0, [r3, #0]
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	6899      	ldr	r1, [r3, #8]
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	685a      	ldr	r2, [r3, #4]
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	f000 fb35 	bl	8003ce4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003688:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	68ba      	ldr	r2, [r7, #8]
 8003690:	609a      	str	r2, [r3, #8]
      break;
 8003692:	e04f      	b.n	8003734 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6818      	ldr	r0, [r3, #0]
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	6899      	ldr	r1, [r3, #8]
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	685a      	ldr	r2, [r3, #4]
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	f000 fb1e 	bl	8003ce4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	689a      	ldr	r2, [r3, #8]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80036b6:	609a      	str	r2, [r3, #8]
      break;
 80036b8:	e03c      	b.n	8003734 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6818      	ldr	r0, [r3, #0]
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	6859      	ldr	r1, [r3, #4]
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	461a      	mov	r2, r3
 80036c8:	f000 fa92 	bl	8003bf0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2150      	movs	r1, #80	; 0x50
 80036d2:	4618      	mov	r0, r3
 80036d4:	f000 faeb 	bl	8003cae <TIM_ITRx_SetConfig>
      break;
 80036d8:	e02c      	b.n	8003734 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6818      	ldr	r0, [r3, #0]
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	6859      	ldr	r1, [r3, #4]
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	68db      	ldr	r3, [r3, #12]
 80036e6:	461a      	mov	r2, r3
 80036e8:	f000 fab1 	bl	8003c4e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2160      	movs	r1, #96	; 0x60
 80036f2:	4618      	mov	r0, r3
 80036f4:	f000 fadb 	bl	8003cae <TIM_ITRx_SetConfig>
      break;
 80036f8:	e01c      	b.n	8003734 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6818      	ldr	r0, [r3, #0]
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	6859      	ldr	r1, [r3, #4]
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	68db      	ldr	r3, [r3, #12]
 8003706:	461a      	mov	r2, r3
 8003708:	f000 fa72 	bl	8003bf0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	2140      	movs	r1, #64	; 0x40
 8003712:	4618      	mov	r0, r3
 8003714:	f000 facb 	bl	8003cae <TIM_ITRx_SetConfig>
      break;
 8003718:	e00c      	b.n	8003734 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4619      	mov	r1, r3
 8003724:	4610      	mov	r0, r2
 8003726:	f000 fac2 	bl	8003cae <TIM_ITRx_SetConfig>
      break;
 800372a:	e003      	b.n	8003734 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	73fb      	strb	r3, [r7, #15]
      break;
 8003730:	e000      	b.n	8003734 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003732:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003744:	7bfb      	ldrb	r3, [r7, #15]
}
 8003746:	4618      	mov	r0, r3
 8003748:	3710      	adds	r7, #16
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
	...

08003750 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003750:	b480      	push	{r7}
 8003752:	b085      	sub	sp, #20
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	4a40      	ldr	r2, [pc, #256]	; (8003864 <TIM_Base_SetConfig+0x114>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d013      	beq.n	8003790 <TIM_Base_SetConfig+0x40>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800376e:	d00f      	beq.n	8003790 <TIM_Base_SetConfig+0x40>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	4a3d      	ldr	r2, [pc, #244]	; (8003868 <TIM_Base_SetConfig+0x118>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d00b      	beq.n	8003790 <TIM_Base_SetConfig+0x40>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	4a3c      	ldr	r2, [pc, #240]	; (800386c <TIM_Base_SetConfig+0x11c>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d007      	beq.n	8003790 <TIM_Base_SetConfig+0x40>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	4a3b      	ldr	r2, [pc, #236]	; (8003870 <TIM_Base_SetConfig+0x120>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d003      	beq.n	8003790 <TIM_Base_SetConfig+0x40>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	4a3a      	ldr	r2, [pc, #232]	; (8003874 <TIM_Base_SetConfig+0x124>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d108      	bne.n	80037a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003796:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	68fa      	ldr	r2, [r7, #12]
 800379e:	4313      	orrs	r3, r2
 80037a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a2f      	ldr	r2, [pc, #188]	; (8003864 <TIM_Base_SetConfig+0x114>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d02b      	beq.n	8003802 <TIM_Base_SetConfig+0xb2>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037b0:	d027      	beq.n	8003802 <TIM_Base_SetConfig+0xb2>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a2c      	ldr	r2, [pc, #176]	; (8003868 <TIM_Base_SetConfig+0x118>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d023      	beq.n	8003802 <TIM_Base_SetConfig+0xb2>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4a2b      	ldr	r2, [pc, #172]	; (800386c <TIM_Base_SetConfig+0x11c>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d01f      	beq.n	8003802 <TIM_Base_SetConfig+0xb2>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a2a      	ldr	r2, [pc, #168]	; (8003870 <TIM_Base_SetConfig+0x120>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d01b      	beq.n	8003802 <TIM_Base_SetConfig+0xb2>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4a29      	ldr	r2, [pc, #164]	; (8003874 <TIM_Base_SetConfig+0x124>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d017      	beq.n	8003802 <TIM_Base_SetConfig+0xb2>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4a28      	ldr	r2, [pc, #160]	; (8003878 <TIM_Base_SetConfig+0x128>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d013      	beq.n	8003802 <TIM_Base_SetConfig+0xb2>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4a27      	ldr	r2, [pc, #156]	; (800387c <TIM_Base_SetConfig+0x12c>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d00f      	beq.n	8003802 <TIM_Base_SetConfig+0xb2>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4a26      	ldr	r2, [pc, #152]	; (8003880 <TIM_Base_SetConfig+0x130>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d00b      	beq.n	8003802 <TIM_Base_SetConfig+0xb2>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4a25      	ldr	r2, [pc, #148]	; (8003884 <TIM_Base_SetConfig+0x134>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d007      	beq.n	8003802 <TIM_Base_SetConfig+0xb2>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	4a24      	ldr	r2, [pc, #144]	; (8003888 <TIM_Base_SetConfig+0x138>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d003      	beq.n	8003802 <TIM_Base_SetConfig+0xb2>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4a23      	ldr	r2, [pc, #140]	; (800388c <TIM_Base_SetConfig+0x13c>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d108      	bne.n	8003814 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003808:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	68fa      	ldr	r2, [r7, #12]
 8003810:	4313      	orrs	r3, r2
 8003812:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	695b      	ldr	r3, [r3, #20]
 800381e:	4313      	orrs	r3, r2
 8003820:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	68fa      	ldr	r2, [r7, #12]
 8003826:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	689a      	ldr	r2, [r3, #8]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	4a0a      	ldr	r2, [pc, #40]	; (8003864 <TIM_Base_SetConfig+0x114>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d003      	beq.n	8003848 <TIM_Base_SetConfig+0xf8>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	4a0c      	ldr	r2, [pc, #48]	; (8003874 <TIM_Base_SetConfig+0x124>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d103      	bne.n	8003850 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	691a      	ldr	r2, [r3, #16]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	615a      	str	r2, [r3, #20]
}
 8003856:	bf00      	nop
 8003858:	3714      	adds	r7, #20
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr
 8003862:	bf00      	nop
 8003864:	40010000 	.word	0x40010000
 8003868:	40000400 	.word	0x40000400
 800386c:	40000800 	.word	0x40000800
 8003870:	40000c00 	.word	0x40000c00
 8003874:	40010400 	.word	0x40010400
 8003878:	40014000 	.word	0x40014000
 800387c:	40014400 	.word	0x40014400
 8003880:	40014800 	.word	0x40014800
 8003884:	40001800 	.word	0x40001800
 8003888:	40001c00 	.word	0x40001c00
 800388c:	40002000 	.word	0x40002000

08003890 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003890:	b480      	push	{r7}
 8003892:	b087      	sub	sp, #28
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6a1b      	ldr	r3, [r3, #32]
 800389e:	f023 0201 	bic.w	r2, r3, #1
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a1b      	ldr	r3, [r3, #32]
 80038aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	699b      	ldr	r3, [r3, #24]
 80038b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f023 0303 	bic.w	r3, r3, #3
 80038c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	68fa      	ldr	r2, [r7, #12]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	f023 0302 	bic.w	r3, r3, #2
 80038d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	697a      	ldr	r2, [r7, #20]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	4a20      	ldr	r2, [pc, #128]	; (8003968 <TIM_OC1_SetConfig+0xd8>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d003      	beq.n	80038f4 <TIM_OC1_SetConfig+0x64>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	4a1f      	ldr	r2, [pc, #124]	; (800396c <TIM_OC1_SetConfig+0xdc>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d10c      	bne.n	800390e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	f023 0308 	bic.w	r3, r3, #8
 80038fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	697a      	ldr	r2, [r7, #20]
 8003902:	4313      	orrs	r3, r2
 8003904:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	f023 0304 	bic.w	r3, r3, #4
 800390c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4a15      	ldr	r2, [pc, #84]	; (8003968 <TIM_OC1_SetConfig+0xd8>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d003      	beq.n	800391e <TIM_OC1_SetConfig+0x8e>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	4a14      	ldr	r2, [pc, #80]	; (800396c <TIM_OC1_SetConfig+0xdc>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d111      	bne.n	8003942 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003924:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800392c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	695b      	ldr	r3, [r3, #20]
 8003932:	693a      	ldr	r2, [r7, #16]
 8003934:	4313      	orrs	r3, r2
 8003936:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	699b      	ldr	r3, [r3, #24]
 800393c:	693a      	ldr	r2, [r7, #16]
 800393e:	4313      	orrs	r3, r2
 8003940:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	693a      	ldr	r2, [r7, #16]
 8003946:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	68fa      	ldr	r2, [r7, #12]
 800394c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	685a      	ldr	r2, [r3, #4]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	697a      	ldr	r2, [r7, #20]
 800395a:	621a      	str	r2, [r3, #32]
}
 800395c:	bf00      	nop
 800395e:	371c      	adds	r7, #28
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr
 8003968:	40010000 	.word	0x40010000
 800396c:	40010400 	.word	0x40010400

08003970 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003970:	b480      	push	{r7}
 8003972:	b087      	sub	sp, #28
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6a1b      	ldr	r3, [r3, #32]
 800397e:	f023 0210 	bic.w	r2, r3, #16
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6a1b      	ldr	r3, [r3, #32]
 800398a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	699b      	ldr	r3, [r3, #24]
 8003996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800399e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	021b      	lsls	r3, r3, #8
 80039ae:	68fa      	ldr	r2, [r7, #12]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	f023 0320 	bic.w	r3, r3, #32
 80039ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	011b      	lsls	r3, r3, #4
 80039c2:	697a      	ldr	r2, [r7, #20]
 80039c4:	4313      	orrs	r3, r2
 80039c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	4a22      	ldr	r2, [pc, #136]	; (8003a54 <TIM_OC2_SetConfig+0xe4>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d003      	beq.n	80039d8 <TIM_OC2_SetConfig+0x68>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	4a21      	ldr	r2, [pc, #132]	; (8003a58 <TIM_OC2_SetConfig+0xe8>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d10d      	bne.n	80039f4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	011b      	lsls	r3, r3, #4
 80039e6:	697a      	ldr	r2, [r7, #20]
 80039e8:	4313      	orrs	r3, r2
 80039ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039f2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	4a17      	ldr	r2, [pc, #92]	; (8003a54 <TIM_OC2_SetConfig+0xe4>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d003      	beq.n	8003a04 <TIM_OC2_SetConfig+0x94>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	4a16      	ldr	r2, [pc, #88]	; (8003a58 <TIM_OC2_SetConfig+0xe8>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d113      	bne.n	8003a2c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a0a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a12:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	695b      	ldr	r3, [r3, #20]
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	693a      	ldr	r2, [r7, #16]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	699b      	ldr	r3, [r3, #24]
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	693a      	ldr	r2, [r7, #16]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	693a      	ldr	r2, [r7, #16]
 8003a30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	68fa      	ldr	r2, [r7, #12]
 8003a36:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	685a      	ldr	r2, [r3, #4]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	697a      	ldr	r2, [r7, #20]
 8003a44:	621a      	str	r2, [r3, #32]
}
 8003a46:	bf00      	nop
 8003a48:	371c      	adds	r7, #28
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr
 8003a52:	bf00      	nop
 8003a54:	40010000 	.word	0x40010000
 8003a58:	40010400 	.word	0x40010400

08003a5c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b087      	sub	sp, #28
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6a1b      	ldr	r3, [r3, #32]
 8003a6a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a1b      	ldr	r3, [r3, #32]
 8003a76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	69db      	ldr	r3, [r3, #28]
 8003a82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f023 0303 	bic.w	r3, r3, #3
 8003a92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	68fa      	ldr	r2, [r7, #12]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003aa4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	021b      	lsls	r3, r3, #8
 8003aac:	697a      	ldr	r2, [r7, #20]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a21      	ldr	r2, [pc, #132]	; (8003b3c <TIM_OC3_SetConfig+0xe0>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d003      	beq.n	8003ac2 <TIM_OC3_SetConfig+0x66>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a20      	ldr	r2, [pc, #128]	; (8003b40 <TIM_OC3_SetConfig+0xe4>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d10d      	bne.n	8003ade <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ac8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	021b      	lsls	r3, r3, #8
 8003ad0:	697a      	ldr	r2, [r7, #20]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003adc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a16      	ldr	r2, [pc, #88]	; (8003b3c <TIM_OC3_SetConfig+0xe0>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d003      	beq.n	8003aee <TIM_OC3_SetConfig+0x92>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a15      	ldr	r2, [pc, #84]	; (8003b40 <TIM_OC3_SetConfig+0xe4>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d113      	bne.n	8003b16 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003af4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003afc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	695b      	ldr	r3, [r3, #20]
 8003b02:	011b      	lsls	r3, r3, #4
 8003b04:	693a      	ldr	r2, [r7, #16]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	699b      	ldr	r3, [r3, #24]
 8003b0e:	011b      	lsls	r3, r3, #4
 8003b10:	693a      	ldr	r2, [r7, #16]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	693a      	ldr	r2, [r7, #16]
 8003b1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	68fa      	ldr	r2, [r7, #12]
 8003b20:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	685a      	ldr	r2, [r3, #4]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	697a      	ldr	r2, [r7, #20]
 8003b2e:	621a      	str	r2, [r3, #32]
}
 8003b30:	bf00      	nop
 8003b32:	371c      	adds	r7, #28
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr
 8003b3c:	40010000 	.word	0x40010000
 8003b40:	40010400 	.word	0x40010400

08003b44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b087      	sub	sp, #28
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a1b      	ldr	r3, [r3, #32]
 8003b52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6a1b      	ldr	r3, [r3, #32]
 8003b5e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	69db      	ldr	r3, [r3, #28]
 8003b6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	021b      	lsls	r3, r3, #8
 8003b82:	68fa      	ldr	r2, [r7, #12]
 8003b84:	4313      	orrs	r3, r2
 8003b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	031b      	lsls	r3, r3, #12
 8003b96:	693a      	ldr	r2, [r7, #16]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	4a12      	ldr	r2, [pc, #72]	; (8003be8 <TIM_OC4_SetConfig+0xa4>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d003      	beq.n	8003bac <TIM_OC4_SetConfig+0x68>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	4a11      	ldr	r2, [pc, #68]	; (8003bec <TIM_OC4_SetConfig+0xa8>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d109      	bne.n	8003bc0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003bb2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	695b      	ldr	r3, [r3, #20]
 8003bb8:	019b      	lsls	r3, r3, #6
 8003bba:	697a      	ldr	r2, [r7, #20]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	697a      	ldr	r2, [r7, #20]
 8003bc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	68fa      	ldr	r2, [r7, #12]
 8003bca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	685a      	ldr	r2, [r3, #4]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	693a      	ldr	r2, [r7, #16]
 8003bd8:	621a      	str	r2, [r3, #32]
}
 8003bda:	bf00      	nop
 8003bdc:	371c      	adds	r7, #28
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr
 8003be6:	bf00      	nop
 8003be8:	40010000 	.word	0x40010000
 8003bec:	40010400 	.word	0x40010400

08003bf0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b087      	sub	sp, #28
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	60b9      	str	r1, [r7, #8]
 8003bfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	6a1b      	ldr	r3, [r3, #32]
 8003c00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	6a1b      	ldr	r3, [r3, #32]
 8003c06:	f023 0201 	bic.w	r2, r3, #1
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	699b      	ldr	r3, [r3, #24]
 8003c12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	011b      	lsls	r3, r3, #4
 8003c20:	693a      	ldr	r2, [r7, #16]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	f023 030a 	bic.w	r3, r3, #10
 8003c2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c2e:	697a      	ldr	r2, [r7, #20]
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	693a      	ldr	r2, [r7, #16]
 8003c3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	697a      	ldr	r2, [r7, #20]
 8003c40:	621a      	str	r2, [r3, #32]
}
 8003c42:	bf00      	nop
 8003c44:	371c      	adds	r7, #28
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr

08003c4e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c4e:	b480      	push	{r7}
 8003c50:	b087      	sub	sp, #28
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	60f8      	str	r0, [r7, #12]
 8003c56:	60b9      	str	r1, [r7, #8]
 8003c58:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	6a1b      	ldr	r3, [r3, #32]
 8003c5e:	f023 0210 	bic.w	r2, r3, #16
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	699b      	ldr	r3, [r3, #24]
 8003c6a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6a1b      	ldr	r3, [r3, #32]
 8003c70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003c78:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	031b      	lsls	r3, r3, #12
 8003c7e:	697a      	ldr	r2, [r7, #20]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003c8a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	011b      	lsls	r3, r3, #4
 8003c90:	693a      	ldr	r2, [r7, #16]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	697a      	ldr	r2, [r7, #20]
 8003c9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	693a      	ldr	r2, [r7, #16]
 8003ca0:	621a      	str	r2, [r3, #32]
}
 8003ca2:	bf00      	nop
 8003ca4:	371c      	adds	r7, #28
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr

08003cae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003cae:	b480      	push	{r7}
 8003cb0:	b085      	sub	sp, #20
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	6078      	str	r0, [r7, #4]
 8003cb6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cc4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003cc6:	683a      	ldr	r2, [r7, #0]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	f043 0307 	orr.w	r3, r3, #7
 8003cd0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	68fa      	ldr	r2, [r7, #12]
 8003cd6:	609a      	str	r2, [r3, #8]
}
 8003cd8:	bf00      	nop
 8003cda:	3714      	adds	r7, #20
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr

08003ce4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b087      	sub	sp, #28
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	60f8      	str	r0, [r7, #12]
 8003cec:	60b9      	str	r1, [r7, #8]
 8003cee:	607a      	str	r2, [r7, #4]
 8003cf0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003cfe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	021a      	lsls	r2, r3, #8
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	431a      	orrs	r2, r3
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	697a      	ldr	r2, [r7, #20]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	697a      	ldr	r2, [r7, #20]
 8003d16:	609a      	str	r2, [r3, #8]
}
 8003d18:	bf00      	nop
 8003d1a:	371c      	adds	r7, #28
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr

08003d24 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b087      	sub	sp, #28
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	60f8      	str	r0, [r7, #12]
 8003d2c:	60b9      	str	r1, [r7, #8]
 8003d2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	f003 031f 	and.w	r3, r3, #31
 8003d36:	2201      	movs	r2, #1
 8003d38:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	6a1a      	ldr	r2, [r3, #32]
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	43db      	mvns	r3, r3
 8003d46:	401a      	ands	r2, r3
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6a1a      	ldr	r2, [r3, #32]
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	f003 031f 	and.w	r3, r3, #31
 8003d56:	6879      	ldr	r1, [r7, #4]
 8003d58:	fa01 f303 	lsl.w	r3, r1, r3
 8003d5c:	431a      	orrs	r2, r3
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	621a      	str	r2, [r3, #32]
}
 8003d62:	bf00      	nop
 8003d64:	371c      	adds	r7, #28
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr
	...

08003d70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b085      	sub	sp, #20
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d101      	bne.n	8003d88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d84:	2302      	movs	r3, #2
 8003d86:	e05a      	b.n	8003e3e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2202      	movs	r2, #2
 8003d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	68fa      	ldr	r2, [r7, #12]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	68fa      	ldr	r2, [r7, #12]
 8003dc0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a21      	ldr	r2, [pc, #132]	; (8003e4c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d022      	beq.n	8003e12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dd4:	d01d      	beq.n	8003e12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a1d      	ldr	r2, [pc, #116]	; (8003e50 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d018      	beq.n	8003e12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a1b      	ldr	r2, [pc, #108]	; (8003e54 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d013      	beq.n	8003e12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a1a      	ldr	r2, [pc, #104]	; (8003e58 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d00e      	beq.n	8003e12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a18      	ldr	r2, [pc, #96]	; (8003e5c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d009      	beq.n	8003e12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a17      	ldr	r2, [pc, #92]	; (8003e60 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d004      	beq.n	8003e12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a15      	ldr	r2, [pc, #84]	; (8003e64 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d10c      	bne.n	8003e2c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e18:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	68ba      	ldr	r2, [r7, #8]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	68ba      	ldr	r2, [r7, #8]
 8003e2a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e3c:	2300      	movs	r3, #0
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3714      	adds	r7, #20
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr
 8003e4a:	bf00      	nop
 8003e4c:	40010000 	.word	0x40010000
 8003e50:	40000400 	.word	0x40000400
 8003e54:	40000800 	.word	0x40000800
 8003e58:	40000c00 	.word	0x40000c00
 8003e5c:	40010400 	.word	0x40010400
 8003e60:	40014000 	.word	0x40014000
 8003e64:	40001800 	.word	0x40001800

08003e68 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b085      	sub	sp, #20
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003e72:	2300      	movs	r3, #0
 8003e74:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d101      	bne.n	8003e84 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003e80:	2302      	movs	r3, #2
 8003e82:	e03d      	b.n	8003f00 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2201      	movs	r2, #1
 8003e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	68db      	ldr	r3, [r3, #12]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	691b      	ldr	r3, [r3, #16]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	695b      	ldr	r3, [r3, #20]
 8003edc:	4313      	orrs	r3, r2
 8003ede:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	69db      	ldr	r3, [r3, #28]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	68fa      	ldr	r2, [r7, #12]
 8003ef4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003efe:	2300      	movs	r3, #0
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3714      	adds	r7, #20
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr

08003f0c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b082      	sub	sp, #8
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d101      	bne.n	8003f1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e03f      	b.n	8003f9e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d106      	bne.n	8003f38 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f7fd f8b0 	bl	8001098 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2224      	movs	r2, #36	; 0x24
 8003f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	68da      	ldr	r2, [r3, #12]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f4e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f000 f829 	bl	8003fa8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	691a      	ldr	r2, [r3, #16]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f64:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	695a      	ldr	r2, [r3, #20]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f74:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	68da      	ldr	r2, [r3, #12]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f84:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2220      	movs	r2, #32
 8003f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2220      	movs	r2, #32
 8003f98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003f9c:	2300      	movs	r3, #0
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3708      	adds	r7, #8
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
	...

08003fa8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fa8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fac:	b0c0      	sub	sp, #256	; 0x100
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	691b      	ldr	r3, [r3, #16]
 8003fbc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fc4:	68d9      	ldr	r1, [r3, #12]
 8003fc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	ea40 0301 	orr.w	r3, r0, r1
 8003fd0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003fd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fd6:	689a      	ldr	r2, [r3, #8]
 8003fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fdc:	691b      	ldr	r3, [r3, #16]
 8003fde:	431a      	orrs	r2, r3
 8003fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fe4:	695b      	ldr	r3, [r3, #20]
 8003fe6:	431a      	orrs	r2, r3
 8003fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fec:	69db      	ldr	r3, [r3, #28]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004000:	f021 010c 	bic.w	r1, r1, #12
 8004004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800400e:	430b      	orrs	r3, r1
 8004010:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004012:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	695b      	ldr	r3, [r3, #20]
 800401a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800401e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004022:	6999      	ldr	r1, [r3, #24]
 8004024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	ea40 0301 	orr.w	r3, r0, r1
 800402e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	4b8f      	ldr	r3, [pc, #572]	; (8004274 <UART_SetConfig+0x2cc>)
 8004038:	429a      	cmp	r2, r3
 800403a:	d005      	beq.n	8004048 <UART_SetConfig+0xa0>
 800403c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	4b8d      	ldr	r3, [pc, #564]	; (8004278 <UART_SetConfig+0x2d0>)
 8004044:	429a      	cmp	r2, r3
 8004046:	d104      	bne.n	8004052 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004048:	f7fe fba6 	bl	8002798 <HAL_RCC_GetPCLK2Freq>
 800404c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004050:	e003      	b.n	800405a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004052:	f7fe fb8d 	bl	8002770 <HAL_RCC_GetPCLK1Freq>
 8004056:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800405a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800405e:	69db      	ldr	r3, [r3, #28]
 8004060:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004064:	f040 810c 	bne.w	8004280 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004068:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800406c:	2200      	movs	r2, #0
 800406e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004072:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004076:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800407a:	4622      	mov	r2, r4
 800407c:	462b      	mov	r3, r5
 800407e:	1891      	adds	r1, r2, r2
 8004080:	65b9      	str	r1, [r7, #88]	; 0x58
 8004082:	415b      	adcs	r3, r3
 8004084:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004086:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800408a:	4621      	mov	r1, r4
 800408c:	eb12 0801 	adds.w	r8, r2, r1
 8004090:	4629      	mov	r1, r5
 8004092:	eb43 0901 	adc.w	r9, r3, r1
 8004096:	f04f 0200 	mov.w	r2, #0
 800409a:	f04f 0300 	mov.w	r3, #0
 800409e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80040a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80040a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80040aa:	4690      	mov	r8, r2
 80040ac:	4699      	mov	r9, r3
 80040ae:	4623      	mov	r3, r4
 80040b0:	eb18 0303 	adds.w	r3, r8, r3
 80040b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80040b8:	462b      	mov	r3, r5
 80040ba:	eb49 0303 	adc.w	r3, r9, r3
 80040be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80040c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80040ce:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80040d2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80040d6:	460b      	mov	r3, r1
 80040d8:	18db      	adds	r3, r3, r3
 80040da:	653b      	str	r3, [r7, #80]	; 0x50
 80040dc:	4613      	mov	r3, r2
 80040de:	eb42 0303 	adc.w	r3, r2, r3
 80040e2:	657b      	str	r3, [r7, #84]	; 0x54
 80040e4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80040e8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80040ec:	f7fc f8e0 	bl	80002b0 <__aeabi_uldivmod>
 80040f0:	4602      	mov	r2, r0
 80040f2:	460b      	mov	r3, r1
 80040f4:	4b61      	ldr	r3, [pc, #388]	; (800427c <UART_SetConfig+0x2d4>)
 80040f6:	fba3 2302 	umull	r2, r3, r3, r2
 80040fa:	095b      	lsrs	r3, r3, #5
 80040fc:	011c      	lsls	r4, r3, #4
 80040fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004102:	2200      	movs	r2, #0
 8004104:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004108:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800410c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004110:	4642      	mov	r2, r8
 8004112:	464b      	mov	r3, r9
 8004114:	1891      	adds	r1, r2, r2
 8004116:	64b9      	str	r1, [r7, #72]	; 0x48
 8004118:	415b      	adcs	r3, r3
 800411a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800411c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004120:	4641      	mov	r1, r8
 8004122:	eb12 0a01 	adds.w	sl, r2, r1
 8004126:	4649      	mov	r1, r9
 8004128:	eb43 0b01 	adc.w	fp, r3, r1
 800412c:	f04f 0200 	mov.w	r2, #0
 8004130:	f04f 0300 	mov.w	r3, #0
 8004134:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004138:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800413c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004140:	4692      	mov	sl, r2
 8004142:	469b      	mov	fp, r3
 8004144:	4643      	mov	r3, r8
 8004146:	eb1a 0303 	adds.w	r3, sl, r3
 800414a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800414e:	464b      	mov	r3, r9
 8004150:	eb4b 0303 	adc.w	r3, fp, r3
 8004154:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	2200      	movs	r2, #0
 8004160:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004164:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004168:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800416c:	460b      	mov	r3, r1
 800416e:	18db      	adds	r3, r3, r3
 8004170:	643b      	str	r3, [r7, #64]	; 0x40
 8004172:	4613      	mov	r3, r2
 8004174:	eb42 0303 	adc.w	r3, r2, r3
 8004178:	647b      	str	r3, [r7, #68]	; 0x44
 800417a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800417e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004182:	f7fc f895 	bl	80002b0 <__aeabi_uldivmod>
 8004186:	4602      	mov	r2, r0
 8004188:	460b      	mov	r3, r1
 800418a:	4611      	mov	r1, r2
 800418c:	4b3b      	ldr	r3, [pc, #236]	; (800427c <UART_SetConfig+0x2d4>)
 800418e:	fba3 2301 	umull	r2, r3, r3, r1
 8004192:	095b      	lsrs	r3, r3, #5
 8004194:	2264      	movs	r2, #100	; 0x64
 8004196:	fb02 f303 	mul.w	r3, r2, r3
 800419a:	1acb      	subs	r3, r1, r3
 800419c:	00db      	lsls	r3, r3, #3
 800419e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80041a2:	4b36      	ldr	r3, [pc, #216]	; (800427c <UART_SetConfig+0x2d4>)
 80041a4:	fba3 2302 	umull	r2, r3, r3, r2
 80041a8:	095b      	lsrs	r3, r3, #5
 80041aa:	005b      	lsls	r3, r3, #1
 80041ac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80041b0:	441c      	add	r4, r3
 80041b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041b6:	2200      	movs	r2, #0
 80041b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80041bc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80041c0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80041c4:	4642      	mov	r2, r8
 80041c6:	464b      	mov	r3, r9
 80041c8:	1891      	adds	r1, r2, r2
 80041ca:	63b9      	str	r1, [r7, #56]	; 0x38
 80041cc:	415b      	adcs	r3, r3
 80041ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80041d4:	4641      	mov	r1, r8
 80041d6:	1851      	adds	r1, r2, r1
 80041d8:	6339      	str	r1, [r7, #48]	; 0x30
 80041da:	4649      	mov	r1, r9
 80041dc:	414b      	adcs	r3, r1
 80041de:	637b      	str	r3, [r7, #52]	; 0x34
 80041e0:	f04f 0200 	mov.w	r2, #0
 80041e4:	f04f 0300 	mov.w	r3, #0
 80041e8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80041ec:	4659      	mov	r1, fp
 80041ee:	00cb      	lsls	r3, r1, #3
 80041f0:	4651      	mov	r1, sl
 80041f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041f6:	4651      	mov	r1, sl
 80041f8:	00ca      	lsls	r2, r1, #3
 80041fa:	4610      	mov	r0, r2
 80041fc:	4619      	mov	r1, r3
 80041fe:	4603      	mov	r3, r0
 8004200:	4642      	mov	r2, r8
 8004202:	189b      	adds	r3, r3, r2
 8004204:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004208:	464b      	mov	r3, r9
 800420a:	460a      	mov	r2, r1
 800420c:	eb42 0303 	adc.w	r3, r2, r3
 8004210:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	2200      	movs	r2, #0
 800421c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004220:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004224:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004228:	460b      	mov	r3, r1
 800422a:	18db      	adds	r3, r3, r3
 800422c:	62bb      	str	r3, [r7, #40]	; 0x28
 800422e:	4613      	mov	r3, r2
 8004230:	eb42 0303 	adc.w	r3, r2, r3
 8004234:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004236:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800423a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800423e:	f7fc f837 	bl	80002b0 <__aeabi_uldivmod>
 8004242:	4602      	mov	r2, r0
 8004244:	460b      	mov	r3, r1
 8004246:	4b0d      	ldr	r3, [pc, #52]	; (800427c <UART_SetConfig+0x2d4>)
 8004248:	fba3 1302 	umull	r1, r3, r3, r2
 800424c:	095b      	lsrs	r3, r3, #5
 800424e:	2164      	movs	r1, #100	; 0x64
 8004250:	fb01 f303 	mul.w	r3, r1, r3
 8004254:	1ad3      	subs	r3, r2, r3
 8004256:	00db      	lsls	r3, r3, #3
 8004258:	3332      	adds	r3, #50	; 0x32
 800425a:	4a08      	ldr	r2, [pc, #32]	; (800427c <UART_SetConfig+0x2d4>)
 800425c:	fba2 2303 	umull	r2, r3, r2, r3
 8004260:	095b      	lsrs	r3, r3, #5
 8004262:	f003 0207 	and.w	r2, r3, #7
 8004266:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4422      	add	r2, r4
 800426e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004270:	e105      	b.n	800447e <UART_SetConfig+0x4d6>
 8004272:	bf00      	nop
 8004274:	40011000 	.word	0x40011000
 8004278:	40011400 	.word	0x40011400
 800427c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004280:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004284:	2200      	movs	r2, #0
 8004286:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800428a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800428e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004292:	4642      	mov	r2, r8
 8004294:	464b      	mov	r3, r9
 8004296:	1891      	adds	r1, r2, r2
 8004298:	6239      	str	r1, [r7, #32]
 800429a:	415b      	adcs	r3, r3
 800429c:	627b      	str	r3, [r7, #36]	; 0x24
 800429e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80042a2:	4641      	mov	r1, r8
 80042a4:	1854      	adds	r4, r2, r1
 80042a6:	4649      	mov	r1, r9
 80042a8:	eb43 0501 	adc.w	r5, r3, r1
 80042ac:	f04f 0200 	mov.w	r2, #0
 80042b0:	f04f 0300 	mov.w	r3, #0
 80042b4:	00eb      	lsls	r3, r5, #3
 80042b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80042ba:	00e2      	lsls	r2, r4, #3
 80042bc:	4614      	mov	r4, r2
 80042be:	461d      	mov	r5, r3
 80042c0:	4643      	mov	r3, r8
 80042c2:	18e3      	adds	r3, r4, r3
 80042c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80042c8:	464b      	mov	r3, r9
 80042ca:	eb45 0303 	adc.w	r3, r5, r3
 80042ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80042d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80042de:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80042e2:	f04f 0200 	mov.w	r2, #0
 80042e6:	f04f 0300 	mov.w	r3, #0
 80042ea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80042ee:	4629      	mov	r1, r5
 80042f0:	008b      	lsls	r3, r1, #2
 80042f2:	4621      	mov	r1, r4
 80042f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042f8:	4621      	mov	r1, r4
 80042fa:	008a      	lsls	r2, r1, #2
 80042fc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004300:	f7fb ffd6 	bl	80002b0 <__aeabi_uldivmod>
 8004304:	4602      	mov	r2, r0
 8004306:	460b      	mov	r3, r1
 8004308:	4b60      	ldr	r3, [pc, #384]	; (800448c <UART_SetConfig+0x4e4>)
 800430a:	fba3 2302 	umull	r2, r3, r3, r2
 800430e:	095b      	lsrs	r3, r3, #5
 8004310:	011c      	lsls	r4, r3, #4
 8004312:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004316:	2200      	movs	r2, #0
 8004318:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800431c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004320:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004324:	4642      	mov	r2, r8
 8004326:	464b      	mov	r3, r9
 8004328:	1891      	adds	r1, r2, r2
 800432a:	61b9      	str	r1, [r7, #24]
 800432c:	415b      	adcs	r3, r3
 800432e:	61fb      	str	r3, [r7, #28]
 8004330:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004334:	4641      	mov	r1, r8
 8004336:	1851      	adds	r1, r2, r1
 8004338:	6139      	str	r1, [r7, #16]
 800433a:	4649      	mov	r1, r9
 800433c:	414b      	adcs	r3, r1
 800433e:	617b      	str	r3, [r7, #20]
 8004340:	f04f 0200 	mov.w	r2, #0
 8004344:	f04f 0300 	mov.w	r3, #0
 8004348:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800434c:	4659      	mov	r1, fp
 800434e:	00cb      	lsls	r3, r1, #3
 8004350:	4651      	mov	r1, sl
 8004352:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004356:	4651      	mov	r1, sl
 8004358:	00ca      	lsls	r2, r1, #3
 800435a:	4610      	mov	r0, r2
 800435c:	4619      	mov	r1, r3
 800435e:	4603      	mov	r3, r0
 8004360:	4642      	mov	r2, r8
 8004362:	189b      	adds	r3, r3, r2
 8004364:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004368:	464b      	mov	r3, r9
 800436a:	460a      	mov	r2, r1
 800436c:	eb42 0303 	adc.w	r3, r2, r3
 8004370:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	2200      	movs	r2, #0
 800437c:	67bb      	str	r3, [r7, #120]	; 0x78
 800437e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004380:	f04f 0200 	mov.w	r2, #0
 8004384:	f04f 0300 	mov.w	r3, #0
 8004388:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800438c:	4649      	mov	r1, r9
 800438e:	008b      	lsls	r3, r1, #2
 8004390:	4641      	mov	r1, r8
 8004392:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004396:	4641      	mov	r1, r8
 8004398:	008a      	lsls	r2, r1, #2
 800439a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800439e:	f7fb ff87 	bl	80002b0 <__aeabi_uldivmod>
 80043a2:	4602      	mov	r2, r0
 80043a4:	460b      	mov	r3, r1
 80043a6:	4b39      	ldr	r3, [pc, #228]	; (800448c <UART_SetConfig+0x4e4>)
 80043a8:	fba3 1302 	umull	r1, r3, r3, r2
 80043ac:	095b      	lsrs	r3, r3, #5
 80043ae:	2164      	movs	r1, #100	; 0x64
 80043b0:	fb01 f303 	mul.w	r3, r1, r3
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	011b      	lsls	r3, r3, #4
 80043b8:	3332      	adds	r3, #50	; 0x32
 80043ba:	4a34      	ldr	r2, [pc, #208]	; (800448c <UART_SetConfig+0x4e4>)
 80043bc:	fba2 2303 	umull	r2, r3, r2, r3
 80043c0:	095b      	lsrs	r3, r3, #5
 80043c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043c6:	441c      	add	r4, r3
 80043c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043cc:	2200      	movs	r2, #0
 80043ce:	673b      	str	r3, [r7, #112]	; 0x70
 80043d0:	677a      	str	r2, [r7, #116]	; 0x74
 80043d2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80043d6:	4642      	mov	r2, r8
 80043d8:	464b      	mov	r3, r9
 80043da:	1891      	adds	r1, r2, r2
 80043dc:	60b9      	str	r1, [r7, #8]
 80043de:	415b      	adcs	r3, r3
 80043e0:	60fb      	str	r3, [r7, #12]
 80043e2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80043e6:	4641      	mov	r1, r8
 80043e8:	1851      	adds	r1, r2, r1
 80043ea:	6039      	str	r1, [r7, #0]
 80043ec:	4649      	mov	r1, r9
 80043ee:	414b      	adcs	r3, r1
 80043f0:	607b      	str	r3, [r7, #4]
 80043f2:	f04f 0200 	mov.w	r2, #0
 80043f6:	f04f 0300 	mov.w	r3, #0
 80043fa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80043fe:	4659      	mov	r1, fp
 8004400:	00cb      	lsls	r3, r1, #3
 8004402:	4651      	mov	r1, sl
 8004404:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004408:	4651      	mov	r1, sl
 800440a:	00ca      	lsls	r2, r1, #3
 800440c:	4610      	mov	r0, r2
 800440e:	4619      	mov	r1, r3
 8004410:	4603      	mov	r3, r0
 8004412:	4642      	mov	r2, r8
 8004414:	189b      	adds	r3, r3, r2
 8004416:	66bb      	str	r3, [r7, #104]	; 0x68
 8004418:	464b      	mov	r3, r9
 800441a:	460a      	mov	r2, r1
 800441c:	eb42 0303 	adc.w	r3, r2, r3
 8004420:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004422:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	2200      	movs	r2, #0
 800442a:	663b      	str	r3, [r7, #96]	; 0x60
 800442c:	667a      	str	r2, [r7, #100]	; 0x64
 800442e:	f04f 0200 	mov.w	r2, #0
 8004432:	f04f 0300 	mov.w	r3, #0
 8004436:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800443a:	4649      	mov	r1, r9
 800443c:	008b      	lsls	r3, r1, #2
 800443e:	4641      	mov	r1, r8
 8004440:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004444:	4641      	mov	r1, r8
 8004446:	008a      	lsls	r2, r1, #2
 8004448:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800444c:	f7fb ff30 	bl	80002b0 <__aeabi_uldivmod>
 8004450:	4602      	mov	r2, r0
 8004452:	460b      	mov	r3, r1
 8004454:	4b0d      	ldr	r3, [pc, #52]	; (800448c <UART_SetConfig+0x4e4>)
 8004456:	fba3 1302 	umull	r1, r3, r3, r2
 800445a:	095b      	lsrs	r3, r3, #5
 800445c:	2164      	movs	r1, #100	; 0x64
 800445e:	fb01 f303 	mul.w	r3, r1, r3
 8004462:	1ad3      	subs	r3, r2, r3
 8004464:	011b      	lsls	r3, r3, #4
 8004466:	3332      	adds	r3, #50	; 0x32
 8004468:	4a08      	ldr	r2, [pc, #32]	; (800448c <UART_SetConfig+0x4e4>)
 800446a:	fba2 2303 	umull	r2, r3, r2, r3
 800446e:	095b      	lsrs	r3, r3, #5
 8004470:	f003 020f 	and.w	r2, r3, #15
 8004474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4422      	add	r2, r4
 800447c:	609a      	str	r2, [r3, #8]
}
 800447e:	bf00      	nop
 8004480:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004484:	46bd      	mov	sp, r7
 8004486:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800448a:	bf00      	nop
 800448c:	51eb851f 	.word	0x51eb851f

08004490 <__errno>:
 8004490:	4b01      	ldr	r3, [pc, #4]	; (8004498 <__errno+0x8>)
 8004492:	6818      	ldr	r0, [r3, #0]
 8004494:	4770      	bx	lr
 8004496:	bf00      	nop
 8004498:	2000000c 	.word	0x2000000c

0800449c <__libc_init_array>:
 800449c:	b570      	push	{r4, r5, r6, lr}
 800449e:	4d0d      	ldr	r5, [pc, #52]	; (80044d4 <__libc_init_array+0x38>)
 80044a0:	4c0d      	ldr	r4, [pc, #52]	; (80044d8 <__libc_init_array+0x3c>)
 80044a2:	1b64      	subs	r4, r4, r5
 80044a4:	10a4      	asrs	r4, r4, #2
 80044a6:	2600      	movs	r6, #0
 80044a8:	42a6      	cmp	r6, r4
 80044aa:	d109      	bne.n	80044c0 <__libc_init_array+0x24>
 80044ac:	4d0b      	ldr	r5, [pc, #44]	; (80044dc <__libc_init_array+0x40>)
 80044ae:	4c0c      	ldr	r4, [pc, #48]	; (80044e0 <__libc_init_array+0x44>)
 80044b0:	f001 f8fa 	bl	80056a8 <_init>
 80044b4:	1b64      	subs	r4, r4, r5
 80044b6:	10a4      	asrs	r4, r4, #2
 80044b8:	2600      	movs	r6, #0
 80044ba:	42a6      	cmp	r6, r4
 80044bc:	d105      	bne.n	80044ca <__libc_init_array+0x2e>
 80044be:	bd70      	pop	{r4, r5, r6, pc}
 80044c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80044c4:	4798      	blx	r3
 80044c6:	3601      	adds	r6, #1
 80044c8:	e7ee      	b.n	80044a8 <__libc_init_array+0xc>
 80044ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80044ce:	4798      	blx	r3
 80044d0:	3601      	adds	r6, #1
 80044d2:	e7f2      	b.n	80044ba <__libc_init_array+0x1e>
 80044d4:	0800579c 	.word	0x0800579c
 80044d8:	0800579c 	.word	0x0800579c
 80044dc:	0800579c 	.word	0x0800579c
 80044e0:	080057a0 	.word	0x080057a0

080044e4 <memset>:
 80044e4:	4402      	add	r2, r0
 80044e6:	4603      	mov	r3, r0
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d100      	bne.n	80044ee <memset+0xa>
 80044ec:	4770      	bx	lr
 80044ee:	f803 1b01 	strb.w	r1, [r3], #1
 80044f2:	e7f9      	b.n	80044e8 <memset+0x4>

080044f4 <iprintf>:
 80044f4:	b40f      	push	{r0, r1, r2, r3}
 80044f6:	4b0a      	ldr	r3, [pc, #40]	; (8004520 <iprintf+0x2c>)
 80044f8:	b513      	push	{r0, r1, r4, lr}
 80044fa:	681c      	ldr	r4, [r3, #0]
 80044fc:	b124      	cbz	r4, 8004508 <iprintf+0x14>
 80044fe:	69a3      	ldr	r3, [r4, #24]
 8004500:	b913      	cbnz	r3, 8004508 <iprintf+0x14>
 8004502:	4620      	mov	r0, r4
 8004504:	f000 fb2c 	bl	8004b60 <__sinit>
 8004508:	ab05      	add	r3, sp, #20
 800450a:	9a04      	ldr	r2, [sp, #16]
 800450c:	68a1      	ldr	r1, [r4, #8]
 800450e:	9301      	str	r3, [sp, #4]
 8004510:	4620      	mov	r0, r4
 8004512:	f000 fd3d 	bl	8004f90 <_vfiprintf_r>
 8004516:	b002      	add	sp, #8
 8004518:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800451c:	b004      	add	sp, #16
 800451e:	4770      	bx	lr
 8004520:	2000000c 	.word	0x2000000c

08004524 <_puts_r>:
 8004524:	b570      	push	{r4, r5, r6, lr}
 8004526:	460e      	mov	r6, r1
 8004528:	4605      	mov	r5, r0
 800452a:	b118      	cbz	r0, 8004534 <_puts_r+0x10>
 800452c:	6983      	ldr	r3, [r0, #24]
 800452e:	b90b      	cbnz	r3, 8004534 <_puts_r+0x10>
 8004530:	f000 fb16 	bl	8004b60 <__sinit>
 8004534:	69ab      	ldr	r3, [r5, #24]
 8004536:	68ac      	ldr	r4, [r5, #8]
 8004538:	b913      	cbnz	r3, 8004540 <_puts_r+0x1c>
 800453a:	4628      	mov	r0, r5
 800453c:	f000 fb10 	bl	8004b60 <__sinit>
 8004540:	4b2c      	ldr	r3, [pc, #176]	; (80045f4 <_puts_r+0xd0>)
 8004542:	429c      	cmp	r4, r3
 8004544:	d120      	bne.n	8004588 <_puts_r+0x64>
 8004546:	686c      	ldr	r4, [r5, #4]
 8004548:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800454a:	07db      	lsls	r3, r3, #31
 800454c:	d405      	bmi.n	800455a <_puts_r+0x36>
 800454e:	89a3      	ldrh	r3, [r4, #12]
 8004550:	0598      	lsls	r0, r3, #22
 8004552:	d402      	bmi.n	800455a <_puts_r+0x36>
 8004554:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004556:	f000 fba1 	bl	8004c9c <__retarget_lock_acquire_recursive>
 800455a:	89a3      	ldrh	r3, [r4, #12]
 800455c:	0719      	lsls	r1, r3, #28
 800455e:	d51d      	bpl.n	800459c <_puts_r+0x78>
 8004560:	6923      	ldr	r3, [r4, #16]
 8004562:	b1db      	cbz	r3, 800459c <_puts_r+0x78>
 8004564:	3e01      	subs	r6, #1
 8004566:	68a3      	ldr	r3, [r4, #8]
 8004568:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800456c:	3b01      	subs	r3, #1
 800456e:	60a3      	str	r3, [r4, #8]
 8004570:	bb39      	cbnz	r1, 80045c2 <_puts_r+0x9e>
 8004572:	2b00      	cmp	r3, #0
 8004574:	da38      	bge.n	80045e8 <_puts_r+0xc4>
 8004576:	4622      	mov	r2, r4
 8004578:	210a      	movs	r1, #10
 800457a:	4628      	mov	r0, r5
 800457c:	f000 f916 	bl	80047ac <__swbuf_r>
 8004580:	3001      	adds	r0, #1
 8004582:	d011      	beq.n	80045a8 <_puts_r+0x84>
 8004584:	250a      	movs	r5, #10
 8004586:	e011      	b.n	80045ac <_puts_r+0x88>
 8004588:	4b1b      	ldr	r3, [pc, #108]	; (80045f8 <_puts_r+0xd4>)
 800458a:	429c      	cmp	r4, r3
 800458c:	d101      	bne.n	8004592 <_puts_r+0x6e>
 800458e:	68ac      	ldr	r4, [r5, #8]
 8004590:	e7da      	b.n	8004548 <_puts_r+0x24>
 8004592:	4b1a      	ldr	r3, [pc, #104]	; (80045fc <_puts_r+0xd8>)
 8004594:	429c      	cmp	r4, r3
 8004596:	bf08      	it	eq
 8004598:	68ec      	ldreq	r4, [r5, #12]
 800459a:	e7d5      	b.n	8004548 <_puts_r+0x24>
 800459c:	4621      	mov	r1, r4
 800459e:	4628      	mov	r0, r5
 80045a0:	f000 f956 	bl	8004850 <__swsetup_r>
 80045a4:	2800      	cmp	r0, #0
 80045a6:	d0dd      	beq.n	8004564 <_puts_r+0x40>
 80045a8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80045ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80045ae:	07da      	lsls	r2, r3, #31
 80045b0:	d405      	bmi.n	80045be <_puts_r+0x9a>
 80045b2:	89a3      	ldrh	r3, [r4, #12]
 80045b4:	059b      	lsls	r3, r3, #22
 80045b6:	d402      	bmi.n	80045be <_puts_r+0x9a>
 80045b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80045ba:	f000 fb70 	bl	8004c9e <__retarget_lock_release_recursive>
 80045be:	4628      	mov	r0, r5
 80045c0:	bd70      	pop	{r4, r5, r6, pc}
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	da04      	bge.n	80045d0 <_puts_r+0xac>
 80045c6:	69a2      	ldr	r2, [r4, #24]
 80045c8:	429a      	cmp	r2, r3
 80045ca:	dc06      	bgt.n	80045da <_puts_r+0xb6>
 80045cc:	290a      	cmp	r1, #10
 80045ce:	d004      	beq.n	80045da <_puts_r+0xb6>
 80045d0:	6823      	ldr	r3, [r4, #0]
 80045d2:	1c5a      	adds	r2, r3, #1
 80045d4:	6022      	str	r2, [r4, #0]
 80045d6:	7019      	strb	r1, [r3, #0]
 80045d8:	e7c5      	b.n	8004566 <_puts_r+0x42>
 80045da:	4622      	mov	r2, r4
 80045dc:	4628      	mov	r0, r5
 80045de:	f000 f8e5 	bl	80047ac <__swbuf_r>
 80045e2:	3001      	adds	r0, #1
 80045e4:	d1bf      	bne.n	8004566 <_puts_r+0x42>
 80045e6:	e7df      	b.n	80045a8 <_puts_r+0x84>
 80045e8:	6823      	ldr	r3, [r4, #0]
 80045ea:	250a      	movs	r5, #10
 80045ec:	1c5a      	adds	r2, r3, #1
 80045ee:	6022      	str	r2, [r4, #0]
 80045f0:	701d      	strb	r5, [r3, #0]
 80045f2:	e7db      	b.n	80045ac <_puts_r+0x88>
 80045f4:	08005720 	.word	0x08005720
 80045f8:	08005740 	.word	0x08005740
 80045fc:	08005700 	.word	0x08005700

08004600 <puts>:
 8004600:	4b02      	ldr	r3, [pc, #8]	; (800460c <puts+0xc>)
 8004602:	4601      	mov	r1, r0
 8004604:	6818      	ldr	r0, [r3, #0]
 8004606:	f7ff bf8d 	b.w	8004524 <_puts_r>
 800460a:	bf00      	nop
 800460c:	2000000c 	.word	0x2000000c

08004610 <setbuf>:
 8004610:	2900      	cmp	r1, #0
 8004612:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004616:	bf0c      	ite	eq
 8004618:	2202      	moveq	r2, #2
 800461a:	2200      	movne	r2, #0
 800461c:	f000 b800 	b.w	8004620 <setvbuf>

08004620 <setvbuf>:
 8004620:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004624:	461d      	mov	r5, r3
 8004626:	4b5d      	ldr	r3, [pc, #372]	; (800479c <setvbuf+0x17c>)
 8004628:	681f      	ldr	r7, [r3, #0]
 800462a:	4604      	mov	r4, r0
 800462c:	460e      	mov	r6, r1
 800462e:	4690      	mov	r8, r2
 8004630:	b127      	cbz	r7, 800463c <setvbuf+0x1c>
 8004632:	69bb      	ldr	r3, [r7, #24]
 8004634:	b913      	cbnz	r3, 800463c <setvbuf+0x1c>
 8004636:	4638      	mov	r0, r7
 8004638:	f000 fa92 	bl	8004b60 <__sinit>
 800463c:	4b58      	ldr	r3, [pc, #352]	; (80047a0 <setvbuf+0x180>)
 800463e:	429c      	cmp	r4, r3
 8004640:	d167      	bne.n	8004712 <setvbuf+0xf2>
 8004642:	687c      	ldr	r4, [r7, #4]
 8004644:	f1b8 0f02 	cmp.w	r8, #2
 8004648:	d006      	beq.n	8004658 <setvbuf+0x38>
 800464a:	f1b8 0f01 	cmp.w	r8, #1
 800464e:	f200 809f 	bhi.w	8004790 <setvbuf+0x170>
 8004652:	2d00      	cmp	r5, #0
 8004654:	f2c0 809c 	blt.w	8004790 <setvbuf+0x170>
 8004658:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800465a:	07db      	lsls	r3, r3, #31
 800465c:	d405      	bmi.n	800466a <setvbuf+0x4a>
 800465e:	89a3      	ldrh	r3, [r4, #12]
 8004660:	0598      	lsls	r0, r3, #22
 8004662:	d402      	bmi.n	800466a <setvbuf+0x4a>
 8004664:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004666:	f000 fb19 	bl	8004c9c <__retarget_lock_acquire_recursive>
 800466a:	4621      	mov	r1, r4
 800466c:	4638      	mov	r0, r7
 800466e:	f000 f9e3 	bl	8004a38 <_fflush_r>
 8004672:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004674:	b141      	cbz	r1, 8004688 <setvbuf+0x68>
 8004676:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800467a:	4299      	cmp	r1, r3
 800467c:	d002      	beq.n	8004684 <setvbuf+0x64>
 800467e:	4638      	mov	r0, r7
 8004680:	f000 fb7c 	bl	8004d7c <_free_r>
 8004684:	2300      	movs	r3, #0
 8004686:	6363      	str	r3, [r4, #52]	; 0x34
 8004688:	2300      	movs	r3, #0
 800468a:	61a3      	str	r3, [r4, #24]
 800468c:	6063      	str	r3, [r4, #4]
 800468e:	89a3      	ldrh	r3, [r4, #12]
 8004690:	0619      	lsls	r1, r3, #24
 8004692:	d503      	bpl.n	800469c <setvbuf+0x7c>
 8004694:	6921      	ldr	r1, [r4, #16]
 8004696:	4638      	mov	r0, r7
 8004698:	f000 fb70 	bl	8004d7c <_free_r>
 800469c:	89a3      	ldrh	r3, [r4, #12]
 800469e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80046a2:	f023 0303 	bic.w	r3, r3, #3
 80046a6:	f1b8 0f02 	cmp.w	r8, #2
 80046aa:	81a3      	strh	r3, [r4, #12]
 80046ac:	d06c      	beq.n	8004788 <setvbuf+0x168>
 80046ae:	ab01      	add	r3, sp, #4
 80046b0:	466a      	mov	r2, sp
 80046b2:	4621      	mov	r1, r4
 80046b4:	4638      	mov	r0, r7
 80046b6:	f000 faf3 	bl	8004ca0 <__swhatbuf_r>
 80046ba:	89a3      	ldrh	r3, [r4, #12]
 80046bc:	4318      	orrs	r0, r3
 80046be:	81a0      	strh	r0, [r4, #12]
 80046c0:	2d00      	cmp	r5, #0
 80046c2:	d130      	bne.n	8004726 <setvbuf+0x106>
 80046c4:	9d00      	ldr	r5, [sp, #0]
 80046c6:	4628      	mov	r0, r5
 80046c8:	f000 fb50 	bl	8004d6c <malloc>
 80046cc:	4606      	mov	r6, r0
 80046ce:	2800      	cmp	r0, #0
 80046d0:	d155      	bne.n	800477e <setvbuf+0x15e>
 80046d2:	f8dd 9000 	ldr.w	r9, [sp]
 80046d6:	45a9      	cmp	r9, r5
 80046d8:	d14a      	bne.n	8004770 <setvbuf+0x150>
 80046da:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80046de:	2200      	movs	r2, #0
 80046e0:	60a2      	str	r2, [r4, #8]
 80046e2:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80046e6:	6022      	str	r2, [r4, #0]
 80046e8:	6122      	str	r2, [r4, #16]
 80046ea:	2201      	movs	r2, #1
 80046ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046f0:	6162      	str	r2, [r4, #20]
 80046f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80046f4:	f043 0302 	orr.w	r3, r3, #2
 80046f8:	07d2      	lsls	r2, r2, #31
 80046fa:	81a3      	strh	r3, [r4, #12]
 80046fc:	d405      	bmi.n	800470a <setvbuf+0xea>
 80046fe:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004702:	d102      	bne.n	800470a <setvbuf+0xea>
 8004704:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004706:	f000 faca 	bl	8004c9e <__retarget_lock_release_recursive>
 800470a:	4628      	mov	r0, r5
 800470c:	b003      	add	sp, #12
 800470e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004712:	4b24      	ldr	r3, [pc, #144]	; (80047a4 <setvbuf+0x184>)
 8004714:	429c      	cmp	r4, r3
 8004716:	d101      	bne.n	800471c <setvbuf+0xfc>
 8004718:	68bc      	ldr	r4, [r7, #8]
 800471a:	e793      	b.n	8004644 <setvbuf+0x24>
 800471c:	4b22      	ldr	r3, [pc, #136]	; (80047a8 <setvbuf+0x188>)
 800471e:	429c      	cmp	r4, r3
 8004720:	bf08      	it	eq
 8004722:	68fc      	ldreq	r4, [r7, #12]
 8004724:	e78e      	b.n	8004644 <setvbuf+0x24>
 8004726:	2e00      	cmp	r6, #0
 8004728:	d0cd      	beq.n	80046c6 <setvbuf+0xa6>
 800472a:	69bb      	ldr	r3, [r7, #24]
 800472c:	b913      	cbnz	r3, 8004734 <setvbuf+0x114>
 800472e:	4638      	mov	r0, r7
 8004730:	f000 fa16 	bl	8004b60 <__sinit>
 8004734:	f1b8 0f01 	cmp.w	r8, #1
 8004738:	bf08      	it	eq
 800473a:	89a3      	ldrheq	r3, [r4, #12]
 800473c:	6026      	str	r6, [r4, #0]
 800473e:	bf04      	itt	eq
 8004740:	f043 0301 	orreq.w	r3, r3, #1
 8004744:	81a3      	strheq	r3, [r4, #12]
 8004746:	89a2      	ldrh	r2, [r4, #12]
 8004748:	f012 0308 	ands.w	r3, r2, #8
 800474c:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8004750:	d01c      	beq.n	800478c <setvbuf+0x16c>
 8004752:	07d3      	lsls	r3, r2, #31
 8004754:	bf41      	itttt	mi
 8004756:	2300      	movmi	r3, #0
 8004758:	426d      	negmi	r5, r5
 800475a:	60a3      	strmi	r3, [r4, #8]
 800475c:	61a5      	strmi	r5, [r4, #24]
 800475e:	bf58      	it	pl
 8004760:	60a5      	strpl	r5, [r4, #8]
 8004762:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8004764:	f015 0501 	ands.w	r5, r5, #1
 8004768:	d115      	bne.n	8004796 <setvbuf+0x176>
 800476a:	f412 7f00 	tst.w	r2, #512	; 0x200
 800476e:	e7c8      	b.n	8004702 <setvbuf+0xe2>
 8004770:	4648      	mov	r0, r9
 8004772:	f000 fafb 	bl	8004d6c <malloc>
 8004776:	4606      	mov	r6, r0
 8004778:	2800      	cmp	r0, #0
 800477a:	d0ae      	beq.n	80046da <setvbuf+0xba>
 800477c:	464d      	mov	r5, r9
 800477e:	89a3      	ldrh	r3, [r4, #12]
 8004780:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004784:	81a3      	strh	r3, [r4, #12]
 8004786:	e7d0      	b.n	800472a <setvbuf+0x10a>
 8004788:	2500      	movs	r5, #0
 800478a:	e7a8      	b.n	80046de <setvbuf+0xbe>
 800478c:	60a3      	str	r3, [r4, #8]
 800478e:	e7e8      	b.n	8004762 <setvbuf+0x142>
 8004790:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004794:	e7b9      	b.n	800470a <setvbuf+0xea>
 8004796:	2500      	movs	r5, #0
 8004798:	e7b7      	b.n	800470a <setvbuf+0xea>
 800479a:	bf00      	nop
 800479c:	2000000c 	.word	0x2000000c
 80047a0:	08005720 	.word	0x08005720
 80047a4:	08005740 	.word	0x08005740
 80047a8:	08005700 	.word	0x08005700

080047ac <__swbuf_r>:
 80047ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047ae:	460e      	mov	r6, r1
 80047b0:	4614      	mov	r4, r2
 80047b2:	4605      	mov	r5, r0
 80047b4:	b118      	cbz	r0, 80047be <__swbuf_r+0x12>
 80047b6:	6983      	ldr	r3, [r0, #24]
 80047b8:	b90b      	cbnz	r3, 80047be <__swbuf_r+0x12>
 80047ba:	f000 f9d1 	bl	8004b60 <__sinit>
 80047be:	4b21      	ldr	r3, [pc, #132]	; (8004844 <__swbuf_r+0x98>)
 80047c0:	429c      	cmp	r4, r3
 80047c2:	d12b      	bne.n	800481c <__swbuf_r+0x70>
 80047c4:	686c      	ldr	r4, [r5, #4]
 80047c6:	69a3      	ldr	r3, [r4, #24]
 80047c8:	60a3      	str	r3, [r4, #8]
 80047ca:	89a3      	ldrh	r3, [r4, #12]
 80047cc:	071a      	lsls	r2, r3, #28
 80047ce:	d52f      	bpl.n	8004830 <__swbuf_r+0x84>
 80047d0:	6923      	ldr	r3, [r4, #16]
 80047d2:	b36b      	cbz	r3, 8004830 <__swbuf_r+0x84>
 80047d4:	6923      	ldr	r3, [r4, #16]
 80047d6:	6820      	ldr	r0, [r4, #0]
 80047d8:	1ac0      	subs	r0, r0, r3
 80047da:	6963      	ldr	r3, [r4, #20]
 80047dc:	b2f6      	uxtb	r6, r6
 80047de:	4283      	cmp	r3, r0
 80047e0:	4637      	mov	r7, r6
 80047e2:	dc04      	bgt.n	80047ee <__swbuf_r+0x42>
 80047e4:	4621      	mov	r1, r4
 80047e6:	4628      	mov	r0, r5
 80047e8:	f000 f926 	bl	8004a38 <_fflush_r>
 80047ec:	bb30      	cbnz	r0, 800483c <__swbuf_r+0x90>
 80047ee:	68a3      	ldr	r3, [r4, #8]
 80047f0:	3b01      	subs	r3, #1
 80047f2:	60a3      	str	r3, [r4, #8]
 80047f4:	6823      	ldr	r3, [r4, #0]
 80047f6:	1c5a      	adds	r2, r3, #1
 80047f8:	6022      	str	r2, [r4, #0]
 80047fa:	701e      	strb	r6, [r3, #0]
 80047fc:	6963      	ldr	r3, [r4, #20]
 80047fe:	3001      	adds	r0, #1
 8004800:	4283      	cmp	r3, r0
 8004802:	d004      	beq.n	800480e <__swbuf_r+0x62>
 8004804:	89a3      	ldrh	r3, [r4, #12]
 8004806:	07db      	lsls	r3, r3, #31
 8004808:	d506      	bpl.n	8004818 <__swbuf_r+0x6c>
 800480a:	2e0a      	cmp	r6, #10
 800480c:	d104      	bne.n	8004818 <__swbuf_r+0x6c>
 800480e:	4621      	mov	r1, r4
 8004810:	4628      	mov	r0, r5
 8004812:	f000 f911 	bl	8004a38 <_fflush_r>
 8004816:	b988      	cbnz	r0, 800483c <__swbuf_r+0x90>
 8004818:	4638      	mov	r0, r7
 800481a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800481c:	4b0a      	ldr	r3, [pc, #40]	; (8004848 <__swbuf_r+0x9c>)
 800481e:	429c      	cmp	r4, r3
 8004820:	d101      	bne.n	8004826 <__swbuf_r+0x7a>
 8004822:	68ac      	ldr	r4, [r5, #8]
 8004824:	e7cf      	b.n	80047c6 <__swbuf_r+0x1a>
 8004826:	4b09      	ldr	r3, [pc, #36]	; (800484c <__swbuf_r+0xa0>)
 8004828:	429c      	cmp	r4, r3
 800482a:	bf08      	it	eq
 800482c:	68ec      	ldreq	r4, [r5, #12]
 800482e:	e7ca      	b.n	80047c6 <__swbuf_r+0x1a>
 8004830:	4621      	mov	r1, r4
 8004832:	4628      	mov	r0, r5
 8004834:	f000 f80c 	bl	8004850 <__swsetup_r>
 8004838:	2800      	cmp	r0, #0
 800483a:	d0cb      	beq.n	80047d4 <__swbuf_r+0x28>
 800483c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004840:	e7ea      	b.n	8004818 <__swbuf_r+0x6c>
 8004842:	bf00      	nop
 8004844:	08005720 	.word	0x08005720
 8004848:	08005740 	.word	0x08005740
 800484c:	08005700 	.word	0x08005700

08004850 <__swsetup_r>:
 8004850:	4b32      	ldr	r3, [pc, #200]	; (800491c <__swsetup_r+0xcc>)
 8004852:	b570      	push	{r4, r5, r6, lr}
 8004854:	681d      	ldr	r5, [r3, #0]
 8004856:	4606      	mov	r6, r0
 8004858:	460c      	mov	r4, r1
 800485a:	b125      	cbz	r5, 8004866 <__swsetup_r+0x16>
 800485c:	69ab      	ldr	r3, [r5, #24]
 800485e:	b913      	cbnz	r3, 8004866 <__swsetup_r+0x16>
 8004860:	4628      	mov	r0, r5
 8004862:	f000 f97d 	bl	8004b60 <__sinit>
 8004866:	4b2e      	ldr	r3, [pc, #184]	; (8004920 <__swsetup_r+0xd0>)
 8004868:	429c      	cmp	r4, r3
 800486a:	d10f      	bne.n	800488c <__swsetup_r+0x3c>
 800486c:	686c      	ldr	r4, [r5, #4]
 800486e:	89a3      	ldrh	r3, [r4, #12]
 8004870:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004874:	0719      	lsls	r1, r3, #28
 8004876:	d42c      	bmi.n	80048d2 <__swsetup_r+0x82>
 8004878:	06dd      	lsls	r5, r3, #27
 800487a:	d411      	bmi.n	80048a0 <__swsetup_r+0x50>
 800487c:	2309      	movs	r3, #9
 800487e:	6033      	str	r3, [r6, #0]
 8004880:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004884:	81a3      	strh	r3, [r4, #12]
 8004886:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800488a:	e03e      	b.n	800490a <__swsetup_r+0xba>
 800488c:	4b25      	ldr	r3, [pc, #148]	; (8004924 <__swsetup_r+0xd4>)
 800488e:	429c      	cmp	r4, r3
 8004890:	d101      	bne.n	8004896 <__swsetup_r+0x46>
 8004892:	68ac      	ldr	r4, [r5, #8]
 8004894:	e7eb      	b.n	800486e <__swsetup_r+0x1e>
 8004896:	4b24      	ldr	r3, [pc, #144]	; (8004928 <__swsetup_r+0xd8>)
 8004898:	429c      	cmp	r4, r3
 800489a:	bf08      	it	eq
 800489c:	68ec      	ldreq	r4, [r5, #12]
 800489e:	e7e6      	b.n	800486e <__swsetup_r+0x1e>
 80048a0:	0758      	lsls	r0, r3, #29
 80048a2:	d512      	bpl.n	80048ca <__swsetup_r+0x7a>
 80048a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80048a6:	b141      	cbz	r1, 80048ba <__swsetup_r+0x6a>
 80048a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80048ac:	4299      	cmp	r1, r3
 80048ae:	d002      	beq.n	80048b6 <__swsetup_r+0x66>
 80048b0:	4630      	mov	r0, r6
 80048b2:	f000 fa63 	bl	8004d7c <_free_r>
 80048b6:	2300      	movs	r3, #0
 80048b8:	6363      	str	r3, [r4, #52]	; 0x34
 80048ba:	89a3      	ldrh	r3, [r4, #12]
 80048bc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80048c0:	81a3      	strh	r3, [r4, #12]
 80048c2:	2300      	movs	r3, #0
 80048c4:	6063      	str	r3, [r4, #4]
 80048c6:	6923      	ldr	r3, [r4, #16]
 80048c8:	6023      	str	r3, [r4, #0]
 80048ca:	89a3      	ldrh	r3, [r4, #12]
 80048cc:	f043 0308 	orr.w	r3, r3, #8
 80048d0:	81a3      	strh	r3, [r4, #12]
 80048d2:	6923      	ldr	r3, [r4, #16]
 80048d4:	b94b      	cbnz	r3, 80048ea <__swsetup_r+0x9a>
 80048d6:	89a3      	ldrh	r3, [r4, #12]
 80048d8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80048dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048e0:	d003      	beq.n	80048ea <__swsetup_r+0x9a>
 80048e2:	4621      	mov	r1, r4
 80048e4:	4630      	mov	r0, r6
 80048e6:	f000 fa01 	bl	8004cec <__smakebuf_r>
 80048ea:	89a0      	ldrh	r0, [r4, #12]
 80048ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80048f0:	f010 0301 	ands.w	r3, r0, #1
 80048f4:	d00a      	beq.n	800490c <__swsetup_r+0xbc>
 80048f6:	2300      	movs	r3, #0
 80048f8:	60a3      	str	r3, [r4, #8]
 80048fa:	6963      	ldr	r3, [r4, #20]
 80048fc:	425b      	negs	r3, r3
 80048fe:	61a3      	str	r3, [r4, #24]
 8004900:	6923      	ldr	r3, [r4, #16]
 8004902:	b943      	cbnz	r3, 8004916 <__swsetup_r+0xc6>
 8004904:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004908:	d1ba      	bne.n	8004880 <__swsetup_r+0x30>
 800490a:	bd70      	pop	{r4, r5, r6, pc}
 800490c:	0781      	lsls	r1, r0, #30
 800490e:	bf58      	it	pl
 8004910:	6963      	ldrpl	r3, [r4, #20]
 8004912:	60a3      	str	r3, [r4, #8]
 8004914:	e7f4      	b.n	8004900 <__swsetup_r+0xb0>
 8004916:	2000      	movs	r0, #0
 8004918:	e7f7      	b.n	800490a <__swsetup_r+0xba>
 800491a:	bf00      	nop
 800491c:	2000000c 	.word	0x2000000c
 8004920:	08005720 	.word	0x08005720
 8004924:	08005740 	.word	0x08005740
 8004928:	08005700 	.word	0x08005700

0800492c <__sflush_r>:
 800492c:	898a      	ldrh	r2, [r1, #12]
 800492e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004932:	4605      	mov	r5, r0
 8004934:	0710      	lsls	r0, r2, #28
 8004936:	460c      	mov	r4, r1
 8004938:	d458      	bmi.n	80049ec <__sflush_r+0xc0>
 800493a:	684b      	ldr	r3, [r1, #4]
 800493c:	2b00      	cmp	r3, #0
 800493e:	dc05      	bgt.n	800494c <__sflush_r+0x20>
 8004940:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004942:	2b00      	cmp	r3, #0
 8004944:	dc02      	bgt.n	800494c <__sflush_r+0x20>
 8004946:	2000      	movs	r0, #0
 8004948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800494c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800494e:	2e00      	cmp	r6, #0
 8004950:	d0f9      	beq.n	8004946 <__sflush_r+0x1a>
 8004952:	2300      	movs	r3, #0
 8004954:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004958:	682f      	ldr	r7, [r5, #0]
 800495a:	602b      	str	r3, [r5, #0]
 800495c:	d032      	beq.n	80049c4 <__sflush_r+0x98>
 800495e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004960:	89a3      	ldrh	r3, [r4, #12]
 8004962:	075a      	lsls	r2, r3, #29
 8004964:	d505      	bpl.n	8004972 <__sflush_r+0x46>
 8004966:	6863      	ldr	r3, [r4, #4]
 8004968:	1ac0      	subs	r0, r0, r3
 800496a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800496c:	b10b      	cbz	r3, 8004972 <__sflush_r+0x46>
 800496e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004970:	1ac0      	subs	r0, r0, r3
 8004972:	2300      	movs	r3, #0
 8004974:	4602      	mov	r2, r0
 8004976:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004978:	6a21      	ldr	r1, [r4, #32]
 800497a:	4628      	mov	r0, r5
 800497c:	47b0      	blx	r6
 800497e:	1c43      	adds	r3, r0, #1
 8004980:	89a3      	ldrh	r3, [r4, #12]
 8004982:	d106      	bne.n	8004992 <__sflush_r+0x66>
 8004984:	6829      	ldr	r1, [r5, #0]
 8004986:	291d      	cmp	r1, #29
 8004988:	d82c      	bhi.n	80049e4 <__sflush_r+0xb8>
 800498a:	4a2a      	ldr	r2, [pc, #168]	; (8004a34 <__sflush_r+0x108>)
 800498c:	40ca      	lsrs	r2, r1
 800498e:	07d6      	lsls	r6, r2, #31
 8004990:	d528      	bpl.n	80049e4 <__sflush_r+0xb8>
 8004992:	2200      	movs	r2, #0
 8004994:	6062      	str	r2, [r4, #4]
 8004996:	04d9      	lsls	r1, r3, #19
 8004998:	6922      	ldr	r2, [r4, #16]
 800499a:	6022      	str	r2, [r4, #0]
 800499c:	d504      	bpl.n	80049a8 <__sflush_r+0x7c>
 800499e:	1c42      	adds	r2, r0, #1
 80049a0:	d101      	bne.n	80049a6 <__sflush_r+0x7a>
 80049a2:	682b      	ldr	r3, [r5, #0]
 80049a4:	b903      	cbnz	r3, 80049a8 <__sflush_r+0x7c>
 80049a6:	6560      	str	r0, [r4, #84]	; 0x54
 80049a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80049aa:	602f      	str	r7, [r5, #0]
 80049ac:	2900      	cmp	r1, #0
 80049ae:	d0ca      	beq.n	8004946 <__sflush_r+0x1a>
 80049b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80049b4:	4299      	cmp	r1, r3
 80049b6:	d002      	beq.n	80049be <__sflush_r+0x92>
 80049b8:	4628      	mov	r0, r5
 80049ba:	f000 f9df 	bl	8004d7c <_free_r>
 80049be:	2000      	movs	r0, #0
 80049c0:	6360      	str	r0, [r4, #52]	; 0x34
 80049c2:	e7c1      	b.n	8004948 <__sflush_r+0x1c>
 80049c4:	6a21      	ldr	r1, [r4, #32]
 80049c6:	2301      	movs	r3, #1
 80049c8:	4628      	mov	r0, r5
 80049ca:	47b0      	blx	r6
 80049cc:	1c41      	adds	r1, r0, #1
 80049ce:	d1c7      	bne.n	8004960 <__sflush_r+0x34>
 80049d0:	682b      	ldr	r3, [r5, #0]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d0c4      	beq.n	8004960 <__sflush_r+0x34>
 80049d6:	2b1d      	cmp	r3, #29
 80049d8:	d001      	beq.n	80049de <__sflush_r+0xb2>
 80049da:	2b16      	cmp	r3, #22
 80049dc:	d101      	bne.n	80049e2 <__sflush_r+0xb6>
 80049de:	602f      	str	r7, [r5, #0]
 80049e0:	e7b1      	b.n	8004946 <__sflush_r+0x1a>
 80049e2:	89a3      	ldrh	r3, [r4, #12]
 80049e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049e8:	81a3      	strh	r3, [r4, #12]
 80049ea:	e7ad      	b.n	8004948 <__sflush_r+0x1c>
 80049ec:	690f      	ldr	r7, [r1, #16]
 80049ee:	2f00      	cmp	r7, #0
 80049f0:	d0a9      	beq.n	8004946 <__sflush_r+0x1a>
 80049f2:	0793      	lsls	r3, r2, #30
 80049f4:	680e      	ldr	r6, [r1, #0]
 80049f6:	bf08      	it	eq
 80049f8:	694b      	ldreq	r3, [r1, #20]
 80049fa:	600f      	str	r7, [r1, #0]
 80049fc:	bf18      	it	ne
 80049fe:	2300      	movne	r3, #0
 8004a00:	eba6 0807 	sub.w	r8, r6, r7
 8004a04:	608b      	str	r3, [r1, #8]
 8004a06:	f1b8 0f00 	cmp.w	r8, #0
 8004a0a:	dd9c      	ble.n	8004946 <__sflush_r+0x1a>
 8004a0c:	6a21      	ldr	r1, [r4, #32]
 8004a0e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004a10:	4643      	mov	r3, r8
 8004a12:	463a      	mov	r2, r7
 8004a14:	4628      	mov	r0, r5
 8004a16:	47b0      	blx	r6
 8004a18:	2800      	cmp	r0, #0
 8004a1a:	dc06      	bgt.n	8004a2a <__sflush_r+0xfe>
 8004a1c:	89a3      	ldrh	r3, [r4, #12]
 8004a1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a22:	81a3      	strh	r3, [r4, #12]
 8004a24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a28:	e78e      	b.n	8004948 <__sflush_r+0x1c>
 8004a2a:	4407      	add	r7, r0
 8004a2c:	eba8 0800 	sub.w	r8, r8, r0
 8004a30:	e7e9      	b.n	8004a06 <__sflush_r+0xda>
 8004a32:	bf00      	nop
 8004a34:	20400001 	.word	0x20400001

08004a38 <_fflush_r>:
 8004a38:	b538      	push	{r3, r4, r5, lr}
 8004a3a:	690b      	ldr	r3, [r1, #16]
 8004a3c:	4605      	mov	r5, r0
 8004a3e:	460c      	mov	r4, r1
 8004a40:	b913      	cbnz	r3, 8004a48 <_fflush_r+0x10>
 8004a42:	2500      	movs	r5, #0
 8004a44:	4628      	mov	r0, r5
 8004a46:	bd38      	pop	{r3, r4, r5, pc}
 8004a48:	b118      	cbz	r0, 8004a52 <_fflush_r+0x1a>
 8004a4a:	6983      	ldr	r3, [r0, #24]
 8004a4c:	b90b      	cbnz	r3, 8004a52 <_fflush_r+0x1a>
 8004a4e:	f000 f887 	bl	8004b60 <__sinit>
 8004a52:	4b14      	ldr	r3, [pc, #80]	; (8004aa4 <_fflush_r+0x6c>)
 8004a54:	429c      	cmp	r4, r3
 8004a56:	d11b      	bne.n	8004a90 <_fflush_r+0x58>
 8004a58:	686c      	ldr	r4, [r5, #4]
 8004a5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d0ef      	beq.n	8004a42 <_fflush_r+0xa>
 8004a62:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004a64:	07d0      	lsls	r0, r2, #31
 8004a66:	d404      	bmi.n	8004a72 <_fflush_r+0x3a>
 8004a68:	0599      	lsls	r1, r3, #22
 8004a6a:	d402      	bmi.n	8004a72 <_fflush_r+0x3a>
 8004a6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a6e:	f000 f915 	bl	8004c9c <__retarget_lock_acquire_recursive>
 8004a72:	4628      	mov	r0, r5
 8004a74:	4621      	mov	r1, r4
 8004a76:	f7ff ff59 	bl	800492c <__sflush_r>
 8004a7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004a7c:	07da      	lsls	r2, r3, #31
 8004a7e:	4605      	mov	r5, r0
 8004a80:	d4e0      	bmi.n	8004a44 <_fflush_r+0xc>
 8004a82:	89a3      	ldrh	r3, [r4, #12]
 8004a84:	059b      	lsls	r3, r3, #22
 8004a86:	d4dd      	bmi.n	8004a44 <_fflush_r+0xc>
 8004a88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a8a:	f000 f908 	bl	8004c9e <__retarget_lock_release_recursive>
 8004a8e:	e7d9      	b.n	8004a44 <_fflush_r+0xc>
 8004a90:	4b05      	ldr	r3, [pc, #20]	; (8004aa8 <_fflush_r+0x70>)
 8004a92:	429c      	cmp	r4, r3
 8004a94:	d101      	bne.n	8004a9a <_fflush_r+0x62>
 8004a96:	68ac      	ldr	r4, [r5, #8]
 8004a98:	e7df      	b.n	8004a5a <_fflush_r+0x22>
 8004a9a:	4b04      	ldr	r3, [pc, #16]	; (8004aac <_fflush_r+0x74>)
 8004a9c:	429c      	cmp	r4, r3
 8004a9e:	bf08      	it	eq
 8004aa0:	68ec      	ldreq	r4, [r5, #12]
 8004aa2:	e7da      	b.n	8004a5a <_fflush_r+0x22>
 8004aa4:	08005720 	.word	0x08005720
 8004aa8:	08005740 	.word	0x08005740
 8004aac:	08005700 	.word	0x08005700

08004ab0 <std>:
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	b510      	push	{r4, lr}
 8004ab4:	4604      	mov	r4, r0
 8004ab6:	e9c0 3300 	strd	r3, r3, [r0]
 8004aba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004abe:	6083      	str	r3, [r0, #8]
 8004ac0:	8181      	strh	r1, [r0, #12]
 8004ac2:	6643      	str	r3, [r0, #100]	; 0x64
 8004ac4:	81c2      	strh	r2, [r0, #14]
 8004ac6:	6183      	str	r3, [r0, #24]
 8004ac8:	4619      	mov	r1, r3
 8004aca:	2208      	movs	r2, #8
 8004acc:	305c      	adds	r0, #92	; 0x5c
 8004ace:	f7ff fd09 	bl	80044e4 <memset>
 8004ad2:	4b05      	ldr	r3, [pc, #20]	; (8004ae8 <std+0x38>)
 8004ad4:	6263      	str	r3, [r4, #36]	; 0x24
 8004ad6:	4b05      	ldr	r3, [pc, #20]	; (8004aec <std+0x3c>)
 8004ad8:	62a3      	str	r3, [r4, #40]	; 0x28
 8004ada:	4b05      	ldr	r3, [pc, #20]	; (8004af0 <std+0x40>)
 8004adc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004ade:	4b05      	ldr	r3, [pc, #20]	; (8004af4 <std+0x44>)
 8004ae0:	6224      	str	r4, [r4, #32]
 8004ae2:	6323      	str	r3, [r4, #48]	; 0x30
 8004ae4:	bd10      	pop	{r4, pc}
 8004ae6:	bf00      	nop
 8004ae8:	08005539 	.word	0x08005539
 8004aec:	0800555b 	.word	0x0800555b
 8004af0:	08005593 	.word	0x08005593
 8004af4:	080055b7 	.word	0x080055b7

08004af8 <_cleanup_r>:
 8004af8:	4901      	ldr	r1, [pc, #4]	; (8004b00 <_cleanup_r+0x8>)
 8004afa:	f000 b8af 	b.w	8004c5c <_fwalk_reent>
 8004afe:	bf00      	nop
 8004b00:	08004a39 	.word	0x08004a39

08004b04 <__sfmoreglue>:
 8004b04:	b570      	push	{r4, r5, r6, lr}
 8004b06:	2268      	movs	r2, #104	; 0x68
 8004b08:	1e4d      	subs	r5, r1, #1
 8004b0a:	4355      	muls	r5, r2
 8004b0c:	460e      	mov	r6, r1
 8004b0e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004b12:	f000 f99f 	bl	8004e54 <_malloc_r>
 8004b16:	4604      	mov	r4, r0
 8004b18:	b140      	cbz	r0, 8004b2c <__sfmoreglue+0x28>
 8004b1a:	2100      	movs	r1, #0
 8004b1c:	e9c0 1600 	strd	r1, r6, [r0]
 8004b20:	300c      	adds	r0, #12
 8004b22:	60a0      	str	r0, [r4, #8]
 8004b24:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004b28:	f7ff fcdc 	bl	80044e4 <memset>
 8004b2c:	4620      	mov	r0, r4
 8004b2e:	bd70      	pop	{r4, r5, r6, pc}

08004b30 <__sfp_lock_acquire>:
 8004b30:	4801      	ldr	r0, [pc, #4]	; (8004b38 <__sfp_lock_acquire+0x8>)
 8004b32:	f000 b8b3 	b.w	8004c9c <__retarget_lock_acquire_recursive>
 8004b36:	bf00      	nop
 8004b38:	200001b9 	.word	0x200001b9

08004b3c <__sfp_lock_release>:
 8004b3c:	4801      	ldr	r0, [pc, #4]	; (8004b44 <__sfp_lock_release+0x8>)
 8004b3e:	f000 b8ae 	b.w	8004c9e <__retarget_lock_release_recursive>
 8004b42:	bf00      	nop
 8004b44:	200001b9 	.word	0x200001b9

08004b48 <__sinit_lock_acquire>:
 8004b48:	4801      	ldr	r0, [pc, #4]	; (8004b50 <__sinit_lock_acquire+0x8>)
 8004b4a:	f000 b8a7 	b.w	8004c9c <__retarget_lock_acquire_recursive>
 8004b4e:	bf00      	nop
 8004b50:	200001ba 	.word	0x200001ba

08004b54 <__sinit_lock_release>:
 8004b54:	4801      	ldr	r0, [pc, #4]	; (8004b5c <__sinit_lock_release+0x8>)
 8004b56:	f000 b8a2 	b.w	8004c9e <__retarget_lock_release_recursive>
 8004b5a:	bf00      	nop
 8004b5c:	200001ba 	.word	0x200001ba

08004b60 <__sinit>:
 8004b60:	b510      	push	{r4, lr}
 8004b62:	4604      	mov	r4, r0
 8004b64:	f7ff fff0 	bl	8004b48 <__sinit_lock_acquire>
 8004b68:	69a3      	ldr	r3, [r4, #24]
 8004b6a:	b11b      	cbz	r3, 8004b74 <__sinit+0x14>
 8004b6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b70:	f7ff bff0 	b.w	8004b54 <__sinit_lock_release>
 8004b74:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004b78:	6523      	str	r3, [r4, #80]	; 0x50
 8004b7a:	4b13      	ldr	r3, [pc, #76]	; (8004bc8 <__sinit+0x68>)
 8004b7c:	4a13      	ldr	r2, [pc, #76]	; (8004bcc <__sinit+0x6c>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	62a2      	str	r2, [r4, #40]	; 0x28
 8004b82:	42a3      	cmp	r3, r4
 8004b84:	bf04      	itt	eq
 8004b86:	2301      	moveq	r3, #1
 8004b88:	61a3      	streq	r3, [r4, #24]
 8004b8a:	4620      	mov	r0, r4
 8004b8c:	f000 f820 	bl	8004bd0 <__sfp>
 8004b90:	6060      	str	r0, [r4, #4]
 8004b92:	4620      	mov	r0, r4
 8004b94:	f000 f81c 	bl	8004bd0 <__sfp>
 8004b98:	60a0      	str	r0, [r4, #8]
 8004b9a:	4620      	mov	r0, r4
 8004b9c:	f000 f818 	bl	8004bd0 <__sfp>
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	60e0      	str	r0, [r4, #12]
 8004ba4:	2104      	movs	r1, #4
 8004ba6:	6860      	ldr	r0, [r4, #4]
 8004ba8:	f7ff ff82 	bl	8004ab0 <std>
 8004bac:	68a0      	ldr	r0, [r4, #8]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	2109      	movs	r1, #9
 8004bb2:	f7ff ff7d 	bl	8004ab0 <std>
 8004bb6:	68e0      	ldr	r0, [r4, #12]
 8004bb8:	2202      	movs	r2, #2
 8004bba:	2112      	movs	r1, #18
 8004bbc:	f7ff ff78 	bl	8004ab0 <std>
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	61a3      	str	r3, [r4, #24]
 8004bc4:	e7d2      	b.n	8004b6c <__sinit+0xc>
 8004bc6:	bf00      	nop
 8004bc8:	080056fc 	.word	0x080056fc
 8004bcc:	08004af9 	.word	0x08004af9

08004bd0 <__sfp>:
 8004bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bd2:	4607      	mov	r7, r0
 8004bd4:	f7ff ffac 	bl	8004b30 <__sfp_lock_acquire>
 8004bd8:	4b1e      	ldr	r3, [pc, #120]	; (8004c54 <__sfp+0x84>)
 8004bda:	681e      	ldr	r6, [r3, #0]
 8004bdc:	69b3      	ldr	r3, [r6, #24]
 8004bde:	b913      	cbnz	r3, 8004be6 <__sfp+0x16>
 8004be0:	4630      	mov	r0, r6
 8004be2:	f7ff ffbd 	bl	8004b60 <__sinit>
 8004be6:	3648      	adds	r6, #72	; 0x48
 8004be8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004bec:	3b01      	subs	r3, #1
 8004bee:	d503      	bpl.n	8004bf8 <__sfp+0x28>
 8004bf0:	6833      	ldr	r3, [r6, #0]
 8004bf2:	b30b      	cbz	r3, 8004c38 <__sfp+0x68>
 8004bf4:	6836      	ldr	r6, [r6, #0]
 8004bf6:	e7f7      	b.n	8004be8 <__sfp+0x18>
 8004bf8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004bfc:	b9d5      	cbnz	r5, 8004c34 <__sfp+0x64>
 8004bfe:	4b16      	ldr	r3, [pc, #88]	; (8004c58 <__sfp+0x88>)
 8004c00:	60e3      	str	r3, [r4, #12]
 8004c02:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004c06:	6665      	str	r5, [r4, #100]	; 0x64
 8004c08:	f000 f847 	bl	8004c9a <__retarget_lock_init_recursive>
 8004c0c:	f7ff ff96 	bl	8004b3c <__sfp_lock_release>
 8004c10:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004c14:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004c18:	6025      	str	r5, [r4, #0]
 8004c1a:	61a5      	str	r5, [r4, #24]
 8004c1c:	2208      	movs	r2, #8
 8004c1e:	4629      	mov	r1, r5
 8004c20:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004c24:	f7ff fc5e 	bl	80044e4 <memset>
 8004c28:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004c2c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004c30:	4620      	mov	r0, r4
 8004c32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c34:	3468      	adds	r4, #104	; 0x68
 8004c36:	e7d9      	b.n	8004bec <__sfp+0x1c>
 8004c38:	2104      	movs	r1, #4
 8004c3a:	4638      	mov	r0, r7
 8004c3c:	f7ff ff62 	bl	8004b04 <__sfmoreglue>
 8004c40:	4604      	mov	r4, r0
 8004c42:	6030      	str	r0, [r6, #0]
 8004c44:	2800      	cmp	r0, #0
 8004c46:	d1d5      	bne.n	8004bf4 <__sfp+0x24>
 8004c48:	f7ff ff78 	bl	8004b3c <__sfp_lock_release>
 8004c4c:	230c      	movs	r3, #12
 8004c4e:	603b      	str	r3, [r7, #0]
 8004c50:	e7ee      	b.n	8004c30 <__sfp+0x60>
 8004c52:	bf00      	nop
 8004c54:	080056fc 	.word	0x080056fc
 8004c58:	ffff0001 	.word	0xffff0001

08004c5c <_fwalk_reent>:
 8004c5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c60:	4606      	mov	r6, r0
 8004c62:	4688      	mov	r8, r1
 8004c64:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004c68:	2700      	movs	r7, #0
 8004c6a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004c6e:	f1b9 0901 	subs.w	r9, r9, #1
 8004c72:	d505      	bpl.n	8004c80 <_fwalk_reent+0x24>
 8004c74:	6824      	ldr	r4, [r4, #0]
 8004c76:	2c00      	cmp	r4, #0
 8004c78:	d1f7      	bne.n	8004c6a <_fwalk_reent+0xe>
 8004c7a:	4638      	mov	r0, r7
 8004c7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c80:	89ab      	ldrh	r3, [r5, #12]
 8004c82:	2b01      	cmp	r3, #1
 8004c84:	d907      	bls.n	8004c96 <_fwalk_reent+0x3a>
 8004c86:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004c8a:	3301      	adds	r3, #1
 8004c8c:	d003      	beq.n	8004c96 <_fwalk_reent+0x3a>
 8004c8e:	4629      	mov	r1, r5
 8004c90:	4630      	mov	r0, r6
 8004c92:	47c0      	blx	r8
 8004c94:	4307      	orrs	r7, r0
 8004c96:	3568      	adds	r5, #104	; 0x68
 8004c98:	e7e9      	b.n	8004c6e <_fwalk_reent+0x12>

08004c9a <__retarget_lock_init_recursive>:
 8004c9a:	4770      	bx	lr

08004c9c <__retarget_lock_acquire_recursive>:
 8004c9c:	4770      	bx	lr

08004c9e <__retarget_lock_release_recursive>:
 8004c9e:	4770      	bx	lr

08004ca0 <__swhatbuf_r>:
 8004ca0:	b570      	push	{r4, r5, r6, lr}
 8004ca2:	460e      	mov	r6, r1
 8004ca4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ca8:	2900      	cmp	r1, #0
 8004caa:	b096      	sub	sp, #88	; 0x58
 8004cac:	4614      	mov	r4, r2
 8004cae:	461d      	mov	r5, r3
 8004cb0:	da08      	bge.n	8004cc4 <__swhatbuf_r+0x24>
 8004cb2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	602a      	str	r2, [r5, #0]
 8004cba:	061a      	lsls	r2, r3, #24
 8004cbc:	d410      	bmi.n	8004ce0 <__swhatbuf_r+0x40>
 8004cbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004cc2:	e00e      	b.n	8004ce2 <__swhatbuf_r+0x42>
 8004cc4:	466a      	mov	r2, sp
 8004cc6:	f000 fc9d 	bl	8005604 <_fstat_r>
 8004cca:	2800      	cmp	r0, #0
 8004ccc:	dbf1      	blt.n	8004cb2 <__swhatbuf_r+0x12>
 8004cce:	9a01      	ldr	r2, [sp, #4]
 8004cd0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004cd4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004cd8:	425a      	negs	r2, r3
 8004cda:	415a      	adcs	r2, r3
 8004cdc:	602a      	str	r2, [r5, #0]
 8004cde:	e7ee      	b.n	8004cbe <__swhatbuf_r+0x1e>
 8004ce0:	2340      	movs	r3, #64	; 0x40
 8004ce2:	2000      	movs	r0, #0
 8004ce4:	6023      	str	r3, [r4, #0]
 8004ce6:	b016      	add	sp, #88	; 0x58
 8004ce8:	bd70      	pop	{r4, r5, r6, pc}
	...

08004cec <__smakebuf_r>:
 8004cec:	898b      	ldrh	r3, [r1, #12]
 8004cee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004cf0:	079d      	lsls	r5, r3, #30
 8004cf2:	4606      	mov	r6, r0
 8004cf4:	460c      	mov	r4, r1
 8004cf6:	d507      	bpl.n	8004d08 <__smakebuf_r+0x1c>
 8004cf8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004cfc:	6023      	str	r3, [r4, #0]
 8004cfe:	6123      	str	r3, [r4, #16]
 8004d00:	2301      	movs	r3, #1
 8004d02:	6163      	str	r3, [r4, #20]
 8004d04:	b002      	add	sp, #8
 8004d06:	bd70      	pop	{r4, r5, r6, pc}
 8004d08:	ab01      	add	r3, sp, #4
 8004d0a:	466a      	mov	r2, sp
 8004d0c:	f7ff ffc8 	bl	8004ca0 <__swhatbuf_r>
 8004d10:	9900      	ldr	r1, [sp, #0]
 8004d12:	4605      	mov	r5, r0
 8004d14:	4630      	mov	r0, r6
 8004d16:	f000 f89d 	bl	8004e54 <_malloc_r>
 8004d1a:	b948      	cbnz	r0, 8004d30 <__smakebuf_r+0x44>
 8004d1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d20:	059a      	lsls	r2, r3, #22
 8004d22:	d4ef      	bmi.n	8004d04 <__smakebuf_r+0x18>
 8004d24:	f023 0303 	bic.w	r3, r3, #3
 8004d28:	f043 0302 	orr.w	r3, r3, #2
 8004d2c:	81a3      	strh	r3, [r4, #12]
 8004d2e:	e7e3      	b.n	8004cf8 <__smakebuf_r+0xc>
 8004d30:	4b0d      	ldr	r3, [pc, #52]	; (8004d68 <__smakebuf_r+0x7c>)
 8004d32:	62b3      	str	r3, [r6, #40]	; 0x28
 8004d34:	89a3      	ldrh	r3, [r4, #12]
 8004d36:	6020      	str	r0, [r4, #0]
 8004d38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d3c:	81a3      	strh	r3, [r4, #12]
 8004d3e:	9b00      	ldr	r3, [sp, #0]
 8004d40:	6163      	str	r3, [r4, #20]
 8004d42:	9b01      	ldr	r3, [sp, #4]
 8004d44:	6120      	str	r0, [r4, #16]
 8004d46:	b15b      	cbz	r3, 8004d60 <__smakebuf_r+0x74>
 8004d48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d4c:	4630      	mov	r0, r6
 8004d4e:	f000 fc6b 	bl	8005628 <_isatty_r>
 8004d52:	b128      	cbz	r0, 8004d60 <__smakebuf_r+0x74>
 8004d54:	89a3      	ldrh	r3, [r4, #12]
 8004d56:	f023 0303 	bic.w	r3, r3, #3
 8004d5a:	f043 0301 	orr.w	r3, r3, #1
 8004d5e:	81a3      	strh	r3, [r4, #12]
 8004d60:	89a0      	ldrh	r0, [r4, #12]
 8004d62:	4305      	orrs	r5, r0
 8004d64:	81a5      	strh	r5, [r4, #12]
 8004d66:	e7cd      	b.n	8004d04 <__smakebuf_r+0x18>
 8004d68:	08004af9 	.word	0x08004af9

08004d6c <malloc>:
 8004d6c:	4b02      	ldr	r3, [pc, #8]	; (8004d78 <malloc+0xc>)
 8004d6e:	4601      	mov	r1, r0
 8004d70:	6818      	ldr	r0, [r3, #0]
 8004d72:	f000 b86f 	b.w	8004e54 <_malloc_r>
 8004d76:	bf00      	nop
 8004d78:	2000000c 	.word	0x2000000c

08004d7c <_free_r>:
 8004d7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004d7e:	2900      	cmp	r1, #0
 8004d80:	d044      	beq.n	8004e0c <_free_r+0x90>
 8004d82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d86:	9001      	str	r0, [sp, #4]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	f1a1 0404 	sub.w	r4, r1, #4
 8004d8e:	bfb8      	it	lt
 8004d90:	18e4      	addlt	r4, r4, r3
 8004d92:	f000 fc6b 	bl	800566c <__malloc_lock>
 8004d96:	4a1e      	ldr	r2, [pc, #120]	; (8004e10 <_free_r+0x94>)
 8004d98:	9801      	ldr	r0, [sp, #4]
 8004d9a:	6813      	ldr	r3, [r2, #0]
 8004d9c:	b933      	cbnz	r3, 8004dac <_free_r+0x30>
 8004d9e:	6063      	str	r3, [r4, #4]
 8004da0:	6014      	str	r4, [r2, #0]
 8004da2:	b003      	add	sp, #12
 8004da4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004da8:	f000 bc66 	b.w	8005678 <__malloc_unlock>
 8004dac:	42a3      	cmp	r3, r4
 8004dae:	d908      	bls.n	8004dc2 <_free_r+0x46>
 8004db0:	6825      	ldr	r5, [r4, #0]
 8004db2:	1961      	adds	r1, r4, r5
 8004db4:	428b      	cmp	r3, r1
 8004db6:	bf01      	itttt	eq
 8004db8:	6819      	ldreq	r1, [r3, #0]
 8004dba:	685b      	ldreq	r3, [r3, #4]
 8004dbc:	1949      	addeq	r1, r1, r5
 8004dbe:	6021      	streq	r1, [r4, #0]
 8004dc0:	e7ed      	b.n	8004d9e <_free_r+0x22>
 8004dc2:	461a      	mov	r2, r3
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	b10b      	cbz	r3, 8004dcc <_free_r+0x50>
 8004dc8:	42a3      	cmp	r3, r4
 8004dca:	d9fa      	bls.n	8004dc2 <_free_r+0x46>
 8004dcc:	6811      	ldr	r1, [r2, #0]
 8004dce:	1855      	adds	r5, r2, r1
 8004dd0:	42a5      	cmp	r5, r4
 8004dd2:	d10b      	bne.n	8004dec <_free_r+0x70>
 8004dd4:	6824      	ldr	r4, [r4, #0]
 8004dd6:	4421      	add	r1, r4
 8004dd8:	1854      	adds	r4, r2, r1
 8004dda:	42a3      	cmp	r3, r4
 8004ddc:	6011      	str	r1, [r2, #0]
 8004dde:	d1e0      	bne.n	8004da2 <_free_r+0x26>
 8004de0:	681c      	ldr	r4, [r3, #0]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	6053      	str	r3, [r2, #4]
 8004de6:	4421      	add	r1, r4
 8004de8:	6011      	str	r1, [r2, #0]
 8004dea:	e7da      	b.n	8004da2 <_free_r+0x26>
 8004dec:	d902      	bls.n	8004df4 <_free_r+0x78>
 8004dee:	230c      	movs	r3, #12
 8004df0:	6003      	str	r3, [r0, #0]
 8004df2:	e7d6      	b.n	8004da2 <_free_r+0x26>
 8004df4:	6825      	ldr	r5, [r4, #0]
 8004df6:	1961      	adds	r1, r4, r5
 8004df8:	428b      	cmp	r3, r1
 8004dfa:	bf04      	itt	eq
 8004dfc:	6819      	ldreq	r1, [r3, #0]
 8004dfe:	685b      	ldreq	r3, [r3, #4]
 8004e00:	6063      	str	r3, [r4, #4]
 8004e02:	bf04      	itt	eq
 8004e04:	1949      	addeq	r1, r1, r5
 8004e06:	6021      	streq	r1, [r4, #0]
 8004e08:	6054      	str	r4, [r2, #4]
 8004e0a:	e7ca      	b.n	8004da2 <_free_r+0x26>
 8004e0c:	b003      	add	sp, #12
 8004e0e:	bd30      	pop	{r4, r5, pc}
 8004e10:	200001bc 	.word	0x200001bc

08004e14 <sbrk_aligned>:
 8004e14:	b570      	push	{r4, r5, r6, lr}
 8004e16:	4e0e      	ldr	r6, [pc, #56]	; (8004e50 <sbrk_aligned+0x3c>)
 8004e18:	460c      	mov	r4, r1
 8004e1a:	6831      	ldr	r1, [r6, #0]
 8004e1c:	4605      	mov	r5, r0
 8004e1e:	b911      	cbnz	r1, 8004e26 <sbrk_aligned+0x12>
 8004e20:	f000 fb7a 	bl	8005518 <_sbrk_r>
 8004e24:	6030      	str	r0, [r6, #0]
 8004e26:	4621      	mov	r1, r4
 8004e28:	4628      	mov	r0, r5
 8004e2a:	f000 fb75 	bl	8005518 <_sbrk_r>
 8004e2e:	1c43      	adds	r3, r0, #1
 8004e30:	d00a      	beq.n	8004e48 <sbrk_aligned+0x34>
 8004e32:	1cc4      	adds	r4, r0, #3
 8004e34:	f024 0403 	bic.w	r4, r4, #3
 8004e38:	42a0      	cmp	r0, r4
 8004e3a:	d007      	beq.n	8004e4c <sbrk_aligned+0x38>
 8004e3c:	1a21      	subs	r1, r4, r0
 8004e3e:	4628      	mov	r0, r5
 8004e40:	f000 fb6a 	bl	8005518 <_sbrk_r>
 8004e44:	3001      	adds	r0, #1
 8004e46:	d101      	bne.n	8004e4c <sbrk_aligned+0x38>
 8004e48:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004e4c:	4620      	mov	r0, r4
 8004e4e:	bd70      	pop	{r4, r5, r6, pc}
 8004e50:	200001c0 	.word	0x200001c0

08004e54 <_malloc_r>:
 8004e54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e58:	1ccd      	adds	r5, r1, #3
 8004e5a:	f025 0503 	bic.w	r5, r5, #3
 8004e5e:	3508      	adds	r5, #8
 8004e60:	2d0c      	cmp	r5, #12
 8004e62:	bf38      	it	cc
 8004e64:	250c      	movcc	r5, #12
 8004e66:	2d00      	cmp	r5, #0
 8004e68:	4607      	mov	r7, r0
 8004e6a:	db01      	blt.n	8004e70 <_malloc_r+0x1c>
 8004e6c:	42a9      	cmp	r1, r5
 8004e6e:	d905      	bls.n	8004e7c <_malloc_r+0x28>
 8004e70:	230c      	movs	r3, #12
 8004e72:	603b      	str	r3, [r7, #0]
 8004e74:	2600      	movs	r6, #0
 8004e76:	4630      	mov	r0, r6
 8004e78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e7c:	4e2e      	ldr	r6, [pc, #184]	; (8004f38 <_malloc_r+0xe4>)
 8004e7e:	f000 fbf5 	bl	800566c <__malloc_lock>
 8004e82:	6833      	ldr	r3, [r6, #0]
 8004e84:	461c      	mov	r4, r3
 8004e86:	bb34      	cbnz	r4, 8004ed6 <_malloc_r+0x82>
 8004e88:	4629      	mov	r1, r5
 8004e8a:	4638      	mov	r0, r7
 8004e8c:	f7ff ffc2 	bl	8004e14 <sbrk_aligned>
 8004e90:	1c43      	adds	r3, r0, #1
 8004e92:	4604      	mov	r4, r0
 8004e94:	d14d      	bne.n	8004f32 <_malloc_r+0xde>
 8004e96:	6834      	ldr	r4, [r6, #0]
 8004e98:	4626      	mov	r6, r4
 8004e9a:	2e00      	cmp	r6, #0
 8004e9c:	d140      	bne.n	8004f20 <_malloc_r+0xcc>
 8004e9e:	6823      	ldr	r3, [r4, #0]
 8004ea0:	4631      	mov	r1, r6
 8004ea2:	4638      	mov	r0, r7
 8004ea4:	eb04 0803 	add.w	r8, r4, r3
 8004ea8:	f000 fb36 	bl	8005518 <_sbrk_r>
 8004eac:	4580      	cmp	r8, r0
 8004eae:	d13a      	bne.n	8004f26 <_malloc_r+0xd2>
 8004eb0:	6821      	ldr	r1, [r4, #0]
 8004eb2:	3503      	adds	r5, #3
 8004eb4:	1a6d      	subs	r5, r5, r1
 8004eb6:	f025 0503 	bic.w	r5, r5, #3
 8004eba:	3508      	adds	r5, #8
 8004ebc:	2d0c      	cmp	r5, #12
 8004ebe:	bf38      	it	cc
 8004ec0:	250c      	movcc	r5, #12
 8004ec2:	4629      	mov	r1, r5
 8004ec4:	4638      	mov	r0, r7
 8004ec6:	f7ff ffa5 	bl	8004e14 <sbrk_aligned>
 8004eca:	3001      	adds	r0, #1
 8004ecc:	d02b      	beq.n	8004f26 <_malloc_r+0xd2>
 8004ece:	6823      	ldr	r3, [r4, #0]
 8004ed0:	442b      	add	r3, r5
 8004ed2:	6023      	str	r3, [r4, #0]
 8004ed4:	e00e      	b.n	8004ef4 <_malloc_r+0xa0>
 8004ed6:	6822      	ldr	r2, [r4, #0]
 8004ed8:	1b52      	subs	r2, r2, r5
 8004eda:	d41e      	bmi.n	8004f1a <_malloc_r+0xc6>
 8004edc:	2a0b      	cmp	r2, #11
 8004ede:	d916      	bls.n	8004f0e <_malloc_r+0xba>
 8004ee0:	1961      	adds	r1, r4, r5
 8004ee2:	42a3      	cmp	r3, r4
 8004ee4:	6025      	str	r5, [r4, #0]
 8004ee6:	bf18      	it	ne
 8004ee8:	6059      	strne	r1, [r3, #4]
 8004eea:	6863      	ldr	r3, [r4, #4]
 8004eec:	bf08      	it	eq
 8004eee:	6031      	streq	r1, [r6, #0]
 8004ef0:	5162      	str	r2, [r4, r5]
 8004ef2:	604b      	str	r3, [r1, #4]
 8004ef4:	4638      	mov	r0, r7
 8004ef6:	f104 060b 	add.w	r6, r4, #11
 8004efa:	f000 fbbd 	bl	8005678 <__malloc_unlock>
 8004efe:	f026 0607 	bic.w	r6, r6, #7
 8004f02:	1d23      	adds	r3, r4, #4
 8004f04:	1af2      	subs	r2, r6, r3
 8004f06:	d0b6      	beq.n	8004e76 <_malloc_r+0x22>
 8004f08:	1b9b      	subs	r3, r3, r6
 8004f0a:	50a3      	str	r3, [r4, r2]
 8004f0c:	e7b3      	b.n	8004e76 <_malloc_r+0x22>
 8004f0e:	6862      	ldr	r2, [r4, #4]
 8004f10:	42a3      	cmp	r3, r4
 8004f12:	bf0c      	ite	eq
 8004f14:	6032      	streq	r2, [r6, #0]
 8004f16:	605a      	strne	r2, [r3, #4]
 8004f18:	e7ec      	b.n	8004ef4 <_malloc_r+0xa0>
 8004f1a:	4623      	mov	r3, r4
 8004f1c:	6864      	ldr	r4, [r4, #4]
 8004f1e:	e7b2      	b.n	8004e86 <_malloc_r+0x32>
 8004f20:	4634      	mov	r4, r6
 8004f22:	6876      	ldr	r6, [r6, #4]
 8004f24:	e7b9      	b.n	8004e9a <_malloc_r+0x46>
 8004f26:	230c      	movs	r3, #12
 8004f28:	603b      	str	r3, [r7, #0]
 8004f2a:	4638      	mov	r0, r7
 8004f2c:	f000 fba4 	bl	8005678 <__malloc_unlock>
 8004f30:	e7a1      	b.n	8004e76 <_malloc_r+0x22>
 8004f32:	6025      	str	r5, [r4, #0]
 8004f34:	e7de      	b.n	8004ef4 <_malloc_r+0xa0>
 8004f36:	bf00      	nop
 8004f38:	200001bc 	.word	0x200001bc

08004f3c <__sfputc_r>:
 8004f3c:	6893      	ldr	r3, [r2, #8]
 8004f3e:	3b01      	subs	r3, #1
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	b410      	push	{r4}
 8004f44:	6093      	str	r3, [r2, #8]
 8004f46:	da08      	bge.n	8004f5a <__sfputc_r+0x1e>
 8004f48:	6994      	ldr	r4, [r2, #24]
 8004f4a:	42a3      	cmp	r3, r4
 8004f4c:	db01      	blt.n	8004f52 <__sfputc_r+0x16>
 8004f4e:	290a      	cmp	r1, #10
 8004f50:	d103      	bne.n	8004f5a <__sfputc_r+0x1e>
 8004f52:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004f56:	f7ff bc29 	b.w	80047ac <__swbuf_r>
 8004f5a:	6813      	ldr	r3, [r2, #0]
 8004f5c:	1c58      	adds	r0, r3, #1
 8004f5e:	6010      	str	r0, [r2, #0]
 8004f60:	7019      	strb	r1, [r3, #0]
 8004f62:	4608      	mov	r0, r1
 8004f64:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004f68:	4770      	bx	lr

08004f6a <__sfputs_r>:
 8004f6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f6c:	4606      	mov	r6, r0
 8004f6e:	460f      	mov	r7, r1
 8004f70:	4614      	mov	r4, r2
 8004f72:	18d5      	adds	r5, r2, r3
 8004f74:	42ac      	cmp	r4, r5
 8004f76:	d101      	bne.n	8004f7c <__sfputs_r+0x12>
 8004f78:	2000      	movs	r0, #0
 8004f7a:	e007      	b.n	8004f8c <__sfputs_r+0x22>
 8004f7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f80:	463a      	mov	r2, r7
 8004f82:	4630      	mov	r0, r6
 8004f84:	f7ff ffda 	bl	8004f3c <__sfputc_r>
 8004f88:	1c43      	adds	r3, r0, #1
 8004f8a:	d1f3      	bne.n	8004f74 <__sfputs_r+0xa>
 8004f8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004f90 <_vfiprintf_r>:
 8004f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f94:	460d      	mov	r5, r1
 8004f96:	b09d      	sub	sp, #116	; 0x74
 8004f98:	4614      	mov	r4, r2
 8004f9a:	4698      	mov	r8, r3
 8004f9c:	4606      	mov	r6, r0
 8004f9e:	b118      	cbz	r0, 8004fa8 <_vfiprintf_r+0x18>
 8004fa0:	6983      	ldr	r3, [r0, #24]
 8004fa2:	b90b      	cbnz	r3, 8004fa8 <_vfiprintf_r+0x18>
 8004fa4:	f7ff fddc 	bl	8004b60 <__sinit>
 8004fa8:	4b89      	ldr	r3, [pc, #548]	; (80051d0 <_vfiprintf_r+0x240>)
 8004faa:	429d      	cmp	r5, r3
 8004fac:	d11b      	bne.n	8004fe6 <_vfiprintf_r+0x56>
 8004fae:	6875      	ldr	r5, [r6, #4]
 8004fb0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004fb2:	07d9      	lsls	r1, r3, #31
 8004fb4:	d405      	bmi.n	8004fc2 <_vfiprintf_r+0x32>
 8004fb6:	89ab      	ldrh	r3, [r5, #12]
 8004fb8:	059a      	lsls	r2, r3, #22
 8004fba:	d402      	bmi.n	8004fc2 <_vfiprintf_r+0x32>
 8004fbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004fbe:	f7ff fe6d 	bl	8004c9c <__retarget_lock_acquire_recursive>
 8004fc2:	89ab      	ldrh	r3, [r5, #12]
 8004fc4:	071b      	lsls	r3, r3, #28
 8004fc6:	d501      	bpl.n	8004fcc <_vfiprintf_r+0x3c>
 8004fc8:	692b      	ldr	r3, [r5, #16]
 8004fca:	b9eb      	cbnz	r3, 8005008 <_vfiprintf_r+0x78>
 8004fcc:	4629      	mov	r1, r5
 8004fce:	4630      	mov	r0, r6
 8004fd0:	f7ff fc3e 	bl	8004850 <__swsetup_r>
 8004fd4:	b1c0      	cbz	r0, 8005008 <_vfiprintf_r+0x78>
 8004fd6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004fd8:	07dc      	lsls	r4, r3, #31
 8004fda:	d50e      	bpl.n	8004ffa <_vfiprintf_r+0x6a>
 8004fdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004fe0:	b01d      	add	sp, #116	; 0x74
 8004fe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fe6:	4b7b      	ldr	r3, [pc, #492]	; (80051d4 <_vfiprintf_r+0x244>)
 8004fe8:	429d      	cmp	r5, r3
 8004fea:	d101      	bne.n	8004ff0 <_vfiprintf_r+0x60>
 8004fec:	68b5      	ldr	r5, [r6, #8]
 8004fee:	e7df      	b.n	8004fb0 <_vfiprintf_r+0x20>
 8004ff0:	4b79      	ldr	r3, [pc, #484]	; (80051d8 <_vfiprintf_r+0x248>)
 8004ff2:	429d      	cmp	r5, r3
 8004ff4:	bf08      	it	eq
 8004ff6:	68f5      	ldreq	r5, [r6, #12]
 8004ff8:	e7da      	b.n	8004fb0 <_vfiprintf_r+0x20>
 8004ffa:	89ab      	ldrh	r3, [r5, #12]
 8004ffc:	0598      	lsls	r0, r3, #22
 8004ffe:	d4ed      	bmi.n	8004fdc <_vfiprintf_r+0x4c>
 8005000:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005002:	f7ff fe4c 	bl	8004c9e <__retarget_lock_release_recursive>
 8005006:	e7e9      	b.n	8004fdc <_vfiprintf_r+0x4c>
 8005008:	2300      	movs	r3, #0
 800500a:	9309      	str	r3, [sp, #36]	; 0x24
 800500c:	2320      	movs	r3, #32
 800500e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005012:	f8cd 800c 	str.w	r8, [sp, #12]
 8005016:	2330      	movs	r3, #48	; 0x30
 8005018:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80051dc <_vfiprintf_r+0x24c>
 800501c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005020:	f04f 0901 	mov.w	r9, #1
 8005024:	4623      	mov	r3, r4
 8005026:	469a      	mov	sl, r3
 8005028:	f813 2b01 	ldrb.w	r2, [r3], #1
 800502c:	b10a      	cbz	r2, 8005032 <_vfiprintf_r+0xa2>
 800502e:	2a25      	cmp	r2, #37	; 0x25
 8005030:	d1f9      	bne.n	8005026 <_vfiprintf_r+0x96>
 8005032:	ebba 0b04 	subs.w	fp, sl, r4
 8005036:	d00b      	beq.n	8005050 <_vfiprintf_r+0xc0>
 8005038:	465b      	mov	r3, fp
 800503a:	4622      	mov	r2, r4
 800503c:	4629      	mov	r1, r5
 800503e:	4630      	mov	r0, r6
 8005040:	f7ff ff93 	bl	8004f6a <__sfputs_r>
 8005044:	3001      	adds	r0, #1
 8005046:	f000 80aa 	beq.w	800519e <_vfiprintf_r+0x20e>
 800504a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800504c:	445a      	add	r2, fp
 800504e:	9209      	str	r2, [sp, #36]	; 0x24
 8005050:	f89a 3000 	ldrb.w	r3, [sl]
 8005054:	2b00      	cmp	r3, #0
 8005056:	f000 80a2 	beq.w	800519e <_vfiprintf_r+0x20e>
 800505a:	2300      	movs	r3, #0
 800505c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005060:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005064:	f10a 0a01 	add.w	sl, sl, #1
 8005068:	9304      	str	r3, [sp, #16]
 800506a:	9307      	str	r3, [sp, #28]
 800506c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005070:	931a      	str	r3, [sp, #104]	; 0x68
 8005072:	4654      	mov	r4, sl
 8005074:	2205      	movs	r2, #5
 8005076:	f814 1b01 	ldrb.w	r1, [r4], #1
 800507a:	4858      	ldr	r0, [pc, #352]	; (80051dc <_vfiprintf_r+0x24c>)
 800507c:	f7fb f8c8 	bl	8000210 <memchr>
 8005080:	9a04      	ldr	r2, [sp, #16]
 8005082:	b9d8      	cbnz	r0, 80050bc <_vfiprintf_r+0x12c>
 8005084:	06d1      	lsls	r1, r2, #27
 8005086:	bf44      	itt	mi
 8005088:	2320      	movmi	r3, #32
 800508a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800508e:	0713      	lsls	r3, r2, #28
 8005090:	bf44      	itt	mi
 8005092:	232b      	movmi	r3, #43	; 0x2b
 8005094:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005098:	f89a 3000 	ldrb.w	r3, [sl]
 800509c:	2b2a      	cmp	r3, #42	; 0x2a
 800509e:	d015      	beq.n	80050cc <_vfiprintf_r+0x13c>
 80050a0:	9a07      	ldr	r2, [sp, #28]
 80050a2:	4654      	mov	r4, sl
 80050a4:	2000      	movs	r0, #0
 80050a6:	f04f 0c0a 	mov.w	ip, #10
 80050aa:	4621      	mov	r1, r4
 80050ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80050b0:	3b30      	subs	r3, #48	; 0x30
 80050b2:	2b09      	cmp	r3, #9
 80050b4:	d94e      	bls.n	8005154 <_vfiprintf_r+0x1c4>
 80050b6:	b1b0      	cbz	r0, 80050e6 <_vfiprintf_r+0x156>
 80050b8:	9207      	str	r2, [sp, #28]
 80050ba:	e014      	b.n	80050e6 <_vfiprintf_r+0x156>
 80050bc:	eba0 0308 	sub.w	r3, r0, r8
 80050c0:	fa09 f303 	lsl.w	r3, r9, r3
 80050c4:	4313      	orrs	r3, r2
 80050c6:	9304      	str	r3, [sp, #16]
 80050c8:	46a2      	mov	sl, r4
 80050ca:	e7d2      	b.n	8005072 <_vfiprintf_r+0xe2>
 80050cc:	9b03      	ldr	r3, [sp, #12]
 80050ce:	1d19      	adds	r1, r3, #4
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	9103      	str	r1, [sp, #12]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	bfbb      	ittet	lt
 80050d8:	425b      	neglt	r3, r3
 80050da:	f042 0202 	orrlt.w	r2, r2, #2
 80050de:	9307      	strge	r3, [sp, #28]
 80050e0:	9307      	strlt	r3, [sp, #28]
 80050e2:	bfb8      	it	lt
 80050e4:	9204      	strlt	r2, [sp, #16]
 80050e6:	7823      	ldrb	r3, [r4, #0]
 80050e8:	2b2e      	cmp	r3, #46	; 0x2e
 80050ea:	d10c      	bne.n	8005106 <_vfiprintf_r+0x176>
 80050ec:	7863      	ldrb	r3, [r4, #1]
 80050ee:	2b2a      	cmp	r3, #42	; 0x2a
 80050f0:	d135      	bne.n	800515e <_vfiprintf_r+0x1ce>
 80050f2:	9b03      	ldr	r3, [sp, #12]
 80050f4:	1d1a      	adds	r2, r3, #4
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	9203      	str	r2, [sp, #12]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	bfb8      	it	lt
 80050fe:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005102:	3402      	adds	r4, #2
 8005104:	9305      	str	r3, [sp, #20]
 8005106:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80051ec <_vfiprintf_r+0x25c>
 800510a:	7821      	ldrb	r1, [r4, #0]
 800510c:	2203      	movs	r2, #3
 800510e:	4650      	mov	r0, sl
 8005110:	f7fb f87e 	bl	8000210 <memchr>
 8005114:	b140      	cbz	r0, 8005128 <_vfiprintf_r+0x198>
 8005116:	2340      	movs	r3, #64	; 0x40
 8005118:	eba0 000a 	sub.w	r0, r0, sl
 800511c:	fa03 f000 	lsl.w	r0, r3, r0
 8005120:	9b04      	ldr	r3, [sp, #16]
 8005122:	4303      	orrs	r3, r0
 8005124:	3401      	adds	r4, #1
 8005126:	9304      	str	r3, [sp, #16]
 8005128:	f814 1b01 	ldrb.w	r1, [r4], #1
 800512c:	482c      	ldr	r0, [pc, #176]	; (80051e0 <_vfiprintf_r+0x250>)
 800512e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005132:	2206      	movs	r2, #6
 8005134:	f7fb f86c 	bl	8000210 <memchr>
 8005138:	2800      	cmp	r0, #0
 800513a:	d03f      	beq.n	80051bc <_vfiprintf_r+0x22c>
 800513c:	4b29      	ldr	r3, [pc, #164]	; (80051e4 <_vfiprintf_r+0x254>)
 800513e:	bb1b      	cbnz	r3, 8005188 <_vfiprintf_r+0x1f8>
 8005140:	9b03      	ldr	r3, [sp, #12]
 8005142:	3307      	adds	r3, #7
 8005144:	f023 0307 	bic.w	r3, r3, #7
 8005148:	3308      	adds	r3, #8
 800514a:	9303      	str	r3, [sp, #12]
 800514c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800514e:	443b      	add	r3, r7
 8005150:	9309      	str	r3, [sp, #36]	; 0x24
 8005152:	e767      	b.n	8005024 <_vfiprintf_r+0x94>
 8005154:	fb0c 3202 	mla	r2, ip, r2, r3
 8005158:	460c      	mov	r4, r1
 800515a:	2001      	movs	r0, #1
 800515c:	e7a5      	b.n	80050aa <_vfiprintf_r+0x11a>
 800515e:	2300      	movs	r3, #0
 8005160:	3401      	adds	r4, #1
 8005162:	9305      	str	r3, [sp, #20]
 8005164:	4619      	mov	r1, r3
 8005166:	f04f 0c0a 	mov.w	ip, #10
 800516a:	4620      	mov	r0, r4
 800516c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005170:	3a30      	subs	r2, #48	; 0x30
 8005172:	2a09      	cmp	r2, #9
 8005174:	d903      	bls.n	800517e <_vfiprintf_r+0x1ee>
 8005176:	2b00      	cmp	r3, #0
 8005178:	d0c5      	beq.n	8005106 <_vfiprintf_r+0x176>
 800517a:	9105      	str	r1, [sp, #20]
 800517c:	e7c3      	b.n	8005106 <_vfiprintf_r+0x176>
 800517e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005182:	4604      	mov	r4, r0
 8005184:	2301      	movs	r3, #1
 8005186:	e7f0      	b.n	800516a <_vfiprintf_r+0x1da>
 8005188:	ab03      	add	r3, sp, #12
 800518a:	9300      	str	r3, [sp, #0]
 800518c:	462a      	mov	r2, r5
 800518e:	4b16      	ldr	r3, [pc, #88]	; (80051e8 <_vfiprintf_r+0x258>)
 8005190:	a904      	add	r1, sp, #16
 8005192:	4630      	mov	r0, r6
 8005194:	f3af 8000 	nop.w
 8005198:	4607      	mov	r7, r0
 800519a:	1c78      	adds	r0, r7, #1
 800519c:	d1d6      	bne.n	800514c <_vfiprintf_r+0x1bc>
 800519e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80051a0:	07d9      	lsls	r1, r3, #31
 80051a2:	d405      	bmi.n	80051b0 <_vfiprintf_r+0x220>
 80051a4:	89ab      	ldrh	r3, [r5, #12]
 80051a6:	059a      	lsls	r2, r3, #22
 80051a8:	d402      	bmi.n	80051b0 <_vfiprintf_r+0x220>
 80051aa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80051ac:	f7ff fd77 	bl	8004c9e <__retarget_lock_release_recursive>
 80051b0:	89ab      	ldrh	r3, [r5, #12]
 80051b2:	065b      	lsls	r3, r3, #25
 80051b4:	f53f af12 	bmi.w	8004fdc <_vfiprintf_r+0x4c>
 80051b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80051ba:	e711      	b.n	8004fe0 <_vfiprintf_r+0x50>
 80051bc:	ab03      	add	r3, sp, #12
 80051be:	9300      	str	r3, [sp, #0]
 80051c0:	462a      	mov	r2, r5
 80051c2:	4b09      	ldr	r3, [pc, #36]	; (80051e8 <_vfiprintf_r+0x258>)
 80051c4:	a904      	add	r1, sp, #16
 80051c6:	4630      	mov	r0, r6
 80051c8:	f000 f880 	bl	80052cc <_printf_i>
 80051cc:	e7e4      	b.n	8005198 <_vfiprintf_r+0x208>
 80051ce:	bf00      	nop
 80051d0:	08005720 	.word	0x08005720
 80051d4:	08005740 	.word	0x08005740
 80051d8:	08005700 	.word	0x08005700
 80051dc:	08005760 	.word	0x08005760
 80051e0:	0800576a 	.word	0x0800576a
 80051e4:	00000000 	.word	0x00000000
 80051e8:	08004f6b 	.word	0x08004f6b
 80051ec:	08005766 	.word	0x08005766

080051f0 <_printf_common>:
 80051f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051f4:	4616      	mov	r6, r2
 80051f6:	4699      	mov	r9, r3
 80051f8:	688a      	ldr	r2, [r1, #8]
 80051fa:	690b      	ldr	r3, [r1, #16]
 80051fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005200:	4293      	cmp	r3, r2
 8005202:	bfb8      	it	lt
 8005204:	4613      	movlt	r3, r2
 8005206:	6033      	str	r3, [r6, #0]
 8005208:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800520c:	4607      	mov	r7, r0
 800520e:	460c      	mov	r4, r1
 8005210:	b10a      	cbz	r2, 8005216 <_printf_common+0x26>
 8005212:	3301      	adds	r3, #1
 8005214:	6033      	str	r3, [r6, #0]
 8005216:	6823      	ldr	r3, [r4, #0]
 8005218:	0699      	lsls	r1, r3, #26
 800521a:	bf42      	ittt	mi
 800521c:	6833      	ldrmi	r3, [r6, #0]
 800521e:	3302      	addmi	r3, #2
 8005220:	6033      	strmi	r3, [r6, #0]
 8005222:	6825      	ldr	r5, [r4, #0]
 8005224:	f015 0506 	ands.w	r5, r5, #6
 8005228:	d106      	bne.n	8005238 <_printf_common+0x48>
 800522a:	f104 0a19 	add.w	sl, r4, #25
 800522e:	68e3      	ldr	r3, [r4, #12]
 8005230:	6832      	ldr	r2, [r6, #0]
 8005232:	1a9b      	subs	r3, r3, r2
 8005234:	42ab      	cmp	r3, r5
 8005236:	dc26      	bgt.n	8005286 <_printf_common+0x96>
 8005238:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800523c:	1e13      	subs	r3, r2, #0
 800523e:	6822      	ldr	r2, [r4, #0]
 8005240:	bf18      	it	ne
 8005242:	2301      	movne	r3, #1
 8005244:	0692      	lsls	r2, r2, #26
 8005246:	d42b      	bmi.n	80052a0 <_printf_common+0xb0>
 8005248:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800524c:	4649      	mov	r1, r9
 800524e:	4638      	mov	r0, r7
 8005250:	47c0      	blx	r8
 8005252:	3001      	adds	r0, #1
 8005254:	d01e      	beq.n	8005294 <_printf_common+0xa4>
 8005256:	6823      	ldr	r3, [r4, #0]
 8005258:	68e5      	ldr	r5, [r4, #12]
 800525a:	6832      	ldr	r2, [r6, #0]
 800525c:	f003 0306 	and.w	r3, r3, #6
 8005260:	2b04      	cmp	r3, #4
 8005262:	bf08      	it	eq
 8005264:	1aad      	subeq	r5, r5, r2
 8005266:	68a3      	ldr	r3, [r4, #8]
 8005268:	6922      	ldr	r2, [r4, #16]
 800526a:	bf0c      	ite	eq
 800526c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005270:	2500      	movne	r5, #0
 8005272:	4293      	cmp	r3, r2
 8005274:	bfc4      	itt	gt
 8005276:	1a9b      	subgt	r3, r3, r2
 8005278:	18ed      	addgt	r5, r5, r3
 800527a:	2600      	movs	r6, #0
 800527c:	341a      	adds	r4, #26
 800527e:	42b5      	cmp	r5, r6
 8005280:	d11a      	bne.n	80052b8 <_printf_common+0xc8>
 8005282:	2000      	movs	r0, #0
 8005284:	e008      	b.n	8005298 <_printf_common+0xa8>
 8005286:	2301      	movs	r3, #1
 8005288:	4652      	mov	r2, sl
 800528a:	4649      	mov	r1, r9
 800528c:	4638      	mov	r0, r7
 800528e:	47c0      	blx	r8
 8005290:	3001      	adds	r0, #1
 8005292:	d103      	bne.n	800529c <_printf_common+0xac>
 8005294:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005298:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800529c:	3501      	adds	r5, #1
 800529e:	e7c6      	b.n	800522e <_printf_common+0x3e>
 80052a0:	18e1      	adds	r1, r4, r3
 80052a2:	1c5a      	adds	r2, r3, #1
 80052a4:	2030      	movs	r0, #48	; 0x30
 80052a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80052aa:	4422      	add	r2, r4
 80052ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80052b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80052b4:	3302      	adds	r3, #2
 80052b6:	e7c7      	b.n	8005248 <_printf_common+0x58>
 80052b8:	2301      	movs	r3, #1
 80052ba:	4622      	mov	r2, r4
 80052bc:	4649      	mov	r1, r9
 80052be:	4638      	mov	r0, r7
 80052c0:	47c0      	blx	r8
 80052c2:	3001      	adds	r0, #1
 80052c4:	d0e6      	beq.n	8005294 <_printf_common+0xa4>
 80052c6:	3601      	adds	r6, #1
 80052c8:	e7d9      	b.n	800527e <_printf_common+0x8e>
	...

080052cc <_printf_i>:
 80052cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80052d0:	7e0f      	ldrb	r7, [r1, #24]
 80052d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80052d4:	2f78      	cmp	r7, #120	; 0x78
 80052d6:	4691      	mov	r9, r2
 80052d8:	4680      	mov	r8, r0
 80052da:	460c      	mov	r4, r1
 80052dc:	469a      	mov	sl, r3
 80052de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80052e2:	d807      	bhi.n	80052f4 <_printf_i+0x28>
 80052e4:	2f62      	cmp	r7, #98	; 0x62
 80052e6:	d80a      	bhi.n	80052fe <_printf_i+0x32>
 80052e8:	2f00      	cmp	r7, #0
 80052ea:	f000 80d8 	beq.w	800549e <_printf_i+0x1d2>
 80052ee:	2f58      	cmp	r7, #88	; 0x58
 80052f0:	f000 80a3 	beq.w	800543a <_printf_i+0x16e>
 80052f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80052f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80052fc:	e03a      	b.n	8005374 <_printf_i+0xa8>
 80052fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005302:	2b15      	cmp	r3, #21
 8005304:	d8f6      	bhi.n	80052f4 <_printf_i+0x28>
 8005306:	a101      	add	r1, pc, #4	; (adr r1, 800530c <_printf_i+0x40>)
 8005308:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800530c:	08005365 	.word	0x08005365
 8005310:	08005379 	.word	0x08005379
 8005314:	080052f5 	.word	0x080052f5
 8005318:	080052f5 	.word	0x080052f5
 800531c:	080052f5 	.word	0x080052f5
 8005320:	080052f5 	.word	0x080052f5
 8005324:	08005379 	.word	0x08005379
 8005328:	080052f5 	.word	0x080052f5
 800532c:	080052f5 	.word	0x080052f5
 8005330:	080052f5 	.word	0x080052f5
 8005334:	080052f5 	.word	0x080052f5
 8005338:	08005485 	.word	0x08005485
 800533c:	080053a9 	.word	0x080053a9
 8005340:	08005467 	.word	0x08005467
 8005344:	080052f5 	.word	0x080052f5
 8005348:	080052f5 	.word	0x080052f5
 800534c:	080054a7 	.word	0x080054a7
 8005350:	080052f5 	.word	0x080052f5
 8005354:	080053a9 	.word	0x080053a9
 8005358:	080052f5 	.word	0x080052f5
 800535c:	080052f5 	.word	0x080052f5
 8005360:	0800546f 	.word	0x0800546f
 8005364:	682b      	ldr	r3, [r5, #0]
 8005366:	1d1a      	adds	r2, r3, #4
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	602a      	str	r2, [r5, #0]
 800536c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005370:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005374:	2301      	movs	r3, #1
 8005376:	e0a3      	b.n	80054c0 <_printf_i+0x1f4>
 8005378:	6820      	ldr	r0, [r4, #0]
 800537a:	6829      	ldr	r1, [r5, #0]
 800537c:	0606      	lsls	r6, r0, #24
 800537e:	f101 0304 	add.w	r3, r1, #4
 8005382:	d50a      	bpl.n	800539a <_printf_i+0xce>
 8005384:	680e      	ldr	r6, [r1, #0]
 8005386:	602b      	str	r3, [r5, #0]
 8005388:	2e00      	cmp	r6, #0
 800538a:	da03      	bge.n	8005394 <_printf_i+0xc8>
 800538c:	232d      	movs	r3, #45	; 0x2d
 800538e:	4276      	negs	r6, r6
 8005390:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005394:	485e      	ldr	r0, [pc, #376]	; (8005510 <_printf_i+0x244>)
 8005396:	230a      	movs	r3, #10
 8005398:	e019      	b.n	80053ce <_printf_i+0x102>
 800539a:	680e      	ldr	r6, [r1, #0]
 800539c:	602b      	str	r3, [r5, #0]
 800539e:	f010 0f40 	tst.w	r0, #64	; 0x40
 80053a2:	bf18      	it	ne
 80053a4:	b236      	sxthne	r6, r6
 80053a6:	e7ef      	b.n	8005388 <_printf_i+0xbc>
 80053a8:	682b      	ldr	r3, [r5, #0]
 80053aa:	6820      	ldr	r0, [r4, #0]
 80053ac:	1d19      	adds	r1, r3, #4
 80053ae:	6029      	str	r1, [r5, #0]
 80053b0:	0601      	lsls	r1, r0, #24
 80053b2:	d501      	bpl.n	80053b8 <_printf_i+0xec>
 80053b4:	681e      	ldr	r6, [r3, #0]
 80053b6:	e002      	b.n	80053be <_printf_i+0xf2>
 80053b8:	0646      	lsls	r6, r0, #25
 80053ba:	d5fb      	bpl.n	80053b4 <_printf_i+0xe8>
 80053bc:	881e      	ldrh	r6, [r3, #0]
 80053be:	4854      	ldr	r0, [pc, #336]	; (8005510 <_printf_i+0x244>)
 80053c0:	2f6f      	cmp	r7, #111	; 0x6f
 80053c2:	bf0c      	ite	eq
 80053c4:	2308      	moveq	r3, #8
 80053c6:	230a      	movne	r3, #10
 80053c8:	2100      	movs	r1, #0
 80053ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80053ce:	6865      	ldr	r5, [r4, #4]
 80053d0:	60a5      	str	r5, [r4, #8]
 80053d2:	2d00      	cmp	r5, #0
 80053d4:	bfa2      	ittt	ge
 80053d6:	6821      	ldrge	r1, [r4, #0]
 80053d8:	f021 0104 	bicge.w	r1, r1, #4
 80053dc:	6021      	strge	r1, [r4, #0]
 80053de:	b90e      	cbnz	r6, 80053e4 <_printf_i+0x118>
 80053e0:	2d00      	cmp	r5, #0
 80053e2:	d04d      	beq.n	8005480 <_printf_i+0x1b4>
 80053e4:	4615      	mov	r5, r2
 80053e6:	fbb6 f1f3 	udiv	r1, r6, r3
 80053ea:	fb03 6711 	mls	r7, r3, r1, r6
 80053ee:	5dc7      	ldrb	r7, [r0, r7]
 80053f0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80053f4:	4637      	mov	r7, r6
 80053f6:	42bb      	cmp	r3, r7
 80053f8:	460e      	mov	r6, r1
 80053fa:	d9f4      	bls.n	80053e6 <_printf_i+0x11a>
 80053fc:	2b08      	cmp	r3, #8
 80053fe:	d10b      	bne.n	8005418 <_printf_i+0x14c>
 8005400:	6823      	ldr	r3, [r4, #0]
 8005402:	07de      	lsls	r6, r3, #31
 8005404:	d508      	bpl.n	8005418 <_printf_i+0x14c>
 8005406:	6923      	ldr	r3, [r4, #16]
 8005408:	6861      	ldr	r1, [r4, #4]
 800540a:	4299      	cmp	r1, r3
 800540c:	bfde      	ittt	le
 800540e:	2330      	movle	r3, #48	; 0x30
 8005410:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005414:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005418:	1b52      	subs	r2, r2, r5
 800541a:	6122      	str	r2, [r4, #16]
 800541c:	f8cd a000 	str.w	sl, [sp]
 8005420:	464b      	mov	r3, r9
 8005422:	aa03      	add	r2, sp, #12
 8005424:	4621      	mov	r1, r4
 8005426:	4640      	mov	r0, r8
 8005428:	f7ff fee2 	bl	80051f0 <_printf_common>
 800542c:	3001      	adds	r0, #1
 800542e:	d14c      	bne.n	80054ca <_printf_i+0x1fe>
 8005430:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005434:	b004      	add	sp, #16
 8005436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800543a:	4835      	ldr	r0, [pc, #212]	; (8005510 <_printf_i+0x244>)
 800543c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005440:	6829      	ldr	r1, [r5, #0]
 8005442:	6823      	ldr	r3, [r4, #0]
 8005444:	f851 6b04 	ldr.w	r6, [r1], #4
 8005448:	6029      	str	r1, [r5, #0]
 800544a:	061d      	lsls	r5, r3, #24
 800544c:	d514      	bpl.n	8005478 <_printf_i+0x1ac>
 800544e:	07df      	lsls	r7, r3, #31
 8005450:	bf44      	itt	mi
 8005452:	f043 0320 	orrmi.w	r3, r3, #32
 8005456:	6023      	strmi	r3, [r4, #0]
 8005458:	b91e      	cbnz	r6, 8005462 <_printf_i+0x196>
 800545a:	6823      	ldr	r3, [r4, #0]
 800545c:	f023 0320 	bic.w	r3, r3, #32
 8005460:	6023      	str	r3, [r4, #0]
 8005462:	2310      	movs	r3, #16
 8005464:	e7b0      	b.n	80053c8 <_printf_i+0xfc>
 8005466:	6823      	ldr	r3, [r4, #0]
 8005468:	f043 0320 	orr.w	r3, r3, #32
 800546c:	6023      	str	r3, [r4, #0]
 800546e:	2378      	movs	r3, #120	; 0x78
 8005470:	4828      	ldr	r0, [pc, #160]	; (8005514 <_printf_i+0x248>)
 8005472:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005476:	e7e3      	b.n	8005440 <_printf_i+0x174>
 8005478:	0659      	lsls	r1, r3, #25
 800547a:	bf48      	it	mi
 800547c:	b2b6      	uxthmi	r6, r6
 800547e:	e7e6      	b.n	800544e <_printf_i+0x182>
 8005480:	4615      	mov	r5, r2
 8005482:	e7bb      	b.n	80053fc <_printf_i+0x130>
 8005484:	682b      	ldr	r3, [r5, #0]
 8005486:	6826      	ldr	r6, [r4, #0]
 8005488:	6961      	ldr	r1, [r4, #20]
 800548a:	1d18      	adds	r0, r3, #4
 800548c:	6028      	str	r0, [r5, #0]
 800548e:	0635      	lsls	r5, r6, #24
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	d501      	bpl.n	8005498 <_printf_i+0x1cc>
 8005494:	6019      	str	r1, [r3, #0]
 8005496:	e002      	b.n	800549e <_printf_i+0x1d2>
 8005498:	0670      	lsls	r0, r6, #25
 800549a:	d5fb      	bpl.n	8005494 <_printf_i+0x1c8>
 800549c:	8019      	strh	r1, [r3, #0]
 800549e:	2300      	movs	r3, #0
 80054a0:	6123      	str	r3, [r4, #16]
 80054a2:	4615      	mov	r5, r2
 80054a4:	e7ba      	b.n	800541c <_printf_i+0x150>
 80054a6:	682b      	ldr	r3, [r5, #0]
 80054a8:	1d1a      	adds	r2, r3, #4
 80054aa:	602a      	str	r2, [r5, #0]
 80054ac:	681d      	ldr	r5, [r3, #0]
 80054ae:	6862      	ldr	r2, [r4, #4]
 80054b0:	2100      	movs	r1, #0
 80054b2:	4628      	mov	r0, r5
 80054b4:	f7fa feac 	bl	8000210 <memchr>
 80054b8:	b108      	cbz	r0, 80054be <_printf_i+0x1f2>
 80054ba:	1b40      	subs	r0, r0, r5
 80054bc:	6060      	str	r0, [r4, #4]
 80054be:	6863      	ldr	r3, [r4, #4]
 80054c0:	6123      	str	r3, [r4, #16]
 80054c2:	2300      	movs	r3, #0
 80054c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054c8:	e7a8      	b.n	800541c <_printf_i+0x150>
 80054ca:	6923      	ldr	r3, [r4, #16]
 80054cc:	462a      	mov	r2, r5
 80054ce:	4649      	mov	r1, r9
 80054d0:	4640      	mov	r0, r8
 80054d2:	47d0      	blx	sl
 80054d4:	3001      	adds	r0, #1
 80054d6:	d0ab      	beq.n	8005430 <_printf_i+0x164>
 80054d8:	6823      	ldr	r3, [r4, #0]
 80054da:	079b      	lsls	r3, r3, #30
 80054dc:	d413      	bmi.n	8005506 <_printf_i+0x23a>
 80054de:	68e0      	ldr	r0, [r4, #12]
 80054e0:	9b03      	ldr	r3, [sp, #12]
 80054e2:	4298      	cmp	r0, r3
 80054e4:	bfb8      	it	lt
 80054e6:	4618      	movlt	r0, r3
 80054e8:	e7a4      	b.n	8005434 <_printf_i+0x168>
 80054ea:	2301      	movs	r3, #1
 80054ec:	4632      	mov	r2, r6
 80054ee:	4649      	mov	r1, r9
 80054f0:	4640      	mov	r0, r8
 80054f2:	47d0      	blx	sl
 80054f4:	3001      	adds	r0, #1
 80054f6:	d09b      	beq.n	8005430 <_printf_i+0x164>
 80054f8:	3501      	adds	r5, #1
 80054fa:	68e3      	ldr	r3, [r4, #12]
 80054fc:	9903      	ldr	r1, [sp, #12]
 80054fe:	1a5b      	subs	r3, r3, r1
 8005500:	42ab      	cmp	r3, r5
 8005502:	dcf2      	bgt.n	80054ea <_printf_i+0x21e>
 8005504:	e7eb      	b.n	80054de <_printf_i+0x212>
 8005506:	2500      	movs	r5, #0
 8005508:	f104 0619 	add.w	r6, r4, #25
 800550c:	e7f5      	b.n	80054fa <_printf_i+0x22e>
 800550e:	bf00      	nop
 8005510:	08005771 	.word	0x08005771
 8005514:	08005782 	.word	0x08005782

08005518 <_sbrk_r>:
 8005518:	b538      	push	{r3, r4, r5, lr}
 800551a:	4d06      	ldr	r5, [pc, #24]	; (8005534 <_sbrk_r+0x1c>)
 800551c:	2300      	movs	r3, #0
 800551e:	4604      	mov	r4, r0
 8005520:	4608      	mov	r0, r1
 8005522:	602b      	str	r3, [r5, #0]
 8005524:	f7fb feb6 	bl	8001294 <_sbrk>
 8005528:	1c43      	adds	r3, r0, #1
 800552a:	d102      	bne.n	8005532 <_sbrk_r+0x1a>
 800552c:	682b      	ldr	r3, [r5, #0]
 800552e:	b103      	cbz	r3, 8005532 <_sbrk_r+0x1a>
 8005530:	6023      	str	r3, [r4, #0]
 8005532:	bd38      	pop	{r3, r4, r5, pc}
 8005534:	200001c4 	.word	0x200001c4

08005538 <__sread>:
 8005538:	b510      	push	{r4, lr}
 800553a:	460c      	mov	r4, r1
 800553c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005540:	f000 f8a0 	bl	8005684 <_read_r>
 8005544:	2800      	cmp	r0, #0
 8005546:	bfab      	itete	ge
 8005548:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800554a:	89a3      	ldrhlt	r3, [r4, #12]
 800554c:	181b      	addge	r3, r3, r0
 800554e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005552:	bfac      	ite	ge
 8005554:	6563      	strge	r3, [r4, #84]	; 0x54
 8005556:	81a3      	strhlt	r3, [r4, #12]
 8005558:	bd10      	pop	{r4, pc}

0800555a <__swrite>:
 800555a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800555e:	461f      	mov	r7, r3
 8005560:	898b      	ldrh	r3, [r1, #12]
 8005562:	05db      	lsls	r3, r3, #23
 8005564:	4605      	mov	r5, r0
 8005566:	460c      	mov	r4, r1
 8005568:	4616      	mov	r6, r2
 800556a:	d505      	bpl.n	8005578 <__swrite+0x1e>
 800556c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005570:	2302      	movs	r3, #2
 8005572:	2200      	movs	r2, #0
 8005574:	f000 f868 	bl	8005648 <_lseek_r>
 8005578:	89a3      	ldrh	r3, [r4, #12]
 800557a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800557e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005582:	81a3      	strh	r3, [r4, #12]
 8005584:	4632      	mov	r2, r6
 8005586:	463b      	mov	r3, r7
 8005588:	4628      	mov	r0, r5
 800558a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800558e:	f000 b817 	b.w	80055c0 <_write_r>

08005592 <__sseek>:
 8005592:	b510      	push	{r4, lr}
 8005594:	460c      	mov	r4, r1
 8005596:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800559a:	f000 f855 	bl	8005648 <_lseek_r>
 800559e:	1c43      	adds	r3, r0, #1
 80055a0:	89a3      	ldrh	r3, [r4, #12]
 80055a2:	bf15      	itete	ne
 80055a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80055a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80055aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80055ae:	81a3      	strheq	r3, [r4, #12]
 80055b0:	bf18      	it	ne
 80055b2:	81a3      	strhne	r3, [r4, #12]
 80055b4:	bd10      	pop	{r4, pc}

080055b6 <__sclose>:
 80055b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055ba:	f000 b813 	b.w	80055e4 <_close_r>
	...

080055c0 <_write_r>:
 80055c0:	b538      	push	{r3, r4, r5, lr}
 80055c2:	4d07      	ldr	r5, [pc, #28]	; (80055e0 <_write_r+0x20>)
 80055c4:	4604      	mov	r4, r0
 80055c6:	4608      	mov	r0, r1
 80055c8:	4611      	mov	r1, r2
 80055ca:	2200      	movs	r2, #0
 80055cc:	602a      	str	r2, [r5, #0]
 80055ce:	461a      	mov	r2, r3
 80055d0:	f7fb fe0f 	bl	80011f2 <_write>
 80055d4:	1c43      	adds	r3, r0, #1
 80055d6:	d102      	bne.n	80055de <_write_r+0x1e>
 80055d8:	682b      	ldr	r3, [r5, #0]
 80055da:	b103      	cbz	r3, 80055de <_write_r+0x1e>
 80055dc:	6023      	str	r3, [r4, #0]
 80055de:	bd38      	pop	{r3, r4, r5, pc}
 80055e0:	200001c4 	.word	0x200001c4

080055e4 <_close_r>:
 80055e4:	b538      	push	{r3, r4, r5, lr}
 80055e6:	4d06      	ldr	r5, [pc, #24]	; (8005600 <_close_r+0x1c>)
 80055e8:	2300      	movs	r3, #0
 80055ea:	4604      	mov	r4, r0
 80055ec:	4608      	mov	r0, r1
 80055ee:	602b      	str	r3, [r5, #0]
 80055f0:	f7fb fe1b 	bl	800122a <_close>
 80055f4:	1c43      	adds	r3, r0, #1
 80055f6:	d102      	bne.n	80055fe <_close_r+0x1a>
 80055f8:	682b      	ldr	r3, [r5, #0]
 80055fa:	b103      	cbz	r3, 80055fe <_close_r+0x1a>
 80055fc:	6023      	str	r3, [r4, #0]
 80055fe:	bd38      	pop	{r3, r4, r5, pc}
 8005600:	200001c4 	.word	0x200001c4

08005604 <_fstat_r>:
 8005604:	b538      	push	{r3, r4, r5, lr}
 8005606:	4d07      	ldr	r5, [pc, #28]	; (8005624 <_fstat_r+0x20>)
 8005608:	2300      	movs	r3, #0
 800560a:	4604      	mov	r4, r0
 800560c:	4608      	mov	r0, r1
 800560e:	4611      	mov	r1, r2
 8005610:	602b      	str	r3, [r5, #0]
 8005612:	f7fb fe16 	bl	8001242 <_fstat>
 8005616:	1c43      	adds	r3, r0, #1
 8005618:	d102      	bne.n	8005620 <_fstat_r+0x1c>
 800561a:	682b      	ldr	r3, [r5, #0]
 800561c:	b103      	cbz	r3, 8005620 <_fstat_r+0x1c>
 800561e:	6023      	str	r3, [r4, #0]
 8005620:	bd38      	pop	{r3, r4, r5, pc}
 8005622:	bf00      	nop
 8005624:	200001c4 	.word	0x200001c4

08005628 <_isatty_r>:
 8005628:	b538      	push	{r3, r4, r5, lr}
 800562a:	4d06      	ldr	r5, [pc, #24]	; (8005644 <_isatty_r+0x1c>)
 800562c:	2300      	movs	r3, #0
 800562e:	4604      	mov	r4, r0
 8005630:	4608      	mov	r0, r1
 8005632:	602b      	str	r3, [r5, #0]
 8005634:	f7fb fe15 	bl	8001262 <_isatty>
 8005638:	1c43      	adds	r3, r0, #1
 800563a:	d102      	bne.n	8005642 <_isatty_r+0x1a>
 800563c:	682b      	ldr	r3, [r5, #0]
 800563e:	b103      	cbz	r3, 8005642 <_isatty_r+0x1a>
 8005640:	6023      	str	r3, [r4, #0]
 8005642:	bd38      	pop	{r3, r4, r5, pc}
 8005644:	200001c4 	.word	0x200001c4

08005648 <_lseek_r>:
 8005648:	b538      	push	{r3, r4, r5, lr}
 800564a:	4d07      	ldr	r5, [pc, #28]	; (8005668 <_lseek_r+0x20>)
 800564c:	4604      	mov	r4, r0
 800564e:	4608      	mov	r0, r1
 8005650:	4611      	mov	r1, r2
 8005652:	2200      	movs	r2, #0
 8005654:	602a      	str	r2, [r5, #0]
 8005656:	461a      	mov	r2, r3
 8005658:	f7fb fe0e 	bl	8001278 <_lseek>
 800565c:	1c43      	adds	r3, r0, #1
 800565e:	d102      	bne.n	8005666 <_lseek_r+0x1e>
 8005660:	682b      	ldr	r3, [r5, #0]
 8005662:	b103      	cbz	r3, 8005666 <_lseek_r+0x1e>
 8005664:	6023      	str	r3, [r4, #0]
 8005666:	bd38      	pop	{r3, r4, r5, pc}
 8005668:	200001c4 	.word	0x200001c4

0800566c <__malloc_lock>:
 800566c:	4801      	ldr	r0, [pc, #4]	; (8005674 <__malloc_lock+0x8>)
 800566e:	f7ff bb15 	b.w	8004c9c <__retarget_lock_acquire_recursive>
 8005672:	bf00      	nop
 8005674:	200001b8 	.word	0x200001b8

08005678 <__malloc_unlock>:
 8005678:	4801      	ldr	r0, [pc, #4]	; (8005680 <__malloc_unlock+0x8>)
 800567a:	f7ff bb10 	b.w	8004c9e <__retarget_lock_release_recursive>
 800567e:	bf00      	nop
 8005680:	200001b8 	.word	0x200001b8

08005684 <_read_r>:
 8005684:	b538      	push	{r3, r4, r5, lr}
 8005686:	4d07      	ldr	r5, [pc, #28]	; (80056a4 <_read_r+0x20>)
 8005688:	4604      	mov	r4, r0
 800568a:	4608      	mov	r0, r1
 800568c:	4611      	mov	r1, r2
 800568e:	2200      	movs	r2, #0
 8005690:	602a      	str	r2, [r5, #0]
 8005692:	461a      	mov	r2, r3
 8005694:	f7fb fd90 	bl	80011b8 <_read>
 8005698:	1c43      	adds	r3, r0, #1
 800569a:	d102      	bne.n	80056a2 <_read_r+0x1e>
 800569c:	682b      	ldr	r3, [r5, #0]
 800569e:	b103      	cbz	r3, 80056a2 <_read_r+0x1e>
 80056a0:	6023      	str	r3, [r4, #0]
 80056a2:	bd38      	pop	{r3, r4, r5, pc}
 80056a4:	200001c4 	.word	0x200001c4

080056a8 <_init>:
 80056a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056aa:	bf00      	nop
 80056ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056ae:	bc08      	pop	{r3}
 80056b0:	469e      	mov	lr, r3
 80056b2:	4770      	bx	lr

080056b4 <_fini>:
 80056b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056b6:	bf00      	nop
 80056b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056ba:	bc08      	pop	{r3}
 80056bc:	469e      	mov	lr, r3
 80056be:	4770      	bx	lr
