
MOTOR_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054b8  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  0800567c  0800567c  0001567c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005700  08005700  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005700  08005700  00015700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005708  08005708  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005708  08005708  00015708  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800570c  0800570c  0001570c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005710  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  20000070  08005780  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  08005780  000201c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012106  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002562  00000000  00000000  000321a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f18  00000000  00000000  00034708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e40  00000000  00000000  00035620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026041  00000000  00000000  00036460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011161  00000000  00000000  0005c4a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000da94b  00000000  00000000  0006d602  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00147f4d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000471c  00000000  00000000  00147fa0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000070 	.word	0x20000070
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08005664 	.word	0x08005664

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000074 	.word	0x20000074
 8000200:	08005664 	.word	0x08005664

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b08a      	sub	sp, #40	; 0x28
 800050c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	setbuf(stdout, NULL);
 800050e:	4b4d      	ldr	r3, [pc, #308]	; (8000644 <main+0x13c>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	689b      	ldr	r3, [r3, #8]
 8000514:	2100      	movs	r1, #0
 8000516:	4618      	mov	r0, r3
 8000518:	f004 fb46 	bl	8004ba8 <setbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051c:	f001 f9dc 	bl	80018d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000520:	f000 f89e 	bl	8000660 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000524:	f000 fb16 	bl	8000b54 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 8000528:	f000 fae6 	bl	8000af8 <_ZL19MX_USART2_UART_Initv>
  MX_TIM1_Init();
 800052c:	f000 f956 	bl	80007dc <_ZL12MX_TIM1_Initv>
  MX_TIM2_Init();
 8000530:	f000 fa34 	bl	800099c <_ZL12MX_TIM2_Initv>
  MX_CAN2_Init();
 8000534:	f000 f916 	bl	8000764 <_ZL12MX_CAN2_Initv>
  /* USER CODE BEGIN 2 */
	CAN_FilterTypeDef filter;
	  filter.FilterIdHigh         = 0;                        // フィルターID(上位16ビット)
 8000538:	2300      	movs	r3, #0
 800053a:	603b      	str	r3, [r7, #0]
	  filter.FilterIdLow          = 0;                        // フィルターID(下位16ビット)
 800053c:	2300      	movs	r3, #0
 800053e:	607b      	str	r3, [r7, #4]
	  filter.FilterMaskIdHigh     = 0;                        // フィルターマスク(上位16ビット)
 8000540:	2300      	movs	r3, #0
 8000542:	60bb      	str	r3, [r7, #8]
	  filter.FilterMaskIdLow      = 0;                        // フィルターマスク(下位16ビット)
 8000544:	2300      	movs	r3, #0
 8000546:	60fb      	str	r3, [r7, #12]
	  filter.FilterScale          = CAN_FILTERSCALE_32BIT;    // フィルタースケール
 8000548:	2301      	movs	r3, #1
 800054a:	61fb      	str	r3, [r7, #28]
	  filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;         // フィルターに割り当てるFIFO
 800054c:	2300      	movs	r3, #0
 800054e:	613b      	str	r3, [r7, #16]
	  filter.FilterBank           = 14;                        // フィルターバンクNo
 8000550:	230e      	movs	r3, #14
 8000552:	617b      	str	r3, [r7, #20]
	  filter.FilterMode           = CAN_FILTERMODE_IDMASK;    // フィルターモード
 8000554:	2300      	movs	r3, #0
 8000556:	61bb      	str	r3, [r7, #24]
	  filter.SlaveStartFilterBank = 14;                       // スレーブCANの開始フィルターバンクNo
 8000558:	230e      	movs	r3, #14
 800055a:	627b      	str	r3, [r7, #36]	; 0x24
	  filter.FilterActivation     = ENABLE;                   // フィルター無効／有効
 800055c:	2301      	movs	r3, #1
 800055e:	623b      	str	r3, [r7, #32]





HAL_CAN_ConfigFilter(&hcan2, &filter);
 8000560:	463b      	mov	r3, r7
 8000562:	4619      	mov	r1, r3
 8000564:	4838      	ldr	r0, [pc, #224]	; (8000648 <main+0x140>)
 8000566:	f001 fb49 	bl	8001bfc <HAL_CAN_ConfigFilter>
HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800056a:	2100      	movs	r1, #0
 800056c:	4837      	ldr	r0, [pc, #220]	; (800064c <main+0x144>)
 800056e:	f003 f971 	bl	8003854 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000572:	2104      	movs	r1, #4
 8000574:	4835      	ldr	r0, [pc, #212]	; (800064c <main+0x144>)
 8000576:	f003 f96d 	bl	8003854 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800057a:	2108      	movs	r1, #8
 800057c:	4833      	ldr	r0, [pc, #204]	; (800064c <main+0x144>)
 800057e:	f003 f969 	bl	8003854 <HAL_TIM_PWM_Start>
  HAL_CAN_Start(&hcan2);
 8000582:	4831      	ldr	r0, [pc, #196]	; (8000648 <main+0x140>)
 8000584:	f001 fc1a 	bl	8001dbc <HAL_CAN_Start>
  // 割り込み有効
  HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000588:	2102      	movs	r1, #2
 800058a:	482f      	ldr	r0, [pc, #188]	; (8000648 <main+0x140>)
 800058c:	f001 fd6c 	bl	8002068 <HAL_CAN_ActivateNotification>
  printf("start\n");
 8000590:	482f      	ldr	r0, [pc, #188]	; (8000650 <main+0x148>)
 8000592:	f004 fb01 	bl	8004b98 <puts>


  HAL_GPIO_WritePin(GPIOC,PSB1_Pin,GPIO_PIN_SET);
 8000596:	2201      	movs	r2, #1
 8000598:	2102      	movs	r1, #2
 800059a:	482e      	ldr	r0, [pc, #184]	; (8000654 <main+0x14c>)
 800059c:	f002 fa60 	bl	8002a60 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB,BRK1_Pin,GPIO_PIN_RESET);
 80005a0:	2200      	movs	r2, #0
 80005a2:	2101      	movs	r1, #1
 80005a4:	482c      	ldr	r0, [pc, #176]	; (8000658 <main+0x150>)
 80005a6:	f002 fa5b 	bl	8002a60 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC,PSB2_Pin,GPIO_PIN_SET);
 80005aa:	2201      	movs	r2, #1
 80005ac:	2101      	movs	r1, #1
 80005ae:	4829      	ldr	r0, [pc, #164]	; (8000654 <main+0x14c>)
 80005b0:	f002 fa56 	bl	8002a60 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC,BRK2_Pin,GPIO_PIN_RESET);
 80005b4:	2200      	movs	r2, #0
 80005b6:	2104      	movs	r1, #4
 80005b8:	4826      	ldr	r0, [pc, #152]	; (8000654 <main+0x14c>)
 80005ba:	f002 fa51 	bl	8002a60 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC,PSB3_Pin,GPIO_PIN_SET);
 80005be:	2201      	movs	r2, #1
 80005c0:	2110      	movs	r1, #16
 80005c2:	4824      	ldr	r0, [pc, #144]	; (8000654 <main+0x14c>)
 80005c4:	f002 fa4c 	bl	8002a60 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB,BRK3_Pin,GPIO_PIN_RESET);
 80005c8:	2200      	movs	r2, #0
 80005ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005ce:	4822      	ldr	r0, [pc, #136]	; (8000658 <main+0x150>)
 80005d0:	f002 fa46 	bl	8002a60 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOA, LED1_Pin, GPIO_PIN_SET);
 80005d4:	2201      	movs	r2, #1
 80005d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005da:	4820      	ldr	r0, [pc, #128]	; (800065c <main+0x154>)
 80005dc:	f002 fa40 	bl	8002a60 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80005e0:	2064      	movs	r0, #100	; 0x64
 80005e2:	f001 f9eb 	bl	80019bc <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, LED2_Pin, GPIO_PIN_SET);
 80005e6:	2201      	movs	r2, #1
 80005e8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005ec:	481b      	ldr	r0, [pc, #108]	; (800065c <main+0x154>)
 80005ee:	f002 fa37 	bl	8002a60 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80005f2:	2064      	movs	r0, #100	; 0x64
 80005f4:	f001 f9e2 	bl	80019bc <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, LED3_Pin, GPIO_PIN_SET);
 80005f8:	2201      	movs	r2, #1
 80005fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005fe:	4817      	ldr	r0, [pc, #92]	; (800065c <main+0x154>)
 8000600:	f002 fa2e 	bl	8002a60 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000604:	2064      	movs	r0, #100	; 0x64
 8000606:	f001 f9d9 	bl	80019bc <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, LED1_Pin, GPIO_PIN_RESET);
 800060a:	2200      	movs	r2, #0
 800060c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000610:	4812      	ldr	r0, [pc, #72]	; (800065c <main+0x154>)
 8000612:	f002 fa25 	bl	8002a60 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000616:	2064      	movs	r0, #100	; 0x64
 8000618:	f001 f9d0 	bl	80019bc <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, LED2_Pin, GPIO_PIN_RESET);
 800061c:	2200      	movs	r2, #0
 800061e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000622:	480e      	ldr	r0, [pc, #56]	; (800065c <main+0x154>)
 8000624:	f002 fa1c 	bl	8002a60 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000628:	2064      	movs	r0, #100	; 0x64
 800062a:	f001 f9c7 	bl	80019bc <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, LED3_Pin, GPIO_PIN_RESET);
 800062e:	2200      	movs	r2, #0
 8000630:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000634:	4809      	ldr	r0, [pc, #36]	; (800065c <main+0x154>)
 8000636:	f002 fa13 	bl	8002a60 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 800063a:	2064      	movs	r0, #100	; 0x64
 800063c:	f001 f9be 	bl	80019bc <HAL_Delay>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000640:	e7fe      	b.n	8000640 <main+0x138>
 8000642:	bf00      	nop
 8000644:	2000000c 	.word	0x2000000c
 8000648:	2000008c 	.word	0x2000008c
 800064c:	200000b4 	.word	0x200000b4
 8000650:	0800567c 	.word	0x0800567c
 8000654:	40020800 	.word	0x40020800
 8000658:	40020400 	.word	0x40020400
 800065c:	40020000 	.word	0x40020000

08000660 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b094      	sub	sp, #80	; 0x50
 8000664:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000666:	f107 031c 	add.w	r3, r7, #28
 800066a:	2234      	movs	r2, #52	; 0x34
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f004 fa1c 	bl	8004aac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000674:	f107 0308 	add.w	r3, r7, #8
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	605a      	str	r2, [r3, #4]
 800067e:	609a      	str	r2, [r3, #8]
 8000680:	60da      	str	r2, [r3, #12]
 8000682:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000684:	2300      	movs	r3, #0
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	4b34      	ldr	r3, [pc, #208]	; (800075c <_Z18SystemClock_Configv+0xfc>)
 800068a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068c:	4a33      	ldr	r2, [pc, #204]	; (800075c <_Z18SystemClock_Configv+0xfc>)
 800068e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000692:	6413      	str	r3, [r2, #64]	; 0x40
 8000694:	4b31      	ldr	r3, [pc, #196]	; (800075c <_Z18SystemClock_Configv+0xfc>)
 8000696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000698:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800069c:	607b      	str	r3, [r7, #4]
 800069e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006a0:	2300      	movs	r3, #0
 80006a2:	603b      	str	r3, [r7, #0]
 80006a4:	4b2e      	ldr	r3, [pc, #184]	; (8000760 <_Z18SystemClock_Configv+0x100>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a2d      	ldr	r2, [pc, #180]	; (8000760 <_Z18SystemClock_Configv+0x100>)
 80006aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006ae:	6013      	str	r3, [r2, #0]
 80006b0:	4b2b      	ldr	r3, [pc, #172]	; (8000760 <_Z18SystemClock_Configv+0x100>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006b8:	603b      	str	r3, [r7, #0]
 80006ba:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006bc:	2302      	movs	r3, #2
 80006be:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006c0:	2301      	movs	r3, #1
 80006c2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c4:	2310      	movs	r3, #16
 80006c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c8:	2302      	movs	r3, #2
 80006ca:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006cc:	2300      	movs	r3, #0
 80006ce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006d0:	2308      	movs	r3, #8
 80006d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80006d4:	23b4      	movs	r3, #180	; 0xb4
 80006d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006d8:	2302      	movs	r3, #2
 80006da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006dc:	2302      	movs	r3, #2
 80006de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006e0:	2302      	movs	r3, #2
 80006e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e4:	f107 031c 	add.w	r3, r7, #28
 80006e8:	4618      	mov	r0, r3
 80006ea:	f002 fd6d 	bl	80031c8 <HAL_RCC_OscConfig>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	bf14      	ite	ne
 80006f4:	2301      	movne	r3, #1
 80006f6:	2300      	moveq	r3, #0
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 80006fe:	f000 fd35 	bl	800116c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000702:	f002 f9c7 	bl	8002a94 <HAL_PWREx_EnableOverDrive>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	bf14      	ite	ne
 800070c:	2301      	movne	r3, #1
 800070e:	2300      	moveq	r3, #0
 8000710:	b2db      	uxtb	r3, r3
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <_Z18SystemClock_Configv+0xba>
  {
    Error_Handler();
 8000716:	f000 fd29 	bl	800116c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071a:	230f      	movs	r3, #15
 800071c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800071e:	2302      	movs	r3, #2
 8000720:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000722:	2300      	movs	r3, #0
 8000724:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000726:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800072a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800072c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000730:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000732:	f107 0308 	add.w	r3, r7, #8
 8000736:	2105      	movs	r1, #5
 8000738:	4618      	mov	r0, r3
 800073a:	f002 f9fb 	bl	8002b34 <HAL_RCC_ClockConfig>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	bf14      	ite	ne
 8000744:	2301      	movne	r3, #1
 8000746:	2300      	moveq	r3, #0
 8000748:	b2db      	uxtb	r3, r3
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <_Z18SystemClock_Configv+0xf2>
  {
    Error_Handler();
 800074e:	f000 fd0d 	bl	800116c <Error_Handler>
  }
}
 8000752:	bf00      	nop
 8000754:	3750      	adds	r7, #80	; 0x50
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	40023800 	.word	0x40023800
 8000760:	40007000 	.word	0x40007000

08000764 <_ZL12MX_CAN2_Initv>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000768:	4b1a      	ldr	r3, [pc, #104]	; (80007d4 <_ZL12MX_CAN2_Initv+0x70>)
 800076a:	4a1b      	ldr	r2, [pc, #108]	; (80007d8 <_ZL12MX_CAN2_Initv+0x74>)
 800076c:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 9;
 800076e:	4b19      	ldr	r3, [pc, #100]	; (80007d4 <_ZL12MX_CAN2_Initv+0x70>)
 8000770:	2209      	movs	r2, #9
 8000772:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000774:	4b17      	ldr	r3, [pc, #92]	; (80007d4 <_ZL12MX_CAN2_Initv+0x70>)
 8000776:	2200      	movs	r2, #0
 8000778:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_4TQ;
 800077a:	4b16      	ldr	r3, [pc, #88]	; (80007d4 <_ZL12MX_CAN2_Initv+0x70>)
 800077c:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 8000780:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_4TQ;
 8000782:	4b14      	ldr	r3, [pc, #80]	; (80007d4 <_ZL12MX_CAN2_Initv+0x70>)
 8000784:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000788:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_5TQ;
 800078a:	4b12      	ldr	r3, [pc, #72]	; (80007d4 <_ZL12MX_CAN2_Initv+0x70>)
 800078c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000790:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000792:	4b10      	ldr	r3, [pc, #64]	; (80007d4 <_ZL12MX_CAN2_Initv+0x70>)
 8000794:	2200      	movs	r2, #0
 8000796:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000798:	4b0e      	ldr	r3, [pc, #56]	; (80007d4 <_ZL12MX_CAN2_Initv+0x70>)
 800079a:	2200      	movs	r2, #0
 800079c:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 800079e:	4b0d      	ldr	r3, [pc, #52]	; (80007d4 <_ZL12MX_CAN2_Initv+0x70>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80007a4:	4b0b      	ldr	r3, [pc, #44]	; (80007d4 <_ZL12MX_CAN2_Initv+0x70>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80007aa:	4b0a      	ldr	r3, [pc, #40]	; (80007d4 <_ZL12MX_CAN2_Initv+0x70>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80007b0:	4b08      	ldr	r3, [pc, #32]	; (80007d4 <_ZL12MX_CAN2_Initv+0x70>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80007b6:	4807      	ldr	r0, [pc, #28]	; (80007d4 <_ZL12MX_CAN2_Initv+0x70>)
 80007b8:	f001 f924 	bl	8001a04 <HAL_CAN_Init>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	bf14      	ite	ne
 80007c2:	2301      	movne	r3, #1
 80007c4:	2300      	moveq	r3, #0
 80007c6:	b2db      	uxtb	r3, r3
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <_ZL12MX_CAN2_Initv+0x6c>
  {
    Error_Handler();
 80007cc:	f000 fcce 	bl	800116c <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80007d0:	bf00      	nop
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	2000008c 	.word	0x2000008c
 80007d8:	40006800 	.word	0x40006800

080007dc <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b096      	sub	sp, #88	; 0x58
 80007e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007e2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	605a      	str	r2, [r3, #4]
 80007ec:	609a      	str	r2, [r3, #8]
 80007ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007f0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80007f4:	2200      	movs	r2, #0
 80007f6:	601a      	str	r2, [r3, #0]
 80007f8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	605a      	str	r2, [r3, #4]
 8000804:	609a      	str	r2, [r3, #8]
 8000806:	60da      	str	r2, [r3, #12]
 8000808:	611a      	str	r2, [r3, #16]
 800080a:	615a      	str	r2, [r3, #20]
 800080c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800080e:	1d3b      	adds	r3, r7, #4
 8000810:	2220      	movs	r2, #32
 8000812:	2100      	movs	r1, #0
 8000814:	4618      	mov	r0, r3
 8000816:	f004 f949 	bl	8004aac <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800081a:	4b5e      	ldr	r3, [pc, #376]	; (8000994 <_ZL12MX_TIM1_Initv+0x1b8>)
 800081c:	4a5e      	ldr	r2, [pc, #376]	; (8000998 <_ZL12MX_TIM1_Initv+0x1bc>)
 800081e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000820:	4b5c      	ldr	r3, [pc, #368]	; (8000994 <_ZL12MX_TIM1_Initv+0x1b8>)
 8000822:	2200      	movs	r2, #0
 8000824:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000826:	4b5b      	ldr	r3, [pc, #364]	; (8000994 <_ZL12MX_TIM1_Initv+0x1b8>)
 8000828:	2200      	movs	r2, #0
 800082a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800082c:	4b59      	ldr	r3, [pc, #356]	; (8000994 <_ZL12MX_TIM1_Initv+0x1b8>)
 800082e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000832:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000834:	4b57      	ldr	r3, [pc, #348]	; (8000994 <_ZL12MX_TIM1_Initv+0x1b8>)
 8000836:	2200      	movs	r2, #0
 8000838:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800083a:	4b56      	ldr	r3, [pc, #344]	; (8000994 <_ZL12MX_TIM1_Initv+0x1b8>)
 800083c:	2200      	movs	r2, #0
 800083e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000840:	4b54      	ldr	r3, [pc, #336]	; (8000994 <_ZL12MX_TIM1_Initv+0x1b8>)
 8000842:	2200      	movs	r2, #0
 8000844:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000846:	4853      	ldr	r0, [pc, #332]	; (8000994 <_ZL12MX_TIM1_Initv+0x1b8>)
 8000848:	f002 ff5c 	bl	8003704 <HAL_TIM_Base_Init>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	bf14      	ite	ne
 8000852:	2301      	movne	r3, #1
 8000854:	2300      	moveq	r3, #0
 8000856:	b2db      	uxtb	r3, r3
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <_ZL12MX_TIM1_Initv+0x84>
  {
    Error_Handler();
 800085c:	f000 fc86 	bl	800116c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000860:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000864:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000866:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800086a:	4619      	mov	r1, r3
 800086c:	4849      	ldr	r0, [pc, #292]	; (8000994 <_ZL12MX_TIM1_Initv+0x1b8>)
 800086e:	f003 f97b 	bl	8003b68 <HAL_TIM_ConfigClockSource>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	bf14      	ite	ne
 8000878:	2301      	movne	r3, #1
 800087a:	2300      	moveq	r3, #0
 800087c:	b2db      	uxtb	r3, r3
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <_ZL12MX_TIM1_Initv+0xaa>
  {
    Error_Handler();
 8000882:	f000 fc73 	bl	800116c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000886:	4843      	ldr	r0, [pc, #268]	; (8000994 <_ZL12MX_TIM1_Initv+0x1b8>)
 8000888:	f002 ff8b 	bl	80037a2 <HAL_TIM_PWM_Init>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	bf14      	ite	ne
 8000892:	2301      	movne	r3, #1
 8000894:	2300      	moveq	r3, #0
 8000896:	b2db      	uxtb	r3, r3
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <_ZL12MX_TIM1_Initv+0xc4>
  {
    Error_Handler();
 800089c:	f000 fc66 	bl	800116c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008a0:	2300      	movs	r3, #0
 80008a2:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008a4:	2300      	movs	r3, #0
 80008a6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008a8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80008ac:	4619      	mov	r1, r3
 80008ae:	4839      	ldr	r0, [pc, #228]	; (8000994 <_ZL12MX_TIM1_Initv+0x1b8>)
 80008b0:	f003 fd32 	bl	8004318 <HAL_TIMEx_MasterConfigSynchronization>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	bf14      	ite	ne
 80008ba:	2301      	movne	r3, #1
 80008bc:	2300      	moveq	r3, #0
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <_ZL12MX_TIM1_Initv+0xec>
  {
    Error_Handler();
 80008c4:	f000 fc52 	bl	800116c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008c8:	2360      	movs	r3, #96	; 0x60
 80008ca:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80008cc:	2300      	movs	r3, #0
 80008ce:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008d0:	2300      	movs	r3, #0
 80008d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008d4:	2300      	movs	r3, #0
 80008d6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008d8:	2300      	movs	r3, #0
 80008da:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008dc:	2300      	movs	r3, #0
 80008de:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008e0:	2300      	movs	r3, #0
 80008e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008e8:	2200      	movs	r2, #0
 80008ea:	4619      	mov	r1, r3
 80008ec:	4829      	ldr	r0, [pc, #164]	; (8000994 <_ZL12MX_TIM1_Initv+0x1b8>)
 80008ee:	f003 f879 	bl	80039e4 <HAL_TIM_PWM_ConfigChannel>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	bf14      	ite	ne
 80008f8:	2301      	movne	r3, #1
 80008fa:	2300      	moveq	r3, #0
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <_ZL12MX_TIM1_Initv+0x12a>
  {
    Error_Handler();
 8000902:	f000 fc33 	bl	800116c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000906:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800090a:	2204      	movs	r2, #4
 800090c:	4619      	mov	r1, r3
 800090e:	4821      	ldr	r0, [pc, #132]	; (8000994 <_ZL12MX_TIM1_Initv+0x1b8>)
 8000910:	f003 f868 	bl	80039e4 <HAL_TIM_PWM_ConfigChannel>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	bf14      	ite	ne
 800091a:	2301      	movne	r3, #1
 800091c:	2300      	moveq	r3, #0
 800091e:	b2db      	uxtb	r3, r3
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <_ZL12MX_TIM1_Initv+0x14c>
  {
    Error_Handler();
 8000924:	f000 fc22 	bl	800116c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000928:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800092c:	2208      	movs	r2, #8
 800092e:	4619      	mov	r1, r3
 8000930:	4818      	ldr	r0, [pc, #96]	; (8000994 <_ZL12MX_TIM1_Initv+0x1b8>)
 8000932:	f003 f857 	bl	80039e4 <HAL_TIM_PWM_ConfigChannel>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	bf14      	ite	ne
 800093c:	2301      	movne	r3, #1
 800093e:	2300      	moveq	r3, #0
 8000940:	b2db      	uxtb	r3, r3
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <_ZL12MX_TIM1_Initv+0x16e>
  {
    Error_Handler();
 8000946:	f000 fc11 	bl	800116c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800094a:	2300      	movs	r3, #0
 800094c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800094e:	2300      	movs	r3, #0
 8000950:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000952:	2300      	movs	r3, #0
 8000954:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000956:	2300      	movs	r3, #0
 8000958:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800095a:	2300      	movs	r3, #0
 800095c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800095e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000962:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000964:	2300      	movs	r3, #0
 8000966:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000968:	1d3b      	adds	r3, r7, #4
 800096a:	4619      	mov	r1, r3
 800096c:	4809      	ldr	r0, [pc, #36]	; (8000994 <_ZL12MX_TIM1_Initv+0x1b8>)
 800096e:	f003 fd4f 	bl	8004410 <HAL_TIMEx_ConfigBreakDeadTime>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	bf14      	ite	ne
 8000978:	2301      	movne	r3, #1
 800097a:	2300      	moveq	r3, #0
 800097c:	b2db      	uxtb	r3, r3
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <_ZL12MX_TIM1_Initv+0x1aa>
  {
    Error_Handler();
 8000982:	f000 fbf3 	bl	800116c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000986:	4803      	ldr	r0, [pc, #12]	; (8000994 <_ZL12MX_TIM1_Initv+0x1b8>)
 8000988:	f000 fdd4 	bl	8001534 <HAL_TIM_MspPostInit>

}
 800098c:	bf00      	nop
 800098e:	3758      	adds	r7, #88	; 0x58
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	200000b4 	.word	0x200000b4
 8000998:	40010000 	.word	0x40010000

0800099c <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b08e      	sub	sp, #56	; 0x38
 80009a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009a6:	2200      	movs	r2, #0
 80009a8:	601a      	str	r2, [r3, #0]
 80009aa:	605a      	str	r2, [r3, #4]
 80009ac:	609a      	str	r2, [r3, #8]
 80009ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009b0:	f107 0320 	add.w	r3, r7, #32
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009ba:	1d3b      	adds	r3, r7, #4
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	605a      	str	r2, [r3, #4]
 80009c2:	609a      	str	r2, [r3, #8]
 80009c4:	60da      	str	r2, [r3, #12]
 80009c6:	611a      	str	r2, [r3, #16]
 80009c8:	615a      	str	r2, [r3, #20]
 80009ca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009cc:	4b49      	ldr	r3, [pc, #292]	; (8000af4 <_ZL12MX_TIM2_Initv+0x158>)
 80009ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009d2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80009d4:	4b47      	ldr	r3, [pc, #284]	; (8000af4 <_ZL12MX_TIM2_Initv+0x158>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009da:	4b46      	ldr	r3, [pc, #280]	; (8000af4 <_ZL12MX_TIM2_Initv+0x158>)
 80009dc:	2200      	movs	r2, #0
 80009de:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80009e0:	4b44      	ldr	r3, [pc, #272]	; (8000af4 <_ZL12MX_TIM2_Initv+0x158>)
 80009e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009e6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009e8:	4b42      	ldr	r3, [pc, #264]	; (8000af4 <_ZL12MX_TIM2_Initv+0x158>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ee:	4b41      	ldr	r3, [pc, #260]	; (8000af4 <_ZL12MX_TIM2_Initv+0x158>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009f4:	483f      	ldr	r0, [pc, #252]	; (8000af4 <_ZL12MX_TIM2_Initv+0x158>)
 80009f6:	f002 fe85 	bl	8003704 <HAL_TIM_Base_Init>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	bf14      	ite	ne
 8000a00:	2301      	movne	r3, #1
 8000a02:	2300      	moveq	r3, #0
 8000a04:	b2db      	uxtb	r3, r3
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <_ZL12MX_TIM2_Initv+0x72>
  {
    Error_Handler();
 8000a0a:	f000 fbaf 	bl	800116c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a12:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a14:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4836      	ldr	r0, [pc, #216]	; (8000af4 <_ZL12MX_TIM2_Initv+0x158>)
 8000a1c:	f003 f8a4 	bl	8003b68 <HAL_TIM_ConfigClockSource>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	bf14      	ite	ne
 8000a26:	2301      	movne	r3, #1
 8000a28:	2300      	moveq	r3, #0
 8000a2a:	b2db      	uxtb	r3, r3
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <_ZL12MX_TIM2_Initv+0x98>
  {
    Error_Handler();
 8000a30:	f000 fb9c 	bl	800116c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000a34:	482f      	ldr	r0, [pc, #188]	; (8000af4 <_ZL12MX_TIM2_Initv+0x158>)
 8000a36:	f002 feb4 	bl	80037a2 <HAL_TIM_PWM_Init>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	bf14      	ite	ne
 8000a40:	2301      	movne	r3, #1
 8000a42:	2300      	moveq	r3, #0
 8000a44:	b2db      	uxtb	r3, r3
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <_ZL12MX_TIM2_Initv+0xb2>
  {
    Error_Handler();
 8000a4a:	f000 fb8f 	bl	800116c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a52:	2300      	movs	r3, #0
 8000a54:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a56:	f107 0320 	add.w	r3, r7, #32
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4825      	ldr	r0, [pc, #148]	; (8000af4 <_ZL12MX_TIM2_Initv+0x158>)
 8000a5e:	f003 fc5b 	bl	8004318 <HAL_TIMEx_MasterConfigSynchronization>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	bf14      	ite	ne
 8000a68:	2301      	movne	r3, #1
 8000a6a:	2300      	moveq	r3, #0
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <_ZL12MX_TIM2_Initv+0xda>
  {
    Error_Handler();
 8000a72:	f000 fb7b 	bl	800116c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a76:	2360      	movs	r3, #96	; 0x60
 8000a78:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a82:	2300      	movs	r3, #0
 8000a84:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a86:	1d3b      	adds	r3, r7, #4
 8000a88:	2200      	movs	r2, #0
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4819      	ldr	r0, [pc, #100]	; (8000af4 <_ZL12MX_TIM2_Initv+0x158>)
 8000a8e:	f002 ffa9 	bl	80039e4 <HAL_TIM_PWM_ConfigChannel>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	bf14      	ite	ne
 8000a98:	2301      	movne	r3, #1
 8000a9a:	2300      	moveq	r3, #0
 8000a9c:	b2db      	uxtb	r3, r3
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <_ZL12MX_TIM2_Initv+0x10a>
  {
    Error_Handler();
 8000aa2:	f000 fb63 	bl	800116c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000aa6:	1d3b      	adds	r3, r7, #4
 8000aa8:	2204      	movs	r2, #4
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4811      	ldr	r0, [pc, #68]	; (8000af4 <_ZL12MX_TIM2_Initv+0x158>)
 8000aae:	f002 ff99 	bl	80039e4 <HAL_TIM_PWM_ConfigChannel>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	bf14      	ite	ne
 8000ab8:	2301      	movne	r3, #1
 8000aba:	2300      	moveq	r3, #0
 8000abc:	b2db      	uxtb	r3, r3
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <_ZL12MX_TIM2_Initv+0x12a>
  {
    Error_Handler();
 8000ac2:	f000 fb53 	bl	800116c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ac6:	1d3b      	adds	r3, r7, #4
 8000ac8:	2208      	movs	r2, #8
 8000aca:	4619      	mov	r1, r3
 8000acc:	4809      	ldr	r0, [pc, #36]	; (8000af4 <_ZL12MX_TIM2_Initv+0x158>)
 8000ace:	f002 ff89 	bl	80039e4 <HAL_TIM_PWM_ConfigChannel>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	bf14      	ite	ne
 8000ad8:	2301      	movne	r3, #1
 8000ada:	2300      	moveq	r3, #0
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <_ZL12MX_TIM2_Initv+0x14a>
  {
    Error_Handler();
 8000ae2:	f000 fb43 	bl	800116c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000ae6:	4803      	ldr	r0, [pc, #12]	; (8000af4 <_ZL12MX_TIM2_Initv+0x158>)
 8000ae8:	f000 fd24 	bl	8001534 <HAL_TIM_MspPostInit>

}
 8000aec:	bf00      	nop
 8000aee:	3738      	adds	r7, #56	; 0x38
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	200000fc 	.word	0x200000fc

08000af8 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000afc:	4b13      	ldr	r3, [pc, #76]	; (8000b4c <_ZL19MX_USART2_UART_Initv+0x54>)
 8000afe:	4a14      	ldr	r2, [pc, #80]	; (8000b50 <_ZL19MX_USART2_UART_Initv+0x58>)
 8000b00:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b02:	4b12      	ldr	r3, [pc, #72]	; (8000b4c <_ZL19MX_USART2_UART_Initv+0x54>)
 8000b04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b08:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b0a:	4b10      	ldr	r3, [pc, #64]	; (8000b4c <_ZL19MX_USART2_UART_Initv+0x54>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b10:	4b0e      	ldr	r3, [pc, #56]	; (8000b4c <_ZL19MX_USART2_UART_Initv+0x54>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b16:	4b0d      	ldr	r3, [pc, #52]	; (8000b4c <_ZL19MX_USART2_UART_Initv+0x54>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b1c:	4b0b      	ldr	r3, [pc, #44]	; (8000b4c <_ZL19MX_USART2_UART_Initv+0x54>)
 8000b1e:	220c      	movs	r2, #12
 8000b20:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b22:	4b0a      	ldr	r3, [pc, #40]	; (8000b4c <_ZL19MX_USART2_UART_Initv+0x54>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b28:	4b08      	ldr	r3, [pc, #32]	; (8000b4c <_ZL19MX_USART2_UART_Initv+0x54>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b2e:	4807      	ldr	r0, [pc, #28]	; (8000b4c <_ZL19MX_USART2_UART_Initv+0x54>)
 8000b30:	f003 fcc0 	bl	80044b4 <HAL_UART_Init>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	bf14      	ite	ne
 8000b3a:	2301      	movne	r3, #1
 8000b3c:	2300      	moveq	r3, #0
 8000b3e:	b2db      	uxtb	r3, r3
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8000b44:	f000 fb12 	bl	800116c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b48:	bf00      	nop
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	20000144 	.word	0x20000144
 8000b50:	40004400 	.word	0x40004400

08000b54 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b08a      	sub	sp, #40	; 0x28
 8000b58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5a:	f107 0314 	add.w	r3, r7, #20
 8000b5e:	2200      	movs	r2, #0
 8000b60:	601a      	str	r2, [r3, #0]
 8000b62:	605a      	str	r2, [r3, #4]
 8000b64:	609a      	str	r2, [r3, #8]
 8000b66:	60da      	str	r2, [r3, #12]
 8000b68:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	613b      	str	r3, [r7, #16]
 8000b6e:	4b53      	ldr	r3, [pc, #332]	; (8000cbc <_ZL12MX_GPIO_Initv+0x168>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	4a52      	ldr	r2, [pc, #328]	; (8000cbc <_ZL12MX_GPIO_Initv+0x168>)
 8000b74:	f043 0304 	orr.w	r3, r3, #4
 8000b78:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7a:	4b50      	ldr	r3, [pc, #320]	; (8000cbc <_ZL12MX_GPIO_Initv+0x168>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	f003 0304 	and.w	r3, r3, #4
 8000b82:	613b      	str	r3, [r7, #16]
 8000b84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	60fb      	str	r3, [r7, #12]
 8000b8a:	4b4c      	ldr	r3, [pc, #304]	; (8000cbc <_ZL12MX_GPIO_Initv+0x168>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	4a4b      	ldr	r2, [pc, #300]	; (8000cbc <_ZL12MX_GPIO_Initv+0x168>)
 8000b90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b94:	6313      	str	r3, [r2, #48]	; 0x30
 8000b96:	4b49      	ldr	r3, [pc, #292]	; (8000cbc <_ZL12MX_GPIO_Initv+0x168>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	60bb      	str	r3, [r7, #8]
 8000ba6:	4b45      	ldr	r3, [pc, #276]	; (8000cbc <_ZL12MX_GPIO_Initv+0x168>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	4a44      	ldr	r2, [pc, #272]	; (8000cbc <_ZL12MX_GPIO_Initv+0x168>)
 8000bac:	f043 0301 	orr.w	r3, r3, #1
 8000bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb2:	4b42      	ldr	r3, [pc, #264]	; (8000cbc <_ZL12MX_GPIO_Initv+0x168>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	f003 0301 	and.w	r3, r3, #1
 8000bba:	60bb      	str	r3, [r7, #8]
 8000bbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	607b      	str	r3, [r7, #4]
 8000bc2:	4b3e      	ldr	r3, [pc, #248]	; (8000cbc <_ZL12MX_GPIO_Initv+0x168>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	4a3d      	ldr	r2, [pc, #244]	; (8000cbc <_ZL12MX_GPIO_Initv+0x168>)
 8000bc8:	f043 0302 	orr.w	r3, r3, #2
 8000bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bce:	4b3b      	ldr	r3, [pc, #236]	; (8000cbc <_ZL12MX_GPIO_Initv+0x168>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	f003 0302 	and.w	r3, r3, #2
 8000bd6:	607b      	str	r3, [r7, #4]
 8000bd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	603b      	str	r3, [r7, #0]
 8000bde:	4b37      	ldr	r3, [pc, #220]	; (8000cbc <_ZL12MX_GPIO_Initv+0x168>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	4a36      	ldr	r2, [pc, #216]	; (8000cbc <_ZL12MX_GPIO_Initv+0x168>)
 8000be4:	f043 0308 	orr.w	r3, r3, #8
 8000be8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bea:	4b34      	ldr	r3, [pc, #208]	; (8000cbc <_ZL12MX_GPIO_Initv+0x168>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	f003 0308 	and.w	r3, r3, #8
 8000bf2:	603b      	str	r3, [r7, #0]
 8000bf4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PSB2_Pin|PSB1_Pin|BRK2_Pin|BATT_Pin
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	211f      	movs	r1, #31
 8000bfa:	4831      	ldr	r0, [pc, #196]	; (8000cc0 <_ZL12MX_GPIO_Initv+0x16c>)
 8000bfc:	f001 ff30 	bl	8002a60 <HAL_GPIO_WritePin>
                          |PSB3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DIRECTION3_Pin|DIRECTION2_Pin|DIRECTION1_Pin|LED6_Pin
 8000c00:	2200      	movs	r2, #0
 8000c02:	f64e 0113 	movw	r1, #59411	; 0xe813
 8000c06:	482f      	ldr	r0, [pc, #188]	; (8000cc4 <_ZL12MX_GPIO_Initv+0x170>)
 8000c08:	f001 ff2a 	bl	8002a60 <HAL_GPIO_WritePin>
                          |LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BRK1_Pin|PSB5_Pin|BRK5_Pin|PSB6_Pin
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	f24f 0107 	movw	r1, #61447	; 0xf007
 8000c12:	482d      	ldr	r0, [pc, #180]	; (8000cc8 <_ZL12MX_GPIO_Initv+0x174>)
 8000c14:	f001 ff24 	bl	8002a60 <HAL_GPIO_WritePin>
                          |BRK3_Pin|PSB4_Pin|BRK4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIRECTION4_GPIO_Port, DIRECTION4_Pin, GPIO_PIN_RESET);
 8000c18:	2200      	movs	r2, #0
 8000c1a:	2104      	movs	r1, #4
 8000c1c:	482b      	ldr	r0, [pc, #172]	; (8000ccc <_ZL12MX_GPIO_Initv+0x178>)
 8000c1e:	f001 ff1f 	bl	8002a60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c28:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c32:	f107 0314 	add.w	r3, r7, #20
 8000c36:	4619      	mov	r1, r3
 8000c38:	4821      	ldr	r0, [pc, #132]	; (8000cc0 <_ZL12MX_GPIO_Initv+0x16c>)
 8000c3a:	f001 fd7d 	bl	8002738 <HAL_GPIO_Init>

  /*Configure GPIO pins : PSB2_Pin PSB1_Pin BRK2_Pin BATT_Pin
                           PSB3_Pin */
  GPIO_InitStruct.Pin = PSB2_Pin|PSB1_Pin|BRK2_Pin|BATT_Pin
 8000c3e:	231f      	movs	r3, #31
 8000c40:	617b      	str	r3, [r7, #20]
                          |PSB3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c42:	2301      	movs	r3, #1
 8000c44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c46:	2300      	movs	r3, #0
 8000c48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c4e:	f107 0314 	add.w	r3, r7, #20
 8000c52:	4619      	mov	r1, r3
 8000c54:	481a      	ldr	r0, [pc, #104]	; (8000cc0 <_ZL12MX_GPIO_Initv+0x16c>)
 8000c56:	f001 fd6f 	bl	8002738 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIRECTION3_Pin DIRECTION2_Pin DIRECTION1_Pin LED6_Pin
                           LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = DIRECTION3_Pin|DIRECTION2_Pin|DIRECTION1_Pin|LED6_Pin
 8000c5a:	f64e 0313 	movw	r3, #59411	; 0xe813
 8000c5e:	617b      	str	r3, [r7, #20]
                          |LED1_Pin|LED2_Pin|LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c60:	2301      	movs	r3, #1
 8000c62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c64:	2300      	movs	r3, #0
 8000c66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c6c:	f107 0314 	add.w	r3, r7, #20
 8000c70:	4619      	mov	r1, r3
 8000c72:	4814      	ldr	r0, [pc, #80]	; (8000cc4 <_ZL12MX_GPIO_Initv+0x170>)
 8000c74:	f001 fd60 	bl	8002738 <HAL_GPIO_Init>

  /*Configure GPIO pins : BRK1_Pin PSB5_Pin BRK5_Pin PSB6_Pin
                           BRK3_Pin PSB4_Pin BRK4_Pin */
  GPIO_InitStruct.Pin = BRK1_Pin|PSB5_Pin|BRK5_Pin|PSB6_Pin
 8000c78:	f24f 0307 	movw	r3, #61447	; 0xf007
 8000c7c:	617b      	str	r3, [r7, #20]
                          |BRK3_Pin|PSB4_Pin|BRK4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c82:	2300      	movs	r3, #0
 8000c84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c86:	2300      	movs	r3, #0
 8000c88:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c8a:	f107 0314 	add.w	r3, r7, #20
 8000c8e:	4619      	mov	r1, r3
 8000c90:	480d      	ldr	r0, [pc, #52]	; (8000cc8 <_ZL12MX_GPIO_Initv+0x174>)
 8000c92:	f001 fd51 	bl	8002738 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIRECTION4_Pin */
  GPIO_InitStruct.Pin = DIRECTION4_Pin;
 8000c96:	2304      	movs	r3, #4
 8000c98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIRECTION4_GPIO_Port, &GPIO_InitStruct);
 8000ca6:	f107 0314 	add.w	r3, r7, #20
 8000caa:	4619      	mov	r1, r3
 8000cac:	4807      	ldr	r0, [pc, #28]	; (8000ccc <_ZL12MX_GPIO_Initv+0x178>)
 8000cae:	f001 fd43 	bl	8002738 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cb2:	bf00      	nop
 8000cb4:	3728      	adds	r7, #40	; 0x28
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	40023800 	.word	0x40023800
 8000cc0:	40020800 	.word	0x40020800
 8000cc4:	40020000 	.word	0x40020000
 8000cc8:	40020400 	.word	0x40020400
 8000ccc:	40020c00 	.word	0x40020c00

08000cd0 <HAL_CAN_RxFifo0MsgPendingCallback>:
uint32_t id;
uint32_t dlc;
std::array<int,8> data;

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000cd0:	b590      	push	{r4, r7, lr}
 8000cd2:	b095      	sub	sp, #84	; 0x54
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
	  CAN_RxHeaderTypeDef RxHeader;
	  std::array<int,4> arr_data;
	  std::array<int,4> arr_old_data;
	  //int last_hat;

	  if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 8000cd8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000cdc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	6878      	ldr	r0, [r7, #4]
 8000ce4:	f001 f8ae 	bl	8001e44 <HAL_CAN_GetRxMessage>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	bf0c      	ite	eq
 8000cee:	2301      	moveq	r3, #1
 8000cf0:	2300      	movne	r3, #0
 8000cf2:	b2db      	uxtb	r3, r3
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	f000 8193 	beq.w	8001020 <HAL_CAN_RxFifo0MsgPendingCallback+0x350>
	  {
		  id = (RxHeader.IDE == CAN_ID_STD)? RxHeader.StdId : RxHeader.ExtId;     // ID
 8000cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d101      	bne.n	8000d04 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>
 8000d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d02:	e000      	b.n	8000d06 <HAL_CAN_RxFifo0MsgPendingCallback+0x36>
 8000d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d06:	4a9d      	ldr	r2, [pc, #628]	; (8000f7c <HAL_CAN_RxFifo0MsgPendingCallback+0x2ac>)
 8000d08:	6013      	str	r3, [r2, #0]
		  dlc = RxHeader.DLC;                                                     // DLC
 8000d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d0c:	4a9c      	ldr	r2, [pc, #624]	; (8000f80 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b0>)
 8000d0e:	6013      	str	r3, [r2, #0]
		  data[0] = RxData[0] - 128;                                                    // Data
 8000d10:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8000d14:	461c      	mov	r4, r3
 8000d16:	2100      	movs	r1, #0
 8000d18:	489a      	ldr	r0, [pc, #616]	; (8000f84 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b4>)
 8000d1a:	f000 fa2c 	bl	8001176 <_ZNSt5arrayIiLj8EEixEj>
 8000d1e:	4602      	mov	r2, r0
 8000d20:	f1a4 0380 	sub.w	r3, r4, #128	; 0x80
 8000d24:	6013      	str	r3, [r2, #0]
		  data[1] = RxData[1] - 128;
 8000d26:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8000d2a:	461c      	mov	r4, r3
 8000d2c:	2101      	movs	r1, #1
 8000d2e:	4895      	ldr	r0, [pc, #596]	; (8000f84 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b4>)
 8000d30:	f000 fa21 	bl	8001176 <_ZNSt5arrayIiLj8EEixEj>
 8000d34:	4602      	mov	r2, r0
 8000d36:	f1a4 0380 	sub.w	r3, r4, #128	; 0x80
 8000d3a:	6013      	str	r3, [r2, #0]
		  data[2] = RxData[2] - 128;
 8000d3c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000d40:	461c      	mov	r4, r3
 8000d42:	2102      	movs	r1, #2
 8000d44:	488f      	ldr	r0, [pc, #572]	; (8000f84 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b4>)
 8000d46:	f000 fa16 	bl	8001176 <_ZNSt5arrayIiLj8EEixEj>
 8000d4a:	4602      	mov	r2, r0
 8000d4c:	f1a4 0380 	sub.w	r3, r4, #128	; 0x80
 8000d50:	6013      	str	r3, [r2, #0]
		  data[3] = RxData[3] - 128;
 8000d52:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000d56:	461c      	mov	r4, r3
 8000d58:	2103      	movs	r1, #3
 8000d5a:	488a      	ldr	r0, [pc, #552]	; (8000f84 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b4>)
 8000d5c:	f000 fa0b 	bl	8001176 <_ZNSt5arrayIiLj8EEixEj>
 8000d60:	4602      	mov	r2, r0
 8000d62:	f1a4 0380 	sub.w	r3, r4, #128	; 0x80
 8000d66:	6013      	str	r3, [r2, #0]
		  data[4] = RxData[4];
 8000d68:	f897 4048 	ldrb.w	r4, [r7, #72]	; 0x48
 8000d6c:	2104      	movs	r1, #4
 8000d6e:	4885      	ldr	r0, [pc, #532]	; (8000f84 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b4>)
 8000d70:	f000 fa01 	bl	8001176 <_ZNSt5arrayIiLj8EEixEj>
 8000d74:	4603      	mov	r3, r0
 8000d76:	4622      	mov	r2, r4
 8000d78:	601a      	str	r2, [r3, #0]
		  data[5] = RxData[5];
 8000d7a:	f897 4049 	ldrb.w	r4, [r7, #73]	; 0x49
 8000d7e:	2105      	movs	r1, #5
 8000d80:	4880      	ldr	r0, [pc, #512]	; (8000f84 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b4>)
 8000d82:	f000 f9f8 	bl	8001176 <_ZNSt5arrayIiLj8EEixEj>
 8000d86:	4603      	mov	r3, r0
 8000d88:	4622      	mov	r2, r4
 8000d8a:	601a      	str	r2, [r3, #0]
		  data[6] = RxData[6];
 8000d8c:	f897 404a 	ldrb.w	r4, [r7, #74]	; 0x4a
 8000d90:	2106      	movs	r1, #6
 8000d92:	487c      	ldr	r0, [pc, #496]	; (8000f84 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b4>)
 8000d94:	f000 f9ef 	bl	8001176 <_ZNSt5arrayIiLj8EEixEj>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	4622      	mov	r2, r4
 8000d9c:	601a      	str	r2, [r3, #0]
		  data[7] = RxData[7];
 8000d9e:	f897 404b 	ldrb.w	r4, [r7, #75]	; 0x4b
 8000da2:	2107      	movs	r1, #7
 8000da4:	4877      	ldr	r0, [pc, #476]	; (8000f84 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b4>)
 8000da6:	f000 f9e6 	bl	8001176 <_ZNSt5arrayIiLj8EEixEj>
 8000daa:	4603      	mov	r3, r0
 8000dac:	4622      	mov	r2, r4
 8000dae:	601a      	str	r2, [r3, #0]
		  //printf("%d %d %d %d %d %d %d %d\n",data[0],data[1],data[2],data[3],data[4],data[5],data[6],data[7]);

			for(int i = 0;i < 4;i++){
 8000db0:	2300      	movs	r3, #0
 8000db2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000db4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000db6:	2b03      	cmp	r3, #3
 8000db8:	dc14      	bgt.n	8000de4 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>
				arr_data[i] = data[i+4];
 8000dba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000dbc:	3304      	adds	r3, #4
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	4870      	ldr	r0, [pc, #448]	; (8000f84 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b4>)
 8000dc2:	f000 f9d8 	bl	8001176 <_ZNSt5arrayIiLj8EEixEj>
 8000dc6:	4604      	mov	r4, r0
 8000dc8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000dca:	f107 0318 	add.w	r3, r7, #24
 8000dce:	4611      	mov	r1, r2
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f000 f9df 	bl	8001194 <_ZNSt5arrayIiLj4EEixEj>
 8000dd6:	4602      	mov	r2, r0
 8000dd8:	6823      	ldr	r3, [r4, #0]
 8000dda:	6013      	str	r3, [r2, #0]
			for(int i = 0;i < 4;i++){
 8000ddc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000dde:	3301      	adds	r3, #1
 8000de0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000de2:	e7e7      	b.n	8000db4 <HAL_CAN_RxFifo0MsgPendingCallback+0xe4>
			}
			if (arr_data[0] <= 1 or arr_data[1] <= 1 or arr_data[2] <= 1 or arr_data[3] <= 1){
 8000de4:	f107 0318 	add.w	r3, r7, #24
 8000de8:	2100      	movs	r1, #0
 8000dea:	4618      	mov	r0, r3
 8000dec:	f000 f9d2 	bl	8001194 <_ZNSt5arrayIiLj4EEixEj>
 8000df0:	4603      	mov	r3, r0
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	2b01      	cmp	r3, #1
 8000df6:	dd1d      	ble.n	8000e34 <HAL_CAN_RxFifo0MsgPendingCallback+0x164>
 8000df8:	f107 0318 	add.w	r3, r7, #24
 8000dfc:	2101      	movs	r1, #1
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f000 f9c8 	bl	8001194 <_ZNSt5arrayIiLj4EEixEj>
 8000e04:	4603      	mov	r3, r0
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	2b01      	cmp	r3, #1
 8000e0a:	dd13      	ble.n	8000e34 <HAL_CAN_RxFifo0MsgPendingCallback+0x164>
 8000e0c:	f107 0318 	add.w	r3, r7, #24
 8000e10:	2102      	movs	r1, #2
 8000e12:	4618      	mov	r0, r3
 8000e14:	f000 f9be 	bl	8001194 <_ZNSt5arrayIiLj4EEixEj>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	2b01      	cmp	r3, #1
 8000e1e:	dd09      	ble.n	8000e34 <HAL_CAN_RxFifo0MsgPendingCallback+0x164>
 8000e20:	f107 0318 	add.w	r3, r7, #24
 8000e24:	2103      	movs	r1, #3
 8000e26:	4618      	mov	r0, r3
 8000e28:	f000 f9b4 	bl	8001194 <_ZNSt5arrayIiLj4EEixEj>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	dc01      	bgt.n	8000e38 <HAL_CAN_RxFifo0MsgPendingCallback+0x168>
 8000e34:	2301      	movs	r3, #1
 8000e36:	e000      	b.n	8000e3a <HAL_CAN_RxFifo0MsgPendingCallback+0x16a>
 8000e38:	2300      	movs	r3, #0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	f000 80ee 	beq.w	800101c <HAL_CAN_RxFifo0MsgPendingCallback+0x34c>
				recovery_prog();
 8000e40:	f000 f98d 	bl	800115e <_Z13recovery_progv>


				if (data[0] == 0){ //perfect stop
 8000e44:	2100      	movs	r1, #0
 8000e46:	484f      	ldr	r0, [pc, #316]	; (8000f84 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b4>)
 8000e48:	f000 f995 	bl	8001176 <_ZNSt5arrayIiLj8EEixEj>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	bf0c      	ite	eq
 8000e54:	2301      	moveq	r3, #1
 8000e56:	2300      	movne	r3, #0
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d005      	beq.n	8000e6a <HAL_CAN_RxFifo0MsgPendingCallback+0x19a>
				  HAL_GPIO_WritePin(GPIOB,BRK1_Pin,GPIO_PIN_SET);
 8000e5e:	2201      	movs	r2, #1
 8000e60:	2101      	movs	r1, #1
 8000e62:	4849      	ldr	r0, [pc, #292]	; (8000f88 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b8>)
 8000e64:	f001 fdfc 	bl	8002a60 <HAL_GPIO_WritePin>
 8000e68:	e004      	b.n	8000e74 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a4>
				}
				else{
				  HAL_GPIO_WritePin(GPIOB,BRK1_Pin,GPIO_PIN_RESET);
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	2101      	movs	r1, #1
 8000e6e:	4846      	ldr	r0, [pc, #280]	; (8000f88 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b8>)
 8000e70:	f001 fdf6 	bl	8002a60 <HAL_GPIO_WritePin>
				}
				if (data[1] == 0){
 8000e74:	2101      	movs	r1, #1
 8000e76:	4843      	ldr	r0, [pc, #268]	; (8000f84 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b4>)
 8000e78:	f000 f97d 	bl	8001176 <_ZNSt5arrayIiLj8EEixEj>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	bf0c      	ite	eq
 8000e84:	2301      	moveq	r3, #1
 8000e86:	2300      	movne	r3, #0
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d005      	beq.n	8000e9a <HAL_CAN_RxFifo0MsgPendingCallback+0x1ca>
				  HAL_GPIO_WritePin(GPIOC,BRK2_Pin,GPIO_PIN_SET);
 8000e8e:	2201      	movs	r2, #1
 8000e90:	2104      	movs	r1, #4
 8000e92:	483e      	ldr	r0, [pc, #248]	; (8000f8c <HAL_CAN_RxFifo0MsgPendingCallback+0x2bc>)
 8000e94:	f001 fde4 	bl	8002a60 <HAL_GPIO_WritePin>
 8000e98:	e004      	b.n	8000ea4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d4>
				}
				else{
				  HAL_GPIO_WritePin(GPIOC,BRK2_Pin,GPIO_PIN_RESET);
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	2104      	movs	r1, #4
 8000e9e:	483b      	ldr	r0, [pc, #236]	; (8000f8c <HAL_CAN_RxFifo0MsgPendingCallback+0x2bc>)
 8000ea0:	f001 fdde 	bl	8002a60 <HAL_GPIO_WritePin>
				}
				if (data[2] == 0){
 8000ea4:	2102      	movs	r1, #2
 8000ea6:	4837      	ldr	r0, [pc, #220]	; (8000f84 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b4>)
 8000ea8:	f000 f965 	bl	8001176 <_ZNSt5arrayIiLj8EEixEj>
 8000eac:	4603      	mov	r3, r0
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	bf0c      	ite	eq
 8000eb4:	2301      	moveq	r3, #1
 8000eb6:	2300      	movne	r3, #0
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d006      	beq.n	8000ecc <HAL_CAN_RxFifo0MsgPendingCallback+0x1fc>
				  HAL_GPIO_WritePin(GPIOB,BRK3_Pin,GPIO_PIN_SET);
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ec4:	4830      	ldr	r0, [pc, #192]	; (8000f88 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b8>)
 8000ec6:	f001 fdcb 	bl	8002a60 <HAL_GPIO_WritePin>
 8000eca:	e005      	b.n	8000ed8 <HAL_CAN_RxFifo0MsgPendingCallback+0x208>
				}
				else{
				  HAL_GPIO_WritePin(GPIOB,BRK3_Pin,GPIO_PIN_RESET);
 8000ecc:	2200      	movs	r2, #0
 8000ece:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ed2:	482d      	ldr	r0, [pc, #180]	; (8000f88 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b8>)
 8000ed4:	f001 fdc4 	bl	8002a60 <HAL_GPIO_WritePin>
				}


				if (data[0] < 0){
 8000ed8:	2100      	movs	r1, #0
 8000eda:	482a      	ldr	r0, [pc, #168]	; (8000f84 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b4>)
 8000edc:	f000 f94b 	bl	8001176 <_ZNSt5arrayIiLj8EEixEj>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	0fdb      	lsrs	r3, r3, #31
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d00d      	beq.n	8000f08 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>
				  HAL_GPIO_WritePin(GPIOA,DIRECTION1_Pin,GPIO_PIN_RESET);
 8000eec:	2200      	movs	r2, #0
 8000eee:	2110      	movs	r1, #16
 8000ef0:	4827      	ldr	r0, [pc, #156]	; (8000f90 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 8000ef2:	f001 fdb5 	bl	8002a60 <HAL_GPIO_WritePin>
				  data[0] *= -1;
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	4822      	ldr	r0, [pc, #136]	; (8000f84 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b4>)
 8000efa:	f000 f93c 	bl	8001176 <_ZNSt5arrayIiLj8EEixEj>
 8000efe:	4603      	mov	r3, r0
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	4252      	negs	r2, r2
 8000f04:	601a      	str	r2, [r3, #0]
 8000f06:	e004      	b.n	8000f12 <HAL_CAN_RxFifo0MsgPendingCallback+0x242>
				}
				else{
				  HAL_GPIO_WritePin(GPIOA,DIRECTION1_Pin,GPIO_PIN_SET);
 8000f08:	2201      	movs	r2, #1
 8000f0a:	2110      	movs	r1, #16
 8000f0c:	4820      	ldr	r0, [pc, #128]	; (8000f90 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 8000f0e:	f001 fda7 	bl	8002a60 <HAL_GPIO_WritePin>
				}

				if (data[1] < 0){
 8000f12:	2101      	movs	r1, #1
 8000f14:	481b      	ldr	r0, [pc, #108]	; (8000f84 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b4>)
 8000f16:	f000 f92e 	bl	8001176 <_ZNSt5arrayIiLj8EEixEj>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	0fdb      	lsrs	r3, r3, #31
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d00d      	beq.n	8000f42 <HAL_CAN_RxFifo0MsgPendingCallback+0x272>
				  HAL_GPIO_WritePin(GPIOA,DIRECTION2_Pin,GPIO_PIN_RESET);
 8000f26:	2200      	movs	r2, #0
 8000f28:	2102      	movs	r1, #2
 8000f2a:	4819      	ldr	r0, [pc, #100]	; (8000f90 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 8000f2c:	f001 fd98 	bl	8002a60 <HAL_GPIO_WritePin>
				  data[1] *= -1;
 8000f30:	2101      	movs	r1, #1
 8000f32:	4814      	ldr	r0, [pc, #80]	; (8000f84 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b4>)
 8000f34:	f000 f91f 	bl	8001176 <_ZNSt5arrayIiLj8EEixEj>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	4252      	negs	r2, r2
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	e004      	b.n	8000f4c <HAL_CAN_RxFifo0MsgPendingCallback+0x27c>
				}
				else{
				  HAL_GPIO_WritePin(GPIOA,DIRECTION2_Pin,GPIO_PIN_SET);
 8000f42:	2201      	movs	r2, #1
 8000f44:	2102      	movs	r1, #2
 8000f46:	4812      	ldr	r0, [pc, #72]	; (8000f90 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 8000f48:	f001 fd8a 	bl	8002a60 <HAL_GPIO_WritePin>
				}

				if (data[2] < 0){
 8000f4c:	2102      	movs	r1, #2
 8000f4e:	480d      	ldr	r0, [pc, #52]	; (8000f84 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b4>)
 8000f50:	f000 f911 	bl	8001176 <_ZNSt5arrayIiLj8EEixEj>
 8000f54:	4603      	mov	r3, r0
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	0fdb      	lsrs	r3, r3, #31
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d019      	beq.n	8000f94 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c4>
				  HAL_GPIO_WritePin(GPIOA,DIRECTION3_Pin,GPIO_PIN_RESET);
 8000f60:	2200      	movs	r2, #0
 8000f62:	2101      	movs	r1, #1
 8000f64:	480a      	ldr	r0, [pc, #40]	; (8000f90 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 8000f66:	f001 fd7b 	bl	8002a60 <HAL_GPIO_WritePin>
				  data[2] *= -1;
 8000f6a:	2102      	movs	r1, #2
 8000f6c:	4805      	ldr	r0, [pc, #20]	; (8000f84 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b4>)
 8000f6e:	f000 f902 	bl	8001176 <_ZNSt5arrayIiLj8EEixEj>
 8000f72:	4603      	mov	r3, r0
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	4252      	negs	r2, r2
 8000f78:	601a      	str	r2, [r3, #0]
 8000f7a:	e010      	b.n	8000f9e <HAL_CAN_RxFifo0MsgPendingCallback+0x2ce>
 8000f7c:	20000188 	.word	0x20000188
 8000f80:	2000018c 	.word	0x2000018c
 8000f84:	20000190 	.word	0x20000190
 8000f88:	40020400 	.word	0x40020400
 8000f8c:	40020800 	.word	0x40020800
 8000f90:	40020000 	.word	0x40020000
				}
				else{
				  HAL_GPIO_WritePin(GPIOA,DIRECTION3_Pin,GPIO_PIN_SET);
 8000f94:	2201      	movs	r2, #1
 8000f96:	2101      	movs	r1, #1
 8000f98:	4823      	ldr	r0, [pc, #140]	; (8001028 <HAL_CAN_RxFifo0MsgPendingCallback+0x358>)
 8000f9a:	f001 fd61 	bl	8002a60 <HAL_GPIO_WritePin>

				}

				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,data[0] * 500);
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	4822      	ldr	r0, [pc, #136]	; (800102c <HAL_CAN_RxFifo0MsgPendingCallback+0x35c>)
 8000fa2:	f000 f8e8 	bl	8001176 <_ZNSt5arrayIiLj8EEixEj>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000fae:	fb03 f202 	mul.w	r2, r3, r2
 8000fb2:	4b1f      	ldr	r3, [pc, #124]	; (8001030 <HAL_CAN_RxFifo0MsgPendingCallback+0x360>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,data[1] * 500);
 8000fb8:	2101      	movs	r1, #1
 8000fba:	481c      	ldr	r0, [pc, #112]	; (800102c <HAL_CAN_RxFifo0MsgPendingCallback+0x35c>)
 8000fbc:	f000 f8db 	bl	8001176 <_ZNSt5arrayIiLj8EEixEj>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000fc8:	fb03 f202 	mul.w	r2, r3, r2
 8000fcc:	4b18      	ldr	r3, [pc, #96]	; (8001030 <HAL_CAN_RxFifo0MsgPendingCallback+0x360>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	639a      	str	r2, [r3, #56]	; 0x38
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,data[2] * 500);
 8000fd2:	2102      	movs	r1, #2
 8000fd4:	4815      	ldr	r0, [pc, #84]	; (800102c <HAL_CAN_RxFifo0MsgPendingCallback+0x35c>)
 8000fd6:	f000 f8ce 	bl	8001176 <_ZNSt5arrayIiLj8EEixEj>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000fe2:	fb03 f202 	mul.w	r2, r3, r2
 8000fe6:	4b12      	ldr	r3, [pc, #72]	; (8001030 <HAL_CAN_RxFifo0MsgPendingCallback+0x360>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	63da      	str	r2, [r3, #60]	; 0x3c

				if (arr_data != arr_old_data) { //等しくない場合に切り替え操作
 8000fec:	f107 0208 	add.w	r2, r7, #8
 8000ff0:	f107 0318 	add.w	r3, r7, #24
 8000ff4:	4611      	mov	r1, r2
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f000 f8db 	bl	80011b2 <_ZStneIiLj4EEbRKSt5arrayIT_XT0_EES4_>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d004      	beq.n	800100c <HAL_CAN_RxFifo0MsgPendingCallback+0x33c>
					toggle_switch(arr_data);
 8001002:	f107 0318 	add.w	r3, r7, #24
 8001006:	4618      	mov	r0, r3
 8001008:	f000 f814 	bl	8001034 <_Z13toggle_switchRSt5arrayIiLj4EE>
				}
				arr_old_data = arr_data; //旧ボタンデータとして登録
 800100c:	f107 0408 	add.w	r4, r7, #8
 8001010:	f107 0318 	add.w	r3, r7, #24
 8001014:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001016:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			}
			else{
				emergency_prog();
			}
	  }
}
 800101a:	e001      	b.n	8001020 <HAL_CAN_RxFifo0MsgPendingCallback+0x350>
				emergency_prog();
 800101c:	f000 f898 	bl	8001150 <_Z14emergency_progv>
}
 8001020:	bf00      	nop
 8001022:	3754      	adds	r7, #84	; 0x54
 8001024:	46bd      	mov	sp, r7
 8001026:	bd90      	pop	{r4, r7, pc}
 8001028:	40020000 	.word	0x40020000
 800102c:	20000190 	.word	0x20000190
 8001030:	200000b4 	.word	0x200000b4

08001034 <_Z13toggle_switchRSt5arrayIiLj4EE>:
{
  HAL_UART_Transmit(&huart2,(uint8_t *)ptr,len,10);
  return len;
}

void toggle_switch(std::array<int,4>& arr){
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
	if(arr[0] == 1){//COLLECT_PLUS
 800103c:	2100      	movs	r1, #0
 800103e:	6878      	ldr	r0, [r7, #4]
 8001040:	f000 f8a8 	bl	8001194 <_ZNSt5arrayIiLj4EEixEj>
 8001044:	4603      	mov	r3, r0
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	2b01      	cmp	r3, #1
 800104a:	bf0c      	ite	eq
 800104c:	2301      	moveq	r3, #1
 800104e:	2300      	movne	r3, #0
 8001050:	b2db      	uxtb	r3, r3
 8001052:	2b00      	cmp	r3, #0
 8001054:	d006      	beq.n	8001064 <_Z13toggle_switchRSt5arrayIiLj4EE+0x30>
		//BRK_OFF
		//PLUS
		HAL_GPIO_WritePin(GPIOA, LED1_Pin, GPIO_PIN_SET);
 8001056:	2201      	movs	r2, #1
 8001058:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800105c:	483b      	ldr	r0, [pc, #236]	; (800114c <_Z13toggle_switchRSt5arrayIiLj4EE+0x118>)
 800105e:	f001 fcff 	bl	8002a60 <HAL_GPIO_WritePin>
 8001062:	e012      	b.n	800108a <_Z13toggle_switchRSt5arrayIiLj4EE+0x56>
	}
	else if (arr[0] == 0){//COLLECT_STOP
 8001064:	2100      	movs	r1, #0
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	f000 f894 	bl	8001194 <_ZNSt5arrayIiLj4EEixEj>
 800106c:	4603      	mov	r3, r0
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	2b00      	cmp	r3, #0
 8001072:	bf0c      	ite	eq
 8001074:	2301      	moveq	r3, #1
 8001076:	2300      	movne	r3, #0
 8001078:	b2db      	uxtb	r3, r3
 800107a:	2b00      	cmp	r3, #0
 800107c:	d005      	beq.n	800108a <_Z13toggle_switchRSt5arrayIiLj4EE+0x56>
		//BRK_ON
		HAL_GPIO_WritePin(GPIOA, LED1_Pin, GPIO_PIN_RESET);
 800107e:	2200      	movs	r2, #0
 8001080:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001084:	4831      	ldr	r0, [pc, #196]	; (800114c <_Z13toggle_switchRSt5arrayIiLj4EE+0x118>)
 8001086:	f001 fceb 	bl	8002a60 <HAL_GPIO_WritePin>
	}
	if(arr[1] == 1){//COLLECT_MINUS
 800108a:	2101      	movs	r1, #1
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f000 f881 	bl	8001194 <_ZNSt5arrayIiLj4EEixEj>
 8001092:	4603      	mov	r3, r0
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	2b01      	cmp	r3, #1
 8001098:	bf0c      	ite	eq
 800109a:	2301      	moveq	r3, #1
 800109c:	2300      	movne	r3, #0
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d006      	beq.n	80010b2 <_Z13toggle_switchRSt5arrayIiLj4EE+0x7e>
		//BRK_OFF
		//MINUS
		HAL_GPIO_WritePin(GPIOA, LED2_Pin, GPIO_PIN_SET);
 80010a4:	2201      	movs	r2, #1
 80010a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010aa:	4828      	ldr	r0, [pc, #160]	; (800114c <_Z13toggle_switchRSt5arrayIiLj4EE+0x118>)
 80010ac:	f001 fcd8 	bl	8002a60 <HAL_GPIO_WritePin>
 80010b0:	e012      	b.n	80010d8 <_Z13toggle_switchRSt5arrayIiLj4EE+0xa4>
	}
	else if (arr[1] == 0){//COLLECT_STOP
 80010b2:	2101      	movs	r1, #1
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f000 f86d 	bl	8001194 <_ZNSt5arrayIiLj4EEixEj>
 80010ba:	4603      	mov	r3, r0
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	bf0c      	ite	eq
 80010c2:	2301      	moveq	r3, #1
 80010c4:	2300      	movne	r3, #0
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d005      	beq.n	80010d8 <_Z13toggle_switchRSt5arrayIiLj4EE+0xa4>
		//BRK_ON
		HAL_GPIO_WritePin(GPIOA, LED2_Pin, GPIO_PIN_RESET);
 80010cc:	2200      	movs	r2, #0
 80010ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010d2:	481e      	ldr	r0, [pc, #120]	; (800114c <_Z13toggle_switchRSt5arrayIiLj4EE+0x118>)
 80010d4:	f001 fcc4 	bl	8002a60 <HAL_GPIO_WritePin>
	}
	if(arr[2] == 1){//RELOAD_START
 80010d8:	2102      	movs	r1, #2
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f000 f85a 	bl	8001194 <_ZNSt5arrayIiLj4EEixEj>
 80010e0:	4603      	mov	r3, r0
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	bf0c      	ite	eq
 80010e8:	2301      	moveq	r3, #1
 80010ea:	2300      	movne	r3, #0
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d006      	beq.n	8001100 <_Z13toggle_switchRSt5arrayIiLj4EE+0xcc>
		//BRK_OFF
		HAL_GPIO_WritePin(GPIOA, LED3_Pin, GPIO_PIN_SET);
 80010f2:	2201      	movs	r2, #1
 80010f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010f8:	4814      	ldr	r0, [pc, #80]	; (800114c <_Z13toggle_switchRSt5arrayIiLj4EE+0x118>)
 80010fa:	f001 fcb1 	bl	8002a60 <HAL_GPIO_WritePin>
 80010fe:	e006      	b.n	800110e <_Z13toggle_switchRSt5arrayIiLj4EE+0xda>
	}
	else if (arr[2] == 0){//RELOAD_KEEP
 8001100:	2102      	movs	r1, #2
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f000 f846 	bl	8001194 <_ZNSt5arrayIiLj4EEixEj>
 8001108:	4603      	mov	r3, r0
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	2b00      	cmp	r3, #0
		//BRK_ON & KEEP
		;
	}
	if(arr[3] == 1){//SHOOT
 800110e:	2103      	movs	r1, #3
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f000 f83f 	bl	8001194 <_ZNSt5arrayIiLj4EEixEj>
 8001116:	4603      	mov	r3, r0
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	2b01      	cmp	r3, #1
 800111c:	bf0c      	ite	eq
 800111e:	2301      	moveq	r3, #1
 8001120:	2300      	movne	r3, #0
 8001122:	b2db      	uxtb	r3, r3
 8001124:	2b00      	cmp	r3, #0
 8001126:	d006      	beq.n	8001136 <_Z13toggle_switchRSt5arrayIiLj4EE+0x102>
		//BRK_OFF
		//
		HAL_GPIO_WritePin(GPIOA, LED3_Pin, GPIO_PIN_RESET);
 8001128:	2200      	movs	r2, #0
 800112a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800112e:	4807      	ldr	r0, [pc, #28]	; (800114c <_Z13toggle_switchRSt5arrayIiLj4EE+0x118>)
 8001130:	f001 fc96 	bl	8002a60 <HAL_GPIO_WritePin>
	}
	else if (arr[3] == 0){//SHOOT_STOP
		//BRK_ON & KEEP
		;
	}
}
 8001134:	e006      	b.n	8001144 <_Z13toggle_switchRSt5arrayIiLj4EE+0x110>
	else if (arr[3] == 0){//SHOOT_STOP
 8001136:	2103      	movs	r1, #3
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	f000 f82b 	bl	8001194 <_ZNSt5arrayIiLj4EEixEj>
 800113e:	4603      	mov	r3, r0
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	2b00      	cmp	r3, #0
}
 8001144:	bf00      	nop
 8001146:	3708      	adds	r7, #8
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	40020000 	.word	0x40020000

08001150 <_Z14emergency_progv>:



void emergency_prog(void){
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
	  //HAL_GPIO_WritePin(GPIOA, LED3_Pin, GPIO_PIN_SET);
}
 8001154:	bf00      	nop
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr

0800115e <_Z13recovery_progv>:

void recovery_prog(void){
 800115e:	b480      	push	{r7}
 8001160:	af00      	add	r7, sp, #0
	  //HAL_GPIO_WritePin(GPIOA, LED3_Pin, GPIO_PIN_RESET);
	;
}
 8001162:	bf00      	nop
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr

0800116c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001170:	b672      	cpsid	i
}
 8001172:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001174:	e7fe      	b.n	8001174 <Error_Handler+0x8>

08001176 <_ZNSt5arrayIiLj8EEixEj>:
      _GLIBCXX_NODISCARD constexpr bool
      empty() const noexcept { return size() == 0; }

      // Element access.
      _GLIBCXX17_CONSTEXPR reference
      operator[](size_type __n) noexcept
 8001176:	b580      	push	{r7, lr}
 8001178:	b082      	sub	sp, #8
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
 800117e:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6839      	ldr	r1, [r7, #0]
 8001184:	4618      	mov	r0, r3
 8001186:	f000 f825 	bl	80011d4 <_ZNSt14__array_traitsIiLj8EE6_S_refERA8_Kij>
 800118a:	4603      	mov	r3, r0
 800118c:	4618      	mov	r0, r3
 800118e:	3708      	adds	r7, #8
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}

08001194 <_ZNSt5arrayIiLj4EEixEj>:
      operator[](size_type __n) noexcept
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6839      	ldr	r1, [r7, #0]
 80011a2:	4618      	mov	r0, r3
 80011a4:	f000 f825 	bl	80011f2 <_ZNSt14__array_traitsIiLj4EE6_S_refERA4_Kij>
 80011a8:	4603      	mov	r3, r0
 80011aa:	4618      	mov	r0, r3
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <_ZStneIiLj4EEbRKSt5arrayIT_XT0_EES4_>:
    }
#else
  template<typename _Tp, std::size_t _Nm>
    _GLIBCXX20_CONSTEXPR
    inline bool
    operator!=(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b082      	sub	sp, #8
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6078      	str	r0, [r7, #4]
 80011ba:	6039      	str	r1, [r7, #0]
    { return !(__one == __two); }
 80011bc:	6839      	ldr	r1, [r7, #0]
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f000 f826 	bl	8001210 <_ZSteqIiLj4EEbRKSt5arrayIT_XT0_EES4_>
 80011c4:	4603      	mov	r3, r0
 80011c6:	f083 0301 	eor.w	r3, r3, #1
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	4618      	mov	r0, r3
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <_ZNSt14__array_traitsIiLj8EE6_S_refERA8_Kij>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	687a      	ldr	r2, [r7, #4]
 80011e4:	4413      	add	r3, r2
 80011e6:	4618      	mov	r0, r3
 80011e8:	370c      	adds	r7, #12
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr

080011f2 <_ZNSt14__array_traitsIiLj4EE6_S_refERA4_Kij>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 80011f2:	b480      	push	{r7}
 80011f4:	b083      	sub	sp, #12
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	6078      	str	r0, [r7, #4]
 80011fa:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	687a      	ldr	r2, [r7, #4]
 8001202:	4413      	add	r3, r2
 8001204:	4618      	mov	r0, r3
 8001206:	370c      	adds	r7, #12
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr

08001210 <_ZSteqIiLj4EEbRKSt5arrayIT_XT0_EES4_>:
    operator==(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)
 8001210:	b5b0      	push	{r4, r5, r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	6039      	str	r1, [r7, #0]
    { return std::equal(__one.begin(), __one.end(), __two.begin()); }
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f000 f813 	bl	8001246 <_ZNKSt5arrayIiLj4EE5beginEv>
 8001220:	4604      	mov	r4, r0
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f000 f81b 	bl	800125e <_ZNKSt5arrayIiLj4EE3endEv>
 8001228:	4605      	mov	r5, r0
 800122a:	6838      	ldr	r0, [r7, #0]
 800122c:	f000 f80b 	bl	8001246 <_ZNKSt5arrayIiLj4EE5beginEv>
 8001230:	4603      	mov	r3, r0
 8001232:	461a      	mov	r2, r3
 8001234:	4629      	mov	r1, r5
 8001236:	4620      	mov	r0, r4
 8001238:	f000 f81e 	bl	8001278 <_ZSt5equalIPKiS1_EbT_S2_T0_>
 800123c:	4603      	mov	r3, r0
 800123e:	4618      	mov	r0, r3
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bdb0      	pop	{r4, r5, r7, pc}

08001246 <_ZNKSt5arrayIiLj4EE5beginEv>:
      begin() const noexcept
 8001246:	b580      	push	{r7, lr}
 8001248:	b082      	sub	sp, #8
 800124a:	af00      	add	r7, sp, #0
 800124c:	6078      	str	r0, [r7, #4]
      { return const_iterator(data()); }
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f000 f822 	bl	8001298 <_ZNKSt5arrayIiLj4EE4dataEv>
 8001254:	4603      	mov	r3, r0
 8001256:	4618      	mov	r0, r3
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <_ZNKSt5arrayIiLj4EE3endEv>:
      end() const noexcept
 800125e:	b580      	push	{r7, lr}
 8001260:	b082      	sub	sp, #8
 8001262:	af00      	add	r7, sp, #0
 8001264:	6078      	str	r0, [r7, #4]
      { return const_iterator(data() + _Nm); }
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	f000 f816 	bl	8001298 <_ZNKSt5arrayIiLj4EE4dataEv>
 800126c:	4603      	mov	r3, r0
 800126e:	3310      	adds	r3, #16
 8001270:	4618      	mov	r0, r3
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}

08001278 <_ZSt5equalIPKiS1_EbT_S2_T0_>:
   *  ranges are equal.
  */
  template<typename _II1, typename _II2>
    _GLIBCXX20_CONSTEXPR
    inline bool
    equal(_II1 __first1, _II1 __last1, _II2 __first2)
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	60f8      	str	r0, [r7, #12]
 8001280:	60b9      	str	r1, [r7, #8]
 8001282:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_EqualOpConcept<
	    typename iterator_traits<_II1>::value_type,
	    typename iterator_traits<_II2>::value_type>)
      __glibcxx_requires_can_increment_range(__first1, __last1, __first2);

      return std::__equal_aux(__first1, __last1, __first2);
 8001284:	687a      	ldr	r2, [r7, #4]
 8001286:	68b9      	ldr	r1, [r7, #8]
 8001288:	68f8      	ldr	r0, [r7, #12]
 800128a:	f000 f812 	bl	80012b2 <_ZSt11__equal_auxIPKiS1_EbT_S2_T0_>
 800128e:	4603      	mov	r3, r0
    }
 8001290:	4618      	mov	r0, r3
 8001292:	3710      	adds	r7, #16
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}

08001298 <_ZNKSt5arrayIiLj4EE4dataEv>:
      data() const noexcept
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	4618      	mov	r0, r3
 80012a4:	f000 f821 	bl	80012ea <_ZNSt14__array_traitsIiLj4EE6_S_ptrERA4_Ki>
 80012a8:	4603      	mov	r3, r0
 80012aa:	4618      	mov	r0, r3
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <_ZSt11__equal_auxIPKiS1_EbT_S2_T0_>:
    __equal_aux(_II1 __first1, _II1 __last1, _II2 __first2)
 80012b2:	b5b0      	push	{r4, r5, r7, lr}
 80012b4:	b084      	sub	sp, #16
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	60f8      	str	r0, [r7, #12]
 80012ba:	60b9      	str	r1, [r7, #8]
 80012bc:	607a      	str	r2, [r7, #4]
      return std::__equal_aux1(std::__niter_base(__first1),
 80012be:	68f8      	ldr	r0, [r7, #12]
 80012c0:	f000 f81e 	bl	8001300 <_ZSt12__niter_baseIPKiET_S2_>
 80012c4:	4604      	mov	r4, r0
 80012c6:	68b8      	ldr	r0, [r7, #8]
 80012c8:	f000 f81a 	bl	8001300 <_ZSt12__niter_baseIPKiET_S2_>
 80012cc:	4605      	mov	r5, r0
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f000 f816 	bl	8001300 <_ZSt12__niter_baseIPKiET_S2_>
 80012d4:	4603      	mov	r3, r0
 80012d6:	461a      	mov	r2, r3
 80012d8:	4629      	mov	r1, r5
 80012da:	4620      	mov	r0, r4
 80012dc:	f000 f81b 	bl	8001316 <_ZSt12__equal_aux1IPKiS1_EbT_S2_T0_>
 80012e0:	4603      	mov	r3, r0
    }
 80012e2:	4618      	mov	r0, r3
 80012e4:	3710      	adds	r7, #16
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bdb0      	pop	{r4, r5, r7, pc}

080012ea <_ZNSt14__array_traitsIiLj4EE6_S_ptrERA4_Ki>:
      _S_ptr(const _Type& __t) noexcept
 80012ea:	b480      	push	{r7}
 80012ec:	b083      	sub	sp, #12
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4618      	mov	r0, r3
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <_ZSt12__niter_baseIPKiET_S2_>:
    __niter_base(_Iterator __it)
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
    { return __it; }
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	4618      	mov	r0, r3
 800130c:	370c      	adds	r7, #12
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr

08001316 <_ZSt12__equal_aux1IPKiS1_EbT_S2_T0_>:
    __equal_aux1(_II1 __first1, _II1 __last1, _II2 __first2)
 8001316:	b580      	push	{r7, lr}
 8001318:	b086      	sub	sp, #24
 800131a:	af00      	add	r7, sp, #0
 800131c:	60f8      	str	r0, [r7, #12]
 800131e:	60b9      	str	r1, [r7, #8]
 8001320:	607a      	str	r2, [r7, #4]
      const bool __simple = ((__is_integer<_ValueType1>::__value
 8001322:	2301      	movs	r3, #1
 8001324:	75fb      	strb	r3, [r7, #23]
      return std::__equal<__simple>::equal(__first1, __last1, __first2);
 8001326:	687a      	ldr	r2, [r7, #4]
 8001328:	68b9      	ldr	r1, [r7, #8]
 800132a:	68f8      	ldr	r0, [r7, #12]
 800132c:	f000 f805 	bl	800133a <_ZNSt7__equalILb1EE5equalIiEEbPKT_S4_S4_>
 8001330:	4603      	mov	r3, r0
    }
 8001332:	4618      	mov	r0, r3
 8001334:	3718      	adds	r7, #24
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}

0800133a <_ZNSt7__equalILb1EE5equalIiEEbPKT_S4_S4_>:
	equal(const _Tp* __first1, const _Tp* __last1, const _Tp* __first2)
 800133a:	b580      	push	{r7, lr}
 800133c:	b086      	sub	sp, #24
 800133e:	af00      	add	r7, sp, #0
 8001340:	60f8      	str	r0, [r7, #12]
 8001342:	60b9      	str	r1, [r7, #8]
 8001344:	607a      	str	r2, [r7, #4]
	  if (const size_t __len = (__last1 - __first1))
 8001346:	68ba      	ldr	r2, [r7, #8]
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	1ad3      	subs	r3, r2, r3
 800134c:	109b      	asrs	r3, r3, #2
 800134e:	617b      	str	r3, [r7, #20]
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d00b      	beq.n	800136e <_ZNSt7__equalILb1EE5equalIiEEbPKT_S4_S4_+0x34>
	    return !std::__memcmp(__first1, __first2, __len);
 8001356:	697a      	ldr	r2, [r7, #20]
 8001358:	6879      	ldr	r1, [r7, #4]
 800135a:	68f8      	ldr	r0, [r7, #12]
 800135c:	f000 f80c 	bl	8001378 <_ZSt8__memcmpIiiEiPKT_PKT0_j>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	bf0c      	ite	eq
 8001366:	2301      	moveq	r3, #1
 8001368:	2300      	movne	r3, #0
 800136a:	b2db      	uxtb	r3, r3
 800136c:	e000      	b.n	8001370 <_ZNSt7__equalILb1EE5equalIiEEbPKT_S4_S4_+0x36>
	  return true;
 800136e:	2301      	movs	r3, #1
	}
 8001370:	4618      	mov	r0, r3
 8001372:	3718      	adds	r7, #24
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}

08001378 <_ZSt8__memcmpIiiEiPKT_PKT0_j>:
    __memcmp(const _Tp* __first1, const _Up* __first2, size_t __num)
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	60f8      	str	r0, [r7, #12]
 8001380:	60b9      	str	r1, [r7, #8]
 8001382:	607a      	str	r2, [r7, #4]
	return __builtin_memcmp(__first1, __first2, sizeof(_Tp) * __num);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	461a      	mov	r2, r3
 800138a:	68b9      	ldr	r1, [r7, #8]
 800138c:	68f8      	ldr	r0, [r7, #12]
 800138e:	f003 fb7d 	bl	8004a8c <memcmp>
 8001392:	4603      	mov	r3, r0
    }
 8001394:	4618      	mov	r0, r3
 8001396:	3710      	adds	r7, #16
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}

0800139c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013a2:	2300      	movs	r3, #0
 80013a4:	607b      	str	r3, [r7, #4]
 80013a6:	4b10      	ldr	r3, [pc, #64]	; (80013e8 <HAL_MspInit+0x4c>)
 80013a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013aa:	4a0f      	ldr	r2, [pc, #60]	; (80013e8 <HAL_MspInit+0x4c>)
 80013ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013b0:	6453      	str	r3, [r2, #68]	; 0x44
 80013b2:	4b0d      	ldr	r3, [pc, #52]	; (80013e8 <HAL_MspInit+0x4c>)
 80013b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013ba:	607b      	str	r3, [r7, #4]
 80013bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013be:	2300      	movs	r3, #0
 80013c0:	603b      	str	r3, [r7, #0]
 80013c2:	4b09      	ldr	r3, [pc, #36]	; (80013e8 <HAL_MspInit+0x4c>)
 80013c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c6:	4a08      	ldr	r2, [pc, #32]	; (80013e8 <HAL_MspInit+0x4c>)
 80013c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013cc:	6413      	str	r3, [r2, #64]	; 0x40
 80013ce:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <HAL_MspInit+0x4c>)
 80013d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013d6:	603b      	str	r3, [r7, #0]
 80013d8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80013da:	2007      	movs	r0, #7
 80013dc:	f001 f96a 	bl	80026b4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013e0:	bf00      	nop
 80013e2:	3708      	adds	r7, #8
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	40023800 	.word	0x40023800

080013ec <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b08a      	sub	sp, #40	; 0x28
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f4:	f107 0314 	add.w	r3, r7, #20
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	605a      	str	r2, [r3, #4]
 80013fe:	609a      	str	r2, [r3, #8]
 8001400:	60da      	str	r2, [r3, #12]
 8001402:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN2)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a2c      	ldr	r2, [pc, #176]	; (80014bc <HAL_CAN_MspInit+0xd0>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d151      	bne.n	80014b2 <HAL_CAN_MspInit+0xc6>
  {
  /* USER CODE BEGIN CAN2_MspInit 0 */

  /* USER CODE END CAN2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN2_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	613b      	str	r3, [r7, #16]
 8001412:	4b2b      	ldr	r3, [pc, #172]	; (80014c0 <HAL_CAN_MspInit+0xd4>)
 8001414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001416:	4a2a      	ldr	r2, [pc, #168]	; (80014c0 <HAL_CAN_MspInit+0xd4>)
 8001418:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800141c:	6413      	str	r3, [r2, #64]	; 0x40
 800141e:	4b28      	ldr	r3, [pc, #160]	; (80014c0 <HAL_CAN_MspInit+0xd4>)
 8001420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001422:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001426:	613b      	str	r3, [r7, #16]
 8001428:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_CAN1_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	60fb      	str	r3, [r7, #12]
 800142e:	4b24      	ldr	r3, [pc, #144]	; (80014c0 <HAL_CAN_MspInit+0xd4>)
 8001430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001432:	4a23      	ldr	r2, [pc, #140]	; (80014c0 <HAL_CAN_MspInit+0xd4>)
 8001434:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001438:	6413      	str	r3, [r2, #64]	; 0x40
 800143a:	4b21      	ldr	r3, [pc, #132]	; (80014c0 <HAL_CAN_MspInit+0xd4>)
 800143c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001442:	60fb      	str	r3, [r7, #12]
 8001444:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	60bb      	str	r3, [r7, #8]
 800144a:	4b1d      	ldr	r3, [pc, #116]	; (80014c0 <HAL_CAN_MspInit+0xd4>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	4a1c      	ldr	r2, [pc, #112]	; (80014c0 <HAL_CAN_MspInit+0xd4>)
 8001450:	f043 0302 	orr.w	r3, r3, #2
 8001454:	6313      	str	r3, [r2, #48]	; 0x30
 8001456:	4b1a      	ldr	r3, [pc, #104]	; (80014c0 <HAL_CAN_MspInit+0xd4>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	f003 0302 	and.w	r3, r3, #2
 800145e:	60bb      	str	r3, [r7, #8]
 8001460:	68bb      	ldr	r3, [r7, #8]
    /**CAN2 GPIO Configuration
    PB5     ------> CAN2_RX
    PB6     ------> CAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001462:	2360      	movs	r3, #96	; 0x60
 8001464:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001466:	2302      	movs	r3, #2
 8001468:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146a:	2300      	movs	r3, #0
 800146c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800146e:	2303      	movs	r3, #3
 8001470:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001472:	2309      	movs	r3, #9
 8001474:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001476:	f107 0314 	add.w	r3, r7, #20
 800147a:	4619      	mov	r1, r3
 800147c:	4811      	ldr	r0, [pc, #68]	; (80014c4 <HAL_CAN_MspInit+0xd8>)
 800147e:	f001 f95b 	bl	8002738 <HAL_GPIO_Init>

    /* CAN2 interrupt Init */
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 0, 0);
 8001482:	2200      	movs	r2, #0
 8001484:	2100      	movs	r1, #0
 8001486:	203f      	movs	r0, #63	; 0x3f
 8001488:	f001 f91f 	bl	80026ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 800148c:	203f      	movs	r0, #63	; 0x3f
 800148e:	f001 f938 	bl	8002702 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 8001492:	2200      	movs	r2, #0
 8001494:	2100      	movs	r1, #0
 8001496:	2040      	movs	r0, #64	; 0x40
 8001498:	f001 f917 	bl	80026ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 800149c:	2040      	movs	r0, #64	; 0x40
 800149e:	f001 f930 	bl	8002702 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 80014a2:	2200      	movs	r2, #0
 80014a4:	2100      	movs	r1, #0
 80014a6:	2041      	movs	r0, #65	; 0x41
 80014a8:	f001 f90f 	bl	80026ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 80014ac:	2041      	movs	r0, #65	; 0x41
 80014ae:	f001 f928 	bl	8002702 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 80014b2:	bf00      	nop
 80014b4:	3728      	adds	r7, #40	; 0x28
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	40006800 	.word	0x40006800
 80014c0:	40023800 	.word	0x40023800
 80014c4:	40020400 	.word	0x40020400

080014c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b085      	sub	sp, #20
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a15      	ldr	r2, [pc, #84]	; (800152c <HAL_TIM_Base_MspInit+0x64>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d10e      	bne.n	80014f8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80014da:	2300      	movs	r3, #0
 80014dc:	60fb      	str	r3, [r7, #12]
 80014de:	4b14      	ldr	r3, [pc, #80]	; (8001530 <HAL_TIM_Base_MspInit+0x68>)
 80014e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e2:	4a13      	ldr	r2, [pc, #76]	; (8001530 <HAL_TIM_Base_MspInit+0x68>)
 80014e4:	f043 0301 	orr.w	r3, r3, #1
 80014e8:	6453      	str	r3, [r2, #68]	; 0x44
 80014ea:	4b11      	ldr	r3, [pc, #68]	; (8001530 <HAL_TIM_Base_MspInit+0x68>)
 80014ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ee:	f003 0301 	and.w	r3, r3, #1
 80014f2:	60fb      	str	r3, [r7, #12]
 80014f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80014f6:	e012      	b.n	800151e <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM2)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001500:	d10d      	bne.n	800151e <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	60bb      	str	r3, [r7, #8]
 8001506:	4b0a      	ldr	r3, [pc, #40]	; (8001530 <HAL_TIM_Base_MspInit+0x68>)
 8001508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150a:	4a09      	ldr	r2, [pc, #36]	; (8001530 <HAL_TIM_Base_MspInit+0x68>)
 800150c:	f043 0301 	orr.w	r3, r3, #1
 8001510:	6413      	str	r3, [r2, #64]	; 0x40
 8001512:	4b07      	ldr	r3, [pc, #28]	; (8001530 <HAL_TIM_Base_MspInit+0x68>)
 8001514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	60bb      	str	r3, [r7, #8]
 800151c:	68bb      	ldr	r3, [r7, #8]
}
 800151e:	bf00      	nop
 8001520:	3714      	adds	r7, #20
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	40010000 	.word	0x40010000
 8001530:	40023800 	.word	0x40023800

08001534 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b08a      	sub	sp, #40	; 0x28
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800153c:	f107 0314 	add.w	r3, r7, #20
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	605a      	str	r2, [r3, #4]
 8001546:	609a      	str	r2, [r3, #8]
 8001548:	60da      	str	r2, [r3, #12]
 800154a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a25      	ldr	r2, [pc, #148]	; (80015e8 <HAL_TIM_MspPostInit+0xb4>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d11f      	bne.n	8001596 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001556:	2300      	movs	r3, #0
 8001558:	613b      	str	r3, [r7, #16]
 800155a:	4b24      	ldr	r3, [pc, #144]	; (80015ec <HAL_TIM_MspPostInit+0xb8>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	4a23      	ldr	r2, [pc, #140]	; (80015ec <HAL_TIM_MspPostInit+0xb8>)
 8001560:	f043 0301 	orr.w	r3, r3, #1
 8001564:	6313      	str	r3, [r2, #48]	; 0x30
 8001566:	4b21      	ldr	r3, [pc, #132]	; (80015ec <HAL_TIM_MspPostInit+0xb8>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156a:	f003 0301 	and.w	r3, r3, #1
 800156e:	613b      	str	r3, [r7, #16]
 8001570:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = pwm1_Pin|pwm2_Pin|pwm3_Pin;
 8001572:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001576:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001578:	2302      	movs	r3, #2
 800157a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157c:	2300      	movs	r3, #0
 800157e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001580:	2300      	movs	r3, #0
 8001582:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001584:	2301      	movs	r3, #1
 8001586:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001588:	f107 0314 	add.w	r3, r7, #20
 800158c:	4619      	mov	r1, r3
 800158e:	4818      	ldr	r0, [pc, #96]	; (80015f0 <HAL_TIM_MspPostInit+0xbc>)
 8001590:	f001 f8d2 	bl	8002738 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001594:	e023      	b.n	80015de <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM2)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800159e:	d11e      	bne.n	80015de <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015a0:	2300      	movs	r3, #0
 80015a2:	60fb      	str	r3, [r7, #12]
 80015a4:	4b11      	ldr	r3, [pc, #68]	; (80015ec <HAL_TIM_MspPostInit+0xb8>)
 80015a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a8:	4a10      	ldr	r2, [pc, #64]	; (80015ec <HAL_TIM_MspPostInit+0xb8>)
 80015aa:	f043 0302 	orr.w	r3, r3, #2
 80015ae:	6313      	str	r3, [r2, #48]	; 0x30
 80015b0:	4b0e      	ldr	r3, [pc, #56]	; (80015ec <HAL_TIM_MspPostInit+0xb8>)
 80015b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b4:	f003 0302 	and.w	r3, r3, #2
 80015b8:	60fb      	str	r3, [r7, #12]
 80015ba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = pwm6_Pin|pwm4_Pin|pwm5_Pin;
 80015bc:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80015c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c2:	2302      	movs	r3, #2
 80015c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c6:	2300      	movs	r3, #0
 80015c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ca:	2300      	movs	r3, #0
 80015cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80015ce:	2301      	movs	r3, #1
 80015d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015d2:	f107 0314 	add.w	r3, r7, #20
 80015d6:	4619      	mov	r1, r3
 80015d8:	4806      	ldr	r0, [pc, #24]	; (80015f4 <HAL_TIM_MspPostInit+0xc0>)
 80015da:	f001 f8ad 	bl	8002738 <HAL_GPIO_Init>
}
 80015de:	bf00      	nop
 80015e0:	3728      	adds	r7, #40	; 0x28
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	40010000 	.word	0x40010000
 80015ec:	40023800 	.word	0x40023800
 80015f0:	40020000 	.word	0x40020000
 80015f4:	40020400 	.word	0x40020400

080015f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b08a      	sub	sp, #40	; 0x28
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001600:	f107 0314 	add.w	r3, r7, #20
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	605a      	str	r2, [r3, #4]
 800160a:	609a      	str	r2, [r3, #8]
 800160c:	60da      	str	r2, [r3, #12]
 800160e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a19      	ldr	r2, [pc, #100]	; (800167c <HAL_UART_MspInit+0x84>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d12b      	bne.n	8001672 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800161a:	2300      	movs	r3, #0
 800161c:	613b      	str	r3, [r7, #16]
 800161e:	4b18      	ldr	r3, [pc, #96]	; (8001680 <HAL_UART_MspInit+0x88>)
 8001620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001622:	4a17      	ldr	r2, [pc, #92]	; (8001680 <HAL_UART_MspInit+0x88>)
 8001624:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001628:	6413      	str	r3, [r2, #64]	; 0x40
 800162a:	4b15      	ldr	r3, [pc, #84]	; (8001680 <HAL_UART_MspInit+0x88>)
 800162c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001632:	613b      	str	r3, [r7, #16]
 8001634:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	60fb      	str	r3, [r7, #12]
 800163a:	4b11      	ldr	r3, [pc, #68]	; (8001680 <HAL_UART_MspInit+0x88>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163e:	4a10      	ldr	r2, [pc, #64]	; (8001680 <HAL_UART_MspInit+0x88>)
 8001640:	f043 0301 	orr.w	r3, r3, #1
 8001644:	6313      	str	r3, [r2, #48]	; 0x30
 8001646:	4b0e      	ldr	r3, [pc, #56]	; (8001680 <HAL_UART_MspInit+0x88>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001652:	230c      	movs	r3, #12
 8001654:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001656:	2302      	movs	r3, #2
 8001658:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165a:	2300      	movs	r3, #0
 800165c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800165e:	2303      	movs	r3, #3
 8001660:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001662:	2307      	movs	r3, #7
 8001664:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001666:	f107 0314 	add.w	r3, r7, #20
 800166a:	4619      	mov	r1, r3
 800166c:	4805      	ldr	r0, [pc, #20]	; (8001684 <HAL_UART_MspInit+0x8c>)
 800166e:	f001 f863 	bl	8002738 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001672:	bf00      	nop
 8001674:	3728      	adds	r7, #40	; 0x28
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	40004400 	.word	0x40004400
 8001680:	40023800 	.word	0x40023800
 8001684:	40020000 	.word	0x40020000

08001688 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800168c:	e7fe      	b.n	800168c <NMI_Handler+0x4>

0800168e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800168e:	b480      	push	{r7}
 8001690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001692:	e7fe      	b.n	8001692 <HardFault_Handler+0x4>

08001694 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001698:	e7fe      	b.n	8001698 <MemManage_Handler+0x4>

0800169a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800169a:	b480      	push	{r7}
 800169c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800169e:	e7fe      	b.n	800169e <BusFault_Handler+0x4>

080016a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016a4:	e7fe      	b.n	80016a4 <UsageFault_Handler+0x4>

080016a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016a6:	b480      	push	{r7}
 80016a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016aa:	bf00      	nop
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016b8:	bf00      	nop
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr

080016c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016c2:	b480      	push	{r7}
 80016c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016c6:	bf00      	nop
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016d4:	f000 f952 	bl	800197c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016d8:	bf00      	nop
 80016da:	bd80      	pop	{r7, pc}

080016dc <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupt.
  */
void CAN2_TX_IRQHandler(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80016e0:	4802      	ldr	r0, [pc, #8]	; (80016ec <CAN2_TX_IRQHandler+0x10>)
 80016e2:	f000 fce7 	bl	80020b4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 80016e6:	bf00      	nop
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	2000008c 	.word	0x2000008c

080016f0 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupt.
  */
void CAN2_RX0_IRQHandler(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80016f4:	4802      	ldr	r0, [pc, #8]	; (8001700 <CAN2_RX0_IRQHandler+0x10>)
 80016f6:	f000 fcdd 	bl	80020b4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 80016fa:	bf00      	nop
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	2000008c 	.word	0x2000008c

08001704 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001708:	4802      	ldr	r0, [pc, #8]	; (8001714 <CAN2_RX1_IRQHandler+0x10>)
 800170a:	f000 fcd3 	bl	80020b4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 800170e:	bf00      	nop
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	2000008c 	.word	0x2000008c

08001718 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b086      	sub	sp, #24
 800171c:	af00      	add	r7, sp, #0
 800171e:	60f8      	str	r0, [r7, #12]
 8001720:	60b9      	str	r1, [r7, #8]
 8001722:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001724:	2300      	movs	r3, #0
 8001726:	617b      	str	r3, [r7, #20]
 8001728:	e00a      	b.n	8001740 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800172a:	f3af 8000 	nop.w
 800172e:	4601      	mov	r1, r0
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	1c5a      	adds	r2, r3, #1
 8001734:	60ba      	str	r2, [r7, #8]
 8001736:	b2ca      	uxtb	r2, r1
 8001738:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	3301      	adds	r3, #1
 800173e:	617b      	str	r3, [r7, #20]
 8001740:	697a      	ldr	r2, [r7, #20]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	429a      	cmp	r2, r3
 8001746:	dbf0      	blt.n	800172a <_read+0x12>
  }

  return len;
 8001748:	687b      	ldr	r3, [r7, #4]
}
 800174a:	4618      	mov	r0, r3
 800174c:	3718      	adds	r7, #24
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}

08001752 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001752:	b580      	push	{r7, lr}
 8001754:	b086      	sub	sp, #24
 8001756:	af00      	add	r7, sp, #0
 8001758:	60f8      	str	r0, [r7, #12]
 800175a:	60b9      	str	r1, [r7, #8]
 800175c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800175e:	2300      	movs	r3, #0
 8001760:	617b      	str	r3, [r7, #20]
 8001762:	e009      	b.n	8001778 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	1c5a      	adds	r2, r3, #1
 8001768:	60ba      	str	r2, [r7, #8]
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	4618      	mov	r0, r3
 800176e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	3301      	adds	r3, #1
 8001776:	617b      	str	r3, [r7, #20]
 8001778:	697a      	ldr	r2, [r7, #20]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	429a      	cmp	r2, r3
 800177e:	dbf1      	blt.n	8001764 <_write+0x12>
  }
  return len;
 8001780:	687b      	ldr	r3, [r7, #4]
}
 8001782:	4618      	mov	r0, r3
 8001784:	3718      	adds	r7, #24
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}

0800178a <_close>:

int _close(int file)
{
 800178a:	b480      	push	{r7}
 800178c:	b083      	sub	sp, #12
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001792:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001796:	4618      	mov	r0, r3
 8001798:	370c      	adds	r7, #12
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr

080017a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017a2:	b480      	push	{r7}
 80017a4:	b083      	sub	sp, #12
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
 80017aa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017b2:	605a      	str	r2, [r3, #4]
  return 0;
 80017b4:	2300      	movs	r3, #0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	370c      	adds	r7, #12
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr

080017c2 <_isatty>:

int _isatty(int file)
{
 80017c2:	b480      	push	{r7}
 80017c4:	b083      	sub	sp, #12
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80017ca:	2301      	movs	r3, #1
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr

080017d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017d8:	b480      	push	{r7}
 80017da:	b085      	sub	sp, #20
 80017dc:	af00      	add	r7, sp, #0
 80017de:	60f8      	str	r0, [r7, #12]
 80017e0:	60b9      	str	r1, [r7, #8]
 80017e2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80017e4:	2300      	movs	r3, #0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3714      	adds	r7, #20
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
	...

080017f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b086      	sub	sp, #24
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017fc:	4a14      	ldr	r2, [pc, #80]	; (8001850 <_sbrk+0x5c>)
 80017fe:	4b15      	ldr	r3, [pc, #84]	; (8001854 <_sbrk+0x60>)
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001808:	4b13      	ldr	r3, [pc, #76]	; (8001858 <_sbrk+0x64>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d102      	bne.n	8001816 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001810:	4b11      	ldr	r3, [pc, #68]	; (8001858 <_sbrk+0x64>)
 8001812:	4a12      	ldr	r2, [pc, #72]	; (800185c <_sbrk+0x68>)
 8001814:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001816:	4b10      	ldr	r3, [pc, #64]	; (8001858 <_sbrk+0x64>)
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4413      	add	r3, r2
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	429a      	cmp	r2, r3
 8001822:	d207      	bcs.n	8001834 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001824:	f003 f908 	bl	8004a38 <__errno>
 8001828:	4603      	mov	r3, r0
 800182a:	220c      	movs	r2, #12
 800182c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800182e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001832:	e009      	b.n	8001848 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001834:	4b08      	ldr	r3, [pc, #32]	; (8001858 <_sbrk+0x64>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800183a:	4b07      	ldr	r3, [pc, #28]	; (8001858 <_sbrk+0x64>)
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4413      	add	r3, r2
 8001842:	4a05      	ldr	r2, [pc, #20]	; (8001858 <_sbrk+0x64>)
 8001844:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001846:	68fb      	ldr	r3, [r7, #12]
}
 8001848:	4618      	mov	r0, r3
 800184a:	3718      	adds	r7, #24
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	20020000 	.word	0x20020000
 8001854:	00000400 	.word	0x00000400
 8001858:	200001b0 	.word	0x200001b0
 800185c:	200001c8 	.word	0x200001c8

08001860 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001864:	4b06      	ldr	r3, [pc, #24]	; (8001880 <SystemInit+0x20>)
 8001866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800186a:	4a05      	ldr	r2, [pc, #20]	; (8001880 <SystemInit+0x20>)
 800186c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001870:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001874:	bf00      	nop
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	e000ed00 	.word	0xe000ed00

08001884 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001884:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018bc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001888:	480d      	ldr	r0, [pc, #52]	; (80018c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800188a:	490e      	ldr	r1, [pc, #56]	; (80018c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800188c:	4a0e      	ldr	r2, [pc, #56]	; (80018c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800188e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001890:	e002      	b.n	8001898 <LoopCopyDataInit>

08001892 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001892:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001894:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001896:	3304      	adds	r3, #4

08001898 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001898:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800189a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800189c:	d3f9      	bcc.n	8001892 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800189e:	4a0b      	ldr	r2, [pc, #44]	; (80018cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80018a0:	4c0b      	ldr	r4, [pc, #44]	; (80018d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80018a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018a4:	e001      	b.n	80018aa <LoopFillZerobss>

080018a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018a8:	3204      	adds	r2, #4

080018aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018ac:	d3fb      	bcc.n	80018a6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80018ae:	f7ff ffd7 	bl	8001860 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018b2:	f003 f8c7 	bl	8004a44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018b6:	f7fe fe27 	bl	8000508 <main>
  bx  lr    
 80018ba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80018c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018c4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80018c8:	08005710 	.word	0x08005710
  ldr r2, =_sbss
 80018cc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80018d0:	200001c8 	.word	0x200001c8

080018d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018d4:	e7fe      	b.n	80018d4 <ADC_IRQHandler>
	...

080018d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018dc:	4b0e      	ldr	r3, [pc, #56]	; (8001918 <HAL_Init+0x40>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a0d      	ldr	r2, [pc, #52]	; (8001918 <HAL_Init+0x40>)
 80018e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018e8:	4b0b      	ldr	r3, [pc, #44]	; (8001918 <HAL_Init+0x40>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a0a      	ldr	r2, [pc, #40]	; (8001918 <HAL_Init+0x40>)
 80018ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018f4:	4b08      	ldr	r3, [pc, #32]	; (8001918 <HAL_Init+0x40>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a07      	ldr	r2, [pc, #28]	; (8001918 <HAL_Init+0x40>)
 80018fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001900:	2003      	movs	r0, #3
 8001902:	f000 fed7 	bl	80026b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001906:	2000      	movs	r0, #0
 8001908:	f000 f808 	bl	800191c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800190c:	f7ff fd46 	bl	800139c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001910:	2300      	movs	r3, #0
}
 8001912:	4618      	mov	r0, r3
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	40023c00 	.word	0x40023c00

0800191c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001924:	4b12      	ldr	r3, [pc, #72]	; (8001970 <HAL_InitTick+0x54>)
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	4b12      	ldr	r3, [pc, #72]	; (8001974 <HAL_InitTick+0x58>)
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	4619      	mov	r1, r3
 800192e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001932:	fbb3 f3f1 	udiv	r3, r3, r1
 8001936:	fbb2 f3f3 	udiv	r3, r2, r3
 800193a:	4618      	mov	r0, r3
 800193c:	f000 feef 	bl	800271e <HAL_SYSTICK_Config>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e00e      	b.n	8001968 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2b0f      	cmp	r3, #15
 800194e:	d80a      	bhi.n	8001966 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001950:	2200      	movs	r2, #0
 8001952:	6879      	ldr	r1, [r7, #4]
 8001954:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001958:	f000 feb7 	bl	80026ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800195c:	4a06      	ldr	r2, [pc, #24]	; (8001978 <HAL_InitTick+0x5c>)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001962:	2300      	movs	r3, #0
 8001964:	e000      	b.n	8001968 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
}
 8001968:	4618      	mov	r0, r3
 800196a:	3708      	adds	r7, #8
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	20000000 	.word	0x20000000
 8001974:	20000008 	.word	0x20000008
 8001978:	20000004 	.word	0x20000004

0800197c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001980:	4b06      	ldr	r3, [pc, #24]	; (800199c <HAL_IncTick+0x20>)
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	461a      	mov	r2, r3
 8001986:	4b06      	ldr	r3, [pc, #24]	; (80019a0 <HAL_IncTick+0x24>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4413      	add	r3, r2
 800198c:	4a04      	ldr	r2, [pc, #16]	; (80019a0 <HAL_IncTick+0x24>)
 800198e:	6013      	str	r3, [r2, #0]
}
 8001990:	bf00      	nop
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	20000008 	.word	0x20000008
 80019a0:	200001b4 	.word	0x200001b4

080019a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  return uwTick;
 80019a8:	4b03      	ldr	r3, [pc, #12]	; (80019b8 <HAL_GetTick+0x14>)
 80019aa:	681b      	ldr	r3, [r3, #0]
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	200001b4 	.word	0x200001b4

080019bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019c4:	f7ff ffee 	bl	80019a4 <HAL_GetTick>
 80019c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80019d4:	d005      	beq.n	80019e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019d6:	4b0a      	ldr	r3, [pc, #40]	; (8001a00 <HAL_Delay+0x44>)
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	461a      	mov	r2, r3
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	4413      	add	r3, r2
 80019e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019e2:	bf00      	nop
 80019e4:	f7ff ffde 	bl	80019a4 <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	68fa      	ldr	r2, [r7, #12]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d8f7      	bhi.n	80019e4 <HAL_Delay+0x28>
  {
  }
}
 80019f4:	bf00      	nop
 80019f6:	bf00      	nop
 80019f8:	3710      	adds	r7, #16
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	20000008 	.word	0x20000008

08001a04 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d101      	bne.n	8001a16 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e0ed      	b.n	8001bf2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d102      	bne.n	8001a28 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f7ff fce2 	bl	80013ec <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f042 0201 	orr.w	r2, r2, #1
 8001a36:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a38:	f7ff ffb4 	bl	80019a4 <HAL_GetTick>
 8001a3c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001a3e:	e012      	b.n	8001a66 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a40:	f7ff ffb0 	bl	80019a4 <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	2b0a      	cmp	r3, #10
 8001a4c:	d90b      	bls.n	8001a66 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a52:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2205      	movs	r2, #5
 8001a5e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e0c5      	b.n	8001bf2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f003 0301 	and.w	r3, r3, #1
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d0e5      	beq.n	8001a40 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f022 0202 	bic.w	r2, r2, #2
 8001a82:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a84:	f7ff ff8e 	bl	80019a4 <HAL_GetTick>
 8001a88:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001a8a:	e012      	b.n	8001ab2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a8c:	f7ff ff8a 	bl	80019a4 <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	2b0a      	cmp	r3, #10
 8001a98:	d90b      	bls.n	8001ab2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a9e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2205      	movs	r2, #5
 8001aaa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e09f      	b.n	8001bf2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f003 0302 	and.w	r3, r3, #2
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d1e5      	bne.n	8001a8c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	7e1b      	ldrb	r3, [r3, #24]
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d108      	bne.n	8001ada <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001ad6:	601a      	str	r2, [r3, #0]
 8001ad8:	e007      	b.n	8001aea <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ae8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	7e5b      	ldrb	r3, [r3, #25]
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d108      	bne.n	8001b04 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b00:	601a      	str	r2, [r3, #0]
 8001b02:	e007      	b.n	8001b14 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b12:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	7e9b      	ldrb	r3, [r3, #26]
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d108      	bne.n	8001b2e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f042 0220 	orr.w	r2, r2, #32
 8001b2a:	601a      	str	r2, [r3, #0]
 8001b2c:	e007      	b.n	8001b3e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f022 0220 	bic.w	r2, r2, #32
 8001b3c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	7edb      	ldrb	r3, [r3, #27]
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d108      	bne.n	8001b58 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f022 0210 	bic.w	r2, r2, #16
 8001b54:	601a      	str	r2, [r3, #0]
 8001b56:	e007      	b.n	8001b68 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f042 0210 	orr.w	r2, r2, #16
 8001b66:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	7f1b      	ldrb	r3, [r3, #28]
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d108      	bne.n	8001b82 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f042 0208 	orr.w	r2, r2, #8
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	e007      	b.n	8001b92 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f022 0208 	bic.w	r2, r2, #8
 8001b90:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	7f5b      	ldrb	r3, [r3, #29]
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d108      	bne.n	8001bac <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f042 0204 	orr.w	r2, r2, #4
 8001ba8:	601a      	str	r2, [r3, #0]
 8001baa:	e007      	b.n	8001bbc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f022 0204 	bic.w	r2, r2, #4
 8001bba:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	689a      	ldr	r2, [r3, #8]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	431a      	orrs	r2, r3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	691b      	ldr	r3, [r3, #16]
 8001bca:	431a      	orrs	r2, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	695b      	ldr	r3, [r3, #20]
 8001bd0:	ea42 0103 	orr.w	r1, r2, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	1e5a      	subs	r2, r3, #1
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	430a      	orrs	r2, r1
 8001be0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2200      	movs	r2, #0
 8001be6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2201      	movs	r2, #1
 8001bec:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001bf0:	2300      	movs	r3, #0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3710      	adds	r7, #16
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
	...

08001bfc <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b087      	sub	sp, #28
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c12:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001c14:	7cfb      	ldrb	r3, [r7, #19]
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d003      	beq.n	8001c22 <HAL_CAN_ConfigFilter+0x26>
 8001c1a:	7cfb      	ldrb	r3, [r7, #19]
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	f040 80be 	bne.w	8001d9e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001c22:	4b65      	ldr	r3, [pc, #404]	; (8001db8 <HAL_CAN_ConfigFilter+0x1bc>)
 8001c24:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001c2c:	f043 0201 	orr.w	r2, r3, #1
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001c3c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c50:	021b      	lsls	r3, r3, #8
 8001c52:	431a      	orrs	r2, r3
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	695b      	ldr	r3, [r3, #20]
 8001c5e:	f003 031f 	and.w	r3, r3, #31
 8001c62:	2201      	movs	r2, #1
 8001c64:	fa02 f303 	lsl.w	r3, r2, r3
 8001c68:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	43db      	mvns	r3, r3
 8001c74:	401a      	ands	r2, r3
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	69db      	ldr	r3, [r3, #28]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d123      	bne.n	8001ccc <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	43db      	mvns	r3, r3
 8001c8e:	401a      	ands	r2, r3
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	68db      	ldr	r3, [r3, #12]
 8001c9a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001ca2:	683a      	ldr	r2, [r7, #0]
 8001ca4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001ca6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	3248      	adds	r2, #72	; 0x48
 8001cac:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001cc0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001cc2:	6979      	ldr	r1, [r7, #20]
 8001cc4:	3348      	adds	r3, #72	; 0x48
 8001cc6:	00db      	lsls	r3, r3, #3
 8001cc8:	440b      	add	r3, r1
 8001cca:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	69db      	ldr	r3, [r3, #28]
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d122      	bne.n	8001d1a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	431a      	orrs	r2, r3
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001cf0:	683a      	ldr	r2, [r7, #0]
 8001cf2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001cf4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	3248      	adds	r2, #72	; 0x48
 8001cfa:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001d0e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001d10:	6979      	ldr	r1, [r7, #20]
 8001d12:	3348      	adds	r3, #72	; 0x48
 8001d14:	00db      	lsls	r3, r3, #3
 8001d16:	440b      	add	r3, r1
 8001d18:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	699b      	ldr	r3, [r3, #24]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d109      	bne.n	8001d36 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	43db      	mvns	r3, r3
 8001d2c:	401a      	ands	r2, r3
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001d34:	e007      	b.n	8001d46 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	431a      	orrs	r2, r3
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	691b      	ldr	r3, [r3, #16]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d109      	bne.n	8001d62 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	43db      	mvns	r3, r3
 8001d58:	401a      	ands	r2, r3
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001d60:	e007      	b.n	8001d72 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	431a      	orrs	r2, r3
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	6a1b      	ldr	r3, [r3, #32]
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d107      	bne.n	8001d8a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	431a      	orrs	r2, r3
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001d90:	f023 0201 	bic.w	r2, r3, #1
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	e006      	b.n	8001dac <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
  }
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	371c      	adds	r7, #28
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr
 8001db8:	40006400 	.word	0x40006400

08001dbc <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d12e      	bne.n	8001e2e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2202      	movs	r2, #2
 8001dd4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f022 0201 	bic.w	r2, r2, #1
 8001de6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001de8:	f7ff fddc 	bl	80019a4 <HAL_GetTick>
 8001dec:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001dee:	e012      	b.n	8001e16 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001df0:	f7ff fdd8 	bl	80019a4 <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	2b0a      	cmp	r3, #10
 8001dfc:	d90b      	bls.n	8001e16 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e02:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2205      	movs	r2, #5
 8001e0e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e012      	b.n	8001e3c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f003 0301 	and.w	r3, r3, #1
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d1e5      	bne.n	8001df0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2200      	movs	r2, #0
 8001e28:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	e006      	b.n	8001e3c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e32:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
  }
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3710      	adds	r7, #16
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}

08001e44 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001e44:	b480      	push	{r7}
 8001e46:	b087      	sub	sp, #28
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	60f8      	str	r0, [r7, #12]
 8001e4c:	60b9      	str	r1, [r7, #8]
 8001e4e:	607a      	str	r2, [r7, #4]
 8001e50:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e58:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001e5a:	7dfb      	ldrb	r3, [r7, #23]
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d003      	beq.n	8001e68 <HAL_CAN_GetRxMessage+0x24>
 8001e60:	7dfb      	ldrb	r3, [r7, #23]
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	f040 80f3 	bne.w	800204e <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d10e      	bne.n	8001e8c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	f003 0303 	and.w	r3, r3, #3
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d116      	bne.n	8001eaa <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e80:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e0e7      	b.n	800205c <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	691b      	ldr	r3, [r3, #16]
 8001e92:	f003 0303 	and.w	r3, r3, #3
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d107      	bne.n	8001eaa <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e9e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e0d8      	b.n	800205c <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	331b      	adds	r3, #27
 8001eb2:	011b      	lsls	r3, r3, #4
 8001eb4:	4413      	add	r3, r2
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0204 	and.w	r2, r3, #4
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d10c      	bne.n	8001ee2 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	331b      	adds	r3, #27
 8001ed0:	011b      	lsls	r3, r3, #4
 8001ed2:	4413      	add	r3, r2
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	0d5b      	lsrs	r3, r3, #21
 8001ed8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	601a      	str	r2, [r3, #0]
 8001ee0:	e00b      	b.n	8001efa <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	331b      	adds	r3, #27
 8001eea:	011b      	lsls	r3, r3, #4
 8001eec:	4413      	add	r3, r2
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	08db      	lsrs	r3, r3, #3
 8001ef2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	331b      	adds	r3, #27
 8001f02:	011b      	lsls	r3, r3, #4
 8001f04:	4413      	add	r3, r2
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0202 	and.w	r2, r3, #2
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	331b      	adds	r3, #27
 8001f18:	011b      	lsls	r3, r3, #4
 8001f1a:	4413      	add	r3, r2
 8001f1c:	3304      	adds	r3, #4
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 020f 	and.w	r2, r3, #15
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	331b      	adds	r3, #27
 8001f30:	011b      	lsls	r3, r3, #4
 8001f32:	4413      	add	r3, r2
 8001f34:	3304      	adds	r3, #4
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	0a1b      	lsrs	r3, r3, #8
 8001f3a:	b2da      	uxtb	r2, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	331b      	adds	r3, #27
 8001f48:	011b      	lsls	r3, r3, #4
 8001f4a:	4413      	add	r3, r2
 8001f4c:	3304      	adds	r3, #4
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	0c1b      	lsrs	r3, r3, #16
 8001f52:	b29a      	uxth	r2, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	011b      	lsls	r3, r3, #4
 8001f60:	4413      	add	r3, r2
 8001f62:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	b2da      	uxtb	r2, r3
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	011b      	lsls	r3, r3, #4
 8001f76:	4413      	add	r3, r2
 8001f78:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	0a1a      	lsrs	r2, r3, #8
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	3301      	adds	r3, #1
 8001f84:	b2d2      	uxtb	r2, r2
 8001f86:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	011b      	lsls	r3, r3, #4
 8001f90:	4413      	add	r3, r2
 8001f92:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	0c1a      	lsrs	r2, r3, #16
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	3302      	adds	r3, #2
 8001f9e:	b2d2      	uxtb	r2, r2
 8001fa0:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	011b      	lsls	r3, r3, #4
 8001faa:	4413      	add	r3, r2
 8001fac:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	0e1a      	lsrs	r2, r3, #24
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	3303      	adds	r3, #3
 8001fb8:	b2d2      	uxtb	r2, r2
 8001fba:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	011b      	lsls	r3, r3, #4
 8001fc4:	4413      	add	r3, r2
 8001fc6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	3304      	adds	r3, #4
 8001fd0:	b2d2      	uxtb	r2, r2
 8001fd2:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	011b      	lsls	r3, r3, #4
 8001fdc:	4413      	add	r3, r2
 8001fde:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	0a1a      	lsrs	r2, r3, #8
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	3305      	adds	r3, #5
 8001fea:	b2d2      	uxtb	r2, r2
 8001fec:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	011b      	lsls	r3, r3, #4
 8001ff6:	4413      	add	r3, r2
 8001ff8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	0c1a      	lsrs	r2, r3, #16
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	3306      	adds	r3, #6
 8002004:	b2d2      	uxtb	r2, r2
 8002006:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	011b      	lsls	r3, r3, #4
 8002010:	4413      	add	r3, r2
 8002012:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	0e1a      	lsrs	r2, r3, #24
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	3307      	adds	r3, #7
 800201e:	b2d2      	uxtb	r2, r2
 8002020:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d108      	bne.n	800203a <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	68da      	ldr	r2, [r3, #12]
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f042 0220 	orr.w	r2, r2, #32
 8002036:	60da      	str	r2, [r3, #12]
 8002038:	e007      	b.n	800204a <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	691a      	ldr	r2, [r3, #16]
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f042 0220 	orr.w	r2, r2, #32
 8002048:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800204a:	2300      	movs	r3, #0
 800204c:	e006      	b.n	800205c <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002052:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
  }
}
 800205c:	4618      	mov	r0, r3
 800205e:	371c      	adds	r7, #28
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002068:	b480      	push	{r7}
 800206a:	b085      	sub	sp, #20
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002078:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800207a:	7bfb      	ldrb	r3, [r7, #15]
 800207c:	2b01      	cmp	r3, #1
 800207e:	d002      	beq.n	8002086 <HAL_CAN_ActivateNotification+0x1e>
 8002080:	7bfb      	ldrb	r3, [r7, #15]
 8002082:	2b02      	cmp	r3, #2
 8002084:	d109      	bne.n	800209a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	6959      	ldr	r1, [r3, #20]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	683a      	ldr	r2, [r7, #0]
 8002092:	430a      	orrs	r2, r1
 8002094:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002096:	2300      	movs	r3, #0
 8002098:	e006      	b.n	80020a8 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
  }
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3714      	adds	r7, #20
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr

080020b4 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b08a      	sub	sp, #40	; 0x28
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80020bc:	2300      	movs	r3, #0
 80020be:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	695b      	ldr	r3, [r3, #20]
 80020c6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	68db      	ldr	r3, [r3, #12]
 80020de:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	691b      	ldr	r3, [r3, #16]
 80020e6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	699b      	ldr	r3, [r3, #24]
 80020ee:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80020f0:	6a3b      	ldr	r3, [r7, #32]
 80020f2:	f003 0301 	and.w	r3, r3, #1
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d07c      	beq.n	80021f4 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	f003 0301 	and.w	r3, r3, #1
 8002100:	2b00      	cmp	r3, #0
 8002102:	d023      	beq.n	800214c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2201      	movs	r2, #1
 800210a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800210c:	69bb      	ldr	r3, [r7, #24]
 800210e:	f003 0302 	and.w	r3, r3, #2
 8002112:	2b00      	cmp	r3, #0
 8002114:	d003      	beq.n	800211e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f000 f983 	bl	8002422 <HAL_CAN_TxMailbox0CompleteCallback>
 800211c:	e016      	b.n	800214c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800211e:	69bb      	ldr	r3, [r7, #24]
 8002120:	f003 0304 	and.w	r3, r3, #4
 8002124:	2b00      	cmp	r3, #0
 8002126:	d004      	beq.n	8002132 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800212e:	627b      	str	r3, [r7, #36]	; 0x24
 8002130:	e00c      	b.n	800214c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	f003 0308 	and.w	r3, r3, #8
 8002138:	2b00      	cmp	r3, #0
 800213a:	d004      	beq.n	8002146 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800213c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002142:	627b      	str	r3, [r7, #36]	; 0x24
 8002144:	e002      	b.n	800214c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f000 f989 	bl	800245e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800214c:	69bb      	ldr	r3, [r7, #24]
 800214e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002152:	2b00      	cmp	r3, #0
 8002154:	d024      	beq.n	80021a0 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800215e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002166:	2b00      	cmp	r3, #0
 8002168:	d003      	beq.n	8002172 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f000 f963 	bl	8002436 <HAL_CAN_TxMailbox1CompleteCallback>
 8002170:	e016      	b.n	80021a0 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002172:	69bb      	ldr	r3, [r7, #24]
 8002174:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002178:	2b00      	cmp	r3, #0
 800217a:	d004      	beq.n	8002186 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800217c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002182:	627b      	str	r3, [r7, #36]	; 0x24
 8002184:	e00c      	b.n	80021a0 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002186:	69bb      	ldr	r3, [r7, #24]
 8002188:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800218c:	2b00      	cmp	r3, #0
 800218e:	d004      	beq.n	800219a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002192:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002196:	627b      	str	r3, [r7, #36]	; 0x24
 8002198:	e002      	b.n	80021a0 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f000 f969 	bl	8002472 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80021a0:	69bb      	ldr	r3, [r7, #24]
 80021a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d024      	beq.n	80021f4 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80021b2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80021b4:	69bb      	ldr	r3, [r7, #24]
 80021b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d003      	beq.n	80021c6 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f000 f943 	bl	800244a <HAL_CAN_TxMailbox2CompleteCallback>
 80021c4:	e016      	b.n	80021f4 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d004      	beq.n	80021da <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80021d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021d6:	627b      	str	r3, [r7, #36]	; 0x24
 80021d8:	e00c      	b.n	80021f4 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80021da:	69bb      	ldr	r3, [r7, #24]
 80021dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d004      	beq.n	80021ee <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80021e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021ea:	627b      	str	r3, [r7, #36]	; 0x24
 80021ec:	e002      	b.n	80021f4 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f000 f949 	bl	8002486 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80021f4:	6a3b      	ldr	r3, [r7, #32]
 80021f6:	f003 0308 	and.w	r3, r3, #8
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d00c      	beq.n	8002218 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	f003 0310 	and.w	r3, r3, #16
 8002204:	2b00      	cmp	r3, #0
 8002206:	d007      	beq.n	8002218 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800220e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2210      	movs	r2, #16
 8002216:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002218:	6a3b      	ldr	r3, [r7, #32]
 800221a:	f003 0304 	and.w	r3, r3, #4
 800221e:	2b00      	cmp	r3, #0
 8002220:	d00b      	beq.n	800223a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	f003 0308 	and.w	r3, r3, #8
 8002228:	2b00      	cmp	r3, #0
 800222a:	d006      	beq.n	800223a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2208      	movs	r2, #8
 8002232:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f000 f930 	bl	800249a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800223a:	6a3b      	ldr	r3, [r7, #32]
 800223c:	f003 0302 	and.w	r3, r3, #2
 8002240:	2b00      	cmp	r3, #0
 8002242:	d009      	beq.n	8002258 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	68db      	ldr	r3, [r3, #12]
 800224a:	f003 0303 	and.w	r3, r3, #3
 800224e:	2b00      	cmp	r3, #0
 8002250:	d002      	beq.n	8002258 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f7fe fd3c 	bl	8000cd0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002258:	6a3b      	ldr	r3, [r7, #32]
 800225a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800225e:	2b00      	cmp	r3, #0
 8002260:	d00c      	beq.n	800227c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	f003 0310 	and.w	r3, r3, #16
 8002268:	2b00      	cmp	r3, #0
 800226a:	d007      	beq.n	800227c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800226c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002272:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2210      	movs	r2, #16
 800227a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800227c:	6a3b      	ldr	r3, [r7, #32]
 800227e:	f003 0320 	and.w	r3, r3, #32
 8002282:	2b00      	cmp	r3, #0
 8002284:	d00b      	beq.n	800229e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	f003 0308 	and.w	r3, r3, #8
 800228c:	2b00      	cmp	r3, #0
 800228e:	d006      	beq.n	800229e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2208      	movs	r2, #8
 8002296:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	f000 f912 	bl	80024c2 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800229e:	6a3b      	ldr	r3, [r7, #32]
 80022a0:	f003 0310 	and.w	r3, r3, #16
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d009      	beq.n	80022bc <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	691b      	ldr	r3, [r3, #16]
 80022ae:	f003 0303 	and.w	r3, r3, #3
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d002      	beq.n	80022bc <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f000 f8f9 	bl	80024ae <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80022bc:	6a3b      	ldr	r3, [r7, #32]
 80022be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d00b      	beq.n	80022de <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	f003 0310 	and.w	r3, r3, #16
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d006      	beq.n	80022de <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2210      	movs	r2, #16
 80022d6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	f000 f8fc 	bl	80024d6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80022de:	6a3b      	ldr	r3, [r7, #32]
 80022e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d00b      	beq.n	8002300 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	f003 0308 	and.w	r3, r3, #8
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d006      	beq.n	8002300 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2208      	movs	r2, #8
 80022f8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f000 f8f5 	bl	80024ea <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002300:	6a3b      	ldr	r3, [r7, #32]
 8002302:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d07b      	beq.n	8002402 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	f003 0304 	and.w	r3, r3, #4
 8002310:	2b00      	cmp	r3, #0
 8002312:	d072      	beq.n	80023fa <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002314:	6a3b      	ldr	r3, [r7, #32]
 8002316:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800231a:	2b00      	cmp	r3, #0
 800231c:	d008      	beq.n	8002330 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002324:	2b00      	cmp	r3, #0
 8002326:	d003      	beq.n	8002330 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232a:	f043 0301 	orr.w	r3, r3, #1
 800232e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002330:	6a3b      	ldr	r3, [r7, #32]
 8002332:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002336:	2b00      	cmp	r3, #0
 8002338:	d008      	beq.n	800234c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002340:	2b00      	cmp	r3, #0
 8002342:	d003      	beq.n	800234c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002346:	f043 0302 	orr.w	r3, r3, #2
 800234a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800234c:	6a3b      	ldr	r3, [r7, #32]
 800234e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002352:	2b00      	cmp	r3, #0
 8002354:	d008      	beq.n	8002368 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800235c:	2b00      	cmp	r3, #0
 800235e:	d003      	beq.n	8002368 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002362:	f043 0304 	orr.w	r3, r3, #4
 8002366:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002368:	6a3b      	ldr	r3, [r7, #32]
 800236a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800236e:	2b00      	cmp	r3, #0
 8002370:	d043      	beq.n	80023fa <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002378:	2b00      	cmp	r3, #0
 800237a:	d03e      	beq.n	80023fa <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002382:	2b60      	cmp	r3, #96	; 0x60
 8002384:	d02b      	beq.n	80023de <HAL_CAN_IRQHandler+0x32a>
 8002386:	2b60      	cmp	r3, #96	; 0x60
 8002388:	d82e      	bhi.n	80023e8 <HAL_CAN_IRQHandler+0x334>
 800238a:	2b50      	cmp	r3, #80	; 0x50
 800238c:	d022      	beq.n	80023d4 <HAL_CAN_IRQHandler+0x320>
 800238e:	2b50      	cmp	r3, #80	; 0x50
 8002390:	d82a      	bhi.n	80023e8 <HAL_CAN_IRQHandler+0x334>
 8002392:	2b40      	cmp	r3, #64	; 0x40
 8002394:	d019      	beq.n	80023ca <HAL_CAN_IRQHandler+0x316>
 8002396:	2b40      	cmp	r3, #64	; 0x40
 8002398:	d826      	bhi.n	80023e8 <HAL_CAN_IRQHandler+0x334>
 800239a:	2b30      	cmp	r3, #48	; 0x30
 800239c:	d010      	beq.n	80023c0 <HAL_CAN_IRQHandler+0x30c>
 800239e:	2b30      	cmp	r3, #48	; 0x30
 80023a0:	d822      	bhi.n	80023e8 <HAL_CAN_IRQHandler+0x334>
 80023a2:	2b10      	cmp	r3, #16
 80023a4:	d002      	beq.n	80023ac <HAL_CAN_IRQHandler+0x2f8>
 80023a6:	2b20      	cmp	r3, #32
 80023a8:	d005      	beq.n	80023b6 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80023aa:	e01d      	b.n	80023e8 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80023ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ae:	f043 0308 	orr.w	r3, r3, #8
 80023b2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80023b4:	e019      	b.n	80023ea <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80023b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b8:	f043 0310 	orr.w	r3, r3, #16
 80023bc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80023be:	e014      	b.n	80023ea <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80023c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c2:	f043 0320 	orr.w	r3, r3, #32
 80023c6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80023c8:	e00f      	b.n	80023ea <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80023ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023d0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80023d2:	e00a      	b.n	80023ea <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80023d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023da:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80023dc:	e005      	b.n	80023ea <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80023de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023e4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80023e6:	e000      	b.n	80023ea <HAL_CAN_IRQHandler+0x336>
            break;
 80023e8:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	699a      	ldr	r2, [r3, #24]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80023f8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	2204      	movs	r2, #4
 8002400:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002404:	2b00      	cmp	r3, #0
 8002406:	d008      	beq.n	800241a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800240c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240e:	431a      	orrs	r2, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f000 f872 	bl	80024fe <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800241a:	bf00      	nop
 800241c:	3728      	adds	r7, #40	; 0x28
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}

08002422 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002422:	b480      	push	{r7}
 8002424:	b083      	sub	sp, #12
 8002426:	af00      	add	r7, sp, #0
 8002428:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800242a:	bf00      	nop
 800242c:	370c      	adds	r7, #12
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr

08002436 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002436:	b480      	push	{r7}
 8002438:	b083      	sub	sp, #12
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800243e:	bf00      	nop
 8002440:	370c      	adds	r7, #12
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr

0800244a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800244a:	b480      	push	{r7}
 800244c:	b083      	sub	sp, #12
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002452:	bf00      	nop
 8002454:	370c      	adds	r7, #12
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr

0800245e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800245e:	b480      	push	{r7}
 8002460:	b083      	sub	sp, #12
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002466:	bf00      	nop
 8002468:	370c      	adds	r7, #12
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr

08002472 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002472:	b480      	push	{r7}
 8002474:	b083      	sub	sp, #12
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800247a:	bf00      	nop
 800247c:	370c      	adds	r7, #12
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr

08002486 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002486:	b480      	push	{r7}
 8002488:	b083      	sub	sp, #12
 800248a:	af00      	add	r7, sp, #0
 800248c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800248e:	bf00      	nop
 8002490:	370c      	adds	r7, #12
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr

0800249a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800249a:	b480      	push	{r7}
 800249c:	b083      	sub	sp, #12
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80024a2:	bf00      	nop
 80024a4:	370c      	adds	r7, #12
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr

080024ae <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80024ae:	b480      	push	{r7}
 80024b0:	b083      	sub	sp, #12
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80024b6:	bf00      	nop
 80024b8:	370c      	adds	r7, #12
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr

080024c2 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80024c2:	b480      	push	{r7}
 80024c4:	b083      	sub	sp, #12
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80024ca:	bf00      	nop
 80024cc:	370c      	adds	r7, #12
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr

080024d6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80024d6:	b480      	push	{r7}
 80024d8:	b083      	sub	sp, #12
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80024de:	bf00      	nop
 80024e0:	370c      	adds	r7, #12
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr

080024ea <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80024ea:	b480      	push	{r7}
 80024ec:	b083      	sub	sp, #12
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80024f2:	bf00      	nop
 80024f4:	370c      	adds	r7, #12
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr

080024fe <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80024fe:	b480      	push	{r7}
 8002500:	b083      	sub	sp, #12
 8002502:	af00      	add	r7, sp, #0
 8002504:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002506:	bf00      	nop
 8002508:	370c      	adds	r7, #12
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
	...

08002514 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002514:	b480      	push	{r7}
 8002516:	b085      	sub	sp, #20
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f003 0307 	and.w	r3, r3, #7
 8002522:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002524:	4b0c      	ldr	r3, [pc, #48]	; (8002558 <__NVIC_SetPriorityGrouping+0x44>)
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800252a:	68ba      	ldr	r2, [r7, #8]
 800252c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002530:	4013      	ands	r3, r2
 8002532:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800253c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002540:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002544:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002546:	4a04      	ldr	r2, [pc, #16]	; (8002558 <__NVIC_SetPriorityGrouping+0x44>)
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	60d3      	str	r3, [r2, #12]
}
 800254c:	bf00      	nop
 800254e:	3714      	adds	r7, #20
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr
 8002558:	e000ed00 	.word	0xe000ed00

0800255c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002560:	4b04      	ldr	r3, [pc, #16]	; (8002574 <__NVIC_GetPriorityGrouping+0x18>)
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	0a1b      	lsrs	r3, r3, #8
 8002566:	f003 0307 	and.w	r3, r3, #7
}
 800256a:	4618      	mov	r0, r3
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr
 8002574:	e000ed00 	.word	0xe000ed00

08002578 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	4603      	mov	r3, r0
 8002580:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002586:	2b00      	cmp	r3, #0
 8002588:	db0b      	blt.n	80025a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800258a:	79fb      	ldrb	r3, [r7, #7]
 800258c:	f003 021f 	and.w	r2, r3, #31
 8002590:	4907      	ldr	r1, [pc, #28]	; (80025b0 <__NVIC_EnableIRQ+0x38>)
 8002592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002596:	095b      	lsrs	r3, r3, #5
 8002598:	2001      	movs	r0, #1
 800259a:	fa00 f202 	lsl.w	r2, r0, r2
 800259e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025a2:	bf00      	nop
 80025a4:	370c      	adds	r7, #12
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	e000e100 	.word	0xe000e100

080025b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	4603      	mov	r3, r0
 80025bc:	6039      	str	r1, [r7, #0]
 80025be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	db0a      	blt.n	80025de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	b2da      	uxtb	r2, r3
 80025cc:	490c      	ldr	r1, [pc, #48]	; (8002600 <__NVIC_SetPriority+0x4c>)
 80025ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d2:	0112      	lsls	r2, r2, #4
 80025d4:	b2d2      	uxtb	r2, r2
 80025d6:	440b      	add	r3, r1
 80025d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025dc:	e00a      	b.n	80025f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	b2da      	uxtb	r2, r3
 80025e2:	4908      	ldr	r1, [pc, #32]	; (8002604 <__NVIC_SetPriority+0x50>)
 80025e4:	79fb      	ldrb	r3, [r7, #7]
 80025e6:	f003 030f 	and.w	r3, r3, #15
 80025ea:	3b04      	subs	r3, #4
 80025ec:	0112      	lsls	r2, r2, #4
 80025ee:	b2d2      	uxtb	r2, r2
 80025f0:	440b      	add	r3, r1
 80025f2:	761a      	strb	r2, [r3, #24]
}
 80025f4:	bf00      	nop
 80025f6:	370c      	adds	r7, #12
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr
 8002600:	e000e100 	.word	0xe000e100
 8002604:	e000ed00 	.word	0xe000ed00

08002608 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002608:	b480      	push	{r7}
 800260a:	b089      	sub	sp, #36	; 0x24
 800260c:	af00      	add	r7, sp, #0
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	60b9      	str	r1, [r7, #8]
 8002612:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f003 0307 	and.w	r3, r3, #7
 800261a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	f1c3 0307 	rsb	r3, r3, #7
 8002622:	2b04      	cmp	r3, #4
 8002624:	bf28      	it	cs
 8002626:	2304      	movcs	r3, #4
 8002628:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	3304      	adds	r3, #4
 800262e:	2b06      	cmp	r3, #6
 8002630:	d902      	bls.n	8002638 <NVIC_EncodePriority+0x30>
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	3b03      	subs	r3, #3
 8002636:	e000      	b.n	800263a <NVIC_EncodePriority+0x32>
 8002638:	2300      	movs	r3, #0
 800263a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800263c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	fa02 f303 	lsl.w	r3, r2, r3
 8002646:	43da      	mvns	r2, r3
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	401a      	ands	r2, r3
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002650:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	fa01 f303 	lsl.w	r3, r1, r3
 800265a:	43d9      	mvns	r1, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002660:	4313      	orrs	r3, r2
         );
}
 8002662:	4618      	mov	r0, r3
 8002664:	3724      	adds	r7, #36	; 0x24
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
	...

08002670 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	3b01      	subs	r3, #1
 800267c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002680:	d301      	bcc.n	8002686 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002682:	2301      	movs	r3, #1
 8002684:	e00f      	b.n	80026a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002686:	4a0a      	ldr	r2, [pc, #40]	; (80026b0 <SysTick_Config+0x40>)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	3b01      	subs	r3, #1
 800268c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800268e:	210f      	movs	r1, #15
 8002690:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002694:	f7ff ff8e 	bl	80025b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002698:	4b05      	ldr	r3, [pc, #20]	; (80026b0 <SysTick_Config+0x40>)
 800269a:	2200      	movs	r2, #0
 800269c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800269e:	4b04      	ldr	r3, [pc, #16]	; (80026b0 <SysTick_Config+0x40>)
 80026a0:	2207      	movs	r2, #7
 80026a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3708      	adds	r7, #8
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	e000e010 	.word	0xe000e010

080026b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	f7ff ff29 	bl	8002514 <__NVIC_SetPriorityGrouping>
}
 80026c2:	bf00      	nop
 80026c4:	3708      	adds	r7, #8
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}

080026ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026ca:	b580      	push	{r7, lr}
 80026cc:	b086      	sub	sp, #24
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	4603      	mov	r3, r0
 80026d2:	60b9      	str	r1, [r7, #8]
 80026d4:	607a      	str	r2, [r7, #4]
 80026d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026d8:	2300      	movs	r3, #0
 80026da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026dc:	f7ff ff3e 	bl	800255c <__NVIC_GetPriorityGrouping>
 80026e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	68b9      	ldr	r1, [r7, #8]
 80026e6:	6978      	ldr	r0, [r7, #20]
 80026e8:	f7ff ff8e 	bl	8002608 <NVIC_EncodePriority>
 80026ec:	4602      	mov	r2, r0
 80026ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026f2:	4611      	mov	r1, r2
 80026f4:	4618      	mov	r0, r3
 80026f6:	f7ff ff5d 	bl	80025b4 <__NVIC_SetPriority>
}
 80026fa:	bf00      	nop
 80026fc:	3718      	adds	r7, #24
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}

08002702 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002702:	b580      	push	{r7, lr}
 8002704:	b082      	sub	sp, #8
 8002706:	af00      	add	r7, sp, #0
 8002708:	4603      	mov	r3, r0
 800270a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800270c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002710:	4618      	mov	r0, r3
 8002712:	f7ff ff31 	bl	8002578 <__NVIC_EnableIRQ>
}
 8002716:	bf00      	nop
 8002718:	3708      	adds	r7, #8
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}

0800271e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800271e:	b580      	push	{r7, lr}
 8002720:	b082      	sub	sp, #8
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f7ff ffa2 	bl	8002670 <SysTick_Config>
 800272c:	4603      	mov	r3, r0
}
 800272e:	4618      	mov	r0, r3
 8002730:	3708      	adds	r7, #8
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
	...

08002738 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002738:	b480      	push	{r7}
 800273a:	b089      	sub	sp, #36	; 0x24
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002742:	2300      	movs	r3, #0
 8002744:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002746:	2300      	movs	r3, #0
 8002748:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800274a:	2300      	movs	r3, #0
 800274c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800274e:	2300      	movs	r3, #0
 8002750:	61fb      	str	r3, [r7, #28]
 8002752:	e165      	b.n	8002a20 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002754:	2201      	movs	r2, #1
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	fa02 f303 	lsl.w	r3, r2, r3
 800275c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	697a      	ldr	r2, [r7, #20]
 8002764:	4013      	ands	r3, r2
 8002766:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002768:	693a      	ldr	r2, [r7, #16]
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	429a      	cmp	r2, r3
 800276e:	f040 8154 	bne.w	8002a1a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	f003 0303 	and.w	r3, r3, #3
 800277a:	2b01      	cmp	r3, #1
 800277c:	d005      	beq.n	800278a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002786:	2b02      	cmp	r3, #2
 8002788:	d130      	bne.n	80027ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	005b      	lsls	r3, r3, #1
 8002794:	2203      	movs	r2, #3
 8002796:	fa02 f303 	lsl.w	r3, r2, r3
 800279a:	43db      	mvns	r3, r3
 800279c:	69ba      	ldr	r2, [r7, #24]
 800279e:	4013      	ands	r3, r2
 80027a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	68da      	ldr	r2, [r3, #12]
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	005b      	lsls	r3, r3, #1
 80027aa:	fa02 f303 	lsl.w	r3, r2, r3
 80027ae:	69ba      	ldr	r2, [r7, #24]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	69ba      	ldr	r2, [r7, #24]
 80027b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027c0:	2201      	movs	r2, #1
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	fa02 f303 	lsl.w	r3, r2, r3
 80027c8:	43db      	mvns	r3, r3
 80027ca:	69ba      	ldr	r2, [r7, #24]
 80027cc:	4013      	ands	r3, r2
 80027ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	091b      	lsrs	r3, r3, #4
 80027d6:	f003 0201 	and.w	r2, r3, #1
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	fa02 f303 	lsl.w	r3, r2, r3
 80027e0:	69ba      	ldr	r2, [r7, #24]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	69ba      	ldr	r2, [r7, #24]
 80027ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f003 0303 	and.w	r3, r3, #3
 80027f4:	2b03      	cmp	r3, #3
 80027f6:	d017      	beq.n	8002828 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	2203      	movs	r2, #3
 8002804:	fa02 f303 	lsl.w	r3, r2, r3
 8002808:	43db      	mvns	r3, r3
 800280a:	69ba      	ldr	r2, [r7, #24]
 800280c:	4013      	ands	r3, r2
 800280e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	689a      	ldr	r2, [r3, #8]
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	005b      	lsls	r3, r3, #1
 8002818:	fa02 f303 	lsl.w	r3, r2, r3
 800281c:	69ba      	ldr	r2, [r7, #24]
 800281e:	4313      	orrs	r3, r2
 8002820:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f003 0303 	and.w	r3, r3, #3
 8002830:	2b02      	cmp	r3, #2
 8002832:	d123      	bne.n	800287c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	08da      	lsrs	r2, r3, #3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	3208      	adds	r2, #8
 800283c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002840:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	f003 0307 	and.w	r3, r3, #7
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	220f      	movs	r2, #15
 800284c:	fa02 f303 	lsl.w	r3, r2, r3
 8002850:	43db      	mvns	r3, r3
 8002852:	69ba      	ldr	r2, [r7, #24]
 8002854:	4013      	ands	r3, r2
 8002856:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	691a      	ldr	r2, [r3, #16]
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	f003 0307 	and.w	r3, r3, #7
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	fa02 f303 	lsl.w	r3, r2, r3
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	4313      	orrs	r3, r2
 800286c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	08da      	lsrs	r2, r3, #3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	3208      	adds	r2, #8
 8002876:	69b9      	ldr	r1, [r7, #24]
 8002878:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	005b      	lsls	r3, r3, #1
 8002886:	2203      	movs	r2, #3
 8002888:	fa02 f303 	lsl.w	r3, r2, r3
 800288c:	43db      	mvns	r3, r3
 800288e:	69ba      	ldr	r2, [r7, #24]
 8002890:	4013      	ands	r3, r2
 8002892:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f003 0203 	and.w	r2, r3, #3
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	005b      	lsls	r3, r3, #1
 80028a0:	fa02 f303 	lsl.w	r3, r2, r3
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	f000 80ae 	beq.w	8002a1a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028be:	2300      	movs	r3, #0
 80028c0:	60fb      	str	r3, [r7, #12]
 80028c2:	4b5d      	ldr	r3, [pc, #372]	; (8002a38 <HAL_GPIO_Init+0x300>)
 80028c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c6:	4a5c      	ldr	r2, [pc, #368]	; (8002a38 <HAL_GPIO_Init+0x300>)
 80028c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028cc:	6453      	str	r3, [r2, #68]	; 0x44
 80028ce:	4b5a      	ldr	r3, [pc, #360]	; (8002a38 <HAL_GPIO_Init+0x300>)
 80028d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028d6:	60fb      	str	r3, [r7, #12]
 80028d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028da:	4a58      	ldr	r2, [pc, #352]	; (8002a3c <HAL_GPIO_Init+0x304>)
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	089b      	lsrs	r3, r3, #2
 80028e0:	3302      	adds	r3, #2
 80028e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	f003 0303 	and.w	r3, r3, #3
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	220f      	movs	r2, #15
 80028f2:	fa02 f303 	lsl.w	r3, r2, r3
 80028f6:	43db      	mvns	r3, r3
 80028f8:	69ba      	ldr	r2, [r7, #24]
 80028fa:	4013      	ands	r3, r2
 80028fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a4f      	ldr	r2, [pc, #316]	; (8002a40 <HAL_GPIO_Init+0x308>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d025      	beq.n	8002952 <HAL_GPIO_Init+0x21a>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a4e      	ldr	r2, [pc, #312]	; (8002a44 <HAL_GPIO_Init+0x30c>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d01f      	beq.n	800294e <HAL_GPIO_Init+0x216>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a4d      	ldr	r2, [pc, #308]	; (8002a48 <HAL_GPIO_Init+0x310>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d019      	beq.n	800294a <HAL_GPIO_Init+0x212>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a4c      	ldr	r2, [pc, #304]	; (8002a4c <HAL_GPIO_Init+0x314>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d013      	beq.n	8002946 <HAL_GPIO_Init+0x20e>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a4b      	ldr	r2, [pc, #300]	; (8002a50 <HAL_GPIO_Init+0x318>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d00d      	beq.n	8002942 <HAL_GPIO_Init+0x20a>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a4a      	ldr	r2, [pc, #296]	; (8002a54 <HAL_GPIO_Init+0x31c>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d007      	beq.n	800293e <HAL_GPIO_Init+0x206>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a49      	ldr	r2, [pc, #292]	; (8002a58 <HAL_GPIO_Init+0x320>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d101      	bne.n	800293a <HAL_GPIO_Init+0x202>
 8002936:	2306      	movs	r3, #6
 8002938:	e00c      	b.n	8002954 <HAL_GPIO_Init+0x21c>
 800293a:	2307      	movs	r3, #7
 800293c:	e00a      	b.n	8002954 <HAL_GPIO_Init+0x21c>
 800293e:	2305      	movs	r3, #5
 8002940:	e008      	b.n	8002954 <HAL_GPIO_Init+0x21c>
 8002942:	2304      	movs	r3, #4
 8002944:	e006      	b.n	8002954 <HAL_GPIO_Init+0x21c>
 8002946:	2303      	movs	r3, #3
 8002948:	e004      	b.n	8002954 <HAL_GPIO_Init+0x21c>
 800294a:	2302      	movs	r3, #2
 800294c:	e002      	b.n	8002954 <HAL_GPIO_Init+0x21c>
 800294e:	2301      	movs	r3, #1
 8002950:	e000      	b.n	8002954 <HAL_GPIO_Init+0x21c>
 8002952:	2300      	movs	r3, #0
 8002954:	69fa      	ldr	r2, [r7, #28]
 8002956:	f002 0203 	and.w	r2, r2, #3
 800295a:	0092      	lsls	r2, r2, #2
 800295c:	4093      	lsls	r3, r2
 800295e:	69ba      	ldr	r2, [r7, #24]
 8002960:	4313      	orrs	r3, r2
 8002962:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002964:	4935      	ldr	r1, [pc, #212]	; (8002a3c <HAL_GPIO_Init+0x304>)
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	089b      	lsrs	r3, r3, #2
 800296a:	3302      	adds	r3, #2
 800296c:	69ba      	ldr	r2, [r7, #24]
 800296e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002972:	4b3a      	ldr	r3, [pc, #232]	; (8002a5c <HAL_GPIO_Init+0x324>)
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	43db      	mvns	r3, r3
 800297c:	69ba      	ldr	r2, [r7, #24]
 800297e:	4013      	ands	r3, r2
 8002980:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d003      	beq.n	8002996 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800298e:	69ba      	ldr	r2, [r7, #24]
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	4313      	orrs	r3, r2
 8002994:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002996:	4a31      	ldr	r2, [pc, #196]	; (8002a5c <HAL_GPIO_Init+0x324>)
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800299c:	4b2f      	ldr	r3, [pc, #188]	; (8002a5c <HAL_GPIO_Init+0x324>)
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	43db      	mvns	r3, r3
 80029a6:	69ba      	ldr	r2, [r7, #24]
 80029a8:	4013      	ands	r3, r2
 80029aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d003      	beq.n	80029c0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80029b8:	69ba      	ldr	r2, [r7, #24]
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	4313      	orrs	r3, r2
 80029be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029c0:	4a26      	ldr	r2, [pc, #152]	; (8002a5c <HAL_GPIO_Init+0x324>)
 80029c2:	69bb      	ldr	r3, [r7, #24]
 80029c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80029c6:	4b25      	ldr	r3, [pc, #148]	; (8002a5c <HAL_GPIO_Init+0x324>)
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	43db      	mvns	r3, r3
 80029d0:	69ba      	ldr	r2, [r7, #24]
 80029d2:	4013      	ands	r3, r2
 80029d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d003      	beq.n	80029ea <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80029e2:	69ba      	ldr	r2, [r7, #24]
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029ea:	4a1c      	ldr	r2, [pc, #112]	; (8002a5c <HAL_GPIO_Init+0x324>)
 80029ec:	69bb      	ldr	r3, [r7, #24]
 80029ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029f0:	4b1a      	ldr	r3, [pc, #104]	; (8002a5c <HAL_GPIO_Init+0x324>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	43db      	mvns	r3, r3
 80029fa:	69ba      	ldr	r2, [r7, #24]
 80029fc:	4013      	ands	r3, r2
 80029fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d003      	beq.n	8002a14 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002a0c:	69ba      	ldr	r2, [r7, #24]
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a14:	4a11      	ldr	r2, [pc, #68]	; (8002a5c <HAL_GPIO_Init+0x324>)
 8002a16:	69bb      	ldr	r3, [r7, #24]
 8002a18:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	3301      	adds	r3, #1
 8002a1e:	61fb      	str	r3, [r7, #28]
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	2b0f      	cmp	r3, #15
 8002a24:	f67f ae96 	bls.w	8002754 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a28:	bf00      	nop
 8002a2a:	bf00      	nop
 8002a2c:	3724      	adds	r7, #36	; 0x24
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	40023800 	.word	0x40023800
 8002a3c:	40013800 	.word	0x40013800
 8002a40:	40020000 	.word	0x40020000
 8002a44:	40020400 	.word	0x40020400
 8002a48:	40020800 	.word	0x40020800
 8002a4c:	40020c00 	.word	0x40020c00
 8002a50:	40021000 	.word	0x40021000
 8002a54:	40021400 	.word	0x40021400
 8002a58:	40021800 	.word	0x40021800
 8002a5c:	40013c00 	.word	0x40013c00

08002a60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	460b      	mov	r3, r1
 8002a6a:	807b      	strh	r3, [r7, #2]
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a70:	787b      	ldrb	r3, [r7, #1]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d003      	beq.n	8002a7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a76:	887a      	ldrh	r2, [r7, #2]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a7c:	e003      	b.n	8002a86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a7e:	887b      	ldrh	r3, [r7, #2]
 8002a80:	041a      	lsls	r2, r3, #16
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	619a      	str	r2, [r3, #24]
}
 8002a86:	bf00      	nop
 8002a88:	370c      	adds	r7, #12
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr
	...

08002a94 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	603b      	str	r3, [r7, #0]
 8002aa2:	4b20      	ldr	r3, [pc, #128]	; (8002b24 <HAL_PWREx_EnableOverDrive+0x90>)
 8002aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa6:	4a1f      	ldr	r2, [pc, #124]	; (8002b24 <HAL_PWREx_EnableOverDrive+0x90>)
 8002aa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aac:	6413      	str	r3, [r2, #64]	; 0x40
 8002aae:	4b1d      	ldr	r3, [pc, #116]	; (8002b24 <HAL_PWREx_EnableOverDrive+0x90>)
 8002ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ab6:	603b      	str	r3, [r7, #0]
 8002ab8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002aba:	4b1b      	ldr	r3, [pc, #108]	; (8002b28 <HAL_PWREx_EnableOverDrive+0x94>)
 8002abc:	2201      	movs	r2, #1
 8002abe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ac0:	f7fe ff70 	bl	80019a4 <HAL_GetTick>
 8002ac4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002ac6:	e009      	b.n	8002adc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002ac8:	f7fe ff6c 	bl	80019a4 <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ad6:	d901      	bls.n	8002adc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e01f      	b.n	8002b1c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002adc:	4b13      	ldr	r3, [pc, #76]	; (8002b2c <HAL_PWREx_EnableOverDrive+0x98>)
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ae4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ae8:	d1ee      	bne.n	8002ac8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002aea:	4b11      	ldr	r3, [pc, #68]	; (8002b30 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002aec:	2201      	movs	r2, #1
 8002aee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002af0:	f7fe ff58 	bl	80019a4 <HAL_GetTick>
 8002af4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002af6:	e009      	b.n	8002b0c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002af8:	f7fe ff54 	bl	80019a4 <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b06:	d901      	bls.n	8002b0c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	e007      	b.n	8002b1c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002b0c:	4b07      	ldr	r3, [pc, #28]	; (8002b2c <HAL_PWREx_EnableOverDrive+0x98>)
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b18:	d1ee      	bne.n	8002af8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002b1a:	2300      	movs	r3, #0
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3708      	adds	r7, #8
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	40023800 	.word	0x40023800
 8002b28:	420e0040 	.word	0x420e0040
 8002b2c:	40007000 	.word	0x40007000
 8002b30:	420e0044 	.word	0x420e0044

08002b34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d101      	bne.n	8002b48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e0cc      	b.n	8002ce2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b48:	4b68      	ldr	r3, [pc, #416]	; (8002cec <HAL_RCC_ClockConfig+0x1b8>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 030f 	and.w	r3, r3, #15
 8002b50:	683a      	ldr	r2, [r7, #0]
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d90c      	bls.n	8002b70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b56:	4b65      	ldr	r3, [pc, #404]	; (8002cec <HAL_RCC_ClockConfig+0x1b8>)
 8002b58:	683a      	ldr	r2, [r7, #0]
 8002b5a:	b2d2      	uxtb	r2, r2
 8002b5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b5e:	4b63      	ldr	r3, [pc, #396]	; (8002cec <HAL_RCC_ClockConfig+0x1b8>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 030f 	and.w	r3, r3, #15
 8002b66:	683a      	ldr	r2, [r7, #0]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d001      	beq.n	8002b70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e0b8      	b.n	8002ce2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0302 	and.w	r3, r3, #2
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d020      	beq.n	8002bbe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 0304 	and.w	r3, r3, #4
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d005      	beq.n	8002b94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b88:	4b59      	ldr	r3, [pc, #356]	; (8002cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	4a58      	ldr	r2, [pc, #352]	; (8002cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b8e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b92:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0308 	and.w	r3, r3, #8
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d005      	beq.n	8002bac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ba0:	4b53      	ldr	r3, [pc, #332]	; (8002cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	4a52      	ldr	r2, [pc, #328]	; (8002cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002baa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bac:	4b50      	ldr	r3, [pc, #320]	; (8002cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	494d      	ldr	r1, [pc, #308]	; (8002cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0301 	and.w	r3, r3, #1
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d044      	beq.n	8002c54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d107      	bne.n	8002be2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bd2:	4b47      	ldr	r3, [pc, #284]	; (8002cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d119      	bne.n	8002c12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e07f      	b.n	8002ce2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	2b02      	cmp	r3, #2
 8002be8:	d003      	beq.n	8002bf2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bee:	2b03      	cmp	r3, #3
 8002bf0:	d107      	bne.n	8002c02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bf2:	4b3f      	ldr	r3, [pc, #252]	; (8002cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d109      	bne.n	8002c12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e06f      	b.n	8002ce2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c02:	4b3b      	ldr	r3, [pc, #236]	; (8002cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0302 	and.w	r3, r3, #2
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d101      	bne.n	8002c12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e067      	b.n	8002ce2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c12:	4b37      	ldr	r3, [pc, #220]	; (8002cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	f023 0203 	bic.w	r2, r3, #3
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	4934      	ldr	r1, [pc, #208]	; (8002cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c20:	4313      	orrs	r3, r2
 8002c22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c24:	f7fe febe 	bl	80019a4 <HAL_GetTick>
 8002c28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c2a:	e00a      	b.n	8002c42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c2c:	f7fe feba 	bl	80019a4 <HAL_GetTick>
 8002c30:	4602      	mov	r2, r0
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d901      	bls.n	8002c42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	e04f      	b.n	8002ce2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c42:	4b2b      	ldr	r3, [pc, #172]	; (8002cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	f003 020c 	and.w	r2, r3, #12
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d1eb      	bne.n	8002c2c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c54:	4b25      	ldr	r3, [pc, #148]	; (8002cec <HAL_RCC_ClockConfig+0x1b8>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 030f 	and.w	r3, r3, #15
 8002c5c:	683a      	ldr	r2, [r7, #0]
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d20c      	bcs.n	8002c7c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c62:	4b22      	ldr	r3, [pc, #136]	; (8002cec <HAL_RCC_ClockConfig+0x1b8>)
 8002c64:	683a      	ldr	r2, [r7, #0]
 8002c66:	b2d2      	uxtb	r2, r2
 8002c68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c6a:	4b20      	ldr	r3, [pc, #128]	; (8002cec <HAL_RCC_ClockConfig+0x1b8>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 030f 	and.w	r3, r3, #15
 8002c72:	683a      	ldr	r2, [r7, #0]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d001      	beq.n	8002c7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e032      	b.n	8002ce2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0304 	and.w	r3, r3, #4
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d008      	beq.n	8002c9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c88:	4b19      	ldr	r3, [pc, #100]	; (8002cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	4916      	ldr	r1, [pc, #88]	; (8002cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c96:	4313      	orrs	r3, r2
 8002c98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0308 	and.w	r3, r3, #8
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d009      	beq.n	8002cba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ca6:	4b12      	ldr	r3, [pc, #72]	; (8002cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	691b      	ldr	r3, [r3, #16]
 8002cb2:	00db      	lsls	r3, r3, #3
 8002cb4:	490e      	ldr	r1, [pc, #56]	; (8002cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002cba:	f000 f855 	bl	8002d68 <HAL_RCC_GetSysClockFreq>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	4b0b      	ldr	r3, [pc, #44]	; (8002cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	091b      	lsrs	r3, r3, #4
 8002cc6:	f003 030f 	and.w	r3, r3, #15
 8002cca:	490a      	ldr	r1, [pc, #40]	; (8002cf4 <HAL_RCC_ClockConfig+0x1c0>)
 8002ccc:	5ccb      	ldrb	r3, [r1, r3]
 8002cce:	fa22 f303 	lsr.w	r3, r2, r3
 8002cd2:	4a09      	ldr	r2, [pc, #36]	; (8002cf8 <HAL_RCC_ClockConfig+0x1c4>)
 8002cd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002cd6:	4b09      	ldr	r3, [pc, #36]	; (8002cfc <HAL_RCC_ClockConfig+0x1c8>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f7fe fe1e 	bl	800191c <HAL_InitTick>

  return HAL_OK;
 8002ce0:	2300      	movs	r3, #0
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3710      	adds	r7, #16
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	40023c00 	.word	0x40023c00
 8002cf0:	40023800 	.word	0x40023800
 8002cf4:	08005684 	.word	0x08005684
 8002cf8:	20000000 	.word	0x20000000
 8002cfc:	20000004 	.word	0x20000004

08002d00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d00:	b480      	push	{r7}
 8002d02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d04:	4b03      	ldr	r3, [pc, #12]	; (8002d14 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d06:	681b      	ldr	r3, [r3, #0]
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr
 8002d12:	bf00      	nop
 8002d14:	20000000 	.word	0x20000000

08002d18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002d1c:	f7ff fff0 	bl	8002d00 <HAL_RCC_GetHCLKFreq>
 8002d20:	4602      	mov	r2, r0
 8002d22:	4b05      	ldr	r3, [pc, #20]	; (8002d38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	0a9b      	lsrs	r3, r3, #10
 8002d28:	f003 0307 	and.w	r3, r3, #7
 8002d2c:	4903      	ldr	r1, [pc, #12]	; (8002d3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d2e:	5ccb      	ldrb	r3, [r1, r3]
 8002d30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	40023800 	.word	0x40023800
 8002d3c:	08005694 	.word	0x08005694

08002d40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002d44:	f7ff ffdc 	bl	8002d00 <HAL_RCC_GetHCLKFreq>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	4b05      	ldr	r3, [pc, #20]	; (8002d60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	0b5b      	lsrs	r3, r3, #13
 8002d50:	f003 0307 	and.w	r3, r3, #7
 8002d54:	4903      	ldr	r1, [pc, #12]	; (8002d64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d56:	5ccb      	ldrb	r3, [r1, r3]
 8002d58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	40023800 	.word	0x40023800
 8002d64:	08005694 	.word	0x08005694

08002d68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d6c:	b0ae      	sub	sp, #184	; 0xb8
 8002d6e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002d70:	2300      	movs	r3, #0
 8002d72:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002d76:	2300      	movs	r3, #0
 8002d78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002d82:	2300      	movs	r3, #0
 8002d84:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d8e:	4bcb      	ldr	r3, [pc, #812]	; (80030bc <HAL_RCC_GetSysClockFreq+0x354>)
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	f003 030c 	and.w	r3, r3, #12
 8002d96:	2b0c      	cmp	r3, #12
 8002d98:	f200 8206 	bhi.w	80031a8 <HAL_RCC_GetSysClockFreq+0x440>
 8002d9c:	a201      	add	r2, pc, #4	; (adr r2, 8002da4 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002da2:	bf00      	nop
 8002da4:	08002dd9 	.word	0x08002dd9
 8002da8:	080031a9 	.word	0x080031a9
 8002dac:	080031a9 	.word	0x080031a9
 8002db0:	080031a9 	.word	0x080031a9
 8002db4:	08002de1 	.word	0x08002de1
 8002db8:	080031a9 	.word	0x080031a9
 8002dbc:	080031a9 	.word	0x080031a9
 8002dc0:	080031a9 	.word	0x080031a9
 8002dc4:	08002de9 	.word	0x08002de9
 8002dc8:	080031a9 	.word	0x080031a9
 8002dcc:	080031a9 	.word	0x080031a9
 8002dd0:	080031a9 	.word	0x080031a9
 8002dd4:	08002fd9 	.word	0x08002fd9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002dd8:	4bb9      	ldr	r3, [pc, #740]	; (80030c0 <HAL_RCC_GetSysClockFreq+0x358>)
 8002dda:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002dde:	e1e7      	b.n	80031b0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002de0:	4bb8      	ldr	r3, [pc, #736]	; (80030c4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002de2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002de6:	e1e3      	b.n	80031b0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002de8:	4bb4      	ldr	r3, [pc, #720]	; (80030bc <HAL_RCC_GetSysClockFreq+0x354>)
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002df0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002df4:	4bb1      	ldr	r3, [pc, #708]	; (80030bc <HAL_RCC_GetSysClockFreq+0x354>)
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d071      	beq.n	8002ee4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e00:	4bae      	ldr	r3, [pc, #696]	; (80030bc <HAL_RCC_GetSysClockFreq+0x354>)
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	099b      	lsrs	r3, r3, #6
 8002e06:	2200      	movs	r2, #0
 8002e08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002e0c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002e10:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002e14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e18:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002e22:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002e26:	4622      	mov	r2, r4
 8002e28:	462b      	mov	r3, r5
 8002e2a:	f04f 0000 	mov.w	r0, #0
 8002e2e:	f04f 0100 	mov.w	r1, #0
 8002e32:	0159      	lsls	r1, r3, #5
 8002e34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e38:	0150      	lsls	r0, r2, #5
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	4621      	mov	r1, r4
 8002e40:	1a51      	subs	r1, r2, r1
 8002e42:	6439      	str	r1, [r7, #64]	; 0x40
 8002e44:	4629      	mov	r1, r5
 8002e46:	eb63 0301 	sbc.w	r3, r3, r1
 8002e4a:	647b      	str	r3, [r7, #68]	; 0x44
 8002e4c:	f04f 0200 	mov.w	r2, #0
 8002e50:	f04f 0300 	mov.w	r3, #0
 8002e54:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002e58:	4649      	mov	r1, r9
 8002e5a:	018b      	lsls	r3, r1, #6
 8002e5c:	4641      	mov	r1, r8
 8002e5e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e62:	4641      	mov	r1, r8
 8002e64:	018a      	lsls	r2, r1, #6
 8002e66:	4641      	mov	r1, r8
 8002e68:	1a51      	subs	r1, r2, r1
 8002e6a:	63b9      	str	r1, [r7, #56]	; 0x38
 8002e6c:	4649      	mov	r1, r9
 8002e6e:	eb63 0301 	sbc.w	r3, r3, r1
 8002e72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e74:	f04f 0200 	mov.w	r2, #0
 8002e78:	f04f 0300 	mov.w	r3, #0
 8002e7c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002e80:	4649      	mov	r1, r9
 8002e82:	00cb      	lsls	r3, r1, #3
 8002e84:	4641      	mov	r1, r8
 8002e86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e8a:	4641      	mov	r1, r8
 8002e8c:	00ca      	lsls	r2, r1, #3
 8002e8e:	4610      	mov	r0, r2
 8002e90:	4619      	mov	r1, r3
 8002e92:	4603      	mov	r3, r0
 8002e94:	4622      	mov	r2, r4
 8002e96:	189b      	adds	r3, r3, r2
 8002e98:	633b      	str	r3, [r7, #48]	; 0x30
 8002e9a:	462b      	mov	r3, r5
 8002e9c:	460a      	mov	r2, r1
 8002e9e:	eb42 0303 	adc.w	r3, r2, r3
 8002ea2:	637b      	str	r3, [r7, #52]	; 0x34
 8002ea4:	f04f 0200 	mov.w	r2, #0
 8002ea8:	f04f 0300 	mov.w	r3, #0
 8002eac:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002eb0:	4629      	mov	r1, r5
 8002eb2:	024b      	lsls	r3, r1, #9
 8002eb4:	4621      	mov	r1, r4
 8002eb6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002eba:	4621      	mov	r1, r4
 8002ebc:	024a      	lsls	r2, r1, #9
 8002ebe:	4610      	mov	r0, r2
 8002ec0:	4619      	mov	r1, r3
 8002ec2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002ecc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002ed0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002ed4:	f7fd f996 	bl	8000204 <__aeabi_uldivmod>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	460b      	mov	r3, r1
 8002edc:	4613      	mov	r3, r2
 8002ede:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002ee2:	e067      	b.n	8002fb4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ee4:	4b75      	ldr	r3, [pc, #468]	; (80030bc <HAL_RCC_GetSysClockFreq+0x354>)
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	099b      	lsrs	r3, r3, #6
 8002eea:	2200      	movs	r2, #0
 8002eec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002ef0:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002ef4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002ef8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002efc:	67bb      	str	r3, [r7, #120]	; 0x78
 8002efe:	2300      	movs	r3, #0
 8002f00:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002f02:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002f06:	4622      	mov	r2, r4
 8002f08:	462b      	mov	r3, r5
 8002f0a:	f04f 0000 	mov.w	r0, #0
 8002f0e:	f04f 0100 	mov.w	r1, #0
 8002f12:	0159      	lsls	r1, r3, #5
 8002f14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f18:	0150      	lsls	r0, r2, #5
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	460b      	mov	r3, r1
 8002f1e:	4621      	mov	r1, r4
 8002f20:	1a51      	subs	r1, r2, r1
 8002f22:	62b9      	str	r1, [r7, #40]	; 0x28
 8002f24:	4629      	mov	r1, r5
 8002f26:	eb63 0301 	sbc.w	r3, r3, r1
 8002f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f2c:	f04f 0200 	mov.w	r2, #0
 8002f30:	f04f 0300 	mov.w	r3, #0
 8002f34:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002f38:	4649      	mov	r1, r9
 8002f3a:	018b      	lsls	r3, r1, #6
 8002f3c:	4641      	mov	r1, r8
 8002f3e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f42:	4641      	mov	r1, r8
 8002f44:	018a      	lsls	r2, r1, #6
 8002f46:	4641      	mov	r1, r8
 8002f48:	ebb2 0a01 	subs.w	sl, r2, r1
 8002f4c:	4649      	mov	r1, r9
 8002f4e:	eb63 0b01 	sbc.w	fp, r3, r1
 8002f52:	f04f 0200 	mov.w	r2, #0
 8002f56:	f04f 0300 	mov.w	r3, #0
 8002f5a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002f5e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002f62:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f66:	4692      	mov	sl, r2
 8002f68:	469b      	mov	fp, r3
 8002f6a:	4623      	mov	r3, r4
 8002f6c:	eb1a 0303 	adds.w	r3, sl, r3
 8002f70:	623b      	str	r3, [r7, #32]
 8002f72:	462b      	mov	r3, r5
 8002f74:	eb4b 0303 	adc.w	r3, fp, r3
 8002f78:	627b      	str	r3, [r7, #36]	; 0x24
 8002f7a:	f04f 0200 	mov.w	r2, #0
 8002f7e:	f04f 0300 	mov.w	r3, #0
 8002f82:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002f86:	4629      	mov	r1, r5
 8002f88:	028b      	lsls	r3, r1, #10
 8002f8a:	4621      	mov	r1, r4
 8002f8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f90:	4621      	mov	r1, r4
 8002f92:	028a      	lsls	r2, r1, #10
 8002f94:	4610      	mov	r0, r2
 8002f96:	4619      	mov	r1, r3
 8002f98:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	673b      	str	r3, [r7, #112]	; 0x70
 8002fa0:	677a      	str	r2, [r7, #116]	; 0x74
 8002fa2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002fa6:	f7fd f92d 	bl	8000204 <__aeabi_uldivmod>
 8002faa:	4602      	mov	r2, r0
 8002fac:	460b      	mov	r3, r1
 8002fae:	4613      	mov	r3, r2
 8002fb0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002fb4:	4b41      	ldr	r3, [pc, #260]	; (80030bc <HAL_RCC_GetSysClockFreq+0x354>)
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	0c1b      	lsrs	r3, r3, #16
 8002fba:	f003 0303 	and.w	r3, r3, #3
 8002fbe:	3301      	adds	r3, #1
 8002fc0:	005b      	lsls	r3, r3, #1
 8002fc2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002fc6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002fca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002fce:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fd2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002fd6:	e0eb      	b.n	80031b0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fd8:	4b38      	ldr	r3, [pc, #224]	; (80030bc <HAL_RCC_GetSysClockFreq+0x354>)
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fe0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002fe4:	4b35      	ldr	r3, [pc, #212]	; (80030bc <HAL_RCC_GetSysClockFreq+0x354>)
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d06b      	beq.n	80030c8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ff0:	4b32      	ldr	r3, [pc, #200]	; (80030bc <HAL_RCC_GetSysClockFreq+0x354>)
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	099b      	lsrs	r3, r3, #6
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	66bb      	str	r3, [r7, #104]	; 0x68
 8002ffa:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002ffc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ffe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003002:	663b      	str	r3, [r7, #96]	; 0x60
 8003004:	2300      	movs	r3, #0
 8003006:	667b      	str	r3, [r7, #100]	; 0x64
 8003008:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800300c:	4622      	mov	r2, r4
 800300e:	462b      	mov	r3, r5
 8003010:	f04f 0000 	mov.w	r0, #0
 8003014:	f04f 0100 	mov.w	r1, #0
 8003018:	0159      	lsls	r1, r3, #5
 800301a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800301e:	0150      	lsls	r0, r2, #5
 8003020:	4602      	mov	r2, r0
 8003022:	460b      	mov	r3, r1
 8003024:	4621      	mov	r1, r4
 8003026:	1a51      	subs	r1, r2, r1
 8003028:	61b9      	str	r1, [r7, #24]
 800302a:	4629      	mov	r1, r5
 800302c:	eb63 0301 	sbc.w	r3, r3, r1
 8003030:	61fb      	str	r3, [r7, #28]
 8003032:	f04f 0200 	mov.w	r2, #0
 8003036:	f04f 0300 	mov.w	r3, #0
 800303a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800303e:	4659      	mov	r1, fp
 8003040:	018b      	lsls	r3, r1, #6
 8003042:	4651      	mov	r1, sl
 8003044:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003048:	4651      	mov	r1, sl
 800304a:	018a      	lsls	r2, r1, #6
 800304c:	4651      	mov	r1, sl
 800304e:	ebb2 0801 	subs.w	r8, r2, r1
 8003052:	4659      	mov	r1, fp
 8003054:	eb63 0901 	sbc.w	r9, r3, r1
 8003058:	f04f 0200 	mov.w	r2, #0
 800305c:	f04f 0300 	mov.w	r3, #0
 8003060:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003064:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003068:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800306c:	4690      	mov	r8, r2
 800306e:	4699      	mov	r9, r3
 8003070:	4623      	mov	r3, r4
 8003072:	eb18 0303 	adds.w	r3, r8, r3
 8003076:	613b      	str	r3, [r7, #16]
 8003078:	462b      	mov	r3, r5
 800307a:	eb49 0303 	adc.w	r3, r9, r3
 800307e:	617b      	str	r3, [r7, #20]
 8003080:	f04f 0200 	mov.w	r2, #0
 8003084:	f04f 0300 	mov.w	r3, #0
 8003088:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800308c:	4629      	mov	r1, r5
 800308e:	024b      	lsls	r3, r1, #9
 8003090:	4621      	mov	r1, r4
 8003092:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003096:	4621      	mov	r1, r4
 8003098:	024a      	lsls	r2, r1, #9
 800309a:	4610      	mov	r0, r2
 800309c:	4619      	mov	r1, r3
 800309e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80030a2:	2200      	movs	r2, #0
 80030a4:	65bb      	str	r3, [r7, #88]	; 0x58
 80030a6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80030a8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80030ac:	f7fd f8aa 	bl	8000204 <__aeabi_uldivmod>
 80030b0:	4602      	mov	r2, r0
 80030b2:	460b      	mov	r3, r1
 80030b4:	4613      	mov	r3, r2
 80030b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80030ba:	e065      	b.n	8003188 <HAL_RCC_GetSysClockFreq+0x420>
 80030bc:	40023800 	.word	0x40023800
 80030c0:	00f42400 	.word	0x00f42400
 80030c4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030c8:	4b3d      	ldr	r3, [pc, #244]	; (80031c0 <HAL_RCC_GetSysClockFreq+0x458>)
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	099b      	lsrs	r3, r3, #6
 80030ce:	2200      	movs	r2, #0
 80030d0:	4618      	mov	r0, r3
 80030d2:	4611      	mov	r1, r2
 80030d4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80030d8:	653b      	str	r3, [r7, #80]	; 0x50
 80030da:	2300      	movs	r3, #0
 80030dc:	657b      	str	r3, [r7, #84]	; 0x54
 80030de:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80030e2:	4642      	mov	r2, r8
 80030e4:	464b      	mov	r3, r9
 80030e6:	f04f 0000 	mov.w	r0, #0
 80030ea:	f04f 0100 	mov.w	r1, #0
 80030ee:	0159      	lsls	r1, r3, #5
 80030f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030f4:	0150      	lsls	r0, r2, #5
 80030f6:	4602      	mov	r2, r0
 80030f8:	460b      	mov	r3, r1
 80030fa:	4641      	mov	r1, r8
 80030fc:	1a51      	subs	r1, r2, r1
 80030fe:	60b9      	str	r1, [r7, #8]
 8003100:	4649      	mov	r1, r9
 8003102:	eb63 0301 	sbc.w	r3, r3, r1
 8003106:	60fb      	str	r3, [r7, #12]
 8003108:	f04f 0200 	mov.w	r2, #0
 800310c:	f04f 0300 	mov.w	r3, #0
 8003110:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003114:	4659      	mov	r1, fp
 8003116:	018b      	lsls	r3, r1, #6
 8003118:	4651      	mov	r1, sl
 800311a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800311e:	4651      	mov	r1, sl
 8003120:	018a      	lsls	r2, r1, #6
 8003122:	4651      	mov	r1, sl
 8003124:	1a54      	subs	r4, r2, r1
 8003126:	4659      	mov	r1, fp
 8003128:	eb63 0501 	sbc.w	r5, r3, r1
 800312c:	f04f 0200 	mov.w	r2, #0
 8003130:	f04f 0300 	mov.w	r3, #0
 8003134:	00eb      	lsls	r3, r5, #3
 8003136:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800313a:	00e2      	lsls	r2, r4, #3
 800313c:	4614      	mov	r4, r2
 800313e:	461d      	mov	r5, r3
 8003140:	4643      	mov	r3, r8
 8003142:	18e3      	adds	r3, r4, r3
 8003144:	603b      	str	r3, [r7, #0]
 8003146:	464b      	mov	r3, r9
 8003148:	eb45 0303 	adc.w	r3, r5, r3
 800314c:	607b      	str	r3, [r7, #4]
 800314e:	f04f 0200 	mov.w	r2, #0
 8003152:	f04f 0300 	mov.w	r3, #0
 8003156:	e9d7 4500 	ldrd	r4, r5, [r7]
 800315a:	4629      	mov	r1, r5
 800315c:	028b      	lsls	r3, r1, #10
 800315e:	4621      	mov	r1, r4
 8003160:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003164:	4621      	mov	r1, r4
 8003166:	028a      	lsls	r2, r1, #10
 8003168:	4610      	mov	r0, r2
 800316a:	4619      	mov	r1, r3
 800316c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003170:	2200      	movs	r2, #0
 8003172:	64bb      	str	r3, [r7, #72]	; 0x48
 8003174:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003176:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800317a:	f7fd f843 	bl	8000204 <__aeabi_uldivmod>
 800317e:	4602      	mov	r2, r0
 8003180:	460b      	mov	r3, r1
 8003182:	4613      	mov	r3, r2
 8003184:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003188:	4b0d      	ldr	r3, [pc, #52]	; (80031c0 <HAL_RCC_GetSysClockFreq+0x458>)
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	0f1b      	lsrs	r3, r3, #28
 800318e:	f003 0307 	and.w	r3, r3, #7
 8003192:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003196:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800319a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800319e:	fbb2 f3f3 	udiv	r3, r2, r3
 80031a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80031a6:	e003      	b.n	80031b0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80031a8:	4b06      	ldr	r3, [pc, #24]	; (80031c4 <HAL_RCC_GetSysClockFreq+0x45c>)
 80031aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80031ae:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031b0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	37b8      	adds	r7, #184	; 0xb8
 80031b8:	46bd      	mov	sp, r7
 80031ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031be:	bf00      	nop
 80031c0:	40023800 	.word	0x40023800
 80031c4:	00f42400 	.word	0x00f42400

080031c8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b086      	sub	sp, #24
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d101      	bne.n	80031da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e28d      	b.n	80036f6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0301 	and.w	r3, r3, #1
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	f000 8083 	beq.w	80032ee <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80031e8:	4b94      	ldr	r3, [pc, #592]	; (800343c <HAL_RCC_OscConfig+0x274>)
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	f003 030c 	and.w	r3, r3, #12
 80031f0:	2b04      	cmp	r3, #4
 80031f2:	d019      	beq.n	8003228 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80031f4:	4b91      	ldr	r3, [pc, #580]	; (800343c <HAL_RCC_OscConfig+0x274>)
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80031fc:	2b08      	cmp	r3, #8
 80031fe:	d106      	bne.n	800320e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003200:	4b8e      	ldr	r3, [pc, #568]	; (800343c <HAL_RCC_OscConfig+0x274>)
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003208:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800320c:	d00c      	beq.n	8003228 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800320e:	4b8b      	ldr	r3, [pc, #556]	; (800343c <HAL_RCC_OscConfig+0x274>)
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003216:	2b0c      	cmp	r3, #12
 8003218:	d112      	bne.n	8003240 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800321a:	4b88      	ldr	r3, [pc, #544]	; (800343c <HAL_RCC_OscConfig+0x274>)
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003222:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003226:	d10b      	bne.n	8003240 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003228:	4b84      	ldr	r3, [pc, #528]	; (800343c <HAL_RCC_OscConfig+0x274>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003230:	2b00      	cmp	r3, #0
 8003232:	d05b      	beq.n	80032ec <HAL_RCC_OscConfig+0x124>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d157      	bne.n	80032ec <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e25a      	b.n	80036f6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003248:	d106      	bne.n	8003258 <HAL_RCC_OscConfig+0x90>
 800324a:	4b7c      	ldr	r3, [pc, #496]	; (800343c <HAL_RCC_OscConfig+0x274>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a7b      	ldr	r2, [pc, #492]	; (800343c <HAL_RCC_OscConfig+0x274>)
 8003250:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003254:	6013      	str	r3, [r2, #0]
 8003256:	e01d      	b.n	8003294 <HAL_RCC_OscConfig+0xcc>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003260:	d10c      	bne.n	800327c <HAL_RCC_OscConfig+0xb4>
 8003262:	4b76      	ldr	r3, [pc, #472]	; (800343c <HAL_RCC_OscConfig+0x274>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a75      	ldr	r2, [pc, #468]	; (800343c <HAL_RCC_OscConfig+0x274>)
 8003268:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800326c:	6013      	str	r3, [r2, #0]
 800326e:	4b73      	ldr	r3, [pc, #460]	; (800343c <HAL_RCC_OscConfig+0x274>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a72      	ldr	r2, [pc, #456]	; (800343c <HAL_RCC_OscConfig+0x274>)
 8003274:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003278:	6013      	str	r3, [r2, #0]
 800327a:	e00b      	b.n	8003294 <HAL_RCC_OscConfig+0xcc>
 800327c:	4b6f      	ldr	r3, [pc, #444]	; (800343c <HAL_RCC_OscConfig+0x274>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a6e      	ldr	r2, [pc, #440]	; (800343c <HAL_RCC_OscConfig+0x274>)
 8003282:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003286:	6013      	str	r3, [r2, #0]
 8003288:	4b6c      	ldr	r3, [pc, #432]	; (800343c <HAL_RCC_OscConfig+0x274>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a6b      	ldr	r2, [pc, #428]	; (800343c <HAL_RCC_OscConfig+0x274>)
 800328e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003292:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d013      	beq.n	80032c4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800329c:	f7fe fb82 	bl	80019a4 <HAL_GetTick>
 80032a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032a2:	e008      	b.n	80032b6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032a4:	f7fe fb7e 	bl	80019a4 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	2b64      	cmp	r3, #100	; 0x64
 80032b0:	d901      	bls.n	80032b6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e21f      	b.n	80036f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032b6:	4b61      	ldr	r3, [pc, #388]	; (800343c <HAL_RCC_OscConfig+0x274>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d0f0      	beq.n	80032a4 <HAL_RCC_OscConfig+0xdc>
 80032c2:	e014      	b.n	80032ee <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c4:	f7fe fb6e 	bl	80019a4 <HAL_GetTick>
 80032c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032ca:	e008      	b.n	80032de <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032cc:	f7fe fb6a 	bl	80019a4 <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	2b64      	cmp	r3, #100	; 0x64
 80032d8:	d901      	bls.n	80032de <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e20b      	b.n	80036f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032de:	4b57      	ldr	r3, [pc, #348]	; (800343c <HAL_RCC_OscConfig+0x274>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d1f0      	bne.n	80032cc <HAL_RCC_OscConfig+0x104>
 80032ea:	e000      	b.n	80032ee <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0302 	and.w	r3, r3, #2
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d06f      	beq.n	80033da <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80032fa:	4b50      	ldr	r3, [pc, #320]	; (800343c <HAL_RCC_OscConfig+0x274>)
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	f003 030c 	and.w	r3, r3, #12
 8003302:	2b00      	cmp	r3, #0
 8003304:	d017      	beq.n	8003336 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003306:	4b4d      	ldr	r3, [pc, #308]	; (800343c <HAL_RCC_OscConfig+0x274>)
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800330e:	2b08      	cmp	r3, #8
 8003310:	d105      	bne.n	800331e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003312:	4b4a      	ldr	r3, [pc, #296]	; (800343c <HAL_RCC_OscConfig+0x274>)
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800331a:	2b00      	cmp	r3, #0
 800331c:	d00b      	beq.n	8003336 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800331e:	4b47      	ldr	r3, [pc, #284]	; (800343c <HAL_RCC_OscConfig+0x274>)
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003326:	2b0c      	cmp	r3, #12
 8003328:	d11c      	bne.n	8003364 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800332a:	4b44      	ldr	r3, [pc, #272]	; (800343c <HAL_RCC_OscConfig+0x274>)
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d116      	bne.n	8003364 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003336:	4b41      	ldr	r3, [pc, #260]	; (800343c <HAL_RCC_OscConfig+0x274>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0302 	and.w	r3, r3, #2
 800333e:	2b00      	cmp	r3, #0
 8003340:	d005      	beq.n	800334e <HAL_RCC_OscConfig+0x186>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	68db      	ldr	r3, [r3, #12]
 8003346:	2b01      	cmp	r3, #1
 8003348:	d001      	beq.n	800334e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e1d3      	b.n	80036f6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800334e:	4b3b      	ldr	r3, [pc, #236]	; (800343c <HAL_RCC_OscConfig+0x274>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	691b      	ldr	r3, [r3, #16]
 800335a:	00db      	lsls	r3, r3, #3
 800335c:	4937      	ldr	r1, [pc, #220]	; (800343c <HAL_RCC_OscConfig+0x274>)
 800335e:	4313      	orrs	r3, r2
 8003360:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003362:	e03a      	b.n	80033da <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d020      	beq.n	80033ae <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800336c:	4b34      	ldr	r3, [pc, #208]	; (8003440 <HAL_RCC_OscConfig+0x278>)
 800336e:	2201      	movs	r2, #1
 8003370:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003372:	f7fe fb17 	bl	80019a4 <HAL_GetTick>
 8003376:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003378:	e008      	b.n	800338c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800337a:	f7fe fb13 	bl	80019a4 <HAL_GetTick>
 800337e:	4602      	mov	r2, r0
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	2b02      	cmp	r3, #2
 8003386:	d901      	bls.n	800338c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003388:	2303      	movs	r3, #3
 800338a:	e1b4      	b.n	80036f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800338c:	4b2b      	ldr	r3, [pc, #172]	; (800343c <HAL_RCC_OscConfig+0x274>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0302 	and.w	r3, r3, #2
 8003394:	2b00      	cmp	r3, #0
 8003396:	d0f0      	beq.n	800337a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003398:	4b28      	ldr	r3, [pc, #160]	; (800343c <HAL_RCC_OscConfig+0x274>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	691b      	ldr	r3, [r3, #16]
 80033a4:	00db      	lsls	r3, r3, #3
 80033a6:	4925      	ldr	r1, [pc, #148]	; (800343c <HAL_RCC_OscConfig+0x274>)
 80033a8:	4313      	orrs	r3, r2
 80033aa:	600b      	str	r3, [r1, #0]
 80033ac:	e015      	b.n	80033da <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033ae:	4b24      	ldr	r3, [pc, #144]	; (8003440 <HAL_RCC_OscConfig+0x278>)
 80033b0:	2200      	movs	r2, #0
 80033b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033b4:	f7fe faf6 	bl	80019a4 <HAL_GetTick>
 80033b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033ba:	e008      	b.n	80033ce <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033bc:	f7fe faf2 	bl	80019a4 <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d901      	bls.n	80033ce <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e193      	b.n	80036f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033ce:	4b1b      	ldr	r3, [pc, #108]	; (800343c <HAL_RCC_OscConfig+0x274>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0302 	and.w	r3, r3, #2
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d1f0      	bne.n	80033bc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0308 	and.w	r3, r3, #8
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d036      	beq.n	8003454 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	695b      	ldr	r3, [r3, #20]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d016      	beq.n	800341c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033ee:	4b15      	ldr	r3, [pc, #84]	; (8003444 <HAL_RCC_OscConfig+0x27c>)
 80033f0:	2201      	movs	r2, #1
 80033f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033f4:	f7fe fad6 	bl	80019a4 <HAL_GetTick>
 80033f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033fa:	e008      	b.n	800340e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033fc:	f7fe fad2 	bl	80019a4 <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	2b02      	cmp	r3, #2
 8003408:	d901      	bls.n	800340e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e173      	b.n	80036f6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800340e:	4b0b      	ldr	r3, [pc, #44]	; (800343c <HAL_RCC_OscConfig+0x274>)
 8003410:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003412:	f003 0302 	and.w	r3, r3, #2
 8003416:	2b00      	cmp	r3, #0
 8003418:	d0f0      	beq.n	80033fc <HAL_RCC_OscConfig+0x234>
 800341a:	e01b      	b.n	8003454 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800341c:	4b09      	ldr	r3, [pc, #36]	; (8003444 <HAL_RCC_OscConfig+0x27c>)
 800341e:	2200      	movs	r2, #0
 8003420:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003422:	f7fe fabf 	bl	80019a4 <HAL_GetTick>
 8003426:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003428:	e00e      	b.n	8003448 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800342a:	f7fe fabb 	bl	80019a4 <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	2b02      	cmp	r3, #2
 8003436:	d907      	bls.n	8003448 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003438:	2303      	movs	r3, #3
 800343a:	e15c      	b.n	80036f6 <HAL_RCC_OscConfig+0x52e>
 800343c:	40023800 	.word	0x40023800
 8003440:	42470000 	.word	0x42470000
 8003444:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003448:	4b8a      	ldr	r3, [pc, #552]	; (8003674 <HAL_RCC_OscConfig+0x4ac>)
 800344a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800344c:	f003 0302 	and.w	r3, r3, #2
 8003450:	2b00      	cmp	r3, #0
 8003452:	d1ea      	bne.n	800342a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0304 	and.w	r3, r3, #4
 800345c:	2b00      	cmp	r3, #0
 800345e:	f000 8097 	beq.w	8003590 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003462:	2300      	movs	r3, #0
 8003464:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003466:	4b83      	ldr	r3, [pc, #524]	; (8003674 <HAL_RCC_OscConfig+0x4ac>)
 8003468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d10f      	bne.n	8003492 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003472:	2300      	movs	r3, #0
 8003474:	60bb      	str	r3, [r7, #8]
 8003476:	4b7f      	ldr	r3, [pc, #508]	; (8003674 <HAL_RCC_OscConfig+0x4ac>)
 8003478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347a:	4a7e      	ldr	r2, [pc, #504]	; (8003674 <HAL_RCC_OscConfig+0x4ac>)
 800347c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003480:	6413      	str	r3, [r2, #64]	; 0x40
 8003482:	4b7c      	ldr	r3, [pc, #496]	; (8003674 <HAL_RCC_OscConfig+0x4ac>)
 8003484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800348a:	60bb      	str	r3, [r7, #8]
 800348c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800348e:	2301      	movs	r3, #1
 8003490:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003492:	4b79      	ldr	r3, [pc, #484]	; (8003678 <HAL_RCC_OscConfig+0x4b0>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800349a:	2b00      	cmp	r3, #0
 800349c:	d118      	bne.n	80034d0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800349e:	4b76      	ldr	r3, [pc, #472]	; (8003678 <HAL_RCC_OscConfig+0x4b0>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a75      	ldr	r2, [pc, #468]	; (8003678 <HAL_RCC_OscConfig+0x4b0>)
 80034a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034aa:	f7fe fa7b 	bl	80019a4 <HAL_GetTick>
 80034ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034b0:	e008      	b.n	80034c4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034b2:	f7fe fa77 	bl	80019a4 <HAL_GetTick>
 80034b6:	4602      	mov	r2, r0
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	2b02      	cmp	r3, #2
 80034be:	d901      	bls.n	80034c4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80034c0:	2303      	movs	r3, #3
 80034c2:	e118      	b.n	80036f6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034c4:	4b6c      	ldr	r3, [pc, #432]	; (8003678 <HAL_RCC_OscConfig+0x4b0>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d0f0      	beq.n	80034b2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d106      	bne.n	80034e6 <HAL_RCC_OscConfig+0x31e>
 80034d8:	4b66      	ldr	r3, [pc, #408]	; (8003674 <HAL_RCC_OscConfig+0x4ac>)
 80034da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034dc:	4a65      	ldr	r2, [pc, #404]	; (8003674 <HAL_RCC_OscConfig+0x4ac>)
 80034de:	f043 0301 	orr.w	r3, r3, #1
 80034e2:	6713      	str	r3, [r2, #112]	; 0x70
 80034e4:	e01c      	b.n	8003520 <HAL_RCC_OscConfig+0x358>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	2b05      	cmp	r3, #5
 80034ec:	d10c      	bne.n	8003508 <HAL_RCC_OscConfig+0x340>
 80034ee:	4b61      	ldr	r3, [pc, #388]	; (8003674 <HAL_RCC_OscConfig+0x4ac>)
 80034f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034f2:	4a60      	ldr	r2, [pc, #384]	; (8003674 <HAL_RCC_OscConfig+0x4ac>)
 80034f4:	f043 0304 	orr.w	r3, r3, #4
 80034f8:	6713      	str	r3, [r2, #112]	; 0x70
 80034fa:	4b5e      	ldr	r3, [pc, #376]	; (8003674 <HAL_RCC_OscConfig+0x4ac>)
 80034fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034fe:	4a5d      	ldr	r2, [pc, #372]	; (8003674 <HAL_RCC_OscConfig+0x4ac>)
 8003500:	f043 0301 	orr.w	r3, r3, #1
 8003504:	6713      	str	r3, [r2, #112]	; 0x70
 8003506:	e00b      	b.n	8003520 <HAL_RCC_OscConfig+0x358>
 8003508:	4b5a      	ldr	r3, [pc, #360]	; (8003674 <HAL_RCC_OscConfig+0x4ac>)
 800350a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800350c:	4a59      	ldr	r2, [pc, #356]	; (8003674 <HAL_RCC_OscConfig+0x4ac>)
 800350e:	f023 0301 	bic.w	r3, r3, #1
 8003512:	6713      	str	r3, [r2, #112]	; 0x70
 8003514:	4b57      	ldr	r3, [pc, #348]	; (8003674 <HAL_RCC_OscConfig+0x4ac>)
 8003516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003518:	4a56      	ldr	r2, [pc, #344]	; (8003674 <HAL_RCC_OscConfig+0x4ac>)
 800351a:	f023 0304 	bic.w	r3, r3, #4
 800351e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d015      	beq.n	8003554 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003528:	f7fe fa3c 	bl	80019a4 <HAL_GetTick>
 800352c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800352e:	e00a      	b.n	8003546 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003530:	f7fe fa38 	bl	80019a4 <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	f241 3288 	movw	r2, #5000	; 0x1388
 800353e:	4293      	cmp	r3, r2
 8003540:	d901      	bls.n	8003546 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e0d7      	b.n	80036f6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003546:	4b4b      	ldr	r3, [pc, #300]	; (8003674 <HAL_RCC_OscConfig+0x4ac>)
 8003548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800354a:	f003 0302 	and.w	r3, r3, #2
 800354e:	2b00      	cmp	r3, #0
 8003550:	d0ee      	beq.n	8003530 <HAL_RCC_OscConfig+0x368>
 8003552:	e014      	b.n	800357e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003554:	f7fe fa26 	bl	80019a4 <HAL_GetTick>
 8003558:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800355a:	e00a      	b.n	8003572 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800355c:	f7fe fa22 	bl	80019a4 <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	f241 3288 	movw	r2, #5000	; 0x1388
 800356a:	4293      	cmp	r3, r2
 800356c:	d901      	bls.n	8003572 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e0c1      	b.n	80036f6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003572:	4b40      	ldr	r3, [pc, #256]	; (8003674 <HAL_RCC_OscConfig+0x4ac>)
 8003574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003576:	f003 0302 	and.w	r3, r3, #2
 800357a:	2b00      	cmp	r3, #0
 800357c:	d1ee      	bne.n	800355c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800357e:	7dfb      	ldrb	r3, [r7, #23]
 8003580:	2b01      	cmp	r3, #1
 8003582:	d105      	bne.n	8003590 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003584:	4b3b      	ldr	r3, [pc, #236]	; (8003674 <HAL_RCC_OscConfig+0x4ac>)
 8003586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003588:	4a3a      	ldr	r2, [pc, #232]	; (8003674 <HAL_RCC_OscConfig+0x4ac>)
 800358a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800358e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	699b      	ldr	r3, [r3, #24]
 8003594:	2b00      	cmp	r3, #0
 8003596:	f000 80ad 	beq.w	80036f4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800359a:	4b36      	ldr	r3, [pc, #216]	; (8003674 <HAL_RCC_OscConfig+0x4ac>)
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	f003 030c 	and.w	r3, r3, #12
 80035a2:	2b08      	cmp	r3, #8
 80035a4:	d060      	beq.n	8003668 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	699b      	ldr	r3, [r3, #24]
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d145      	bne.n	800363a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035ae:	4b33      	ldr	r3, [pc, #204]	; (800367c <HAL_RCC_OscConfig+0x4b4>)
 80035b0:	2200      	movs	r2, #0
 80035b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035b4:	f7fe f9f6 	bl	80019a4 <HAL_GetTick>
 80035b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035ba:	e008      	b.n	80035ce <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035bc:	f7fe f9f2 	bl	80019a4 <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	2b02      	cmp	r3, #2
 80035c8:	d901      	bls.n	80035ce <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e093      	b.n	80036f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035ce:	4b29      	ldr	r3, [pc, #164]	; (8003674 <HAL_RCC_OscConfig+0x4ac>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d1f0      	bne.n	80035bc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	69da      	ldr	r2, [r3, #28]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6a1b      	ldr	r3, [r3, #32]
 80035e2:	431a      	orrs	r2, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e8:	019b      	lsls	r3, r3, #6
 80035ea:	431a      	orrs	r2, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035f0:	085b      	lsrs	r3, r3, #1
 80035f2:	3b01      	subs	r3, #1
 80035f4:	041b      	lsls	r3, r3, #16
 80035f6:	431a      	orrs	r2, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035fc:	061b      	lsls	r3, r3, #24
 80035fe:	431a      	orrs	r2, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003604:	071b      	lsls	r3, r3, #28
 8003606:	491b      	ldr	r1, [pc, #108]	; (8003674 <HAL_RCC_OscConfig+0x4ac>)
 8003608:	4313      	orrs	r3, r2
 800360a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800360c:	4b1b      	ldr	r3, [pc, #108]	; (800367c <HAL_RCC_OscConfig+0x4b4>)
 800360e:	2201      	movs	r2, #1
 8003610:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003612:	f7fe f9c7 	bl	80019a4 <HAL_GetTick>
 8003616:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003618:	e008      	b.n	800362c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800361a:	f7fe f9c3 	bl	80019a4 <HAL_GetTick>
 800361e:	4602      	mov	r2, r0
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	2b02      	cmp	r3, #2
 8003626:	d901      	bls.n	800362c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003628:	2303      	movs	r3, #3
 800362a:	e064      	b.n	80036f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800362c:	4b11      	ldr	r3, [pc, #68]	; (8003674 <HAL_RCC_OscConfig+0x4ac>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003634:	2b00      	cmp	r3, #0
 8003636:	d0f0      	beq.n	800361a <HAL_RCC_OscConfig+0x452>
 8003638:	e05c      	b.n	80036f4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800363a:	4b10      	ldr	r3, [pc, #64]	; (800367c <HAL_RCC_OscConfig+0x4b4>)
 800363c:	2200      	movs	r2, #0
 800363e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003640:	f7fe f9b0 	bl	80019a4 <HAL_GetTick>
 8003644:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003646:	e008      	b.n	800365a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003648:	f7fe f9ac 	bl	80019a4 <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	2b02      	cmp	r3, #2
 8003654:	d901      	bls.n	800365a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e04d      	b.n	80036f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800365a:	4b06      	ldr	r3, [pc, #24]	; (8003674 <HAL_RCC_OscConfig+0x4ac>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d1f0      	bne.n	8003648 <HAL_RCC_OscConfig+0x480>
 8003666:	e045      	b.n	80036f4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	699b      	ldr	r3, [r3, #24]
 800366c:	2b01      	cmp	r3, #1
 800366e:	d107      	bne.n	8003680 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e040      	b.n	80036f6 <HAL_RCC_OscConfig+0x52e>
 8003674:	40023800 	.word	0x40023800
 8003678:	40007000 	.word	0x40007000
 800367c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003680:	4b1f      	ldr	r3, [pc, #124]	; (8003700 <HAL_RCC_OscConfig+0x538>)
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	699b      	ldr	r3, [r3, #24]
 800368a:	2b01      	cmp	r3, #1
 800368c:	d030      	beq.n	80036f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003698:	429a      	cmp	r2, r3
 800369a:	d129      	bne.n	80036f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d122      	bne.n	80036f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036aa:	68fa      	ldr	r2, [r7, #12]
 80036ac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80036b0:	4013      	ands	r3, r2
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80036b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d119      	bne.n	80036f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c6:	085b      	lsrs	r3, r3, #1
 80036c8:	3b01      	subs	r3, #1
 80036ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d10f      	bne.n	80036f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036dc:	429a      	cmp	r2, r3
 80036de:	d107      	bne.n	80036f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ea:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d001      	beq.n	80036f4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e000      	b.n	80036f6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3718      	adds	r7, #24
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	40023800 	.word	0x40023800

08003704 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b082      	sub	sp, #8
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d101      	bne.n	8003716 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e041      	b.n	800379a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800371c:	b2db      	uxtb	r3, r3
 800371e:	2b00      	cmp	r3, #0
 8003720:	d106      	bne.n	8003730 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f7fd fecc 	bl	80014c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2202      	movs	r2, #2
 8003734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	3304      	adds	r3, #4
 8003740:	4619      	mov	r1, r3
 8003742:	4610      	mov	r0, r2
 8003744:	f000 fad8 	bl	8003cf8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2201      	movs	r2, #1
 8003764:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2201      	movs	r2, #1
 8003774:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2201      	movs	r2, #1
 800377c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2201      	movs	r2, #1
 8003784:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2201      	movs	r2, #1
 8003794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003798:	2300      	movs	r3, #0
}
 800379a:	4618      	mov	r0, r3
 800379c:	3708      	adds	r7, #8
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}

080037a2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80037a2:	b580      	push	{r7, lr}
 80037a4:	b082      	sub	sp, #8
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d101      	bne.n	80037b4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e041      	b.n	8003838 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d106      	bne.n	80037ce <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2200      	movs	r2, #0
 80037c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f000 f839 	bl	8003840 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2202      	movs	r2, #2
 80037d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	3304      	adds	r3, #4
 80037de:	4619      	mov	r1, r3
 80037e0:	4610      	mov	r0, r2
 80037e2:	f000 fa89 	bl	8003cf8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2201      	movs	r2, #1
 80037ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2201      	movs	r2, #1
 80037f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2201      	movs	r2, #1
 80037fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2201      	movs	r2, #1
 8003802:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2201      	movs	r2, #1
 800380a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2201      	movs	r2, #1
 8003812:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2201      	movs	r2, #1
 800381a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2201      	movs	r2, #1
 8003822:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2201      	movs	r2, #1
 800382a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2201      	movs	r2, #1
 8003832:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003836:	2300      	movs	r3, #0
}
 8003838:	4618      	mov	r0, r3
 800383a:	3708      	adds	r7, #8
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}

08003840 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003840:	b480      	push	{r7}
 8003842:	b083      	sub	sp, #12
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003848:	bf00      	nop
 800384a:	370c      	adds	r7, #12
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr

08003854 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d109      	bne.n	8003878 <HAL_TIM_PWM_Start+0x24>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800386a:	b2db      	uxtb	r3, r3
 800386c:	2b01      	cmp	r3, #1
 800386e:	bf14      	ite	ne
 8003870:	2301      	movne	r3, #1
 8003872:	2300      	moveq	r3, #0
 8003874:	b2db      	uxtb	r3, r3
 8003876:	e022      	b.n	80038be <HAL_TIM_PWM_Start+0x6a>
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	2b04      	cmp	r3, #4
 800387c:	d109      	bne.n	8003892 <HAL_TIM_PWM_Start+0x3e>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003884:	b2db      	uxtb	r3, r3
 8003886:	2b01      	cmp	r3, #1
 8003888:	bf14      	ite	ne
 800388a:	2301      	movne	r3, #1
 800388c:	2300      	moveq	r3, #0
 800388e:	b2db      	uxtb	r3, r3
 8003890:	e015      	b.n	80038be <HAL_TIM_PWM_Start+0x6a>
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	2b08      	cmp	r3, #8
 8003896:	d109      	bne.n	80038ac <HAL_TIM_PWM_Start+0x58>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	bf14      	ite	ne
 80038a4:	2301      	movne	r3, #1
 80038a6:	2300      	moveq	r3, #0
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	e008      	b.n	80038be <HAL_TIM_PWM_Start+0x6a>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	bf14      	ite	ne
 80038b8:	2301      	movne	r3, #1
 80038ba:	2300      	moveq	r3, #0
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d001      	beq.n	80038c6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e07c      	b.n	80039c0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d104      	bne.n	80038d6 <HAL_TIM_PWM_Start+0x82>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2202      	movs	r2, #2
 80038d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038d4:	e013      	b.n	80038fe <HAL_TIM_PWM_Start+0xaa>
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	2b04      	cmp	r3, #4
 80038da:	d104      	bne.n	80038e6 <HAL_TIM_PWM_Start+0x92>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2202      	movs	r2, #2
 80038e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038e4:	e00b      	b.n	80038fe <HAL_TIM_PWM_Start+0xaa>
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	2b08      	cmp	r3, #8
 80038ea:	d104      	bne.n	80038f6 <HAL_TIM_PWM_Start+0xa2>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2202      	movs	r2, #2
 80038f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038f4:	e003      	b.n	80038fe <HAL_TIM_PWM_Start+0xaa>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2202      	movs	r2, #2
 80038fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	2201      	movs	r2, #1
 8003904:	6839      	ldr	r1, [r7, #0]
 8003906:	4618      	mov	r0, r3
 8003908:	f000 fce0 	bl	80042cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a2d      	ldr	r2, [pc, #180]	; (80039c8 <HAL_TIM_PWM_Start+0x174>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d004      	beq.n	8003920 <HAL_TIM_PWM_Start+0xcc>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a2c      	ldr	r2, [pc, #176]	; (80039cc <HAL_TIM_PWM_Start+0x178>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d101      	bne.n	8003924 <HAL_TIM_PWM_Start+0xd0>
 8003920:	2301      	movs	r3, #1
 8003922:	e000      	b.n	8003926 <HAL_TIM_PWM_Start+0xd2>
 8003924:	2300      	movs	r3, #0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d007      	beq.n	800393a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003938:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a22      	ldr	r2, [pc, #136]	; (80039c8 <HAL_TIM_PWM_Start+0x174>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d022      	beq.n	800398a <HAL_TIM_PWM_Start+0x136>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800394c:	d01d      	beq.n	800398a <HAL_TIM_PWM_Start+0x136>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a1f      	ldr	r2, [pc, #124]	; (80039d0 <HAL_TIM_PWM_Start+0x17c>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d018      	beq.n	800398a <HAL_TIM_PWM_Start+0x136>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a1d      	ldr	r2, [pc, #116]	; (80039d4 <HAL_TIM_PWM_Start+0x180>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d013      	beq.n	800398a <HAL_TIM_PWM_Start+0x136>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a1c      	ldr	r2, [pc, #112]	; (80039d8 <HAL_TIM_PWM_Start+0x184>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d00e      	beq.n	800398a <HAL_TIM_PWM_Start+0x136>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a16      	ldr	r2, [pc, #88]	; (80039cc <HAL_TIM_PWM_Start+0x178>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d009      	beq.n	800398a <HAL_TIM_PWM_Start+0x136>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a18      	ldr	r2, [pc, #96]	; (80039dc <HAL_TIM_PWM_Start+0x188>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d004      	beq.n	800398a <HAL_TIM_PWM_Start+0x136>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a16      	ldr	r2, [pc, #88]	; (80039e0 <HAL_TIM_PWM_Start+0x18c>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d111      	bne.n	80039ae <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	f003 0307 	and.w	r3, r3, #7
 8003994:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2b06      	cmp	r3, #6
 800399a:	d010      	beq.n	80039be <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f042 0201 	orr.w	r2, r2, #1
 80039aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039ac:	e007      	b.n	80039be <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f042 0201 	orr.w	r2, r2, #1
 80039bc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80039be:	2300      	movs	r3, #0
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3710      	adds	r7, #16
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	40010000 	.word	0x40010000
 80039cc:	40010400 	.word	0x40010400
 80039d0:	40000400 	.word	0x40000400
 80039d4:	40000800 	.word	0x40000800
 80039d8:	40000c00 	.word	0x40000c00
 80039dc:	40014000 	.word	0x40014000
 80039e0:	40001800 	.word	0x40001800

080039e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b086      	sub	sp, #24
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	60f8      	str	r0, [r7, #12]
 80039ec:	60b9      	str	r1, [r7, #8]
 80039ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039f0:	2300      	movs	r3, #0
 80039f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d101      	bne.n	8003a02 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80039fe:	2302      	movs	r3, #2
 8003a00:	e0ae      	b.n	8003b60 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2201      	movs	r2, #1
 8003a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2b0c      	cmp	r3, #12
 8003a0e:	f200 809f 	bhi.w	8003b50 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003a12:	a201      	add	r2, pc, #4	; (adr r2, 8003a18 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a18:	08003a4d 	.word	0x08003a4d
 8003a1c:	08003b51 	.word	0x08003b51
 8003a20:	08003b51 	.word	0x08003b51
 8003a24:	08003b51 	.word	0x08003b51
 8003a28:	08003a8d 	.word	0x08003a8d
 8003a2c:	08003b51 	.word	0x08003b51
 8003a30:	08003b51 	.word	0x08003b51
 8003a34:	08003b51 	.word	0x08003b51
 8003a38:	08003acf 	.word	0x08003acf
 8003a3c:	08003b51 	.word	0x08003b51
 8003a40:	08003b51 	.word	0x08003b51
 8003a44:	08003b51 	.word	0x08003b51
 8003a48:	08003b0f 	.word	0x08003b0f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	68b9      	ldr	r1, [r7, #8]
 8003a52:	4618      	mov	r0, r3
 8003a54:	f000 f9f0 	bl	8003e38 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	699a      	ldr	r2, [r3, #24]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f042 0208 	orr.w	r2, r2, #8
 8003a66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	699a      	ldr	r2, [r3, #24]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f022 0204 	bic.w	r2, r2, #4
 8003a76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	6999      	ldr	r1, [r3, #24]
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	691a      	ldr	r2, [r3, #16]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	430a      	orrs	r2, r1
 8003a88:	619a      	str	r2, [r3, #24]
      break;
 8003a8a:	e064      	b.n	8003b56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	68b9      	ldr	r1, [r7, #8]
 8003a92:	4618      	mov	r0, r3
 8003a94:	f000 fa40 	bl	8003f18 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	699a      	ldr	r2, [r3, #24]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003aa6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	699a      	ldr	r2, [r3, #24]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ab6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	6999      	ldr	r1, [r3, #24]
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	691b      	ldr	r3, [r3, #16]
 8003ac2:	021a      	lsls	r2, r3, #8
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	430a      	orrs	r2, r1
 8003aca:	619a      	str	r2, [r3, #24]
      break;
 8003acc:	e043      	b.n	8003b56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	68b9      	ldr	r1, [r7, #8]
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f000 fa95 	bl	8004004 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	69da      	ldr	r2, [r3, #28]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f042 0208 	orr.w	r2, r2, #8
 8003ae8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	69da      	ldr	r2, [r3, #28]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f022 0204 	bic.w	r2, r2, #4
 8003af8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	69d9      	ldr	r1, [r3, #28]
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	691a      	ldr	r2, [r3, #16]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	430a      	orrs	r2, r1
 8003b0a:	61da      	str	r2, [r3, #28]
      break;
 8003b0c:	e023      	b.n	8003b56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	68b9      	ldr	r1, [r7, #8]
 8003b14:	4618      	mov	r0, r3
 8003b16:	f000 fae9 	bl	80040ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	69da      	ldr	r2, [r3, #28]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	69da      	ldr	r2, [r3, #28]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	69d9      	ldr	r1, [r3, #28]
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	691b      	ldr	r3, [r3, #16]
 8003b44:	021a      	lsls	r2, r3, #8
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	430a      	orrs	r2, r1
 8003b4c:	61da      	str	r2, [r3, #28]
      break;
 8003b4e:	e002      	b.n	8003b56 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	75fb      	strb	r3, [r7, #23]
      break;
 8003b54:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003b5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	3718      	adds	r7, #24
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}

08003b68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b084      	sub	sp, #16
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
 8003b70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b72:	2300      	movs	r3, #0
 8003b74:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d101      	bne.n	8003b84 <HAL_TIM_ConfigClockSource+0x1c>
 8003b80:	2302      	movs	r3, #2
 8003b82:	e0b4      	b.n	8003cee <HAL_TIM_ConfigClockSource+0x186>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2202      	movs	r2, #2
 8003b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003ba2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003baa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	68ba      	ldr	r2, [r7, #8]
 8003bb2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bbc:	d03e      	beq.n	8003c3c <HAL_TIM_ConfigClockSource+0xd4>
 8003bbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bc2:	f200 8087 	bhi.w	8003cd4 <HAL_TIM_ConfigClockSource+0x16c>
 8003bc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bca:	f000 8086 	beq.w	8003cda <HAL_TIM_ConfigClockSource+0x172>
 8003bce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bd2:	d87f      	bhi.n	8003cd4 <HAL_TIM_ConfigClockSource+0x16c>
 8003bd4:	2b70      	cmp	r3, #112	; 0x70
 8003bd6:	d01a      	beq.n	8003c0e <HAL_TIM_ConfigClockSource+0xa6>
 8003bd8:	2b70      	cmp	r3, #112	; 0x70
 8003bda:	d87b      	bhi.n	8003cd4 <HAL_TIM_ConfigClockSource+0x16c>
 8003bdc:	2b60      	cmp	r3, #96	; 0x60
 8003bde:	d050      	beq.n	8003c82 <HAL_TIM_ConfigClockSource+0x11a>
 8003be0:	2b60      	cmp	r3, #96	; 0x60
 8003be2:	d877      	bhi.n	8003cd4 <HAL_TIM_ConfigClockSource+0x16c>
 8003be4:	2b50      	cmp	r3, #80	; 0x50
 8003be6:	d03c      	beq.n	8003c62 <HAL_TIM_ConfigClockSource+0xfa>
 8003be8:	2b50      	cmp	r3, #80	; 0x50
 8003bea:	d873      	bhi.n	8003cd4 <HAL_TIM_ConfigClockSource+0x16c>
 8003bec:	2b40      	cmp	r3, #64	; 0x40
 8003bee:	d058      	beq.n	8003ca2 <HAL_TIM_ConfigClockSource+0x13a>
 8003bf0:	2b40      	cmp	r3, #64	; 0x40
 8003bf2:	d86f      	bhi.n	8003cd4 <HAL_TIM_ConfigClockSource+0x16c>
 8003bf4:	2b30      	cmp	r3, #48	; 0x30
 8003bf6:	d064      	beq.n	8003cc2 <HAL_TIM_ConfigClockSource+0x15a>
 8003bf8:	2b30      	cmp	r3, #48	; 0x30
 8003bfa:	d86b      	bhi.n	8003cd4 <HAL_TIM_ConfigClockSource+0x16c>
 8003bfc:	2b20      	cmp	r3, #32
 8003bfe:	d060      	beq.n	8003cc2 <HAL_TIM_ConfigClockSource+0x15a>
 8003c00:	2b20      	cmp	r3, #32
 8003c02:	d867      	bhi.n	8003cd4 <HAL_TIM_ConfigClockSource+0x16c>
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d05c      	beq.n	8003cc2 <HAL_TIM_ConfigClockSource+0x15a>
 8003c08:	2b10      	cmp	r3, #16
 8003c0a:	d05a      	beq.n	8003cc2 <HAL_TIM_ConfigClockSource+0x15a>
 8003c0c:	e062      	b.n	8003cd4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6818      	ldr	r0, [r3, #0]
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	6899      	ldr	r1, [r3, #8]
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	685a      	ldr	r2, [r3, #4]
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	f000 fb35 	bl	800428c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003c30:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	68ba      	ldr	r2, [r7, #8]
 8003c38:	609a      	str	r2, [r3, #8]
      break;
 8003c3a:	e04f      	b.n	8003cdc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6818      	ldr	r0, [r3, #0]
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	6899      	ldr	r1, [r3, #8]
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	685a      	ldr	r2, [r3, #4]
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	f000 fb1e 	bl	800428c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	689a      	ldr	r2, [r3, #8]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c5e:	609a      	str	r2, [r3, #8]
      break;
 8003c60:	e03c      	b.n	8003cdc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6818      	ldr	r0, [r3, #0]
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	6859      	ldr	r1, [r3, #4]
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	461a      	mov	r2, r3
 8003c70:	f000 fa92 	bl	8004198 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	2150      	movs	r1, #80	; 0x50
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f000 faeb 	bl	8004256 <TIM_ITRx_SetConfig>
      break;
 8003c80:	e02c      	b.n	8003cdc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6818      	ldr	r0, [r3, #0]
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	6859      	ldr	r1, [r3, #4]
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	68db      	ldr	r3, [r3, #12]
 8003c8e:	461a      	mov	r2, r3
 8003c90:	f000 fab1 	bl	80041f6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2160      	movs	r1, #96	; 0x60
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f000 fadb 	bl	8004256 <TIM_ITRx_SetConfig>
      break;
 8003ca0:	e01c      	b.n	8003cdc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6818      	ldr	r0, [r3, #0]
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	6859      	ldr	r1, [r3, #4]
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	68db      	ldr	r3, [r3, #12]
 8003cae:	461a      	mov	r2, r3
 8003cb0:	f000 fa72 	bl	8004198 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	2140      	movs	r1, #64	; 0x40
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f000 facb 	bl	8004256 <TIM_ITRx_SetConfig>
      break;
 8003cc0:	e00c      	b.n	8003cdc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4619      	mov	r1, r3
 8003ccc:	4610      	mov	r0, r2
 8003cce:	f000 fac2 	bl	8004256 <TIM_ITRx_SetConfig>
      break;
 8003cd2:	e003      	b.n	8003cdc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	73fb      	strb	r3, [r7, #15]
      break;
 8003cd8:	e000      	b.n	8003cdc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003cda:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3710      	adds	r7, #16
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
	...

08003cf8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b085      	sub	sp, #20
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	4a40      	ldr	r2, [pc, #256]	; (8003e0c <TIM_Base_SetConfig+0x114>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d013      	beq.n	8003d38 <TIM_Base_SetConfig+0x40>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d16:	d00f      	beq.n	8003d38 <TIM_Base_SetConfig+0x40>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	4a3d      	ldr	r2, [pc, #244]	; (8003e10 <TIM_Base_SetConfig+0x118>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d00b      	beq.n	8003d38 <TIM_Base_SetConfig+0x40>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	4a3c      	ldr	r2, [pc, #240]	; (8003e14 <TIM_Base_SetConfig+0x11c>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d007      	beq.n	8003d38 <TIM_Base_SetConfig+0x40>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	4a3b      	ldr	r2, [pc, #236]	; (8003e18 <TIM_Base_SetConfig+0x120>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d003      	beq.n	8003d38 <TIM_Base_SetConfig+0x40>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	4a3a      	ldr	r2, [pc, #232]	; (8003e1c <TIM_Base_SetConfig+0x124>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d108      	bne.n	8003d4a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	68fa      	ldr	r2, [r7, #12]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4a2f      	ldr	r2, [pc, #188]	; (8003e0c <TIM_Base_SetConfig+0x114>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d02b      	beq.n	8003daa <TIM_Base_SetConfig+0xb2>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d58:	d027      	beq.n	8003daa <TIM_Base_SetConfig+0xb2>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4a2c      	ldr	r2, [pc, #176]	; (8003e10 <TIM_Base_SetConfig+0x118>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d023      	beq.n	8003daa <TIM_Base_SetConfig+0xb2>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4a2b      	ldr	r2, [pc, #172]	; (8003e14 <TIM_Base_SetConfig+0x11c>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d01f      	beq.n	8003daa <TIM_Base_SetConfig+0xb2>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a2a      	ldr	r2, [pc, #168]	; (8003e18 <TIM_Base_SetConfig+0x120>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d01b      	beq.n	8003daa <TIM_Base_SetConfig+0xb2>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4a29      	ldr	r2, [pc, #164]	; (8003e1c <TIM_Base_SetConfig+0x124>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d017      	beq.n	8003daa <TIM_Base_SetConfig+0xb2>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4a28      	ldr	r2, [pc, #160]	; (8003e20 <TIM_Base_SetConfig+0x128>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d013      	beq.n	8003daa <TIM_Base_SetConfig+0xb2>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4a27      	ldr	r2, [pc, #156]	; (8003e24 <TIM_Base_SetConfig+0x12c>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d00f      	beq.n	8003daa <TIM_Base_SetConfig+0xb2>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a26      	ldr	r2, [pc, #152]	; (8003e28 <TIM_Base_SetConfig+0x130>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d00b      	beq.n	8003daa <TIM_Base_SetConfig+0xb2>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a25      	ldr	r2, [pc, #148]	; (8003e2c <TIM_Base_SetConfig+0x134>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d007      	beq.n	8003daa <TIM_Base_SetConfig+0xb2>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a24      	ldr	r2, [pc, #144]	; (8003e30 <TIM_Base_SetConfig+0x138>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d003      	beq.n	8003daa <TIM_Base_SetConfig+0xb2>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a23      	ldr	r2, [pc, #140]	; (8003e34 <TIM_Base_SetConfig+0x13c>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d108      	bne.n	8003dbc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003db0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	68fa      	ldr	r2, [r7, #12]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	695b      	ldr	r3, [r3, #20]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	68fa      	ldr	r2, [r7, #12]
 8003dce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	689a      	ldr	r2, [r3, #8]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	4a0a      	ldr	r2, [pc, #40]	; (8003e0c <TIM_Base_SetConfig+0x114>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d003      	beq.n	8003df0 <TIM_Base_SetConfig+0xf8>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	4a0c      	ldr	r2, [pc, #48]	; (8003e1c <TIM_Base_SetConfig+0x124>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d103      	bne.n	8003df8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	691a      	ldr	r2, [r3, #16]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	615a      	str	r2, [r3, #20]
}
 8003dfe:	bf00      	nop
 8003e00:	3714      	adds	r7, #20
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr
 8003e0a:	bf00      	nop
 8003e0c:	40010000 	.word	0x40010000
 8003e10:	40000400 	.word	0x40000400
 8003e14:	40000800 	.word	0x40000800
 8003e18:	40000c00 	.word	0x40000c00
 8003e1c:	40010400 	.word	0x40010400
 8003e20:	40014000 	.word	0x40014000
 8003e24:	40014400 	.word	0x40014400
 8003e28:	40014800 	.word	0x40014800
 8003e2c:	40001800 	.word	0x40001800
 8003e30:	40001c00 	.word	0x40001c00
 8003e34:	40002000 	.word	0x40002000

08003e38 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b087      	sub	sp, #28
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
 8003e40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6a1b      	ldr	r3, [r3, #32]
 8003e46:	f023 0201 	bic.w	r2, r3, #1
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6a1b      	ldr	r3, [r3, #32]
 8003e52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	699b      	ldr	r3, [r3, #24]
 8003e5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f023 0303 	bic.w	r3, r3, #3
 8003e6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	68fa      	ldr	r2, [r7, #12]
 8003e76:	4313      	orrs	r3, r2
 8003e78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	f023 0302 	bic.w	r3, r3, #2
 8003e80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	697a      	ldr	r2, [r7, #20]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	4a20      	ldr	r2, [pc, #128]	; (8003f10 <TIM_OC1_SetConfig+0xd8>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d003      	beq.n	8003e9c <TIM_OC1_SetConfig+0x64>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	4a1f      	ldr	r2, [pc, #124]	; (8003f14 <TIM_OC1_SetConfig+0xdc>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d10c      	bne.n	8003eb6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	f023 0308 	bic.w	r3, r3, #8
 8003ea2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	697a      	ldr	r2, [r7, #20]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	f023 0304 	bic.w	r3, r3, #4
 8003eb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4a15      	ldr	r2, [pc, #84]	; (8003f10 <TIM_OC1_SetConfig+0xd8>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d003      	beq.n	8003ec6 <TIM_OC1_SetConfig+0x8e>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a14      	ldr	r2, [pc, #80]	; (8003f14 <TIM_OC1_SetConfig+0xdc>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d111      	bne.n	8003eea <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ecc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ed4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	695b      	ldr	r3, [r3, #20]
 8003eda:	693a      	ldr	r2, [r7, #16]
 8003edc:	4313      	orrs	r3, r2
 8003ede:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	699b      	ldr	r3, [r3, #24]
 8003ee4:	693a      	ldr	r2, [r7, #16]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	693a      	ldr	r2, [r7, #16]
 8003eee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	68fa      	ldr	r2, [r7, #12]
 8003ef4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	685a      	ldr	r2, [r3, #4]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	697a      	ldr	r2, [r7, #20]
 8003f02:	621a      	str	r2, [r3, #32]
}
 8003f04:	bf00      	nop
 8003f06:	371c      	adds	r7, #28
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr
 8003f10:	40010000 	.word	0x40010000
 8003f14:	40010400 	.word	0x40010400

08003f18 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b087      	sub	sp, #28
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a1b      	ldr	r3, [r3, #32]
 8003f26:	f023 0210 	bic.w	r2, r3, #16
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6a1b      	ldr	r3, [r3, #32]
 8003f32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	699b      	ldr	r3, [r3, #24]
 8003f3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	021b      	lsls	r3, r3, #8
 8003f56:	68fa      	ldr	r2, [r7, #12]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	f023 0320 	bic.w	r3, r3, #32
 8003f62:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	011b      	lsls	r3, r3, #4
 8003f6a:	697a      	ldr	r2, [r7, #20]
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	4a22      	ldr	r2, [pc, #136]	; (8003ffc <TIM_OC2_SetConfig+0xe4>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d003      	beq.n	8003f80 <TIM_OC2_SetConfig+0x68>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	4a21      	ldr	r2, [pc, #132]	; (8004000 <TIM_OC2_SetConfig+0xe8>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d10d      	bne.n	8003f9c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	011b      	lsls	r3, r3, #4
 8003f8e:	697a      	ldr	r2, [r7, #20]
 8003f90:	4313      	orrs	r3, r2
 8003f92:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f9a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	4a17      	ldr	r2, [pc, #92]	; (8003ffc <TIM_OC2_SetConfig+0xe4>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d003      	beq.n	8003fac <TIM_OC2_SetConfig+0x94>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	4a16      	ldr	r2, [pc, #88]	; (8004000 <TIM_OC2_SetConfig+0xe8>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d113      	bne.n	8003fd4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003fb2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003fba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	695b      	ldr	r3, [r3, #20]
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	693a      	ldr	r2, [r7, #16]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	699b      	ldr	r3, [r3, #24]
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	693a      	ldr	r2, [r7, #16]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	693a      	ldr	r2, [r7, #16]
 8003fd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	68fa      	ldr	r2, [r7, #12]
 8003fde:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	685a      	ldr	r2, [r3, #4]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	697a      	ldr	r2, [r7, #20]
 8003fec:	621a      	str	r2, [r3, #32]
}
 8003fee:	bf00      	nop
 8003ff0:	371c      	adds	r7, #28
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr
 8003ffa:	bf00      	nop
 8003ffc:	40010000 	.word	0x40010000
 8004000:	40010400 	.word	0x40010400

08004004 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004004:	b480      	push	{r7}
 8004006:	b087      	sub	sp, #28
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a1b      	ldr	r3, [r3, #32]
 8004012:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6a1b      	ldr	r3, [r3, #32]
 800401e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	69db      	ldr	r3, [r3, #28]
 800402a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004032:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f023 0303 	bic.w	r3, r3, #3
 800403a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	68fa      	ldr	r2, [r7, #12]
 8004042:	4313      	orrs	r3, r2
 8004044:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800404c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	021b      	lsls	r3, r3, #8
 8004054:	697a      	ldr	r2, [r7, #20]
 8004056:	4313      	orrs	r3, r2
 8004058:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a21      	ldr	r2, [pc, #132]	; (80040e4 <TIM_OC3_SetConfig+0xe0>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d003      	beq.n	800406a <TIM_OC3_SetConfig+0x66>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a20      	ldr	r2, [pc, #128]	; (80040e8 <TIM_OC3_SetConfig+0xe4>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d10d      	bne.n	8004086 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004070:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	68db      	ldr	r3, [r3, #12]
 8004076:	021b      	lsls	r3, r3, #8
 8004078:	697a      	ldr	r2, [r7, #20]
 800407a:	4313      	orrs	r3, r2
 800407c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004084:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4a16      	ldr	r2, [pc, #88]	; (80040e4 <TIM_OC3_SetConfig+0xe0>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d003      	beq.n	8004096 <TIM_OC3_SetConfig+0x92>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4a15      	ldr	r2, [pc, #84]	; (80040e8 <TIM_OC3_SetConfig+0xe4>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d113      	bne.n	80040be <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800409c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80040a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	695b      	ldr	r3, [r3, #20]
 80040aa:	011b      	lsls	r3, r3, #4
 80040ac:	693a      	ldr	r2, [r7, #16]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	699b      	ldr	r3, [r3, #24]
 80040b6:	011b      	lsls	r3, r3, #4
 80040b8:	693a      	ldr	r2, [r7, #16]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	693a      	ldr	r2, [r7, #16]
 80040c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	68fa      	ldr	r2, [r7, #12]
 80040c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	685a      	ldr	r2, [r3, #4]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	697a      	ldr	r2, [r7, #20]
 80040d6:	621a      	str	r2, [r3, #32]
}
 80040d8:	bf00      	nop
 80040da:	371c      	adds	r7, #28
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr
 80040e4:	40010000 	.word	0x40010000
 80040e8:	40010400 	.word	0x40010400

080040ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b087      	sub	sp, #28
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
 80040f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a1b      	ldr	r3, [r3, #32]
 80040fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a1b      	ldr	r3, [r3, #32]
 8004106:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	69db      	ldr	r3, [r3, #28]
 8004112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800411a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004122:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	021b      	lsls	r3, r3, #8
 800412a:	68fa      	ldr	r2, [r7, #12]
 800412c:	4313      	orrs	r3, r2
 800412e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004136:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	031b      	lsls	r3, r3, #12
 800413e:	693a      	ldr	r2, [r7, #16]
 8004140:	4313      	orrs	r3, r2
 8004142:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	4a12      	ldr	r2, [pc, #72]	; (8004190 <TIM_OC4_SetConfig+0xa4>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d003      	beq.n	8004154 <TIM_OC4_SetConfig+0x68>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	4a11      	ldr	r2, [pc, #68]	; (8004194 <TIM_OC4_SetConfig+0xa8>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d109      	bne.n	8004168 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800415a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	695b      	ldr	r3, [r3, #20]
 8004160:	019b      	lsls	r3, r3, #6
 8004162:	697a      	ldr	r2, [r7, #20]
 8004164:	4313      	orrs	r3, r2
 8004166:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	697a      	ldr	r2, [r7, #20]
 800416c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	68fa      	ldr	r2, [r7, #12]
 8004172:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	685a      	ldr	r2, [r3, #4]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	693a      	ldr	r2, [r7, #16]
 8004180:	621a      	str	r2, [r3, #32]
}
 8004182:	bf00      	nop
 8004184:	371c      	adds	r7, #28
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr
 800418e:	bf00      	nop
 8004190:	40010000 	.word	0x40010000
 8004194:	40010400 	.word	0x40010400

08004198 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004198:	b480      	push	{r7}
 800419a:	b087      	sub	sp, #28
 800419c:	af00      	add	r7, sp, #0
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	60b9      	str	r1, [r7, #8]
 80041a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6a1b      	ldr	r3, [r3, #32]
 80041a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	6a1b      	ldr	r3, [r3, #32]
 80041ae:	f023 0201 	bic.w	r2, r3, #1
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	699b      	ldr	r3, [r3, #24]
 80041ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	011b      	lsls	r3, r3, #4
 80041c8:	693a      	ldr	r2, [r7, #16]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	f023 030a 	bic.w	r3, r3, #10
 80041d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80041d6:	697a      	ldr	r2, [r7, #20]
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	4313      	orrs	r3, r2
 80041dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	693a      	ldr	r2, [r7, #16]
 80041e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	697a      	ldr	r2, [r7, #20]
 80041e8:	621a      	str	r2, [r3, #32]
}
 80041ea:	bf00      	nop
 80041ec:	371c      	adds	r7, #28
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr

080041f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041f6:	b480      	push	{r7}
 80041f8:	b087      	sub	sp, #28
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	60f8      	str	r0, [r7, #12]
 80041fe:	60b9      	str	r1, [r7, #8]
 8004200:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6a1b      	ldr	r3, [r3, #32]
 8004206:	f023 0210 	bic.w	r2, r3, #16
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	699b      	ldr	r3, [r3, #24]
 8004212:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6a1b      	ldr	r3, [r3, #32]
 8004218:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004220:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	031b      	lsls	r3, r3, #12
 8004226:	697a      	ldr	r2, [r7, #20]
 8004228:	4313      	orrs	r3, r2
 800422a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004232:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	011b      	lsls	r3, r3, #4
 8004238:	693a      	ldr	r2, [r7, #16]
 800423a:	4313      	orrs	r3, r2
 800423c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	697a      	ldr	r2, [r7, #20]
 8004242:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	693a      	ldr	r2, [r7, #16]
 8004248:	621a      	str	r2, [r3, #32]
}
 800424a:	bf00      	nop
 800424c:	371c      	adds	r7, #28
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr

08004256 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004256:	b480      	push	{r7}
 8004258:	b085      	sub	sp, #20
 800425a:	af00      	add	r7, sp, #0
 800425c:	6078      	str	r0, [r7, #4]
 800425e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800426c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800426e:	683a      	ldr	r2, [r7, #0]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	4313      	orrs	r3, r2
 8004274:	f043 0307 	orr.w	r3, r3, #7
 8004278:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	68fa      	ldr	r2, [r7, #12]
 800427e:	609a      	str	r2, [r3, #8]
}
 8004280:	bf00      	nop
 8004282:	3714      	adds	r7, #20
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800428c:	b480      	push	{r7}
 800428e:	b087      	sub	sp, #28
 8004290:	af00      	add	r7, sp, #0
 8004292:	60f8      	str	r0, [r7, #12]
 8004294:	60b9      	str	r1, [r7, #8]
 8004296:	607a      	str	r2, [r7, #4]
 8004298:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	021a      	lsls	r2, r3, #8
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	431a      	orrs	r2, r3
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	697a      	ldr	r2, [r7, #20]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	697a      	ldr	r2, [r7, #20]
 80042be:	609a      	str	r2, [r3, #8]
}
 80042c0:	bf00      	nop
 80042c2:	371c      	adds	r7, #28
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr

080042cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b087      	sub	sp, #28
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	60f8      	str	r0, [r7, #12]
 80042d4:	60b9      	str	r1, [r7, #8]
 80042d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	f003 031f 	and.w	r3, r3, #31
 80042de:	2201      	movs	r2, #1
 80042e0:	fa02 f303 	lsl.w	r3, r2, r3
 80042e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	6a1a      	ldr	r2, [r3, #32]
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	43db      	mvns	r3, r3
 80042ee:	401a      	ands	r2, r3
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	6a1a      	ldr	r2, [r3, #32]
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	f003 031f 	and.w	r3, r3, #31
 80042fe:	6879      	ldr	r1, [r7, #4]
 8004300:	fa01 f303 	lsl.w	r3, r1, r3
 8004304:	431a      	orrs	r2, r3
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	621a      	str	r2, [r3, #32]
}
 800430a:	bf00      	nop
 800430c:	371c      	adds	r7, #28
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr
	...

08004318 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004318:	b480      	push	{r7}
 800431a:	b085      	sub	sp, #20
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004328:	2b01      	cmp	r3, #1
 800432a:	d101      	bne.n	8004330 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800432c:	2302      	movs	r3, #2
 800432e:	e05a      	b.n	80043e6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2202      	movs	r2, #2
 800433c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004356:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	68fa      	ldr	r2, [r7, #12]
 800435e:	4313      	orrs	r3, r2
 8004360:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	68fa      	ldr	r2, [r7, #12]
 8004368:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a21      	ldr	r2, [pc, #132]	; (80043f4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d022      	beq.n	80043ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800437c:	d01d      	beq.n	80043ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a1d      	ldr	r2, [pc, #116]	; (80043f8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d018      	beq.n	80043ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a1b      	ldr	r2, [pc, #108]	; (80043fc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d013      	beq.n	80043ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a1a      	ldr	r2, [pc, #104]	; (8004400 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d00e      	beq.n	80043ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a18      	ldr	r2, [pc, #96]	; (8004404 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d009      	beq.n	80043ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a17      	ldr	r2, [pc, #92]	; (8004408 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d004      	beq.n	80043ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a15      	ldr	r2, [pc, #84]	; (800440c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d10c      	bne.n	80043d4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	68ba      	ldr	r2, [r7, #8]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	68ba      	ldr	r2, [r7, #8]
 80043d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2201      	movs	r2, #1
 80043d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043e4:	2300      	movs	r3, #0
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3714      	adds	r7, #20
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr
 80043f2:	bf00      	nop
 80043f4:	40010000 	.word	0x40010000
 80043f8:	40000400 	.word	0x40000400
 80043fc:	40000800 	.word	0x40000800
 8004400:	40000c00 	.word	0x40000c00
 8004404:	40010400 	.word	0x40010400
 8004408:	40014000 	.word	0x40014000
 800440c:	40001800 	.word	0x40001800

08004410 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004410:	b480      	push	{r7}
 8004412:	b085      	sub	sp, #20
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800441a:	2300      	movs	r3, #0
 800441c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004424:	2b01      	cmp	r3, #1
 8004426:	d101      	bne.n	800442c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004428:	2302      	movs	r3, #2
 800442a:	e03d      	b.n	80044a8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2201      	movs	r2, #1
 8004430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	68db      	ldr	r3, [r3, #12]
 800443e:	4313      	orrs	r3, r2
 8004440:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	4313      	orrs	r3, r2
 800444e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	4313      	orrs	r3, r2
 800445c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4313      	orrs	r3, r2
 800446a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	691b      	ldr	r3, [r3, #16]
 8004476:	4313      	orrs	r3, r2
 8004478:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	695b      	ldr	r3, [r3, #20]
 8004484:	4313      	orrs	r3, r2
 8004486:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	69db      	ldr	r3, [r3, #28]
 8004492:	4313      	orrs	r3, r2
 8004494:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	68fa      	ldr	r2, [r7, #12]
 800449c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044a6:	2300      	movs	r3, #0
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3714      	adds	r7, #20
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr

080044b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b082      	sub	sp, #8
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d101      	bne.n	80044c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e03f      	b.n	8004546 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d106      	bne.n	80044e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f7fd f88c 	bl	80015f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2224      	movs	r2, #36	; 0x24
 80044e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	68da      	ldr	r2, [r3, #12]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80044f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f000 f829 	bl	8004550 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	691a      	ldr	r2, [r3, #16]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800450c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	695a      	ldr	r2, [r3, #20]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800451c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	68da      	ldr	r2, [r3, #12]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800452c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2200      	movs	r2, #0
 8004532:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2220      	movs	r2, #32
 8004538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2220      	movs	r2, #32
 8004540:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004544:	2300      	movs	r3, #0
}
 8004546:	4618      	mov	r0, r3
 8004548:	3708      	adds	r7, #8
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
	...

08004550 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004550:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004554:	b0c0      	sub	sp, #256	; 0x100
 8004556:	af00      	add	r7, sp, #0
 8004558:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800455c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	691b      	ldr	r3, [r3, #16]
 8004564:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800456c:	68d9      	ldr	r1, [r3, #12]
 800456e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	ea40 0301 	orr.w	r3, r0, r1
 8004578:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800457a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800457e:	689a      	ldr	r2, [r3, #8]
 8004580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004584:	691b      	ldr	r3, [r3, #16]
 8004586:	431a      	orrs	r2, r3
 8004588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800458c:	695b      	ldr	r3, [r3, #20]
 800458e:	431a      	orrs	r2, r3
 8004590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004594:	69db      	ldr	r3, [r3, #28]
 8004596:	4313      	orrs	r3, r2
 8004598:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800459c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80045a8:	f021 010c 	bic.w	r1, r1, #12
 80045ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80045b6:	430b      	orrs	r3, r1
 80045b8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80045ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	695b      	ldr	r3, [r3, #20]
 80045c2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80045c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045ca:	6999      	ldr	r1, [r3, #24]
 80045cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	ea40 0301 	orr.w	r3, r0, r1
 80045d6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80045d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	4b8f      	ldr	r3, [pc, #572]	; (800481c <UART_SetConfig+0x2cc>)
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d005      	beq.n	80045f0 <UART_SetConfig+0xa0>
 80045e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	4b8d      	ldr	r3, [pc, #564]	; (8004820 <UART_SetConfig+0x2d0>)
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d104      	bne.n	80045fa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80045f0:	f7fe fba6 	bl	8002d40 <HAL_RCC_GetPCLK2Freq>
 80045f4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80045f8:	e003      	b.n	8004602 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80045fa:	f7fe fb8d 	bl	8002d18 <HAL_RCC_GetPCLK1Freq>
 80045fe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004602:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004606:	69db      	ldr	r3, [r3, #28]
 8004608:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800460c:	f040 810c 	bne.w	8004828 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004610:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004614:	2200      	movs	r2, #0
 8004616:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800461a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800461e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004622:	4622      	mov	r2, r4
 8004624:	462b      	mov	r3, r5
 8004626:	1891      	adds	r1, r2, r2
 8004628:	65b9      	str	r1, [r7, #88]	; 0x58
 800462a:	415b      	adcs	r3, r3
 800462c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800462e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004632:	4621      	mov	r1, r4
 8004634:	eb12 0801 	adds.w	r8, r2, r1
 8004638:	4629      	mov	r1, r5
 800463a:	eb43 0901 	adc.w	r9, r3, r1
 800463e:	f04f 0200 	mov.w	r2, #0
 8004642:	f04f 0300 	mov.w	r3, #0
 8004646:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800464a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800464e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004652:	4690      	mov	r8, r2
 8004654:	4699      	mov	r9, r3
 8004656:	4623      	mov	r3, r4
 8004658:	eb18 0303 	adds.w	r3, r8, r3
 800465c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004660:	462b      	mov	r3, r5
 8004662:	eb49 0303 	adc.w	r3, r9, r3
 8004666:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800466a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004676:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800467a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800467e:	460b      	mov	r3, r1
 8004680:	18db      	adds	r3, r3, r3
 8004682:	653b      	str	r3, [r7, #80]	; 0x50
 8004684:	4613      	mov	r3, r2
 8004686:	eb42 0303 	adc.w	r3, r2, r3
 800468a:	657b      	str	r3, [r7, #84]	; 0x54
 800468c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004690:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004694:	f7fb fdb6 	bl	8000204 <__aeabi_uldivmod>
 8004698:	4602      	mov	r2, r0
 800469a:	460b      	mov	r3, r1
 800469c:	4b61      	ldr	r3, [pc, #388]	; (8004824 <UART_SetConfig+0x2d4>)
 800469e:	fba3 2302 	umull	r2, r3, r3, r2
 80046a2:	095b      	lsrs	r3, r3, #5
 80046a4:	011c      	lsls	r4, r3, #4
 80046a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046aa:	2200      	movs	r2, #0
 80046ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80046b0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80046b4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80046b8:	4642      	mov	r2, r8
 80046ba:	464b      	mov	r3, r9
 80046bc:	1891      	adds	r1, r2, r2
 80046be:	64b9      	str	r1, [r7, #72]	; 0x48
 80046c0:	415b      	adcs	r3, r3
 80046c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046c4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80046c8:	4641      	mov	r1, r8
 80046ca:	eb12 0a01 	adds.w	sl, r2, r1
 80046ce:	4649      	mov	r1, r9
 80046d0:	eb43 0b01 	adc.w	fp, r3, r1
 80046d4:	f04f 0200 	mov.w	r2, #0
 80046d8:	f04f 0300 	mov.w	r3, #0
 80046dc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80046e0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80046e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80046e8:	4692      	mov	sl, r2
 80046ea:	469b      	mov	fp, r3
 80046ec:	4643      	mov	r3, r8
 80046ee:	eb1a 0303 	adds.w	r3, sl, r3
 80046f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80046f6:	464b      	mov	r3, r9
 80046f8:	eb4b 0303 	adc.w	r3, fp, r3
 80046fc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	2200      	movs	r2, #0
 8004708:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800470c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004710:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004714:	460b      	mov	r3, r1
 8004716:	18db      	adds	r3, r3, r3
 8004718:	643b      	str	r3, [r7, #64]	; 0x40
 800471a:	4613      	mov	r3, r2
 800471c:	eb42 0303 	adc.w	r3, r2, r3
 8004720:	647b      	str	r3, [r7, #68]	; 0x44
 8004722:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004726:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800472a:	f7fb fd6b 	bl	8000204 <__aeabi_uldivmod>
 800472e:	4602      	mov	r2, r0
 8004730:	460b      	mov	r3, r1
 8004732:	4611      	mov	r1, r2
 8004734:	4b3b      	ldr	r3, [pc, #236]	; (8004824 <UART_SetConfig+0x2d4>)
 8004736:	fba3 2301 	umull	r2, r3, r3, r1
 800473a:	095b      	lsrs	r3, r3, #5
 800473c:	2264      	movs	r2, #100	; 0x64
 800473e:	fb02 f303 	mul.w	r3, r2, r3
 8004742:	1acb      	subs	r3, r1, r3
 8004744:	00db      	lsls	r3, r3, #3
 8004746:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800474a:	4b36      	ldr	r3, [pc, #216]	; (8004824 <UART_SetConfig+0x2d4>)
 800474c:	fba3 2302 	umull	r2, r3, r3, r2
 8004750:	095b      	lsrs	r3, r3, #5
 8004752:	005b      	lsls	r3, r3, #1
 8004754:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004758:	441c      	add	r4, r3
 800475a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800475e:	2200      	movs	r2, #0
 8004760:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004764:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004768:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800476c:	4642      	mov	r2, r8
 800476e:	464b      	mov	r3, r9
 8004770:	1891      	adds	r1, r2, r2
 8004772:	63b9      	str	r1, [r7, #56]	; 0x38
 8004774:	415b      	adcs	r3, r3
 8004776:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004778:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800477c:	4641      	mov	r1, r8
 800477e:	1851      	adds	r1, r2, r1
 8004780:	6339      	str	r1, [r7, #48]	; 0x30
 8004782:	4649      	mov	r1, r9
 8004784:	414b      	adcs	r3, r1
 8004786:	637b      	str	r3, [r7, #52]	; 0x34
 8004788:	f04f 0200 	mov.w	r2, #0
 800478c:	f04f 0300 	mov.w	r3, #0
 8004790:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004794:	4659      	mov	r1, fp
 8004796:	00cb      	lsls	r3, r1, #3
 8004798:	4651      	mov	r1, sl
 800479a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800479e:	4651      	mov	r1, sl
 80047a0:	00ca      	lsls	r2, r1, #3
 80047a2:	4610      	mov	r0, r2
 80047a4:	4619      	mov	r1, r3
 80047a6:	4603      	mov	r3, r0
 80047a8:	4642      	mov	r2, r8
 80047aa:	189b      	adds	r3, r3, r2
 80047ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80047b0:	464b      	mov	r3, r9
 80047b2:	460a      	mov	r2, r1
 80047b4:	eb42 0303 	adc.w	r3, r2, r3
 80047b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80047bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	2200      	movs	r2, #0
 80047c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80047c8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80047cc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80047d0:	460b      	mov	r3, r1
 80047d2:	18db      	adds	r3, r3, r3
 80047d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80047d6:	4613      	mov	r3, r2
 80047d8:	eb42 0303 	adc.w	r3, r2, r3
 80047dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80047e2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80047e6:	f7fb fd0d 	bl	8000204 <__aeabi_uldivmod>
 80047ea:	4602      	mov	r2, r0
 80047ec:	460b      	mov	r3, r1
 80047ee:	4b0d      	ldr	r3, [pc, #52]	; (8004824 <UART_SetConfig+0x2d4>)
 80047f0:	fba3 1302 	umull	r1, r3, r3, r2
 80047f4:	095b      	lsrs	r3, r3, #5
 80047f6:	2164      	movs	r1, #100	; 0x64
 80047f8:	fb01 f303 	mul.w	r3, r1, r3
 80047fc:	1ad3      	subs	r3, r2, r3
 80047fe:	00db      	lsls	r3, r3, #3
 8004800:	3332      	adds	r3, #50	; 0x32
 8004802:	4a08      	ldr	r2, [pc, #32]	; (8004824 <UART_SetConfig+0x2d4>)
 8004804:	fba2 2303 	umull	r2, r3, r2, r3
 8004808:	095b      	lsrs	r3, r3, #5
 800480a:	f003 0207 	and.w	r2, r3, #7
 800480e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4422      	add	r2, r4
 8004816:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004818:	e105      	b.n	8004a26 <UART_SetConfig+0x4d6>
 800481a:	bf00      	nop
 800481c:	40011000 	.word	0x40011000
 8004820:	40011400 	.word	0x40011400
 8004824:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004828:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800482c:	2200      	movs	r2, #0
 800482e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004832:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004836:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800483a:	4642      	mov	r2, r8
 800483c:	464b      	mov	r3, r9
 800483e:	1891      	adds	r1, r2, r2
 8004840:	6239      	str	r1, [r7, #32]
 8004842:	415b      	adcs	r3, r3
 8004844:	627b      	str	r3, [r7, #36]	; 0x24
 8004846:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800484a:	4641      	mov	r1, r8
 800484c:	1854      	adds	r4, r2, r1
 800484e:	4649      	mov	r1, r9
 8004850:	eb43 0501 	adc.w	r5, r3, r1
 8004854:	f04f 0200 	mov.w	r2, #0
 8004858:	f04f 0300 	mov.w	r3, #0
 800485c:	00eb      	lsls	r3, r5, #3
 800485e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004862:	00e2      	lsls	r2, r4, #3
 8004864:	4614      	mov	r4, r2
 8004866:	461d      	mov	r5, r3
 8004868:	4643      	mov	r3, r8
 800486a:	18e3      	adds	r3, r4, r3
 800486c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004870:	464b      	mov	r3, r9
 8004872:	eb45 0303 	adc.w	r3, r5, r3
 8004876:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800487a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	2200      	movs	r2, #0
 8004882:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004886:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800488a:	f04f 0200 	mov.w	r2, #0
 800488e:	f04f 0300 	mov.w	r3, #0
 8004892:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004896:	4629      	mov	r1, r5
 8004898:	008b      	lsls	r3, r1, #2
 800489a:	4621      	mov	r1, r4
 800489c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048a0:	4621      	mov	r1, r4
 80048a2:	008a      	lsls	r2, r1, #2
 80048a4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80048a8:	f7fb fcac 	bl	8000204 <__aeabi_uldivmod>
 80048ac:	4602      	mov	r2, r0
 80048ae:	460b      	mov	r3, r1
 80048b0:	4b60      	ldr	r3, [pc, #384]	; (8004a34 <UART_SetConfig+0x4e4>)
 80048b2:	fba3 2302 	umull	r2, r3, r3, r2
 80048b6:	095b      	lsrs	r3, r3, #5
 80048b8:	011c      	lsls	r4, r3, #4
 80048ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048be:	2200      	movs	r2, #0
 80048c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80048c4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80048c8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80048cc:	4642      	mov	r2, r8
 80048ce:	464b      	mov	r3, r9
 80048d0:	1891      	adds	r1, r2, r2
 80048d2:	61b9      	str	r1, [r7, #24]
 80048d4:	415b      	adcs	r3, r3
 80048d6:	61fb      	str	r3, [r7, #28]
 80048d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048dc:	4641      	mov	r1, r8
 80048de:	1851      	adds	r1, r2, r1
 80048e0:	6139      	str	r1, [r7, #16]
 80048e2:	4649      	mov	r1, r9
 80048e4:	414b      	adcs	r3, r1
 80048e6:	617b      	str	r3, [r7, #20]
 80048e8:	f04f 0200 	mov.w	r2, #0
 80048ec:	f04f 0300 	mov.w	r3, #0
 80048f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80048f4:	4659      	mov	r1, fp
 80048f6:	00cb      	lsls	r3, r1, #3
 80048f8:	4651      	mov	r1, sl
 80048fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048fe:	4651      	mov	r1, sl
 8004900:	00ca      	lsls	r2, r1, #3
 8004902:	4610      	mov	r0, r2
 8004904:	4619      	mov	r1, r3
 8004906:	4603      	mov	r3, r0
 8004908:	4642      	mov	r2, r8
 800490a:	189b      	adds	r3, r3, r2
 800490c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004910:	464b      	mov	r3, r9
 8004912:	460a      	mov	r2, r1
 8004914:	eb42 0303 	adc.w	r3, r2, r3
 8004918:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800491c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	2200      	movs	r2, #0
 8004924:	67bb      	str	r3, [r7, #120]	; 0x78
 8004926:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004928:	f04f 0200 	mov.w	r2, #0
 800492c:	f04f 0300 	mov.w	r3, #0
 8004930:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004934:	4649      	mov	r1, r9
 8004936:	008b      	lsls	r3, r1, #2
 8004938:	4641      	mov	r1, r8
 800493a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800493e:	4641      	mov	r1, r8
 8004940:	008a      	lsls	r2, r1, #2
 8004942:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004946:	f7fb fc5d 	bl	8000204 <__aeabi_uldivmod>
 800494a:	4602      	mov	r2, r0
 800494c:	460b      	mov	r3, r1
 800494e:	4b39      	ldr	r3, [pc, #228]	; (8004a34 <UART_SetConfig+0x4e4>)
 8004950:	fba3 1302 	umull	r1, r3, r3, r2
 8004954:	095b      	lsrs	r3, r3, #5
 8004956:	2164      	movs	r1, #100	; 0x64
 8004958:	fb01 f303 	mul.w	r3, r1, r3
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	011b      	lsls	r3, r3, #4
 8004960:	3332      	adds	r3, #50	; 0x32
 8004962:	4a34      	ldr	r2, [pc, #208]	; (8004a34 <UART_SetConfig+0x4e4>)
 8004964:	fba2 2303 	umull	r2, r3, r2, r3
 8004968:	095b      	lsrs	r3, r3, #5
 800496a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800496e:	441c      	add	r4, r3
 8004970:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004974:	2200      	movs	r2, #0
 8004976:	673b      	str	r3, [r7, #112]	; 0x70
 8004978:	677a      	str	r2, [r7, #116]	; 0x74
 800497a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800497e:	4642      	mov	r2, r8
 8004980:	464b      	mov	r3, r9
 8004982:	1891      	adds	r1, r2, r2
 8004984:	60b9      	str	r1, [r7, #8]
 8004986:	415b      	adcs	r3, r3
 8004988:	60fb      	str	r3, [r7, #12]
 800498a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800498e:	4641      	mov	r1, r8
 8004990:	1851      	adds	r1, r2, r1
 8004992:	6039      	str	r1, [r7, #0]
 8004994:	4649      	mov	r1, r9
 8004996:	414b      	adcs	r3, r1
 8004998:	607b      	str	r3, [r7, #4]
 800499a:	f04f 0200 	mov.w	r2, #0
 800499e:	f04f 0300 	mov.w	r3, #0
 80049a2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80049a6:	4659      	mov	r1, fp
 80049a8:	00cb      	lsls	r3, r1, #3
 80049aa:	4651      	mov	r1, sl
 80049ac:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049b0:	4651      	mov	r1, sl
 80049b2:	00ca      	lsls	r2, r1, #3
 80049b4:	4610      	mov	r0, r2
 80049b6:	4619      	mov	r1, r3
 80049b8:	4603      	mov	r3, r0
 80049ba:	4642      	mov	r2, r8
 80049bc:	189b      	adds	r3, r3, r2
 80049be:	66bb      	str	r3, [r7, #104]	; 0x68
 80049c0:	464b      	mov	r3, r9
 80049c2:	460a      	mov	r2, r1
 80049c4:	eb42 0303 	adc.w	r3, r2, r3
 80049c8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80049ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	2200      	movs	r2, #0
 80049d2:	663b      	str	r3, [r7, #96]	; 0x60
 80049d4:	667a      	str	r2, [r7, #100]	; 0x64
 80049d6:	f04f 0200 	mov.w	r2, #0
 80049da:	f04f 0300 	mov.w	r3, #0
 80049de:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80049e2:	4649      	mov	r1, r9
 80049e4:	008b      	lsls	r3, r1, #2
 80049e6:	4641      	mov	r1, r8
 80049e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049ec:	4641      	mov	r1, r8
 80049ee:	008a      	lsls	r2, r1, #2
 80049f0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80049f4:	f7fb fc06 	bl	8000204 <__aeabi_uldivmod>
 80049f8:	4602      	mov	r2, r0
 80049fa:	460b      	mov	r3, r1
 80049fc:	4b0d      	ldr	r3, [pc, #52]	; (8004a34 <UART_SetConfig+0x4e4>)
 80049fe:	fba3 1302 	umull	r1, r3, r3, r2
 8004a02:	095b      	lsrs	r3, r3, #5
 8004a04:	2164      	movs	r1, #100	; 0x64
 8004a06:	fb01 f303 	mul.w	r3, r1, r3
 8004a0a:	1ad3      	subs	r3, r2, r3
 8004a0c:	011b      	lsls	r3, r3, #4
 8004a0e:	3332      	adds	r3, #50	; 0x32
 8004a10:	4a08      	ldr	r2, [pc, #32]	; (8004a34 <UART_SetConfig+0x4e4>)
 8004a12:	fba2 2303 	umull	r2, r3, r2, r3
 8004a16:	095b      	lsrs	r3, r3, #5
 8004a18:	f003 020f 	and.w	r2, r3, #15
 8004a1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4422      	add	r2, r4
 8004a24:	609a      	str	r2, [r3, #8]
}
 8004a26:	bf00      	nop
 8004a28:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a32:	bf00      	nop
 8004a34:	51eb851f 	.word	0x51eb851f

08004a38 <__errno>:
 8004a38:	4b01      	ldr	r3, [pc, #4]	; (8004a40 <__errno+0x8>)
 8004a3a:	6818      	ldr	r0, [r3, #0]
 8004a3c:	4770      	bx	lr
 8004a3e:	bf00      	nop
 8004a40:	2000000c 	.word	0x2000000c

08004a44 <__libc_init_array>:
 8004a44:	b570      	push	{r4, r5, r6, lr}
 8004a46:	4d0d      	ldr	r5, [pc, #52]	; (8004a7c <__libc_init_array+0x38>)
 8004a48:	4c0d      	ldr	r4, [pc, #52]	; (8004a80 <__libc_init_array+0x3c>)
 8004a4a:	1b64      	subs	r4, r4, r5
 8004a4c:	10a4      	asrs	r4, r4, #2
 8004a4e:	2600      	movs	r6, #0
 8004a50:	42a6      	cmp	r6, r4
 8004a52:	d109      	bne.n	8004a68 <__libc_init_array+0x24>
 8004a54:	4d0b      	ldr	r5, [pc, #44]	; (8004a84 <__libc_init_array+0x40>)
 8004a56:	4c0c      	ldr	r4, [pc, #48]	; (8004a88 <__libc_init_array+0x44>)
 8004a58:	f000 fe04 	bl	8005664 <_init>
 8004a5c:	1b64      	subs	r4, r4, r5
 8004a5e:	10a4      	asrs	r4, r4, #2
 8004a60:	2600      	movs	r6, #0
 8004a62:	42a6      	cmp	r6, r4
 8004a64:	d105      	bne.n	8004a72 <__libc_init_array+0x2e>
 8004a66:	bd70      	pop	{r4, r5, r6, pc}
 8004a68:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a6c:	4798      	blx	r3
 8004a6e:	3601      	adds	r6, #1
 8004a70:	e7ee      	b.n	8004a50 <__libc_init_array+0xc>
 8004a72:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a76:	4798      	blx	r3
 8004a78:	3601      	adds	r6, #1
 8004a7a:	e7f2      	b.n	8004a62 <__libc_init_array+0x1e>
 8004a7c:	08005708 	.word	0x08005708
 8004a80:	08005708 	.word	0x08005708
 8004a84:	08005708 	.word	0x08005708
 8004a88:	0800570c 	.word	0x0800570c

08004a8c <memcmp>:
 8004a8c:	b510      	push	{r4, lr}
 8004a8e:	3901      	subs	r1, #1
 8004a90:	4402      	add	r2, r0
 8004a92:	4290      	cmp	r0, r2
 8004a94:	d101      	bne.n	8004a9a <memcmp+0xe>
 8004a96:	2000      	movs	r0, #0
 8004a98:	e005      	b.n	8004aa6 <memcmp+0x1a>
 8004a9a:	7803      	ldrb	r3, [r0, #0]
 8004a9c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004aa0:	42a3      	cmp	r3, r4
 8004aa2:	d001      	beq.n	8004aa8 <memcmp+0x1c>
 8004aa4:	1b18      	subs	r0, r3, r4
 8004aa6:	bd10      	pop	{r4, pc}
 8004aa8:	3001      	adds	r0, #1
 8004aaa:	e7f2      	b.n	8004a92 <memcmp+0x6>

08004aac <memset>:
 8004aac:	4402      	add	r2, r0
 8004aae:	4603      	mov	r3, r0
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d100      	bne.n	8004ab6 <memset+0xa>
 8004ab4:	4770      	bx	lr
 8004ab6:	f803 1b01 	strb.w	r1, [r3], #1
 8004aba:	e7f9      	b.n	8004ab0 <memset+0x4>

08004abc <_puts_r>:
 8004abc:	b570      	push	{r4, r5, r6, lr}
 8004abe:	460e      	mov	r6, r1
 8004ac0:	4605      	mov	r5, r0
 8004ac2:	b118      	cbz	r0, 8004acc <_puts_r+0x10>
 8004ac4:	6983      	ldr	r3, [r0, #24]
 8004ac6:	b90b      	cbnz	r3, 8004acc <_puts_r+0x10>
 8004ac8:	f000 fb16 	bl	80050f8 <__sinit>
 8004acc:	69ab      	ldr	r3, [r5, #24]
 8004ace:	68ac      	ldr	r4, [r5, #8]
 8004ad0:	b913      	cbnz	r3, 8004ad8 <_puts_r+0x1c>
 8004ad2:	4628      	mov	r0, r5
 8004ad4:	f000 fb10 	bl	80050f8 <__sinit>
 8004ad8:	4b2c      	ldr	r3, [pc, #176]	; (8004b8c <_puts_r+0xd0>)
 8004ada:	429c      	cmp	r4, r3
 8004adc:	d120      	bne.n	8004b20 <_puts_r+0x64>
 8004ade:	686c      	ldr	r4, [r5, #4]
 8004ae0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004ae2:	07db      	lsls	r3, r3, #31
 8004ae4:	d405      	bmi.n	8004af2 <_puts_r+0x36>
 8004ae6:	89a3      	ldrh	r3, [r4, #12]
 8004ae8:	0598      	lsls	r0, r3, #22
 8004aea:	d402      	bmi.n	8004af2 <_puts_r+0x36>
 8004aec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004aee:	f000 fba1 	bl	8005234 <__retarget_lock_acquire_recursive>
 8004af2:	89a3      	ldrh	r3, [r4, #12]
 8004af4:	0719      	lsls	r1, r3, #28
 8004af6:	d51d      	bpl.n	8004b34 <_puts_r+0x78>
 8004af8:	6923      	ldr	r3, [r4, #16]
 8004afa:	b1db      	cbz	r3, 8004b34 <_puts_r+0x78>
 8004afc:	3e01      	subs	r6, #1
 8004afe:	68a3      	ldr	r3, [r4, #8]
 8004b00:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004b04:	3b01      	subs	r3, #1
 8004b06:	60a3      	str	r3, [r4, #8]
 8004b08:	bb39      	cbnz	r1, 8004b5a <_puts_r+0x9e>
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	da38      	bge.n	8004b80 <_puts_r+0xc4>
 8004b0e:	4622      	mov	r2, r4
 8004b10:	210a      	movs	r1, #10
 8004b12:	4628      	mov	r0, r5
 8004b14:	f000 f916 	bl	8004d44 <__swbuf_r>
 8004b18:	3001      	adds	r0, #1
 8004b1a:	d011      	beq.n	8004b40 <_puts_r+0x84>
 8004b1c:	250a      	movs	r5, #10
 8004b1e:	e011      	b.n	8004b44 <_puts_r+0x88>
 8004b20:	4b1b      	ldr	r3, [pc, #108]	; (8004b90 <_puts_r+0xd4>)
 8004b22:	429c      	cmp	r4, r3
 8004b24:	d101      	bne.n	8004b2a <_puts_r+0x6e>
 8004b26:	68ac      	ldr	r4, [r5, #8]
 8004b28:	e7da      	b.n	8004ae0 <_puts_r+0x24>
 8004b2a:	4b1a      	ldr	r3, [pc, #104]	; (8004b94 <_puts_r+0xd8>)
 8004b2c:	429c      	cmp	r4, r3
 8004b2e:	bf08      	it	eq
 8004b30:	68ec      	ldreq	r4, [r5, #12]
 8004b32:	e7d5      	b.n	8004ae0 <_puts_r+0x24>
 8004b34:	4621      	mov	r1, r4
 8004b36:	4628      	mov	r0, r5
 8004b38:	f000 f956 	bl	8004de8 <__swsetup_r>
 8004b3c:	2800      	cmp	r0, #0
 8004b3e:	d0dd      	beq.n	8004afc <_puts_r+0x40>
 8004b40:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004b44:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004b46:	07da      	lsls	r2, r3, #31
 8004b48:	d405      	bmi.n	8004b56 <_puts_r+0x9a>
 8004b4a:	89a3      	ldrh	r3, [r4, #12]
 8004b4c:	059b      	lsls	r3, r3, #22
 8004b4e:	d402      	bmi.n	8004b56 <_puts_r+0x9a>
 8004b50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b52:	f000 fb70 	bl	8005236 <__retarget_lock_release_recursive>
 8004b56:	4628      	mov	r0, r5
 8004b58:	bd70      	pop	{r4, r5, r6, pc}
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	da04      	bge.n	8004b68 <_puts_r+0xac>
 8004b5e:	69a2      	ldr	r2, [r4, #24]
 8004b60:	429a      	cmp	r2, r3
 8004b62:	dc06      	bgt.n	8004b72 <_puts_r+0xb6>
 8004b64:	290a      	cmp	r1, #10
 8004b66:	d004      	beq.n	8004b72 <_puts_r+0xb6>
 8004b68:	6823      	ldr	r3, [r4, #0]
 8004b6a:	1c5a      	adds	r2, r3, #1
 8004b6c:	6022      	str	r2, [r4, #0]
 8004b6e:	7019      	strb	r1, [r3, #0]
 8004b70:	e7c5      	b.n	8004afe <_puts_r+0x42>
 8004b72:	4622      	mov	r2, r4
 8004b74:	4628      	mov	r0, r5
 8004b76:	f000 f8e5 	bl	8004d44 <__swbuf_r>
 8004b7a:	3001      	adds	r0, #1
 8004b7c:	d1bf      	bne.n	8004afe <_puts_r+0x42>
 8004b7e:	e7df      	b.n	8004b40 <_puts_r+0x84>
 8004b80:	6823      	ldr	r3, [r4, #0]
 8004b82:	250a      	movs	r5, #10
 8004b84:	1c5a      	adds	r2, r3, #1
 8004b86:	6022      	str	r2, [r4, #0]
 8004b88:	701d      	strb	r5, [r3, #0]
 8004b8a:	e7db      	b.n	8004b44 <_puts_r+0x88>
 8004b8c:	080056c0 	.word	0x080056c0
 8004b90:	080056e0 	.word	0x080056e0
 8004b94:	080056a0 	.word	0x080056a0

08004b98 <puts>:
 8004b98:	4b02      	ldr	r3, [pc, #8]	; (8004ba4 <puts+0xc>)
 8004b9a:	4601      	mov	r1, r0
 8004b9c:	6818      	ldr	r0, [r3, #0]
 8004b9e:	f7ff bf8d 	b.w	8004abc <_puts_r>
 8004ba2:	bf00      	nop
 8004ba4:	2000000c 	.word	0x2000000c

08004ba8 <setbuf>:
 8004ba8:	2900      	cmp	r1, #0
 8004baa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004bae:	bf0c      	ite	eq
 8004bb0:	2202      	moveq	r2, #2
 8004bb2:	2200      	movne	r2, #0
 8004bb4:	f000 b800 	b.w	8004bb8 <setvbuf>

08004bb8 <setvbuf>:
 8004bb8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004bbc:	461d      	mov	r5, r3
 8004bbe:	4b5d      	ldr	r3, [pc, #372]	; (8004d34 <setvbuf+0x17c>)
 8004bc0:	681f      	ldr	r7, [r3, #0]
 8004bc2:	4604      	mov	r4, r0
 8004bc4:	460e      	mov	r6, r1
 8004bc6:	4690      	mov	r8, r2
 8004bc8:	b127      	cbz	r7, 8004bd4 <setvbuf+0x1c>
 8004bca:	69bb      	ldr	r3, [r7, #24]
 8004bcc:	b913      	cbnz	r3, 8004bd4 <setvbuf+0x1c>
 8004bce:	4638      	mov	r0, r7
 8004bd0:	f000 fa92 	bl	80050f8 <__sinit>
 8004bd4:	4b58      	ldr	r3, [pc, #352]	; (8004d38 <setvbuf+0x180>)
 8004bd6:	429c      	cmp	r4, r3
 8004bd8:	d167      	bne.n	8004caa <setvbuf+0xf2>
 8004bda:	687c      	ldr	r4, [r7, #4]
 8004bdc:	f1b8 0f02 	cmp.w	r8, #2
 8004be0:	d006      	beq.n	8004bf0 <setvbuf+0x38>
 8004be2:	f1b8 0f01 	cmp.w	r8, #1
 8004be6:	f200 809f 	bhi.w	8004d28 <setvbuf+0x170>
 8004bea:	2d00      	cmp	r5, #0
 8004bec:	f2c0 809c 	blt.w	8004d28 <setvbuf+0x170>
 8004bf0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004bf2:	07db      	lsls	r3, r3, #31
 8004bf4:	d405      	bmi.n	8004c02 <setvbuf+0x4a>
 8004bf6:	89a3      	ldrh	r3, [r4, #12]
 8004bf8:	0598      	lsls	r0, r3, #22
 8004bfa:	d402      	bmi.n	8004c02 <setvbuf+0x4a>
 8004bfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004bfe:	f000 fb19 	bl	8005234 <__retarget_lock_acquire_recursive>
 8004c02:	4621      	mov	r1, r4
 8004c04:	4638      	mov	r0, r7
 8004c06:	f000 f9e3 	bl	8004fd0 <_fflush_r>
 8004c0a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004c0c:	b141      	cbz	r1, 8004c20 <setvbuf+0x68>
 8004c0e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004c12:	4299      	cmp	r1, r3
 8004c14:	d002      	beq.n	8004c1c <setvbuf+0x64>
 8004c16:	4638      	mov	r0, r7
 8004c18:	f000 fb7c 	bl	8005314 <_free_r>
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	6363      	str	r3, [r4, #52]	; 0x34
 8004c20:	2300      	movs	r3, #0
 8004c22:	61a3      	str	r3, [r4, #24]
 8004c24:	6063      	str	r3, [r4, #4]
 8004c26:	89a3      	ldrh	r3, [r4, #12]
 8004c28:	0619      	lsls	r1, r3, #24
 8004c2a:	d503      	bpl.n	8004c34 <setvbuf+0x7c>
 8004c2c:	6921      	ldr	r1, [r4, #16]
 8004c2e:	4638      	mov	r0, r7
 8004c30:	f000 fb70 	bl	8005314 <_free_r>
 8004c34:	89a3      	ldrh	r3, [r4, #12]
 8004c36:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8004c3a:	f023 0303 	bic.w	r3, r3, #3
 8004c3e:	f1b8 0f02 	cmp.w	r8, #2
 8004c42:	81a3      	strh	r3, [r4, #12]
 8004c44:	d06c      	beq.n	8004d20 <setvbuf+0x168>
 8004c46:	ab01      	add	r3, sp, #4
 8004c48:	466a      	mov	r2, sp
 8004c4a:	4621      	mov	r1, r4
 8004c4c:	4638      	mov	r0, r7
 8004c4e:	f000 faf3 	bl	8005238 <__swhatbuf_r>
 8004c52:	89a3      	ldrh	r3, [r4, #12]
 8004c54:	4318      	orrs	r0, r3
 8004c56:	81a0      	strh	r0, [r4, #12]
 8004c58:	2d00      	cmp	r5, #0
 8004c5a:	d130      	bne.n	8004cbe <setvbuf+0x106>
 8004c5c:	9d00      	ldr	r5, [sp, #0]
 8004c5e:	4628      	mov	r0, r5
 8004c60:	f000 fb50 	bl	8005304 <malloc>
 8004c64:	4606      	mov	r6, r0
 8004c66:	2800      	cmp	r0, #0
 8004c68:	d155      	bne.n	8004d16 <setvbuf+0x15e>
 8004c6a:	f8dd 9000 	ldr.w	r9, [sp]
 8004c6e:	45a9      	cmp	r9, r5
 8004c70:	d14a      	bne.n	8004d08 <setvbuf+0x150>
 8004c72:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004c76:	2200      	movs	r2, #0
 8004c78:	60a2      	str	r2, [r4, #8]
 8004c7a:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8004c7e:	6022      	str	r2, [r4, #0]
 8004c80:	6122      	str	r2, [r4, #16]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c88:	6162      	str	r2, [r4, #20]
 8004c8a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004c8c:	f043 0302 	orr.w	r3, r3, #2
 8004c90:	07d2      	lsls	r2, r2, #31
 8004c92:	81a3      	strh	r3, [r4, #12]
 8004c94:	d405      	bmi.n	8004ca2 <setvbuf+0xea>
 8004c96:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004c9a:	d102      	bne.n	8004ca2 <setvbuf+0xea>
 8004c9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c9e:	f000 faca 	bl	8005236 <__retarget_lock_release_recursive>
 8004ca2:	4628      	mov	r0, r5
 8004ca4:	b003      	add	sp, #12
 8004ca6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004caa:	4b24      	ldr	r3, [pc, #144]	; (8004d3c <setvbuf+0x184>)
 8004cac:	429c      	cmp	r4, r3
 8004cae:	d101      	bne.n	8004cb4 <setvbuf+0xfc>
 8004cb0:	68bc      	ldr	r4, [r7, #8]
 8004cb2:	e793      	b.n	8004bdc <setvbuf+0x24>
 8004cb4:	4b22      	ldr	r3, [pc, #136]	; (8004d40 <setvbuf+0x188>)
 8004cb6:	429c      	cmp	r4, r3
 8004cb8:	bf08      	it	eq
 8004cba:	68fc      	ldreq	r4, [r7, #12]
 8004cbc:	e78e      	b.n	8004bdc <setvbuf+0x24>
 8004cbe:	2e00      	cmp	r6, #0
 8004cc0:	d0cd      	beq.n	8004c5e <setvbuf+0xa6>
 8004cc2:	69bb      	ldr	r3, [r7, #24]
 8004cc4:	b913      	cbnz	r3, 8004ccc <setvbuf+0x114>
 8004cc6:	4638      	mov	r0, r7
 8004cc8:	f000 fa16 	bl	80050f8 <__sinit>
 8004ccc:	f1b8 0f01 	cmp.w	r8, #1
 8004cd0:	bf08      	it	eq
 8004cd2:	89a3      	ldrheq	r3, [r4, #12]
 8004cd4:	6026      	str	r6, [r4, #0]
 8004cd6:	bf04      	itt	eq
 8004cd8:	f043 0301 	orreq.w	r3, r3, #1
 8004cdc:	81a3      	strheq	r3, [r4, #12]
 8004cde:	89a2      	ldrh	r2, [r4, #12]
 8004ce0:	f012 0308 	ands.w	r3, r2, #8
 8004ce4:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8004ce8:	d01c      	beq.n	8004d24 <setvbuf+0x16c>
 8004cea:	07d3      	lsls	r3, r2, #31
 8004cec:	bf41      	itttt	mi
 8004cee:	2300      	movmi	r3, #0
 8004cf0:	426d      	negmi	r5, r5
 8004cf2:	60a3      	strmi	r3, [r4, #8]
 8004cf4:	61a5      	strmi	r5, [r4, #24]
 8004cf6:	bf58      	it	pl
 8004cf8:	60a5      	strpl	r5, [r4, #8]
 8004cfa:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8004cfc:	f015 0501 	ands.w	r5, r5, #1
 8004d00:	d115      	bne.n	8004d2e <setvbuf+0x176>
 8004d02:	f412 7f00 	tst.w	r2, #512	; 0x200
 8004d06:	e7c8      	b.n	8004c9a <setvbuf+0xe2>
 8004d08:	4648      	mov	r0, r9
 8004d0a:	f000 fafb 	bl	8005304 <malloc>
 8004d0e:	4606      	mov	r6, r0
 8004d10:	2800      	cmp	r0, #0
 8004d12:	d0ae      	beq.n	8004c72 <setvbuf+0xba>
 8004d14:	464d      	mov	r5, r9
 8004d16:	89a3      	ldrh	r3, [r4, #12]
 8004d18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d1c:	81a3      	strh	r3, [r4, #12]
 8004d1e:	e7d0      	b.n	8004cc2 <setvbuf+0x10a>
 8004d20:	2500      	movs	r5, #0
 8004d22:	e7a8      	b.n	8004c76 <setvbuf+0xbe>
 8004d24:	60a3      	str	r3, [r4, #8]
 8004d26:	e7e8      	b.n	8004cfa <setvbuf+0x142>
 8004d28:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004d2c:	e7b9      	b.n	8004ca2 <setvbuf+0xea>
 8004d2e:	2500      	movs	r5, #0
 8004d30:	e7b7      	b.n	8004ca2 <setvbuf+0xea>
 8004d32:	bf00      	nop
 8004d34:	2000000c 	.word	0x2000000c
 8004d38:	080056c0 	.word	0x080056c0
 8004d3c:	080056e0 	.word	0x080056e0
 8004d40:	080056a0 	.word	0x080056a0

08004d44 <__swbuf_r>:
 8004d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d46:	460e      	mov	r6, r1
 8004d48:	4614      	mov	r4, r2
 8004d4a:	4605      	mov	r5, r0
 8004d4c:	b118      	cbz	r0, 8004d56 <__swbuf_r+0x12>
 8004d4e:	6983      	ldr	r3, [r0, #24]
 8004d50:	b90b      	cbnz	r3, 8004d56 <__swbuf_r+0x12>
 8004d52:	f000 f9d1 	bl	80050f8 <__sinit>
 8004d56:	4b21      	ldr	r3, [pc, #132]	; (8004ddc <__swbuf_r+0x98>)
 8004d58:	429c      	cmp	r4, r3
 8004d5a:	d12b      	bne.n	8004db4 <__swbuf_r+0x70>
 8004d5c:	686c      	ldr	r4, [r5, #4]
 8004d5e:	69a3      	ldr	r3, [r4, #24]
 8004d60:	60a3      	str	r3, [r4, #8]
 8004d62:	89a3      	ldrh	r3, [r4, #12]
 8004d64:	071a      	lsls	r2, r3, #28
 8004d66:	d52f      	bpl.n	8004dc8 <__swbuf_r+0x84>
 8004d68:	6923      	ldr	r3, [r4, #16]
 8004d6a:	b36b      	cbz	r3, 8004dc8 <__swbuf_r+0x84>
 8004d6c:	6923      	ldr	r3, [r4, #16]
 8004d6e:	6820      	ldr	r0, [r4, #0]
 8004d70:	1ac0      	subs	r0, r0, r3
 8004d72:	6963      	ldr	r3, [r4, #20]
 8004d74:	b2f6      	uxtb	r6, r6
 8004d76:	4283      	cmp	r3, r0
 8004d78:	4637      	mov	r7, r6
 8004d7a:	dc04      	bgt.n	8004d86 <__swbuf_r+0x42>
 8004d7c:	4621      	mov	r1, r4
 8004d7e:	4628      	mov	r0, r5
 8004d80:	f000 f926 	bl	8004fd0 <_fflush_r>
 8004d84:	bb30      	cbnz	r0, 8004dd4 <__swbuf_r+0x90>
 8004d86:	68a3      	ldr	r3, [r4, #8]
 8004d88:	3b01      	subs	r3, #1
 8004d8a:	60a3      	str	r3, [r4, #8]
 8004d8c:	6823      	ldr	r3, [r4, #0]
 8004d8e:	1c5a      	adds	r2, r3, #1
 8004d90:	6022      	str	r2, [r4, #0]
 8004d92:	701e      	strb	r6, [r3, #0]
 8004d94:	6963      	ldr	r3, [r4, #20]
 8004d96:	3001      	adds	r0, #1
 8004d98:	4283      	cmp	r3, r0
 8004d9a:	d004      	beq.n	8004da6 <__swbuf_r+0x62>
 8004d9c:	89a3      	ldrh	r3, [r4, #12]
 8004d9e:	07db      	lsls	r3, r3, #31
 8004da0:	d506      	bpl.n	8004db0 <__swbuf_r+0x6c>
 8004da2:	2e0a      	cmp	r6, #10
 8004da4:	d104      	bne.n	8004db0 <__swbuf_r+0x6c>
 8004da6:	4621      	mov	r1, r4
 8004da8:	4628      	mov	r0, r5
 8004daa:	f000 f911 	bl	8004fd0 <_fflush_r>
 8004dae:	b988      	cbnz	r0, 8004dd4 <__swbuf_r+0x90>
 8004db0:	4638      	mov	r0, r7
 8004db2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004db4:	4b0a      	ldr	r3, [pc, #40]	; (8004de0 <__swbuf_r+0x9c>)
 8004db6:	429c      	cmp	r4, r3
 8004db8:	d101      	bne.n	8004dbe <__swbuf_r+0x7a>
 8004dba:	68ac      	ldr	r4, [r5, #8]
 8004dbc:	e7cf      	b.n	8004d5e <__swbuf_r+0x1a>
 8004dbe:	4b09      	ldr	r3, [pc, #36]	; (8004de4 <__swbuf_r+0xa0>)
 8004dc0:	429c      	cmp	r4, r3
 8004dc2:	bf08      	it	eq
 8004dc4:	68ec      	ldreq	r4, [r5, #12]
 8004dc6:	e7ca      	b.n	8004d5e <__swbuf_r+0x1a>
 8004dc8:	4621      	mov	r1, r4
 8004dca:	4628      	mov	r0, r5
 8004dcc:	f000 f80c 	bl	8004de8 <__swsetup_r>
 8004dd0:	2800      	cmp	r0, #0
 8004dd2:	d0cb      	beq.n	8004d6c <__swbuf_r+0x28>
 8004dd4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004dd8:	e7ea      	b.n	8004db0 <__swbuf_r+0x6c>
 8004dda:	bf00      	nop
 8004ddc:	080056c0 	.word	0x080056c0
 8004de0:	080056e0 	.word	0x080056e0
 8004de4:	080056a0 	.word	0x080056a0

08004de8 <__swsetup_r>:
 8004de8:	4b32      	ldr	r3, [pc, #200]	; (8004eb4 <__swsetup_r+0xcc>)
 8004dea:	b570      	push	{r4, r5, r6, lr}
 8004dec:	681d      	ldr	r5, [r3, #0]
 8004dee:	4606      	mov	r6, r0
 8004df0:	460c      	mov	r4, r1
 8004df2:	b125      	cbz	r5, 8004dfe <__swsetup_r+0x16>
 8004df4:	69ab      	ldr	r3, [r5, #24]
 8004df6:	b913      	cbnz	r3, 8004dfe <__swsetup_r+0x16>
 8004df8:	4628      	mov	r0, r5
 8004dfa:	f000 f97d 	bl	80050f8 <__sinit>
 8004dfe:	4b2e      	ldr	r3, [pc, #184]	; (8004eb8 <__swsetup_r+0xd0>)
 8004e00:	429c      	cmp	r4, r3
 8004e02:	d10f      	bne.n	8004e24 <__swsetup_r+0x3c>
 8004e04:	686c      	ldr	r4, [r5, #4]
 8004e06:	89a3      	ldrh	r3, [r4, #12]
 8004e08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004e0c:	0719      	lsls	r1, r3, #28
 8004e0e:	d42c      	bmi.n	8004e6a <__swsetup_r+0x82>
 8004e10:	06dd      	lsls	r5, r3, #27
 8004e12:	d411      	bmi.n	8004e38 <__swsetup_r+0x50>
 8004e14:	2309      	movs	r3, #9
 8004e16:	6033      	str	r3, [r6, #0]
 8004e18:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004e1c:	81a3      	strh	r3, [r4, #12]
 8004e1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004e22:	e03e      	b.n	8004ea2 <__swsetup_r+0xba>
 8004e24:	4b25      	ldr	r3, [pc, #148]	; (8004ebc <__swsetup_r+0xd4>)
 8004e26:	429c      	cmp	r4, r3
 8004e28:	d101      	bne.n	8004e2e <__swsetup_r+0x46>
 8004e2a:	68ac      	ldr	r4, [r5, #8]
 8004e2c:	e7eb      	b.n	8004e06 <__swsetup_r+0x1e>
 8004e2e:	4b24      	ldr	r3, [pc, #144]	; (8004ec0 <__swsetup_r+0xd8>)
 8004e30:	429c      	cmp	r4, r3
 8004e32:	bf08      	it	eq
 8004e34:	68ec      	ldreq	r4, [r5, #12]
 8004e36:	e7e6      	b.n	8004e06 <__swsetup_r+0x1e>
 8004e38:	0758      	lsls	r0, r3, #29
 8004e3a:	d512      	bpl.n	8004e62 <__swsetup_r+0x7a>
 8004e3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e3e:	b141      	cbz	r1, 8004e52 <__swsetup_r+0x6a>
 8004e40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004e44:	4299      	cmp	r1, r3
 8004e46:	d002      	beq.n	8004e4e <__swsetup_r+0x66>
 8004e48:	4630      	mov	r0, r6
 8004e4a:	f000 fa63 	bl	8005314 <_free_r>
 8004e4e:	2300      	movs	r3, #0
 8004e50:	6363      	str	r3, [r4, #52]	; 0x34
 8004e52:	89a3      	ldrh	r3, [r4, #12]
 8004e54:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004e58:	81a3      	strh	r3, [r4, #12]
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	6063      	str	r3, [r4, #4]
 8004e5e:	6923      	ldr	r3, [r4, #16]
 8004e60:	6023      	str	r3, [r4, #0]
 8004e62:	89a3      	ldrh	r3, [r4, #12]
 8004e64:	f043 0308 	orr.w	r3, r3, #8
 8004e68:	81a3      	strh	r3, [r4, #12]
 8004e6a:	6923      	ldr	r3, [r4, #16]
 8004e6c:	b94b      	cbnz	r3, 8004e82 <__swsetup_r+0x9a>
 8004e6e:	89a3      	ldrh	r3, [r4, #12]
 8004e70:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004e74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e78:	d003      	beq.n	8004e82 <__swsetup_r+0x9a>
 8004e7a:	4621      	mov	r1, r4
 8004e7c:	4630      	mov	r0, r6
 8004e7e:	f000 fa01 	bl	8005284 <__smakebuf_r>
 8004e82:	89a0      	ldrh	r0, [r4, #12]
 8004e84:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004e88:	f010 0301 	ands.w	r3, r0, #1
 8004e8c:	d00a      	beq.n	8004ea4 <__swsetup_r+0xbc>
 8004e8e:	2300      	movs	r3, #0
 8004e90:	60a3      	str	r3, [r4, #8]
 8004e92:	6963      	ldr	r3, [r4, #20]
 8004e94:	425b      	negs	r3, r3
 8004e96:	61a3      	str	r3, [r4, #24]
 8004e98:	6923      	ldr	r3, [r4, #16]
 8004e9a:	b943      	cbnz	r3, 8004eae <__swsetup_r+0xc6>
 8004e9c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004ea0:	d1ba      	bne.n	8004e18 <__swsetup_r+0x30>
 8004ea2:	bd70      	pop	{r4, r5, r6, pc}
 8004ea4:	0781      	lsls	r1, r0, #30
 8004ea6:	bf58      	it	pl
 8004ea8:	6963      	ldrpl	r3, [r4, #20]
 8004eaa:	60a3      	str	r3, [r4, #8]
 8004eac:	e7f4      	b.n	8004e98 <__swsetup_r+0xb0>
 8004eae:	2000      	movs	r0, #0
 8004eb0:	e7f7      	b.n	8004ea2 <__swsetup_r+0xba>
 8004eb2:	bf00      	nop
 8004eb4:	2000000c 	.word	0x2000000c
 8004eb8:	080056c0 	.word	0x080056c0
 8004ebc:	080056e0 	.word	0x080056e0
 8004ec0:	080056a0 	.word	0x080056a0

08004ec4 <__sflush_r>:
 8004ec4:	898a      	ldrh	r2, [r1, #12]
 8004ec6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004eca:	4605      	mov	r5, r0
 8004ecc:	0710      	lsls	r0, r2, #28
 8004ece:	460c      	mov	r4, r1
 8004ed0:	d458      	bmi.n	8004f84 <__sflush_r+0xc0>
 8004ed2:	684b      	ldr	r3, [r1, #4]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	dc05      	bgt.n	8004ee4 <__sflush_r+0x20>
 8004ed8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	dc02      	bgt.n	8004ee4 <__sflush_r+0x20>
 8004ede:	2000      	movs	r0, #0
 8004ee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ee4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004ee6:	2e00      	cmp	r6, #0
 8004ee8:	d0f9      	beq.n	8004ede <__sflush_r+0x1a>
 8004eea:	2300      	movs	r3, #0
 8004eec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004ef0:	682f      	ldr	r7, [r5, #0]
 8004ef2:	602b      	str	r3, [r5, #0]
 8004ef4:	d032      	beq.n	8004f5c <__sflush_r+0x98>
 8004ef6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004ef8:	89a3      	ldrh	r3, [r4, #12]
 8004efa:	075a      	lsls	r2, r3, #29
 8004efc:	d505      	bpl.n	8004f0a <__sflush_r+0x46>
 8004efe:	6863      	ldr	r3, [r4, #4]
 8004f00:	1ac0      	subs	r0, r0, r3
 8004f02:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004f04:	b10b      	cbz	r3, 8004f0a <__sflush_r+0x46>
 8004f06:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004f08:	1ac0      	subs	r0, r0, r3
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004f10:	6a21      	ldr	r1, [r4, #32]
 8004f12:	4628      	mov	r0, r5
 8004f14:	47b0      	blx	r6
 8004f16:	1c43      	adds	r3, r0, #1
 8004f18:	89a3      	ldrh	r3, [r4, #12]
 8004f1a:	d106      	bne.n	8004f2a <__sflush_r+0x66>
 8004f1c:	6829      	ldr	r1, [r5, #0]
 8004f1e:	291d      	cmp	r1, #29
 8004f20:	d82c      	bhi.n	8004f7c <__sflush_r+0xb8>
 8004f22:	4a2a      	ldr	r2, [pc, #168]	; (8004fcc <__sflush_r+0x108>)
 8004f24:	40ca      	lsrs	r2, r1
 8004f26:	07d6      	lsls	r6, r2, #31
 8004f28:	d528      	bpl.n	8004f7c <__sflush_r+0xb8>
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	6062      	str	r2, [r4, #4]
 8004f2e:	04d9      	lsls	r1, r3, #19
 8004f30:	6922      	ldr	r2, [r4, #16]
 8004f32:	6022      	str	r2, [r4, #0]
 8004f34:	d504      	bpl.n	8004f40 <__sflush_r+0x7c>
 8004f36:	1c42      	adds	r2, r0, #1
 8004f38:	d101      	bne.n	8004f3e <__sflush_r+0x7a>
 8004f3a:	682b      	ldr	r3, [r5, #0]
 8004f3c:	b903      	cbnz	r3, 8004f40 <__sflush_r+0x7c>
 8004f3e:	6560      	str	r0, [r4, #84]	; 0x54
 8004f40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004f42:	602f      	str	r7, [r5, #0]
 8004f44:	2900      	cmp	r1, #0
 8004f46:	d0ca      	beq.n	8004ede <__sflush_r+0x1a>
 8004f48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004f4c:	4299      	cmp	r1, r3
 8004f4e:	d002      	beq.n	8004f56 <__sflush_r+0x92>
 8004f50:	4628      	mov	r0, r5
 8004f52:	f000 f9df 	bl	8005314 <_free_r>
 8004f56:	2000      	movs	r0, #0
 8004f58:	6360      	str	r0, [r4, #52]	; 0x34
 8004f5a:	e7c1      	b.n	8004ee0 <__sflush_r+0x1c>
 8004f5c:	6a21      	ldr	r1, [r4, #32]
 8004f5e:	2301      	movs	r3, #1
 8004f60:	4628      	mov	r0, r5
 8004f62:	47b0      	blx	r6
 8004f64:	1c41      	adds	r1, r0, #1
 8004f66:	d1c7      	bne.n	8004ef8 <__sflush_r+0x34>
 8004f68:	682b      	ldr	r3, [r5, #0]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d0c4      	beq.n	8004ef8 <__sflush_r+0x34>
 8004f6e:	2b1d      	cmp	r3, #29
 8004f70:	d001      	beq.n	8004f76 <__sflush_r+0xb2>
 8004f72:	2b16      	cmp	r3, #22
 8004f74:	d101      	bne.n	8004f7a <__sflush_r+0xb6>
 8004f76:	602f      	str	r7, [r5, #0]
 8004f78:	e7b1      	b.n	8004ede <__sflush_r+0x1a>
 8004f7a:	89a3      	ldrh	r3, [r4, #12]
 8004f7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f80:	81a3      	strh	r3, [r4, #12]
 8004f82:	e7ad      	b.n	8004ee0 <__sflush_r+0x1c>
 8004f84:	690f      	ldr	r7, [r1, #16]
 8004f86:	2f00      	cmp	r7, #0
 8004f88:	d0a9      	beq.n	8004ede <__sflush_r+0x1a>
 8004f8a:	0793      	lsls	r3, r2, #30
 8004f8c:	680e      	ldr	r6, [r1, #0]
 8004f8e:	bf08      	it	eq
 8004f90:	694b      	ldreq	r3, [r1, #20]
 8004f92:	600f      	str	r7, [r1, #0]
 8004f94:	bf18      	it	ne
 8004f96:	2300      	movne	r3, #0
 8004f98:	eba6 0807 	sub.w	r8, r6, r7
 8004f9c:	608b      	str	r3, [r1, #8]
 8004f9e:	f1b8 0f00 	cmp.w	r8, #0
 8004fa2:	dd9c      	ble.n	8004ede <__sflush_r+0x1a>
 8004fa4:	6a21      	ldr	r1, [r4, #32]
 8004fa6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004fa8:	4643      	mov	r3, r8
 8004faa:	463a      	mov	r2, r7
 8004fac:	4628      	mov	r0, r5
 8004fae:	47b0      	blx	r6
 8004fb0:	2800      	cmp	r0, #0
 8004fb2:	dc06      	bgt.n	8004fc2 <__sflush_r+0xfe>
 8004fb4:	89a3      	ldrh	r3, [r4, #12]
 8004fb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004fba:	81a3      	strh	r3, [r4, #12]
 8004fbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004fc0:	e78e      	b.n	8004ee0 <__sflush_r+0x1c>
 8004fc2:	4407      	add	r7, r0
 8004fc4:	eba8 0800 	sub.w	r8, r8, r0
 8004fc8:	e7e9      	b.n	8004f9e <__sflush_r+0xda>
 8004fca:	bf00      	nop
 8004fcc:	20400001 	.word	0x20400001

08004fd0 <_fflush_r>:
 8004fd0:	b538      	push	{r3, r4, r5, lr}
 8004fd2:	690b      	ldr	r3, [r1, #16]
 8004fd4:	4605      	mov	r5, r0
 8004fd6:	460c      	mov	r4, r1
 8004fd8:	b913      	cbnz	r3, 8004fe0 <_fflush_r+0x10>
 8004fda:	2500      	movs	r5, #0
 8004fdc:	4628      	mov	r0, r5
 8004fde:	bd38      	pop	{r3, r4, r5, pc}
 8004fe0:	b118      	cbz	r0, 8004fea <_fflush_r+0x1a>
 8004fe2:	6983      	ldr	r3, [r0, #24]
 8004fe4:	b90b      	cbnz	r3, 8004fea <_fflush_r+0x1a>
 8004fe6:	f000 f887 	bl	80050f8 <__sinit>
 8004fea:	4b14      	ldr	r3, [pc, #80]	; (800503c <_fflush_r+0x6c>)
 8004fec:	429c      	cmp	r4, r3
 8004fee:	d11b      	bne.n	8005028 <_fflush_r+0x58>
 8004ff0:	686c      	ldr	r4, [r5, #4]
 8004ff2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d0ef      	beq.n	8004fda <_fflush_r+0xa>
 8004ffa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004ffc:	07d0      	lsls	r0, r2, #31
 8004ffe:	d404      	bmi.n	800500a <_fflush_r+0x3a>
 8005000:	0599      	lsls	r1, r3, #22
 8005002:	d402      	bmi.n	800500a <_fflush_r+0x3a>
 8005004:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005006:	f000 f915 	bl	8005234 <__retarget_lock_acquire_recursive>
 800500a:	4628      	mov	r0, r5
 800500c:	4621      	mov	r1, r4
 800500e:	f7ff ff59 	bl	8004ec4 <__sflush_r>
 8005012:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005014:	07da      	lsls	r2, r3, #31
 8005016:	4605      	mov	r5, r0
 8005018:	d4e0      	bmi.n	8004fdc <_fflush_r+0xc>
 800501a:	89a3      	ldrh	r3, [r4, #12]
 800501c:	059b      	lsls	r3, r3, #22
 800501e:	d4dd      	bmi.n	8004fdc <_fflush_r+0xc>
 8005020:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005022:	f000 f908 	bl	8005236 <__retarget_lock_release_recursive>
 8005026:	e7d9      	b.n	8004fdc <_fflush_r+0xc>
 8005028:	4b05      	ldr	r3, [pc, #20]	; (8005040 <_fflush_r+0x70>)
 800502a:	429c      	cmp	r4, r3
 800502c:	d101      	bne.n	8005032 <_fflush_r+0x62>
 800502e:	68ac      	ldr	r4, [r5, #8]
 8005030:	e7df      	b.n	8004ff2 <_fflush_r+0x22>
 8005032:	4b04      	ldr	r3, [pc, #16]	; (8005044 <_fflush_r+0x74>)
 8005034:	429c      	cmp	r4, r3
 8005036:	bf08      	it	eq
 8005038:	68ec      	ldreq	r4, [r5, #12]
 800503a:	e7da      	b.n	8004ff2 <_fflush_r+0x22>
 800503c:	080056c0 	.word	0x080056c0
 8005040:	080056e0 	.word	0x080056e0
 8005044:	080056a0 	.word	0x080056a0

08005048 <std>:
 8005048:	2300      	movs	r3, #0
 800504a:	b510      	push	{r4, lr}
 800504c:	4604      	mov	r4, r0
 800504e:	e9c0 3300 	strd	r3, r3, [r0]
 8005052:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005056:	6083      	str	r3, [r0, #8]
 8005058:	8181      	strh	r1, [r0, #12]
 800505a:	6643      	str	r3, [r0, #100]	; 0x64
 800505c:	81c2      	strh	r2, [r0, #14]
 800505e:	6183      	str	r3, [r0, #24]
 8005060:	4619      	mov	r1, r3
 8005062:	2208      	movs	r2, #8
 8005064:	305c      	adds	r0, #92	; 0x5c
 8005066:	f7ff fd21 	bl	8004aac <memset>
 800506a:	4b05      	ldr	r3, [pc, #20]	; (8005080 <std+0x38>)
 800506c:	6263      	str	r3, [r4, #36]	; 0x24
 800506e:	4b05      	ldr	r3, [pc, #20]	; (8005084 <std+0x3c>)
 8005070:	62a3      	str	r3, [r4, #40]	; 0x28
 8005072:	4b05      	ldr	r3, [pc, #20]	; (8005088 <std+0x40>)
 8005074:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005076:	4b05      	ldr	r3, [pc, #20]	; (800508c <std+0x44>)
 8005078:	6224      	str	r4, [r4, #32]
 800507a:	6323      	str	r3, [r4, #48]	; 0x30
 800507c:	bd10      	pop	{r4, pc}
 800507e:	bf00      	nop
 8005080:	080054f5 	.word	0x080054f5
 8005084:	08005517 	.word	0x08005517
 8005088:	0800554f 	.word	0x0800554f
 800508c:	08005573 	.word	0x08005573

08005090 <_cleanup_r>:
 8005090:	4901      	ldr	r1, [pc, #4]	; (8005098 <_cleanup_r+0x8>)
 8005092:	f000 b8af 	b.w	80051f4 <_fwalk_reent>
 8005096:	bf00      	nop
 8005098:	08004fd1 	.word	0x08004fd1

0800509c <__sfmoreglue>:
 800509c:	b570      	push	{r4, r5, r6, lr}
 800509e:	2268      	movs	r2, #104	; 0x68
 80050a0:	1e4d      	subs	r5, r1, #1
 80050a2:	4355      	muls	r5, r2
 80050a4:	460e      	mov	r6, r1
 80050a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80050aa:	f000 f99f 	bl	80053ec <_malloc_r>
 80050ae:	4604      	mov	r4, r0
 80050b0:	b140      	cbz	r0, 80050c4 <__sfmoreglue+0x28>
 80050b2:	2100      	movs	r1, #0
 80050b4:	e9c0 1600 	strd	r1, r6, [r0]
 80050b8:	300c      	adds	r0, #12
 80050ba:	60a0      	str	r0, [r4, #8]
 80050bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80050c0:	f7ff fcf4 	bl	8004aac <memset>
 80050c4:	4620      	mov	r0, r4
 80050c6:	bd70      	pop	{r4, r5, r6, pc}

080050c8 <__sfp_lock_acquire>:
 80050c8:	4801      	ldr	r0, [pc, #4]	; (80050d0 <__sfp_lock_acquire+0x8>)
 80050ca:	f000 b8b3 	b.w	8005234 <__retarget_lock_acquire_recursive>
 80050ce:	bf00      	nop
 80050d0:	200001b9 	.word	0x200001b9

080050d4 <__sfp_lock_release>:
 80050d4:	4801      	ldr	r0, [pc, #4]	; (80050dc <__sfp_lock_release+0x8>)
 80050d6:	f000 b8ae 	b.w	8005236 <__retarget_lock_release_recursive>
 80050da:	bf00      	nop
 80050dc:	200001b9 	.word	0x200001b9

080050e0 <__sinit_lock_acquire>:
 80050e0:	4801      	ldr	r0, [pc, #4]	; (80050e8 <__sinit_lock_acquire+0x8>)
 80050e2:	f000 b8a7 	b.w	8005234 <__retarget_lock_acquire_recursive>
 80050e6:	bf00      	nop
 80050e8:	200001ba 	.word	0x200001ba

080050ec <__sinit_lock_release>:
 80050ec:	4801      	ldr	r0, [pc, #4]	; (80050f4 <__sinit_lock_release+0x8>)
 80050ee:	f000 b8a2 	b.w	8005236 <__retarget_lock_release_recursive>
 80050f2:	bf00      	nop
 80050f4:	200001ba 	.word	0x200001ba

080050f8 <__sinit>:
 80050f8:	b510      	push	{r4, lr}
 80050fa:	4604      	mov	r4, r0
 80050fc:	f7ff fff0 	bl	80050e0 <__sinit_lock_acquire>
 8005100:	69a3      	ldr	r3, [r4, #24]
 8005102:	b11b      	cbz	r3, 800510c <__sinit+0x14>
 8005104:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005108:	f7ff bff0 	b.w	80050ec <__sinit_lock_release>
 800510c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005110:	6523      	str	r3, [r4, #80]	; 0x50
 8005112:	4b13      	ldr	r3, [pc, #76]	; (8005160 <__sinit+0x68>)
 8005114:	4a13      	ldr	r2, [pc, #76]	; (8005164 <__sinit+0x6c>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	62a2      	str	r2, [r4, #40]	; 0x28
 800511a:	42a3      	cmp	r3, r4
 800511c:	bf04      	itt	eq
 800511e:	2301      	moveq	r3, #1
 8005120:	61a3      	streq	r3, [r4, #24]
 8005122:	4620      	mov	r0, r4
 8005124:	f000 f820 	bl	8005168 <__sfp>
 8005128:	6060      	str	r0, [r4, #4]
 800512a:	4620      	mov	r0, r4
 800512c:	f000 f81c 	bl	8005168 <__sfp>
 8005130:	60a0      	str	r0, [r4, #8]
 8005132:	4620      	mov	r0, r4
 8005134:	f000 f818 	bl	8005168 <__sfp>
 8005138:	2200      	movs	r2, #0
 800513a:	60e0      	str	r0, [r4, #12]
 800513c:	2104      	movs	r1, #4
 800513e:	6860      	ldr	r0, [r4, #4]
 8005140:	f7ff ff82 	bl	8005048 <std>
 8005144:	68a0      	ldr	r0, [r4, #8]
 8005146:	2201      	movs	r2, #1
 8005148:	2109      	movs	r1, #9
 800514a:	f7ff ff7d 	bl	8005048 <std>
 800514e:	68e0      	ldr	r0, [r4, #12]
 8005150:	2202      	movs	r2, #2
 8005152:	2112      	movs	r1, #18
 8005154:	f7ff ff78 	bl	8005048 <std>
 8005158:	2301      	movs	r3, #1
 800515a:	61a3      	str	r3, [r4, #24]
 800515c:	e7d2      	b.n	8005104 <__sinit+0xc>
 800515e:	bf00      	nop
 8005160:	0800569c 	.word	0x0800569c
 8005164:	08005091 	.word	0x08005091

08005168 <__sfp>:
 8005168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800516a:	4607      	mov	r7, r0
 800516c:	f7ff ffac 	bl	80050c8 <__sfp_lock_acquire>
 8005170:	4b1e      	ldr	r3, [pc, #120]	; (80051ec <__sfp+0x84>)
 8005172:	681e      	ldr	r6, [r3, #0]
 8005174:	69b3      	ldr	r3, [r6, #24]
 8005176:	b913      	cbnz	r3, 800517e <__sfp+0x16>
 8005178:	4630      	mov	r0, r6
 800517a:	f7ff ffbd 	bl	80050f8 <__sinit>
 800517e:	3648      	adds	r6, #72	; 0x48
 8005180:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005184:	3b01      	subs	r3, #1
 8005186:	d503      	bpl.n	8005190 <__sfp+0x28>
 8005188:	6833      	ldr	r3, [r6, #0]
 800518a:	b30b      	cbz	r3, 80051d0 <__sfp+0x68>
 800518c:	6836      	ldr	r6, [r6, #0]
 800518e:	e7f7      	b.n	8005180 <__sfp+0x18>
 8005190:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005194:	b9d5      	cbnz	r5, 80051cc <__sfp+0x64>
 8005196:	4b16      	ldr	r3, [pc, #88]	; (80051f0 <__sfp+0x88>)
 8005198:	60e3      	str	r3, [r4, #12]
 800519a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800519e:	6665      	str	r5, [r4, #100]	; 0x64
 80051a0:	f000 f847 	bl	8005232 <__retarget_lock_init_recursive>
 80051a4:	f7ff ff96 	bl	80050d4 <__sfp_lock_release>
 80051a8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80051ac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80051b0:	6025      	str	r5, [r4, #0]
 80051b2:	61a5      	str	r5, [r4, #24]
 80051b4:	2208      	movs	r2, #8
 80051b6:	4629      	mov	r1, r5
 80051b8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80051bc:	f7ff fc76 	bl	8004aac <memset>
 80051c0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80051c4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80051c8:	4620      	mov	r0, r4
 80051ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051cc:	3468      	adds	r4, #104	; 0x68
 80051ce:	e7d9      	b.n	8005184 <__sfp+0x1c>
 80051d0:	2104      	movs	r1, #4
 80051d2:	4638      	mov	r0, r7
 80051d4:	f7ff ff62 	bl	800509c <__sfmoreglue>
 80051d8:	4604      	mov	r4, r0
 80051da:	6030      	str	r0, [r6, #0]
 80051dc:	2800      	cmp	r0, #0
 80051de:	d1d5      	bne.n	800518c <__sfp+0x24>
 80051e0:	f7ff ff78 	bl	80050d4 <__sfp_lock_release>
 80051e4:	230c      	movs	r3, #12
 80051e6:	603b      	str	r3, [r7, #0]
 80051e8:	e7ee      	b.n	80051c8 <__sfp+0x60>
 80051ea:	bf00      	nop
 80051ec:	0800569c 	.word	0x0800569c
 80051f0:	ffff0001 	.word	0xffff0001

080051f4 <_fwalk_reent>:
 80051f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80051f8:	4606      	mov	r6, r0
 80051fa:	4688      	mov	r8, r1
 80051fc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005200:	2700      	movs	r7, #0
 8005202:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005206:	f1b9 0901 	subs.w	r9, r9, #1
 800520a:	d505      	bpl.n	8005218 <_fwalk_reent+0x24>
 800520c:	6824      	ldr	r4, [r4, #0]
 800520e:	2c00      	cmp	r4, #0
 8005210:	d1f7      	bne.n	8005202 <_fwalk_reent+0xe>
 8005212:	4638      	mov	r0, r7
 8005214:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005218:	89ab      	ldrh	r3, [r5, #12]
 800521a:	2b01      	cmp	r3, #1
 800521c:	d907      	bls.n	800522e <_fwalk_reent+0x3a>
 800521e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005222:	3301      	adds	r3, #1
 8005224:	d003      	beq.n	800522e <_fwalk_reent+0x3a>
 8005226:	4629      	mov	r1, r5
 8005228:	4630      	mov	r0, r6
 800522a:	47c0      	blx	r8
 800522c:	4307      	orrs	r7, r0
 800522e:	3568      	adds	r5, #104	; 0x68
 8005230:	e7e9      	b.n	8005206 <_fwalk_reent+0x12>

08005232 <__retarget_lock_init_recursive>:
 8005232:	4770      	bx	lr

08005234 <__retarget_lock_acquire_recursive>:
 8005234:	4770      	bx	lr

08005236 <__retarget_lock_release_recursive>:
 8005236:	4770      	bx	lr

08005238 <__swhatbuf_r>:
 8005238:	b570      	push	{r4, r5, r6, lr}
 800523a:	460e      	mov	r6, r1
 800523c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005240:	2900      	cmp	r1, #0
 8005242:	b096      	sub	sp, #88	; 0x58
 8005244:	4614      	mov	r4, r2
 8005246:	461d      	mov	r5, r3
 8005248:	da08      	bge.n	800525c <__swhatbuf_r+0x24>
 800524a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800524e:	2200      	movs	r2, #0
 8005250:	602a      	str	r2, [r5, #0]
 8005252:	061a      	lsls	r2, r3, #24
 8005254:	d410      	bmi.n	8005278 <__swhatbuf_r+0x40>
 8005256:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800525a:	e00e      	b.n	800527a <__swhatbuf_r+0x42>
 800525c:	466a      	mov	r2, sp
 800525e:	f000 f9af 	bl	80055c0 <_fstat_r>
 8005262:	2800      	cmp	r0, #0
 8005264:	dbf1      	blt.n	800524a <__swhatbuf_r+0x12>
 8005266:	9a01      	ldr	r2, [sp, #4]
 8005268:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800526c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005270:	425a      	negs	r2, r3
 8005272:	415a      	adcs	r2, r3
 8005274:	602a      	str	r2, [r5, #0]
 8005276:	e7ee      	b.n	8005256 <__swhatbuf_r+0x1e>
 8005278:	2340      	movs	r3, #64	; 0x40
 800527a:	2000      	movs	r0, #0
 800527c:	6023      	str	r3, [r4, #0]
 800527e:	b016      	add	sp, #88	; 0x58
 8005280:	bd70      	pop	{r4, r5, r6, pc}
	...

08005284 <__smakebuf_r>:
 8005284:	898b      	ldrh	r3, [r1, #12]
 8005286:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005288:	079d      	lsls	r5, r3, #30
 800528a:	4606      	mov	r6, r0
 800528c:	460c      	mov	r4, r1
 800528e:	d507      	bpl.n	80052a0 <__smakebuf_r+0x1c>
 8005290:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005294:	6023      	str	r3, [r4, #0]
 8005296:	6123      	str	r3, [r4, #16]
 8005298:	2301      	movs	r3, #1
 800529a:	6163      	str	r3, [r4, #20]
 800529c:	b002      	add	sp, #8
 800529e:	bd70      	pop	{r4, r5, r6, pc}
 80052a0:	ab01      	add	r3, sp, #4
 80052a2:	466a      	mov	r2, sp
 80052a4:	f7ff ffc8 	bl	8005238 <__swhatbuf_r>
 80052a8:	9900      	ldr	r1, [sp, #0]
 80052aa:	4605      	mov	r5, r0
 80052ac:	4630      	mov	r0, r6
 80052ae:	f000 f89d 	bl	80053ec <_malloc_r>
 80052b2:	b948      	cbnz	r0, 80052c8 <__smakebuf_r+0x44>
 80052b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80052b8:	059a      	lsls	r2, r3, #22
 80052ba:	d4ef      	bmi.n	800529c <__smakebuf_r+0x18>
 80052bc:	f023 0303 	bic.w	r3, r3, #3
 80052c0:	f043 0302 	orr.w	r3, r3, #2
 80052c4:	81a3      	strh	r3, [r4, #12]
 80052c6:	e7e3      	b.n	8005290 <__smakebuf_r+0xc>
 80052c8:	4b0d      	ldr	r3, [pc, #52]	; (8005300 <__smakebuf_r+0x7c>)
 80052ca:	62b3      	str	r3, [r6, #40]	; 0x28
 80052cc:	89a3      	ldrh	r3, [r4, #12]
 80052ce:	6020      	str	r0, [r4, #0]
 80052d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052d4:	81a3      	strh	r3, [r4, #12]
 80052d6:	9b00      	ldr	r3, [sp, #0]
 80052d8:	6163      	str	r3, [r4, #20]
 80052da:	9b01      	ldr	r3, [sp, #4]
 80052dc:	6120      	str	r0, [r4, #16]
 80052de:	b15b      	cbz	r3, 80052f8 <__smakebuf_r+0x74>
 80052e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80052e4:	4630      	mov	r0, r6
 80052e6:	f000 f97d 	bl	80055e4 <_isatty_r>
 80052ea:	b128      	cbz	r0, 80052f8 <__smakebuf_r+0x74>
 80052ec:	89a3      	ldrh	r3, [r4, #12]
 80052ee:	f023 0303 	bic.w	r3, r3, #3
 80052f2:	f043 0301 	orr.w	r3, r3, #1
 80052f6:	81a3      	strh	r3, [r4, #12]
 80052f8:	89a0      	ldrh	r0, [r4, #12]
 80052fa:	4305      	orrs	r5, r0
 80052fc:	81a5      	strh	r5, [r4, #12]
 80052fe:	e7cd      	b.n	800529c <__smakebuf_r+0x18>
 8005300:	08005091 	.word	0x08005091

08005304 <malloc>:
 8005304:	4b02      	ldr	r3, [pc, #8]	; (8005310 <malloc+0xc>)
 8005306:	4601      	mov	r1, r0
 8005308:	6818      	ldr	r0, [r3, #0]
 800530a:	f000 b86f 	b.w	80053ec <_malloc_r>
 800530e:	bf00      	nop
 8005310:	2000000c 	.word	0x2000000c

08005314 <_free_r>:
 8005314:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005316:	2900      	cmp	r1, #0
 8005318:	d044      	beq.n	80053a4 <_free_r+0x90>
 800531a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800531e:	9001      	str	r0, [sp, #4]
 8005320:	2b00      	cmp	r3, #0
 8005322:	f1a1 0404 	sub.w	r4, r1, #4
 8005326:	bfb8      	it	lt
 8005328:	18e4      	addlt	r4, r4, r3
 800532a:	f000 f97d 	bl	8005628 <__malloc_lock>
 800532e:	4a1e      	ldr	r2, [pc, #120]	; (80053a8 <_free_r+0x94>)
 8005330:	9801      	ldr	r0, [sp, #4]
 8005332:	6813      	ldr	r3, [r2, #0]
 8005334:	b933      	cbnz	r3, 8005344 <_free_r+0x30>
 8005336:	6063      	str	r3, [r4, #4]
 8005338:	6014      	str	r4, [r2, #0]
 800533a:	b003      	add	sp, #12
 800533c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005340:	f000 b978 	b.w	8005634 <__malloc_unlock>
 8005344:	42a3      	cmp	r3, r4
 8005346:	d908      	bls.n	800535a <_free_r+0x46>
 8005348:	6825      	ldr	r5, [r4, #0]
 800534a:	1961      	adds	r1, r4, r5
 800534c:	428b      	cmp	r3, r1
 800534e:	bf01      	itttt	eq
 8005350:	6819      	ldreq	r1, [r3, #0]
 8005352:	685b      	ldreq	r3, [r3, #4]
 8005354:	1949      	addeq	r1, r1, r5
 8005356:	6021      	streq	r1, [r4, #0]
 8005358:	e7ed      	b.n	8005336 <_free_r+0x22>
 800535a:	461a      	mov	r2, r3
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	b10b      	cbz	r3, 8005364 <_free_r+0x50>
 8005360:	42a3      	cmp	r3, r4
 8005362:	d9fa      	bls.n	800535a <_free_r+0x46>
 8005364:	6811      	ldr	r1, [r2, #0]
 8005366:	1855      	adds	r5, r2, r1
 8005368:	42a5      	cmp	r5, r4
 800536a:	d10b      	bne.n	8005384 <_free_r+0x70>
 800536c:	6824      	ldr	r4, [r4, #0]
 800536e:	4421      	add	r1, r4
 8005370:	1854      	adds	r4, r2, r1
 8005372:	42a3      	cmp	r3, r4
 8005374:	6011      	str	r1, [r2, #0]
 8005376:	d1e0      	bne.n	800533a <_free_r+0x26>
 8005378:	681c      	ldr	r4, [r3, #0]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	6053      	str	r3, [r2, #4]
 800537e:	4421      	add	r1, r4
 8005380:	6011      	str	r1, [r2, #0]
 8005382:	e7da      	b.n	800533a <_free_r+0x26>
 8005384:	d902      	bls.n	800538c <_free_r+0x78>
 8005386:	230c      	movs	r3, #12
 8005388:	6003      	str	r3, [r0, #0]
 800538a:	e7d6      	b.n	800533a <_free_r+0x26>
 800538c:	6825      	ldr	r5, [r4, #0]
 800538e:	1961      	adds	r1, r4, r5
 8005390:	428b      	cmp	r3, r1
 8005392:	bf04      	itt	eq
 8005394:	6819      	ldreq	r1, [r3, #0]
 8005396:	685b      	ldreq	r3, [r3, #4]
 8005398:	6063      	str	r3, [r4, #4]
 800539a:	bf04      	itt	eq
 800539c:	1949      	addeq	r1, r1, r5
 800539e:	6021      	streq	r1, [r4, #0]
 80053a0:	6054      	str	r4, [r2, #4]
 80053a2:	e7ca      	b.n	800533a <_free_r+0x26>
 80053a4:	b003      	add	sp, #12
 80053a6:	bd30      	pop	{r4, r5, pc}
 80053a8:	200001bc 	.word	0x200001bc

080053ac <sbrk_aligned>:
 80053ac:	b570      	push	{r4, r5, r6, lr}
 80053ae:	4e0e      	ldr	r6, [pc, #56]	; (80053e8 <sbrk_aligned+0x3c>)
 80053b0:	460c      	mov	r4, r1
 80053b2:	6831      	ldr	r1, [r6, #0]
 80053b4:	4605      	mov	r5, r0
 80053b6:	b911      	cbnz	r1, 80053be <sbrk_aligned+0x12>
 80053b8:	f000 f88c 	bl	80054d4 <_sbrk_r>
 80053bc:	6030      	str	r0, [r6, #0]
 80053be:	4621      	mov	r1, r4
 80053c0:	4628      	mov	r0, r5
 80053c2:	f000 f887 	bl	80054d4 <_sbrk_r>
 80053c6:	1c43      	adds	r3, r0, #1
 80053c8:	d00a      	beq.n	80053e0 <sbrk_aligned+0x34>
 80053ca:	1cc4      	adds	r4, r0, #3
 80053cc:	f024 0403 	bic.w	r4, r4, #3
 80053d0:	42a0      	cmp	r0, r4
 80053d2:	d007      	beq.n	80053e4 <sbrk_aligned+0x38>
 80053d4:	1a21      	subs	r1, r4, r0
 80053d6:	4628      	mov	r0, r5
 80053d8:	f000 f87c 	bl	80054d4 <_sbrk_r>
 80053dc:	3001      	adds	r0, #1
 80053de:	d101      	bne.n	80053e4 <sbrk_aligned+0x38>
 80053e0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80053e4:	4620      	mov	r0, r4
 80053e6:	bd70      	pop	{r4, r5, r6, pc}
 80053e8:	200001c0 	.word	0x200001c0

080053ec <_malloc_r>:
 80053ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053f0:	1ccd      	adds	r5, r1, #3
 80053f2:	f025 0503 	bic.w	r5, r5, #3
 80053f6:	3508      	adds	r5, #8
 80053f8:	2d0c      	cmp	r5, #12
 80053fa:	bf38      	it	cc
 80053fc:	250c      	movcc	r5, #12
 80053fe:	2d00      	cmp	r5, #0
 8005400:	4607      	mov	r7, r0
 8005402:	db01      	blt.n	8005408 <_malloc_r+0x1c>
 8005404:	42a9      	cmp	r1, r5
 8005406:	d905      	bls.n	8005414 <_malloc_r+0x28>
 8005408:	230c      	movs	r3, #12
 800540a:	603b      	str	r3, [r7, #0]
 800540c:	2600      	movs	r6, #0
 800540e:	4630      	mov	r0, r6
 8005410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005414:	4e2e      	ldr	r6, [pc, #184]	; (80054d0 <_malloc_r+0xe4>)
 8005416:	f000 f907 	bl	8005628 <__malloc_lock>
 800541a:	6833      	ldr	r3, [r6, #0]
 800541c:	461c      	mov	r4, r3
 800541e:	bb34      	cbnz	r4, 800546e <_malloc_r+0x82>
 8005420:	4629      	mov	r1, r5
 8005422:	4638      	mov	r0, r7
 8005424:	f7ff ffc2 	bl	80053ac <sbrk_aligned>
 8005428:	1c43      	adds	r3, r0, #1
 800542a:	4604      	mov	r4, r0
 800542c:	d14d      	bne.n	80054ca <_malloc_r+0xde>
 800542e:	6834      	ldr	r4, [r6, #0]
 8005430:	4626      	mov	r6, r4
 8005432:	2e00      	cmp	r6, #0
 8005434:	d140      	bne.n	80054b8 <_malloc_r+0xcc>
 8005436:	6823      	ldr	r3, [r4, #0]
 8005438:	4631      	mov	r1, r6
 800543a:	4638      	mov	r0, r7
 800543c:	eb04 0803 	add.w	r8, r4, r3
 8005440:	f000 f848 	bl	80054d4 <_sbrk_r>
 8005444:	4580      	cmp	r8, r0
 8005446:	d13a      	bne.n	80054be <_malloc_r+0xd2>
 8005448:	6821      	ldr	r1, [r4, #0]
 800544a:	3503      	adds	r5, #3
 800544c:	1a6d      	subs	r5, r5, r1
 800544e:	f025 0503 	bic.w	r5, r5, #3
 8005452:	3508      	adds	r5, #8
 8005454:	2d0c      	cmp	r5, #12
 8005456:	bf38      	it	cc
 8005458:	250c      	movcc	r5, #12
 800545a:	4629      	mov	r1, r5
 800545c:	4638      	mov	r0, r7
 800545e:	f7ff ffa5 	bl	80053ac <sbrk_aligned>
 8005462:	3001      	adds	r0, #1
 8005464:	d02b      	beq.n	80054be <_malloc_r+0xd2>
 8005466:	6823      	ldr	r3, [r4, #0]
 8005468:	442b      	add	r3, r5
 800546a:	6023      	str	r3, [r4, #0]
 800546c:	e00e      	b.n	800548c <_malloc_r+0xa0>
 800546e:	6822      	ldr	r2, [r4, #0]
 8005470:	1b52      	subs	r2, r2, r5
 8005472:	d41e      	bmi.n	80054b2 <_malloc_r+0xc6>
 8005474:	2a0b      	cmp	r2, #11
 8005476:	d916      	bls.n	80054a6 <_malloc_r+0xba>
 8005478:	1961      	adds	r1, r4, r5
 800547a:	42a3      	cmp	r3, r4
 800547c:	6025      	str	r5, [r4, #0]
 800547e:	bf18      	it	ne
 8005480:	6059      	strne	r1, [r3, #4]
 8005482:	6863      	ldr	r3, [r4, #4]
 8005484:	bf08      	it	eq
 8005486:	6031      	streq	r1, [r6, #0]
 8005488:	5162      	str	r2, [r4, r5]
 800548a:	604b      	str	r3, [r1, #4]
 800548c:	4638      	mov	r0, r7
 800548e:	f104 060b 	add.w	r6, r4, #11
 8005492:	f000 f8cf 	bl	8005634 <__malloc_unlock>
 8005496:	f026 0607 	bic.w	r6, r6, #7
 800549a:	1d23      	adds	r3, r4, #4
 800549c:	1af2      	subs	r2, r6, r3
 800549e:	d0b6      	beq.n	800540e <_malloc_r+0x22>
 80054a0:	1b9b      	subs	r3, r3, r6
 80054a2:	50a3      	str	r3, [r4, r2]
 80054a4:	e7b3      	b.n	800540e <_malloc_r+0x22>
 80054a6:	6862      	ldr	r2, [r4, #4]
 80054a8:	42a3      	cmp	r3, r4
 80054aa:	bf0c      	ite	eq
 80054ac:	6032      	streq	r2, [r6, #0]
 80054ae:	605a      	strne	r2, [r3, #4]
 80054b0:	e7ec      	b.n	800548c <_malloc_r+0xa0>
 80054b2:	4623      	mov	r3, r4
 80054b4:	6864      	ldr	r4, [r4, #4]
 80054b6:	e7b2      	b.n	800541e <_malloc_r+0x32>
 80054b8:	4634      	mov	r4, r6
 80054ba:	6876      	ldr	r6, [r6, #4]
 80054bc:	e7b9      	b.n	8005432 <_malloc_r+0x46>
 80054be:	230c      	movs	r3, #12
 80054c0:	603b      	str	r3, [r7, #0]
 80054c2:	4638      	mov	r0, r7
 80054c4:	f000 f8b6 	bl	8005634 <__malloc_unlock>
 80054c8:	e7a1      	b.n	800540e <_malloc_r+0x22>
 80054ca:	6025      	str	r5, [r4, #0]
 80054cc:	e7de      	b.n	800548c <_malloc_r+0xa0>
 80054ce:	bf00      	nop
 80054d0:	200001bc 	.word	0x200001bc

080054d4 <_sbrk_r>:
 80054d4:	b538      	push	{r3, r4, r5, lr}
 80054d6:	4d06      	ldr	r5, [pc, #24]	; (80054f0 <_sbrk_r+0x1c>)
 80054d8:	2300      	movs	r3, #0
 80054da:	4604      	mov	r4, r0
 80054dc:	4608      	mov	r0, r1
 80054de:	602b      	str	r3, [r5, #0]
 80054e0:	f7fc f988 	bl	80017f4 <_sbrk>
 80054e4:	1c43      	adds	r3, r0, #1
 80054e6:	d102      	bne.n	80054ee <_sbrk_r+0x1a>
 80054e8:	682b      	ldr	r3, [r5, #0]
 80054ea:	b103      	cbz	r3, 80054ee <_sbrk_r+0x1a>
 80054ec:	6023      	str	r3, [r4, #0]
 80054ee:	bd38      	pop	{r3, r4, r5, pc}
 80054f0:	200001c4 	.word	0x200001c4

080054f4 <__sread>:
 80054f4:	b510      	push	{r4, lr}
 80054f6:	460c      	mov	r4, r1
 80054f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054fc:	f000 f8a0 	bl	8005640 <_read_r>
 8005500:	2800      	cmp	r0, #0
 8005502:	bfab      	itete	ge
 8005504:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005506:	89a3      	ldrhlt	r3, [r4, #12]
 8005508:	181b      	addge	r3, r3, r0
 800550a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800550e:	bfac      	ite	ge
 8005510:	6563      	strge	r3, [r4, #84]	; 0x54
 8005512:	81a3      	strhlt	r3, [r4, #12]
 8005514:	bd10      	pop	{r4, pc}

08005516 <__swrite>:
 8005516:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800551a:	461f      	mov	r7, r3
 800551c:	898b      	ldrh	r3, [r1, #12]
 800551e:	05db      	lsls	r3, r3, #23
 8005520:	4605      	mov	r5, r0
 8005522:	460c      	mov	r4, r1
 8005524:	4616      	mov	r6, r2
 8005526:	d505      	bpl.n	8005534 <__swrite+0x1e>
 8005528:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800552c:	2302      	movs	r3, #2
 800552e:	2200      	movs	r2, #0
 8005530:	f000 f868 	bl	8005604 <_lseek_r>
 8005534:	89a3      	ldrh	r3, [r4, #12]
 8005536:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800553a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800553e:	81a3      	strh	r3, [r4, #12]
 8005540:	4632      	mov	r2, r6
 8005542:	463b      	mov	r3, r7
 8005544:	4628      	mov	r0, r5
 8005546:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800554a:	f000 b817 	b.w	800557c <_write_r>

0800554e <__sseek>:
 800554e:	b510      	push	{r4, lr}
 8005550:	460c      	mov	r4, r1
 8005552:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005556:	f000 f855 	bl	8005604 <_lseek_r>
 800555a:	1c43      	adds	r3, r0, #1
 800555c:	89a3      	ldrh	r3, [r4, #12]
 800555e:	bf15      	itete	ne
 8005560:	6560      	strne	r0, [r4, #84]	; 0x54
 8005562:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005566:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800556a:	81a3      	strheq	r3, [r4, #12]
 800556c:	bf18      	it	ne
 800556e:	81a3      	strhne	r3, [r4, #12]
 8005570:	bd10      	pop	{r4, pc}

08005572 <__sclose>:
 8005572:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005576:	f000 b813 	b.w	80055a0 <_close_r>
	...

0800557c <_write_r>:
 800557c:	b538      	push	{r3, r4, r5, lr}
 800557e:	4d07      	ldr	r5, [pc, #28]	; (800559c <_write_r+0x20>)
 8005580:	4604      	mov	r4, r0
 8005582:	4608      	mov	r0, r1
 8005584:	4611      	mov	r1, r2
 8005586:	2200      	movs	r2, #0
 8005588:	602a      	str	r2, [r5, #0]
 800558a:	461a      	mov	r2, r3
 800558c:	f7fc f8e1 	bl	8001752 <_write>
 8005590:	1c43      	adds	r3, r0, #1
 8005592:	d102      	bne.n	800559a <_write_r+0x1e>
 8005594:	682b      	ldr	r3, [r5, #0]
 8005596:	b103      	cbz	r3, 800559a <_write_r+0x1e>
 8005598:	6023      	str	r3, [r4, #0]
 800559a:	bd38      	pop	{r3, r4, r5, pc}
 800559c:	200001c4 	.word	0x200001c4

080055a0 <_close_r>:
 80055a0:	b538      	push	{r3, r4, r5, lr}
 80055a2:	4d06      	ldr	r5, [pc, #24]	; (80055bc <_close_r+0x1c>)
 80055a4:	2300      	movs	r3, #0
 80055a6:	4604      	mov	r4, r0
 80055a8:	4608      	mov	r0, r1
 80055aa:	602b      	str	r3, [r5, #0]
 80055ac:	f7fc f8ed 	bl	800178a <_close>
 80055b0:	1c43      	adds	r3, r0, #1
 80055b2:	d102      	bne.n	80055ba <_close_r+0x1a>
 80055b4:	682b      	ldr	r3, [r5, #0]
 80055b6:	b103      	cbz	r3, 80055ba <_close_r+0x1a>
 80055b8:	6023      	str	r3, [r4, #0]
 80055ba:	bd38      	pop	{r3, r4, r5, pc}
 80055bc:	200001c4 	.word	0x200001c4

080055c0 <_fstat_r>:
 80055c0:	b538      	push	{r3, r4, r5, lr}
 80055c2:	4d07      	ldr	r5, [pc, #28]	; (80055e0 <_fstat_r+0x20>)
 80055c4:	2300      	movs	r3, #0
 80055c6:	4604      	mov	r4, r0
 80055c8:	4608      	mov	r0, r1
 80055ca:	4611      	mov	r1, r2
 80055cc:	602b      	str	r3, [r5, #0]
 80055ce:	f7fc f8e8 	bl	80017a2 <_fstat>
 80055d2:	1c43      	adds	r3, r0, #1
 80055d4:	d102      	bne.n	80055dc <_fstat_r+0x1c>
 80055d6:	682b      	ldr	r3, [r5, #0]
 80055d8:	b103      	cbz	r3, 80055dc <_fstat_r+0x1c>
 80055da:	6023      	str	r3, [r4, #0]
 80055dc:	bd38      	pop	{r3, r4, r5, pc}
 80055de:	bf00      	nop
 80055e0:	200001c4 	.word	0x200001c4

080055e4 <_isatty_r>:
 80055e4:	b538      	push	{r3, r4, r5, lr}
 80055e6:	4d06      	ldr	r5, [pc, #24]	; (8005600 <_isatty_r+0x1c>)
 80055e8:	2300      	movs	r3, #0
 80055ea:	4604      	mov	r4, r0
 80055ec:	4608      	mov	r0, r1
 80055ee:	602b      	str	r3, [r5, #0]
 80055f0:	f7fc f8e7 	bl	80017c2 <_isatty>
 80055f4:	1c43      	adds	r3, r0, #1
 80055f6:	d102      	bne.n	80055fe <_isatty_r+0x1a>
 80055f8:	682b      	ldr	r3, [r5, #0]
 80055fa:	b103      	cbz	r3, 80055fe <_isatty_r+0x1a>
 80055fc:	6023      	str	r3, [r4, #0]
 80055fe:	bd38      	pop	{r3, r4, r5, pc}
 8005600:	200001c4 	.word	0x200001c4

08005604 <_lseek_r>:
 8005604:	b538      	push	{r3, r4, r5, lr}
 8005606:	4d07      	ldr	r5, [pc, #28]	; (8005624 <_lseek_r+0x20>)
 8005608:	4604      	mov	r4, r0
 800560a:	4608      	mov	r0, r1
 800560c:	4611      	mov	r1, r2
 800560e:	2200      	movs	r2, #0
 8005610:	602a      	str	r2, [r5, #0]
 8005612:	461a      	mov	r2, r3
 8005614:	f7fc f8e0 	bl	80017d8 <_lseek>
 8005618:	1c43      	adds	r3, r0, #1
 800561a:	d102      	bne.n	8005622 <_lseek_r+0x1e>
 800561c:	682b      	ldr	r3, [r5, #0]
 800561e:	b103      	cbz	r3, 8005622 <_lseek_r+0x1e>
 8005620:	6023      	str	r3, [r4, #0]
 8005622:	bd38      	pop	{r3, r4, r5, pc}
 8005624:	200001c4 	.word	0x200001c4

08005628 <__malloc_lock>:
 8005628:	4801      	ldr	r0, [pc, #4]	; (8005630 <__malloc_lock+0x8>)
 800562a:	f7ff be03 	b.w	8005234 <__retarget_lock_acquire_recursive>
 800562e:	bf00      	nop
 8005630:	200001b8 	.word	0x200001b8

08005634 <__malloc_unlock>:
 8005634:	4801      	ldr	r0, [pc, #4]	; (800563c <__malloc_unlock+0x8>)
 8005636:	f7ff bdfe 	b.w	8005236 <__retarget_lock_release_recursive>
 800563a:	bf00      	nop
 800563c:	200001b8 	.word	0x200001b8

08005640 <_read_r>:
 8005640:	b538      	push	{r3, r4, r5, lr}
 8005642:	4d07      	ldr	r5, [pc, #28]	; (8005660 <_read_r+0x20>)
 8005644:	4604      	mov	r4, r0
 8005646:	4608      	mov	r0, r1
 8005648:	4611      	mov	r1, r2
 800564a:	2200      	movs	r2, #0
 800564c:	602a      	str	r2, [r5, #0]
 800564e:	461a      	mov	r2, r3
 8005650:	f7fc f862 	bl	8001718 <_read>
 8005654:	1c43      	adds	r3, r0, #1
 8005656:	d102      	bne.n	800565e <_read_r+0x1e>
 8005658:	682b      	ldr	r3, [r5, #0]
 800565a:	b103      	cbz	r3, 800565e <_read_r+0x1e>
 800565c:	6023      	str	r3, [r4, #0]
 800565e:	bd38      	pop	{r3, r4, r5, pc}
 8005660:	200001c4 	.word	0x200001c4

08005664 <_init>:
 8005664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005666:	bf00      	nop
 8005668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800566a:	bc08      	pop	{r3}
 800566c:	469e      	mov	lr, r3
 800566e:	4770      	bx	lr

08005670 <_fini>:
 8005670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005672:	bf00      	nop
 8005674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005676:	bc08      	pop	{r3}
 8005678:	469e      	mov	lr, r3
 800567a:	4770      	bx	lr
