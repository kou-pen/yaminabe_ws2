
MOTOR_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005720  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  080058f0  080058f0  000158f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059c4  080059c4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080059c4  080059c4  000159c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080059cc  080059cc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059cc  080059cc  000159cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080059d0  080059d0  000159d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080059d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  20000070  08005a44  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  08005a44  000201c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001169d  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024d3  00000000  00000000  0003173d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e90  00000000  00000000  00033c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000db8  00000000  00000000  00034aa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026041  00000000  00000000  00035858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010ef6  00000000  00000000  0005b899  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000da332  00000000  00000000  0006c78f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00146ac1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004608  00000000  00000000  00146b14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080058d8 	.word	0x080058d8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	080058d8 	.word	0x080058d8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b08a      	sub	sp, #40	; 0x28
 80005b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	setbuf(stdout, NULL);
 80005ba:	4b32      	ldr	r3, [pc, #200]	; (8000684 <main+0xd0>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	689b      	ldr	r3, [r3, #8]
 80005c0:	2100      	movs	r1, #0
 80005c2:	4618      	mov	r0, r3
 80005c4:	f004 f93c 	bl	8004840 <setbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c8:	f000 ffee 	bl	80015a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005cc:	f000 f866 	bl	800069c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d0:	f000 fade 	bl	8000b90 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 80005d4:	f000 faae 	bl	8000b34 <_ZL19MX_USART2_UART_Initv>
  MX_TIM1_Init();
 80005d8:	f000 f91e 	bl	8000818 <_ZL12MX_TIM1_Initv>
  MX_TIM2_Init();
 80005dc:	f000 f9fc 	bl	80009d8 <_ZL12MX_TIM2_Initv>
  MX_CAN2_Init();
 80005e0:	f000 f8de 	bl	80007a0 <_ZL12MX_CAN2_Initv>
  /* USER CODE BEGIN 2 */
	CAN_FilterTypeDef filter;
	  filter.FilterIdHigh         = 0;                        // フィルターID(上位16ビット)
 80005e4:	2300      	movs	r3, #0
 80005e6:	603b      	str	r3, [r7, #0]
	  filter.FilterIdLow          = 0;                        // フィルターID(下位16ビット)
 80005e8:	2300      	movs	r3, #0
 80005ea:	607b      	str	r3, [r7, #4]
	  filter.FilterMaskIdHigh     = 0;                        // フィルターマスク(上位16ビット)
 80005ec:	2300      	movs	r3, #0
 80005ee:	60bb      	str	r3, [r7, #8]
	  filter.FilterMaskIdLow      = 0;                        // フィルターマスク(下位16ビット)
 80005f0:	2300      	movs	r3, #0
 80005f2:	60fb      	str	r3, [r7, #12]
	  filter.FilterScale          = CAN_FILTERSCALE_32BIT;    // フィルタースケール
 80005f4:	2301      	movs	r3, #1
 80005f6:	61fb      	str	r3, [r7, #28]
	  filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;         // フィルターに割り当てるFIFO
 80005f8:	2300      	movs	r3, #0
 80005fa:	613b      	str	r3, [r7, #16]
	  filter.FilterBank           = 14;                        // フィルターバンクNo
 80005fc:	230e      	movs	r3, #14
 80005fe:	617b      	str	r3, [r7, #20]
	  filter.FilterMode           = CAN_FILTERMODE_IDMASK;    // フィルターモード
 8000600:	2300      	movs	r3, #0
 8000602:	61bb      	str	r3, [r7, #24]
	  filter.SlaveStartFilterBank = 14;                       // スレーブCANの開始フィルターバンクNo
 8000604:	230e      	movs	r3, #14
 8000606:	627b      	str	r3, [r7, #36]	; 0x24
	  filter.FilterActivation     = ENABLE;                   // フィルター無効／有効
 8000608:	2301      	movs	r3, #1
 800060a:	623b      	str	r3, [r7, #32]





HAL_CAN_ConfigFilter(&hcan2, &filter);
 800060c:	463b      	mov	r3, r7
 800060e:	4619      	mov	r1, r3
 8000610:	481d      	ldr	r0, [pc, #116]	; (8000688 <main+0xd4>)
 8000612:	f001 f937 	bl	8001884 <HAL_CAN_ConfigFilter>
HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000616:	2100      	movs	r1, #0
 8000618:	481c      	ldr	r0, [pc, #112]	; (800068c <main+0xd8>)
 800061a:	f002 ff5f 	bl	80034dc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800061e:	2104      	movs	r1, #4
 8000620:	481a      	ldr	r0, [pc, #104]	; (800068c <main+0xd8>)
 8000622:	f002 ff5b 	bl	80034dc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000626:	2108      	movs	r1, #8
 8000628:	4818      	ldr	r0, [pc, #96]	; (800068c <main+0xd8>)
 800062a:	f002 ff57 	bl	80034dc <HAL_TIM_PWM_Start>
  HAL_CAN_Start(&hcan2);
 800062e:	4816      	ldr	r0, [pc, #88]	; (8000688 <main+0xd4>)
 8000630:	f001 fa08 	bl	8001a44 <HAL_CAN_Start>
  // 割り込み有効
  HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000634:	2102      	movs	r1, #2
 8000636:	4814      	ldr	r0, [pc, #80]	; (8000688 <main+0xd4>)
 8000638:	f001 fb5a 	bl	8001cf0 <HAL_CAN_ActivateNotification>
  printf("start\n");
 800063c:	4814      	ldr	r0, [pc, #80]	; (8000690 <main+0xdc>)
 800063e:	f004 f8f7 	bl	8004830 <puts>


  HAL_GPIO_WritePin(GPIOC,PSB1_Pin,GPIO_PIN_SET);
 8000642:	2201      	movs	r2, #1
 8000644:	2102      	movs	r1, #2
 8000646:	4813      	ldr	r0, [pc, #76]	; (8000694 <main+0xe0>)
 8000648:	f002 f84e 	bl	80026e8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB,BRK1_Pin,GPIO_PIN_RESET);
 800064c:	2200      	movs	r2, #0
 800064e:	2101      	movs	r1, #1
 8000650:	4811      	ldr	r0, [pc, #68]	; (8000698 <main+0xe4>)
 8000652:	f002 f849 	bl	80026e8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC,PSB2_Pin,GPIO_PIN_SET);
 8000656:	2201      	movs	r2, #1
 8000658:	2101      	movs	r1, #1
 800065a:	480e      	ldr	r0, [pc, #56]	; (8000694 <main+0xe0>)
 800065c:	f002 f844 	bl	80026e8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC,BRK2_Pin,GPIO_PIN_RESET);
 8000660:	2200      	movs	r2, #0
 8000662:	2104      	movs	r1, #4
 8000664:	480b      	ldr	r0, [pc, #44]	; (8000694 <main+0xe0>)
 8000666:	f002 f83f 	bl	80026e8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC,PSB3_Pin,GPIO_PIN_SET);
 800066a:	2201      	movs	r2, #1
 800066c:	2110      	movs	r1, #16
 800066e:	4809      	ldr	r0, [pc, #36]	; (8000694 <main+0xe0>)
 8000670:	f002 f83a 	bl	80026e8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB,BRK3_Pin,GPIO_PIN_RESET);
 8000674:	2200      	movs	r2, #0
 8000676:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800067a:	4807      	ldr	r0, [pc, #28]	; (8000698 <main+0xe4>)
 800067c:	f002 f834 	bl	80026e8 <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000680:	e7fe      	b.n	8000680 <main+0xcc>
 8000682:	bf00      	nop
 8000684:	2000000c 	.word	0x2000000c
 8000688:	2000008c 	.word	0x2000008c
 800068c:	200000b4 	.word	0x200000b4
 8000690:	080058f0 	.word	0x080058f0
 8000694:	40020800 	.word	0x40020800
 8000698:	40020400 	.word	0x40020400

0800069c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b094      	sub	sp, #80	; 0x50
 80006a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a2:	f107 031c 	add.w	r3, r7, #28
 80006a6:	2234      	movs	r2, #52	; 0x34
 80006a8:	2100      	movs	r1, #0
 80006aa:	4618      	mov	r0, r3
 80006ac:	f004 f832 	bl	8004714 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b0:	f107 0308 	add.w	r3, r7, #8
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	60da      	str	r2, [r3, #12]
 80006be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c0:	2300      	movs	r3, #0
 80006c2:	607b      	str	r3, [r7, #4]
 80006c4:	4b34      	ldr	r3, [pc, #208]	; (8000798 <_Z18SystemClock_Configv+0xfc>)
 80006c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c8:	4a33      	ldr	r2, [pc, #204]	; (8000798 <_Z18SystemClock_Configv+0xfc>)
 80006ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ce:	6413      	str	r3, [r2, #64]	; 0x40
 80006d0:	4b31      	ldr	r3, [pc, #196]	; (8000798 <_Z18SystemClock_Configv+0xfc>)
 80006d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d8:	607b      	str	r3, [r7, #4]
 80006da:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006dc:	2300      	movs	r3, #0
 80006de:	603b      	str	r3, [r7, #0]
 80006e0:	4b2e      	ldr	r3, [pc, #184]	; (800079c <_Z18SystemClock_Configv+0x100>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4a2d      	ldr	r2, [pc, #180]	; (800079c <_Z18SystemClock_Configv+0x100>)
 80006e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006ea:	6013      	str	r3, [r2, #0]
 80006ec:	4b2b      	ldr	r3, [pc, #172]	; (800079c <_Z18SystemClock_Configv+0x100>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006f4:	603b      	str	r3, [r7, #0]
 80006f6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006f8:	2302      	movs	r3, #2
 80006fa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006fc:	2301      	movs	r3, #1
 80006fe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000700:	2310      	movs	r3, #16
 8000702:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000704:	2302      	movs	r3, #2
 8000706:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000708:	2300      	movs	r3, #0
 800070a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800070c:	2308      	movs	r3, #8
 800070e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000710:	23b4      	movs	r3, #180	; 0xb4
 8000712:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000714:	2302      	movs	r3, #2
 8000716:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000718:	2302      	movs	r3, #2
 800071a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800071c:	2302      	movs	r3, #2
 800071e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000720:	f107 031c 	add.w	r3, r7, #28
 8000724:	4618      	mov	r0, r3
 8000726:	f002 fb93 	bl	8002e50 <HAL_RCC_OscConfig>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	bf14      	ite	ne
 8000730:	2301      	movne	r3, #1
 8000732:	2300      	moveq	r3, #0
 8000734:	b2db      	uxtb	r3, r3
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 800073a:	f000 fc73 	bl	8001024 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800073e:	f001 ffed 	bl	800271c <HAL_PWREx_EnableOverDrive>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	bf14      	ite	ne
 8000748:	2301      	movne	r3, #1
 800074a:	2300      	moveq	r3, #0
 800074c:	b2db      	uxtb	r3, r3
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <_Z18SystemClock_Configv+0xba>
  {
    Error_Handler();
 8000752:	f000 fc67 	bl	8001024 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000756:	230f      	movs	r3, #15
 8000758:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800075a:	2302      	movs	r3, #2
 800075c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800075e:	2300      	movs	r3, #0
 8000760:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000762:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000766:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000768:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800076c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800076e:	f107 0308 	add.w	r3, r7, #8
 8000772:	2105      	movs	r1, #5
 8000774:	4618      	mov	r0, r3
 8000776:	f002 f821 	bl	80027bc <HAL_RCC_ClockConfig>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	bf14      	ite	ne
 8000780:	2301      	movne	r3, #1
 8000782:	2300      	moveq	r3, #0
 8000784:	b2db      	uxtb	r3, r3
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <_Z18SystemClock_Configv+0xf2>
  {
    Error_Handler();
 800078a:	f000 fc4b 	bl	8001024 <Error_Handler>
  }
}
 800078e:	bf00      	nop
 8000790:	3750      	adds	r7, #80	; 0x50
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	40023800 	.word	0x40023800
 800079c:	40007000 	.word	0x40007000

080007a0 <_ZL12MX_CAN2_Initv>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80007a4:	4b1a      	ldr	r3, [pc, #104]	; (8000810 <_ZL12MX_CAN2_Initv+0x70>)
 80007a6:	4a1b      	ldr	r2, [pc, #108]	; (8000814 <_ZL12MX_CAN2_Initv+0x74>)
 80007a8:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 9;
 80007aa:	4b19      	ldr	r3, [pc, #100]	; (8000810 <_ZL12MX_CAN2_Initv+0x70>)
 80007ac:	2209      	movs	r2, #9
 80007ae:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80007b0:	4b17      	ldr	r3, [pc, #92]	; (8000810 <_ZL12MX_CAN2_Initv+0x70>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_4TQ;
 80007b6:	4b16      	ldr	r3, [pc, #88]	; (8000810 <_ZL12MX_CAN2_Initv+0x70>)
 80007b8:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 80007bc:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_4TQ;
 80007be:	4b14      	ldr	r3, [pc, #80]	; (8000810 <_ZL12MX_CAN2_Initv+0x70>)
 80007c0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80007c4:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_5TQ;
 80007c6:	4b12      	ldr	r3, [pc, #72]	; (8000810 <_ZL12MX_CAN2_Initv+0x70>)
 80007c8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80007cc:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80007ce:	4b10      	ldr	r3, [pc, #64]	; (8000810 <_ZL12MX_CAN2_Initv+0x70>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80007d4:	4b0e      	ldr	r3, [pc, #56]	; (8000810 <_ZL12MX_CAN2_Initv+0x70>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80007da:	4b0d      	ldr	r3, [pc, #52]	; (8000810 <_ZL12MX_CAN2_Initv+0x70>)
 80007dc:	2200      	movs	r2, #0
 80007de:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80007e0:	4b0b      	ldr	r3, [pc, #44]	; (8000810 <_ZL12MX_CAN2_Initv+0x70>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80007e6:	4b0a      	ldr	r3, [pc, #40]	; (8000810 <_ZL12MX_CAN2_Initv+0x70>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80007ec:	4b08      	ldr	r3, [pc, #32]	; (8000810 <_ZL12MX_CAN2_Initv+0x70>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80007f2:	4807      	ldr	r0, [pc, #28]	; (8000810 <_ZL12MX_CAN2_Initv+0x70>)
 80007f4:	f000 ff4a 	bl	800168c <HAL_CAN_Init>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	bf14      	ite	ne
 80007fe:	2301      	movne	r3, #1
 8000800:	2300      	moveq	r3, #0
 8000802:	b2db      	uxtb	r3, r3
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <_ZL12MX_CAN2_Initv+0x6c>
  {
    Error_Handler();
 8000808:	f000 fc0c 	bl	8001024 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 800080c:	bf00      	nop
 800080e:	bd80      	pop	{r7, pc}
 8000810:	2000008c 	.word	0x2000008c
 8000814:	40006800 	.word	0x40006800

08000818 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b096      	sub	sp, #88	; 0x58
 800081c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800081e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
 8000826:	605a      	str	r2, [r3, #4]
 8000828:	609a      	str	r2, [r3, #8]
 800082a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800082c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000836:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	605a      	str	r2, [r3, #4]
 8000840:	609a      	str	r2, [r3, #8]
 8000842:	60da      	str	r2, [r3, #12]
 8000844:	611a      	str	r2, [r3, #16]
 8000846:	615a      	str	r2, [r3, #20]
 8000848:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800084a:	1d3b      	adds	r3, r7, #4
 800084c:	2220      	movs	r2, #32
 800084e:	2100      	movs	r1, #0
 8000850:	4618      	mov	r0, r3
 8000852:	f003 ff5f 	bl	8004714 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000856:	4b5e      	ldr	r3, [pc, #376]	; (80009d0 <_ZL12MX_TIM1_Initv+0x1b8>)
 8000858:	4a5e      	ldr	r2, [pc, #376]	; (80009d4 <_ZL12MX_TIM1_Initv+0x1bc>)
 800085a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800085c:	4b5c      	ldr	r3, [pc, #368]	; (80009d0 <_ZL12MX_TIM1_Initv+0x1b8>)
 800085e:	2200      	movs	r2, #0
 8000860:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000862:	4b5b      	ldr	r3, [pc, #364]	; (80009d0 <_ZL12MX_TIM1_Initv+0x1b8>)
 8000864:	2200      	movs	r2, #0
 8000866:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000868:	4b59      	ldr	r3, [pc, #356]	; (80009d0 <_ZL12MX_TIM1_Initv+0x1b8>)
 800086a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800086e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000870:	4b57      	ldr	r3, [pc, #348]	; (80009d0 <_ZL12MX_TIM1_Initv+0x1b8>)
 8000872:	2200      	movs	r2, #0
 8000874:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000876:	4b56      	ldr	r3, [pc, #344]	; (80009d0 <_ZL12MX_TIM1_Initv+0x1b8>)
 8000878:	2200      	movs	r2, #0
 800087a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800087c:	4b54      	ldr	r3, [pc, #336]	; (80009d0 <_ZL12MX_TIM1_Initv+0x1b8>)
 800087e:	2200      	movs	r2, #0
 8000880:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000882:	4853      	ldr	r0, [pc, #332]	; (80009d0 <_ZL12MX_TIM1_Initv+0x1b8>)
 8000884:	f002 fd82 	bl	800338c <HAL_TIM_Base_Init>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	bf14      	ite	ne
 800088e:	2301      	movne	r3, #1
 8000890:	2300      	moveq	r3, #0
 8000892:	b2db      	uxtb	r3, r3
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <_ZL12MX_TIM1_Initv+0x84>
  {
    Error_Handler();
 8000898:	f000 fbc4 	bl	8001024 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800089c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008a0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80008a2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80008a6:	4619      	mov	r1, r3
 80008a8:	4849      	ldr	r0, [pc, #292]	; (80009d0 <_ZL12MX_TIM1_Initv+0x1b8>)
 80008aa:	f002 ffa1 	bl	80037f0 <HAL_TIM_ConfigClockSource>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	bf14      	ite	ne
 80008b4:	2301      	movne	r3, #1
 80008b6:	2300      	moveq	r3, #0
 80008b8:	b2db      	uxtb	r3, r3
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <_ZL12MX_TIM1_Initv+0xaa>
  {
    Error_Handler();
 80008be:	f000 fbb1 	bl	8001024 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80008c2:	4843      	ldr	r0, [pc, #268]	; (80009d0 <_ZL12MX_TIM1_Initv+0x1b8>)
 80008c4:	f002 fdb1 	bl	800342a <HAL_TIM_PWM_Init>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	bf14      	ite	ne
 80008ce:	2301      	movne	r3, #1
 80008d0:	2300      	moveq	r3, #0
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <_ZL12MX_TIM1_Initv+0xc4>
  {
    Error_Handler();
 80008d8:	f000 fba4 	bl	8001024 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008dc:	2300      	movs	r3, #0
 80008de:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008e0:	2300      	movs	r3, #0
 80008e2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008e4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80008e8:	4619      	mov	r1, r3
 80008ea:	4839      	ldr	r0, [pc, #228]	; (80009d0 <_ZL12MX_TIM1_Initv+0x1b8>)
 80008ec:	f003 fb58 	bl	8003fa0 <HAL_TIMEx_MasterConfigSynchronization>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	bf14      	ite	ne
 80008f6:	2301      	movne	r3, #1
 80008f8:	2300      	moveq	r3, #0
 80008fa:	b2db      	uxtb	r3, r3
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <_ZL12MX_TIM1_Initv+0xec>
  {
    Error_Handler();
 8000900:	f000 fb90 	bl	8001024 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000904:	2360      	movs	r3, #96	; 0x60
 8000906:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000908:	2300      	movs	r3, #0
 800090a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800090c:	2300      	movs	r3, #0
 800090e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000910:	2300      	movs	r3, #0
 8000912:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000914:	2300      	movs	r3, #0
 8000916:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000918:	2300      	movs	r3, #0
 800091a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800091c:	2300      	movs	r3, #0
 800091e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000920:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000924:	2200      	movs	r2, #0
 8000926:	4619      	mov	r1, r3
 8000928:	4829      	ldr	r0, [pc, #164]	; (80009d0 <_ZL12MX_TIM1_Initv+0x1b8>)
 800092a:	f002 fe9f 	bl	800366c <HAL_TIM_PWM_ConfigChannel>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	bf14      	ite	ne
 8000934:	2301      	movne	r3, #1
 8000936:	2300      	moveq	r3, #0
 8000938:	b2db      	uxtb	r3, r3
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <_ZL12MX_TIM1_Initv+0x12a>
  {
    Error_Handler();
 800093e:	f000 fb71 	bl	8001024 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000942:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000946:	2204      	movs	r2, #4
 8000948:	4619      	mov	r1, r3
 800094a:	4821      	ldr	r0, [pc, #132]	; (80009d0 <_ZL12MX_TIM1_Initv+0x1b8>)
 800094c:	f002 fe8e 	bl	800366c <HAL_TIM_PWM_ConfigChannel>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	bf14      	ite	ne
 8000956:	2301      	movne	r3, #1
 8000958:	2300      	moveq	r3, #0
 800095a:	b2db      	uxtb	r3, r3
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <_ZL12MX_TIM1_Initv+0x14c>
  {
    Error_Handler();
 8000960:	f000 fb60 	bl	8001024 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000964:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000968:	2208      	movs	r2, #8
 800096a:	4619      	mov	r1, r3
 800096c:	4818      	ldr	r0, [pc, #96]	; (80009d0 <_ZL12MX_TIM1_Initv+0x1b8>)
 800096e:	f002 fe7d 	bl	800366c <HAL_TIM_PWM_ConfigChannel>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	bf14      	ite	ne
 8000978:	2301      	movne	r3, #1
 800097a:	2300      	moveq	r3, #0
 800097c:	b2db      	uxtb	r3, r3
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <_ZL12MX_TIM1_Initv+0x16e>
  {
    Error_Handler();
 8000982:	f000 fb4f 	bl	8001024 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000986:	2300      	movs	r3, #0
 8000988:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800098a:	2300      	movs	r3, #0
 800098c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800098e:	2300      	movs	r3, #0
 8000990:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000992:	2300      	movs	r3, #0
 8000994:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000996:	2300      	movs	r3, #0
 8000998:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800099a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800099e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80009a0:	2300      	movs	r3, #0
 80009a2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80009a4:	1d3b      	adds	r3, r7, #4
 80009a6:	4619      	mov	r1, r3
 80009a8:	4809      	ldr	r0, [pc, #36]	; (80009d0 <_ZL12MX_TIM1_Initv+0x1b8>)
 80009aa:	f003 fb75 	bl	8004098 <HAL_TIMEx_ConfigBreakDeadTime>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	bf14      	ite	ne
 80009b4:	2301      	movne	r3, #1
 80009b6:	2300      	moveq	r3, #0
 80009b8:	b2db      	uxtb	r3, r3
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <_ZL12MX_TIM1_Initv+0x1aa>
  {
    Error_Handler();
 80009be:	f000 fb31 	bl	8001024 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80009c2:	4803      	ldr	r0, [pc, #12]	; (80009d0 <_ZL12MX_TIM1_Initv+0x1b8>)
 80009c4:	f000 fc1e 	bl	8001204 <HAL_TIM_MspPostInit>

}
 80009c8:	bf00      	nop
 80009ca:	3758      	adds	r7, #88	; 0x58
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	200000b4 	.word	0x200000b4
 80009d4:	40010000 	.word	0x40010000

080009d8 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b08e      	sub	sp, #56	; 0x38
 80009dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009e2:	2200      	movs	r2, #0
 80009e4:	601a      	str	r2, [r3, #0]
 80009e6:	605a      	str	r2, [r3, #4]
 80009e8:	609a      	str	r2, [r3, #8]
 80009ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009ec:	f107 0320 	add.w	r3, r7, #32
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009f6:	1d3b      	adds	r3, r7, #4
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	609a      	str	r2, [r3, #8]
 8000a00:	60da      	str	r2, [r3, #12]
 8000a02:	611a      	str	r2, [r3, #16]
 8000a04:	615a      	str	r2, [r3, #20]
 8000a06:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a08:	4b49      	ldr	r3, [pc, #292]	; (8000b30 <_ZL12MX_TIM2_Initv+0x158>)
 8000a0a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a0e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000a10:	4b47      	ldr	r3, [pc, #284]	; (8000b30 <_ZL12MX_TIM2_Initv+0x158>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a16:	4b46      	ldr	r3, [pc, #280]	; (8000b30 <_ZL12MX_TIM2_Initv+0x158>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000a1c:	4b44      	ldr	r3, [pc, #272]	; (8000b30 <_ZL12MX_TIM2_Initv+0x158>)
 8000a1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a22:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a24:	4b42      	ldr	r3, [pc, #264]	; (8000b30 <_ZL12MX_TIM2_Initv+0x158>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a2a:	4b41      	ldr	r3, [pc, #260]	; (8000b30 <_ZL12MX_TIM2_Initv+0x158>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a30:	483f      	ldr	r0, [pc, #252]	; (8000b30 <_ZL12MX_TIM2_Initv+0x158>)
 8000a32:	f002 fcab 	bl	800338c <HAL_TIM_Base_Init>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	bf14      	ite	ne
 8000a3c:	2301      	movne	r3, #1
 8000a3e:	2300      	moveq	r3, #0
 8000a40:	b2db      	uxtb	r3, r3
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <_ZL12MX_TIM2_Initv+0x72>
  {
    Error_Handler();
 8000a46:	f000 faed 	bl	8001024 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a4e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a50:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a54:	4619      	mov	r1, r3
 8000a56:	4836      	ldr	r0, [pc, #216]	; (8000b30 <_ZL12MX_TIM2_Initv+0x158>)
 8000a58:	f002 feca 	bl	80037f0 <HAL_TIM_ConfigClockSource>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	bf14      	ite	ne
 8000a62:	2301      	movne	r3, #1
 8000a64:	2300      	moveq	r3, #0
 8000a66:	b2db      	uxtb	r3, r3
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <_ZL12MX_TIM2_Initv+0x98>
  {
    Error_Handler();
 8000a6c:	f000 fada 	bl	8001024 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000a70:	482f      	ldr	r0, [pc, #188]	; (8000b30 <_ZL12MX_TIM2_Initv+0x158>)
 8000a72:	f002 fcda 	bl	800342a <HAL_TIM_PWM_Init>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	bf14      	ite	ne
 8000a7c:	2301      	movne	r3, #1
 8000a7e:	2300      	moveq	r3, #0
 8000a80:	b2db      	uxtb	r3, r3
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <_ZL12MX_TIM2_Initv+0xb2>
  {
    Error_Handler();
 8000a86:	f000 facd 	bl	8001024 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a92:	f107 0320 	add.w	r3, r7, #32
 8000a96:	4619      	mov	r1, r3
 8000a98:	4825      	ldr	r0, [pc, #148]	; (8000b30 <_ZL12MX_TIM2_Initv+0x158>)
 8000a9a:	f003 fa81 	bl	8003fa0 <HAL_TIMEx_MasterConfigSynchronization>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	bf14      	ite	ne
 8000aa4:	2301      	movne	r3, #1
 8000aa6:	2300      	moveq	r3, #0
 8000aa8:	b2db      	uxtb	r3, r3
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <_ZL12MX_TIM2_Initv+0xda>
  {
    Error_Handler();
 8000aae:	f000 fab9 	bl	8001024 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ab2:	2360      	movs	r3, #96	; 0x60
 8000ab4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000aba:	2300      	movs	r3, #0
 8000abc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ac2:	1d3b      	adds	r3, r7, #4
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4819      	ldr	r0, [pc, #100]	; (8000b30 <_ZL12MX_TIM2_Initv+0x158>)
 8000aca:	f002 fdcf 	bl	800366c <HAL_TIM_PWM_ConfigChannel>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	bf14      	ite	ne
 8000ad4:	2301      	movne	r3, #1
 8000ad6:	2300      	moveq	r3, #0
 8000ad8:	b2db      	uxtb	r3, r3
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <_ZL12MX_TIM2_Initv+0x10a>
  {
    Error_Handler();
 8000ade:	f000 faa1 	bl	8001024 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ae2:	1d3b      	adds	r3, r7, #4
 8000ae4:	2204      	movs	r2, #4
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4811      	ldr	r0, [pc, #68]	; (8000b30 <_ZL12MX_TIM2_Initv+0x158>)
 8000aea:	f002 fdbf 	bl	800366c <HAL_TIM_PWM_ConfigChannel>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	bf14      	ite	ne
 8000af4:	2301      	movne	r3, #1
 8000af6:	2300      	moveq	r3, #0
 8000af8:	b2db      	uxtb	r3, r3
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <_ZL12MX_TIM2_Initv+0x12a>
  {
    Error_Handler();
 8000afe:	f000 fa91 	bl	8001024 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b02:	1d3b      	adds	r3, r7, #4
 8000b04:	2208      	movs	r2, #8
 8000b06:	4619      	mov	r1, r3
 8000b08:	4809      	ldr	r0, [pc, #36]	; (8000b30 <_ZL12MX_TIM2_Initv+0x158>)
 8000b0a:	f002 fdaf 	bl	800366c <HAL_TIM_PWM_ConfigChannel>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	bf14      	ite	ne
 8000b14:	2301      	movne	r3, #1
 8000b16:	2300      	moveq	r3, #0
 8000b18:	b2db      	uxtb	r3, r3
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <_ZL12MX_TIM2_Initv+0x14a>
  {
    Error_Handler();
 8000b1e:	f000 fa81 	bl	8001024 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000b22:	4803      	ldr	r0, [pc, #12]	; (8000b30 <_ZL12MX_TIM2_Initv+0x158>)
 8000b24:	f000 fb6e 	bl	8001204 <HAL_TIM_MspPostInit>

}
 8000b28:	bf00      	nop
 8000b2a:	3738      	adds	r7, #56	; 0x38
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	200000fc 	.word	0x200000fc

08000b34 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b38:	4b13      	ldr	r3, [pc, #76]	; (8000b88 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000b3a:	4a14      	ldr	r2, [pc, #80]	; (8000b8c <_ZL19MX_USART2_UART_Initv+0x58>)
 8000b3c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b3e:	4b12      	ldr	r3, [pc, #72]	; (8000b88 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000b40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b44:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b46:	4b10      	ldr	r3, [pc, #64]	; (8000b88 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b4c:	4b0e      	ldr	r3, [pc, #56]	; (8000b88 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b52:	4b0d      	ldr	r3, [pc, #52]	; (8000b88 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b58:	4b0b      	ldr	r3, [pc, #44]	; (8000b88 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000b5a:	220c      	movs	r2, #12
 8000b5c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b5e:	4b0a      	ldr	r3, [pc, #40]	; (8000b88 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b64:	4b08      	ldr	r3, [pc, #32]	; (8000b88 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b6a:	4807      	ldr	r0, [pc, #28]	; (8000b88 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000b6c:	f003 fae6 	bl	800413c <HAL_UART_Init>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	bf14      	ite	ne
 8000b76:	2301      	movne	r3, #1
 8000b78:	2300      	moveq	r3, #0
 8000b7a:	b2db      	uxtb	r3, r3
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8000b80:	f000 fa50 	bl	8001024 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b84:	bf00      	nop
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	20000144 	.word	0x20000144
 8000b8c:	40004400 	.word	0x40004400

08000b90 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b08a      	sub	sp, #40	; 0x28
 8000b94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b96:	f107 0314 	add.w	r3, r7, #20
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	601a      	str	r2, [r3, #0]
 8000b9e:	605a      	str	r2, [r3, #4]
 8000ba0:	609a      	str	r2, [r3, #8]
 8000ba2:	60da      	str	r2, [r3, #12]
 8000ba4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	613b      	str	r3, [r7, #16]
 8000baa:	4b53      	ldr	r3, [pc, #332]	; (8000cf8 <_ZL12MX_GPIO_Initv+0x168>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	4a52      	ldr	r2, [pc, #328]	; (8000cf8 <_ZL12MX_GPIO_Initv+0x168>)
 8000bb0:	f043 0304 	orr.w	r3, r3, #4
 8000bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb6:	4b50      	ldr	r3, [pc, #320]	; (8000cf8 <_ZL12MX_GPIO_Initv+0x168>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	f003 0304 	and.w	r3, r3, #4
 8000bbe:	613b      	str	r3, [r7, #16]
 8000bc0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	60fb      	str	r3, [r7, #12]
 8000bc6:	4b4c      	ldr	r3, [pc, #304]	; (8000cf8 <_ZL12MX_GPIO_Initv+0x168>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	4a4b      	ldr	r2, [pc, #300]	; (8000cf8 <_ZL12MX_GPIO_Initv+0x168>)
 8000bcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd2:	4b49      	ldr	r3, [pc, #292]	; (8000cf8 <_ZL12MX_GPIO_Initv+0x168>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	60bb      	str	r3, [r7, #8]
 8000be2:	4b45      	ldr	r3, [pc, #276]	; (8000cf8 <_ZL12MX_GPIO_Initv+0x168>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	4a44      	ldr	r2, [pc, #272]	; (8000cf8 <_ZL12MX_GPIO_Initv+0x168>)
 8000be8:	f043 0301 	orr.w	r3, r3, #1
 8000bec:	6313      	str	r3, [r2, #48]	; 0x30
 8000bee:	4b42      	ldr	r3, [pc, #264]	; (8000cf8 <_ZL12MX_GPIO_Initv+0x168>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	f003 0301 	and.w	r3, r3, #1
 8000bf6:	60bb      	str	r3, [r7, #8]
 8000bf8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	607b      	str	r3, [r7, #4]
 8000bfe:	4b3e      	ldr	r3, [pc, #248]	; (8000cf8 <_ZL12MX_GPIO_Initv+0x168>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	4a3d      	ldr	r2, [pc, #244]	; (8000cf8 <_ZL12MX_GPIO_Initv+0x168>)
 8000c04:	f043 0302 	orr.w	r3, r3, #2
 8000c08:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0a:	4b3b      	ldr	r3, [pc, #236]	; (8000cf8 <_ZL12MX_GPIO_Initv+0x168>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	f003 0302 	and.w	r3, r3, #2
 8000c12:	607b      	str	r3, [r7, #4]
 8000c14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	603b      	str	r3, [r7, #0]
 8000c1a:	4b37      	ldr	r3, [pc, #220]	; (8000cf8 <_ZL12MX_GPIO_Initv+0x168>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	4a36      	ldr	r2, [pc, #216]	; (8000cf8 <_ZL12MX_GPIO_Initv+0x168>)
 8000c20:	f043 0308 	orr.w	r3, r3, #8
 8000c24:	6313      	str	r3, [r2, #48]	; 0x30
 8000c26:	4b34      	ldr	r3, [pc, #208]	; (8000cf8 <_ZL12MX_GPIO_Initv+0x168>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	f003 0308 	and.w	r3, r3, #8
 8000c2e:	603b      	str	r3, [r7, #0]
 8000c30:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PSB2_Pin|PSB1_Pin|BRK2_Pin|BATT_Pin
 8000c32:	2200      	movs	r2, #0
 8000c34:	211f      	movs	r1, #31
 8000c36:	4831      	ldr	r0, [pc, #196]	; (8000cfc <_ZL12MX_GPIO_Initv+0x16c>)
 8000c38:	f001 fd56 	bl	80026e8 <HAL_GPIO_WritePin>
                          |PSB3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DIRECTION3_Pin|DIRECTION2_Pin|DIRECTION1_Pin|LED6_Pin
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	f64e 0113 	movw	r1, #59411	; 0xe813
 8000c42:	482f      	ldr	r0, [pc, #188]	; (8000d00 <_ZL12MX_GPIO_Initv+0x170>)
 8000c44:	f001 fd50 	bl	80026e8 <HAL_GPIO_WritePin>
                          |LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BRK1_Pin|PSB5_Pin|BRK5_Pin|PSB6_Pin
 8000c48:	2200      	movs	r2, #0
 8000c4a:	f24f 0107 	movw	r1, #61447	; 0xf007
 8000c4e:	482d      	ldr	r0, [pc, #180]	; (8000d04 <_ZL12MX_GPIO_Initv+0x174>)
 8000c50:	f001 fd4a 	bl	80026e8 <HAL_GPIO_WritePin>
                          |BRK3_Pin|PSB4_Pin|BRK4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIRECTION4_GPIO_Port, DIRECTION4_Pin, GPIO_PIN_RESET);
 8000c54:	2200      	movs	r2, #0
 8000c56:	2104      	movs	r1, #4
 8000c58:	482b      	ldr	r0, [pc, #172]	; (8000d08 <_ZL12MX_GPIO_Initv+0x178>)
 8000c5a:	f001 fd45 	bl	80026e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c5e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c64:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c6e:	f107 0314 	add.w	r3, r7, #20
 8000c72:	4619      	mov	r1, r3
 8000c74:	4821      	ldr	r0, [pc, #132]	; (8000cfc <_ZL12MX_GPIO_Initv+0x16c>)
 8000c76:	f001 fba3 	bl	80023c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PSB2_Pin PSB1_Pin BRK2_Pin BATT_Pin
                           PSB3_Pin */
  GPIO_InitStruct.Pin = PSB2_Pin|PSB1_Pin|BRK2_Pin|BATT_Pin
 8000c7a:	231f      	movs	r3, #31
 8000c7c:	617b      	str	r3, [r7, #20]
                          |PSB3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c82:	2300      	movs	r3, #0
 8000c84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c86:	2300      	movs	r3, #0
 8000c88:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c8a:	f107 0314 	add.w	r3, r7, #20
 8000c8e:	4619      	mov	r1, r3
 8000c90:	481a      	ldr	r0, [pc, #104]	; (8000cfc <_ZL12MX_GPIO_Initv+0x16c>)
 8000c92:	f001 fb95 	bl	80023c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIRECTION3_Pin DIRECTION2_Pin DIRECTION1_Pin LED6_Pin
                           LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = DIRECTION3_Pin|DIRECTION2_Pin|DIRECTION1_Pin|LED6_Pin
 8000c96:	f64e 0313 	movw	r3, #59411	; 0xe813
 8000c9a:	617b      	str	r3, [r7, #20]
                          |LED1_Pin|LED2_Pin|LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca8:	f107 0314 	add.w	r3, r7, #20
 8000cac:	4619      	mov	r1, r3
 8000cae:	4814      	ldr	r0, [pc, #80]	; (8000d00 <_ZL12MX_GPIO_Initv+0x170>)
 8000cb0:	f001 fb86 	bl	80023c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BRK1_Pin PSB5_Pin BRK5_Pin PSB6_Pin
                           BRK3_Pin PSB4_Pin BRK4_Pin */
  GPIO_InitStruct.Pin = BRK1_Pin|PSB5_Pin|BRK5_Pin|PSB6_Pin
 8000cb4:	f24f 0307 	movw	r3, #61447	; 0xf007
 8000cb8:	617b      	str	r3, [r7, #20]
                          |BRK3_Pin|PSB4_Pin|BRK4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc6:	f107 0314 	add.w	r3, r7, #20
 8000cca:	4619      	mov	r1, r3
 8000ccc:	480d      	ldr	r0, [pc, #52]	; (8000d04 <_ZL12MX_GPIO_Initv+0x174>)
 8000cce:	f001 fb77 	bl	80023c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIRECTION4_Pin */
  GPIO_InitStruct.Pin = DIRECTION4_Pin;
 8000cd2:	2304      	movs	r3, #4
 8000cd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIRECTION4_GPIO_Port, &GPIO_InitStruct);
 8000ce2:	f107 0314 	add.w	r3, r7, #20
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4807      	ldr	r0, [pc, #28]	; (8000d08 <_ZL12MX_GPIO_Initv+0x178>)
 8000cea:	f001 fb69 	bl	80023c0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cee:	bf00      	nop
 8000cf0:	3728      	adds	r7, #40	; 0x28
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	40023800 	.word	0x40023800
 8000cfc:	40020800 	.word	0x40020800
 8000d00:	40020000 	.word	0x40020000
 8000d04:	40020400 	.word	0x40020400
 8000d08:	40020c00 	.word	0x40020c00

08000d0c <HAL_CAN_RxFifo0MsgPendingCallback>:
uint32_t id;
uint32_t dlc;
std::array<int,8> data;

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d0e:	b097      	sub	sp, #92	; 0x5c
 8000d10:	af06      	add	r7, sp, #24
 8000d12:	6178      	str	r0, [r7, #20]
	  uint8_t RxData[8];
	  CAN_RxHeaderTypeDef RxHeader;

	  if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 8000d14:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000d18:	f107 021c 	add.w	r2, r7, #28
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	6978      	ldr	r0, [r7, #20]
 8000d20:	f000 fed4 	bl	8001acc <HAL_CAN_GetRxMessage>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	bf0c      	ite	eq
 8000d2a:	2301      	moveq	r3, #1
 8000d2c:	2300      	movne	r3, #0
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	f000 8163 	beq.w	8000ffc <HAL_CAN_RxFifo0MsgPendingCallback+0x2f0>
	  {
		  id = (RxHeader.IDE == CAN_ID_STD)? RxHeader.StdId : RxHeader.ExtId;     // ID
 8000d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d101      	bne.n	8000d40 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>
 8000d3c:	69fb      	ldr	r3, [r7, #28]
 8000d3e:	e000      	b.n	8000d42 <HAL_CAN_RxFifo0MsgPendingCallback+0x36>
 8000d40:	6a3b      	ldr	r3, [r7, #32]
 8000d42:	4ab0      	ldr	r2, [pc, #704]	; (8001004 <HAL_CAN_RxFifo0MsgPendingCallback+0x2f8>)
 8000d44:	6013      	str	r3, [r2, #0]
		  dlc = RxHeader.DLC;                                                     // DLC
 8000d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d48:	4aaf      	ldr	r2, [pc, #700]	; (8001008 <HAL_CAN_RxFifo0MsgPendingCallback+0x2fc>)
 8000d4a:	6013      	str	r3, [r2, #0]
		  data[0] = RxData[0] - 128;                                                    // Data
 8000d4c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8000d50:	461c      	mov	r4, r3
 8000d52:	2100      	movs	r1, #0
 8000d54:	48ad      	ldr	r0, [pc, #692]	; (800100c <HAL_CAN_RxFifo0MsgPendingCallback+0x300>)
 8000d56:	f000 f96a 	bl	800102e <_ZNSt5arrayIiLj8EEixEj>
 8000d5a:	4602      	mov	r2, r0
 8000d5c:	f1a4 0380 	sub.w	r3, r4, #128	; 0x80
 8000d60:	6013      	str	r3, [r2, #0]
		  data[1] = RxData[1] - 128;
 8000d62:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8000d66:	461c      	mov	r4, r3
 8000d68:	2101      	movs	r1, #1
 8000d6a:	48a8      	ldr	r0, [pc, #672]	; (800100c <HAL_CAN_RxFifo0MsgPendingCallback+0x300>)
 8000d6c:	f000 f95f 	bl	800102e <_ZNSt5arrayIiLj8EEixEj>
 8000d70:	4602      	mov	r2, r0
 8000d72:	f1a4 0380 	sub.w	r3, r4, #128	; 0x80
 8000d76:	6013      	str	r3, [r2, #0]
		  data[2] = RxData[2] - 128;
 8000d78:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8000d7c:	461c      	mov	r4, r3
 8000d7e:	2102      	movs	r1, #2
 8000d80:	48a2      	ldr	r0, [pc, #648]	; (800100c <HAL_CAN_RxFifo0MsgPendingCallback+0x300>)
 8000d82:	f000 f954 	bl	800102e <_ZNSt5arrayIiLj8EEixEj>
 8000d86:	4602      	mov	r2, r0
 8000d88:	f1a4 0380 	sub.w	r3, r4, #128	; 0x80
 8000d8c:	6013      	str	r3, [r2, #0]
		  data[3] = RxData[3] - 128;
 8000d8e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000d92:	461c      	mov	r4, r3
 8000d94:	2103      	movs	r1, #3
 8000d96:	489d      	ldr	r0, [pc, #628]	; (800100c <HAL_CAN_RxFifo0MsgPendingCallback+0x300>)
 8000d98:	f000 f949 	bl	800102e <_ZNSt5arrayIiLj8EEixEj>
 8000d9c:	4602      	mov	r2, r0
 8000d9e:	f1a4 0380 	sub.w	r3, r4, #128	; 0x80
 8000da2:	6013      	str	r3, [r2, #0]
		  data[4] = RxData[4];
 8000da4:	f897 403c 	ldrb.w	r4, [r7, #60]	; 0x3c
 8000da8:	2104      	movs	r1, #4
 8000daa:	4898      	ldr	r0, [pc, #608]	; (800100c <HAL_CAN_RxFifo0MsgPendingCallback+0x300>)
 8000dac:	f000 f93f 	bl	800102e <_ZNSt5arrayIiLj8EEixEj>
 8000db0:	4603      	mov	r3, r0
 8000db2:	4622      	mov	r2, r4
 8000db4:	601a      	str	r2, [r3, #0]
		  data[5] = RxData[5];
 8000db6:	f897 403d 	ldrb.w	r4, [r7, #61]	; 0x3d
 8000dba:	2105      	movs	r1, #5
 8000dbc:	4893      	ldr	r0, [pc, #588]	; (800100c <HAL_CAN_RxFifo0MsgPendingCallback+0x300>)
 8000dbe:	f000 f936 	bl	800102e <_ZNSt5arrayIiLj8EEixEj>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	4622      	mov	r2, r4
 8000dc6:	601a      	str	r2, [r3, #0]
		  data[6] = RxData[6];
 8000dc8:	f897 403e 	ldrb.w	r4, [r7, #62]	; 0x3e
 8000dcc:	2106      	movs	r1, #6
 8000dce:	488f      	ldr	r0, [pc, #572]	; (800100c <HAL_CAN_RxFifo0MsgPendingCallback+0x300>)
 8000dd0:	f000 f92d 	bl	800102e <_ZNSt5arrayIiLj8EEixEj>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	4622      	mov	r2, r4
 8000dd8:	601a      	str	r2, [r3, #0]
		  data[7] = RxData[7];
 8000dda:	f897 403f 	ldrb.w	r4, [r7, #63]	; 0x3f
 8000dde:	2107      	movs	r1, #7
 8000de0:	488a      	ldr	r0, [pc, #552]	; (800100c <HAL_CAN_RxFifo0MsgPendingCallback+0x300>)
 8000de2:	f000 f924 	bl	800102e <_ZNSt5arrayIiLj8EEixEj>
 8000de6:	4603      	mov	r3, r0
 8000de8:	4622      	mov	r2, r4
 8000dea:	601a      	str	r2, [r3, #0]
		  printf("%d %d %d %d %d %d %d %d\n",data[0],data[1],data[2],data[3],data[4],data[5],data[6],data[7]);
 8000dec:	2100      	movs	r1, #0
 8000dee:	4887      	ldr	r0, [pc, #540]	; (800100c <HAL_CAN_RxFifo0MsgPendingCallback+0x300>)
 8000df0:	f000 f91d 	bl	800102e <_ZNSt5arrayIiLj8EEixEj>
 8000df4:	4603      	mov	r3, r0
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	613b      	str	r3, [r7, #16]
 8000dfa:	2101      	movs	r1, #1
 8000dfc:	4883      	ldr	r0, [pc, #524]	; (800100c <HAL_CAN_RxFifo0MsgPendingCallback+0x300>)
 8000dfe:	f000 f916 	bl	800102e <_ZNSt5arrayIiLj8EEixEj>
 8000e02:	4603      	mov	r3, r0
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	60fa      	str	r2, [r7, #12]
 8000e08:	2102      	movs	r1, #2
 8000e0a:	4880      	ldr	r0, [pc, #512]	; (800100c <HAL_CAN_RxFifo0MsgPendingCallback+0x300>)
 8000e0c:	f000 f90f 	bl	800102e <_ZNSt5arrayIiLj8EEixEj>
 8000e10:	4603      	mov	r3, r0
 8000e12:	6818      	ldr	r0, [r3, #0]
 8000e14:	60b8      	str	r0, [r7, #8]
 8000e16:	2103      	movs	r1, #3
 8000e18:	487c      	ldr	r0, [pc, #496]	; (800100c <HAL_CAN_RxFifo0MsgPendingCallback+0x300>)
 8000e1a:	f000 f908 	bl	800102e <_ZNSt5arrayIiLj8EEixEj>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	681c      	ldr	r4, [r3, #0]
 8000e22:	2104      	movs	r1, #4
 8000e24:	4879      	ldr	r0, [pc, #484]	; (800100c <HAL_CAN_RxFifo0MsgPendingCallback+0x300>)
 8000e26:	f000 f902 	bl	800102e <_ZNSt5arrayIiLj8EEixEj>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	681d      	ldr	r5, [r3, #0]
 8000e2e:	2105      	movs	r1, #5
 8000e30:	4876      	ldr	r0, [pc, #472]	; (800100c <HAL_CAN_RxFifo0MsgPendingCallback+0x300>)
 8000e32:	f000 f8fc 	bl	800102e <_ZNSt5arrayIiLj8EEixEj>
 8000e36:	4603      	mov	r3, r0
 8000e38:	681e      	ldr	r6, [r3, #0]
 8000e3a:	2106      	movs	r1, #6
 8000e3c:	4873      	ldr	r0, [pc, #460]	; (800100c <HAL_CAN_RxFifo0MsgPendingCallback+0x300>)
 8000e3e:	f000 f8f6 	bl	800102e <_ZNSt5arrayIiLj8EEixEj>
 8000e42:	4603      	mov	r3, r0
 8000e44:	6819      	ldr	r1, [r3, #0]
 8000e46:	6079      	str	r1, [r7, #4]
 8000e48:	2107      	movs	r1, #7
 8000e4a:	4870      	ldr	r0, [pc, #448]	; (800100c <HAL_CAN_RxFifo0MsgPendingCallback+0x300>)
 8000e4c:	f000 f8ef 	bl	800102e <_ZNSt5arrayIiLj8EEixEj>
 8000e50:	4603      	mov	r3, r0
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	9304      	str	r3, [sp, #16]
 8000e56:	6879      	ldr	r1, [r7, #4]
 8000e58:	9103      	str	r1, [sp, #12]
 8000e5a:	9602      	str	r6, [sp, #8]
 8000e5c:	9501      	str	r5, [sp, #4]
 8000e5e:	9400      	str	r4, [sp, #0]
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	68fa      	ldr	r2, [r7, #12]
 8000e64:	6939      	ldr	r1, [r7, #16]
 8000e66:	486a      	ldr	r0, [pc, #424]	; (8001010 <HAL_CAN_RxFifo0MsgPendingCallback+0x304>)
 8000e68:	f003 fc5c 	bl	8004724 <iprintf>

		  if (data[0] == 0){
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	4867      	ldr	r0, [pc, #412]	; (800100c <HAL_CAN_RxFifo0MsgPendingCallback+0x300>)
 8000e70:	f000 f8dd 	bl	800102e <_ZNSt5arrayIiLj8EEixEj>
 8000e74:	4603      	mov	r3, r0
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	bf0c      	ite	eq
 8000e7c:	2301      	moveq	r3, #1
 8000e7e:	2300      	movne	r3, #0
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d005      	beq.n	8000e92 <HAL_CAN_RxFifo0MsgPendingCallback+0x186>
			  HAL_GPIO_WritePin(GPIOB,BRK1_Pin,GPIO_PIN_SET);
 8000e86:	2201      	movs	r2, #1
 8000e88:	2101      	movs	r1, #1
 8000e8a:	4862      	ldr	r0, [pc, #392]	; (8001014 <HAL_CAN_RxFifo0MsgPendingCallback+0x308>)
 8000e8c:	f001 fc2c 	bl	80026e8 <HAL_GPIO_WritePin>
 8000e90:	e004      	b.n	8000e9c <HAL_CAN_RxFifo0MsgPendingCallback+0x190>
		  }
		  else{
			  HAL_GPIO_WritePin(GPIOB,BRK1_Pin,GPIO_PIN_RESET);
 8000e92:	2200      	movs	r2, #0
 8000e94:	2101      	movs	r1, #1
 8000e96:	485f      	ldr	r0, [pc, #380]	; (8001014 <HAL_CAN_RxFifo0MsgPendingCallback+0x308>)
 8000e98:	f001 fc26 	bl	80026e8 <HAL_GPIO_WritePin>
		  }
		  if (data[1] == 0){
 8000e9c:	2101      	movs	r1, #1
 8000e9e:	485b      	ldr	r0, [pc, #364]	; (800100c <HAL_CAN_RxFifo0MsgPendingCallback+0x300>)
 8000ea0:	f000 f8c5 	bl	800102e <_ZNSt5arrayIiLj8EEixEj>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	bf0c      	ite	eq
 8000eac:	2301      	moveq	r3, #1
 8000eae:	2300      	movne	r3, #0
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d005      	beq.n	8000ec2 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b6>
			  HAL_GPIO_WritePin(GPIOC,BRK2_Pin,GPIO_PIN_SET);
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	2104      	movs	r1, #4
 8000eba:	4857      	ldr	r0, [pc, #348]	; (8001018 <HAL_CAN_RxFifo0MsgPendingCallback+0x30c>)
 8000ebc:	f001 fc14 	bl	80026e8 <HAL_GPIO_WritePin>
 8000ec0:	e004      	b.n	8000ecc <HAL_CAN_RxFifo0MsgPendingCallback+0x1c0>
		  }
		  else{
			  HAL_GPIO_WritePin(GPIOC,BRK2_Pin,GPIO_PIN_RESET);
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	2104      	movs	r1, #4
 8000ec6:	4854      	ldr	r0, [pc, #336]	; (8001018 <HAL_CAN_RxFifo0MsgPendingCallback+0x30c>)
 8000ec8:	f001 fc0e 	bl	80026e8 <HAL_GPIO_WritePin>
		  }
		  if (data[2] == 0){
 8000ecc:	2102      	movs	r1, #2
 8000ece:	484f      	ldr	r0, [pc, #316]	; (800100c <HAL_CAN_RxFifo0MsgPendingCallback+0x300>)
 8000ed0:	f000 f8ad 	bl	800102e <_ZNSt5arrayIiLj8EEixEj>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	bf0c      	ite	eq
 8000edc:	2301      	moveq	r3, #1
 8000ede:	2300      	movne	r3, #0
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d006      	beq.n	8000ef4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e8>
			  HAL_GPIO_WritePin(GPIOB,BRK3_Pin,GPIO_PIN_SET);
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000eec:	4849      	ldr	r0, [pc, #292]	; (8001014 <HAL_CAN_RxFifo0MsgPendingCallback+0x308>)
 8000eee:	f001 fbfb 	bl	80026e8 <HAL_GPIO_WritePin>
 8000ef2:	e005      	b.n	8000f00 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f4>
		  }
		  else{
			  HAL_GPIO_WritePin(GPIOB,BRK3_Pin,GPIO_PIN_RESET);
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000efa:	4846      	ldr	r0, [pc, #280]	; (8001014 <HAL_CAN_RxFifo0MsgPendingCallback+0x308>)
 8000efc:	f001 fbf4 	bl	80026e8 <HAL_GPIO_WritePin>
		  }


		  if (data[0] < 0){
 8000f00:	2100      	movs	r1, #0
 8000f02:	4842      	ldr	r0, [pc, #264]	; (800100c <HAL_CAN_RxFifo0MsgPendingCallback+0x300>)
 8000f04:	f000 f893 	bl	800102e <_ZNSt5arrayIiLj8EEixEj>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	0fdb      	lsrs	r3, r3, #31
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d00d      	beq.n	8000f30 <HAL_CAN_RxFifo0MsgPendingCallback+0x224>
			  HAL_GPIO_WritePin(GPIOA,DIRECTION1_Pin,GPIO_PIN_RESET);
 8000f14:	2200      	movs	r2, #0
 8000f16:	2110      	movs	r1, #16
 8000f18:	4840      	ldr	r0, [pc, #256]	; (800101c <HAL_CAN_RxFifo0MsgPendingCallback+0x310>)
 8000f1a:	f001 fbe5 	bl	80026e8 <HAL_GPIO_WritePin>
			  data[0] *= -1;
 8000f1e:	2100      	movs	r1, #0
 8000f20:	483a      	ldr	r0, [pc, #232]	; (800100c <HAL_CAN_RxFifo0MsgPendingCallback+0x300>)
 8000f22:	f000 f884 	bl	800102e <_ZNSt5arrayIiLj8EEixEj>
 8000f26:	4603      	mov	r3, r0
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	4252      	negs	r2, r2
 8000f2c:	601a      	str	r2, [r3, #0]
 8000f2e:	e004      	b.n	8000f3a <HAL_CAN_RxFifo0MsgPendingCallback+0x22e>
		  }
		  else{
			  HAL_GPIO_WritePin(GPIOA,DIRECTION1_Pin,GPIO_PIN_SET);
 8000f30:	2201      	movs	r2, #1
 8000f32:	2110      	movs	r1, #16
 8000f34:	4839      	ldr	r0, [pc, #228]	; (800101c <HAL_CAN_RxFifo0MsgPendingCallback+0x310>)
 8000f36:	f001 fbd7 	bl	80026e8 <HAL_GPIO_WritePin>
		  }

		  if (data[1] < 0){
 8000f3a:	2101      	movs	r1, #1
 8000f3c:	4833      	ldr	r0, [pc, #204]	; (800100c <HAL_CAN_RxFifo0MsgPendingCallback+0x300>)
 8000f3e:	f000 f876 	bl	800102e <_ZNSt5arrayIiLj8EEixEj>
 8000f42:	4603      	mov	r3, r0
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	0fdb      	lsrs	r3, r3, #31
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d00d      	beq.n	8000f6a <HAL_CAN_RxFifo0MsgPendingCallback+0x25e>
			  HAL_GPIO_WritePin(GPIOA,DIRECTION2_Pin,GPIO_PIN_RESET);
 8000f4e:	2200      	movs	r2, #0
 8000f50:	2102      	movs	r1, #2
 8000f52:	4832      	ldr	r0, [pc, #200]	; (800101c <HAL_CAN_RxFifo0MsgPendingCallback+0x310>)
 8000f54:	f001 fbc8 	bl	80026e8 <HAL_GPIO_WritePin>
			  data[1] *= -1;
 8000f58:	2101      	movs	r1, #1
 8000f5a:	482c      	ldr	r0, [pc, #176]	; (800100c <HAL_CAN_RxFifo0MsgPendingCallback+0x300>)
 8000f5c:	f000 f867 	bl	800102e <_ZNSt5arrayIiLj8EEixEj>
 8000f60:	4603      	mov	r3, r0
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	4252      	negs	r2, r2
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	e004      	b.n	8000f74 <HAL_CAN_RxFifo0MsgPendingCallback+0x268>
		  }
		  else{
			  HAL_GPIO_WritePin(GPIOA,DIRECTION2_Pin,GPIO_PIN_SET);
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	2102      	movs	r1, #2
 8000f6e:	482b      	ldr	r0, [pc, #172]	; (800101c <HAL_CAN_RxFifo0MsgPendingCallback+0x310>)
 8000f70:	f001 fbba 	bl	80026e8 <HAL_GPIO_WritePin>
		  }

		  if (data[2] < 0){
 8000f74:	2102      	movs	r1, #2
 8000f76:	4825      	ldr	r0, [pc, #148]	; (800100c <HAL_CAN_RxFifo0MsgPendingCallback+0x300>)
 8000f78:	f000 f859 	bl	800102e <_ZNSt5arrayIiLj8EEixEj>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	0fdb      	lsrs	r3, r3, #31
 8000f82:	b2db      	uxtb	r3, r3
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d00d      	beq.n	8000fa4 <HAL_CAN_RxFifo0MsgPendingCallback+0x298>
			  HAL_GPIO_WritePin(GPIOA,DIRECTION3_Pin,GPIO_PIN_RESET);
 8000f88:	2200      	movs	r2, #0
 8000f8a:	2101      	movs	r1, #1
 8000f8c:	4823      	ldr	r0, [pc, #140]	; (800101c <HAL_CAN_RxFifo0MsgPendingCallback+0x310>)
 8000f8e:	f001 fbab 	bl	80026e8 <HAL_GPIO_WritePin>
			  data[2] *= -1;
 8000f92:	2102      	movs	r1, #2
 8000f94:	481d      	ldr	r0, [pc, #116]	; (800100c <HAL_CAN_RxFifo0MsgPendingCallback+0x300>)
 8000f96:	f000 f84a 	bl	800102e <_ZNSt5arrayIiLj8EEixEj>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	4252      	negs	r2, r2
 8000fa0:	601a      	str	r2, [r3, #0]
 8000fa2:	e004      	b.n	8000fae <HAL_CAN_RxFifo0MsgPendingCallback+0x2a2>
		  }
		  else{
			  HAL_GPIO_WritePin(GPIOA,DIRECTION3_Pin,GPIO_PIN_SET);
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	2101      	movs	r1, #1
 8000fa8:	481c      	ldr	r0, [pc, #112]	; (800101c <HAL_CAN_RxFifo0MsgPendingCallback+0x310>)
 8000faa:	f001 fb9d 	bl	80026e8 <HAL_GPIO_WritePin>

		  }


		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,data[0] * 500);
 8000fae:	2100      	movs	r1, #0
 8000fb0:	4816      	ldr	r0, [pc, #88]	; (800100c <HAL_CAN_RxFifo0MsgPendingCallback+0x300>)
 8000fb2:	f000 f83c 	bl	800102e <_ZNSt5arrayIiLj8EEixEj>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000fbe:	fb03 f202 	mul.w	r2, r3, r2
 8000fc2:	4b17      	ldr	r3, [pc, #92]	; (8001020 <HAL_CAN_RxFifo0MsgPendingCallback+0x314>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	635a      	str	r2, [r3, #52]	; 0x34
		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,data[1] * 500);
 8000fc8:	2101      	movs	r1, #1
 8000fca:	4810      	ldr	r0, [pc, #64]	; (800100c <HAL_CAN_RxFifo0MsgPendingCallback+0x300>)
 8000fcc:	f000 f82f 	bl	800102e <_ZNSt5arrayIiLj8EEixEj>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000fd8:	fb03 f202 	mul.w	r2, r3, r2
 8000fdc:	4b10      	ldr	r3, [pc, #64]	; (8001020 <HAL_CAN_RxFifo0MsgPendingCallback+0x314>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	639a      	str	r2, [r3, #56]	; 0x38
		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,data[2] * 500);
 8000fe2:	2102      	movs	r1, #2
 8000fe4:	4809      	ldr	r0, [pc, #36]	; (800100c <HAL_CAN_RxFifo0MsgPendingCallback+0x300>)
 8000fe6:	f000 f822 	bl	800102e <_ZNSt5arrayIiLj8EEixEj>
 8000fea:	4603      	mov	r3, r0
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000ff2:	fb03 f202 	mul.w	r2, r3, r2
 8000ff6:	4b0a      	ldr	r3, [pc, #40]	; (8001020 <HAL_CAN_RxFifo0MsgPendingCallback+0x314>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	63da      	str	r2, [r3, #60]	; 0x3c


	  }
}
 8000ffc:	bf00      	nop
 8000ffe:	3744      	adds	r7, #68	; 0x44
 8001000:	46bd      	mov	sp, r7
 8001002:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001004:	20000188 	.word	0x20000188
 8001008:	2000018c 	.word	0x2000018c
 800100c:	20000190 	.word	0x20000190
 8001010:	080058f8 	.word	0x080058f8
 8001014:	40020400 	.word	0x40020400
 8001018:	40020800 	.word	0x40020800
 800101c:	40020000 	.word	0x40020000
 8001020:	200000b4 	.word	0x200000b4

08001024 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001028:	b672      	cpsid	i
}
 800102a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800102c:	e7fe      	b.n	800102c <Error_Handler+0x8>

0800102e <_ZNSt5arrayIiLj8EEixEj>:
      _GLIBCXX_NODISCARD constexpr bool
      empty() const noexcept { return size() == 0; }

      // Element access.
      _GLIBCXX17_CONSTEXPR reference
      operator[](size_type __n) noexcept
 800102e:	b580      	push	{r7, lr}
 8001030:	b082      	sub	sp, #8
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
 8001036:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6839      	ldr	r1, [r7, #0]
 800103c:	4618      	mov	r0, r3
 800103e:	f000 f805 	bl	800104c <_ZNSt14__array_traitsIiLj8EE6_S_refERA8_Kij>
 8001042:	4603      	mov	r3, r0
 8001044:	4618      	mov	r0, r3
 8001046:	3708      	adds	r7, #8
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}

0800104c <_ZNSt14__array_traitsIiLj8EE6_S_refERA8_Kij>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	687a      	ldr	r2, [r7, #4]
 800105c:	4413      	add	r3, r2
 800105e:	4618      	mov	r0, r3
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
	...

0800106c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001072:	2300      	movs	r3, #0
 8001074:	607b      	str	r3, [r7, #4]
 8001076:	4b10      	ldr	r3, [pc, #64]	; (80010b8 <HAL_MspInit+0x4c>)
 8001078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800107a:	4a0f      	ldr	r2, [pc, #60]	; (80010b8 <HAL_MspInit+0x4c>)
 800107c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001080:	6453      	str	r3, [r2, #68]	; 0x44
 8001082:	4b0d      	ldr	r3, [pc, #52]	; (80010b8 <HAL_MspInit+0x4c>)
 8001084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001086:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800108a:	607b      	str	r3, [r7, #4]
 800108c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800108e:	2300      	movs	r3, #0
 8001090:	603b      	str	r3, [r7, #0]
 8001092:	4b09      	ldr	r3, [pc, #36]	; (80010b8 <HAL_MspInit+0x4c>)
 8001094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001096:	4a08      	ldr	r2, [pc, #32]	; (80010b8 <HAL_MspInit+0x4c>)
 8001098:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800109c:	6413      	str	r3, [r2, #64]	; 0x40
 800109e:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <HAL_MspInit+0x4c>)
 80010a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010a6:	603b      	str	r3, [r7, #0]
 80010a8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80010aa:	2007      	movs	r0, #7
 80010ac:	f001 f946 	bl	800233c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010b0:	bf00      	nop
 80010b2:	3708      	adds	r7, #8
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	40023800 	.word	0x40023800

080010bc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b08a      	sub	sp, #40	; 0x28
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c4:	f107 0314 	add.w	r3, r7, #20
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	605a      	str	r2, [r3, #4]
 80010ce:	609a      	str	r2, [r3, #8]
 80010d0:	60da      	str	r2, [r3, #12]
 80010d2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN2)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a2c      	ldr	r2, [pc, #176]	; (800118c <HAL_CAN_MspInit+0xd0>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d151      	bne.n	8001182 <HAL_CAN_MspInit+0xc6>
  {
  /* USER CODE BEGIN CAN2_MspInit 0 */

  /* USER CODE END CAN2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN2_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	613b      	str	r3, [r7, #16]
 80010e2:	4b2b      	ldr	r3, [pc, #172]	; (8001190 <HAL_CAN_MspInit+0xd4>)
 80010e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e6:	4a2a      	ldr	r2, [pc, #168]	; (8001190 <HAL_CAN_MspInit+0xd4>)
 80010e8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80010ec:	6413      	str	r3, [r2, #64]	; 0x40
 80010ee:	4b28      	ldr	r3, [pc, #160]	; (8001190 <HAL_CAN_MspInit+0xd4>)
 80010f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80010f6:	613b      	str	r3, [r7, #16]
 80010f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_CAN1_CLK_ENABLE();
 80010fa:	2300      	movs	r3, #0
 80010fc:	60fb      	str	r3, [r7, #12]
 80010fe:	4b24      	ldr	r3, [pc, #144]	; (8001190 <HAL_CAN_MspInit+0xd4>)
 8001100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001102:	4a23      	ldr	r2, [pc, #140]	; (8001190 <HAL_CAN_MspInit+0xd4>)
 8001104:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001108:	6413      	str	r3, [r2, #64]	; 0x40
 800110a:	4b21      	ldr	r3, [pc, #132]	; (8001190 <HAL_CAN_MspInit+0xd4>)
 800110c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001112:	60fb      	str	r3, [r7, #12]
 8001114:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	60bb      	str	r3, [r7, #8]
 800111a:	4b1d      	ldr	r3, [pc, #116]	; (8001190 <HAL_CAN_MspInit+0xd4>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	4a1c      	ldr	r2, [pc, #112]	; (8001190 <HAL_CAN_MspInit+0xd4>)
 8001120:	f043 0302 	orr.w	r3, r3, #2
 8001124:	6313      	str	r3, [r2, #48]	; 0x30
 8001126:	4b1a      	ldr	r3, [pc, #104]	; (8001190 <HAL_CAN_MspInit+0xd4>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	f003 0302 	and.w	r3, r3, #2
 800112e:	60bb      	str	r3, [r7, #8]
 8001130:	68bb      	ldr	r3, [r7, #8]
    /**CAN2 GPIO Configuration
    PB5     ------> CAN2_RX
    PB6     ------> CAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001132:	2360      	movs	r3, #96	; 0x60
 8001134:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001136:	2302      	movs	r3, #2
 8001138:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113a:	2300      	movs	r3, #0
 800113c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800113e:	2303      	movs	r3, #3
 8001140:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001142:	2309      	movs	r3, #9
 8001144:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001146:	f107 0314 	add.w	r3, r7, #20
 800114a:	4619      	mov	r1, r3
 800114c:	4811      	ldr	r0, [pc, #68]	; (8001194 <HAL_CAN_MspInit+0xd8>)
 800114e:	f001 f937 	bl	80023c0 <HAL_GPIO_Init>

    /* CAN2 interrupt Init */
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 0, 0);
 8001152:	2200      	movs	r2, #0
 8001154:	2100      	movs	r1, #0
 8001156:	203f      	movs	r0, #63	; 0x3f
 8001158:	f001 f8fb 	bl	8002352 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 800115c:	203f      	movs	r0, #63	; 0x3f
 800115e:	f001 f914 	bl	800238a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 8001162:	2200      	movs	r2, #0
 8001164:	2100      	movs	r1, #0
 8001166:	2040      	movs	r0, #64	; 0x40
 8001168:	f001 f8f3 	bl	8002352 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 800116c:	2040      	movs	r0, #64	; 0x40
 800116e:	f001 f90c 	bl	800238a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 8001172:	2200      	movs	r2, #0
 8001174:	2100      	movs	r1, #0
 8001176:	2041      	movs	r0, #65	; 0x41
 8001178:	f001 f8eb 	bl	8002352 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 800117c:	2041      	movs	r0, #65	; 0x41
 800117e:	f001 f904 	bl	800238a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8001182:	bf00      	nop
 8001184:	3728      	adds	r7, #40	; 0x28
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	40006800 	.word	0x40006800
 8001190:	40023800 	.word	0x40023800
 8001194:	40020400 	.word	0x40020400

08001198 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001198:	b480      	push	{r7}
 800119a:	b085      	sub	sp, #20
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a15      	ldr	r2, [pc, #84]	; (80011fc <HAL_TIM_Base_MspInit+0x64>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d10e      	bne.n	80011c8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	60fb      	str	r3, [r7, #12]
 80011ae:	4b14      	ldr	r3, [pc, #80]	; (8001200 <HAL_TIM_Base_MspInit+0x68>)
 80011b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b2:	4a13      	ldr	r2, [pc, #76]	; (8001200 <HAL_TIM_Base_MspInit+0x68>)
 80011b4:	f043 0301 	orr.w	r3, r3, #1
 80011b8:	6453      	str	r3, [r2, #68]	; 0x44
 80011ba:	4b11      	ldr	r3, [pc, #68]	; (8001200 <HAL_TIM_Base_MspInit+0x68>)
 80011bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011be:	f003 0301 	and.w	r3, r3, #1
 80011c2:	60fb      	str	r3, [r7, #12]
 80011c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80011c6:	e012      	b.n	80011ee <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM2)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011d0:	d10d      	bne.n	80011ee <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	60bb      	str	r3, [r7, #8]
 80011d6:	4b0a      	ldr	r3, [pc, #40]	; (8001200 <HAL_TIM_Base_MspInit+0x68>)
 80011d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011da:	4a09      	ldr	r2, [pc, #36]	; (8001200 <HAL_TIM_Base_MspInit+0x68>)
 80011dc:	f043 0301 	orr.w	r3, r3, #1
 80011e0:	6413      	str	r3, [r2, #64]	; 0x40
 80011e2:	4b07      	ldr	r3, [pc, #28]	; (8001200 <HAL_TIM_Base_MspInit+0x68>)
 80011e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e6:	f003 0301 	and.w	r3, r3, #1
 80011ea:	60bb      	str	r3, [r7, #8]
 80011ec:	68bb      	ldr	r3, [r7, #8]
}
 80011ee:	bf00      	nop
 80011f0:	3714      	adds	r7, #20
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	40010000 	.word	0x40010000
 8001200:	40023800 	.word	0x40023800

08001204 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b08a      	sub	sp, #40	; 0x28
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800120c:	f107 0314 	add.w	r3, r7, #20
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	605a      	str	r2, [r3, #4]
 8001216:	609a      	str	r2, [r3, #8]
 8001218:	60da      	str	r2, [r3, #12]
 800121a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a25      	ldr	r2, [pc, #148]	; (80012b8 <HAL_TIM_MspPostInit+0xb4>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d11f      	bne.n	8001266 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	613b      	str	r3, [r7, #16]
 800122a:	4b24      	ldr	r3, [pc, #144]	; (80012bc <HAL_TIM_MspPostInit+0xb8>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	4a23      	ldr	r2, [pc, #140]	; (80012bc <HAL_TIM_MspPostInit+0xb8>)
 8001230:	f043 0301 	orr.w	r3, r3, #1
 8001234:	6313      	str	r3, [r2, #48]	; 0x30
 8001236:	4b21      	ldr	r3, [pc, #132]	; (80012bc <HAL_TIM_MspPostInit+0xb8>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	f003 0301 	and.w	r3, r3, #1
 800123e:	613b      	str	r3, [r7, #16]
 8001240:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = pwm1_Pin|pwm2_Pin|pwm3_Pin;
 8001242:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001246:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001248:	2302      	movs	r3, #2
 800124a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124c:	2300      	movs	r3, #0
 800124e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001250:	2300      	movs	r3, #0
 8001252:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001254:	2301      	movs	r3, #1
 8001256:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001258:	f107 0314 	add.w	r3, r7, #20
 800125c:	4619      	mov	r1, r3
 800125e:	4818      	ldr	r0, [pc, #96]	; (80012c0 <HAL_TIM_MspPostInit+0xbc>)
 8001260:	f001 f8ae 	bl	80023c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001264:	e023      	b.n	80012ae <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM2)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800126e:	d11e      	bne.n	80012ae <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001270:	2300      	movs	r3, #0
 8001272:	60fb      	str	r3, [r7, #12]
 8001274:	4b11      	ldr	r3, [pc, #68]	; (80012bc <HAL_TIM_MspPostInit+0xb8>)
 8001276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001278:	4a10      	ldr	r2, [pc, #64]	; (80012bc <HAL_TIM_MspPostInit+0xb8>)
 800127a:	f043 0302 	orr.w	r3, r3, #2
 800127e:	6313      	str	r3, [r2, #48]	; 0x30
 8001280:	4b0e      	ldr	r3, [pc, #56]	; (80012bc <HAL_TIM_MspPostInit+0xb8>)
 8001282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001284:	f003 0302 	and.w	r3, r3, #2
 8001288:	60fb      	str	r3, [r7, #12]
 800128a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = pwm6_Pin|pwm4_Pin|pwm5_Pin;
 800128c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001290:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001292:	2302      	movs	r3, #2
 8001294:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001296:	2300      	movs	r3, #0
 8001298:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129a:	2300      	movs	r3, #0
 800129c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800129e:	2301      	movs	r3, #1
 80012a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a2:	f107 0314 	add.w	r3, r7, #20
 80012a6:	4619      	mov	r1, r3
 80012a8:	4806      	ldr	r0, [pc, #24]	; (80012c4 <HAL_TIM_MspPostInit+0xc0>)
 80012aa:	f001 f889 	bl	80023c0 <HAL_GPIO_Init>
}
 80012ae:	bf00      	nop
 80012b0:	3728      	adds	r7, #40	; 0x28
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	40010000 	.word	0x40010000
 80012bc:	40023800 	.word	0x40023800
 80012c0:	40020000 	.word	0x40020000
 80012c4:	40020400 	.word	0x40020400

080012c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b08a      	sub	sp, #40	; 0x28
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d0:	f107 0314 	add.w	r3, r7, #20
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	605a      	str	r2, [r3, #4]
 80012da:	609a      	str	r2, [r3, #8]
 80012dc:	60da      	str	r2, [r3, #12]
 80012de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a19      	ldr	r2, [pc, #100]	; (800134c <HAL_UART_MspInit+0x84>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d12b      	bne.n	8001342 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012ea:	2300      	movs	r3, #0
 80012ec:	613b      	str	r3, [r7, #16]
 80012ee:	4b18      	ldr	r3, [pc, #96]	; (8001350 <HAL_UART_MspInit+0x88>)
 80012f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f2:	4a17      	ldr	r2, [pc, #92]	; (8001350 <HAL_UART_MspInit+0x88>)
 80012f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012f8:	6413      	str	r3, [r2, #64]	; 0x40
 80012fa:	4b15      	ldr	r3, [pc, #84]	; (8001350 <HAL_UART_MspInit+0x88>)
 80012fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001302:	613b      	str	r3, [r7, #16]
 8001304:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001306:	2300      	movs	r3, #0
 8001308:	60fb      	str	r3, [r7, #12]
 800130a:	4b11      	ldr	r3, [pc, #68]	; (8001350 <HAL_UART_MspInit+0x88>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130e:	4a10      	ldr	r2, [pc, #64]	; (8001350 <HAL_UART_MspInit+0x88>)
 8001310:	f043 0301 	orr.w	r3, r3, #1
 8001314:	6313      	str	r3, [r2, #48]	; 0x30
 8001316:	4b0e      	ldr	r3, [pc, #56]	; (8001350 <HAL_UART_MspInit+0x88>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	f003 0301 	and.w	r3, r3, #1
 800131e:	60fb      	str	r3, [r7, #12]
 8001320:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001322:	230c      	movs	r3, #12
 8001324:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001326:	2302      	movs	r3, #2
 8001328:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132a:	2300      	movs	r3, #0
 800132c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800132e:	2303      	movs	r3, #3
 8001330:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001332:	2307      	movs	r3, #7
 8001334:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001336:	f107 0314 	add.w	r3, r7, #20
 800133a:	4619      	mov	r1, r3
 800133c:	4805      	ldr	r0, [pc, #20]	; (8001354 <HAL_UART_MspInit+0x8c>)
 800133e:	f001 f83f 	bl	80023c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001342:	bf00      	nop
 8001344:	3728      	adds	r7, #40	; 0x28
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	40004400 	.word	0x40004400
 8001350:	40023800 	.word	0x40023800
 8001354:	40020000 	.word	0x40020000

08001358 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800135c:	e7fe      	b.n	800135c <NMI_Handler+0x4>

0800135e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800135e:	b480      	push	{r7}
 8001360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001362:	e7fe      	b.n	8001362 <HardFault_Handler+0x4>

08001364 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001368:	e7fe      	b.n	8001368 <MemManage_Handler+0x4>

0800136a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800136a:	b480      	push	{r7}
 800136c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800136e:	e7fe      	b.n	800136e <BusFault_Handler+0x4>

08001370 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001374:	e7fe      	b.n	8001374 <UsageFault_Handler+0x4>

08001376 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001376:	b480      	push	{r7}
 8001378:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800137a:	bf00      	nop
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr

08001384 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001388:	bf00      	nop
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr

08001392 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001392:	b480      	push	{r7}
 8001394:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001396:	bf00      	nop
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr

080013a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013a4:	f000 f952 	bl	800164c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013a8:	bf00      	nop
 80013aa:	bd80      	pop	{r7, pc}

080013ac <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupt.
  */
void CAN2_TX_IRQHandler(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80013b0:	4802      	ldr	r0, [pc, #8]	; (80013bc <CAN2_TX_IRQHandler+0x10>)
 80013b2:	f000 fcc3 	bl	8001d3c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 80013b6:	bf00      	nop
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	2000008c 	.word	0x2000008c

080013c0 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupt.
  */
void CAN2_RX0_IRQHandler(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80013c4:	4802      	ldr	r0, [pc, #8]	; (80013d0 <CAN2_RX0_IRQHandler+0x10>)
 80013c6:	f000 fcb9 	bl	8001d3c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 80013ca:	bf00      	nop
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	2000008c 	.word	0x2000008c

080013d4 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80013d8:	4802      	ldr	r0, [pc, #8]	; (80013e4 <CAN2_RX1_IRQHandler+0x10>)
 80013da:	f000 fcaf 	bl	8001d3c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	2000008c 	.word	0x2000008c

080013e8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b086      	sub	sp, #24
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	60f8      	str	r0, [r7, #12]
 80013f0:	60b9      	str	r1, [r7, #8]
 80013f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013f4:	2300      	movs	r3, #0
 80013f6:	617b      	str	r3, [r7, #20]
 80013f8:	e00a      	b.n	8001410 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013fa:	f3af 8000 	nop.w
 80013fe:	4601      	mov	r1, r0
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	1c5a      	adds	r2, r3, #1
 8001404:	60ba      	str	r2, [r7, #8]
 8001406:	b2ca      	uxtb	r2, r1
 8001408:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	3301      	adds	r3, #1
 800140e:	617b      	str	r3, [r7, #20]
 8001410:	697a      	ldr	r2, [r7, #20]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	429a      	cmp	r2, r3
 8001416:	dbf0      	blt.n	80013fa <_read+0x12>
  }

  return len;
 8001418:	687b      	ldr	r3, [r7, #4]
}
 800141a:	4618      	mov	r0, r3
 800141c:	3718      	adds	r7, #24
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}

08001422 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001422:	b580      	push	{r7, lr}
 8001424:	b086      	sub	sp, #24
 8001426:	af00      	add	r7, sp, #0
 8001428:	60f8      	str	r0, [r7, #12]
 800142a:	60b9      	str	r1, [r7, #8]
 800142c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800142e:	2300      	movs	r3, #0
 8001430:	617b      	str	r3, [r7, #20]
 8001432:	e009      	b.n	8001448 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	1c5a      	adds	r2, r3, #1
 8001438:	60ba      	str	r2, [r7, #8]
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	4618      	mov	r0, r3
 800143e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	3301      	adds	r3, #1
 8001446:	617b      	str	r3, [r7, #20]
 8001448:	697a      	ldr	r2, [r7, #20]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	429a      	cmp	r2, r3
 800144e:	dbf1      	blt.n	8001434 <_write+0x12>
  }
  return len;
 8001450:	687b      	ldr	r3, [r7, #4]
}
 8001452:	4618      	mov	r0, r3
 8001454:	3718      	adds	r7, #24
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}

0800145a <_close>:

int _close(int file)
{
 800145a:	b480      	push	{r7}
 800145c:	b083      	sub	sp, #12
 800145e:	af00      	add	r7, sp, #0
 8001460:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001462:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001466:	4618      	mov	r0, r3
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr

08001472 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001472:	b480      	push	{r7}
 8001474:	b083      	sub	sp, #12
 8001476:	af00      	add	r7, sp, #0
 8001478:	6078      	str	r0, [r7, #4]
 800147a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001482:	605a      	str	r2, [r3, #4]
  return 0;
 8001484:	2300      	movs	r3, #0
}
 8001486:	4618      	mov	r0, r3
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr

08001492 <_isatty>:

int _isatty(int file)
{
 8001492:	b480      	push	{r7}
 8001494:	b083      	sub	sp, #12
 8001496:	af00      	add	r7, sp, #0
 8001498:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800149a:	2301      	movs	r3, #1
}
 800149c:	4618      	mov	r0, r3
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr

080014a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b085      	sub	sp, #20
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	60f8      	str	r0, [r7, #12]
 80014b0:	60b9      	str	r1, [r7, #8]
 80014b2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80014b4:	2300      	movs	r3, #0
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3714      	adds	r7, #20
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
	...

080014c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b086      	sub	sp, #24
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014cc:	4a14      	ldr	r2, [pc, #80]	; (8001520 <_sbrk+0x5c>)
 80014ce:	4b15      	ldr	r3, [pc, #84]	; (8001524 <_sbrk+0x60>)
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014d8:	4b13      	ldr	r3, [pc, #76]	; (8001528 <_sbrk+0x64>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d102      	bne.n	80014e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014e0:	4b11      	ldr	r3, [pc, #68]	; (8001528 <_sbrk+0x64>)
 80014e2:	4a12      	ldr	r2, [pc, #72]	; (800152c <_sbrk+0x68>)
 80014e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014e6:	4b10      	ldr	r3, [pc, #64]	; (8001528 <_sbrk+0x64>)
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4413      	add	r3, r2
 80014ee:	693a      	ldr	r2, [r7, #16]
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d207      	bcs.n	8001504 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014f4:	f003 f8e4 	bl	80046c0 <__errno>
 80014f8:	4603      	mov	r3, r0
 80014fa:	220c      	movs	r2, #12
 80014fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001502:	e009      	b.n	8001518 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001504:	4b08      	ldr	r3, [pc, #32]	; (8001528 <_sbrk+0x64>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800150a:	4b07      	ldr	r3, [pc, #28]	; (8001528 <_sbrk+0x64>)
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4413      	add	r3, r2
 8001512:	4a05      	ldr	r2, [pc, #20]	; (8001528 <_sbrk+0x64>)
 8001514:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001516:	68fb      	ldr	r3, [r7, #12]
}
 8001518:	4618      	mov	r0, r3
 800151a:	3718      	adds	r7, #24
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	20020000 	.word	0x20020000
 8001524:	00000400 	.word	0x00000400
 8001528:	200001b0 	.word	0x200001b0
 800152c:	200001c8 	.word	0x200001c8

08001530 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001534:	4b06      	ldr	r3, [pc, #24]	; (8001550 <SystemInit+0x20>)
 8001536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800153a:	4a05      	ldr	r2, [pc, #20]	; (8001550 <SystemInit+0x20>)
 800153c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001540:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001544:	bf00      	nop
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	e000ed00 	.word	0xe000ed00

08001554 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001554:	f8df d034 	ldr.w	sp, [pc, #52]	; 800158c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001558:	480d      	ldr	r0, [pc, #52]	; (8001590 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800155a:	490e      	ldr	r1, [pc, #56]	; (8001594 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800155c:	4a0e      	ldr	r2, [pc, #56]	; (8001598 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800155e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001560:	e002      	b.n	8001568 <LoopCopyDataInit>

08001562 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001562:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001564:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001566:	3304      	adds	r3, #4

08001568 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001568:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800156a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800156c:	d3f9      	bcc.n	8001562 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800156e:	4a0b      	ldr	r2, [pc, #44]	; (800159c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001570:	4c0b      	ldr	r4, [pc, #44]	; (80015a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001572:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001574:	e001      	b.n	800157a <LoopFillZerobss>

08001576 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001576:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001578:	3204      	adds	r2, #4

0800157a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800157a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800157c:	d3fb      	bcc.n	8001576 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800157e:	f7ff ffd7 	bl	8001530 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001582:	f003 f8a3 	bl	80046cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001586:	f7ff f815 	bl	80005b4 <main>
  bx  lr    
 800158a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800158c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001590:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001594:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001598:	080059d4 	.word	0x080059d4
  ldr r2, =_sbss
 800159c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80015a0:	200001c8 	.word	0x200001c8

080015a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015a4:	e7fe      	b.n	80015a4 <ADC_IRQHandler>
	...

080015a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015ac:	4b0e      	ldr	r3, [pc, #56]	; (80015e8 <HAL_Init+0x40>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a0d      	ldr	r2, [pc, #52]	; (80015e8 <HAL_Init+0x40>)
 80015b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015b8:	4b0b      	ldr	r3, [pc, #44]	; (80015e8 <HAL_Init+0x40>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a0a      	ldr	r2, [pc, #40]	; (80015e8 <HAL_Init+0x40>)
 80015be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015c4:	4b08      	ldr	r3, [pc, #32]	; (80015e8 <HAL_Init+0x40>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a07      	ldr	r2, [pc, #28]	; (80015e8 <HAL_Init+0x40>)
 80015ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015d0:	2003      	movs	r0, #3
 80015d2:	f000 feb3 	bl	800233c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015d6:	2000      	movs	r0, #0
 80015d8:	f000 f808 	bl	80015ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015dc:	f7ff fd46 	bl	800106c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015e0:	2300      	movs	r3, #0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	40023c00 	.word	0x40023c00

080015ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015f4:	4b12      	ldr	r3, [pc, #72]	; (8001640 <HAL_InitTick+0x54>)
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	4b12      	ldr	r3, [pc, #72]	; (8001644 <HAL_InitTick+0x58>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	4619      	mov	r1, r3
 80015fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001602:	fbb3 f3f1 	udiv	r3, r3, r1
 8001606:	fbb2 f3f3 	udiv	r3, r2, r3
 800160a:	4618      	mov	r0, r3
 800160c:	f000 fecb 	bl	80023a6 <HAL_SYSTICK_Config>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e00e      	b.n	8001638 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2b0f      	cmp	r3, #15
 800161e:	d80a      	bhi.n	8001636 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001620:	2200      	movs	r2, #0
 8001622:	6879      	ldr	r1, [r7, #4]
 8001624:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001628:	f000 fe93 	bl	8002352 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800162c:	4a06      	ldr	r2, [pc, #24]	; (8001648 <HAL_InitTick+0x5c>)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001632:	2300      	movs	r3, #0
 8001634:	e000      	b.n	8001638 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
}
 8001638:	4618      	mov	r0, r3
 800163a:	3708      	adds	r7, #8
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	20000000 	.word	0x20000000
 8001644:	20000008 	.word	0x20000008
 8001648:	20000004 	.word	0x20000004

0800164c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001650:	4b06      	ldr	r3, [pc, #24]	; (800166c <HAL_IncTick+0x20>)
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	461a      	mov	r2, r3
 8001656:	4b06      	ldr	r3, [pc, #24]	; (8001670 <HAL_IncTick+0x24>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4413      	add	r3, r2
 800165c:	4a04      	ldr	r2, [pc, #16]	; (8001670 <HAL_IncTick+0x24>)
 800165e:	6013      	str	r3, [r2, #0]
}
 8001660:	bf00      	nop
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	20000008 	.word	0x20000008
 8001670:	200001b4 	.word	0x200001b4

08001674 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  return uwTick;
 8001678:	4b03      	ldr	r3, [pc, #12]	; (8001688 <HAL_GetTick+0x14>)
 800167a:	681b      	ldr	r3, [r3, #0]
}
 800167c:	4618      	mov	r0, r3
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	200001b4 	.word	0x200001b4

0800168c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d101      	bne.n	800169e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e0ed      	b.n	800187a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d102      	bne.n	80016b0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f7ff fd06 	bl	80010bc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f042 0201 	orr.w	r2, r2, #1
 80016be:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016c0:	f7ff ffd8 	bl	8001674 <HAL_GetTick>
 80016c4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80016c6:	e012      	b.n	80016ee <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80016c8:	f7ff ffd4 	bl	8001674 <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	2b0a      	cmp	r3, #10
 80016d4:	d90b      	bls.n	80016ee <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016da:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2205      	movs	r2, #5
 80016e6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e0c5      	b.n	800187a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f003 0301 	and.w	r3, r3, #1
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d0e5      	beq.n	80016c8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f022 0202 	bic.w	r2, r2, #2
 800170a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800170c:	f7ff ffb2 	bl	8001674 <HAL_GetTick>
 8001710:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001712:	e012      	b.n	800173a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001714:	f7ff ffae 	bl	8001674 <HAL_GetTick>
 8001718:	4602      	mov	r2, r0
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	2b0a      	cmp	r3, #10
 8001720:	d90b      	bls.n	800173a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001726:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2205      	movs	r2, #5
 8001732:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e09f      	b.n	800187a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f003 0302 	and.w	r3, r3, #2
 8001744:	2b00      	cmp	r3, #0
 8001746:	d1e5      	bne.n	8001714 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	7e1b      	ldrb	r3, [r3, #24]
 800174c:	2b01      	cmp	r3, #1
 800174e:	d108      	bne.n	8001762 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800175e:	601a      	str	r2, [r3, #0]
 8001760:	e007      	b.n	8001772 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001770:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	7e5b      	ldrb	r3, [r3, #25]
 8001776:	2b01      	cmp	r3, #1
 8001778:	d108      	bne.n	800178c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001788:	601a      	str	r2, [r3, #0]
 800178a:	e007      	b.n	800179c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800179a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	7e9b      	ldrb	r3, [r3, #26]
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d108      	bne.n	80017b6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f042 0220 	orr.w	r2, r2, #32
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	e007      	b.n	80017c6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f022 0220 	bic.w	r2, r2, #32
 80017c4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	7edb      	ldrb	r3, [r3, #27]
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d108      	bne.n	80017e0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f022 0210 	bic.w	r2, r2, #16
 80017dc:	601a      	str	r2, [r3, #0]
 80017de:	e007      	b.n	80017f0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f042 0210 	orr.w	r2, r2, #16
 80017ee:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	7f1b      	ldrb	r3, [r3, #28]
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d108      	bne.n	800180a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f042 0208 	orr.w	r2, r2, #8
 8001806:	601a      	str	r2, [r3, #0]
 8001808:	e007      	b.n	800181a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f022 0208 	bic.w	r2, r2, #8
 8001818:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	7f5b      	ldrb	r3, [r3, #29]
 800181e:	2b01      	cmp	r3, #1
 8001820:	d108      	bne.n	8001834 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f042 0204 	orr.w	r2, r2, #4
 8001830:	601a      	str	r2, [r3, #0]
 8001832:	e007      	b.n	8001844 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f022 0204 	bic.w	r2, r2, #4
 8001842:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	689a      	ldr	r2, [r3, #8]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	431a      	orrs	r2, r3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	691b      	ldr	r3, [r3, #16]
 8001852:	431a      	orrs	r2, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	695b      	ldr	r3, [r3, #20]
 8001858:	ea42 0103 	orr.w	r1, r2, r3
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	1e5a      	subs	r2, r3, #1
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	430a      	orrs	r2, r1
 8001868:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2200      	movs	r2, #0
 800186e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2201      	movs	r2, #1
 8001874:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001878:	2300      	movs	r3, #0
}
 800187a:	4618      	mov	r0, r3
 800187c:	3710      	adds	r7, #16
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
	...

08001884 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001884:	b480      	push	{r7}
 8001886:	b087      	sub	sp, #28
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	f893 3020 	ldrb.w	r3, [r3, #32]
 800189a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800189c:	7cfb      	ldrb	r3, [r7, #19]
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d003      	beq.n	80018aa <HAL_CAN_ConfigFilter+0x26>
 80018a2:	7cfb      	ldrb	r3, [r7, #19]
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	f040 80be 	bne.w	8001a26 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80018aa:	4b65      	ldr	r3, [pc, #404]	; (8001a40 <HAL_CAN_ConfigFilter+0x1bc>)
 80018ac:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80018b4:	f043 0201 	orr.w	r2, r3, #1
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80018c4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d8:	021b      	lsls	r3, r3, #8
 80018da:	431a      	orrs	r2, r3
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	695b      	ldr	r3, [r3, #20]
 80018e6:	f003 031f 	and.w	r3, r3, #31
 80018ea:	2201      	movs	r2, #1
 80018ec:	fa02 f303 	lsl.w	r3, r2, r3
 80018f0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	43db      	mvns	r3, r3
 80018fc:	401a      	ands	r2, r3
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	69db      	ldr	r3, [r3, #28]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d123      	bne.n	8001954 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	43db      	mvns	r3, r3
 8001916:	401a      	ands	r2, r3
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	68db      	ldr	r3, [r3, #12]
 8001922:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800192a:	683a      	ldr	r2, [r7, #0]
 800192c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800192e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	3248      	adds	r2, #72	; 0x48
 8001934:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001948:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800194a:	6979      	ldr	r1, [r7, #20]
 800194c:	3348      	adds	r3, #72	; 0x48
 800194e:	00db      	lsls	r3, r3, #3
 8001950:	440b      	add	r3, r1
 8001952:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	69db      	ldr	r3, [r3, #28]
 8001958:	2b01      	cmp	r3, #1
 800195a:	d122      	bne.n	80019a2 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	431a      	orrs	r2, r3
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001978:	683a      	ldr	r2, [r7, #0]
 800197a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800197c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	3248      	adds	r2, #72	; 0x48
 8001982:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001996:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001998:	6979      	ldr	r1, [r7, #20]
 800199a:	3348      	adds	r3, #72	; 0x48
 800199c:	00db      	lsls	r3, r3, #3
 800199e:	440b      	add	r3, r1
 80019a0:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	699b      	ldr	r3, [r3, #24]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d109      	bne.n	80019be <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	43db      	mvns	r3, r3
 80019b4:	401a      	ands	r2, r3
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80019bc:	e007      	b.n	80019ce <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	431a      	orrs	r2, r3
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	691b      	ldr	r3, [r3, #16]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d109      	bne.n	80019ea <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	43db      	mvns	r3, r3
 80019e0:	401a      	ands	r2, r3
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80019e8:	e007      	b.n	80019fa <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	431a      	orrs	r2, r3
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	6a1b      	ldr	r3, [r3, #32]
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d107      	bne.n	8001a12 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	431a      	orrs	r2, r3
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001a18:	f023 0201 	bic.w	r2, r3, #1
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001a22:	2300      	movs	r3, #0
 8001a24:	e006      	b.n	8001a34 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
  }
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	371c      	adds	r7, #28
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr
 8001a40:	40006400 	.word	0x40006400

08001a44 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d12e      	bne.n	8001ab6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2202      	movs	r2, #2
 8001a5c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f022 0201 	bic.w	r2, r2, #1
 8001a6e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001a70:	f7ff fe00 	bl	8001674 <HAL_GetTick>
 8001a74:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001a76:	e012      	b.n	8001a9e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a78:	f7ff fdfc 	bl	8001674 <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	2b0a      	cmp	r3, #10
 8001a84:	d90b      	bls.n	8001a9e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a8a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2205      	movs	r2, #5
 8001a96:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e012      	b.n	8001ac4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f003 0301 	and.w	r3, r3, #1
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d1e5      	bne.n	8001a78 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	e006      	b.n	8001ac4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aba:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
  }
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3710      	adds	r7, #16
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}

08001acc <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001acc:	b480      	push	{r7}
 8001ace:	b087      	sub	sp, #28
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	60f8      	str	r0, [r7, #12]
 8001ad4:	60b9      	str	r1, [r7, #8]
 8001ad6:	607a      	str	r2, [r7, #4]
 8001ad8:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ae0:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001ae2:	7dfb      	ldrb	r3, [r7, #23]
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d003      	beq.n	8001af0 <HAL_CAN_GetRxMessage+0x24>
 8001ae8:	7dfb      	ldrb	r3, [r7, #23]
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	f040 80f3 	bne.w	8001cd6 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d10e      	bne.n	8001b14 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	f003 0303 	and.w	r3, r3, #3
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d116      	bne.n	8001b32 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b08:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e0e7      	b.n	8001ce4 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	691b      	ldr	r3, [r3, #16]
 8001b1a:	f003 0303 	and.w	r3, r3, #3
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d107      	bne.n	8001b32 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b26:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e0d8      	b.n	8001ce4 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	331b      	adds	r3, #27
 8001b3a:	011b      	lsls	r3, r3, #4
 8001b3c:	4413      	add	r3, r2
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 0204 	and.w	r2, r3, #4
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d10c      	bne.n	8001b6a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	331b      	adds	r3, #27
 8001b58:	011b      	lsls	r3, r3, #4
 8001b5a:	4413      	add	r3, r2
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	0d5b      	lsrs	r3, r3, #21
 8001b60:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	601a      	str	r2, [r3, #0]
 8001b68:	e00b      	b.n	8001b82 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	331b      	adds	r3, #27
 8001b72:	011b      	lsls	r3, r3, #4
 8001b74:	4413      	add	r3, r2
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	08db      	lsrs	r3, r3, #3
 8001b7a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	331b      	adds	r3, #27
 8001b8a:	011b      	lsls	r3, r3, #4
 8001b8c:	4413      	add	r3, r2
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0202 	and.w	r2, r3, #2
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	331b      	adds	r3, #27
 8001ba0:	011b      	lsls	r3, r3, #4
 8001ba2:	4413      	add	r3, r2
 8001ba4:	3304      	adds	r3, #4
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 020f 	and.w	r2, r3, #15
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	331b      	adds	r3, #27
 8001bb8:	011b      	lsls	r3, r3, #4
 8001bba:	4413      	add	r3, r2
 8001bbc:	3304      	adds	r3, #4
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	0a1b      	lsrs	r3, r3, #8
 8001bc2:	b2da      	uxtb	r2, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	331b      	adds	r3, #27
 8001bd0:	011b      	lsls	r3, r3, #4
 8001bd2:	4413      	add	r3, r2
 8001bd4:	3304      	adds	r3, #4
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	0c1b      	lsrs	r3, r3, #16
 8001bda:	b29a      	uxth	r2, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	011b      	lsls	r3, r3, #4
 8001be8:	4413      	add	r3, r2
 8001bea:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	b2da      	uxtb	r2, r3
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	011b      	lsls	r3, r3, #4
 8001bfe:	4413      	add	r3, r2
 8001c00:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	0a1a      	lsrs	r2, r3, #8
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	b2d2      	uxtb	r2, r2
 8001c0e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	011b      	lsls	r3, r3, #4
 8001c18:	4413      	add	r3, r2
 8001c1a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	0c1a      	lsrs	r2, r3, #16
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	3302      	adds	r3, #2
 8001c26:	b2d2      	uxtb	r2, r2
 8001c28:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	011b      	lsls	r3, r3, #4
 8001c32:	4413      	add	r3, r2
 8001c34:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	0e1a      	lsrs	r2, r3, #24
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	3303      	adds	r3, #3
 8001c40:	b2d2      	uxtb	r2, r2
 8001c42:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	011b      	lsls	r3, r3, #4
 8001c4c:	4413      	add	r3, r2
 8001c4e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	3304      	adds	r3, #4
 8001c58:	b2d2      	uxtb	r2, r2
 8001c5a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	011b      	lsls	r3, r3, #4
 8001c64:	4413      	add	r3, r2
 8001c66:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	0a1a      	lsrs	r2, r3, #8
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	3305      	adds	r3, #5
 8001c72:	b2d2      	uxtb	r2, r2
 8001c74:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	011b      	lsls	r3, r3, #4
 8001c7e:	4413      	add	r3, r2
 8001c80:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	0c1a      	lsrs	r2, r3, #16
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	3306      	adds	r3, #6
 8001c8c:	b2d2      	uxtb	r2, r2
 8001c8e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	011b      	lsls	r3, r3, #4
 8001c98:	4413      	add	r3, r2
 8001c9a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	0e1a      	lsrs	r2, r3, #24
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	3307      	adds	r3, #7
 8001ca6:	b2d2      	uxtb	r2, r2
 8001ca8:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d108      	bne.n	8001cc2 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	68da      	ldr	r2, [r3, #12]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f042 0220 	orr.w	r2, r2, #32
 8001cbe:	60da      	str	r2, [r3, #12]
 8001cc0:	e007      	b.n	8001cd2 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	691a      	ldr	r2, [r3, #16]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f042 0220 	orr.w	r2, r2, #32
 8001cd0:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	e006      	b.n	8001ce4 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cda:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
  }
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	371c      	adds	r7, #28
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr

08001cf0 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b085      	sub	sp, #20
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d00:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001d02:	7bfb      	ldrb	r3, [r7, #15]
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d002      	beq.n	8001d0e <HAL_CAN_ActivateNotification+0x1e>
 8001d08:	7bfb      	ldrb	r3, [r7, #15]
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d109      	bne.n	8001d22 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	6959      	ldr	r1, [r3, #20]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	683a      	ldr	r2, [r7, #0]
 8001d1a:	430a      	orrs	r2, r1
 8001d1c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	e006      	b.n	8001d30 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d26:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
  }
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3714      	adds	r7, #20
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b08a      	sub	sp, #40	; 0x28
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001d44:	2300      	movs	r3, #0
 8001d46:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	695b      	ldr	r3, [r3, #20]
 8001d4e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	691b      	ldr	r3, [r3, #16]
 8001d6e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	699b      	ldr	r3, [r3, #24]
 8001d76:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001d78:	6a3b      	ldr	r3, [r7, #32]
 8001d7a:	f003 0301 	and.w	r3, r3, #1
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d07c      	beq.n	8001e7c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	f003 0301 	and.w	r3, r3, #1
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d023      	beq.n	8001dd4 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	2201      	movs	r2, #1
 8001d92:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001d94:	69bb      	ldr	r3, [r7, #24]
 8001d96:	f003 0302 	and.w	r3, r3, #2
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d003      	beq.n	8001da6 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f000 f983 	bl	80020aa <HAL_CAN_TxMailbox0CompleteCallback>
 8001da4:	e016      	b.n	8001dd4 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001da6:	69bb      	ldr	r3, [r7, #24]
 8001da8:	f003 0304 	and.w	r3, r3, #4
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d004      	beq.n	8001dba <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001db6:	627b      	str	r3, [r7, #36]	; 0x24
 8001db8:	e00c      	b.n	8001dd4 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001dba:	69bb      	ldr	r3, [r7, #24]
 8001dbc:	f003 0308 	and.w	r3, r3, #8
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d004      	beq.n	8001dce <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001dca:	627b      	str	r3, [r7, #36]	; 0x24
 8001dcc:	e002      	b.n	8001dd4 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f000 f989 	bl	80020e6 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d024      	beq.n	8001e28 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001de6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001de8:	69bb      	ldr	r3, [r7, #24]
 8001dea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d003      	beq.n	8001dfa <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f000 f963 	bl	80020be <HAL_CAN_TxMailbox1CompleteCallback>
 8001df8:	e016      	b.n	8001e28 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001dfa:	69bb      	ldr	r3, [r7, #24]
 8001dfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d004      	beq.n	8001e0e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e06:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001e0a:	627b      	str	r3, [r7, #36]	; 0x24
 8001e0c:	e00c      	b.n	8001e28 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d004      	beq.n	8001e22 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e1e:	627b      	str	r3, [r7, #36]	; 0x24
 8001e20:	e002      	b.n	8001e28 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f000 f969 	bl	80020fa <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001e28:	69bb      	ldr	r3, [r7, #24]
 8001e2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d024      	beq.n	8001e7c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001e3a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d003      	beq.n	8001e4e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f000 f943 	bl	80020d2 <HAL_CAN_TxMailbox2CompleteCallback>
 8001e4c:	e016      	b.n	8001e7c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d004      	beq.n	8001e62 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e5e:	627b      	str	r3, [r7, #36]	; 0x24
 8001e60:	e00c      	b.n	8001e7c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d004      	beq.n	8001e76 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e72:	627b      	str	r3, [r7, #36]	; 0x24
 8001e74:	e002      	b.n	8001e7c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f000 f949 	bl	800210e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001e7c:	6a3b      	ldr	r3, [r7, #32]
 8001e7e:	f003 0308 	and.w	r3, r3, #8
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d00c      	beq.n	8001ea0 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	f003 0310 	and.w	r3, r3, #16
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d007      	beq.n	8001ea0 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e96:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	2210      	movs	r2, #16
 8001e9e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001ea0:	6a3b      	ldr	r3, [r7, #32]
 8001ea2:	f003 0304 	and.w	r3, r3, #4
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d00b      	beq.n	8001ec2 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	f003 0308 	and.w	r3, r3, #8
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d006      	beq.n	8001ec2 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2208      	movs	r2, #8
 8001eba:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f000 f930 	bl	8002122 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001ec2:	6a3b      	ldr	r3, [r7, #32]
 8001ec4:	f003 0302 	and.w	r3, r3, #2
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d009      	beq.n	8001ee0 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	f003 0303 	and.w	r3, r3, #3
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d002      	beq.n	8001ee0 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f7fe ff16 	bl	8000d0c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001ee0:	6a3b      	ldr	r3, [r7, #32]
 8001ee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d00c      	beq.n	8001f04 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	f003 0310 	and.w	r3, r3, #16
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d007      	beq.n	8001f04 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001efa:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	2210      	movs	r2, #16
 8001f02:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001f04:	6a3b      	ldr	r3, [r7, #32]
 8001f06:	f003 0320 	and.w	r3, r3, #32
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d00b      	beq.n	8001f26 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	f003 0308 	and.w	r3, r3, #8
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d006      	beq.n	8001f26 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2208      	movs	r2, #8
 8001f1e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f000 f912 	bl	800214a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001f26:	6a3b      	ldr	r3, [r7, #32]
 8001f28:	f003 0310 	and.w	r3, r3, #16
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d009      	beq.n	8001f44 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	691b      	ldr	r3, [r3, #16]
 8001f36:	f003 0303 	and.w	r3, r3, #3
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d002      	beq.n	8001f44 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f000 f8f9 	bl	8002136 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001f44:	6a3b      	ldr	r3, [r7, #32]
 8001f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d00b      	beq.n	8001f66 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	f003 0310 	and.w	r3, r3, #16
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d006      	beq.n	8001f66 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2210      	movs	r2, #16
 8001f5e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f000 f8fc 	bl	800215e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001f66:	6a3b      	ldr	r3, [r7, #32]
 8001f68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d00b      	beq.n	8001f88 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	f003 0308 	and.w	r3, r3, #8
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d006      	beq.n	8001f88 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	2208      	movs	r2, #8
 8001f80:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f000 f8f5 	bl	8002172 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001f88:	6a3b      	ldr	r3, [r7, #32]
 8001f8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d07b      	beq.n	800208a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	f003 0304 	and.w	r3, r3, #4
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d072      	beq.n	8002082 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001f9c:	6a3b      	ldr	r3, [r7, #32]
 8001f9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d008      	beq.n	8001fb8 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d003      	beq.n	8001fb8 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb2:	f043 0301 	orr.w	r3, r3, #1
 8001fb6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001fb8:	6a3b      	ldr	r3, [r7, #32]
 8001fba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d008      	beq.n	8001fd4 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d003      	beq.n	8001fd4 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fce:	f043 0302 	orr.w	r3, r3, #2
 8001fd2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001fd4:	6a3b      	ldr	r3, [r7, #32]
 8001fd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d008      	beq.n	8001ff0 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d003      	beq.n	8001ff0 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fea:	f043 0304 	orr.w	r3, r3, #4
 8001fee:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001ff0:	6a3b      	ldr	r3, [r7, #32]
 8001ff2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d043      	beq.n	8002082 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002000:	2b00      	cmp	r3, #0
 8002002:	d03e      	beq.n	8002082 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800200a:	2b60      	cmp	r3, #96	; 0x60
 800200c:	d02b      	beq.n	8002066 <HAL_CAN_IRQHandler+0x32a>
 800200e:	2b60      	cmp	r3, #96	; 0x60
 8002010:	d82e      	bhi.n	8002070 <HAL_CAN_IRQHandler+0x334>
 8002012:	2b50      	cmp	r3, #80	; 0x50
 8002014:	d022      	beq.n	800205c <HAL_CAN_IRQHandler+0x320>
 8002016:	2b50      	cmp	r3, #80	; 0x50
 8002018:	d82a      	bhi.n	8002070 <HAL_CAN_IRQHandler+0x334>
 800201a:	2b40      	cmp	r3, #64	; 0x40
 800201c:	d019      	beq.n	8002052 <HAL_CAN_IRQHandler+0x316>
 800201e:	2b40      	cmp	r3, #64	; 0x40
 8002020:	d826      	bhi.n	8002070 <HAL_CAN_IRQHandler+0x334>
 8002022:	2b30      	cmp	r3, #48	; 0x30
 8002024:	d010      	beq.n	8002048 <HAL_CAN_IRQHandler+0x30c>
 8002026:	2b30      	cmp	r3, #48	; 0x30
 8002028:	d822      	bhi.n	8002070 <HAL_CAN_IRQHandler+0x334>
 800202a:	2b10      	cmp	r3, #16
 800202c:	d002      	beq.n	8002034 <HAL_CAN_IRQHandler+0x2f8>
 800202e:	2b20      	cmp	r3, #32
 8002030:	d005      	beq.n	800203e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002032:	e01d      	b.n	8002070 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002036:	f043 0308 	orr.w	r3, r3, #8
 800203a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800203c:	e019      	b.n	8002072 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800203e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002040:	f043 0310 	orr.w	r3, r3, #16
 8002044:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002046:	e014      	b.n	8002072 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204a:	f043 0320 	orr.w	r3, r3, #32
 800204e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002050:	e00f      	b.n	8002072 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002054:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002058:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800205a:	e00a      	b.n	8002072 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800205c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002062:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002064:	e005      	b.n	8002072 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002068:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800206c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800206e:	e000      	b.n	8002072 <HAL_CAN_IRQHandler+0x336>
            break;
 8002070:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	699a      	ldr	r2, [r3, #24]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002080:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	2204      	movs	r2, #4
 8002088:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800208a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208c:	2b00      	cmp	r3, #0
 800208e:	d008      	beq.n	80020a2 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002096:	431a      	orrs	r2, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f000 f872 	bl	8002186 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80020a2:	bf00      	nop
 80020a4:	3728      	adds	r7, #40	; 0x28
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}

080020aa <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80020aa:	b480      	push	{r7}
 80020ac:	b083      	sub	sp, #12
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80020b2:	bf00      	nop
 80020b4:	370c      	adds	r7, #12
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr

080020be <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80020be:	b480      	push	{r7}
 80020c0:	b083      	sub	sp, #12
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80020c6:	bf00      	nop
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr

080020d2 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80020d2:	b480      	push	{r7}
 80020d4:	b083      	sub	sp, #12
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80020da:	bf00      	nop
 80020dc:	370c      	adds	r7, #12
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr

080020e6 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80020e6:	b480      	push	{r7}
 80020e8:	b083      	sub	sp, #12
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80020ee:	bf00      	nop
 80020f0:	370c      	adds	r7, #12
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr

080020fa <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80020fa:	b480      	push	{r7}
 80020fc:	b083      	sub	sp, #12
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002102:	bf00      	nop
 8002104:	370c      	adds	r7, #12
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr

0800210e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800210e:	b480      	push	{r7}
 8002110:	b083      	sub	sp, #12
 8002112:	af00      	add	r7, sp, #0
 8002114:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002116:	bf00      	nop
 8002118:	370c      	adds	r7, #12
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr

08002122 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002122:	b480      	push	{r7}
 8002124:	b083      	sub	sp, #12
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800212a:	bf00      	nop
 800212c:	370c      	adds	r7, #12
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr

08002136 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002136:	b480      	push	{r7}
 8002138:	b083      	sub	sp, #12
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800213e:	bf00      	nop
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr

0800214a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800214a:	b480      	push	{r7}
 800214c:	b083      	sub	sp, #12
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002152:	bf00      	nop
 8002154:	370c      	adds	r7, #12
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr

0800215e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800215e:	b480      	push	{r7}
 8002160:	b083      	sub	sp, #12
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002166:	bf00      	nop
 8002168:	370c      	adds	r7, #12
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr

08002172 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002172:	b480      	push	{r7}
 8002174:	b083      	sub	sp, #12
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800217a:	bf00      	nop
 800217c:	370c      	adds	r7, #12
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr

08002186 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002186:	b480      	push	{r7}
 8002188:	b083      	sub	sp, #12
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800218e:	bf00      	nop
 8002190:	370c      	adds	r7, #12
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
	...

0800219c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800219c:	b480      	push	{r7}
 800219e:	b085      	sub	sp, #20
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f003 0307 	and.w	r3, r3, #7
 80021aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021ac:	4b0c      	ldr	r3, [pc, #48]	; (80021e0 <__NVIC_SetPriorityGrouping+0x44>)
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021b2:	68ba      	ldr	r2, [r7, #8]
 80021b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021b8:	4013      	ands	r3, r2
 80021ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021ce:	4a04      	ldr	r2, [pc, #16]	; (80021e0 <__NVIC_SetPriorityGrouping+0x44>)
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	60d3      	str	r3, [r2, #12]
}
 80021d4:	bf00      	nop
 80021d6:	3714      	adds	r7, #20
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr
 80021e0:	e000ed00 	.word	0xe000ed00

080021e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021e8:	4b04      	ldr	r3, [pc, #16]	; (80021fc <__NVIC_GetPriorityGrouping+0x18>)
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	0a1b      	lsrs	r3, r3, #8
 80021ee:	f003 0307 	and.w	r3, r3, #7
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr
 80021fc:	e000ed00 	.word	0xe000ed00

08002200 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	4603      	mov	r3, r0
 8002208:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800220a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800220e:	2b00      	cmp	r3, #0
 8002210:	db0b      	blt.n	800222a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002212:	79fb      	ldrb	r3, [r7, #7]
 8002214:	f003 021f 	and.w	r2, r3, #31
 8002218:	4907      	ldr	r1, [pc, #28]	; (8002238 <__NVIC_EnableIRQ+0x38>)
 800221a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800221e:	095b      	lsrs	r3, r3, #5
 8002220:	2001      	movs	r0, #1
 8002222:	fa00 f202 	lsl.w	r2, r0, r2
 8002226:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800222a:	bf00      	nop
 800222c:	370c      	adds	r7, #12
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	e000e100 	.word	0xe000e100

0800223c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	4603      	mov	r3, r0
 8002244:	6039      	str	r1, [r7, #0]
 8002246:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002248:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800224c:	2b00      	cmp	r3, #0
 800224e:	db0a      	blt.n	8002266 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	b2da      	uxtb	r2, r3
 8002254:	490c      	ldr	r1, [pc, #48]	; (8002288 <__NVIC_SetPriority+0x4c>)
 8002256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800225a:	0112      	lsls	r2, r2, #4
 800225c:	b2d2      	uxtb	r2, r2
 800225e:	440b      	add	r3, r1
 8002260:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002264:	e00a      	b.n	800227c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	b2da      	uxtb	r2, r3
 800226a:	4908      	ldr	r1, [pc, #32]	; (800228c <__NVIC_SetPriority+0x50>)
 800226c:	79fb      	ldrb	r3, [r7, #7]
 800226e:	f003 030f 	and.w	r3, r3, #15
 8002272:	3b04      	subs	r3, #4
 8002274:	0112      	lsls	r2, r2, #4
 8002276:	b2d2      	uxtb	r2, r2
 8002278:	440b      	add	r3, r1
 800227a:	761a      	strb	r2, [r3, #24]
}
 800227c:	bf00      	nop
 800227e:	370c      	adds	r7, #12
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr
 8002288:	e000e100 	.word	0xe000e100
 800228c:	e000ed00 	.word	0xe000ed00

08002290 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002290:	b480      	push	{r7}
 8002292:	b089      	sub	sp, #36	; 0x24
 8002294:	af00      	add	r7, sp, #0
 8002296:	60f8      	str	r0, [r7, #12]
 8002298:	60b9      	str	r1, [r7, #8]
 800229a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f003 0307 	and.w	r3, r3, #7
 80022a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	f1c3 0307 	rsb	r3, r3, #7
 80022aa:	2b04      	cmp	r3, #4
 80022ac:	bf28      	it	cs
 80022ae:	2304      	movcs	r3, #4
 80022b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	3304      	adds	r3, #4
 80022b6:	2b06      	cmp	r3, #6
 80022b8:	d902      	bls.n	80022c0 <NVIC_EncodePriority+0x30>
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	3b03      	subs	r3, #3
 80022be:	e000      	b.n	80022c2 <NVIC_EncodePriority+0x32>
 80022c0:	2300      	movs	r3, #0
 80022c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80022c8:	69bb      	ldr	r3, [r7, #24]
 80022ca:	fa02 f303 	lsl.w	r3, r2, r3
 80022ce:	43da      	mvns	r2, r3
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	401a      	ands	r2, r3
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	fa01 f303 	lsl.w	r3, r1, r3
 80022e2:	43d9      	mvns	r1, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022e8:	4313      	orrs	r3, r2
         );
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3724      	adds	r7, #36	; 0x24
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
	...

080022f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	3b01      	subs	r3, #1
 8002304:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002308:	d301      	bcc.n	800230e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800230a:	2301      	movs	r3, #1
 800230c:	e00f      	b.n	800232e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800230e:	4a0a      	ldr	r2, [pc, #40]	; (8002338 <SysTick_Config+0x40>)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	3b01      	subs	r3, #1
 8002314:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002316:	210f      	movs	r1, #15
 8002318:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800231c:	f7ff ff8e 	bl	800223c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002320:	4b05      	ldr	r3, [pc, #20]	; (8002338 <SysTick_Config+0x40>)
 8002322:	2200      	movs	r2, #0
 8002324:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002326:	4b04      	ldr	r3, [pc, #16]	; (8002338 <SysTick_Config+0x40>)
 8002328:	2207      	movs	r2, #7
 800232a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800232c:	2300      	movs	r3, #0
}
 800232e:	4618      	mov	r0, r3
 8002330:	3708      	adds	r7, #8
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	e000e010 	.word	0xe000e010

0800233c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f7ff ff29 	bl	800219c <__NVIC_SetPriorityGrouping>
}
 800234a:	bf00      	nop
 800234c:	3708      	adds	r7, #8
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}

08002352 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002352:	b580      	push	{r7, lr}
 8002354:	b086      	sub	sp, #24
 8002356:	af00      	add	r7, sp, #0
 8002358:	4603      	mov	r3, r0
 800235a:	60b9      	str	r1, [r7, #8]
 800235c:	607a      	str	r2, [r7, #4]
 800235e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002360:	2300      	movs	r3, #0
 8002362:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002364:	f7ff ff3e 	bl	80021e4 <__NVIC_GetPriorityGrouping>
 8002368:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	68b9      	ldr	r1, [r7, #8]
 800236e:	6978      	ldr	r0, [r7, #20]
 8002370:	f7ff ff8e 	bl	8002290 <NVIC_EncodePriority>
 8002374:	4602      	mov	r2, r0
 8002376:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800237a:	4611      	mov	r1, r2
 800237c:	4618      	mov	r0, r3
 800237e:	f7ff ff5d 	bl	800223c <__NVIC_SetPriority>
}
 8002382:	bf00      	nop
 8002384:	3718      	adds	r7, #24
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}

0800238a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800238a:	b580      	push	{r7, lr}
 800238c:	b082      	sub	sp, #8
 800238e:	af00      	add	r7, sp, #0
 8002390:	4603      	mov	r3, r0
 8002392:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002394:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002398:	4618      	mov	r0, r3
 800239a:	f7ff ff31 	bl	8002200 <__NVIC_EnableIRQ>
}
 800239e:	bf00      	nop
 80023a0:	3708      	adds	r7, #8
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}

080023a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023a6:	b580      	push	{r7, lr}
 80023a8:	b082      	sub	sp, #8
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f7ff ffa2 	bl	80022f8 <SysTick_Config>
 80023b4:	4603      	mov	r3, r0
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
	...

080023c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b089      	sub	sp, #36	; 0x24
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023ca:	2300      	movs	r3, #0
 80023cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023ce:	2300      	movs	r3, #0
 80023d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023d2:	2300      	movs	r3, #0
 80023d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023d6:	2300      	movs	r3, #0
 80023d8:	61fb      	str	r3, [r7, #28]
 80023da:	e165      	b.n	80026a8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023dc:	2201      	movs	r2, #1
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	fa02 f303 	lsl.w	r3, r2, r3
 80023e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	697a      	ldr	r2, [r7, #20]
 80023ec:	4013      	ands	r3, r2
 80023ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023f0:	693a      	ldr	r2, [r7, #16]
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	f040 8154 	bne.w	80026a2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f003 0303 	and.w	r3, r3, #3
 8002402:	2b01      	cmp	r3, #1
 8002404:	d005      	beq.n	8002412 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800240e:	2b02      	cmp	r3, #2
 8002410:	d130      	bne.n	8002474 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	005b      	lsls	r3, r3, #1
 800241c:	2203      	movs	r2, #3
 800241e:	fa02 f303 	lsl.w	r3, r2, r3
 8002422:	43db      	mvns	r3, r3
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	4013      	ands	r3, r2
 8002428:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	68da      	ldr	r2, [r3, #12]
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	005b      	lsls	r3, r3, #1
 8002432:	fa02 f303 	lsl.w	r3, r2, r3
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	4313      	orrs	r3, r2
 800243a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	69ba      	ldr	r2, [r7, #24]
 8002440:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002448:	2201      	movs	r2, #1
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	fa02 f303 	lsl.w	r3, r2, r3
 8002450:	43db      	mvns	r3, r3
 8002452:	69ba      	ldr	r2, [r7, #24]
 8002454:	4013      	ands	r3, r2
 8002456:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	091b      	lsrs	r3, r3, #4
 800245e:	f003 0201 	and.w	r2, r3, #1
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	fa02 f303 	lsl.w	r3, r2, r3
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	4313      	orrs	r3, r2
 800246c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	69ba      	ldr	r2, [r7, #24]
 8002472:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f003 0303 	and.w	r3, r3, #3
 800247c:	2b03      	cmp	r3, #3
 800247e:	d017      	beq.n	80024b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	005b      	lsls	r3, r3, #1
 800248a:	2203      	movs	r2, #3
 800248c:	fa02 f303 	lsl.w	r3, r2, r3
 8002490:	43db      	mvns	r3, r3
 8002492:	69ba      	ldr	r2, [r7, #24]
 8002494:	4013      	ands	r3, r2
 8002496:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	689a      	ldr	r2, [r3, #8]
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	005b      	lsls	r3, r3, #1
 80024a0:	fa02 f303 	lsl.w	r3, r2, r3
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f003 0303 	and.w	r3, r3, #3
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d123      	bne.n	8002504 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	08da      	lsrs	r2, r3, #3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	3208      	adds	r2, #8
 80024c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	f003 0307 	and.w	r3, r3, #7
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	220f      	movs	r2, #15
 80024d4:	fa02 f303 	lsl.w	r3, r2, r3
 80024d8:	43db      	mvns	r3, r3
 80024da:	69ba      	ldr	r2, [r7, #24]
 80024dc:	4013      	ands	r3, r2
 80024de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	691a      	ldr	r2, [r3, #16]
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	f003 0307 	and.w	r3, r3, #7
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	fa02 f303 	lsl.w	r3, r2, r3
 80024f0:	69ba      	ldr	r2, [r7, #24]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	08da      	lsrs	r2, r3, #3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	3208      	adds	r2, #8
 80024fe:	69b9      	ldr	r1, [r7, #24]
 8002500:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	005b      	lsls	r3, r3, #1
 800250e:	2203      	movs	r2, #3
 8002510:	fa02 f303 	lsl.w	r3, r2, r3
 8002514:	43db      	mvns	r3, r3
 8002516:	69ba      	ldr	r2, [r7, #24]
 8002518:	4013      	ands	r3, r2
 800251a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f003 0203 	and.w	r2, r3, #3
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	005b      	lsls	r3, r3, #1
 8002528:	fa02 f303 	lsl.w	r3, r2, r3
 800252c:	69ba      	ldr	r2, [r7, #24]
 800252e:	4313      	orrs	r3, r2
 8002530:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002540:	2b00      	cmp	r3, #0
 8002542:	f000 80ae 	beq.w	80026a2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002546:	2300      	movs	r3, #0
 8002548:	60fb      	str	r3, [r7, #12]
 800254a:	4b5d      	ldr	r3, [pc, #372]	; (80026c0 <HAL_GPIO_Init+0x300>)
 800254c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800254e:	4a5c      	ldr	r2, [pc, #368]	; (80026c0 <HAL_GPIO_Init+0x300>)
 8002550:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002554:	6453      	str	r3, [r2, #68]	; 0x44
 8002556:	4b5a      	ldr	r3, [pc, #360]	; (80026c0 <HAL_GPIO_Init+0x300>)
 8002558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800255a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800255e:	60fb      	str	r3, [r7, #12]
 8002560:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002562:	4a58      	ldr	r2, [pc, #352]	; (80026c4 <HAL_GPIO_Init+0x304>)
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	089b      	lsrs	r3, r3, #2
 8002568:	3302      	adds	r3, #2
 800256a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800256e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	f003 0303 	and.w	r3, r3, #3
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	220f      	movs	r2, #15
 800257a:	fa02 f303 	lsl.w	r3, r2, r3
 800257e:	43db      	mvns	r3, r3
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	4013      	ands	r3, r2
 8002584:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4a4f      	ldr	r2, [pc, #316]	; (80026c8 <HAL_GPIO_Init+0x308>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d025      	beq.n	80025da <HAL_GPIO_Init+0x21a>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4a4e      	ldr	r2, [pc, #312]	; (80026cc <HAL_GPIO_Init+0x30c>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d01f      	beq.n	80025d6 <HAL_GPIO_Init+0x216>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4a4d      	ldr	r2, [pc, #308]	; (80026d0 <HAL_GPIO_Init+0x310>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d019      	beq.n	80025d2 <HAL_GPIO_Init+0x212>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a4c      	ldr	r2, [pc, #304]	; (80026d4 <HAL_GPIO_Init+0x314>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d013      	beq.n	80025ce <HAL_GPIO_Init+0x20e>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4a4b      	ldr	r2, [pc, #300]	; (80026d8 <HAL_GPIO_Init+0x318>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d00d      	beq.n	80025ca <HAL_GPIO_Init+0x20a>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4a4a      	ldr	r2, [pc, #296]	; (80026dc <HAL_GPIO_Init+0x31c>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d007      	beq.n	80025c6 <HAL_GPIO_Init+0x206>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4a49      	ldr	r2, [pc, #292]	; (80026e0 <HAL_GPIO_Init+0x320>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d101      	bne.n	80025c2 <HAL_GPIO_Init+0x202>
 80025be:	2306      	movs	r3, #6
 80025c0:	e00c      	b.n	80025dc <HAL_GPIO_Init+0x21c>
 80025c2:	2307      	movs	r3, #7
 80025c4:	e00a      	b.n	80025dc <HAL_GPIO_Init+0x21c>
 80025c6:	2305      	movs	r3, #5
 80025c8:	e008      	b.n	80025dc <HAL_GPIO_Init+0x21c>
 80025ca:	2304      	movs	r3, #4
 80025cc:	e006      	b.n	80025dc <HAL_GPIO_Init+0x21c>
 80025ce:	2303      	movs	r3, #3
 80025d0:	e004      	b.n	80025dc <HAL_GPIO_Init+0x21c>
 80025d2:	2302      	movs	r3, #2
 80025d4:	e002      	b.n	80025dc <HAL_GPIO_Init+0x21c>
 80025d6:	2301      	movs	r3, #1
 80025d8:	e000      	b.n	80025dc <HAL_GPIO_Init+0x21c>
 80025da:	2300      	movs	r3, #0
 80025dc:	69fa      	ldr	r2, [r7, #28]
 80025de:	f002 0203 	and.w	r2, r2, #3
 80025e2:	0092      	lsls	r2, r2, #2
 80025e4:	4093      	lsls	r3, r2
 80025e6:	69ba      	ldr	r2, [r7, #24]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025ec:	4935      	ldr	r1, [pc, #212]	; (80026c4 <HAL_GPIO_Init+0x304>)
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	089b      	lsrs	r3, r3, #2
 80025f2:	3302      	adds	r3, #2
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025fa:	4b3a      	ldr	r3, [pc, #232]	; (80026e4 <HAL_GPIO_Init+0x324>)
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	43db      	mvns	r3, r3
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	4013      	ands	r3, r2
 8002608:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d003      	beq.n	800261e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002616:	69ba      	ldr	r2, [r7, #24]
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	4313      	orrs	r3, r2
 800261c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800261e:	4a31      	ldr	r2, [pc, #196]	; (80026e4 <HAL_GPIO_Init+0x324>)
 8002620:	69bb      	ldr	r3, [r7, #24]
 8002622:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002624:	4b2f      	ldr	r3, [pc, #188]	; (80026e4 <HAL_GPIO_Init+0x324>)
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	43db      	mvns	r3, r3
 800262e:	69ba      	ldr	r2, [r7, #24]
 8002630:	4013      	ands	r3, r2
 8002632:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d003      	beq.n	8002648 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	4313      	orrs	r3, r2
 8002646:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002648:	4a26      	ldr	r2, [pc, #152]	; (80026e4 <HAL_GPIO_Init+0x324>)
 800264a:	69bb      	ldr	r3, [r7, #24]
 800264c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800264e:	4b25      	ldr	r3, [pc, #148]	; (80026e4 <HAL_GPIO_Init+0x324>)
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	43db      	mvns	r3, r3
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	4013      	ands	r3, r2
 800265c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d003      	beq.n	8002672 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800266a:	69ba      	ldr	r2, [r7, #24]
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	4313      	orrs	r3, r2
 8002670:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002672:	4a1c      	ldr	r2, [pc, #112]	; (80026e4 <HAL_GPIO_Init+0x324>)
 8002674:	69bb      	ldr	r3, [r7, #24]
 8002676:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002678:	4b1a      	ldr	r3, [pc, #104]	; (80026e4 <HAL_GPIO_Init+0x324>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	43db      	mvns	r3, r3
 8002682:	69ba      	ldr	r2, [r7, #24]
 8002684:	4013      	ands	r3, r2
 8002686:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d003      	beq.n	800269c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	4313      	orrs	r3, r2
 800269a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800269c:	4a11      	ldr	r2, [pc, #68]	; (80026e4 <HAL_GPIO_Init+0x324>)
 800269e:	69bb      	ldr	r3, [r7, #24]
 80026a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	3301      	adds	r3, #1
 80026a6:	61fb      	str	r3, [r7, #28]
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	2b0f      	cmp	r3, #15
 80026ac:	f67f ae96 	bls.w	80023dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026b0:	bf00      	nop
 80026b2:	bf00      	nop
 80026b4:	3724      	adds	r7, #36	; 0x24
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	40023800 	.word	0x40023800
 80026c4:	40013800 	.word	0x40013800
 80026c8:	40020000 	.word	0x40020000
 80026cc:	40020400 	.word	0x40020400
 80026d0:	40020800 	.word	0x40020800
 80026d4:	40020c00 	.word	0x40020c00
 80026d8:	40021000 	.word	0x40021000
 80026dc:	40021400 	.word	0x40021400
 80026e0:	40021800 	.word	0x40021800
 80026e4:	40013c00 	.word	0x40013c00

080026e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	460b      	mov	r3, r1
 80026f2:	807b      	strh	r3, [r7, #2]
 80026f4:	4613      	mov	r3, r2
 80026f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026f8:	787b      	ldrb	r3, [r7, #1]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d003      	beq.n	8002706 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026fe:	887a      	ldrh	r2, [r7, #2]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002704:	e003      	b.n	800270e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002706:	887b      	ldrh	r3, [r7, #2]
 8002708:	041a      	lsls	r2, r3, #16
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	619a      	str	r2, [r3, #24]
}
 800270e:	bf00      	nop
 8002710:	370c      	adds	r7, #12
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
	...

0800271c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002722:	2300      	movs	r3, #0
 8002724:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002726:	2300      	movs	r3, #0
 8002728:	603b      	str	r3, [r7, #0]
 800272a:	4b20      	ldr	r3, [pc, #128]	; (80027ac <HAL_PWREx_EnableOverDrive+0x90>)
 800272c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272e:	4a1f      	ldr	r2, [pc, #124]	; (80027ac <HAL_PWREx_EnableOverDrive+0x90>)
 8002730:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002734:	6413      	str	r3, [r2, #64]	; 0x40
 8002736:	4b1d      	ldr	r3, [pc, #116]	; (80027ac <HAL_PWREx_EnableOverDrive+0x90>)
 8002738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800273e:	603b      	str	r3, [r7, #0]
 8002740:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002742:	4b1b      	ldr	r3, [pc, #108]	; (80027b0 <HAL_PWREx_EnableOverDrive+0x94>)
 8002744:	2201      	movs	r2, #1
 8002746:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002748:	f7fe ff94 	bl	8001674 <HAL_GetTick>
 800274c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800274e:	e009      	b.n	8002764 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002750:	f7fe ff90 	bl	8001674 <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800275e:	d901      	bls.n	8002764 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e01f      	b.n	80027a4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002764:	4b13      	ldr	r3, [pc, #76]	; (80027b4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800276c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002770:	d1ee      	bne.n	8002750 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002772:	4b11      	ldr	r3, [pc, #68]	; (80027b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002774:	2201      	movs	r2, #1
 8002776:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002778:	f7fe ff7c 	bl	8001674 <HAL_GetTick>
 800277c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800277e:	e009      	b.n	8002794 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002780:	f7fe ff78 	bl	8001674 <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800278e:	d901      	bls.n	8002794 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002790:	2303      	movs	r3, #3
 8002792:	e007      	b.n	80027a4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002794:	4b07      	ldr	r3, [pc, #28]	; (80027b4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800279c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80027a0:	d1ee      	bne.n	8002780 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80027a2:	2300      	movs	r3, #0
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3708      	adds	r7, #8
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	40023800 	.word	0x40023800
 80027b0:	420e0040 	.word	0x420e0040
 80027b4:	40007000 	.word	0x40007000
 80027b8:	420e0044 	.word	0x420e0044

080027bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d101      	bne.n	80027d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e0cc      	b.n	800296a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027d0:	4b68      	ldr	r3, [pc, #416]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 030f 	and.w	r3, r3, #15
 80027d8:	683a      	ldr	r2, [r7, #0]
 80027da:	429a      	cmp	r2, r3
 80027dc:	d90c      	bls.n	80027f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027de:	4b65      	ldr	r3, [pc, #404]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 80027e0:	683a      	ldr	r2, [r7, #0]
 80027e2:	b2d2      	uxtb	r2, r2
 80027e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027e6:	4b63      	ldr	r3, [pc, #396]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 030f 	and.w	r3, r3, #15
 80027ee:	683a      	ldr	r2, [r7, #0]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d001      	beq.n	80027f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e0b8      	b.n	800296a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0302 	and.w	r3, r3, #2
 8002800:	2b00      	cmp	r3, #0
 8002802:	d020      	beq.n	8002846 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0304 	and.w	r3, r3, #4
 800280c:	2b00      	cmp	r3, #0
 800280e:	d005      	beq.n	800281c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002810:	4b59      	ldr	r3, [pc, #356]	; (8002978 <HAL_RCC_ClockConfig+0x1bc>)
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	4a58      	ldr	r2, [pc, #352]	; (8002978 <HAL_RCC_ClockConfig+0x1bc>)
 8002816:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800281a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0308 	and.w	r3, r3, #8
 8002824:	2b00      	cmp	r3, #0
 8002826:	d005      	beq.n	8002834 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002828:	4b53      	ldr	r3, [pc, #332]	; (8002978 <HAL_RCC_ClockConfig+0x1bc>)
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	4a52      	ldr	r2, [pc, #328]	; (8002978 <HAL_RCC_ClockConfig+0x1bc>)
 800282e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002832:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002834:	4b50      	ldr	r3, [pc, #320]	; (8002978 <HAL_RCC_ClockConfig+0x1bc>)
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	494d      	ldr	r1, [pc, #308]	; (8002978 <HAL_RCC_ClockConfig+0x1bc>)
 8002842:	4313      	orrs	r3, r2
 8002844:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0301 	and.w	r3, r3, #1
 800284e:	2b00      	cmp	r3, #0
 8002850:	d044      	beq.n	80028dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	2b01      	cmp	r3, #1
 8002858:	d107      	bne.n	800286a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800285a:	4b47      	ldr	r3, [pc, #284]	; (8002978 <HAL_RCC_ClockConfig+0x1bc>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d119      	bne.n	800289a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e07f      	b.n	800296a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	2b02      	cmp	r3, #2
 8002870:	d003      	beq.n	800287a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002876:	2b03      	cmp	r3, #3
 8002878:	d107      	bne.n	800288a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800287a:	4b3f      	ldr	r3, [pc, #252]	; (8002978 <HAL_RCC_ClockConfig+0x1bc>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d109      	bne.n	800289a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e06f      	b.n	800296a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800288a:	4b3b      	ldr	r3, [pc, #236]	; (8002978 <HAL_RCC_ClockConfig+0x1bc>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0302 	and.w	r3, r3, #2
 8002892:	2b00      	cmp	r3, #0
 8002894:	d101      	bne.n	800289a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e067      	b.n	800296a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800289a:	4b37      	ldr	r3, [pc, #220]	; (8002978 <HAL_RCC_ClockConfig+0x1bc>)
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	f023 0203 	bic.w	r2, r3, #3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	4934      	ldr	r1, [pc, #208]	; (8002978 <HAL_RCC_ClockConfig+0x1bc>)
 80028a8:	4313      	orrs	r3, r2
 80028aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028ac:	f7fe fee2 	bl	8001674 <HAL_GetTick>
 80028b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028b2:	e00a      	b.n	80028ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028b4:	f7fe fede 	bl	8001674 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	f241 3288 	movw	r2, #5000	; 0x1388
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d901      	bls.n	80028ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e04f      	b.n	800296a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ca:	4b2b      	ldr	r3, [pc, #172]	; (8002978 <HAL_RCC_ClockConfig+0x1bc>)
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f003 020c 	and.w	r2, r3, #12
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	429a      	cmp	r2, r3
 80028da:	d1eb      	bne.n	80028b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028dc:	4b25      	ldr	r3, [pc, #148]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 030f 	and.w	r3, r3, #15
 80028e4:	683a      	ldr	r2, [r7, #0]
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d20c      	bcs.n	8002904 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ea:	4b22      	ldr	r3, [pc, #136]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 80028ec:	683a      	ldr	r2, [r7, #0]
 80028ee:	b2d2      	uxtb	r2, r2
 80028f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028f2:	4b20      	ldr	r3, [pc, #128]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 030f 	and.w	r3, r3, #15
 80028fa:	683a      	ldr	r2, [r7, #0]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d001      	beq.n	8002904 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e032      	b.n	800296a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0304 	and.w	r3, r3, #4
 800290c:	2b00      	cmp	r3, #0
 800290e:	d008      	beq.n	8002922 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002910:	4b19      	ldr	r3, [pc, #100]	; (8002978 <HAL_RCC_ClockConfig+0x1bc>)
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	4916      	ldr	r1, [pc, #88]	; (8002978 <HAL_RCC_ClockConfig+0x1bc>)
 800291e:	4313      	orrs	r3, r2
 8002920:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0308 	and.w	r3, r3, #8
 800292a:	2b00      	cmp	r3, #0
 800292c:	d009      	beq.n	8002942 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800292e:	4b12      	ldr	r3, [pc, #72]	; (8002978 <HAL_RCC_ClockConfig+0x1bc>)
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	691b      	ldr	r3, [r3, #16]
 800293a:	00db      	lsls	r3, r3, #3
 800293c:	490e      	ldr	r1, [pc, #56]	; (8002978 <HAL_RCC_ClockConfig+0x1bc>)
 800293e:	4313      	orrs	r3, r2
 8002940:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002942:	f000 f855 	bl	80029f0 <HAL_RCC_GetSysClockFreq>
 8002946:	4602      	mov	r2, r0
 8002948:	4b0b      	ldr	r3, [pc, #44]	; (8002978 <HAL_RCC_ClockConfig+0x1bc>)
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	091b      	lsrs	r3, r3, #4
 800294e:	f003 030f 	and.w	r3, r3, #15
 8002952:	490a      	ldr	r1, [pc, #40]	; (800297c <HAL_RCC_ClockConfig+0x1c0>)
 8002954:	5ccb      	ldrb	r3, [r1, r3]
 8002956:	fa22 f303 	lsr.w	r3, r2, r3
 800295a:	4a09      	ldr	r2, [pc, #36]	; (8002980 <HAL_RCC_ClockConfig+0x1c4>)
 800295c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800295e:	4b09      	ldr	r3, [pc, #36]	; (8002984 <HAL_RCC_ClockConfig+0x1c8>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4618      	mov	r0, r3
 8002964:	f7fe fe42 	bl	80015ec <HAL_InitTick>

  return HAL_OK;
 8002968:	2300      	movs	r3, #0
}
 800296a:	4618      	mov	r0, r3
 800296c:	3710      	adds	r7, #16
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	40023c00 	.word	0x40023c00
 8002978:	40023800 	.word	0x40023800
 800297c:	08005914 	.word	0x08005914
 8002980:	20000000 	.word	0x20000000
 8002984:	20000004 	.word	0x20000004

08002988 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002988:	b480      	push	{r7}
 800298a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800298c:	4b03      	ldr	r3, [pc, #12]	; (800299c <HAL_RCC_GetHCLKFreq+0x14>)
 800298e:	681b      	ldr	r3, [r3, #0]
}
 8002990:	4618      	mov	r0, r3
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	20000000 	.word	0x20000000

080029a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80029a4:	f7ff fff0 	bl	8002988 <HAL_RCC_GetHCLKFreq>
 80029a8:	4602      	mov	r2, r0
 80029aa:	4b05      	ldr	r3, [pc, #20]	; (80029c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	0a9b      	lsrs	r3, r3, #10
 80029b0:	f003 0307 	and.w	r3, r3, #7
 80029b4:	4903      	ldr	r1, [pc, #12]	; (80029c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029b6:	5ccb      	ldrb	r3, [r1, r3]
 80029b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029bc:	4618      	mov	r0, r3
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	40023800 	.word	0x40023800
 80029c4:	08005924 	.word	0x08005924

080029c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80029cc:	f7ff ffdc 	bl	8002988 <HAL_RCC_GetHCLKFreq>
 80029d0:	4602      	mov	r2, r0
 80029d2:	4b05      	ldr	r3, [pc, #20]	; (80029e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	0b5b      	lsrs	r3, r3, #13
 80029d8:	f003 0307 	and.w	r3, r3, #7
 80029dc:	4903      	ldr	r1, [pc, #12]	; (80029ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80029de:	5ccb      	ldrb	r3, [r1, r3]
 80029e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	40023800 	.word	0x40023800
 80029ec:	08005924 	.word	0x08005924

080029f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029f4:	b0ae      	sub	sp, #184	; 0xb8
 80029f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80029f8:	2300      	movs	r3, #0
 80029fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80029fe:	2300      	movs	r3, #0
 8002a00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002a04:	2300      	movs	r3, #0
 8002a06:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002a10:	2300      	movs	r3, #0
 8002a12:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a16:	4bcb      	ldr	r3, [pc, #812]	; (8002d44 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	f003 030c 	and.w	r3, r3, #12
 8002a1e:	2b0c      	cmp	r3, #12
 8002a20:	f200 8206 	bhi.w	8002e30 <HAL_RCC_GetSysClockFreq+0x440>
 8002a24:	a201      	add	r2, pc, #4	; (adr r2, 8002a2c <HAL_RCC_GetSysClockFreq+0x3c>)
 8002a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a2a:	bf00      	nop
 8002a2c:	08002a61 	.word	0x08002a61
 8002a30:	08002e31 	.word	0x08002e31
 8002a34:	08002e31 	.word	0x08002e31
 8002a38:	08002e31 	.word	0x08002e31
 8002a3c:	08002a69 	.word	0x08002a69
 8002a40:	08002e31 	.word	0x08002e31
 8002a44:	08002e31 	.word	0x08002e31
 8002a48:	08002e31 	.word	0x08002e31
 8002a4c:	08002a71 	.word	0x08002a71
 8002a50:	08002e31 	.word	0x08002e31
 8002a54:	08002e31 	.word	0x08002e31
 8002a58:	08002e31 	.word	0x08002e31
 8002a5c:	08002c61 	.word	0x08002c61
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a60:	4bb9      	ldr	r3, [pc, #740]	; (8002d48 <HAL_RCC_GetSysClockFreq+0x358>)
 8002a62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002a66:	e1e7      	b.n	8002e38 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a68:	4bb8      	ldr	r3, [pc, #736]	; (8002d4c <HAL_RCC_GetSysClockFreq+0x35c>)
 8002a6a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002a6e:	e1e3      	b.n	8002e38 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a70:	4bb4      	ldr	r3, [pc, #720]	; (8002d44 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a78:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a7c:	4bb1      	ldr	r3, [pc, #708]	; (8002d44 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d071      	beq.n	8002b6c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a88:	4bae      	ldr	r3, [pc, #696]	; (8002d44 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	099b      	lsrs	r3, r3, #6
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002a94:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002a98:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002a9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002aa0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002aaa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002aae:	4622      	mov	r2, r4
 8002ab0:	462b      	mov	r3, r5
 8002ab2:	f04f 0000 	mov.w	r0, #0
 8002ab6:	f04f 0100 	mov.w	r1, #0
 8002aba:	0159      	lsls	r1, r3, #5
 8002abc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ac0:	0150      	lsls	r0, r2, #5
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	4621      	mov	r1, r4
 8002ac8:	1a51      	subs	r1, r2, r1
 8002aca:	6439      	str	r1, [r7, #64]	; 0x40
 8002acc:	4629      	mov	r1, r5
 8002ace:	eb63 0301 	sbc.w	r3, r3, r1
 8002ad2:	647b      	str	r3, [r7, #68]	; 0x44
 8002ad4:	f04f 0200 	mov.w	r2, #0
 8002ad8:	f04f 0300 	mov.w	r3, #0
 8002adc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002ae0:	4649      	mov	r1, r9
 8002ae2:	018b      	lsls	r3, r1, #6
 8002ae4:	4641      	mov	r1, r8
 8002ae6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002aea:	4641      	mov	r1, r8
 8002aec:	018a      	lsls	r2, r1, #6
 8002aee:	4641      	mov	r1, r8
 8002af0:	1a51      	subs	r1, r2, r1
 8002af2:	63b9      	str	r1, [r7, #56]	; 0x38
 8002af4:	4649      	mov	r1, r9
 8002af6:	eb63 0301 	sbc.w	r3, r3, r1
 8002afa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002afc:	f04f 0200 	mov.w	r2, #0
 8002b00:	f04f 0300 	mov.w	r3, #0
 8002b04:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002b08:	4649      	mov	r1, r9
 8002b0a:	00cb      	lsls	r3, r1, #3
 8002b0c:	4641      	mov	r1, r8
 8002b0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b12:	4641      	mov	r1, r8
 8002b14:	00ca      	lsls	r2, r1, #3
 8002b16:	4610      	mov	r0, r2
 8002b18:	4619      	mov	r1, r3
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	4622      	mov	r2, r4
 8002b1e:	189b      	adds	r3, r3, r2
 8002b20:	633b      	str	r3, [r7, #48]	; 0x30
 8002b22:	462b      	mov	r3, r5
 8002b24:	460a      	mov	r2, r1
 8002b26:	eb42 0303 	adc.w	r3, r2, r3
 8002b2a:	637b      	str	r3, [r7, #52]	; 0x34
 8002b2c:	f04f 0200 	mov.w	r2, #0
 8002b30:	f04f 0300 	mov.w	r3, #0
 8002b34:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002b38:	4629      	mov	r1, r5
 8002b3a:	024b      	lsls	r3, r1, #9
 8002b3c:	4621      	mov	r1, r4
 8002b3e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002b42:	4621      	mov	r1, r4
 8002b44:	024a      	lsls	r2, r1, #9
 8002b46:	4610      	mov	r0, r2
 8002b48:	4619      	mov	r1, r3
 8002b4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002b54:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002b58:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002b5c:	f7fd fba8 	bl	80002b0 <__aeabi_uldivmod>
 8002b60:	4602      	mov	r2, r0
 8002b62:	460b      	mov	r3, r1
 8002b64:	4613      	mov	r3, r2
 8002b66:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002b6a:	e067      	b.n	8002c3c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b6c:	4b75      	ldr	r3, [pc, #468]	; (8002d44 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	099b      	lsrs	r3, r3, #6
 8002b72:	2200      	movs	r2, #0
 8002b74:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002b78:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002b7c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002b80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b84:	67bb      	str	r3, [r7, #120]	; 0x78
 8002b86:	2300      	movs	r3, #0
 8002b88:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002b8a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002b8e:	4622      	mov	r2, r4
 8002b90:	462b      	mov	r3, r5
 8002b92:	f04f 0000 	mov.w	r0, #0
 8002b96:	f04f 0100 	mov.w	r1, #0
 8002b9a:	0159      	lsls	r1, r3, #5
 8002b9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ba0:	0150      	lsls	r0, r2, #5
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	460b      	mov	r3, r1
 8002ba6:	4621      	mov	r1, r4
 8002ba8:	1a51      	subs	r1, r2, r1
 8002baa:	62b9      	str	r1, [r7, #40]	; 0x28
 8002bac:	4629      	mov	r1, r5
 8002bae:	eb63 0301 	sbc.w	r3, r3, r1
 8002bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bb4:	f04f 0200 	mov.w	r2, #0
 8002bb8:	f04f 0300 	mov.w	r3, #0
 8002bbc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002bc0:	4649      	mov	r1, r9
 8002bc2:	018b      	lsls	r3, r1, #6
 8002bc4:	4641      	mov	r1, r8
 8002bc6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002bca:	4641      	mov	r1, r8
 8002bcc:	018a      	lsls	r2, r1, #6
 8002bce:	4641      	mov	r1, r8
 8002bd0:	ebb2 0a01 	subs.w	sl, r2, r1
 8002bd4:	4649      	mov	r1, r9
 8002bd6:	eb63 0b01 	sbc.w	fp, r3, r1
 8002bda:	f04f 0200 	mov.w	r2, #0
 8002bde:	f04f 0300 	mov.w	r3, #0
 8002be2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002be6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002bea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002bee:	4692      	mov	sl, r2
 8002bf0:	469b      	mov	fp, r3
 8002bf2:	4623      	mov	r3, r4
 8002bf4:	eb1a 0303 	adds.w	r3, sl, r3
 8002bf8:	623b      	str	r3, [r7, #32]
 8002bfa:	462b      	mov	r3, r5
 8002bfc:	eb4b 0303 	adc.w	r3, fp, r3
 8002c00:	627b      	str	r3, [r7, #36]	; 0x24
 8002c02:	f04f 0200 	mov.w	r2, #0
 8002c06:	f04f 0300 	mov.w	r3, #0
 8002c0a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002c0e:	4629      	mov	r1, r5
 8002c10:	028b      	lsls	r3, r1, #10
 8002c12:	4621      	mov	r1, r4
 8002c14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c18:	4621      	mov	r1, r4
 8002c1a:	028a      	lsls	r2, r1, #10
 8002c1c:	4610      	mov	r0, r2
 8002c1e:	4619      	mov	r1, r3
 8002c20:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002c24:	2200      	movs	r2, #0
 8002c26:	673b      	str	r3, [r7, #112]	; 0x70
 8002c28:	677a      	str	r2, [r7, #116]	; 0x74
 8002c2a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002c2e:	f7fd fb3f 	bl	80002b0 <__aeabi_uldivmod>
 8002c32:	4602      	mov	r2, r0
 8002c34:	460b      	mov	r3, r1
 8002c36:	4613      	mov	r3, r2
 8002c38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c3c:	4b41      	ldr	r3, [pc, #260]	; (8002d44 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	0c1b      	lsrs	r3, r3, #16
 8002c42:	f003 0303 	and.w	r3, r3, #3
 8002c46:	3301      	adds	r3, #1
 8002c48:	005b      	lsls	r3, r3, #1
 8002c4a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002c4e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002c52:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002c56:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c5a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002c5e:	e0eb      	b.n	8002e38 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c60:	4b38      	ldr	r3, [pc, #224]	; (8002d44 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c68:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c6c:	4b35      	ldr	r3, [pc, #212]	; (8002d44 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d06b      	beq.n	8002d50 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c78:	4b32      	ldr	r3, [pc, #200]	; (8002d44 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	099b      	lsrs	r3, r3, #6
 8002c7e:	2200      	movs	r2, #0
 8002c80:	66bb      	str	r3, [r7, #104]	; 0x68
 8002c82:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002c84:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c8a:	663b      	str	r3, [r7, #96]	; 0x60
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	667b      	str	r3, [r7, #100]	; 0x64
 8002c90:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002c94:	4622      	mov	r2, r4
 8002c96:	462b      	mov	r3, r5
 8002c98:	f04f 0000 	mov.w	r0, #0
 8002c9c:	f04f 0100 	mov.w	r1, #0
 8002ca0:	0159      	lsls	r1, r3, #5
 8002ca2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ca6:	0150      	lsls	r0, r2, #5
 8002ca8:	4602      	mov	r2, r0
 8002caa:	460b      	mov	r3, r1
 8002cac:	4621      	mov	r1, r4
 8002cae:	1a51      	subs	r1, r2, r1
 8002cb0:	61b9      	str	r1, [r7, #24]
 8002cb2:	4629      	mov	r1, r5
 8002cb4:	eb63 0301 	sbc.w	r3, r3, r1
 8002cb8:	61fb      	str	r3, [r7, #28]
 8002cba:	f04f 0200 	mov.w	r2, #0
 8002cbe:	f04f 0300 	mov.w	r3, #0
 8002cc2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002cc6:	4659      	mov	r1, fp
 8002cc8:	018b      	lsls	r3, r1, #6
 8002cca:	4651      	mov	r1, sl
 8002ccc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002cd0:	4651      	mov	r1, sl
 8002cd2:	018a      	lsls	r2, r1, #6
 8002cd4:	4651      	mov	r1, sl
 8002cd6:	ebb2 0801 	subs.w	r8, r2, r1
 8002cda:	4659      	mov	r1, fp
 8002cdc:	eb63 0901 	sbc.w	r9, r3, r1
 8002ce0:	f04f 0200 	mov.w	r2, #0
 8002ce4:	f04f 0300 	mov.w	r3, #0
 8002ce8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002cec:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002cf0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002cf4:	4690      	mov	r8, r2
 8002cf6:	4699      	mov	r9, r3
 8002cf8:	4623      	mov	r3, r4
 8002cfa:	eb18 0303 	adds.w	r3, r8, r3
 8002cfe:	613b      	str	r3, [r7, #16]
 8002d00:	462b      	mov	r3, r5
 8002d02:	eb49 0303 	adc.w	r3, r9, r3
 8002d06:	617b      	str	r3, [r7, #20]
 8002d08:	f04f 0200 	mov.w	r2, #0
 8002d0c:	f04f 0300 	mov.w	r3, #0
 8002d10:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002d14:	4629      	mov	r1, r5
 8002d16:	024b      	lsls	r3, r1, #9
 8002d18:	4621      	mov	r1, r4
 8002d1a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d1e:	4621      	mov	r1, r4
 8002d20:	024a      	lsls	r2, r1, #9
 8002d22:	4610      	mov	r0, r2
 8002d24:	4619      	mov	r1, r3
 8002d26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	65bb      	str	r3, [r7, #88]	; 0x58
 8002d2e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002d30:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002d34:	f7fd fabc 	bl	80002b0 <__aeabi_uldivmod>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002d42:	e065      	b.n	8002e10 <HAL_RCC_GetSysClockFreq+0x420>
 8002d44:	40023800 	.word	0x40023800
 8002d48:	00f42400 	.word	0x00f42400
 8002d4c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d50:	4b3d      	ldr	r3, [pc, #244]	; (8002e48 <HAL_RCC_GetSysClockFreq+0x458>)
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	099b      	lsrs	r3, r3, #6
 8002d56:	2200      	movs	r2, #0
 8002d58:	4618      	mov	r0, r3
 8002d5a:	4611      	mov	r1, r2
 8002d5c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002d60:	653b      	str	r3, [r7, #80]	; 0x50
 8002d62:	2300      	movs	r3, #0
 8002d64:	657b      	str	r3, [r7, #84]	; 0x54
 8002d66:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002d6a:	4642      	mov	r2, r8
 8002d6c:	464b      	mov	r3, r9
 8002d6e:	f04f 0000 	mov.w	r0, #0
 8002d72:	f04f 0100 	mov.w	r1, #0
 8002d76:	0159      	lsls	r1, r3, #5
 8002d78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d7c:	0150      	lsls	r0, r2, #5
 8002d7e:	4602      	mov	r2, r0
 8002d80:	460b      	mov	r3, r1
 8002d82:	4641      	mov	r1, r8
 8002d84:	1a51      	subs	r1, r2, r1
 8002d86:	60b9      	str	r1, [r7, #8]
 8002d88:	4649      	mov	r1, r9
 8002d8a:	eb63 0301 	sbc.w	r3, r3, r1
 8002d8e:	60fb      	str	r3, [r7, #12]
 8002d90:	f04f 0200 	mov.w	r2, #0
 8002d94:	f04f 0300 	mov.w	r3, #0
 8002d98:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002d9c:	4659      	mov	r1, fp
 8002d9e:	018b      	lsls	r3, r1, #6
 8002da0:	4651      	mov	r1, sl
 8002da2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002da6:	4651      	mov	r1, sl
 8002da8:	018a      	lsls	r2, r1, #6
 8002daa:	4651      	mov	r1, sl
 8002dac:	1a54      	subs	r4, r2, r1
 8002dae:	4659      	mov	r1, fp
 8002db0:	eb63 0501 	sbc.w	r5, r3, r1
 8002db4:	f04f 0200 	mov.w	r2, #0
 8002db8:	f04f 0300 	mov.w	r3, #0
 8002dbc:	00eb      	lsls	r3, r5, #3
 8002dbe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002dc2:	00e2      	lsls	r2, r4, #3
 8002dc4:	4614      	mov	r4, r2
 8002dc6:	461d      	mov	r5, r3
 8002dc8:	4643      	mov	r3, r8
 8002dca:	18e3      	adds	r3, r4, r3
 8002dcc:	603b      	str	r3, [r7, #0]
 8002dce:	464b      	mov	r3, r9
 8002dd0:	eb45 0303 	adc.w	r3, r5, r3
 8002dd4:	607b      	str	r3, [r7, #4]
 8002dd6:	f04f 0200 	mov.w	r2, #0
 8002dda:	f04f 0300 	mov.w	r3, #0
 8002dde:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002de2:	4629      	mov	r1, r5
 8002de4:	028b      	lsls	r3, r1, #10
 8002de6:	4621      	mov	r1, r4
 8002de8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002dec:	4621      	mov	r1, r4
 8002dee:	028a      	lsls	r2, r1, #10
 8002df0:	4610      	mov	r0, r2
 8002df2:	4619      	mov	r1, r3
 8002df4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002df8:	2200      	movs	r2, #0
 8002dfa:	64bb      	str	r3, [r7, #72]	; 0x48
 8002dfc:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002dfe:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002e02:	f7fd fa55 	bl	80002b0 <__aeabi_uldivmod>
 8002e06:	4602      	mov	r2, r0
 8002e08:	460b      	mov	r3, r1
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002e10:	4b0d      	ldr	r3, [pc, #52]	; (8002e48 <HAL_RCC_GetSysClockFreq+0x458>)
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	0f1b      	lsrs	r3, r3, #28
 8002e16:	f003 0307 	and.w	r3, r3, #7
 8002e1a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002e1e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002e22:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002e26:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e2a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002e2e:	e003      	b.n	8002e38 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e30:	4b06      	ldr	r3, [pc, #24]	; (8002e4c <HAL_RCC_GetSysClockFreq+0x45c>)
 8002e32:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002e36:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e38:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	37b8      	adds	r7, #184	; 0xb8
 8002e40:	46bd      	mov	sp, r7
 8002e42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e46:	bf00      	nop
 8002e48:	40023800 	.word	0x40023800
 8002e4c:	00f42400 	.word	0x00f42400

08002e50 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b086      	sub	sp, #24
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d101      	bne.n	8002e62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e28d      	b.n	800337e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0301 	and.w	r3, r3, #1
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	f000 8083 	beq.w	8002f76 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002e70:	4b94      	ldr	r3, [pc, #592]	; (80030c4 <HAL_RCC_OscConfig+0x274>)
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	f003 030c 	and.w	r3, r3, #12
 8002e78:	2b04      	cmp	r3, #4
 8002e7a:	d019      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002e7c:	4b91      	ldr	r3, [pc, #580]	; (80030c4 <HAL_RCC_OscConfig+0x274>)
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002e84:	2b08      	cmp	r3, #8
 8002e86:	d106      	bne.n	8002e96 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002e88:	4b8e      	ldr	r3, [pc, #568]	; (80030c4 <HAL_RCC_OscConfig+0x274>)
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e94:	d00c      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e96:	4b8b      	ldr	r3, [pc, #556]	; (80030c4 <HAL_RCC_OscConfig+0x274>)
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002e9e:	2b0c      	cmp	r3, #12
 8002ea0:	d112      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ea2:	4b88      	ldr	r3, [pc, #544]	; (80030c4 <HAL_RCC_OscConfig+0x274>)
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eaa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002eae:	d10b      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eb0:	4b84      	ldr	r3, [pc, #528]	; (80030c4 <HAL_RCC_OscConfig+0x274>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d05b      	beq.n	8002f74 <HAL_RCC_OscConfig+0x124>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d157      	bne.n	8002f74 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e25a      	b.n	800337e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ed0:	d106      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x90>
 8002ed2:	4b7c      	ldr	r3, [pc, #496]	; (80030c4 <HAL_RCC_OscConfig+0x274>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a7b      	ldr	r2, [pc, #492]	; (80030c4 <HAL_RCC_OscConfig+0x274>)
 8002ed8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002edc:	6013      	str	r3, [r2, #0]
 8002ede:	e01d      	b.n	8002f1c <HAL_RCC_OscConfig+0xcc>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ee8:	d10c      	bne.n	8002f04 <HAL_RCC_OscConfig+0xb4>
 8002eea:	4b76      	ldr	r3, [pc, #472]	; (80030c4 <HAL_RCC_OscConfig+0x274>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a75      	ldr	r2, [pc, #468]	; (80030c4 <HAL_RCC_OscConfig+0x274>)
 8002ef0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ef4:	6013      	str	r3, [r2, #0]
 8002ef6:	4b73      	ldr	r3, [pc, #460]	; (80030c4 <HAL_RCC_OscConfig+0x274>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a72      	ldr	r2, [pc, #456]	; (80030c4 <HAL_RCC_OscConfig+0x274>)
 8002efc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f00:	6013      	str	r3, [r2, #0]
 8002f02:	e00b      	b.n	8002f1c <HAL_RCC_OscConfig+0xcc>
 8002f04:	4b6f      	ldr	r3, [pc, #444]	; (80030c4 <HAL_RCC_OscConfig+0x274>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a6e      	ldr	r2, [pc, #440]	; (80030c4 <HAL_RCC_OscConfig+0x274>)
 8002f0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f0e:	6013      	str	r3, [r2, #0]
 8002f10:	4b6c      	ldr	r3, [pc, #432]	; (80030c4 <HAL_RCC_OscConfig+0x274>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a6b      	ldr	r2, [pc, #428]	; (80030c4 <HAL_RCC_OscConfig+0x274>)
 8002f16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d013      	beq.n	8002f4c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f24:	f7fe fba6 	bl	8001674 <HAL_GetTick>
 8002f28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f2a:	e008      	b.n	8002f3e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f2c:	f7fe fba2 	bl	8001674 <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	2b64      	cmp	r3, #100	; 0x64
 8002f38:	d901      	bls.n	8002f3e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e21f      	b.n	800337e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f3e:	4b61      	ldr	r3, [pc, #388]	; (80030c4 <HAL_RCC_OscConfig+0x274>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d0f0      	beq.n	8002f2c <HAL_RCC_OscConfig+0xdc>
 8002f4a:	e014      	b.n	8002f76 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f4c:	f7fe fb92 	bl	8001674 <HAL_GetTick>
 8002f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f52:	e008      	b.n	8002f66 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f54:	f7fe fb8e 	bl	8001674 <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	2b64      	cmp	r3, #100	; 0x64
 8002f60:	d901      	bls.n	8002f66 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e20b      	b.n	800337e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f66:	4b57      	ldr	r3, [pc, #348]	; (80030c4 <HAL_RCC_OscConfig+0x274>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d1f0      	bne.n	8002f54 <HAL_RCC_OscConfig+0x104>
 8002f72:	e000      	b.n	8002f76 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0302 	and.w	r3, r3, #2
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d06f      	beq.n	8003062 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002f82:	4b50      	ldr	r3, [pc, #320]	; (80030c4 <HAL_RCC_OscConfig+0x274>)
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f003 030c 	and.w	r3, r3, #12
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d017      	beq.n	8002fbe <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002f8e:	4b4d      	ldr	r3, [pc, #308]	; (80030c4 <HAL_RCC_OscConfig+0x274>)
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002f96:	2b08      	cmp	r3, #8
 8002f98:	d105      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002f9a:	4b4a      	ldr	r3, [pc, #296]	; (80030c4 <HAL_RCC_OscConfig+0x274>)
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d00b      	beq.n	8002fbe <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fa6:	4b47      	ldr	r3, [pc, #284]	; (80030c4 <HAL_RCC_OscConfig+0x274>)
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002fae:	2b0c      	cmp	r3, #12
 8002fb0:	d11c      	bne.n	8002fec <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fb2:	4b44      	ldr	r3, [pc, #272]	; (80030c4 <HAL_RCC_OscConfig+0x274>)
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d116      	bne.n	8002fec <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fbe:	4b41      	ldr	r3, [pc, #260]	; (80030c4 <HAL_RCC_OscConfig+0x274>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0302 	and.w	r3, r3, #2
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d005      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x186>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	68db      	ldr	r3, [r3, #12]
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d001      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e1d3      	b.n	800337e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fd6:	4b3b      	ldr	r3, [pc, #236]	; (80030c4 <HAL_RCC_OscConfig+0x274>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	00db      	lsls	r3, r3, #3
 8002fe4:	4937      	ldr	r1, [pc, #220]	; (80030c4 <HAL_RCC_OscConfig+0x274>)
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fea:	e03a      	b.n	8003062 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d020      	beq.n	8003036 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ff4:	4b34      	ldr	r3, [pc, #208]	; (80030c8 <HAL_RCC_OscConfig+0x278>)
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ffa:	f7fe fb3b 	bl	8001674 <HAL_GetTick>
 8002ffe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003000:	e008      	b.n	8003014 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003002:	f7fe fb37 	bl	8001674 <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	2b02      	cmp	r3, #2
 800300e:	d901      	bls.n	8003014 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	e1b4      	b.n	800337e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003014:	4b2b      	ldr	r3, [pc, #172]	; (80030c4 <HAL_RCC_OscConfig+0x274>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0302 	and.w	r3, r3, #2
 800301c:	2b00      	cmp	r3, #0
 800301e:	d0f0      	beq.n	8003002 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003020:	4b28      	ldr	r3, [pc, #160]	; (80030c4 <HAL_RCC_OscConfig+0x274>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	691b      	ldr	r3, [r3, #16]
 800302c:	00db      	lsls	r3, r3, #3
 800302e:	4925      	ldr	r1, [pc, #148]	; (80030c4 <HAL_RCC_OscConfig+0x274>)
 8003030:	4313      	orrs	r3, r2
 8003032:	600b      	str	r3, [r1, #0]
 8003034:	e015      	b.n	8003062 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003036:	4b24      	ldr	r3, [pc, #144]	; (80030c8 <HAL_RCC_OscConfig+0x278>)
 8003038:	2200      	movs	r2, #0
 800303a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800303c:	f7fe fb1a 	bl	8001674 <HAL_GetTick>
 8003040:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003042:	e008      	b.n	8003056 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003044:	f7fe fb16 	bl	8001674 <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	2b02      	cmp	r3, #2
 8003050:	d901      	bls.n	8003056 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e193      	b.n	800337e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003056:	4b1b      	ldr	r3, [pc, #108]	; (80030c4 <HAL_RCC_OscConfig+0x274>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0302 	and.w	r3, r3, #2
 800305e:	2b00      	cmp	r3, #0
 8003060:	d1f0      	bne.n	8003044 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0308 	and.w	r3, r3, #8
 800306a:	2b00      	cmp	r3, #0
 800306c:	d036      	beq.n	80030dc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	695b      	ldr	r3, [r3, #20]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d016      	beq.n	80030a4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003076:	4b15      	ldr	r3, [pc, #84]	; (80030cc <HAL_RCC_OscConfig+0x27c>)
 8003078:	2201      	movs	r2, #1
 800307a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800307c:	f7fe fafa 	bl	8001674 <HAL_GetTick>
 8003080:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003082:	e008      	b.n	8003096 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003084:	f7fe faf6 	bl	8001674 <HAL_GetTick>
 8003088:	4602      	mov	r2, r0
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	2b02      	cmp	r3, #2
 8003090:	d901      	bls.n	8003096 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e173      	b.n	800337e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003096:	4b0b      	ldr	r3, [pc, #44]	; (80030c4 <HAL_RCC_OscConfig+0x274>)
 8003098:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800309a:	f003 0302 	and.w	r3, r3, #2
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d0f0      	beq.n	8003084 <HAL_RCC_OscConfig+0x234>
 80030a2:	e01b      	b.n	80030dc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030a4:	4b09      	ldr	r3, [pc, #36]	; (80030cc <HAL_RCC_OscConfig+0x27c>)
 80030a6:	2200      	movs	r2, #0
 80030a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030aa:	f7fe fae3 	bl	8001674 <HAL_GetTick>
 80030ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030b0:	e00e      	b.n	80030d0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030b2:	f7fe fadf 	bl	8001674 <HAL_GetTick>
 80030b6:	4602      	mov	r2, r0
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	2b02      	cmp	r3, #2
 80030be:	d907      	bls.n	80030d0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80030c0:	2303      	movs	r3, #3
 80030c2:	e15c      	b.n	800337e <HAL_RCC_OscConfig+0x52e>
 80030c4:	40023800 	.word	0x40023800
 80030c8:	42470000 	.word	0x42470000
 80030cc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030d0:	4b8a      	ldr	r3, [pc, #552]	; (80032fc <HAL_RCC_OscConfig+0x4ac>)
 80030d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030d4:	f003 0302 	and.w	r3, r3, #2
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d1ea      	bne.n	80030b2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0304 	and.w	r3, r3, #4
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	f000 8097 	beq.w	8003218 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030ea:	2300      	movs	r3, #0
 80030ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030ee:	4b83      	ldr	r3, [pc, #524]	; (80032fc <HAL_RCC_OscConfig+0x4ac>)
 80030f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d10f      	bne.n	800311a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030fa:	2300      	movs	r3, #0
 80030fc:	60bb      	str	r3, [r7, #8]
 80030fe:	4b7f      	ldr	r3, [pc, #508]	; (80032fc <HAL_RCC_OscConfig+0x4ac>)
 8003100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003102:	4a7e      	ldr	r2, [pc, #504]	; (80032fc <HAL_RCC_OscConfig+0x4ac>)
 8003104:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003108:	6413      	str	r3, [r2, #64]	; 0x40
 800310a:	4b7c      	ldr	r3, [pc, #496]	; (80032fc <HAL_RCC_OscConfig+0x4ac>)
 800310c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003112:	60bb      	str	r3, [r7, #8]
 8003114:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003116:	2301      	movs	r3, #1
 8003118:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800311a:	4b79      	ldr	r3, [pc, #484]	; (8003300 <HAL_RCC_OscConfig+0x4b0>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003122:	2b00      	cmp	r3, #0
 8003124:	d118      	bne.n	8003158 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003126:	4b76      	ldr	r3, [pc, #472]	; (8003300 <HAL_RCC_OscConfig+0x4b0>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a75      	ldr	r2, [pc, #468]	; (8003300 <HAL_RCC_OscConfig+0x4b0>)
 800312c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003130:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003132:	f7fe fa9f 	bl	8001674 <HAL_GetTick>
 8003136:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003138:	e008      	b.n	800314c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800313a:	f7fe fa9b 	bl	8001674 <HAL_GetTick>
 800313e:	4602      	mov	r2, r0
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	2b02      	cmp	r3, #2
 8003146:	d901      	bls.n	800314c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003148:	2303      	movs	r3, #3
 800314a:	e118      	b.n	800337e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800314c:	4b6c      	ldr	r3, [pc, #432]	; (8003300 <HAL_RCC_OscConfig+0x4b0>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003154:	2b00      	cmp	r3, #0
 8003156:	d0f0      	beq.n	800313a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	2b01      	cmp	r3, #1
 800315e:	d106      	bne.n	800316e <HAL_RCC_OscConfig+0x31e>
 8003160:	4b66      	ldr	r3, [pc, #408]	; (80032fc <HAL_RCC_OscConfig+0x4ac>)
 8003162:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003164:	4a65      	ldr	r2, [pc, #404]	; (80032fc <HAL_RCC_OscConfig+0x4ac>)
 8003166:	f043 0301 	orr.w	r3, r3, #1
 800316a:	6713      	str	r3, [r2, #112]	; 0x70
 800316c:	e01c      	b.n	80031a8 <HAL_RCC_OscConfig+0x358>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	2b05      	cmp	r3, #5
 8003174:	d10c      	bne.n	8003190 <HAL_RCC_OscConfig+0x340>
 8003176:	4b61      	ldr	r3, [pc, #388]	; (80032fc <HAL_RCC_OscConfig+0x4ac>)
 8003178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800317a:	4a60      	ldr	r2, [pc, #384]	; (80032fc <HAL_RCC_OscConfig+0x4ac>)
 800317c:	f043 0304 	orr.w	r3, r3, #4
 8003180:	6713      	str	r3, [r2, #112]	; 0x70
 8003182:	4b5e      	ldr	r3, [pc, #376]	; (80032fc <HAL_RCC_OscConfig+0x4ac>)
 8003184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003186:	4a5d      	ldr	r2, [pc, #372]	; (80032fc <HAL_RCC_OscConfig+0x4ac>)
 8003188:	f043 0301 	orr.w	r3, r3, #1
 800318c:	6713      	str	r3, [r2, #112]	; 0x70
 800318e:	e00b      	b.n	80031a8 <HAL_RCC_OscConfig+0x358>
 8003190:	4b5a      	ldr	r3, [pc, #360]	; (80032fc <HAL_RCC_OscConfig+0x4ac>)
 8003192:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003194:	4a59      	ldr	r2, [pc, #356]	; (80032fc <HAL_RCC_OscConfig+0x4ac>)
 8003196:	f023 0301 	bic.w	r3, r3, #1
 800319a:	6713      	str	r3, [r2, #112]	; 0x70
 800319c:	4b57      	ldr	r3, [pc, #348]	; (80032fc <HAL_RCC_OscConfig+0x4ac>)
 800319e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a0:	4a56      	ldr	r2, [pc, #344]	; (80032fc <HAL_RCC_OscConfig+0x4ac>)
 80031a2:	f023 0304 	bic.w	r3, r3, #4
 80031a6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d015      	beq.n	80031dc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031b0:	f7fe fa60 	bl	8001674 <HAL_GetTick>
 80031b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031b6:	e00a      	b.n	80031ce <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031b8:	f7fe fa5c 	bl	8001674 <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d901      	bls.n	80031ce <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e0d7      	b.n	800337e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031ce:	4b4b      	ldr	r3, [pc, #300]	; (80032fc <HAL_RCC_OscConfig+0x4ac>)
 80031d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d2:	f003 0302 	and.w	r3, r3, #2
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d0ee      	beq.n	80031b8 <HAL_RCC_OscConfig+0x368>
 80031da:	e014      	b.n	8003206 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031dc:	f7fe fa4a 	bl	8001674 <HAL_GetTick>
 80031e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031e2:	e00a      	b.n	80031fa <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031e4:	f7fe fa46 	bl	8001674 <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d901      	bls.n	80031fa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e0c1      	b.n	800337e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031fa:	4b40      	ldr	r3, [pc, #256]	; (80032fc <HAL_RCC_OscConfig+0x4ac>)
 80031fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031fe:	f003 0302 	and.w	r3, r3, #2
 8003202:	2b00      	cmp	r3, #0
 8003204:	d1ee      	bne.n	80031e4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003206:	7dfb      	ldrb	r3, [r7, #23]
 8003208:	2b01      	cmp	r3, #1
 800320a:	d105      	bne.n	8003218 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800320c:	4b3b      	ldr	r3, [pc, #236]	; (80032fc <HAL_RCC_OscConfig+0x4ac>)
 800320e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003210:	4a3a      	ldr	r2, [pc, #232]	; (80032fc <HAL_RCC_OscConfig+0x4ac>)
 8003212:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003216:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	699b      	ldr	r3, [r3, #24]
 800321c:	2b00      	cmp	r3, #0
 800321e:	f000 80ad 	beq.w	800337c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003222:	4b36      	ldr	r3, [pc, #216]	; (80032fc <HAL_RCC_OscConfig+0x4ac>)
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	f003 030c 	and.w	r3, r3, #12
 800322a:	2b08      	cmp	r3, #8
 800322c:	d060      	beq.n	80032f0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	699b      	ldr	r3, [r3, #24]
 8003232:	2b02      	cmp	r3, #2
 8003234:	d145      	bne.n	80032c2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003236:	4b33      	ldr	r3, [pc, #204]	; (8003304 <HAL_RCC_OscConfig+0x4b4>)
 8003238:	2200      	movs	r2, #0
 800323a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800323c:	f7fe fa1a 	bl	8001674 <HAL_GetTick>
 8003240:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003242:	e008      	b.n	8003256 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003244:	f7fe fa16 	bl	8001674 <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	2b02      	cmp	r3, #2
 8003250:	d901      	bls.n	8003256 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003252:	2303      	movs	r3, #3
 8003254:	e093      	b.n	800337e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003256:	4b29      	ldr	r3, [pc, #164]	; (80032fc <HAL_RCC_OscConfig+0x4ac>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d1f0      	bne.n	8003244 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	69da      	ldr	r2, [r3, #28]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6a1b      	ldr	r3, [r3, #32]
 800326a:	431a      	orrs	r2, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003270:	019b      	lsls	r3, r3, #6
 8003272:	431a      	orrs	r2, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003278:	085b      	lsrs	r3, r3, #1
 800327a:	3b01      	subs	r3, #1
 800327c:	041b      	lsls	r3, r3, #16
 800327e:	431a      	orrs	r2, r3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003284:	061b      	lsls	r3, r3, #24
 8003286:	431a      	orrs	r2, r3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328c:	071b      	lsls	r3, r3, #28
 800328e:	491b      	ldr	r1, [pc, #108]	; (80032fc <HAL_RCC_OscConfig+0x4ac>)
 8003290:	4313      	orrs	r3, r2
 8003292:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003294:	4b1b      	ldr	r3, [pc, #108]	; (8003304 <HAL_RCC_OscConfig+0x4b4>)
 8003296:	2201      	movs	r2, #1
 8003298:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800329a:	f7fe f9eb 	bl	8001674 <HAL_GetTick>
 800329e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032a0:	e008      	b.n	80032b4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032a2:	f7fe f9e7 	bl	8001674 <HAL_GetTick>
 80032a6:	4602      	mov	r2, r0
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	2b02      	cmp	r3, #2
 80032ae:	d901      	bls.n	80032b4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80032b0:	2303      	movs	r3, #3
 80032b2:	e064      	b.n	800337e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032b4:	4b11      	ldr	r3, [pc, #68]	; (80032fc <HAL_RCC_OscConfig+0x4ac>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d0f0      	beq.n	80032a2 <HAL_RCC_OscConfig+0x452>
 80032c0:	e05c      	b.n	800337c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032c2:	4b10      	ldr	r3, [pc, #64]	; (8003304 <HAL_RCC_OscConfig+0x4b4>)
 80032c4:	2200      	movs	r2, #0
 80032c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c8:	f7fe f9d4 	bl	8001674 <HAL_GetTick>
 80032cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032ce:	e008      	b.n	80032e2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032d0:	f7fe f9d0 	bl	8001674 <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d901      	bls.n	80032e2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e04d      	b.n	800337e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032e2:	4b06      	ldr	r3, [pc, #24]	; (80032fc <HAL_RCC_OscConfig+0x4ac>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d1f0      	bne.n	80032d0 <HAL_RCC_OscConfig+0x480>
 80032ee:	e045      	b.n	800337c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	699b      	ldr	r3, [r3, #24]
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d107      	bne.n	8003308 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e040      	b.n	800337e <HAL_RCC_OscConfig+0x52e>
 80032fc:	40023800 	.word	0x40023800
 8003300:	40007000 	.word	0x40007000
 8003304:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003308:	4b1f      	ldr	r3, [pc, #124]	; (8003388 <HAL_RCC_OscConfig+0x538>)
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	699b      	ldr	r3, [r3, #24]
 8003312:	2b01      	cmp	r3, #1
 8003314:	d030      	beq.n	8003378 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003320:	429a      	cmp	r2, r3
 8003322:	d129      	bne.n	8003378 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800332e:	429a      	cmp	r2, r3
 8003330:	d122      	bne.n	8003378 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003332:	68fa      	ldr	r2, [r7, #12]
 8003334:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003338:	4013      	ands	r3, r2
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800333e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003340:	4293      	cmp	r3, r2
 8003342:	d119      	bne.n	8003378 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800334e:	085b      	lsrs	r3, r3, #1
 8003350:	3b01      	subs	r3, #1
 8003352:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003354:	429a      	cmp	r2, r3
 8003356:	d10f      	bne.n	8003378 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003362:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003364:	429a      	cmp	r2, r3
 8003366:	d107      	bne.n	8003378 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003372:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003374:	429a      	cmp	r2, r3
 8003376:	d001      	beq.n	800337c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e000      	b.n	800337e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800337c:	2300      	movs	r3, #0
}
 800337e:	4618      	mov	r0, r3
 8003380:	3718      	adds	r7, #24
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	40023800 	.word	0x40023800

0800338c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b082      	sub	sp, #8
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d101      	bne.n	800339e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e041      	b.n	8003422 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d106      	bne.n	80033b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2200      	movs	r2, #0
 80033ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f7fd fef0 	bl	8001198 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2202      	movs	r2, #2
 80033bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	3304      	adds	r3, #4
 80033c8:	4619      	mov	r1, r3
 80033ca:	4610      	mov	r0, r2
 80033cc:	f000 fad8 	bl	8003980 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2201      	movs	r2, #1
 80033d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2201      	movs	r2, #1
 80033f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2201      	movs	r2, #1
 80033fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2201      	movs	r2, #1
 800340c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2201      	movs	r2, #1
 8003414:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2201      	movs	r2, #1
 800341c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003420:	2300      	movs	r3, #0
}
 8003422:	4618      	mov	r0, r3
 8003424:	3708      	adds	r7, #8
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}

0800342a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800342a:	b580      	push	{r7, lr}
 800342c:	b082      	sub	sp, #8
 800342e:	af00      	add	r7, sp, #0
 8003430:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d101      	bne.n	800343c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e041      	b.n	80034c0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003442:	b2db      	uxtb	r3, r3
 8003444:	2b00      	cmp	r3, #0
 8003446:	d106      	bne.n	8003456 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f000 f839 	bl	80034c8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2202      	movs	r2, #2
 800345a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	3304      	adds	r3, #4
 8003466:	4619      	mov	r1, r3
 8003468:	4610      	mov	r0, r2
 800346a:	f000 fa89 	bl	8003980 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2201      	movs	r2, #1
 8003472:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2201      	movs	r2, #1
 800347a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2201      	movs	r2, #1
 8003482:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2201      	movs	r2, #1
 800348a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2201      	movs	r2, #1
 8003492:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2201      	movs	r2, #1
 800349a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2201      	movs	r2, #1
 80034a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2201      	movs	r2, #1
 80034aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2201      	movs	r2, #1
 80034b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2201      	movs	r2, #1
 80034ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034be:	2300      	movs	r3, #0
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3708      	adds	r7, #8
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}

080034c8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80034d0:	bf00      	nop
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr

080034dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b084      	sub	sp, #16
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d109      	bne.n	8003500 <HAL_TIM_PWM_Start+0x24>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	bf14      	ite	ne
 80034f8:	2301      	movne	r3, #1
 80034fa:	2300      	moveq	r3, #0
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	e022      	b.n	8003546 <HAL_TIM_PWM_Start+0x6a>
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	2b04      	cmp	r3, #4
 8003504:	d109      	bne.n	800351a <HAL_TIM_PWM_Start+0x3e>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800350c:	b2db      	uxtb	r3, r3
 800350e:	2b01      	cmp	r3, #1
 8003510:	bf14      	ite	ne
 8003512:	2301      	movne	r3, #1
 8003514:	2300      	moveq	r3, #0
 8003516:	b2db      	uxtb	r3, r3
 8003518:	e015      	b.n	8003546 <HAL_TIM_PWM_Start+0x6a>
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	2b08      	cmp	r3, #8
 800351e:	d109      	bne.n	8003534 <HAL_TIM_PWM_Start+0x58>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003526:	b2db      	uxtb	r3, r3
 8003528:	2b01      	cmp	r3, #1
 800352a:	bf14      	ite	ne
 800352c:	2301      	movne	r3, #1
 800352e:	2300      	moveq	r3, #0
 8003530:	b2db      	uxtb	r3, r3
 8003532:	e008      	b.n	8003546 <HAL_TIM_PWM_Start+0x6a>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800353a:	b2db      	uxtb	r3, r3
 800353c:	2b01      	cmp	r3, #1
 800353e:	bf14      	ite	ne
 8003540:	2301      	movne	r3, #1
 8003542:	2300      	moveq	r3, #0
 8003544:	b2db      	uxtb	r3, r3
 8003546:	2b00      	cmp	r3, #0
 8003548:	d001      	beq.n	800354e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e07c      	b.n	8003648 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d104      	bne.n	800355e <HAL_TIM_PWM_Start+0x82>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2202      	movs	r2, #2
 8003558:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800355c:	e013      	b.n	8003586 <HAL_TIM_PWM_Start+0xaa>
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	2b04      	cmp	r3, #4
 8003562:	d104      	bne.n	800356e <HAL_TIM_PWM_Start+0x92>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2202      	movs	r2, #2
 8003568:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800356c:	e00b      	b.n	8003586 <HAL_TIM_PWM_Start+0xaa>
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	2b08      	cmp	r3, #8
 8003572:	d104      	bne.n	800357e <HAL_TIM_PWM_Start+0xa2>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2202      	movs	r2, #2
 8003578:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800357c:	e003      	b.n	8003586 <HAL_TIM_PWM_Start+0xaa>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2202      	movs	r2, #2
 8003582:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	2201      	movs	r2, #1
 800358c:	6839      	ldr	r1, [r7, #0]
 800358e:	4618      	mov	r0, r3
 8003590:	f000 fce0 	bl	8003f54 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a2d      	ldr	r2, [pc, #180]	; (8003650 <HAL_TIM_PWM_Start+0x174>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d004      	beq.n	80035a8 <HAL_TIM_PWM_Start+0xcc>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a2c      	ldr	r2, [pc, #176]	; (8003654 <HAL_TIM_PWM_Start+0x178>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d101      	bne.n	80035ac <HAL_TIM_PWM_Start+0xd0>
 80035a8:	2301      	movs	r3, #1
 80035aa:	e000      	b.n	80035ae <HAL_TIM_PWM_Start+0xd2>
 80035ac:	2300      	movs	r3, #0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d007      	beq.n	80035c2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035c0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a22      	ldr	r2, [pc, #136]	; (8003650 <HAL_TIM_PWM_Start+0x174>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d022      	beq.n	8003612 <HAL_TIM_PWM_Start+0x136>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035d4:	d01d      	beq.n	8003612 <HAL_TIM_PWM_Start+0x136>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a1f      	ldr	r2, [pc, #124]	; (8003658 <HAL_TIM_PWM_Start+0x17c>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d018      	beq.n	8003612 <HAL_TIM_PWM_Start+0x136>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a1d      	ldr	r2, [pc, #116]	; (800365c <HAL_TIM_PWM_Start+0x180>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d013      	beq.n	8003612 <HAL_TIM_PWM_Start+0x136>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a1c      	ldr	r2, [pc, #112]	; (8003660 <HAL_TIM_PWM_Start+0x184>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d00e      	beq.n	8003612 <HAL_TIM_PWM_Start+0x136>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a16      	ldr	r2, [pc, #88]	; (8003654 <HAL_TIM_PWM_Start+0x178>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d009      	beq.n	8003612 <HAL_TIM_PWM_Start+0x136>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a18      	ldr	r2, [pc, #96]	; (8003664 <HAL_TIM_PWM_Start+0x188>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d004      	beq.n	8003612 <HAL_TIM_PWM_Start+0x136>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a16      	ldr	r2, [pc, #88]	; (8003668 <HAL_TIM_PWM_Start+0x18c>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d111      	bne.n	8003636 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	f003 0307 	and.w	r3, r3, #7
 800361c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2b06      	cmp	r3, #6
 8003622:	d010      	beq.n	8003646 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f042 0201 	orr.w	r2, r2, #1
 8003632:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003634:	e007      	b.n	8003646 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f042 0201 	orr.w	r2, r2, #1
 8003644:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003646:	2300      	movs	r3, #0
}
 8003648:	4618      	mov	r0, r3
 800364a:	3710      	adds	r7, #16
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}
 8003650:	40010000 	.word	0x40010000
 8003654:	40010400 	.word	0x40010400
 8003658:	40000400 	.word	0x40000400
 800365c:	40000800 	.word	0x40000800
 8003660:	40000c00 	.word	0x40000c00
 8003664:	40014000 	.word	0x40014000
 8003668:	40001800 	.word	0x40001800

0800366c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b086      	sub	sp, #24
 8003670:	af00      	add	r7, sp, #0
 8003672:	60f8      	str	r0, [r7, #12]
 8003674:	60b9      	str	r1, [r7, #8]
 8003676:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003678:	2300      	movs	r3, #0
 800367a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003682:	2b01      	cmp	r3, #1
 8003684:	d101      	bne.n	800368a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003686:	2302      	movs	r3, #2
 8003688:	e0ae      	b.n	80037e8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2201      	movs	r2, #1
 800368e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2b0c      	cmp	r3, #12
 8003696:	f200 809f 	bhi.w	80037d8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800369a:	a201      	add	r2, pc, #4	; (adr r2, 80036a0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800369c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036a0:	080036d5 	.word	0x080036d5
 80036a4:	080037d9 	.word	0x080037d9
 80036a8:	080037d9 	.word	0x080037d9
 80036ac:	080037d9 	.word	0x080037d9
 80036b0:	08003715 	.word	0x08003715
 80036b4:	080037d9 	.word	0x080037d9
 80036b8:	080037d9 	.word	0x080037d9
 80036bc:	080037d9 	.word	0x080037d9
 80036c0:	08003757 	.word	0x08003757
 80036c4:	080037d9 	.word	0x080037d9
 80036c8:	080037d9 	.word	0x080037d9
 80036cc:	080037d9 	.word	0x080037d9
 80036d0:	08003797 	.word	0x08003797
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	68b9      	ldr	r1, [r7, #8]
 80036da:	4618      	mov	r0, r3
 80036dc:	f000 f9f0 	bl	8003ac0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	699a      	ldr	r2, [r3, #24]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f042 0208 	orr.w	r2, r2, #8
 80036ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	699a      	ldr	r2, [r3, #24]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f022 0204 	bic.w	r2, r2, #4
 80036fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	6999      	ldr	r1, [r3, #24]
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	691a      	ldr	r2, [r3, #16]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	430a      	orrs	r2, r1
 8003710:	619a      	str	r2, [r3, #24]
      break;
 8003712:	e064      	b.n	80037de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	68b9      	ldr	r1, [r7, #8]
 800371a:	4618      	mov	r0, r3
 800371c:	f000 fa40 	bl	8003ba0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	699a      	ldr	r2, [r3, #24]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800372e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	699a      	ldr	r2, [r3, #24]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800373e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	6999      	ldr	r1, [r3, #24]
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	691b      	ldr	r3, [r3, #16]
 800374a:	021a      	lsls	r2, r3, #8
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	430a      	orrs	r2, r1
 8003752:	619a      	str	r2, [r3, #24]
      break;
 8003754:	e043      	b.n	80037de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	68b9      	ldr	r1, [r7, #8]
 800375c:	4618      	mov	r0, r3
 800375e:	f000 fa95 	bl	8003c8c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	69da      	ldr	r2, [r3, #28]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f042 0208 	orr.w	r2, r2, #8
 8003770:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	69da      	ldr	r2, [r3, #28]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f022 0204 	bic.w	r2, r2, #4
 8003780:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	69d9      	ldr	r1, [r3, #28]
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	691a      	ldr	r2, [r3, #16]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	430a      	orrs	r2, r1
 8003792:	61da      	str	r2, [r3, #28]
      break;
 8003794:	e023      	b.n	80037de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	68b9      	ldr	r1, [r7, #8]
 800379c:	4618      	mov	r0, r3
 800379e:	f000 fae9 	bl	8003d74 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	69da      	ldr	r2, [r3, #28]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	69da      	ldr	r2, [r3, #28]
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	69d9      	ldr	r1, [r3, #28]
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	691b      	ldr	r3, [r3, #16]
 80037cc:	021a      	lsls	r2, r3, #8
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	430a      	orrs	r2, r1
 80037d4:	61da      	str	r2, [r3, #28]
      break;
 80037d6:	e002      	b.n	80037de <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	75fb      	strb	r3, [r7, #23]
      break;
 80037dc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80037e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3718      	adds	r7, #24
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}

080037f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037fa:	2300      	movs	r3, #0
 80037fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003804:	2b01      	cmp	r3, #1
 8003806:	d101      	bne.n	800380c <HAL_TIM_ConfigClockSource+0x1c>
 8003808:	2302      	movs	r3, #2
 800380a:	e0b4      	b.n	8003976 <HAL_TIM_ConfigClockSource+0x186>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2202      	movs	r2, #2
 8003818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800382a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003832:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	68ba      	ldr	r2, [r7, #8]
 800383a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003844:	d03e      	beq.n	80038c4 <HAL_TIM_ConfigClockSource+0xd4>
 8003846:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800384a:	f200 8087 	bhi.w	800395c <HAL_TIM_ConfigClockSource+0x16c>
 800384e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003852:	f000 8086 	beq.w	8003962 <HAL_TIM_ConfigClockSource+0x172>
 8003856:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800385a:	d87f      	bhi.n	800395c <HAL_TIM_ConfigClockSource+0x16c>
 800385c:	2b70      	cmp	r3, #112	; 0x70
 800385e:	d01a      	beq.n	8003896 <HAL_TIM_ConfigClockSource+0xa6>
 8003860:	2b70      	cmp	r3, #112	; 0x70
 8003862:	d87b      	bhi.n	800395c <HAL_TIM_ConfigClockSource+0x16c>
 8003864:	2b60      	cmp	r3, #96	; 0x60
 8003866:	d050      	beq.n	800390a <HAL_TIM_ConfigClockSource+0x11a>
 8003868:	2b60      	cmp	r3, #96	; 0x60
 800386a:	d877      	bhi.n	800395c <HAL_TIM_ConfigClockSource+0x16c>
 800386c:	2b50      	cmp	r3, #80	; 0x50
 800386e:	d03c      	beq.n	80038ea <HAL_TIM_ConfigClockSource+0xfa>
 8003870:	2b50      	cmp	r3, #80	; 0x50
 8003872:	d873      	bhi.n	800395c <HAL_TIM_ConfigClockSource+0x16c>
 8003874:	2b40      	cmp	r3, #64	; 0x40
 8003876:	d058      	beq.n	800392a <HAL_TIM_ConfigClockSource+0x13a>
 8003878:	2b40      	cmp	r3, #64	; 0x40
 800387a:	d86f      	bhi.n	800395c <HAL_TIM_ConfigClockSource+0x16c>
 800387c:	2b30      	cmp	r3, #48	; 0x30
 800387e:	d064      	beq.n	800394a <HAL_TIM_ConfigClockSource+0x15a>
 8003880:	2b30      	cmp	r3, #48	; 0x30
 8003882:	d86b      	bhi.n	800395c <HAL_TIM_ConfigClockSource+0x16c>
 8003884:	2b20      	cmp	r3, #32
 8003886:	d060      	beq.n	800394a <HAL_TIM_ConfigClockSource+0x15a>
 8003888:	2b20      	cmp	r3, #32
 800388a:	d867      	bhi.n	800395c <HAL_TIM_ConfigClockSource+0x16c>
 800388c:	2b00      	cmp	r3, #0
 800388e:	d05c      	beq.n	800394a <HAL_TIM_ConfigClockSource+0x15a>
 8003890:	2b10      	cmp	r3, #16
 8003892:	d05a      	beq.n	800394a <HAL_TIM_ConfigClockSource+0x15a>
 8003894:	e062      	b.n	800395c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6818      	ldr	r0, [r3, #0]
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	6899      	ldr	r1, [r3, #8]
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	685a      	ldr	r2, [r3, #4]
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	68db      	ldr	r3, [r3, #12]
 80038a6:	f000 fb35 	bl	8003f14 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80038b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	68ba      	ldr	r2, [r7, #8]
 80038c0:	609a      	str	r2, [r3, #8]
      break;
 80038c2:	e04f      	b.n	8003964 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6818      	ldr	r0, [r3, #0]
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	6899      	ldr	r1, [r3, #8]
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	685a      	ldr	r2, [r3, #4]
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	f000 fb1e 	bl	8003f14 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	689a      	ldr	r2, [r3, #8]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80038e6:	609a      	str	r2, [r3, #8]
      break;
 80038e8:	e03c      	b.n	8003964 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6818      	ldr	r0, [r3, #0]
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	6859      	ldr	r1, [r3, #4]
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	461a      	mov	r2, r3
 80038f8:	f000 fa92 	bl	8003e20 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	2150      	movs	r1, #80	; 0x50
 8003902:	4618      	mov	r0, r3
 8003904:	f000 faeb 	bl	8003ede <TIM_ITRx_SetConfig>
      break;
 8003908:	e02c      	b.n	8003964 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6818      	ldr	r0, [r3, #0]
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	6859      	ldr	r1, [r3, #4]
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	461a      	mov	r2, r3
 8003918:	f000 fab1 	bl	8003e7e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	2160      	movs	r1, #96	; 0x60
 8003922:	4618      	mov	r0, r3
 8003924:	f000 fadb 	bl	8003ede <TIM_ITRx_SetConfig>
      break;
 8003928:	e01c      	b.n	8003964 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6818      	ldr	r0, [r3, #0]
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	6859      	ldr	r1, [r3, #4]
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	461a      	mov	r2, r3
 8003938:	f000 fa72 	bl	8003e20 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	2140      	movs	r1, #64	; 0x40
 8003942:	4618      	mov	r0, r3
 8003944:	f000 facb 	bl	8003ede <TIM_ITRx_SetConfig>
      break;
 8003948:	e00c      	b.n	8003964 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4619      	mov	r1, r3
 8003954:	4610      	mov	r0, r2
 8003956:	f000 fac2 	bl	8003ede <TIM_ITRx_SetConfig>
      break;
 800395a:	e003      	b.n	8003964 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	73fb      	strb	r3, [r7, #15]
      break;
 8003960:	e000      	b.n	8003964 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003962:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003974:	7bfb      	ldrb	r3, [r7, #15]
}
 8003976:	4618      	mov	r0, r3
 8003978:	3710      	adds	r7, #16
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
	...

08003980 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003980:	b480      	push	{r7}
 8003982:	b085      	sub	sp, #20
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	4a40      	ldr	r2, [pc, #256]	; (8003a94 <TIM_Base_SetConfig+0x114>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d013      	beq.n	80039c0 <TIM_Base_SetConfig+0x40>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800399e:	d00f      	beq.n	80039c0 <TIM_Base_SetConfig+0x40>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	4a3d      	ldr	r2, [pc, #244]	; (8003a98 <TIM_Base_SetConfig+0x118>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d00b      	beq.n	80039c0 <TIM_Base_SetConfig+0x40>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	4a3c      	ldr	r2, [pc, #240]	; (8003a9c <TIM_Base_SetConfig+0x11c>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d007      	beq.n	80039c0 <TIM_Base_SetConfig+0x40>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	4a3b      	ldr	r2, [pc, #236]	; (8003aa0 <TIM_Base_SetConfig+0x120>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d003      	beq.n	80039c0 <TIM_Base_SetConfig+0x40>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	4a3a      	ldr	r2, [pc, #232]	; (8003aa4 <TIM_Base_SetConfig+0x124>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d108      	bne.n	80039d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	68fa      	ldr	r2, [r7, #12]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a2f      	ldr	r2, [pc, #188]	; (8003a94 <TIM_Base_SetConfig+0x114>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d02b      	beq.n	8003a32 <TIM_Base_SetConfig+0xb2>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039e0:	d027      	beq.n	8003a32 <TIM_Base_SetConfig+0xb2>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4a2c      	ldr	r2, [pc, #176]	; (8003a98 <TIM_Base_SetConfig+0x118>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d023      	beq.n	8003a32 <TIM_Base_SetConfig+0xb2>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4a2b      	ldr	r2, [pc, #172]	; (8003a9c <TIM_Base_SetConfig+0x11c>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d01f      	beq.n	8003a32 <TIM_Base_SetConfig+0xb2>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a2a      	ldr	r2, [pc, #168]	; (8003aa0 <TIM_Base_SetConfig+0x120>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d01b      	beq.n	8003a32 <TIM_Base_SetConfig+0xb2>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a29      	ldr	r2, [pc, #164]	; (8003aa4 <TIM_Base_SetConfig+0x124>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d017      	beq.n	8003a32 <TIM_Base_SetConfig+0xb2>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a28      	ldr	r2, [pc, #160]	; (8003aa8 <TIM_Base_SetConfig+0x128>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d013      	beq.n	8003a32 <TIM_Base_SetConfig+0xb2>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a27      	ldr	r2, [pc, #156]	; (8003aac <TIM_Base_SetConfig+0x12c>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d00f      	beq.n	8003a32 <TIM_Base_SetConfig+0xb2>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a26      	ldr	r2, [pc, #152]	; (8003ab0 <TIM_Base_SetConfig+0x130>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d00b      	beq.n	8003a32 <TIM_Base_SetConfig+0xb2>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4a25      	ldr	r2, [pc, #148]	; (8003ab4 <TIM_Base_SetConfig+0x134>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d007      	beq.n	8003a32 <TIM_Base_SetConfig+0xb2>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4a24      	ldr	r2, [pc, #144]	; (8003ab8 <TIM_Base_SetConfig+0x138>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d003      	beq.n	8003a32 <TIM_Base_SetConfig+0xb2>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4a23      	ldr	r2, [pc, #140]	; (8003abc <TIM_Base_SetConfig+0x13c>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d108      	bne.n	8003a44 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	68fa      	ldr	r2, [r7, #12]
 8003a40:	4313      	orrs	r3, r2
 8003a42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	695b      	ldr	r3, [r3, #20]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	68fa      	ldr	r2, [r7, #12]
 8003a56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	689a      	ldr	r2, [r3, #8]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	4a0a      	ldr	r2, [pc, #40]	; (8003a94 <TIM_Base_SetConfig+0x114>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d003      	beq.n	8003a78 <TIM_Base_SetConfig+0xf8>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	4a0c      	ldr	r2, [pc, #48]	; (8003aa4 <TIM_Base_SetConfig+0x124>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d103      	bne.n	8003a80 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	691a      	ldr	r2, [r3, #16]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	615a      	str	r2, [r3, #20]
}
 8003a86:	bf00      	nop
 8003a88:	3714      	adds	r7, #20
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr
 8003a92:	bf00      	nop
 8003a94:	40010000 	.word	0x40010000
 8003a98:	40000400 	.word	0x40000400
 8003a9c:	40000800 	.word	0x40000800
 8003aa0:	40000c00 	.word	0x40000c00
 8003aa4:	40010400 	.word	0x40010400
 8003aa8:	40014000 	.word	0x40014000
 8003aac:	40014400 	.word	0x40014400
 8003ab0:	40014800 	.word	0x40014800
 8003ab4:	40001800 	.word	0x40001800
 8003ab8:	40001c00 	.word	0x40001c00
 8003abc:	40002000 	.word	0x40002000

08003ac0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b087      	sub	sp, #28
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6a1b      	ldr	r3, [r3, #32]
 8003ace:	f023 0201 	bic.w	r2, r3, #1
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6a1b      	ldr	r3, [r3, #32]
 8003ada:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	699b      	ldr	r3, [r3, #24]
 8003ae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f023 0303 	bic.w	r3, r3, #3
 8003af6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	68fa      	ldr	r2, [r7, #12]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	f023 0302 	bic.w	r3, r3, #2
 8003b08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	697a      	ldr	r2, [r7, #20]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	4a20      	ldr	r2, [pc, #128]	; (8003b98 <TIM_OC1_SetConfig+0xd8>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d003      	beq.n	8003b24 <TIM_OC1_SetConfig+0x64>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	4a1f      	ldr	r2, [pc, #124]	; (8003b9c <TIM_OC1_SetConfig+0xdc>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d10c      	bne.n	8003b3e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	f023 0308 	bic.w	r3, r3, #8
 8003b2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	697a      	ldr	r2, [r7, #20]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	f023 0304 	bic.w	r3, r3, #4
 8003b3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4a15      	ldr	r2, [pc, #84]	; (8003b98 <TIM_OC1_SetConfig+0xd8>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d003      	beq.n	8003b4e <TIM_OC1_SetConfig+0x8e>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	4a14      	ldr	r2, [pc, #80]	; (8003b9c <TIM_OC1_SetConfig+0xdc>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d111      	bne.n	8003b72 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	695b      	ldr	r3, [r3, #20]
 8003b62:	693a      	ldr	r2, [r7, #16]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	699b      	ldr	r3, [r3, #24]
 8003b6c:	693a      	ldr	r2, [r7, #16]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	693a      	ldr	r2, [r7, #16]
 8003b76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	68fa      	ldr	r2, [r7, #12]
 8003b7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	685a      	ldr	r2, [r3, #4]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	697a      	ldr	r2, [r7, #20]
 8003b8a:	621a      	str	r2, [r3, #32]
}
 8003b8c:	bf00      	nop
 8003b8e:	371c      	adds	r7, #28
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr
 8003b98:	40010000 	.word	0x40010000
 8003b9c:	40010400 	.word	0x40010400

08003ba0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b087      	sub	sp, #28
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
 8003ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a1b      	ldr	r3, [r3, #32]
 8003bae:	f023 0210 	bic.w	r2, r3, #16
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6a1b      	ldr	r3, [r3, #32]
 8003bba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	699b      	ldr	r3, [r3, #24]
 8003bc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	021b      	lsls	r3, r3, #8
 8003bde:	68fa      	ldr	r2, [r7, #12]
 8003be0:	4313      	orrs	r3, r2
 8003be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	f023 0320 	bic.w	r3, r3, #32
 8003bea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	011b      	lsls	r3, r3, #4
 8003bf2:	697a      	ldr	r2, [r7, #20]
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	4a22      	ldr	r2, [pc, #136]	; (8003c84 <TIM_OC2_SetConfig+0xe4>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d003      	beq.n	8003c08 <TIM_OC2_SetConfig+0x68>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	4a21      	ldr	r2, [pc, #132]	; (8003c88 <TIM_OC2_SetConfig+0xe8>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d10d      	bne.n	8003c24 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	011b      	lsls	r3, r3, #4
 8003c16:	697a      	ldr	r2, [r7, #20]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c22:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	4a17      	ldr	r2, [pc, #92]	; (8003c84 <TIM_OC2_SetConfig+0xe4>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d003      	beq.n	8003c34 <TIM_OC2_SetConfig+0x94>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	4a16      	ldr	r2, [pc, #88]	; (8003c88 <TIM_OC2_SetConfig+0xe8>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d113      	bne.n	8003c5c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	695b      	ldr	r3, [r3, #20]
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	693a      	ldr	r2, [r7, #16]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	699b      	ldr	r3, [r3, #24]
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	693a      	ldr	r2, [r7, #16]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	693a      	ldr	r2, [r7, #16]
 8003c60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	68fa      	ldr	r2, [r7, #12]
 8003c66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	685a      	ldr	r2, [r3, #4]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	697a      	ldr	r2, [r7, #20]
 8003c74:	621a      	str	r2, [r3, #32]
}
 8003c76:	bf00      	nop
 8003c78:	371c      	adds	r7, #28
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr
 8003c82:	bf00      	nop
 8003c84:	40010000 	.word	0x40010000
 8003c88:	40010400 	.word	0x40010400

08003c8c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b087      	sub	sp, #28
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a1b      	ldr	r3, [r3, #32]
 8003c9a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6a1b      	ldr	r3, [r3, #32]
 8003ca6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	69db      	ldr	r3, [r3, #28]
 8003cb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f023 0303 	bic.w	r3, r3, #3
 8003cc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	68fa      	ldr	r2, [r7, #12]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003cd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	021b      	lsls	r3, r3, #8
 8003cdc:	697a      	ldr	r2, [r7, #20]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4a21      	ldr	r2, [pc, #132]	; (8003d6c <TIM_OC3_SetConfig+0xe0>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d003      	beq.n	8003cf2 <TIM_OC3_SetConfig+0x66>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4a20      	ldr	r2, [pc, #128]	; (8003d70 <TIM_OC3_SetConfig+0xe4>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d10d      	bne.n	8003d0e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003cf8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	021b      	lsls	r3, r3, #8
 8003d00:	697a      	ldr	r2, [r7, #20]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4a16      	ldr	r2, [pc, #88]	; (8003d6c <TIM_OC3_SetConfig+0xe0>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d003      	beq.n	8003d1e <TIM_OC3_SetConfig+0x92>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a15      	ldr	r2, [pc, #84]	; (8003d70 <TIM_OC3_SetConfig+0xe4>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d113      	bne.n	8003d46 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	695b      	ldr	r3, [r3, #20]
 8003d32:	011b      	lsls	r3, r3, #4
 8003d34:	693a      	ldr	r2, [r7, #16]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	699b      	ldr	r3, [r3, #24]
 8003d3e:	011b      	lsls	r3, r3, #4
 8003d40:	693a      	ldr	r2, [r7, #16]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	693a      	ldr	r2, [r7, #16]
 8003d4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	68fa      	ldr	r2, [r7, #12]
 8003d50:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	685a      	ldr	r2, [r3, #4]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	697a      	ldr	r2, [r7, #20]
 8003d5e:	621a      	str	r2, [r3, #32]
}
 8003d60:	bf00      	nop
 8003d62:	371c      	adds	r7, #28
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr
 8003d6c:	40010000 	.word	0x40010000
 8003d70:	40010400 	.word	0x40010400

08003d74 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b087      	sub	sp, #28
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6a1b      	ldr	r3, [r3, #32]
 8003d82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6a1b      	ldr	r3, [r3, #32]
 8003d8e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	69db      	ldr	r3, [r3, #28]
 8003d9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003da2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003daa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	021b      	lsls	r3, r3, #8
 8003db2:	68fa      	ldr	r2, [r7, #12]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003dbe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	031b      	lsls	r3, r3, #12
 8003dc6:	693a      	ldr	r2, [r7, #16]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	4a12      	ldr	r2, [pc, #72]	; (8003e18 <TIM_OC4_SetConfig+0xa4>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d003      	beq.n	8003ddc <TIM_OC4_SetConfig+0x68>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	4a11      	ldr	r2, [pc, #68]	; (8003e1c <TIM_OC4_SetConfig+0xa8>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d109      	bne.n	8003df0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003de2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	695b      	ldr	r3, [r3, #20]
 8003de8:	019b      	lsls	r3, r3, #6
 8003dea:	697a      	ldr	r2, [r7, #20]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	697a      	ldr	r2, [r7, #20]
 8003df4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	68fa      	ldr	r2, [r7, #12]
 8003dfa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	685a      	ldr	r2, [r3, #4]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	693a      	ldr	r2, [r7, #16]
 8003e08:	621a      	str	r2, [r3, #32]
}
 8003e0a:	bf00      	nop
 8003e0c:	371c      	adds	r7, #28
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr
 8003e16:	bf00      	nop
 8003e18:	40010000 	.word	0x40010000
 8003e1c:	40010400 	.word	0x40010400

08003e20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b087      	sub	sp, #28
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	60f8      	str	r0, [r7, #12]
 8003e28:	60b9      	str	r1, [r7, #8]
 8003e2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	6a1b      	ldr	r3, [r3, #32]
 8003e30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	6a1b      	ldr	r3, [r3, #32]
 8003e36:	f023 0201 	bic.w	r2, r3, #1
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	699b      	ldr	r3, [r3, #24]
 8003e42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	011b      	lsls	r3, r3, #4
 8003e50:	693a      	ldr	r2, [r7, #16]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	f023 030a 	bic.w	r3, r3, #10
 8003e5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e5e:	697a      	ldr	r2, [r7, #20]
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	693a      	ldr	r2, [r7, #16]
 8003e6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	697a      	ldr	r2, [r7, #20]
 8003e70:	621a      	str	r2, [r3, #32]
}
 8003e72:	bf00      	nop
 8003e74:	371c      	adds	r7, #28
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr

08003e7e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e7e:	b480      	push	{r7}
 8003e80:	b087      	sub	sp, #28
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	60f8      	str	r0, [r7, #12]
 8003e86:	60b9      	str	r1, [r7, #8]
 8003e88:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6a1b      	ldr	r3, [r3, #32]
 8003e8e:	f023 0210 	bic.w	r2, r3, #16
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	699b      	ldr	r3, [r3, #24]
 8003e9a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6a1b      	ldr	r3, [r3, #32]
 8003ea0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003ea8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	031b      	lsls	r3, r3, #12
 8003eae:	697a      	ldr	r2, [r7, #20]
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003eba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	011b      	lsls	r3, r3, #4
 8003ec0:	693a      	ldr	r2, [r7, #16]
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	697a      	ldr	r2, [r7, #20]
 8003eca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	693a      	ldr	r2, [r7, #16]
 8003ed0:	621a      	str	r2, [r3, #32]
}
 8003ed2:	bf00      	nop
 8003ed4:	371c      	adds	r7, #28
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr

08003ede <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ede:	b480      	push	{r7}
 8003ee0:	b085      	sub	sp, #20
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	6078      	str	r0, [r7, #4]
 8003ee6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ef4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ef6:	683a      	ldr	r2, [r7, #0]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	f043 0307 	orr.w	r3, r3, #7
 8003f00:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	68fa      	ldr	r2, [r7, #12]
 8003f06:	609a      	str	r2, [r3, #8]
}
 8003f08:	bf00      	nop
 8003f0a:	3714      	adds	r7, #20
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr

08003f14 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b087      	sub	sp, #28
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	60f8      	str	r0, [r7, #12]
 8003f1c:	60b9      	str	r1, [r7, #8]
 8003f1e:	607a      	str	r2, [r7, #4]
 8003f20:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f2e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	021a      	lsls	r2, r3, #8
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	431a      	orrs	r2, r3
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	697a      	ldr	r2, [r7, #20]
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	697a      	ldr	r2, [r7, #20]
 8003f46:	609a      	str	r2, [r3, #8]
}
 8003f48:	bf00      	nop
 8003f4a:	371c      	adds	r7, #28
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr

08003f54 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b087      	sub	sp, #28
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	60f8      	str	r0, [r7, #12]
 8003f5c:	60b9      	str	r1, [r7, #8]
 8003f5e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	f003 031f 	and.w	r3, r3, #31
 8003f66:	2201      	movs	r2, #1
 8003f68:	fa02 f303 	lsl.w	r3, r2, r3
 8003f6c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	6a1a      	ldr	r2, [r3, #32]
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	43db      	mvns	r3, r3
 8003f76:	401a      	ands	r2, r3
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	6a1a      	ldr	r2, [r3, #32]
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	f003 031f 	and.w	r3, r3, #31
 8003f86:	6879      	ldr	r1, [r7, #4]
 8003f88:	fa01 f303 	lsl.w	r3, r1, r3
 8003f8c:	431a      	orrs	r2, r3
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	621a      	str	r2, [r3, #32]
}
 8003f92:	bf00      	nop
 8003f94:	371c      	adds	r7, #28
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr
	...

08003fa0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b085      	sub	sp, #20
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d101      	bne.n	8003fb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003fb4:	2302      	movs	r3, #2
 8003fb6:	e05a      	b.n	800406e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2202      	movs	r2, #2
 8003fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fde:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	68fa      	ldr	r2, [r7, #12]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	68fa      	ldr	r2, [r7, #12]
 8003ff0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a21      	ldr	r2, [pc, #132]	; (800407c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d022      	beq.n	8004042 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004004:	d01d      	beq.n	8004042 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a1d      	ldr	r2, [pc, #116]	; (8004080 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d018      	beq.n	8004042 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a1b      	ldr	r2, [pc, #108]	; (8004084 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d013      	beq.n	8004042 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a1a      	ldr	r2, [pc, #104]	; (8004088 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d00e      	beq.n	8004042 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a18      	ldr	r2, [pc, #96]	; (800408c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d009      	beq.n	8004042 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a17      	ldr	r2, [pc, #92]	; (8004090 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d004      	beq.n	8004042 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a15      	ldr	r2, [pc, #84]	; (8004094 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d10c      	bne.n	800405c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004048:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	68ba      	ldr	r2, [r7, #8]
 8004050:	4313      	orrs	r3, r2
 8004052:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	68ba      	ldr	r2, [r7, #8]
 800405a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2201      	movs	r2, #1
 8004060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800406c:	2300      	movs	r3, #0
}
 800406e:	4618      	mov	r0, r3
 8004070:	3714      	adds	r7, #20
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr
 800407a:	bf00      	nop
 800407c:	40010000 	.word	0x40010000
 8004080:	40000400 	.word	0x40000400
 8004084:	40000800 	.word	0x40000800
 8004088:	40000c00 	.word	0x40000c00
 800408c:	40010400 	.word	0x40010400
 8004090:	40014000 	.word	0x40014000
 8004094:	40001800 	.word	0x40001800

08004098 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004098:	b480      	push	{r7}
 800409a:	b085      	sub	sp, #20
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80040a2:	2300      	movs	r3, #0
 80040a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d101      	bne.n	80040b4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80040b0:	2302      	movs	r3, #2
 80040b2:	e03d      	b.n	8004130 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	691b      	ldr	r3, [r3, #16]
 80040fe:	4313      	orrs	r3, r2
 8004100:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	695b      	ldr	r3, [r3, #20]
 800410c:	4313      	orrs	r3, r2
 800410e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	69db      	ldr	r3, [r3, #28]
 800411a:	4313      	orrs	r3, r2
 800411c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	68fa      	ldr	r2, [r7, #12]
 8004124:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800412e:	2300      	movs	r3, #0
}
 8004130:	4618      	mov	r0, r3
 8004132:	3714      	adds	r7, #20
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr

0800413c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b082      	sub	sp, #8
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d101      	bne.n	800414e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e03f      	b.n	80041ce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004154:	b2db      	uxtb	r3, r3
 8004156:	2b00      	cmp	r3, #0
 8004158:	d106      	bne.n	8004168 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f7fd f8b0 	bl	80012c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2224      	movs	r2, #36	; 0x24
 800416c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	68da      	ldr	r2, [r3, #12]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800417e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f000 f829 	bl	80041d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	691a      	ldr	r2, [r3, #16]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004194:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	695a      	ldr	r2, [r3, #20]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80041a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	68da      	ldr	r2, [r3, #12]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80041b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2200      	movs	r2, #0
 80041ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2220      	movs	r2, #32
 80041c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2220      	movs	r2, #32
 80041c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80041cc:	2300      	movs	r3, #0
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3708      	adds	r7, #8
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
	...

080041d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041dc:	b0c0      	sub	sp, #256	; 0x100
 80041de:	af00      	add	r7, sp, #0
 80041e0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	691b      	ldr	r3, [r3, #16]
 80041ec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80041f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041f4:	68d9      	ldr	r1, [r3, #12]
 80041f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	ea40 0301 	orr.w	r3, r0, r1
 8004200:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004202:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004206:	689a      	ldr	r2, [r3, #8]
 8004208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800420c:	691b      	ldr	r3, [r3, #16]
 800420e:	431a      	orrs	r2, r3
 8004210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004214:	695b      	ldr	r3, [r3, #20]
 8004216:	431a      	orrs	r2, r3
 8004218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800421c:	69db      	ldr	r3, [r3, #28]
 800421e:	4313      	orrs	r3, r2
 8004220:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004230:	f021 010c 	bic.w	r1, r1, #12
 8004234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800423e:	430b      	orrs	r3, r1
 8004240:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004242:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	695b      	ldr	r3, [r3, #20]
 800424a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800424e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004252:	6999      	ldr	r1, [r3, #24]
 8004254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	ea40 0301 	orr.w	r3, r0, r1
 800425e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	4b8f      	ldr	r3, [pc, #572]	; (80044a4 <UART_SetConfig+0x2cc>)
 8004268:	429a      	cmp	r2, r3
 800426a:	d005      	beq.n	8004278 <UART_SetConfig+0xa0>
 800426c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	4b8d      	ldr	r3, [pc, #564]	; (80044a8 <UART_SetConfig+0x2d0>)
 8004274:	429a      	cmp	r2, r3
 8004276:	d104      	bne.n	8004282 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004278:	f7fe fba6 	bl	80029c8 <HAL_RCC_GetPCLK2Freq>
 800427c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004280:	e003      	b.n	800428a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004282:	f7fe fb8d 	bl	80029a0 <HAL_RCC_GetPCLK1Freq>
 8004286:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800428a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800428e:	69db      	ldr	r3, [r3, #28]
 8004290:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004294:	f040 810c 	bne.w	80044b0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004298:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800429c:	2200      	movs	r2, #0
 800429e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80042a2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80042a6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80042aa:	4622      	mov	r2, r4
 80042ac:	462b      	mov	r3, r5
 80042ae:	1891      	adds	r1, r2, r2
 80042b0:	65b9      	str	r1, [r7, #88]	; 0x58
 80042b2:	415b      	adcs	r3, r3
 80042b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80042b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80042ba:	4621      	mov	r1, r4
 80042bc:	eb12 0801 	adds.w	r8, r2, r1
 80042c0:	4629      	mov	r1, r5
 80042c2:	eb43 0901 	adc.w	r9, r3, r1
 80042c6:	f04f 0200 	mov.w	r2, #0
 80042ca:	f04f 0300 	mov.w	r3, #0
 80042ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80042d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80042d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80042da:	4690      	mov	r8, r2
 80042dc:	4699      	mov	r9, r3
 80042de:	4623      	mov	r3, r4
 80042e0:	eb18 0303 	adds.w	r3, r8, r3
 80042e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80042e8:	462b      	mov	r3, r5
 80042ea:	eb49 0303 	adc.w	r3, r9, r3
 80042ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80042f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80042fe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004302:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004306:	460b      	mov	r3, r1
 8004308:	18db      	adds	r3, r3, r3
 800430a:	653b      	str	r3, [r7, #80]	; 0x50
 800430c:	4613      	mov	r3, r2
 800430e:	eb42 0303 	adc.w	r3, r2, r3
 8004312:	657b      	str	r3, [r7, #84]	; 0x54
 8004314:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004318:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800431c:	f7fb ffc8 	bl	80002b0 <__aeabi_uldivmod>
 8004320:	4602      	mov	r2, r0
 8004322:	460b      	mov	r3, r1
 8004324:	4b61      	ldr	r3, [pc, #388]	; (80044ac <UART_SetConfig+0x2d4>)
 8004326:	fba3 2302 	umull	r2, r3, r3, r2
 800432a:	095b      	lsrs	r3, r3, #5
 800432c:	011c      	lsls	r4, r3, #4
 800432e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004332:	2200      	movs	r2, #0
 8004334:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004338:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800433c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004340:	4642      	mov	r2, r8
 8004342:	464b      	mov	r3, r9
 8004344:	1891      	adds	r1, r2, r2
 8004346:	64b9      	str	r1, [r7, #72]	; 0x48
 8004348:	415b      	adcs	r3, r3
 800434a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800434c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004350:	4641      	mov	r1, r8
 8004352:	eb12 0a01 	adds.w	sl, r2, r1
 8004356:	4649      	mov	r1, r9
 8004358:	eb43 0b01 	adc.w	fp, r3, r1
 800435c:	f04f 0200 	mov.w	r2, #0
 8004360:	f04f 0300 	mov.w	r3, #0
 8004364:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004368:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800436c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004370:	4692      	mov	sl, r2
 8004372:	469b      	mov	fp, r3
 8004374:	4643      	mov	r3, r8
 8004376:	eb1a 0303 	adds.w	r3, sl, r3
 800437a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800437e:	464b      	mov	r3, r9
 8004380:	eb4b 0303 	adc.w	r3, fp, r3
 8004384:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	2200      	movs	r2, #0
 8004390:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004394:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004398:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800439c:	460b      	mov	r3, r1
 800439e:	18db      	adds	r3, r3, r3
 80043a0:	643b      	str	r3, [r7, #64]	; 0x40
 80043a2:	4613      	mov	r3, r2
 80043a4:	eb42 0303 	adc.w	r3, r2, r3
 80043a8:	647b      	str	r3, [r7, #68]	; 0x44
 80043aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80043ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80043b2:	f7fb ff7d 	bl	80002b0 <__aeabi_uldivmod>
 80043b6:	4602      	mov	r2, r0
 80043b8:	460b      	mov	r3, r1
 80043ba:	4611      	mov	r1, r2
 80043bc:	4b3b      	ldr	r3, [pc, #236]	; (80044ac <UART_SetConfig+0x2d4>)
 80043be:	fba3 2301 	umull	r2, r3, r3, r1
 80043c2:	095b      	lsrs	r3, r3, #5
 80043c4:	2264      	movs	r2, #100	; 0x64
 80043c6:	fb02 f303 	mul.w	r3, r2, r3
 80043ca:	1acb      	subs	r3, r1, r3
 80043cc:	00db      	lsls	r3, r3, #3
 80043ce:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80043d2:	4b36      	ldr	r3, [pc, #216]	; (80044ac <UART_SetConfig+0x2d4>)
 80043d4:	fba3 2302 	umull	r2, r3, r3, r2
 80043d8:	095b      	lsrs	r3, r3, #5
 80043da:	005b      	lsls	r3, r3, #1
 80043dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80043e0:	441c      	add	r4, r3
 80043e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043e6:	2200      	movs	r2, #0
 80043e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80043ec:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80043f0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80043f4:	4642      	mov	r2, r8
 80043f6:	464b      	mov	r3, r9
 80043f8:	1891      	adds	r1, r2, r2
 80043fa:	63b9      	str	r1, [r7, #56]	; 0x38
 80043fc:	415b      	adcs	r3, r3
 80043fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004400:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004404:	4641      	mov	r1, r8
 8004406:	1851      	adds	r1, r2, r1
 8004408:	6339      	str	r1, [r7, #48]	; 0x30
 800440a:	4649      	mov	r1, r9
 800440c:	414b      	adcs	r3, r1
 800440e:	637b      	str	r3, [r7, #52]	; 0x34
 8004410:	f04f 0200 	mov.w	r2, #0
 8004414:	f04f 0300 	mov.w	r3, #0
 8004418:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800441c:	4659      	mov	r1, fp
 800441e:	00cb      	lsls	r3, r1, #3
 8004420:	4651      	mov	r1, sl
 8004422:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004426:	4651      	mov	r1, sl
 8004428:	00ca      	lsls	r2, r1, #3
 800442a:	4610      	mov	r0, r2
 800442c:	4619      	mov	r1, r3
 800442e:	4603      	mov	r3, r0
 8004430:	4642      	mov	r2, r8
 8004432:	189b      	adds	r3, r3, r2
 8004434:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004438:	464b      	mov	r3, r9
 800443a:	460a      	mov	r2, r1
 800443c:	eb42 0303 	adc.w	r3, r2, r3
 8004440:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	2200      	movs	r2, #0
 800444c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004450:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004454:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004458:	460b      	mov	r3, r1
 800445a:	18db      	adds	r3, r3, r3
 800445c:	62bb      	str	r3, [r7, #40]	; 0x28
 800445e:	4613      	mov	r3, r2
 8004460:	eb42 0303 	adc.w	r3, r2, r3
 8004464:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004466:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800446a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800446e:	f7fb ff1f 	bl	80002b0 <__aeabi_uldivmod>
 8004472:	4602      	mov	r2, r0
 8004474:	460b      	mov	r3, r1
 8004476:	4b0d      	ldr	r3, [pc, #52]	; (80044ac <UART_SetConfig+0x2d4>)
 8004478:	fba3 1302 	umull	r1, r3, r3, r2
 800447c:	095b      	lsrs	r3, r3, #5
 800447e:	2164      	movs	r1, #100	; 0x64
 8004480:	fb01 f303 	mul.w	r3, r1, r3
 8004484:	1ad3      	subs	r3, r2, r3
 8004486:	00db      	lsls	r3, r3, #3
 8004488:	3332      	adds	r3, #50	; 0x32
 800448a:	4a08      	ldr	r2, [pc, #32]	; (80044ac <UART_SetConfig+0x2d4>)
 800448c:	fba2 2303 	umull	r2, r3, r2, r3
 8004490:	095b      	lsrs	r3, r3, #5
 8004492:	f003 0207 	and.w	r2, r3, #7
 8004496:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4422      	add	r2, r4
 800449e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80044a0:	e105      	b.n	80046ae <UART_SetConfig+0x4d6>
 80044a2:	bf00      	nop
 80044a4:	40011000 	.word	0x40011000
 80044a8:	40011400 	.word	0x40011400
 80044ac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80044b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044b4:	2200      	movs	r2, #0
 80044b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80044ba:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80044be:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80044c2:	4642      	mov	r2, r8
 80044c4:	464b      	mov	r3, r9
 80044c6:	1891      	adds	r1, r2, r2
 80044c8:	6239      	str	r1, [r7, #32]
 80044ca:	415b      	adcs	r3, r3
 80044cc:	627b      	str	r3, [r7, #36]	; 0x24
 80044ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80044d2:	4641      	mov	r1, r8
 80044d4:	1854      	adds	r4, r2, r1
 80044d6:	4649      	mov	r1, r9
 80044d8:	eb43 0501 	adc.w	r5, r3, r1
 80044dc:	f04f 0200 	mov.w	r2, #0
 80044e0:	f04f 0300 	mov.w	r3, #0
 80044e4:	00eb      	lsls	r3, r5, #3
 80044e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80044ea:	00e2      	lsls	r2, r4, #3
 80044ec:	4614      	mov	r4, r2
 80044ee:	461d      	mov	r5, r3
 80044f0:	4643      	mov	r3, r8
 80044f2:	18e3      	adds	r3, r4, r3
 80044f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80044f8:	464b      	mov	r3, r9
 80044fa:	eb45 0303 	adc.w	r3, r5, r3
 80044fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004502:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800450e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004512:	f04f 0200 	mov.w	r2, #0
 8004516:	f04f 0300 	mov.w	r3, #0
 800451a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800451e:	4629      	mov	r1, r5
 8004520:	008b      	lsls	r3, r1, #2
 8004522:	4621      	mov	r1, r4
 8004524:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004528:	4621      	mov	r1, r4
 800452a:	008a      	lsls	r2, r1, #2
 800452c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004530:	f7fb febe 	bl	80002b0 <__aeabi_uldivmod>
 8004534:	4602      	mov	r2, r0
 8004536:	460b      	mov	r3, r1
 8004538:	4b60      	ldr	r3, [pc, #384]	; (80046bc <UART_SetConfig+0x4e4>)
 800453a:	fba3 2302 	umull	r2, r3, r3, r2
 800453e:	095b      	lsrs	r3, r3, #5
 8004540:	011c      	lsls	r4, r3, #4
 8004542:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004546:	2200      	movs	r2, #0
 8004548:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800454c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004550:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004554:	4642      	mov	r2, r8
 8004556:	464b      	mov	r3, r9
 8004558:	1891      	adds	r1, r2, r2
 800455a:	61b9      	str	r1, [r7, #24]
 800455c:	415b      	adcs	r3, r3
 800455e:	61fb      	str	r3, [r7, #28]
 8004560:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004564:	4641      	mov	r1, r8
 8004566:	1851      	adds	r1, r2, r1
 8004568:	6139      	str	r1, [r7, #16]
 800456a:	4649      	mov	r1, r9
 800456c:	414b      	adcs	r3, r1
 800456e:	617b      	str	r3, [r7, #20]
 8004570:	f04f 0200 	mov.w	r2, #0
 8004574:	f04f 0300 	mov.w	r3, #0
 8004578:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800457c:	4659      	mov	r1, fp
 800457e:	00cb      	lsls	r3, r1, #3
 8004580:	4651      	mov	r1, sl
 8004582:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004586:	4651      	mov	r1, sl
 8004588:	00ca      	lsls	r2, r1, #3
 800458a:	4610      	mov	r0, r2
 800458c:	4619      	mov	r1, r3
 800458e:	4603      	mov	r3, r0
 8004590:	4642      	mov	r2, r8
 8004592:	189b      	adds	r3, r3, r2
 8004594:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004598:	464b      	mov	r3, r9
 800459a:	460a      	mov	r2, r1
 800459c:	eb42 0303 	adc.w	r3, r2, r3
 80045a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80045a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	67bb      	str	r3, [r7, #120]	; 0x78
 80045ae:	67fa      	str	r2, [r7, #124]	; 0x7c
 80045b0:	f04f 0200 	mov.w	r2, #0
 80045b4:	f04f 0300 	mov.w	r3, #0
 80045b8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80045bc:	4649      	mov	r1, r9
 80045be:	008b      	lsls	r3, r1, #2
 80045c0:	4641      	mov	r1, r8
 80045c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045c6:	4641      	mov	r1, r8
 80045c8:	008a      	lsls	r2, r1, #2
 80045ca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80045ce:	f7fb fe6f 	bl	80002b0 <__aeabi_uldivmod>
 80045d2:	4602      	mov	r2, r0
 80045d4:	460b      	mov	r3, r1
 80045d6:	4b39      	ldr	r3, [pc, #228]	; (80046bc <UART_SetConfig+0x4e4>)
 80045d8:	fba3 1302 	umull	r1, r3, r3, r2
 80045dc:	095b      	lsrs	r3, r3, #5
 80045de:	2164      	movs	r1, #100	; 0x64
 80045e0:	fb01 f303 	mul.w	r3, r1, r3
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	011b      	lsls	r3, r3, #4
 80045e8:	3332      	adds	r3, #50	; 0x32
 80045ea:	4a34      	ldr	r2, [pc, #208]	; (80046bc <UART_SetConfig+0x4e4>)
 80045ec:	fba2 2303 	umull	r2, r3, r2, r3
 80045f0:	095b      	lsrs	r3, r3, #5
 80045f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045f6:	441c      	add	r4, r3
 80045f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045fc:	2200      	movs	r2, #0
 80045fe:	673b      	str	r3, [r7, #112]	; 0x70
 8004600:	677a      	str	r2, [r7, #116]	; 0x74
 8004602:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004606:	4642      	mov	r2, r8
 8004608:	464b      	mov	r3, r9
 800460a:	1891      	adds	r1, r2, r2
 800460c:	60b9      	str	r1, [r7, #8]
 800460e:	415b      	adcs	r3, r3
 8004610:	60fb      	str	r3, [r7, #12]
 8004612:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004616:	4641      	mov	r1, r8
 8004618:	1851      	adds	r1, r2, r1
 800461a:	6039      	str	r1, [r7, #0]
 800461c:	4649      	mov	r1, r9
 800461e:	414b      	adcs	r3, r1
 8004620:	607b      	str	r3, [r7, #4]
 8004622:	f04f 0200 	mov.w	r2, #0
 8004626:	f04f 0300 	mov.w	r3, #0
 800462a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800462e:	4659      	mov	r1, fp
 8004630:	00cb      	lsls	r3, r1, #3
 8004632:	4651      	mov	r1, sl
 8004634:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004638:	4651      	mov	r1, sl
 800463a:	00ca      	lsls	r2, r1, #3
 800463c:	4610      	mov	r0, r2
 800463e:	4619      	mov	r1, r3
 8004640:	4603      	mov	r3, r0
 8004642:	4642      	mov	r2, r8
 8004644:	189b      	adds	r3, r3, r2
 8004646:	66bb      	str	r3, [r7, #104]	; 0x68
 8004648:	464b      	mov	r3, r9
 800464a:	460a      	mov	r2, r1
 800464c:	eb42 0303 	adc.w	r3, r2, r3
 8004650:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004652:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	663b      	str	r3, [r7, #96]	; 0x60
 800465c:	667a      	str	r2, [r7, #100]	; 0x64
 800465e:	f04f 0200 	mov.w	r2, #0
 8004662:	f04f 0300 	mov.w	r3, #0
 8004666:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800466a:	4649      	mov	r1, r9
 800466c:	008b      	lsls	r3, r1, #2
 800466e:	4641      	mov	r1, r8
 8004670:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004674:	4641      	mov	r1, r8
 8004676:	008a      	lsls	r2, r1, #2
 8004678:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800467c:	f7fb fe18 	bl	80002b0 <__aeabi_uldivmod>
 8004680:	4602      	mov	r2, r0
 8004682:	460b      	mov	r3, r1
 8004684:	4b0d      	ldr	r3, [pc, #52]	; (80046bc <UART_SetConfig+0x4e4>)
 8004686:	fba3 1302 	umull	r1, r3, r3, r2
 800468a:	095b      	lsrs	r3, r3, #5
 800468c:	2164      	movs	r1, #100	; 0x64
 800468e:	fb01 f303 	mul.w	r3, r1, r3
 8004692:	1ad3      	subs	r3, r2, r3
 8004694:	011b      	lsls	r3, r3, #4
 8004696:	3332      	adds	r3, #50	; 0x32
 8004698:	4a08      	ldr	r2, [pc, #32]	; (80046bc <UART_SetConfig+0x4e4>)
 800469a:	fba2 2303 	umull	r2, r3, r2, r3
 800469e:	095b      	lsrs	r3, r3, #5
 80046a0:	f003 020f 	and.w	r2, r3, #15
 80046a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4422      	add	r2, r4
 80046ac:	609a      	str	r2, [r3, #8]
}
 80046ae:	bf00      	nop
 80046b0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80046b4:	46bd      	mov	sp, r7
 80046b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046ba:	bf00      	nop
 80046bc:	51eb851f 	.word	0x51eb851f

080046c0 <__errno>:
 80046c0:	4b01      	ldr	r3, [pc, #4]	; (80046c8 <__errno+0x8>)
 80046c2:	6818      	ldr	r0, [r3, #0]
 80046c4:	4770      	bx	lr
 80046c6:	bf00      	nop
 80046c8:	2000000c 	.word	0x2000000c

080046cc <__libc_init_array>:
 80046cc:	b570      	push	{r4, r5, r6, lr}
 80046ce:	4d0d      	ldr	r5, [pc, #52]	; (8004704 <__libc_init_array+0x38>)
 80046d0:	4c0d      	ldr	r4, [pc, #52]	; (8004708 <__libc_init_array+0x3c>)
 80046d2:	1b64      	subs	r4, r4, r5
 80046d4:	10a4      	asrs	r4, r4, #2
 80046d6:	2600      	movs	r6, #0
 80046d8:	42a6      	cmp	r6, r4
 80046da:	d109      	bne.n	80046f0 <__libc_init_array+0x24>
 80046dc:	4d0b      	ldr	r5, [pc, #44]	; (800470c <__libc_init_array+0x40>)
 80046de:	4c0c      	ldr	r4, [pc, #48]	; (8004710 <__libc_init_array+0x44>)
 80046e0:	f001 f8fa 	bl	80058d8 <_init>
 80046e4:	1b64      	subs	r4, r4, r5
 80046e6:	10a4      	asrs	r4, r4, #2
 80046e8:	2600      	movs	r6, #0
 80046ea:	42a6      	cmp	r6, r4
 80046ec:	d105      	bne.n	80046fa <__libc_init_array+0x2e>
 80046ee:	bd70      	pop	{r4, r5, r6, pc}
 80046f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80046f4:	4798      	blx	r3
 80046f6:	3601      	adds	r6, #1
 80046f8:	e7ee      	b.n	80046d8 <__libc_init_array+0xc>
 80046fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80046fe:	4798      	blx	r3
 8004700:	3601      	adds	r6, #1
 8004702:	e7f2      	b.n	80046ea <__libc_init_array+0x1e>
 8004704:	080059cc 	.word	0x080059cc
 8004708:	080059cc 	.word	0x080059cc
 800470c:	080059cc 	.word	0x080059cc
 8004710:	080059d0 	.word	0x080059d0

08004714 <memset>:
 8004714:	4402      	add	r2, r0
 8004716:	4603      	mov	r3, r0
 8004718:	4293      	cmp	r3, r2
 800471a:	d100      	bne.n	800471e <memset+0xa>
 800471c:	4770      	bx	lr
 800471e:	f803 1b01 	strb.w	r1, [r3], #1
 8004722:	e7f9      	b.n	8004718 <memset+0x4>

08004724 <iprintf>:
 8004724:	b40f      	push	{r0, r1, r2, r3}
 8004726:	4b0a      	ldr	r3, [pc, #40]	; (8004750 <iprintf+0x2c>)
 8004728:	b513      	push	{r0, r1, r4, lr}
 800472a:	681c      	ldr	r4, [r3, #0]
 800472c:	b124      	cbz	r4, 8004738 <iprintf+0x14>
 800472e:	69a3      	ldr	r3, [r4, #24]
 8004730:	b913      	cbnz	r3, 8004738 <iprintf+0x14>
 8004732:	4620      	mov	r0, r4
 8004734:	f000 fb2c 	bl	8004d90 <__sinit>
 8004738:	ab05      	add	r3, sp, #20
 800473a:	9a04      	ldr	r2, [sp, #16]
 800473c:	68a1      	ldr	r1, [r4, #8]
 800473e:	9301      	str	r3, [sp, #4]
 8004740:	4620      	mov	r0, r4
 8004742:	f000 fd3d 	bl	80051c0 <_vfiprintf_r>
 8004746:	b002      	add	sp, #8
 8004748:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800474c:	b004      	add	sp, #16
 800474e:	4770      	bx	lr
 8004750:	2000000c 	.word	0x2000000c

08004754 <_puts_r>:
 8004754:	b570      	push	{r4, r5, r6, lr}
 8004756:	460e      	mov	r6, r1
 8004758:	4605      	mov	r5, r0
 800475a:	b118      	cbz	r0, 8004764 <_puts_r+0x10>
 800475c:	6983      	ldr	r3, [r0, #24]
 800475e:	b90b      	cbnz	r3, 8004764 <_puts_r+0x10>
 8004760:	f000 fb16 	bl	8004d90 <__sinit>
 8004764:	69ab      	ldr	r3, [r5, #24]
 8004766:	68ac      	ldr	r4, [r5, #8]
 8004768:	b913      	cbnz	r3, 8004770 <_puts_r+0x1c>
 800476a:	4628      	mov	r0, r5
 800476c:	f000 fb10 	bl	8004d90 <__sinit>
 8004770:	4b2c      	ldr	r3, [pc, #176]	; (8004824 <_puts_r+0xd0>)
 8004772:	429c      	cmp	r4, r3
 8004774:	d120      	bne.n	80047b8 <_puts_r+0x64>
 8004776:	686c      	ldr	r4, [r5, #4]
 8004778:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800477a:	07db      	lsls	r3, r3, #31
 800477c:	d405      	bmi.n	800478a <_puts_r+0x36>
 800477e:	89a3      	ldrh	r3, [r4, #12]
 8004780:	0598      	lsls	r0, r3, #22
 8004782:	d402      	bmi.n	800478a <_puts_r+0x36>
 8004784:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004786:	f000 fba1 	bl	8004ecc <__retarget_lock_acquire_recursive>
 800478a:	89a3      	ldrh	r3, [r4, #12]
 800478c:	0719      	lsls	r1, r3, #28
 800478e:	d51d      	bpl.n	80047cc <_puts_r+0x78>
 8004790:	6923      	ldr	r3, [r4, #16]
 8004792:	b1db      	cbz	r3, 80047cc <_puts_r+0x78>
 8004794:	3e01      	subs	r6, #1
 8004796:	68a3      	ldr	r3, [r4, #8]
 8004798:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800479c:	3b01      	subs	r3, #1
 800479e:	60a3      	str	r3, [r4, #8]
 80047a0:	bb39      	cbnz	r1, 80047f2 <_puts_r+0x9e>
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	da38      	bge.n	8004818 <_puts_r+0xc4>
 80047a6:	4622      	mov	r2, r4
 80047a8:	210a      	movs	r1, #10
 80047aa:	4628      	mov	r0, r5
 80047ac:	f000 f916 	bl	80049dc <__swbuf_r>
 80047b0:	3001      	adds	r0, #1
 80047b2:	d011      	beq.n	80047d8 <_puts_r+0x84>
 80047b4:	250a      	movs	r5, #10
 80047b6:	e011      	b.n	80047dc <_puts_r+0x88>
 80047b8:	4b1b      	ldr	r3, [pc, #108]	; (8004828 <_puts_r+0xd4>)
 80047ba:	429c      	cmp	r4, r3
 80047bc:	d101      	bne.n	80047c2 <_puts_r+0x6e>
 80047be:	68ac      	ldr	r4, [r5, #8]
 80047c0:	e7da      	b.n	8004778 <_puts_r+0x24>
 80047c2:	4b1a      	ldr	r3, [pc, #104]	; (800482c <_puts_r+0xd8>)
 80047c4:	429c      	cmp	r4, r3
 80047c6:	bf08      	it	eq
 80047c8:	68ec      	ldreq	r4, [r5, #12]
 80047ca:	e7d5      	b.n	8004778 <_puts_r+0x24>
 80047cc:	4621      	mov	r1, r4
 80047ce:	4628      	mov	r0, r5
 80047d0:	f000 f956 	bl	8004a80 <__swsetup_r>
 80047d4:	2800      	cmp	r0, #0
 80047d6:	d0dd      	beq.n	8004794 <_puts_r+0x40>
 80047d8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80047dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80047de:	07da      	lsls	r2, r3, #31
 80047e0:	d405      	bmi.n	80047ee <_puts_r+0x9a>
 80047e2:	89a3      	ldrh	r3, [r4, #12]
 80047e4:	059b      	lsls	r3, r3, #22
 80047e6:	d402      	bmi.n	80047ee <_puts_r+0x9a>
 80047e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80047ea:	f000 fb70 	bl	8004ece <__retarget_lock_release_recursive>
 80047ee:	4628      	mov	r0, r5
 80047f0:	bd70      	pop	{r4, r5, r6, pc}
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	da04      	bge.n	8004800 <_puts_r+0xac>
 80047f6:	69a2      	ldr	r2, [r4, #24]
 80047f8:	429a      	cmp	r2, r3
 80047fa:	dc06      	bgt.n	800480a <_puts_r+0xb6>
 80047fc:	290a      	cmp	r1, #10
 80047fe:	d004      	beq.n	800480a <_puts_r+0xb6>
 8004800:	6823      	ldr	r3, [r4, #0]
 8004802:	1c5a      	adds	r2, r3, #1
 8004804:	6022      	str	r2, [r4, #0]
 8004806:	7019      	strb	r1, [r3, #0]
 8004808:	e7c5      	b.n	8004796 <_puts_r+0x42>
 800480a:	4622      	mov	r2, r4
 800480c:	4628      	mov	r0, r5
 800480e:	f000 f8e5 	bl	80049dc <__swbuf_r>
 8004812:	3001      	adds	r0, #1
 8004814:	d1bf      	bne.n	8004796 <_puts_r+0x42>
 8004816:	e7df      	b.n	80047d8 <_puts_r+0x84>
 8004818:	6823      	ldr	r3, [r4, #0]
 800481a:	250a      	movs	r5, #10
 800481c:	1c5a      	adds	r2, r3, #1
 800481e:	6022      	str	r2, [r4, #0]
 8004820:	701d      	strb	r5, [r3, #0]
 8004822:	e7db      	b.n	80047dc <_puts_r+0x88>
 8004824:	08005950 	.word	0x08005950
 8004828:	08005970 	.word	0x08005970
 800482c:	08005930 	.word	0x08005930

08004830 <puts>:
 8004830:	4b02      	ldr	r3, [pc, #8]	; (800483c <puts+0xc>)
 8004832:	4601      	mov	r1, r0
 8004834:	6818      	ldr	r0, [r3, #0]
 8004836:	f7ff bf8d 	b.w	8004754 <_puts_r>
 800483a:	bf00      	nop
 800483c:	2000000c 	.word	0x2000000c

08004840 <setbuf>:
 8004840:	2900      	cmp	r1, #0
 8004842:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004846:	bf0c      	ite	eq
 8004848:	2202      	moveq	r2, #2
 800484a:	2200      	movne	r2, #0
 800484c:	f000 b800 	b.w	8004850 <setvbuf>

08004850 <setvbuf>:
 8004850:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004854:	461d      	mov	r5, r3
 8004856:	4b5d      	ldr	r3, [pc, #372]	; (80049cc <setvbuf+0x17c>)
 8004858:	681f      	ldr	r7, [r3, #0]
 800485a:	4604      	mov	r4, r0
 800485c:	460e      	mov	r6, r1
 800485e:	4690      	mov	r8, r2
 8004860:	b127      	cbz	r7, 800486c <setvbuf+0x1c>
 8004862:	69bb      	ldr	r3, [r7, #24]
 8004864:	b913      	cbnz	r3, 800486c <setvbuf+0x1c>
 8004866:	4638      	mov	r0, r7
 8004868:	f000 fa92 	bl	8004d90 <__sinit>
 800486c:	4b58      	ldr	r3, [pc, #352]	; (80049d0 <setvbuf+0x180>)
 800486e:	429c      	cmp	r4, r3
 8004870:	d167      	bne.n	8004942 <setvbuf+0xf2>
 8004872:	687c      	ldr	r4, [r7, #4]
 8004874:	f1b8 0f02 	cmp.w	r8, #2
 8004878:	d006      	beq.n	8004888 <setvbuf+0x38>
 800487a:	f1b8 0f01 	cmp.w	r8, #1
 800487e:	f200 809f 	bhi.w	80049c0 <setvbuf+0x170>
 8004882:	2d00      	cmp	r5, #0
 8004884:	f2c0 809c 	blt.w	80049c0 <setvbuf+0x170>
 8004888:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800488a:	07db      	lsls	r3, r3, #31
 800488c:	d405      	bmi.n	800489a <setvbuf+0x4a>
 800488e:	89a3      	ldrh	r3, [r4, #12]
 8004890:	0598      	lsls	r0, r3, #22
 8004892:	d402      	bmi.n	800489a <setvbuf+0x4a>
 8004894:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004896:	f000 fb19 	bl	8004ecc <__retarget_lock_acquire_recursive>
 800489a:	4621      	mov	r1, r4
 800489c:	4638      	mov	r0, r7
 800489e:	f000 f9e3 	bl	8004c68 <_fflush_r>
 80048a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80048a4:	b141      	cbz	r1, 80048b8 <setvbuf+0x68>
 80048a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80048aa:	4299      	cmp	r1, r3
 80048ac:	d002      	beq.n	80048b4 <setvbuf+0x64>
 80048ae:	4638      	mov	r0, r7
 80048b0:	f000 fb7c 	bl	8004fac <_free_r>
 80048b4:	2300      	movs	r3, #0
 80048b6:	6363      	str	r3, [r4, #52]	; 0x34
 80048b8:	2300      	movs	r3, #0
 80048ba:	61a3      	str	r3, [r4, #24]
 80048bc:	6063      	str	r3, [r4, #4]
 80048be:	89a3      	ldrh	r3, [r4, #12]
 80048c0:	0619      	lsls	r1, r3, #24
 80048c2:	d503      	bpl.n	80048cc <setvbuf+0x7c>
 80048c4:	6921      	ldr	r1, [r4, #16]
 80048c6:	4638      	mov	r0, r7
 80048c8:	f000 fb70 	bl	8004fac <_free_r>
 80048cc:	89a3      	ldrh	r3, [r4, #12]
 80048ce:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80048d2:	f023 0303 	bic.w	r3, r3, #3
 80048d6:	f1b8 0f02 	cmp.w	r8, #2
 80048da:	81a3      	strh	r3, [r4, #12]
 80048dc:	d06c      	beq.n	80049b8 <setvbuf+0x168>
 80048de:	ab01      	add	r3, sp, #4
 80048e0:	466a      	mov	r2, sp
 80048e2:	4621      	mov	r1, r4
 80048e4:	4638      	mov	r0, r7
 80048e6:	f000 faf3 	bl	8004ed0 <__swhatbuf_r>
 80048ea:	89a3      	ldrh	r3, [r4, #12]
 80048ec:	4318      	orrs	r0, r3
 80048ee:	81a0      	strh	r0, [r4, #12]
 80048f0:	2d00      	cmp	r5, #0
 80048f2:	d130      	bne.n	8004956 <setvbuf+0x106>
 80048f4:	9d00      	ldr	r5, [sp, #0]
 80048f6:	4628      	mov	r0, r5
 80048f8:	f000 fb50 	bl	8004f9c <malloc>
 80048fc:	4606      	mov	r6, r0
 80048fe:	2800      	cmp	r0, #0
 8004900:	d155      	bne.n	80049ae <setvbuf+0x15e>
 8004902:	f8dd 9000 	ldr.w	r9, [sp]
 8004906:	45a9      	cmp	r9, r5
 8004908:	d14a      	bne.n	80049a0 <setvbuf+0x150>
 800490a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800490e:	2200      	movs	r2, #0
 8004910:	60a2      	str	r2, [r4, #8]
 8004912:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8004916:	6022      	str	r2, [r4, #0]
 8004918:	6122      	str	r2, [r4, #16]
 800491a:	2201      	movs	r2, #1
 800491c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004920:	6162      	str	r2, [r4, #20]
 8004922:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004924:	f043 0302 	orr.w	r3, r3, #2
 8004928:	07d2      	lsls	r2, r2, #31
 800492a:	81a3      	strh	r3, [r4, #12]
 800492c:	d405      	bmi.n	800493a <setvbuf+0xea>
 800492e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004932:	d102      	bne.n	800493a <setvbuf+0xea>
 8004934:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004936:	f000 faca 	bl	8004ece <__retarget_lock_release_recursive>
 800493a:	4628      	mov	r0, r5
 800493c:	b003      	add	sp, #12
 800493e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004942:	4b24      	ldr	r3, [pc, #144]	; (80049d4 <setvbuf+0x184>)
 8004944:	429c      	cmp	r4, r3
 8004946:	d101      	bne.n	800494c <setvbuf+0xfc>
 8004948:	68bc      	ldr	r4, [r7, #8]
 800494a:	e793      	b.n	8004874 <setvbuf+0x24>
 800494c:	4b22      	ldr	r3, [pc, #136]	; (80049d8 <setvbuf+0x188>)
 800494e:	429c      	cmp	r4, r3
 8004950:	bf08      	it	eq
 8004952:	68fc      	ldreq	r4, [r7, #12]
 8004954:	e78e      	b.n	8004874 <setvbuf+0x24>
 8004956:	2e00      	cmp	r6, #0
 8004958:	d0cd      	beq.n	80048f6 <setvbuf+0xa6>
 800495a:	69bb      	ldr	r3, [r7, #24]
 800495c:	b913      	cbnz	r3, 8004964 <setvbuf+0x114>
 800495e:	4638      	mov	r0, r7
 8004960:	f000 fa16 	bl	8004d90 <__sinit>
 8004964:	f1b8 0f01 	cmp.w	r8, #1
 8004968:	bf08      	it	eq
 800496a:	89a3      	ldrheq	r3, [r4, #12]
 800496c:	6026      	str	r6, [r4, #0]
 800496e:	bf04      	itt	eq
 8004970:	f043 0301 	orreq.w	r3, r3, #1
 8004974:	81a3      	strheq	r3, [r4, #12]
 8004976:	89a2      	ldrh	r2, [r4, #12]
 8004978:	f012 0308 	ands.w	r3, r2, #8
 800497c:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8004980:	d01c      	beq.n	80049bc <setvbuf+0x16c>
 8004982:	07d3      	lsls	r3, r2, #31
 8004984:	bf41      	itttt	mi
 8004986:	2300      	movmi	r3, #0
 8004988:	426d      	negmi	r5, r5
 800498a:	60a3      	strmi	r3, [r4, #8]
 800498c:	61a5      	strmi	r5, [r4, #24]
 800498e:	bf58      	it	pl
 8004990:	60a5      	strpl	r5, [r4, #8]
 8004992:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8004994:	f015 0501 	ands.w	r5, r5, #1
 8004998:	d115      	bne.n	80049c6 <setvbuf+0x176>
 800499a:	f412 7f00 	tst.w	r2, #512	; 0x200
 800499e:	e7c8      	b.n	8004932 <setvbuf+0xe2>
 80049a0:	4648      	mov	r0, r9
 80049a2:	f000 fafb 	bl	8004f9c <malloc>
 80049a6:	4606      	mov	r6, r0
 80049a8:	2800      	cmp	r0, #0
 80049aa:	d0ae      	beq.n	800490a <setvbuf+0xba>
 80049ac:	464d      	mov	r5, r9
 80049ae:	89a3      	ldrh	r3, [r4, #12]
 80049b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049b4:	81a3      	strh	r3, [r4, #12]
 80049b6:	e7d0      	b.n	800495a <setvbuf+0x10a>
 80049b8:	2500      	movs	r5, #0
 80049ba:	e7a8      	b.n	800490e <setvbuf+0xbe>
 80049bc:	60a3      	str	r3, [r4, #8]
 80049be:	e7e8      	b.n	8004992 <setvbuf+0x142>
 80049c0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80049c4:	e7b9      	b.n	800493a <setvbuf+0xea>
 80049c6:	2500      	movs	r5, #0
 80049c8:	e7b7      	b.n	800493a <setvbuf+0xea>
 80049ca:	bf00      	nop
 80049cc:	2000000c 	.word	0x2000000c
 80049d0:	08005950 	.word	0x08005950
 80049d4:	08005970 	.word	0x08005970
 80049d8:	08005930 	.word	0x08005930

080049dc <__swbuf_r>:
 80049dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049de:	460e      	mov	r6, r1
 80049e0:	4614      	mov	r4, r2
 80049e2:	4605      	mov	r5, r0
 80049e4:	b118      	cbz	r0, 80049ee <__swbuf_r+0x12>
 80049e6:	6983      	ldr	r3, [r0, #24]
 80049e8:	b90b      	cbnz	r3, 80049ee <__swbuf_r+0x12>
 80049ea:	f000 f9d1 	bl	8004d90 <__sinit>
 80049ee:	4b21      	ldr	r3, [pc, #132]	; (8004a74 <__swbuf_r+0x98>)
 80049f0:	429c      	cmp	r4, r3
 80049f2:	d12b      	bne.n	8004a4c <__swbuf_r+0x70>
 80049f4:	686c      	ldr	r4, [r5, #4]
 80049f6:	69a3      	ldr	r3, [r4, #24]
 80049f8:	60a3      	str	r3, [r4, #8]
 80049fa:	89a3      	ldrh	r3, [r4, #12]
 80049fc:	071a      	lsls	r2, r3, #28
 80049fe:	d52f      	bpl.n	8004a60 <__swbuf_r+0x84>
 8004a00:	6923      	ldr	r3, [r4, #16]
 8004a02:	b36b      	cbz	r3, 8004a60 <__swbuf_r+0x84>
 8004a04:	6923      	ldr	r3, [r4, #16]
 8004a06:	6820      	ldr	r0, [r4, #0]
 8004a08:	1ac0      	subs	r0, r0, r3
 8004a0a:	6963      	ldr	r3, [r4, #20]
 8004a0c:	b2f6      	uxtb	r6, r6
 8004a0e:	4283      	cmp	r3, r0
 8004a10:	4637      	mov	r7, r6
 8004a12:	dc04      	bgt.n	8004a1e <__swbuf_r+0x42>
 8004a14:	4621      	mov	r1, r4
 8004a16:	4628      	mov	r0, r5
 8004a18:	f000 f926 	bl	8004c68 <_fflush_r>
 8004a1c:	bb30      	cbnz	r0, 8004a6c <__swbuf_r+0x90>
 8004a1e:	68a3      	ldr	r3, [r4, #8]
 8004a20:	3b01      	subs	r3, #1
 8004a22:	60a3      	str	r3, [r4, #8]
 8004a24:	6823      	ldr	r3, [r4, #0]
 8004a26:	1c5a      	adds	r2, r3, #1
 8004a28:	6022      	str	r2, [r4, #0]
 8004a2a:	701e      	strb	r6, [r3, #0]
 8004a2c:	6963      	ldr	r3, [r4, #20]
 8004a2e:	3001      	adds	r0, #1
 8004a30:	4283      	cmp	r3, r0
 8004a32:	d004      	beq.n	8004a3e <__swbuf_r+0x62>
 8004a34:	89a3      	ldrh	r3, [r4, #12]
 8004a36:	07db      	lsls	r3, r3, #31
 8004a38:	d506      	bpl.n	8004a48 <__swbuf_r+0x6c>
 8004a3a:	2e0a      	cmp	r6, #10
 8004a3c:	d104      	bne.n	8004a48 <__swbuf_r+0x6c>
 8004a3e:	4621      	mov	r1, r4
 8004a40:	4628      	mov	r0, r5
 8004a42:	f000 f911 	bl	8004c68 <_fflush_r>
 8004a46:	b988      	cbnz	r0, 8004a6c <__swbuf_r+0x90>
 8004a48:	4638      	mov	r0, r7
 8004a4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a4c:	4b0a      	ldr	r3, [pc, #40]	; (8004a78 <__swbuf_r+0x9c>)
 8004a4e:	429c      	cmp	r4, r3
 8004a50:	d101      	bne.n	8004a56 <__swbuf_r+0x7a>
 8004a52:	68ac      	ldr	r4, [r5, #8]
 8004a54:	e7cf      	b.n	80049f6 <__swbuf_r+0x1a>
 8004a56:	4b09      	ldr	r3, [pc, #36]	; (8004a7c <__swbuf_r+0xa0>)
 8004a58:	429c      	cmp	r4, r3
 8004a5a:	bf08      	it	eq
 8004a5c:	68ec      	ldreq	r4, [r5, #12]
 8004a5e:	e7ca      	b.n	80049f6 <__swbuf_r+0x1a>
 8004a60:	4621      	mov	r1, r4
 8004a62:	4628      	mov	r0, r5
 8004a64:	f000 f80c 	bl	8004a80 <__swsetup_r>
 8004a68:	2800      	cmp	r0, #0
 8004a6a:	d0cb      	beq.n	8004a04 <__swbuf_r+0x28>
 8004a6c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004a70:	e7ea      	b.n	8004a48 <__swbuf_r+0x6c>
 8004a72:	bf00      	nop
 8004a74:	08005950 	.word	0x08005950
 8004a78:	08005970 	.word	0x08005970
 8004a7c:	08005930 	.word	0x08005930

08004a80 <__swsetup_r>:
 8004a80:	4b32      	ldr	r3, [pc, #200]	; (8004b4c <__swsetup_r+0xcc>)
 8004a82:	b570      	push	{r4, r5, r6, lr}
 8004a84:	681d      	ldr	r5, [r3, #0]
 8004a86:	4606      	mov	r6, r0
 8004a88:	460c      	mov	r4, r1
 8004a8a:	b125      	cbz	r5, 8004a96 <__swsetup_r+0x16>
 8004a8c:	69ab      	ldr	r3, [r5, #24]
 8004a8e:	b913      	cbnz	r3, 8004a96 <__swsetup_r+0x16>
 8004a90:	4628      	mov	r0, r5
 8004a92:	f000 f97d 	bl	8004d90 <__sinit>
 8004a96:	4b2e      	ldr	r3, [pc, #184]	; (8004b50 <__swsetup_r+0xd0>)
 8004a98:	429c      	cmp	r4, r3
 8004a9a:	d10f      	bne.n	8004abc <__swsetup_r+0x3c>
 8004a9c:	686c      	ldr	r4, [r5, #4]
 8004a9e:	89a3      	ldrh	r3, [r4, #12]
 8004aa0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004aa4:	0719      	lsls	r1, r3, #28
 8004aa6:	d42c      	bmi.n	8004b02 <__swsetup_r+0x82>
 8004aa8:	06dd      	lsls	r5, r3, #27
 8004aaa:	d411      	bmi.n	8004ad0 <__swsetup_r+0x50>
 8004aac:	2309      	movs	r3, #9
 8004aae:	6033      	str	r3, [r6, #0]
 8004ab0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004ab4:	81a3      	strh	r3, [r4, #12]
 8004ab6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004aba:	e03e      	b.n	8004b3a <__swsetup_r+0xba>
 8004abc:	4b25      	ldr	r3, [pc, #148]	; (8004b54 <__swsetup_r+0xd4>)
 8004abe:	429c      	cmp	r4, r3
 8004ac0:	d101      	bne.n	8004ac6 <__swsetup_r+0x46>
 8004ac2:	68ac      	ldr	r4, [r5, #8]
 8004ac4:	e7eb      	b.n	8004a9e <__swsetup_r+0x1e>
 8004ac6:	4b24      	ldr	r3, [pc, #144]	; (8004b58 <__swsetup_r+0xd8>)
 8004ac8:	429c      	cmp	r4, r3
 8004aca:	bf08      	it	eq
 8004acc:	68ec      	ldreq	r4, [r5, #12]
 8004ace:	e7e6      	b.n	8004a9e <__swsetup_r+0x1e>
 8004ad0:	0758      	lsls	r0, r3, #29
 8004ad2:	d512      	bpl.n	8004afa <__swsetup_r+0x7a>
 8004ad4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004ad6:	b141      	cbz	r1, 8004aea <__swsetup_r+0x6a>
 8004ad8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004adc:	4299      	cmp	r1, r3
 8004ade:	d002      	beq.n	8004ae6 <__swsetup_r+0x66>
 8004ae0:	4630      	mov	r0, r6
 8004ae2:	f000 fa63 	bl	8004fac <_free_r>
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	6363      	str	r3, [r4, #52]	; 0x34
 8004aea:	89a3      	ldrh	r3, [r4, #12]
 8004aec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004af0:	81a3      	strh	r3, [r4, #12]
 8004af2:	2300      	movs	r3, #0
 8004af4:	6063      	str	r3, [r4, #4]
 8004af6:	6923      	ldr	r3, [r4, #16]
 8004af8:	6023      	str	r3, [r4, #0]
 8004afa:	89a3      	ldrh	r3, [r4, #12]
 8004afc:	f043 0308 	orr.w	r3, r3, #8
 8004b00:	81a3      	strh	r3, [r4, #12]
 8004b02:	6923      	ldr	r3, [r4, #16]
 8004b04:	b94b      	cbnz	r3, 8004b1a <__swsetup_r+0x9a>
 8004b06:	89a3      	ldrh	r3, [r4, #12]
 8004b08:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004b0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b10:	d003      	beq.n	8004b1a <__swsetup_r+0x9a>
 8004b12:	4621      	mov	r1, r4
 8004b14:	4630      	mov	r0, r6
 8004b16:	f000 fa01 	bl	8004f1c <__smakebuf_r>
 8004b1a:	89a0      	ldrh	r0, [r4, #12]
 8004b1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004b20:	f010 0301 	ands.w	r3, r0, #1
 8004b24:	d00a      	beq.n	8004b3c <__swsetup_r+0xbc>
 8004b26:	2300      	movs	r3, #0
 8004b28:	60a3      	str	r3, [r4, #8]
 8004b2a:	6963      	ldr	r3, [r4, #20]
 8004b2c:	425b      	negs	r3, r3
 8004b2e:	61a3      	str	r3, [r4, #24]
 8004b30:	6923      	ldr	r3, [r4, #16]
 8004b32:	b943      	cbnz	r3, 8004b46 <__swsetup_r+0xc6>
 8004b34:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004b38:	d1ba      	bne.n	8004ab0 <__swsetup_r+0x30>
 8004b3a:	bd70      	pop	{r4, r5, r6, pc}
 8004b3c:	0781      	lsls	r1, r0, #30
 8004b3e:	bf58      	it	pl
 8004b40:	6963      	ldrpl	r3, [r4, #20]
 8004b42:	60a3      	str	r3, [r4, #8]
 8004b44:	e7f4      	b.n	8004b30 <__swsetup_r+0xb0>
 8004b46:	2000      	movs	r0, #0
 8004b48:	e7f7      	b.n	8004b3a <__swsetup_r+0xba>
 8004b4a:	bf00      	nop
 8004b4c:	2000000c 	.word	0x2000000c
 8004b50:	08005950 	.word	0x08005950
 8004b54:	08005970 	.word	0x08005970
 8004b58:	08005930 	.word	0x08005930

08004b5c <__sflush_r>:
 8004b5c:	898a      	ldrh	r2, [r1, #12]
 8004b5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b62:	4605      	mov	r5, r0
 8004b64:	0710      	lsls	r0, r2, #28
 8004b66:	460c      	mov	r4, r1
 8004b68:	d458      	bmi.n	8004c1c <__sflush_r+0xc0>
 8004b6a:	684b      	ldr	r3, [r1, #4]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	dc05      	bgt.n	8004b7c <__sflush_r+0x20>
 8004b70:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	dc02      	bgt.n	8004b7c <__sflush_r+0x20>
 8004b76:	2000      	movs	r0, #0
 8004b78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004b7e:	2e00      	cmp	r6, #0
 8004b80:	d0f9      	beq.n	8004b76 <__sflush_r+0x1a>
 8004b82:	2300      	movs	r3, #0
 8004b84:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004b88:	682f      	ldr	r7, [r5, #0]
 8004b8a:	602b      	str	r3, [r5, #0]
 8004b8c:	d032      	beq.n	8004bf4 <__sflush_r+0x98>
 8004b8e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004b90:	89a3      	ldrh	r3, [r4, #12]
 8004b92:	075a      	lsls	r2, r3, #29
 8004b94:	d505      	bpl.n	8004ba2 <__sflush_r+0x46>
 8004b96:	6863      	ldr	r3, [r4, #4]
 8004b98:	1ac0      	subs	r0, r0, r3
 8004b9a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004b9c:	b10b      	cbz	r3, 8004ba2 <__sflush_r+0x46>
 8004b9e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004ba0:	1ac0      	subs	r0, r0, r3
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004ba8:	6a21      	ldr	r1, [r4, #32]
 8004baa:	4628      	mov	r0, r5
 8004bac:	47b0      	blx	r6
 8004bae:	1c43      	adds	r3, r0, #1
 8004bb0:	89a3      	ldrh	r3, [r4, #12]
 8004bb2:	d106      	bne.n	8004bc2 <__sflush_r+0x66>
 8004bb4:	6829      	ldr	r1, [r5, #0]
 8004bb6:	291d      	cmp	r1, #29
 8004bb8:	d82c      	bhi.n	8004c14 <__sflush_r+0xb8>
 8004bba:	4a2a      	ldr	r2, [pc, #168]	; (8004c64 <__sflush_r+0x108>)
 8004bbc:	40ca      	lsrs	r2, r1
 8004bbe:	07d6      	lsls	r6, r2, #31
 8004bc0:	d528      	bpl.n	8004c14 <__sflush_r+0xb8>
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	6062      	str	r2, [r4, #4]
 8004bc6:	04d9      	lsls	r1, r3, #19
 8004bc8:	6922      	ldr	r2, [r4, #16]
 8004bca:	6022      	str	r2, [r4, #0]
 8004bcc:	d504      	bpl.n	8004bd8 <__sflush_r+0x7c>
 8004bce:	1c42      	adds	r2, r0, #1
 8004bd0:	d101      	bne.n	8004bd6 <__sflush_r+0x7a>
 8004bd2:	682b      	ldr	r3, [r5, #0]
 8004bd4:	b903      	cbnz	r3, 8004bd8 <__sflush_r+0x7c>
 8004bd6:	6560      	str	r0, [r4, #84]	; 0x54
 8004bd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004bda:	602f      	str	r7, [r5, #0]
 8004bdc:	2900      	cmp	r1, #0
 8004bde:	d0ca      	beq.n	8004b76 <__sflush_r+0x1a>
 8004be0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004be4:	4299      	cmp	r1, r3
 8004be6:	d002      	beq.n	8004bee <__sflush_r+0x92>
 8004be8:	4628      	mov	r0, r5
 8004bea:	f000 f9df 	bl	8004fac <_free_r>
 8004bee:	2000      	movs	r0, #0
 8004bf0:	6360      	str	r0, [r4, #52]	; 0x34
 8004bf2:	e7c1      	b.n	8004b78 <__sflush_r+0x1c>
 8004bf4:	6a21      	ldr	r1, [r4, #32]
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	4628      	mov	r0, r5
 8004bfa:	47b0      	blx	r6
 8004bfc:	1c41      	adds	r1, r0, #1
 8004bfe:	d1c7      	bne.n	8004b90 <__sflush_r+0x34>
 8004c00:	682b      	ldr	r3, [r5, #0]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d0c4      	beq.n	8004b90 <__sflush_r+0x34>
 8004c06:	2b1d      	cmp	r3, #29
 8004c08:	d001      	beq.n	8004c0e <__sflush_r+0xb2>
 8004c0a:	2b16      	cmp	r3, #22
 8004c0c:	d101      	bne.n	8004c12 <__sflush_r+0xb6>
 8004c0e:	602f      	str	r7, [r5, #0]
 8004c10:	e7b1      	b.n	8004b76 <__sflush_r+0x1a>
 8004c12:	89a3      	ldrh	r3, [r4, #12]
 8004c14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c18:	81a3      	strh	r3, [r4, #12]
 8004c1a:	e7ad      	b.n	8004b78 <__sflush_r+0x1c>
 8004c1c:	690f      	ldr	r7, [r1, #16]
 8004c1e:	2f00      	cmp	r7, #0
 8004c20:	d0a9      	beq.n	8004b76 <__sflush_r+0x1a>
 8004c22:	0793      	lsls	r3, r2, #30
 8004c24:	680e      	ldr	r6, [r1, #0]
 8004c26:	bf08      	it	eq
 8004c28:	694b      	ldreq	r3, [r1, #20]
 8004c2a:	600f      	str	r7, [r1, #0]
 8004c2c:	bf18      	it	ne
 8004c2e:	2300      	movne	r3, #0
 8004c30:	eba6 0807 	sub.w	r8, r6, r7
 8004c34:	608b      	str	r3, [r1, #8]
 8004c36:	f1b8 0f00 	cmp.w	r8, #0
 8004c3a:	dd9c      	ble.n	8004b76 <__sflush_r+0x1a>
 8004c3c:	6a21      	ldr	r1, [r4, #32]
 8004c3e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004c40:	4643      	mov	r3, r8
 8004c42:	463a      	mov	r2, r7
 8004c44:	4628      	mov	r0, r5
 8004c46:	47b0      	blx	r6
 8004c48:	2800      	cmp	r0, #0
 8004c4a:	dc06      	bgt.n	8004c5a <__sflush_r+0xfe>
 8004c4c:	89a3      	ldrh	r3, [r4, #12]
 8004c4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c52:	81a3      	strh	r3, [r4, #12]
 8004c54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004c58:	e78e      	b.n	8004b78 <__sflush_r+0x1c>
 8004c5a:	4407      	add	r7, r0
 8004c5c:	eba8 0800 	sub.w	r8, r8, r0
 8004c60:	e7e9      	b.n	8004c36 <__sflush_r+0xda>
 8004c62:	bf00      	nop
 8004c64:	20400001 	.word	0x20400001

08004c68 <_fflush_r>:
 8004c68:	b538      	push	{r3, r4, r5, lr}
 8004c6a:	690b      	ldr	r3, [r1, #16]
 8004c6c:	4605      	mov	r5, r0
 8004c6e:	460c      	mov	r4, r1
 8004c70:	b913      	cbnz	r3, 8004c78 <_fflush_r+0x10>
 8004c72:	2500      	movs	r5, #0
 8004c74:	4628      	mov	r0, r5
 8004c76:	bd38      	pop	{r3, r4, r5, pc}
 8004c78:	b118      	cbz	r0, 8004c82 <_fflush_r+0x1a>
 8004c7a:	6983      	ldr	r3, [r0, #24]
 8004c7c:	b90b      	cbnz	r3, 8004c82 <_fflush_r+0x1a>
 8004c7e:	f000 f887 	bl	8004d90 <__sinit>
 8004c82:	4b14      	ldr	r3, [pc, #80]	; (8004cd4 <_fflush_r+0x6c>)
 8004c84:	429c      	cmp	r4, r3
 8004c86:	d11b      	bne.n	8004cc0 <_fflush_r+0x58>
 8004c88:	686c      	ldr	r4, [r5, #4]
 8004c8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d0ef      	beq.n	8004c72 <_fflush_r+0xa>
 8004c92:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004c94:	07d0      	lsls	r0, r2, #31
 8004c96:	d404      	bmi.n	8004ca2 <_fflush_r+0x3a>
 8004c98:	0599      	lsls	r1, r3, #22
 8004c9a:	d402      	bmi.n	8004ca2 <_fflush_r+0x3a>
 8004c9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c9e:	f000 f915 	bl	8004ecc <__retarget_lock_acquire_recursive>
 8004ca2:	4628      	mov	r0, r5
 8004ca4:	4621      	mov	r1, r4
 8004ca6:	f7ff ff59 	bl	8004b5c <__sflush_r>
 8004caa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004cac:	07da      	lsls	r2, r3, #31
 8004cae:	4605      	mov	r5, r0
 8004cb0:	d4e0      	bmi.n	8004c74 <_fflush_r+0xc>
 8004cb2:	89a3      	ldrh	r3, [r4, #12]
 8004cb4:	059b      	lsls	r3, r3, #22
 8004cb6:	d4dd      	bmi.n	8004c74 <_fflush_r+0xc>
 8004cb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004cba:	f000 f908 	bl	8004ece <__retarget_lock_release_recursive>
 8004cbe:	e7d9      	b.n	8004c74 <_fflush_r+0xc>
 8004cc0:	4b05      	ldr	r3, [pc, #20]	; (8004cd8 <_fflush_r+0x70>)
 8004cc2:	429c      	cmp	r4, r3
 8004cc4:	d101      	bne.n	8004cca <_fflush_r+0x62>
 8004cc6:	68ac      	ldr	r4, [r5, #8]
 8004cc8:	e7df      	b.n	8004c8a <_fflush_r+0x22>
 8004cca:	4b04      	ldr	r3, [pc, #16]	; (8004cdc <_fflush_r+0x74>)
 8004ccc:	429c      	cmp	r4, r3
 8004cce:	bf08      	it	eq
 8004cd0:	68ec      	ldreq	r4, [r5, #12]
 8004cd2:	e7da      	b.n	8004c8a <_fflush_r+0x22>
 8004cd4:	08005950 	.word	0x08005950
 8004cd8:	08005970 	.word	0x08005970
 8004cdc:	08005930 	.word	0x08005930

08004ce0 <std>:
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	b510      	push	{r4, lr}
 8004ce4:	4604      	mov	r4, r0
 8004ce6:	e9c0 3300 	strd	r3, r3, [r0]
 8004cea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004cee:	6083      	str	r3, [r0, #8]
 8004cf0:	8181      	strh	r1, [r0, #12]
 8004cf2:	6643      	str	r3, [r0, #100]	; 0x64
 8004cf4:	81c2      	strh	r2, [r0, #14]
 8004cf6:	6183      	str	r3, [r0, #24]
 8004cf8:	4619      	mov	r1, r3
 8004cfa:	2208      	movs	r2, #8
 8004cfc:	305c      	adds	r0, #92	; 0x5c
 8004cfe:	f7ff fd09 	bl	8004714 <memset>
 8004d02:	4b05      	ldr	r3, [pc, #20]	; (8004d18 <std+0x38>)
 8004d04:	6263      	str	r3, [r4, #36]	; 0x24
 8004d06:	4b05      	ldr	r3, [pc, #20]	; (8004d1c <std+0x3c>)
 8004d08:	62a3      	str	r3, [r4, #40]	; 0x28
 8004d0a:	4b05      	ldr	r3, [pc, #20]	; (8004d20 <std+0x40>)
 8004d0c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004d0e:	4b05      	ldr	r3, [pc, #20]	; (8004d24 <std+0x44>)
 8004d10:	6224      	str	r4, [r4, #32]
 8004d12:	6323      	str	r3, [r4, #48]	; 0x30
 8004d14:	bd10      	pop	{r4, pc}
 8004d16:	bf00      	nop
 8004d18:	08005769 	.word	0x08005769
 8004d1c:	0800578b 	.word	0x0800578b
 8004d20:	080057c3 	.word	0x080057c3
 8004d24:	080057e7 	.word	0x080057e7

08004d28 <_cleanup_r>:
 8004d28:	4901      	ldr	r1, [pc, #4]	; (8004d30 <_cleanup_r+0x8>)
 8004d2a:	f000 b8af 	b.w	8004e8c <_fwalk_reent>
 8004d2e:	bf00      	nop
 8004d30:	08004c69 	.word	0x08004c69

08004d34 <__sfmoreglue>:
 8004d34:	b570      	push	{r4, r5, r6, lr}
 8004d36:	2268      	movs	r2, #104	; 0x68
 8004d38:	1e4d      	subs	r5, r1, #1
 8004d3a:	4355      	muls	r5, r2
 8004d3c:	460e      	mov	r6, r1
 8004d3e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004d42:	f000 f99f 	bl	8005084 <_malloc_r>
 8004d46:	4604      	mov	r4, r0
 8004d48:	b140      	cbz	r0, 8004d5c <__sfmoreglue+0x28>
 8004d4a:	2100      	movs	r1, #0
 8004d4c:	e9c0 1600 	strd	r1, r6, [r0]
 8004d50:	300c      	adds	r0, #12
 8004d52:	60a0      	str	r0, [r4, #8]
 8004d54:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004d58:	f7ff fcdc 	bl	8004714 <memset>
 8004d5c:	4620      	mov	r0, r4
 8004d5e:	bd70      	pop	{r4, r5, r6, pc}

08004d60 <__sfp_lock_acquire>:
 8004d60:	4801      	ldr	r0, [pc, #4]	; (8004d68 <__sfp_lock_acquire+0x8>)
 8004d62:	f000 b8b3 	b.w	8004ecc <__retarget_lock_acquire_recursive>
 8004d66:	bf00      	nop
 8004d68:	200001b9 	.word	0x200001b9

08004d6c <__sfp_lock_release>:
 8004d6c:	4801      	ldr	r0, [pc, #4]	; (8004d74 <__sfp_lock_release+0x8>)
 8004d6e:	f000 b8ae 	b.w	8004ece <__retarget_lock_release_recursive>
 8004d72:	bf00      	nop
 8004d74:	200001b9 	.word	0x200001b9

08004d78 <__sinit_lock_acquire>:
 8004d78:	4801      	ldr	r0, [pc, #4]	; (8004d80 <__sinit_lock_acquire+0x8>)
 8004d7a:	f000 b8a7 	b.w	8004ecc <__retarget_lock_acquire_recursive>
 8004d7e:	bf00      	nop
 8004d80:	200001ba 	.word	0x200001ba

08004d84 <__sinit_lock_release>:
 8004d84:	4801      	ldr	r0, [pc, #4]	; (8004d8c <__sinit_lock_release+0x8>)
 8004d86:	f000 b8a2 	b.w	8004ece <__retarget_lock_release_recursive>
 8004d8a:	bf00      	nop
 8004d8c:	200001ba 	.word	0x200001ba

08004d90 <__sinit>:
 8004d90:	b510      	push	{r4, lr}
 8004d92:	4604      	mov	r4, r0
 8004d94:	f7ff fff0 	bl	8004d78 <__sinit_lock_acquire>
 8004d98:	69a3      	ldr	r3, [r4, #24]
 8004d9a:	b11b      	cbz	r3, 8004da4 <__sinit+0x14>
 8004d9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004da0:	f7ff bff0 	b.w	8004d84 <__sinit_lock_release>
 8004da4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004da8:	6523      	str	r3, [r4, #80]	; 0x50
 8004daa:	4b13      	ldr	r3, [pc, #76]	; (8004df8 <__sinit+0x68>)
 8004dac:	4a13      	ldr	r2, [pc, #76]	; (8004dfc <__sinit+0x6c>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	62a2      	str	r2, [r4, #40]	; 0x28
 8004db2:	42a3      	cmp	r3, r4
 8004db4:	bf04      	itt	eq
 8004db6:	2301      	moveq	r3, #1
 8004db8:	61a3      	streq	r3, [r4, #24]
 8004dba:	4620      	mov	r0, r4
 8004dbc:	f000 f820 	bl	8004e00 <__sfp>
 8004dc0:	6060      	str	r0, [r4, #4]
 8004dc2:	4620      	mov	r0, r4
 8004dc4:	f000 f81c 	bl	8004e00 <__sfp>
 8004dc8:	60a0      	str	r0, [r4, #8]
 8004dca:	4620      	mov	r0, r4
 8004dcc:	f000 f818 	bl	8004e00 <__sfp>
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	60e0      	str	r0, [r4, #12]
 8004dd4:	2104      	movs	r1, #4
 8004dd6:	6860      	ldr	r0, [r4, #4]
 8004dd8:	f7ff ff82 	bl	8004ce0 <std>
 8004ddc:	68a0      	ldr	r0, [r4, #8]
 8004dde:	2201      	movs	r2, #1
 8004de0:	2109      	movs	r1, #9
 8004de2:	f7ff ff7d 	bl	8004ce0 <std>
 8004de6:	68e0      	ldr	r0, [r4, #12]
 8004de8:	2202      	movs	r2, #2
 8004dea:	2112      	movs	r1, #18
 8004dec:	f7ff ff78 	bl	8004ce0 <std>
 8004df0:	2301      	movs	r3, #1
 8004df2:	61a3      	str	r3, [r4, #24]
 8004df4:	e7d2      	b.n	8004d9c <__sinit+0xc>
 8004df6:	bf00      	nop
 8004df8:	0800592c 	.word	0x0800592c
 8004dfc:	08004d29 	.word	0x08004d29

08004e00 <__sfp>:
 8004e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e02:	4607      	mov	r7, r0
 8004e04:	f7ff ffac 	bl	8004d60 <__sfp_lock_acquire>
 8004e08:	4b1e      	ldr	r3, [pc, #120]	; (8004e84 <__sfp+0x84>)
 8004e0a:	681e      	ldr	r6, [r3, #0]
 8004e0c:	69b3      	ldr	r3, [r6, #24]
 8004e0e:	b913      	cbnz	r3, 8004e16 <__sfp+0x16>
 8004e10:	4630      	mov	r0, r6
 8004e12:	f7ff ffbd 	bl	8004d90 <__sinit>
 8004e16:	3648      	adds	r6, #72	; 0x48
 8004e18:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004e1c:	3b01      	subs	r3, #1
 8004e1e:	d503      	bpl.n	8004e28 <__sfp+0x28>
 8004e20:	6833      	ldr	r3, [r6, #0]
 8004e22:	b30b      	cbz	r3, 8004e68 <__sfp+0x68>
 8004e24:	6836      	ldr	r6, [r6, #0]
 8004e26:	e7f7      	b.n	8004e18 <__sfp+0x18>
 8004e28:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004e2c:	b9d5      	cbnz	r5, 8004e64 <__sfp+0x64>
 8004e2e:	4b16      	ldr	r3, [pc, #88]	; (8004e88 <__sfp+0x88>)
 8004e30:	60e3      	str	r3, [r4, #12]
 8004e32:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004e36:	6665      	str	r5, [r4, #100]	; 0x64
 8004e38:	f000 f847 	bl	8004eca <__retarget_lock_init_recursive>
 8004e3c:	f7ff ff96 	bl	8004d6c <__sfp_lock_release>
 8004e40:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004e44:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004e48:	6025      	str	r5, [r4, #0]
 8004e4a:	61a5      	str	r5, [r4, #24]
 8004e4c:	2208      	movs	r2, #8
 8004e4e:	4629      	mov	r1, r5
 8004e50:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004e54:	f7ff fc5e 	bl	8004714 <memset>
 8004e58:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004e5c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004e60:	4620      	mov	r0, r4
 8004e62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e64:	3468      	adds	r4, #104	; 0x68
 8004e66:	e7d9      	b.n	8004e1c <__sfp+0x1c>
 8004e68:	2104      	movs	r1, #4
 8004e6a:	4638      	mov	r0, r7
 8004e6c:	f7ff ff62 	bl	8004d34 <__sfmoreglue>
 8004e70:	4604      	mov	r4, r0
 8004e72:	6030      	str	r0, [r6, #0]
 8004e74:	2800      	cmp	r0, #0
 8004e76:	d1d5      	bne.n	8004e24 <__sfp+0x24>
 8004e78:	f7ff ff78 	bl	8004d6c <__sfp_lock_release>
 8004e7c:	230c      	movs	r3, #12
 8004e7e:	603b      	str	r3, [r7, #0]
 8004e80:	e7ee      	b.n	8004e60 <__sfp+0x60>
 8004e82:	bf00      	nop
 8004e84:	0800592c 	.word	0x0800592c
 8004e88:	ffff0001 	.word	0xffff0001

08004e8c <_fwalk_reent>:
 8004e8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e90:	4606      	mov	r6, r0
 8004e92:	4688      	mov	r8, r1
 8004e94:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004e98:	2700      	movs	r7, #0
 8004e9a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004e9e:	f1b9 0901 	subs.w	r9, r9, #1
 8004ea2:	d505      	bpl.n	8004eb0 <_fwalk_reent+0x24>
 8004ea4:	6824      	ldr	r4, [r4, #0]
 8004ea6:	2c00      	cmp	r4, #0
 8004ea8:	d1f7      	bne.n	8004e9a <_fwalk_reent+0xe>
 8004eaa:	4638      	mov	r0, r7
 8004eac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004eb0:	89ab      	ldrh	r3, [r5, #12]
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d907      	bls.n	8004ec6 <_fwalk_reent+0x3a>
 8004eb6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004eba:	3301      	adds	r3, #1
 8004ebc:	d003      	beq.n	8004ec6 <_fwalk_reent+0x3a>
 8004ebe:	4629      	mov	r1, r5
 8004ec0:	4630      	mov	r0, r6
 8004ec2:	47c0      	blx	r8
 8004ec4:	4307      	orrs	r7, r0
 8004ec6:	3568      	adds	r5, #104	; 0x68
 8004ec8:	e7e9      	b.n	8004e9e <_fwalk_reent+0x12>

08004eca <__retarget_lock_init_recursive>:
 8004eca:	4770      	bx	lr

08004ecc <__retarget_lock_acquire_recursive>:
 8004ecc:	4770      	bx	lr

08004ece <__retarget_lock_release_recursive>:
 8004ece:	4770      	bx	lr

08004ed0 <__swhatbuf_r>:
 8004ed0:	b570      	push	{r4, r5, r6, lr}
 8004ed2:	460e      	mov	r6, r1
 8004ed4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ed8:	2900      	cmp	r1, #0
 8004eda:	b096      	sub	sp, #88	; 0x58
 8004edc:	4614      	mov	r4, r2
 8004ede:	461d      	mov	r5, r3
 8004ee0:	da08      	bge.n	8004ef4 <__swhatbuf_r+0x24>
 8004ee2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	602a      	str	r2, [r5, #0]
 8004eea:	061a      	lsls	r2, r3, #24
 8004eec:	d410      	bmi.n	8004f10 <__swhatbuf_r+0x40>
 8004eee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ef2:	e00e      	b.n	8004f12 <__swhatbuf_r+0x42>
 8004ef4:	466a      	mov	r2, sp
 8004ef6:	f000 fc9d 	bl	8005834 <_fstat_r>
 8004efa:	2800      	cmp	r0, #0
 8004efc:	dbf1      	blt.n	8004ee2 <__swhatbuf_r+0x12>
 8004efe:	9a01      	ldr	r2, [sp, #4]
 8004f00:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004f04:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004f08:	425a      	negs	r2, r3
 8004f0a:	415a      	adcs	r2, r3
 8004f0c:	602a      	str	r2, [r5, #0]
 8004f0e:	e7ee      	b.n	8004eee <__swhatbuf_r+0x1e>
 8004f10:	2340      	movs	r3, #64	; 0x40
 8004f12:	2000      	movs	r0, #0
 8004f14:	6023      	str	r3, [r4, #0]
 8004f16:	b016      	add	sp, #88	; 0x58
 8004f18:	bd70      	pop	{r4, r5, r6, pc}
	...

08004f1c <__smakebuf_r>:
 8004f1c:	898b      	ldrh	r3, [r1, #12]
 8004f1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004f20:	079d      	lsls	r5, r3, #30
 8004f22:	4606      	mov	r6, r0
 8004f24:	460c      	mov	r4, r1
 8004f26:	d507      	bpl.n	8004f38 <__smakebuf_r+0x1c>
 8004f28:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004f2c:	6023      	str	r3, [r4, #0]
 8004f2e:	6123      	str	r3, [r4, #16]
 8004f30:	2301      	movs	r3, #1
 8004f32:	6163      	str	r3, [r4, #20]
 8004f34:	b002      	add	sp, #8
 8004f36:	bd70      	pop	{r4, r5, r6, pc}
 8004f38:	ab01      	add	r3, sp, #4
 8004f3a:	466a      	mov	r2, sp
 8004f3c:	f7ff ffc8 	bl	8004ed0 <__swhatbuf_r>
 8004f40:	9900      	ldr	r1, [sp, #0]
 8004f42:	4605      	mov	r5, r0
 8004f44:	4630      	mov	r0, r6
 8004f46:	f000 f89d 	bl	8005084 <_malloc_r>
 8004f4a:	b948      	cbnz	r0, 8004f60 <__smakebuf_r+0x44>
 8004f4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f50:	059a      	lsls	r2, r3, #22
 8004f52:	d4ef      	bmi.n	8004f34 <__smakebuf_r+0x18>
 8004f54:	f023 0303 	bic.w	r3, r3, #3
 8004f58:	f043 0302 	orr.w	r3, r3, #2
 8004f5c:	81a3      	strh	r3, [r4, #12]
 8004f5e:	e7e3      	b.n	8004f28 <__smakebuf_r+0xc>
 8004f60:	4b0d      	ldr	r3, [pc, #52]	; (8004f98 <__smakebuf_r+0x7c>)
 8004f62:	62b3      	str	r3, [r6, #40]	; 0x28
 8004f64:	89a3      	ldrh	r3, [r4, #12]
 8004f66:	6020      	str	r0, [r4, #0]
 8004f68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f6c:	81a3      	strh	r3, [r4, #12]
 8004f6e:	9b00      	ldr	r3, [sp, #0]
 8004f70:	6163      	str	r3, [r4, #20]
 8004f72:	9b01      	ldr	r3, [sp, #4]
 8004f74:	6120      	str	r0, [r4, #16]
 8004f76:	b15b      	cbz	r3, 8004f90 <__smakebuf_r+0x74>
 8004f78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f7c:	4630      	mov	r0, r6
 8004f7e:	f000 fc6b 	bl	8005858 <_isatty_r>
 8004f82:	b128      	cbz	r0, 8004f90 <__smakebuf_r+0x74>
 8004f84:	89a3      	ldrh	r3, [r4, #12]
 8004f86:	f023 0303 	bic.w	r3, r3, #3
 8004f8a:	f043 0301 	orr.w	r3, r3, #1
 8004f8e:	81a3      	strh	r3, [r4, #12]
 8004f90:	89a0      	ldrh	r0, [r4, #12]
 8004f92:	4305      	orrs	r5, r0
 8004f94:	81a5      	strh	r5, [r4, #12]
 8004f96:	e7cd      	b.n	8004f34 <__smakebuf_r+0x18>
 8004f98:	08004d29 	.word	0x08004d29

08004f9c <malloc>:
 8004f9c:	4b02      	ldr	r3, [pc, #8]	; (8004fa8 <malloc+0xc>)
 8004f9e:	4601      	mov	r1, r0
 8004fa0:	6818      	ldr	r0, [r3, #0]
 8004fa2:	f000 b86f 	b.w	8005084 <_malloc_r>
 8004fa6:	bf00      	nop
 8004fa8:	2000000c 	.word	0x2000000c

08004fac <_free_r>:
 8004fac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004fae:	2900      	cmp	r1, #0
 8004fb0:	d044      	beq.n	800503c <_free_r+0x90>
 8004fb2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004fb6:	9001      	str	r0, [sp, #4]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	f1a1 0404 	sub.w	r4, r1, #4
 8004fbe:	bfb8      	it	lt
 8004fc0:	18e4      	addlt	r4, r4, r3
 8004fc2:	f000 fc6b 	bl	800589c <__malloc_lock>
 8004fc6:	4a1e      	ldr	r2, [pc, #120]	; (8005040 <_free_r+0x94>)
 8004fc8:	9801      	ldr	r0, [sp, #4]
 8004fca:	6813      	ldr	r3, [r2, #0]
 8004fcc:	b933      	cbnz	r3, 8004fdc <_free_r+0x30>
 8004fce:	6063      	str	r3, [r4, #4]
 8004fd0:	6014      	str	r4, [r2, #0]
 8004fd2:	b003      	add	sp, #12
 8004fd4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004fd8:	f000 bc66 	b.w	80058a8 <__malloc_unlock>
 8004fdc:	42a3      	cmp	r3, r4
 8004fde:	d908      	bls.n	8004ff2 <_free_r+0x46>
 8004fe0:	6825      	ldr	r5, [r4, #0]
 8004fe2:	1961      	adds	r1, r4, r5
 8004fe4:	428b      	cmp	r3, r1
 8004fe6:	bf01      	itttt	eq
 8004fe8:	6819      	ldreq	r1, [r3, #0]
 8004fea:	685b      	ldreq	r3, [r3, #4]
 8004fec:	1949      	addeq	r1, r1, r5
 8004fee:	6021      	streq	r1, [r4, #0]
 8004ff0:	e7ed      	b.n	8004fce <_free_r+0x22>
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	b10b      	cbz	r3, 8004ffc <_free_r+0x50>
 8004ff8:	42a3      	cmp	r3, r4
 8004ffa:	d9fa      	bls.n	8004ff2 <_free_r+0x46>
 8004ffc:	6811      	ldr	r1, [r2, #0]
 8004ffe:	1855      	adds	r5, r2, r1
 8005000:	42a5      	cmp	r5, r4
 8005002:	d10b      	bne.n	800501c <_free_r+0x70>
 8005004:	6824      	ldr	r4, [r4, #0]
 8005006:	4421      	add	r1, r4
 8005008:	1854      	adds	r4, r2, r1
 800500a:	42a3      	cmp	r3, r4
 800500c:	6011      	str	r1, [r2, #0]
 800500e:	d1e0      	bne.n	8004fd2 <_free_r+0x26>
 8005010:	681c      	ldr	r4, [r3, #0]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	6053      	str	r3, [r2, #4]
 8005016:	4421      	add	r1, r4
 8005018:	6011      	str	r1, [r2, #0]
 800501a:	e7da      	b.n	8004fd2 <_free_r+0x26>
 800501c:	d902      	bls.n	8005024 <_free_r+0x78>
 800501e:	230c      	movs	r3, #12
 8005020:	6003      	str	r3, [r0, #0]
 8005022:	e7d6      	b.n	8004fd2 <_free_r+0x26>
 8005024:	6825      	ldr	r5, [r4, #0]
 8005026:	1961      	adds	r1, r4, r5
 8005028:	428b      	cmp	r3, r1
 800502a:	bf04      	itt	eq
 800502c:	6819      	ldreq	r1, [r3, #0]
 800502e:	685b      	ldreq	r3, [r3, #4]
 8005030:	6063      	str	r3, [r4, #4]
 8005032:	bf04      	itt	eq
 8005034:	1949      	addeq	r1, r1, r5
 8005036:	6021      	streq	r1, [r4, #0]
 8005038:	6054      	str	r4, [r2, #4]
 800503a:	e7ca      	b.n	8004fd2 <_free_r+0x26>
 800503c:	b003      	add	sp, #12
 800503e:	bd30      	pop	{r4, r5, pc}
 8005040:	200001bc 	.word	0x200001bc

08005044 <sbrk_aligned>:
 8005044:	b570      	push	{r4, r5, r6, lr}
 8005046:	4e0e      	ldr	r6, [pc, #56]	; (8005080 <sbrk_aligned+0x3c>)
 8005048:	460c      	mov	r4, r1
 800504a:	6831      	ldr	r1, [r6, #0]
 800504c:	4605      	mov	r5, r0
 800504e:	b911      	cbnz	r1, 8005056 <sbrk_aligned+0x12>
 8005050:	f000 fb7a 	bl	8005748 <_sbrk_r>
 8005054:	6030      	str	r0, [r6, #0]
 8005056:	4621      	mov	r1, r4
 8005058:	4628      	mov	r0, r5
 800505a:	f000 fb75 	bl	8005748 <_sbrk_r>
 800505e:	1c43      	adds	r3, r0, #1
 8005060:	d00a      	beq.n	8005078 <sbrk_aligned+0x34>
 8005062:	1cc4      	adds	r4, r0, #3
 8005064:	f024 0403 	bic.w	r4, r4, #3
 8005068:	42a0      	cmp	r0, r4
 800506a:	d007      	beq.n	800507c <sbrk_aligned+0x38>
 800506c:	1a21      	subs	r1, r4, r0
 800506e:	4628      	mov	r0, r5
 8005070:	f000 fb6a 	bl	8005748 <_sbrk_r>
 8005074:	3001      	adds	r0, #1
 8005076:	d101      	bne.n	800507c <sbrk_aligned+0x38>
 8005078:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800507c:	4620      	mov	r0, r4
 800507e:	bd70      	pop	{r4, r5, r6, pc}
 8005080:	200001c0 	.word	0x200001c0

08005084 <_malloc_r>:
 8005084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005088:	1ccd      	adds	r5, r1, #3
 800508a:	f025 0503 	bic.w	r5, r5, #3
 800508e:	3508      	adds	r5, #8
 8005090:	2d0c      	cmp	r5, #12
 8005092:	bf38      	it	cc
 8005094:	250c      	movcc	r5, #12
 8005096:	2d00      	cmp	r5, #0
 8005098:	4607      	mov	r7, r0
 800509a:	db01      	blt.n	80050a0 <_malloc_r+0x1c>
 800509c:	42a9      	cmp	r1, r5
 800509e:	d905      	bls.n	80050ac <_malloc_r+0x28>
 80050a0:	230c      	movs	r3, #12
 80050a2:	603b      	str	r3, [r7, #0]
 80050a4:	2600      	movs	r6, #0
 80050a6:	4630      	mov	r0, r6
 80050a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050ac:	4e2e      	ldr	r6, [pc, #184]	; (8005168 <_malloc_r+0xe4>)
 80050ae:	f000 fbf5 	bl	800589c <__malloc_lock>
 80050b2:	6833      	ldr	r3, [r6, #0]
 80050b4:	461c      	mov	r4, r3
 80050b6:	bb34      	cbnz	r4, 8005106 <_malloc_r+0x82>
 80050b8:	4629      	mov	r1, r5
 80050ba:	4638      	mov	r0, r7
 80050bc:	f7ff ffc2 	bl	8005044 <sbrk_aligned>
 80050c0:	1c43      	adds	r3, r0, #1
 80050c2:	4604      	mov	r4, r0
 80050c4:	d14d      	bne.n	8005162 <_malloc_r+0xde>
 80050c6:	6834      	ldr	r4, [r6, #0]
 80050c8:	4626      	mov	r6, r4
 80050ca:	2e00      	cmp	r6, #0
 80050cc:	d140      	bne.n	8005150 <_malloc_r+0xcc>
 80050ce:	6823      	ldr	r3, [r4, #0]
 80050d0:	4631      	mov	r1, r6
 80050d2:	4638      	mov	r0, r7
 80050d4:	eb04 0803 	add.w	r8, r4, r3
 80050d8:	f000 fb36 	bl	8005748 <_sbrk_r>
 80050dc:	4580      	cmp	r8, r0
 80050de:	d13a      	bne.n	8005156 <_malloc_r+0xd2>
 80050e0:	6821      	ldr	r1, [r4, #0]
 80050e2:	3503      	adds	r5, #3
 80050e4:	1a6d      	subs	r5, r5, r1
 80050e6:	f025 0503 	bic.w	r5, r5, #3
 80050ea:	3508      	adds	r5, #8
 80050ec:	2d0c      	cmp	r5, #12
 80050ee:	bf38      	it	cc
 80050f0:	250c      	movcc	r5, #12
 80050f2:	4629      	mov	r1, r5
 80050f4:	4638      	mov	r0, r7
 80050f6:	f7ff ffa5 	bl	8005044 <sbrk_aligned>
 80050fa:	3001      	adds	r0, #1
 80050fc:	d02b      	beq.n	8005156 <_malloc_r+0xd2>
 80050fe:	6823      	ldr	r3, [r4, #0]
 8005100:	442b      	add	r3, r5
 8005102:	6023      	str	r3, [r4, #0]
 8005104:	e00e      	b.n	8005124 <_malloc_r+0xa0>
 8005106:	6822      	ldr	r2, [r4, #0]
 8005108:	1b52      	subs	r2, r2, r5
 800510a:	d41e      	bmi.n	800514a <_malloc_r+0xc6>
 800510c:	2a0b      	cmp	r2, #11
 800510e:	d916      	bls.n	800513e <_malloc_r+0xba>
 8005110:	1961      	adds	r1, r4, r5
 8005112:	42a3      	cmp	r3, r4
 8005114:	6025      	str	r5, [r4, #0]
 8005116:	bf18      	it	ne
 8005118:	6059      	strne	r1, [r3, #4]
 800511a:	6863      	ldr	r3, [r4, #4]
 800511c:	bf08      	it	eq
 800511e:	6031      	streq	r1, [r6, #0]
 8005120:	5162      	str	r2, [r4, r5]
 8005122:	604b      	str	r3, [r1, #4]
 8005124:	4638      	mov	r0, r7
 8005126:	f104 060b 	add.w	r6, r4, #11
 800512a:	f000 fbbd 	bl	80058a8 <__malloc_unlock>
 800512e:	f026 0607 	bic.w	r6, r6, #7
 8005132:	1d23      	adds	r3, r4, #4
 8005134:	1af2      	subs	r2, r6, r3
 8005136:	d0b6      	beq.n	80050a6 <_malloc_r+0x22>
 8005138:	1b9b      	subs	r3, r3, r6
 800513a:	50a3      	str	r3, [r4, r2]
 800513c:	e7b3      	b.n	80050a6 <_malloc_r+0x22>
 800513e:	6862      	ldr	r2, [r4, #4]
 8005140:	42a3      	cmp	r3, r4
 8005142:	bf0c      	ite	eq
 8005144:	6032      	streq	r2, [r6, #0]
 8005146:	605a      	strne	r2, [r3, #4]
 8005148:	e7ec      	b.n	8005124 <_malloc_r+0xa0>
 800514a:	4623      	mov	r3, r4
 800514c:	6864      	ldr	r4, [r4, #4]
 800514e:	e7b2      	b.n	80050b6 <_malloc_r+0x32>
 8005150:	4634      	mov	r4, r6
 8005152:	6876      	ldr	r6, [r6, #4]
 8005154:	e7b9      	b.n	80050ca <_malloc_r+0x46>
 8005156:	230c      	movs	r3, #12
 8005158:	603b      	str	r3, [r7, #0]
 800515a:	4638      	mov	r0, r7
 800515c:	f000 fba4 	bl	80058a8 <__malloc_unlock>
 8005160:	e7a1      	b.n	80050a6 <_malloc_r+0x22>
 8005162:	6025      	str	r5, [r4, #0]
 8005164:	e7de      	b.n	8005124 <_malloc_r+0xa0>
 8005166:	bf00      	nop
 8005168:	200001bc 	.word	0x200001bc

0800516c <__sfputc_r>:
 800516c:	6893      	ldr	r3, [r2, #8]
 800516e:	3b01      	subs	r3, #1
 8005170:	2b00      	cmp	r3, #0
 8005172:	b410      	push	{r4}
 8005174:	6093      	str	r3, [r2, #8]
 8005176:	da08      	bge.n	800518a <__sfputc_r+0x1e>
 8005178:	6994      	ldr	r4, [r2, #24]
 800517a:	42a3      	cmp	r3, r4
 800517c:	db01      	blt.n	8005182 <__sfputc_r+0x16>
 800517e:	290a      	cmp	r1, #10
 8005180:	d103      	bne.n	800518a <__sfputc_r+0x1e>
 8005182:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005186:	f7ff bc29 	b.w	80049dc <__swbuf_r>
 800518a:	6813      	ldr	r3, [r2, #0]
 800518c:	1c58      	adds	r0, r3, #1
 800518e:	6010      	str	r0, [r2, #0]
 8005190:	7019      	strb	r1, [r3, #0]
 8005192:	4608      	mov	r0, r1
 8005194:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005198:	4770      	bx	lr

0800519a <__sfputs_r>:
 800519a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800519c:	4606      	mov	r6, r0
 800519e:	460f      	mov	r7, r1
 80051a0:	4614      	mov	r4, r2
 80051a2:	18d5      	adds	r5, r2, r3
 80051a4:	42ac      	cmp	r4, r5
 80051a6:	d101      	bne.n	80051ac <__sfputs_r+0x12>
 80051a8:	2000      	movs	r0, #0
 80051aa:	e007      	b.n	80051bc <__sfputs_r+0x22>
 80051ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051b0:	463a      	mov	r2, r7
 80051b2:	4630      	mov	r0, r6
 80051b4:	f7ff ffda 	bl	800516c <__sfputc_r>
 80051b8:	1c43      	adds	r3, r0, #1
 80051ba:	d1f3      	bne.n	80051a4 <__sfputs_r+0xa>
 80051bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080051c0 <_vfiprintf_r>:
 80051c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051c4:	460d      	mov	r5, r1
 80051c6:	b09d      	sub	sp, #116	; 0x74
 80051c8:	4614      	mov	r4, r2
 80051ca:	4698      	mov	r8, r3
 80051cc:	4606      	mov	r6, r0
 80051ce:	b118      	cbz	r0, 80051d8 <_vfiprintf_r+0x18>
 80051d0:	6983      	ldr	r3, [r0, #24]
 80051d2:	b90b      	cbnz	r3, 80051d8 <_vfiprintf_r+0x18>
 80051d4:	f7ff fddc 	bl	8004d90 <__sinit>
 80051d8:	4b89      	ldr	r3, [pc, #548]	; (8005400 <_vfiprintf_r+0x240>)
 80051da:	429d      	cmp	r5, r3
 80051dc:	d11b      	bne.n	8005216 <_vfiprintf_r+0x56>
 80051de:	6875      	ldr	r5, [r6, #4]
 80051e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80051e2:	07d9      	lsls	r1, r3, #31
 80051e4:	d405      	bmi.n	80051f2 <_vfiprintf_r+0x32>
 80051e6:	89ab      	ldrh	r3, [r5, #12]
 80051e8:	059a      	lsls	r2, r3, #22
 80051ea:	d402      	bmi.n	80051f2 <_vfiprintf_r+0x32>
 80051ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80051ee:	f7ff fe6d 	bl	8004ecc <__retarget_lock_acquire_recursive>
 80051f2:	89ab      	ldrh	r3, [r5, #12]
 80051f4:	071b      	lsls	r3, r3, #28
 80051f6:	d501      	bpl.n	80051fc <_vfiprintf_r+0x3c>
 80051f8:	692b      	ldr	r3, [r5, #16]
 80051fa:	b9eb      	cbnz	r3, 8005238 <_vfiprintf_r+0x78>
 80051fc:	4629      	mov	r1, r5
 80051fe:	4630      	mov	r0, r6
 8005200:	f7ff fc3e 	bl	8004a80 <__swsetup_r>
 8005204:	b1c0      	cbz	r0, 8005238 <_vfiprintf_r+0x78>
 8005206:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005208:	07dc      	lsls	r4, r3, #31
 800520a:	d50e      	bpl.n	800522a <_vfiprintf_r+0x6a>
 800520c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005210:	b01d      	add	sp, #116	; 0x74
 8005212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005216:	4b7b      	ldr	r3, [pc, #492]	; (8005404 <_vfiprintf_r+0x244>)
 8005218:	429d      	cmp	r5, r3
 800521a:	d101      	bne.n	8005220 <_vfiprintf_r+0x60>
 800521c:	68b5      	ldr	r5, [r6, #8]
 800521e:	e7df      	b.n	80051e0 <_vfiprintf_r+0x20>
 8005220:	4b79      	ldr	r3, [pc, #484]	; (8005408 <_vfiprintf_r+0x248>)
 8005222:	429d      	cmp	r5, r3
 8005224:	bf08      	it	eq
 8005226:	68f5      	ldreq	r5, [r6, #12]
 8005228:	e7da      	b.n	80051e0 <_vfiprintf_r+0x20>
 800522a:	89ab      	ldrh	r3, [r5, #12]
 800522c:	0598      	lsls	r0, r3, #22
 800522e:	d4ed      	bmi.n	800520c <_vfiprintf_r+0x4c>
 8005230:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005232:	f7ff fe4c 	bl	8004ece <__retarget_lock_release_recursive>
 8005236:	e7e9      	b.n	800520c <_vfiprintf_r+0x4c>
 8005238:	2300      	movs	r3, #0
 800523a:	9309      	str	r3, [sp, #36]	; 0x24
 800523c:	2320      	movs	r3, #32
 800523e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005242:	f8cd 800c 	str.w	r8, [sp, #12]
 8005246:	2330      	movs	r3, #48	; 0x30
 8005248:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800540c <_vfiprintf_r+0x24c>
 800524c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005250:	f04f 0901 	mov.w	r9, #1
 8005254:	4623      	mov	r3, r4
 8005256:	469a      	mov	sl, r3
 8005258:	f813 2b01 	ldrb.w	r2, [r3], #1
 800525c:	b10a      	cbz	r2, 8005262 <_vfiprintf_r+0xa2>
 800525e:	2a25      	cmp	r2, #37	; 0x25
 8005260:	d1f9      	bne.n	8005256 <_vfiprintf_r+0x96>
 8005262:	ebba 0b04 	subs.w	fp, sl, r4
 8005266:	d00b      	beq.n	8005280 <_vfiprintf_r+0xc0>
 8005268:	465b      	mov	r3, fp
 800526a:	4622      	mov	r2, r4
 800526c:	4629      	mov	r1, r5
 800526e:	4630      	mov	r0, r6
 8005270:	f7ff ff93 	bl	800519a <__sfputs_r>
 8005274:	3001      	adds	r0, #1
 8005276:	f000 80aa 	beq.w	80053ce <_vfiprintf_r+0x20e>
 800527a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800527c:	445a      	add	r2, fp
 800527e:	9209      	str	r2, [sp, #36]	; 0x24
 8005280:	f89a 3000 	ldrb.w	r3, [sl]
 8005284:	2b00      	cmp	r3, #0
 8005286:	f000 80a2 	beq.w	80053ce <_vfiprintf_r+0x20e>
 800528a:	2300      	movs	r3, #0
 800528c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005290:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005294:	f10a 0a01 	add.w	sl, sl, #1
 8005298:	9304      	str	r3, [sp, #16]
 800529a:	9307      	str	r3, [sp, #28]
 800529c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80052a0:	931a      	str	r3, [sp, #104]	; 0x68
 80052a2:	4654      	mov	r4, sl
 80052a4:	2205      	movs	r2, #5
 80052a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052aa:	4858      	ldr	r0, [pc, #352]	; (800540c <_vfiprintf_r+0x24c>)
 80052ac:	f7fa ffb0 	bl	8000210 <memchr>
 80052b0:	9a04      	ldr	r2, [sp, #16]
 80052b2:	b9d8      	cbnz	r0, 80052ec <_vfiprintf_r+0x12c>
 80052b4:	06d1      	lsls	r1, r2, #27
 80052b6:	bf44      	itt	mi
 80052b8:	2320      	movmi	r3, #32
 80052ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80052be:	0713      	lsls	r3, r2, #28
 80052c0:	bf44      	itt	mi
 80052c2:	232b      	movmi	r3, #43	; 0x2b
 80052c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80052c8:	f89a 3000 	ldrb.w	r3, [sl]
 80052cc:	2b2a      	cmp	r3, #42	; 0x2a
 80052ce:	d015      	beq.n	80052fc <_vfiprintf_r+0x13c>
 80052d0:	9a07      	ldr	r2, [sp, #28]
 80052d2:	4654      	mov	r4, sl
 80052d4:	2000      	movs	r0, #0
 80052d6:	f04f 0c0a 	mov.w	ip, #10
 80052da:	4621      	mov	r1, r4
 80052dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80052e0:	3b30      	subs	r3, #48	; 0x30
 80052e2:	2b09      	cmp	r3, #9
 80052e4:	d94e      	bls.n	8005384 <_vfiprintf_r+0x1c4>
 80052e6:	b1b0      	cbz	r0, 8005316 <_vfiprintf_r+0x156>
 80052e8:	9207      	str	r2, [sp, #28]
 80052ea:	e014      	b.n	8005316 <_vfiprintf_r+0x156>
 80052ec:	eba0 0308 	sub.w	r3, r0, r8
 80052f0:	fa09 f303 	lsl.w	r3, r9, r3
 80052f4:	4313      	orrs	r3, r2
 80052f6:	9304      	str	r3, [sp, #16]
 80052f8:	46a2      	mov	sl, r4
 80052fa:	e7d2      	b.n	80052a2 <_vfiprintf_r+0xe2>
 80052fc:	9b03      	ldr	r3, [sp, #12]
 80052fe:	1d19      	adds	r1, r3, #4
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	9103      	str	r1, [sp, #12]
 8005304:	2b00      	cmp	r3, #0
 8005306:	bfbb      	ittet	lt
 8005308:	425b      	neglt	r3, r3
 800530a:	f042 0202 	orrlt.w	r2, r2, #2
 800530e:	9307      	strge	r3, [sp, #28]
 8005310:	9307      	strlt	r3, [sp, #28]
 8005312:	bfb8      	it	lt
 8005314:	9204      	strlt	r2, [sp, #16]
 8005316:	7823      	ldrb	r3, [r4, #0]
 8005318:	2b2e      	cmp	r3, #46	; 0x2e
 800531a:	d10c      	bne.n	8005336 <_vfiprintf_r+0x176>
 800531c:	7863      	ldrb	r3, [r4, #1]
 800531e:	2b2a      	cmp	r3, #42	; 0x2a
 8005320:	d135      	bne.n	800538e <_vfiprintf_r+0x1ce>
 8005322:	9b03      	ldr	r3, [sp, #12]
 8005324:	1d1a      	adds	r2, r3, #4
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	9203      	str	r2, [sp, #12]
 800532a:	2b00      	cmp	r3, #0
 800532c:	bfb8      	it	lt
 800532e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005332:	3402      	adds	r4, #2
 8005334:	9305      	str	r3, [sp, #20]
 8005336:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800541c <_vfiprintf_r+0x25c>
 800533a:	7821      	ldrb	r1, [r4, #0]
 800533c:	2203      	movs	r2, #3
 800533e:	4650      	mov	r0, sl
 8005340:	f7fa ff66 	bl	8000210 <memchr>
 8005344:	b140      	cbz	r0, 8005358 <_vfiprintf_r+0x198>
 8005346:	2340      	movs	r3, #64	; 0x40
 8005348:	eba0 000a 	sub.w	r0, r0, sl
 800534c:	fa03 f000 	lsl.w	r0, r3, r0
 8005350:	9b04      	ldr	r3, [sp, #16]
 8005352:	4303      	orrs	r3, r0
 8005354:	3401      	adds	r4, #1
 8005356:	9304      	str	r3, [sp, #16]
 8005358:	f814 1b01 	ldrb.w	r1, [r4], #1
 800535c:	482c      	ldr	r0, [pc, #176]	; (8005410 <_vfiprintf_r+0x250>)
 800535e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005362:	2206      	movs	r2, #6
 8005364:	f7fa ff54 	bl	8000210 <memchr>
 8005368:	2800      	cmp	r0, #0
 800536a:	d03f      	beq.n	80053ec <_vfiprintf_r+0x22c>
 800536c:	4b29      	ldr	r3, [pc, #164]	; (8005414 <_vfiprintf_r+0x254>)
 800536e:	bb1b      	cbnz	r3, 80053b8 <_vfiprintf_r+0x1f8>
 8005370:	9b03      	ldr	r3, [sp, #12]
 8005372:	3307      	adds	r3, #7
 8005374:	f023 0307 	bic.w	r3, r3, #7
 8005378:	3308      	adds	r3, #8
 800537a:	9303      	str	r3, [sp, #12]
 800537c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800537e:	443b      	add	r3, r7
 8005380:	9309      	str	r3, [sp, #36]	; 0x24
 8005382:	e767      	b.n	8005254 <_vfiprintf_r+0x94>
 8005384:	fb0c 3202 	mla	r2, ip, r2, r3
 8005388:	460c      	mov	r4, r1
 800538a:	2001      	movs	r0, #1
 800538c:	e7a5      	b.n	80052da <_vfiprintf_r+0x11a>
 800538e:	2300      	movs	r3, #0
 8005390:	3401      	adds	r4, #1
 8005392:	9305      	str	r3, [sp, #20]
 8005394:	4619      	mov	r1, r3
 8005396:	f04f 0c0a 	mov.w	ip, #10
 800539a:	4620      	mov	r0, r4
 800539c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80053a0:	3a30      	subs	r2, #48	; 0x30
 80053a2:	2a09      	cmp	r2, #9
 80053a4:	d903      	bls.n	80053ae <_vfiprintf_r+0x1ee>
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d0c5      	beq.n	8005336 <_vfiprintf_r+0x176>
 80053aa:	9105      	str	r1, [sp, #20]
 80053ac:	e7c3      	b.n	8005336 <_vfiprintf_r+0x176>
 80053ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80053b2:	4604      	mov	r4, r0
 80053b4:	2301      	movs	r3, #1
 80053b6:	e7f0      	b.n	800539a <_vfiprintf_r+0x1da>
 80053b8:	ab03      	add	r3, sp, #12
 80053ba:	9300      	str	r3, [sp, #0]
 80053bc:	462a      	mov	r2, r5
 80053be:	4b16      	ldr	r3, [pc, #88]	; (8005418 <_vfiprintf_r+0x258>)
 80053c0:	a904      	add	r1, sp, #16
 80053c2:	4630      	mov	r0, r6
 80053c4:	f3af 8000 	nop.w
 80053c8:	4607      	mov	r7, r0
 80053ca:	1c78      	adds	r0, r7, #1
 80053cc:	d1d6      	bne.n	800537c <_vfiprintf_r+0x1bc>
 80053ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80053d0:	07d9      	lsls	r1, r3, #31
 80053d2:	d405      	bmi.n	80053e0 <_vfiprintf_r+0x220>
 80053d4:	89ab      	ldrh	r3, [r5, #12]
 80053d6:	059a      	lsls	r2, r3, #22
 80053d8:	d402      	bmi.n	80053e0 <_vfiprintf_r+0x220>
 80053da:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80053dc:	f7ff fd77 	bl	8004ece <__retarget_lock_release_recursive>
 80053e0:	89ab      	ldrh	r3, [r5, #12]
 80053e2:	065b      	lsls	r3, r3, #25
 80053e4:	f53f af12 	bmi.w	800520c <_vfiprintf_r+0x4c>
 80053e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80053ea:	e711      	b.n	8005210 <_vfiprintf_r+0x50>
 80053ec:	ab03      	add	r3, sp, #12
 80053ee:	9300      	str	r3, [sp, #0]
 80053f0:	462a      	mov	r2, r5
 80053f2:	4b09      	ldr	r3, [pc, #36]	; (8005418 <_vfiprintf_r+0x258>)
 80053f4:	a904      	add	r1, sp, #16
 80053f6:	4630      	mov	r0, r6
 80053f8:	f000 f880 	bl	80054fc <_printf_i>
 80053fc:	e7e4      	b.n	80053c8 <_vfiprintf_r+0x208>
 80053fe:	bf00      	nop
 8005400:	08005950 	.word	0x08005950
 8005404:	08005970 	.word	0x08005970
 8005408:	08005930 	.word	0x08005930
 800540c:	08005990 	.word	0x08005990
 8005410:	0800599a 	.word	0x0800599a
 8005414:	00000000 	.word	0x00000000
 8005418:	0800519b 	.word	0x0800519b
 800541c:	08005996 	.word	0x08005996

08005420 <_printf_common>:
 8005420:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005424:	4616      	mov	r6, r2
 8005426:	4699      	mov	r9, r3
 8005428:	688a      	ldr	r2, [r1, #8]
 800542a:	690b      	ldr	r3, [r1, #16]
 800542c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005430:	4293      	cmp	r3, r2
 8005432:	bfb8      	it	lt
 8005434:	4613      	movlt	r3, r2
 8005436:	6033      	str	r3, [r6, #0]
 8005438:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800543c:	4607      	mov	r7, r0
 800543e:	460c      	mov	r4, r1
 8005440:	b10a      	cbz	r2, 8005446 <_printf_common+0x26>
 8005442:	3301      	adds	r3, #1
 8005444:	6033      	str	r3, [r6, #0]
 8005446:	6823      	ldr	r3, [r4, #0]
 8005448:	0699      	lsls	r1, r3, #26
 800544a:	bf42      	ittt	mi
 800544c:	6833      	ldrmi	r3, [r6, #0]
 800544e:	3302      	addmi	r3, #2
 8005450:	6033      	strmi	r3, [r6, #0]
 8005452:	6825      	ldr	r5, [r4, #0]
 8005454:	f015 0506 	ands.w	r5, r5, #6
 8005458:	d106      	bne.n	8005468 <_printf_common+0x48>
 800545a:	f104 0a19 	add.w	sl, r4, #25
 800545e:	68e3      	ldr	r3, [r4, #12]
 8005460:	6832      	ldr	r2, [r6, #0]
 8005462:	1a9b      	subs	r3, r3, r2
 8005464:	42ab      	cmp	r3, r5
 8005466:	dc26      	bgt.n	80054b6 <_printf_common+0x96>
 8005468:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800546c:	1e13      	subs	r3, r2, #0
 800546e:	6822      	ldr	r2, [r4, #0]
 8005470:	bf18      	it	ne
 8005472:	2301      	movne	r3, #1
 8005474:	0692      	lsls	r2, r2, #26
 8005476:	d42b      	bmi.n	80054d0 <_printf_common+0xb0>
 8005478:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800547c:	4649      	mov	r1, r9
 800547e:	4638      	mov	r0, r7
 8005480:	47c0      	blx	r8
 8005482:	3001      	adds	r0, #1
 8005484:	d01e      	beq.n	80054c4 <_printf_common+0xa4>
 8005486:	6823      	ldr	r3, [r4, #0]
 8005488:	68e5      	ldr	r5, [r4, #12]
 800548a:	6832      	ldr	r2, [r6, #0]
 800548c:	f003 0306 	and.w	r3, r3, #6
 8005490:	2b04      	cmp	r3, #4
 8005492:	bf08      	it	eq
 8005494:	1aad      	subeq	r5, r5, r2
 8005496:	68a3      	ldr	r3, [r4, #8]
 8005498:	6922      	ldr	r2, [r4, #16]
 800549a:	bf0c      	ite	eq
 800549c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80054a0:	2500      	movne	r5, #0
 80054a2:	4293      	cmp	r3, r2
 80054a4:	bfc4      	itt	gt
 80054a6:	1a9b      	subgt	r3, r3, r2
 80054a8:	18ed      	addgt	r5, r5, r3
 80054aa:	2600      	movs	r6, #0
 80054ac:	341a      	adds	r4, #26
 80054ae:	42b5      	cmp	r5, r6
 80054b0:	d11a      	bne.n	80054e8 <_printf_common+0xc8>
 80054b2:	2000      	movs	r0, #0
 80054b4:	e008      	b.n	80054c8 <_printf_common+0xa8>
 80054b6:	2301      	movs	r3, #1
 80054b8:	4652      	mov	r2, sl
 80054ba:	4649      	mov	r1, r9
 80054bc:	4638      	mov	r0, r7
 80054be:	47c0      	blx	r8
 80054c0:	3001      	adds	r0, #1
 80054c2:	d103      	bne.n	80054cc <_printf_common+0xac>
 80054c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80054c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054cc:	3501      	adds	r5, #1
 80054ce:	e7c6      	b.n	800545e <_printf_common+0x3e>
 80054d0:	18e1      	adds	r1, r4, r3
 80054d2:	1c5a      	adds	r2, r3, #1
 80054d4:	2030      	movs	r0, #48	; 0x30
 80054d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80054da:	4422      	add	r2, r4
 80054dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80054e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80054e4:	3302      	adds	r3, #2
 80054e6:	e7c7      	b.n	8005478 <_printf_common+0x58>
 80054e8:	2301      	movs	r3, #1
 80054ea:	4622      	mov	r2, r4
 80054ec:	4649      	mov	r1, r9
 80054ee:	4638      	mov	r0, r7
 80054f0:	47c0      	blx	r8
 80054f2:	3001      	adds	r0, #1
 80054f4:	d0e6      	beq.n	80054c4 <_printf_common+0xa4>
 80054f6:	3601      	adds	r6, #1
 80054f8:	e7d9      	b.n	80054ae <_printf_common+0x8e>
	...

080054fc <_printf_i>:
 80054fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005500:	7e0f      	ldrb	r7, [r1, #24]
 8005502:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005504:	2f78      	cmp	r7, #120	; 0x78
 8005506:	4691      	mov	r9, r2
 8005508:	4680      	mov	r8, r0
 800550a:	460c      	mov	r4, r1
 800550c:	469a      	mov	sl, r3
 800550e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005512:	d807      	bhi.n	8005524 <_printf_i+0x28>
 8005514:	2f62      	cmp	r7, #98	; 0x62
 8005516:	d80a      	bhi.n	800552e <_printf_i+0x32>
 8005518:	2f00      	cmp	r7, #0
 800551a:	f000 80d8 	beq.w	80056ce <_printf_i+0x1d2>
 800551e:	2f58      	cmp	r7, #88	; 0x58
 8005520:	f000 80a3 	beq.w	800566a <_printf_i+0x16e>
 8005524:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005528:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800552c:	e03a      	b.n	80055a4 <_printf_i+0xa8>
 800552e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005532:	2b15      	cmp	r3, #21
 8005534:	d8f6      	bhi.n	8005524 <_printf_i+0x28>
 8005536:	a101      	add	r1, pc, #4	; (adr r1, 800553c <_printf_i+0x40>)
 8005538:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800553c:	08005595 	.word	0x08005595
 8005540:	080055a9 	.word	0x080055a9
 8005544:	08005525 	.word	0x08005525
 8005548:	08005525 	.word	0x08005525
 800554c:	08005525 	.word	0x08005525
 8005550:	08005525 	.word	0x08005525
 8005554:	080055a9 	.word	0x080055a9
 8005558:	08005525 	.word	0x08005525
 800555c:	08005525 	.word	0x08005525
 8005560:	08005525 	.word	0x08005525
 8005564:	08005525 	.word	0x08005525
 8005568:	080056b5 	.word	0x080056b5
 800556c:	080055d9 	.word	0x080055d9
 8005570:	08005697 	.word	0x08005697
 8005574:	08005525 	.word	0x08005525
 8005578:	08005525 	.word	0x08005525
 800557c:	080056d7 	.word	0x080056d7
 8005580:	08005525 	.word	0x08005525
 8005584:	080055d9 	.word	0x080055d9
 8005588:	08005525 	.word	0x08005525
 800558c:	08005525 	.word	0x08005525
 8005590:	0800569f 	.word	0x0800569f
 8005594:	682b      	ldr	r3, [r5, #0]
 8005596:	1d1a      	adds	r2, r3, #4
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	602a      	str	r2, [r5, #0]
 800559c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80055a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80055a4:	2301      	movs	r3, #1
 80055a6:	e0a3      	b.n	80056f0 <_printf_i+0x1f4>
 80055a8:	6820      	ldr	r0, [r4, #0]
 80055aa:	6829      	ldr	r1, [r5, #0]
 80055ac:	0606      	lsls	r6, r0, #24
 80055ae:	f101 0304 	add.w	r3, r1, #4
 80055b2:	d50a      	bpl.n	80055ca <_printf_i+0xce>
 80055b4:	680e      	ldr	r6, [r1, #0]
 80055b6:	602b      	str	r3, [r5, #0]
 80055b8:	2e00      	cmp	r6, #0
 80055ba:	da03      	bge.n	80055c4 <_printf_i+0xc8>
 80055bc:	232d      	movs	r3, #45	; 0x2d
 80055be:	4276      	negs	r6, r6
 80055c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055c4:	485e      	ldr	r0, [pc, #376]	; (8005740 <_printf_i+0x244>)
 80055c6:	230a      	movs	r3, #10
 80055c8:	e019      	b.n	80055fe <_printf_i+0x102>
 80055ca:	680e      	ldr	r6, [r1, #0]
 80055cc:	602b      	str	r3, [r5, #0]
 80055ce:	f010 0f40 	tst.w	r0, #64	; 0x40
 80055d2:	bf18      	it	ne
 80055d4:	b236      	sxthne	r6, r6
 80055d6:	e7ef      	b.n	80055b8 <_printf_i+0xbc>
 80055d8:	682b      	ldr	r3, [r5, #0]
 80055da:	6820      	ldr	r0, [r4, #0]
 80055dc:	1d19      	adds	r1, r3, #4
 80055de:	6029      	str	r1, [r5, #0]
 80055e0:	0601      	lsls	r1, r0, #24
 80055e2:	d501      	bpl.n	80055e8 <_printf_i+0xec>
 80055e4:	681e      	ldr	r6, [r3, #0]
 80055e6:	e002      	b.n	80055ee <_printf_i+0xf2>
 80055e8:	0646      	lsls	r6, r0, #25
 80055ea:	d5fb      	bpl.n	80055e4 <_printf_i+0xe8>
 80055ec:	881e      	ldrh	r6, [r3, #0]
 80055ee:	4854      	ldr	r0, [pc, #336]	; (8005740 <_printf_i+0x244>)
 80055f0:	2f6f      	cmp	r7, #111	; 0x6f
 80055f2:	bf0c      	ite	eq
 80055f4:	2308      	moveq	r3, #8
 80055f6:	230a      	movne	r3, #10
 80055f8:	2100      	movs	r1, #0
 80055fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80055fe:	6865      	ldr	r5, [r4, #4]
 8005600:	60a5      	str	r5, [r4, #8]
 8005602:	2d00      	cmp	r5, #0
 8005604:	bfa2      	ittt	ge
 8005606:	6821      	ldrge	r1, [r4, #0]
 8005608:	f021 0104 	bicge.w	r1, r1, #4
 800560c:	6021      	strge	r1, [r4, #0]
 800560e:	b90e      	cbnz	r6, 8005614 <_printf_i+0x118>
 8005610:	2d00      	cmp	r5, #0
 8005612:	d04d      	beq.n	80056b0 <_printf_i+0x1b4>
 8005614:	4615      	mov	r5, r2
 8005616:	fbb6 f1f3 	udiv	r1, r6, r3
 800561a:	fb03 6711 	mls	r7, r3, r1, r6
 800561e:	5dc7      	ldrb	r7, [r0, r7]
 8005620:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005624:	4637      	mov	r7, r6
 8005626:	42bb      	cmp	r3, r7
 8005628:	460e      	mov	r6, r1
 800562a:	d9f4      	bls.n	8005616 <_printf_i+0x11a>
 800562c:	2b08      	cmp	r3, #8
 800562e:	d10b      	bne.n	8005648 <_printf_i+0x14c>
 8005630:	6823      	ldr	r3, [r4, #0]
 8005632:	07de      	lsls	r6, r3, #31
 8005634:	d508      	bpl.n	8005648 <_printf_i+0x14c>
 8005636:	6923      	ldr	r3, [r4, #16]
 8005638:	6861      	ldr	r1, [r4, #4]
 800563a:	4299      	cmp	r1, r3
 800563c:	bfde      	ittt	le
 800563e:	2330      	movle	r3, #48	; 0x30
 8005640:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005644:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005648:	1b52      	subs	r2, r2, r5
 800564a:	6122      	str	r2, [r4, #16]
 800564c:	f8cd a000 	str.w	sl, [sp]
 8005650:	464b      	mov	r3, r9
 8005652:	aa03      	add	r2, sp, #12
 8005654:	4621      	mov	r1, r4
 8005656:	4640      	mov	r0, r8
 8005658:	f7ff fee2 	bl	8005420 <_printf_common>
 800565c:	3001      	adds	r0, #1
 800565e:	d14c      	bne.n	80056fa <_printf_i+0x1fe>
 8005660:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005664:	b004      	add	sp, #16
 8005666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800566a:	4835      	ldr	r0, [pc, #212]	; (8005740 <_printf_i+0x244>)
 800566c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005670:	6829      	ldr	r1, [r5, #0]
 8005672:	6823      	ldr	r3, [r4, #0]
 8005674:	f851 6b04 	ldr.w	r6, [r1], #4
 8005678:	6029      	str	r1, [r5, #0]
 800567a:	061d      	lsls	r5, r3, #24
 800567c:	d514      	bpl.n	80056a8 <_printf_i+0x1ac>
 800567e:	07df      	lsls	r7, r3, #31
 8005680:	bf44      	itt	mi
 8005682:	f043 0320 	orrmi.w	r3, r3, #32
 8005686:	6023      	strmi	r3, [r4, #0]
 8005688:	b91e      	cbnz	r6, 8005692 <_printf_i+0x196>
 800568a:	6823      	ldr	r3, [r4, #0]
 800568c:	f023 0320 	bic.w	r3, r3, #32
 8005690:	6023      	str	r3, [r4, #0]
 8005692:	2310      	movs	r3, #16
 8005694:	e7b0      	b.n	80055f8 <_printf_i+0xfc>
 8005696:	6823      	ldr	r3, [r4, #0]
 8005698:	f043 0320 	orr.w	r3, r3, #32
 800569c:	6023      	str	r3, [r4, #0]
 800569e:	2378      	movs	r3, #120	; 0x78
 80056a0:	4828      	ldr	r0, [pc, #160]	; (8005744 <_printf_i+0x248>)
 80056a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80056a6:	e7e3      	b.n	8005670 <_printf_i+0x174>
 80056a8:	0659      	lsls	r1, r3, #25
 80056aa:	bf48      	it	mi
 80056ac:	b2b6      	uxthmi	r6, r6
 80056ae:	e7e6      	b.n	800567e <_printf_i+0x182>
 80056b0:	4615      	mov	r5, r2
 80056b2:	e7bb      	b.n	800562c <_printf_i+0x130>
 80056b4:	682b      	ldr	r3, [r5, #0]
 80056b6:	6826      	ldr	r6, [r4, #0]
 80056b8:	6961      	ldr	r1, [r4, #20]
 80056ba:	1d18      	adds	r0, r3, #4
 80056bc:	6028      	str	r0, [r5, #0]
 80056be:	0635      	lsls	r5, r6, #24
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	d501      	bpl.n	80056c8 <_printf_i+0x1cc>
 80056c4:	6019      	str	r1, [r3, #0]
 80056c6:	e002      	b.n	80056ce <_printf_i+0x1d2>
 80056c8:	0670      	lsls	r0, r6, #25
 80056ca:	d5fb      	bpl.n	80056c4 <_printf_i+0x1c8>
 80056cc:	8019      	strh	r1, [r3, #0]
 80056ce:	2300      	movs	r3, #0
 80056d0:	6123      	str	r3, [r4, #16]
 80056d2:	4615      	mov	r5, r2
 80056d4:	e7ba      	b.n	800564c <_printf_i+0x150>
 80056d6:	682b      	ldr	r3, [r5, #0]
 80056d8:	1d1a      	adds	r2, r3, #4
 80056da:	602a      	str	r2, [r5, #0]
 80056dc:	681d      	ldr	r5, [r3, #0]
 80056de:	6862      	ldr	r2, [r4, #4]
 80056e0:	2100      	movs	r1, #0
 80056e2:	4628      	mov	r0, r5
 80056e4:	f7fa fd94 	bl	8000210 <memchr>
 80056e8:	b108      	cbz	r0, 80056ee <_printf_i+0x1f2>
 80056ea:	1b40      	subs	r0, r0, r5
 80056ec:	6060      	str	r0, [r4, #4]
 80056ee:	6863      	ldr	r3, [r4, #4]
 80056f0:	6123      	str	r3, [r4, #16]
 80056f2:	2300      	movs	r3, #0
 80056f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056f8:	e7a8      	b.n	800564c <_printf_i+0x150>
 80056fa:	6923      	ldr	r3, [r4, #16]
 80056fc:	462a      	mov	r2, r5
 80056fe:	4649      	mov	r1, r9
 8005700:	4640      	mov	r0, r8
 8005702:	47d0      	blx	sl
 8005704:	3001      	adds	r0, #1
 8005706:	d0ab      	beq.n	8005660 <_printf_i+0x164>
 8005708:	6823      	ldr	r3, [r4, #0]
 800570a:	079b      	lsls	r3, r3, #30
 800570c:	d413      	bmi.n	8005736 <_printf_i+0x23a>
 800570e:	68e0      	ldr	r0, [r4, #12]
 8005710:	9b03      	ldr	r3, [sp, #12]
 8005712:	4298      	cmp	r0, r3
 8005714:	bfb8      	it	lt
 8005716:	4618      	movlt	r0, r3
 8005718:	e7a4      	b.n	8005664 <_printf_i+0x168>
 800571a:	2301      	movs	r3, #1
 800571c:	4632      	mov	r2, r6
 800571e:	4649      	mov	r1, r9
 8005720:	4640      	mov	r0, r8
 8005722:	47d0      	blx	sl
 8005724:	3001      	adds	r0, #1
 8005726:	d09b      	beq.n	8005660 <_printf_i+0x164>
 8005728:	3501      	adds	r5, #1
 800572a:	68e3      	ldr	r3, [r4, #12]
 800572c:	9903      	ldr	r1, [sp, #12]
 800572e:	1a5b      	subs	r3, r3, r1
 8005730:	42ab      	cmp	r3, r5
 8005732:	dcf2      	bgt.n	800571a <_printf_i+0x21e>
 8005734:	e7eb      	b.n	800570e <_printf_i+0x212>
 8005736:	2500      	movs	r5, #0
 8005738:	f104 0619 	add.w	r6, r4, #25
 800573c:	e7f5      	b.n	800572a <_printf_i+0x22e>
 800573e:	bf00      	nop
 8005740:	080059a1 	.word	0x080059a1
 8005744:	080059b2 	.word	0x080059b2

08005748 <_sbrk_r>:
 8005748:	b538      	push	{r3, r4, r5, lr}
 800574a:	4d06      	ldr	r5, [pc, #24]	; (8005764 <_sbrk_r+0x1c>)
 800574c:	2300      	movs	r3, #0
 800574e:	4604      	mov	r4, r0
 8005750:	4608      	mov	r0, r1
 8005752:	602b      	str	r3, [r5, #0]
 8005754:	f7fb feb6 	bl	80014c4 <_sbrk>
 8005758:	1c43      	adds	r3, r0, #1
 800575a:	d102      	bne.n	8005762 <_sbrk_r+0x1a>
 800575c:	682b      	ldr	r3, [r5, #0]
 800575e:	b103      	cbz	r3, 8005762 <_sbrk_r+0x1a>
 8005760:	6023      	str	r3, [r4, #0]
 8005762:	bd38      	pop	{r3, r4, r5, pc}
 8005764:	200001c4 	.word	0x200001c4

08005768 <__sread>:
 8005768:	b510      	push	{r4, lr}
 800576a:	460c      	mov	r4, r1
 800576c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005770:	f000 f8a0 	bl	80058b4 <_read_r>
 8005774:	2800      	cmp	r0, #0
 8005776:	bfab      	itete	ge
 8005778:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800577a:	89a3      	ldrhlt	r3, [r4, #12]
 800577c:	181b      	addge	r3, r3, r0
 800577e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005782:	bfac      	ite	ge
 8005784:	6563      	strge	r3, [r4, #84]	; 0x54
 8005786:	81a3      	strhlt	r3, [r4, #12]
 8005788:	bd10      	pop	{r4, pc}

0800578a <__swrite>:
 800578a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800578e:	461f      	mov	r7, r3
 8005790:	898b      	ldrh	r3, [r1, #12]
 8005792:	05db      	lsls	r3, r3, #23
 8005794:	4605      	mov	r5, r0
 8005796:	460c      	mov	r4, r1
 8005798:	4616      	mov	r6, r2
 800579a:	d505      	bpl.n	80057a8 <__swrite+0x1e>
 800579c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057a0:	2302      	movs	r3, #2
 80057a2:	2200      	movs	r2, #0
 80057a4:	f000 f868 	bl	8005878 <_lseek_r>
 80057a8:	89a3      	ldrh	r3, [r4, #12]
 80057aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80057ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80057b2:	81a3      	strh	r3, [r4, #12]
 80057b4:	4632      	mov	r2, r6
 80057b6:	463b      	mov	r3, r7
 80057b8:	4628      	mov	r0, r5
 80057ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80057be:	f000 b817 	b.w	80057f0 <_write_r>

080057c2 <__sseek>:
 80057c2:	b510      	push	{r4, lr}
 80057c4:	460c      	mov	r4, r1
 80057c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057ca:	f000 f855 	bl	8005878 <_lseek_r>
 80057ce:	1c43      	adds	r3, r0, #1
 80057d0:	89a3      	ldrh	r3, [r4, #12]
 80057d2:	bf15      	itete	ne
 80057d4:	6560      	strne	r0, [r4, #84]	; 0x54
 80057d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80057da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80057de:	81a3      	strheq	r3, [r4, #12]
 80057e0:	bf18      	it	ne
 80057e2:	81a3      	strhne	r3, [r4, #12]
 80057e4:	bd10      	pop	{r4, pc}

080057e6 <__sclose>:
 80057e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057ea:	f000 b813 	b.w	8005814 <_close_r>
	...

080057f0 <_write_r>:
 80057f0:	b538      	push	{r3, r4, r5, lr}
 80057f2:	4d07      	ldr	r5, [pc, #28]	; (8005810 <_write_r+0x20>)
 80057f4:	4604      	mov	r4, r0
 80057f6:	4608      	mov	r0, r1
 80057f8:	4611      	mov	r1, r2
 80057fa:	2200      	movs	r2, #0
 80057fc:	602a      	str	r2, [r5, #0]
 80057fe:	461a      	mov	r2, r3
 8005800:	f7fb fe0f 	bl	8001422 <_write>
 8005804:	1c43      	adds	r3, r0, #1
 8005806:	d102      	bne.n	800580e <_write_r+0x1e>
 8005808:	682b      	ldr	r3, [r5, #0]
 800580a:	b103      	cbz	r3, 800580e <_write_r+0x1e>
 800580c:	6023      	str	r3, [r4, #0]
 800580e:	bd38      	pop	{r3, r4, r5, pc}
 8005810:	200001c4 	.word	0x200001c4

08005814 <_close_r>:
 8005814:	b538      	push	{r3, r4, r5, lr}
 8005816:	4d06      	ldr	r5, [pc, #24]	; (8005830 <_close_r+0x1c>)
 8005818:	2300      	movs	r3, #0
 800581a:	4604      	mov	r4, r0
 800581c:	4608      	mov	r0, r1
 800581e:	602b      	str	r3, [r5, #0]
 8005820:	f7fb fe1b 	bl	800145a <_close>
 8005824:	1c43      	adds	r3, r0, #1
 8005826:	d102      	bne.n	800582e <_close_r+0x1a>
 8005828:	682b      	ldr	r3, [r5, #0]
 800582a:	b103      	cbz	r3, 800582e <_close_r+0x1a>
 800582c:	6023      	str	r3, [r4, #0]
 800582e:	bd38      	pop	{r3, r4, r5, pc}
 8005830:	200001c4 	.word	0x200001c4

08005834 <_fstat_r>:
 8005834:	b538      	push	{r3, r4, r5, lr}
 8005836:	4d07      	ldr	r5, [pc, #28]	; (8005854 <_fstat_r+0x20>)
 8005838:	2300      	movs	r3, #0
 800583a:	4604      	mov	r4, r0
 800583c:	4608      	mov	r0, r1
 800583e:	4611      	mov	r1, r2
 8005840:	602b      	str	r3, [r5, #0]
 8005842:	f7fb fe16 	bl	8001472 <_fstat>
 8005846:	1c43      	adds	r3, r0, #1
 8005848:	d102      	bne.n	8005850 <_fstat_r+0x1c>
 800584a:	682b      	ldr	r3, [r5, #0]
 800584c:	b103      	cbz	r3, 8005850 <_fstat_r+0x1c>
 800584e:	6023      	str	r3, [r4, #0]
 8005850:	bd38      	pop	{r3, r4, r5, pc}
 8005852:	bf00      	nop
 8005854:	200001c4 	.word	0x200001c4

08005858 <_isatty_r>:
 8005858:	b538      	push	{r3, r4, r5, lr}
 800585a:	4d06      	ldr	r5, [pc, #24]	; (8005874 <_isatty_r+0x1c>)
 800585c:	2300      	movs	r3, #0
 800585e:	4604      	mov	r4, r0
 8005860:	4608      	mov	r0, r1
 8005862:	602b      	str	r3, [r5, #0]
 8005864:	f7fb fe15 	bl	8001492 <_isatty>
 8005868:	1c43      	adds	r3, r0, #1
 800586a:	d102      	bne.n	8005872 <_isatty_r+0x1a>
 800586c:	682b      	ldr	r3, [r5, #0]
 800586e:	b103      	cbz	r3, 8005872 <_isatty_r+0x1a>
 8005870:	6023      	str	r3, [r4, #0]
 8005872:	bd38      	pop	{r3, r4, r5, pc}
 8005874:	200001c4 	.word	0x200001c4

08005878 <_lseek_r>:
 8005878:	b538      	push	{r3, r4, r5, lr}
 800587a:	4d07      	ldr	r5, [pc, #28]	; (8005898 <_lseek_r+0x20>)
 800587c:	4604      	mov	r4, r0
 800587e:	4608      	mov	r0, r1
 8005880:	4611      	mov	r1, r2
 8005882:	2200      	movs	r2, #0
 8005884:	602a      	str	r2, [r5, #0]
 8005886:	461a      	mov	r2, r3
 8005888:	f7fb fe0e 	bl	80014a8 <_lseek>
 800588c:	1c43      	adds	r3, r0, #1
 800588e:	d102      	bne.n	8005896 <_lseek_r+0x1e>
 8005890:	682b      	ldr	r3, [r5, #0]
 8005892:	b103      	cbz	r3, 8005896 <_lseek_r+0x1e>
 8005894:	6023      	str	r3, [r4, #0]
 8005896:	bd38      	pop	{r3, r4, r5, pc}
 8005898:	200001c4 	.word	0x200001c4

0800589c <__malloc_lock>:
 800589c:	4801      	ldr	r0, [pc, #4]	; (80058a4 <__malloc_lock+0x8>)
 800589e:	f7ff bb15 	b.w	8004ecc <__retarget_lock_acquire_recursive>
 80058a2:	bf00      	nop
 80058a4:	200001b8 	.word	0x200001b8

080058a8 <__malloc_unlock>:
 80058a8:	4801      	ldr	r0, [pc, #4]	; (80058b0 <__malloc_unlock+0x8>)
 80058aa:	f7ff bb10 	b.w	8004ece <__retarget_lock_release_recursive>
 80058ae:	bf00      	nop
 80058b0:	200001b8 	.word	0x200001b8

080058b4 <_read_r>:
 80058b4:	b538      	push	{r3, r4, r5, lr}
 80058b6:	4d07      	ldr	r5, [pc, #28]	; (80058d4 <_read_r+0x20>)
 80058b8:	4604      	mov	r4, r0
 80058ba:	4608      	mov	r0, r1
 80058bc:	4611      	mov	r1, r2
 80058be:	2200      	movs	r2, #0
 80058c0:	602a      	str	r2, [r5, #0]
 80058c2:	461a      	mov	r2, r3
 80058c4:	f7fb fd90 	bl	80013e8 <_read>
 80058c8:	1c43      	adds	r3, r0, #1
 80058ca:	d102      	bne.n	80058d2 <_read_r+0x1e>
 80058cc:	682b      	ldr	r3, [r5, #0]
 80058ce:	b103      	cbz	r3, 80058d2 <_read_r+0x1e>
 80058d0:	6023      	str	r3, [r4, #0]
 80058d2:	bd38      	pop	{r3, r4, r5, pc}
 80058d4:	200001c4 	.word	0x200001c4

080058d8 <_init>:
 80058d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058da:	bf00      	nop
 80058dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058de:	bc08      	pop	{r3}
 80058e0:	469e      	mov	lr, r3
 80058e2:	4770      	bx	lr

080058e4 <_fini>:
 80058e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058e6:	bf00      	nop
 80058e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058ea:	bc08      	pop	{r3}
 80058ec:	469e      	mov	lr, r3
 80058ee:	4770      	bx	lr
