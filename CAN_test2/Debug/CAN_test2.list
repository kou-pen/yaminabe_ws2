
CAN_test2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043ec  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  080045bc  080045bc  000145bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004690  08004690  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004690  08004690  00014690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004698  08004698  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004698  08004698  00014698  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800469c  0800469c  0001469c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080046a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  20000070  08004710  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000120  08004710  00020120  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bad9  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d05  00000000  00000000  0002bb79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000920  00000000  00000000  0002d880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000868  00000000  00000000  0002e1a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000222e8  00000000  00000000  0002ea08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b215  00000000  00000000  00050cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cc58f  00000000  00000000  0005bf05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00128494  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d04  00000000  00000000  001284e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080045a4 	.word	0x080045a4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	080045a4 	.word	0x080045a4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b08a      	sub	sp, #40	; 0x28
 80005b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	setbuf(stdout, NULL);
 80005ba:	4b20      	ldr	r3, [pc, #128]	; (800063c <main+0x88>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	689b      	ldr	r3, [r3, #8]
 80005c0:	2100      	movs	r1, #0
 80005c2:	4618      	mov	r0, r3
 80005c4:	f002 ffa2 	bl	800350c <setbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c8:	f000 fbee 	bl	8000da8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005cc:	f000 f83e 	bl	800064c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d0:	f000 f910 	bl	80007f4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005d4:	f000 f8e4 	bl	80007a0 <MX_USART2_UART_Init>
  MX_CAN2_Init();
 80005d8:	f000 f8aa 	bl	8000730 <MX_CAN2_Init>
  /* USER CODE BEGIN 2 */
	CAN_FilterTypeDef filter;
	  filter.FilterIdHigh         = 0;                        // フィルターID(上位16ビット)
 80005dc:	2300      	movs	r3, #0
 80005de:	603b      	str	r3, [r7, #0]
	  filter.FilterIdLow          = 0;                        // フィルターID(下位16ビット)
 80005e0:	2300      	movs	r3, #0
 80005e2:	607b      	str	r3, [r7, #4]
	  filter.FilterMaskIdHigh     = 0;                        // フィルターマスク(上位16ビット)
 80005e4:	2300      	movs	r3, #0
 80005e6:	60bb      	str	r3, [r7, #8]
	  filter.FilterMaskIdLow      = 0;                        // フィルターマスク(下位16ビット)
 80005e8:	2300      	movs	r3, #0
 80005ea:	60fb      	str	r3, [r7, #12]
	  filter.FilterScale          = CAN_FILTERSCALE_32BIT;    // フィルタースケール
 80005ec:	2301      	movs	r3, #1
 80005ee:	61fb      	str	r3, [r7, #28]
	  filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;         // フィルターに割り当てるFIFO
 80005f0:	2300      	movs	r3, #0
 80005f2:	613b      	str	r3, [r7, #16]
	  filter.FilterBank           = 14;                        // フィルターバンクNo
 80005f4:	230e      	movs	r3, #14
 80005f6:	617b      	str	r3, [r7, #20]
	  filter.FilterMode           = CAN_FILTERMODE_IDMASK;    // フィルターモード
 80005f8:	2300      	movs	r3, #0
 80005fa:	61bb      	str	r3, [r7, #24]
	  filter.SlaveStartFilterBank = 14;                       // スレーブCANの開始フィルターバンクNo
 80005fc:	230e      	movs	r3, #14
 80005fe:	627b      	str	r3, [r7, #36]	; 0x24
	  filter.FilterActivation     = ENABLE;                   // フィルター無効／有効
 8000600:	2301      	movs	r3, #1
 8000602:	623b      	str	r3, [r7, #32]

  HAL_CAN_ConfigFilter(&hcan2, &filter);
 8000604:	463b      	mov	r3, r7
 8000606:	4619      	mov	r1, r3
 8000608:	480d      	ldr	r0, [pc, #52]	; (8000640 <main+0x8c>)
 800060a:	f000 fd5f 	bl	80010cc <HAL_CAN_ConfigFilter>

  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); //LEDを点灯 初期化確認
 800060e:	2120      	movs	r1, #32
 8000610:	480c      	ldr	r0, [pc, #48]	; (8000644 <main+0x90>)
 8000612:	f001 fca6 	bl	8001f62 <HAL_GPIO_TogglePin>
  HAL_Delay(500); //500ms待つ
 8000616:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800061a:	f000 fc37 	bl	8000e8c <HAL_Delay>
  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); //LEDを消灯
 800061e:	2120      	movs	r1, #32
 8000620:	4808      	ldr	r0, [pc, #32]	; (8000644 <main+0x90>)
 8000622:	f001 fc9e 	bl	8001f62 <HAL_GPIO_TogglePin>
  printf("start\n");
 8000626:	4808      	ldr	r0, [pc, #32]	; (8000648 <main+0x94>)
 8000628:	f002 ff68 	bl	80034fc <puts>

  HAL_CAN_Start(&hcan2);
 800062c:	4804      	ldr	r0, [pc, #16]	; (8000640 <main+0x8c>)
 800062e:	f000 fe2d 	bl	800128c <HAL_CAN_Start>
  // 割り込み有効
  HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000632:	2102      	movs	r1, #2
 8000634:	4802      	ldr	r0, [pc, #8]	; (8000640 <main+0x8c>)
 8000636:	f000 ff7f 	bl	8001538 <HAL_CAN_ActivateNotification>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800063a:	e7fe      	b.n	800063a <main+0x86>
 800063c:	2000000c 	.word	0x2000000c
 8000640:	2000008c 	.word	0x2000008c
 8000644:	40020000 	.word	0x40020000
 8000648:	080045bc 	.word	0x080045bc

0800064c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b094      	sub	sp, #80	; 0x50
 8000650:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000652:	f107 031c 	add.w	r3, r7, #28
 8000656:	2234      	movs	r2, #52	; 0x34
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f002 fec0 	bl	80033e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000660:	f107 0308 	add.w	r3, r7, #8
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	605a      	str	r2, [r3, #4]
 800066a:	609a      	str	r2, [r3, #8]
 800066c:	60da      	str	r2, [r3, #12]
 800066e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000670:	2300      	movs	r3, #0
 8000672:	607b      	str	r3, [r7, #4]
 8000674:	4b2c      	ldr	r3, [pc, #176]	; (8000728 <SystemClock_Config+0xdc>)
 8000676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000678:	4a2b      	ldr	r2, [pc, #172]	; (8000728 <SystemClock_Config+0xdc>)
 800067a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800067e:	6413      	str	r3, [r2, #64]	; 0x40
 8000680:	4b29      	ldr	r3, [pc, #164]	; (8000728 <SystemClock_Config+0xdc>)
 8000682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000684:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000688:	607b      	str	r3, [r7, #4]
 800068a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800068c:	2300      	movs	r3, #0
 800068e:	603b      	str	r3, [r7, #0]
 8000690:	4b26      	ldr	r3, [pc, #152]	; (800072c <SystemClock_Config+0xe0>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a25      	ldr	r2, [pc, #148]	; (800072c <SystemClock_Config+0xe0>)
 8000696:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800069a:	6013      	str	r3, [r2, #0]
 800069c:	4b23      	ldr	r3, [pc, #140]	; (800072c <SystemClock_Config+0xe0>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006a4:	603b      	str	r3, [r7, #0]
 80006a6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006a8:	2302      	movs	r3, #2
 80006aa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006ac:	2301      	movs	r3, #1
 80006ae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b0:	2310      	movs	r3, #16
 80006b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b4:	2302      	movs	r3, #2
 80006b6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006b8:	2300      	movs	r3, #0
 80006ba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006bc:	2308      	movs	r3, #8
 80006be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80006c0:	23b4      	movs	r3, #180	; 0xb4
 80006c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006c4:	2302      	movs	r3, #2
 80006c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006c8:	2302      	movs	r3, #2
 80006ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006cc:	2302      	movs	r3, #2
 80006ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d0:	f107 031c 	add.w	r3, r7, #28
 80006d4:	4618      	mov	r0, r3
 80006d6:	f001 fff9 	bl	80026cc <HAL_RCC_OscConfig>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006e0:	f000 f972 	bl	80009c8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006e4:	f001 fc58 	bl	8001f98 <HAL_PWREx_EnableOverDrive>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80006ee:	f000 f96b 	bl	80009c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f2:	230f      	movs	r3, #15
 80006f4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f6:	2302      	movs	r3, #2
 80006f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006fa:	2300      	movs	r3, #0
 80006fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006fe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000702:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000704:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000708:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800070a:	f107 0308 	add.w	r3, r7, #8
 800070e:	2105      	movs	r1, #5
 8000710:	4618      	mov	r0, r3
 8000712:	f001 fc91 	bl	8002038 <HAL_RCC_ClockConfig>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800071c:	f000 f954 	bl	80009c8 <Error_Handler>
  }
}
 8000720:	bf00      	nop
 8000722:	3750      	adds	r7, #80	; 0x50
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	40023800 	.word	0x40023800
 800072c:	40007000 	.word	0x40007000

08000730 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000734:	4b18      	ldr	r3, [pc, #96]	; (8000798 <MX_CAN2_Init+0x68>)
 8000736:	4a19      	ldr	r2, [pc, #100]	; (800079c <MX_CAN2_Init+0x6c>)
 8000738:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 9;
 800073a:	4b17      	ldr	r3, [pc, #92]	; (8000798 <MX_CAN2_Init+0x68>)
 800073c:	2209      	movs	r2, #9
 800073e:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000740:	4b15      	ldr	r3, [pc, #84]	; (8000798 <MX_CAN2_Init+0x68>)
 8000742:	2200      	movs	r2, #0
 8000744:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_4TQ;
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <MX_CAN2_Init+0x68>)
 8000748:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 800074c:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_4TQ;
 800074e:	4b12      	ldr	r3, [pc, #72]	; (8000798 <MX_CAN2_Init+0x68>)
 8000750:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000754:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_5TQ;
 8000756:	4b10      	ldr	r3, [pc, #64]	; (8000798 <MX_CAN2_Init+0x68>)
 8000758:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800075c:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 800075e:	4b0e      	ldr	r3, [pc, #56]	; (8000798 <MX_CAN2_Init+0x68>)
 8000760:	2200      	movs	r2, #0
 8000762:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000764:	4b0c      	ldr	r3, [pc, #48]	; (8000798 <MX_CAN2_Init+0x68>)
 8000766:	2200      	movs	r2, #0
 8000768:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 800076a:	4b0b      	ldr	r3, [pc, #44]	; (8000798 <MX_CAN2_Init+0x68>)
 800076c:	2200      	movs	r2, #0
 800076e:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000770:	4b09      	ldr	r3, [pc, #36]	; (8000798 <MX_CAN2_Init+0x68>)
 8000772:	2200      	movs	r2, #0
 8000774:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000776:	4b08      	ldr	r3, [pc, #32]	; (8000798 <MX_CAN2_Init+0x68>)
 8000778:	2200      	movs	r2, #0
 800077a:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 800077c:	4b06      	ldr	r3, [pc, #24]	; (8000798 <MX_CAN2_Init+0x68>)
 800077e:	2200      	movs	r2, #0
 8000780:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000782:	4805      	ldr	r0, [pc, #20]	; (8000798 <MX_CAN2_Init+0x68>)
 8000784:	f000 fba6 	bl	8000ed4 <HAL_CAN_Init>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_CAN2_Init+0x62>
  {
    Error_Handler();
 800078e:	f000 f91b 	bl	80009c8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8000792:	bf00      	nop
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	2000008c 	.word	0x2000008c
 800079c:	40006800 	.word	0x40006800

080007a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007a4:	4b11      	ldr	r3, [pc, #68]	; (80007ec <MX_USART2_UART_Init+0x4c>)
 80007a6:	4a12      	ldr	r2, [pc, #72]	; (80007f0 <MX_USART2_UART_Init+0x50>)
 80007a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007aa:	4b10      	ldr	r3, [pc, #64]	; (80007ec <MX_USART2_UART_Init+0x4c>)
 80007ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007b2:	4b0e      	ldr	r3, [pc, #56]	; (80007ec <MX_USART2_UART_Init+0x4c>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007b8:	4b0c      	ldr	r3, [pc, #48]	; (80007ec <MX_USART2_UART_Init+0x4c>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007be:	4b0b      	ldr	r3, [pc, #44]	; (80007ec <MX_USART2_UART_Init+0x4c>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007c4:	4b09      	ldr	r3, [pc, #36]	; (80007ec <MX_USART2_UART_Init+0x4c>)
 80007c6:	220c      	movs	r2, #12
 80007c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ca:	4b08      	ldr	r3, [pc, #32]	; (80007ec <MX_USART2_UART_Init+0x4c>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d0:	4b06      	ldr	r3, [pc, #24]	; (80007ec <MX_USART2_UART_Init+0x4c>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007d6:	4805      	ldr	r0, [pc, #20]	; (80007ec <MX_USART2_UART_Init+0x4c>)
 80007d8:	f002 fa16 	bl	8002c08 <HAL_UART_Init>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007e2:	f000 f8f1 	bl	80009c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007e6:	bf00      	nop
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	200000b4 	.word	0x200000b4
 80007f0:	40004400 	.word	0x40004400

080007f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b08a      	sub	sp, #40	; 0x28
 80007f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fa:	f107 0314 	add.w	r3, r7, #20
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	605a      	str	r2, [r3, #4]
 8000804:	609a      	str	r2, [r3, #8]
 8000806:	60da      	str	r2, [r3, #12]
 8000808:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	613b      	str	r3, [r7, #16]
 800080e:	4b2d      	ldr	r3, [pc, #180]	; (80008c4 <MX_GPIO_Init+0xd0>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	4a2c      	ldr	r2, [pc, #176]	; (80008c4 <MX_GPIO_Init+0xd0>)
 8000814:	f043 0304 	orr.w	r3, r3, #4
 8000818:	6313      	str	r3, [r2, #48]	; 0x30
 800081a:	4b2a      	ldr	r3, [pc, #168]	; (80008c4 <MX_GPIO_Init+0xd0>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	f003 0304 	and.w	r3, r3, #4
 8000822:	613b      	str	r3, [r7, #16]
 8000824:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	60fb      	str	r3, [r7, #12]
 800082a:	4b26      	ldr	r3, [pc, #152]	; (80008c4 <MX_GPIO_Init+0xd0>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	4a25      	ldr	r2, [pc, #148]	; (80008c4 <MX_GPIO_Init+0xd0>)
 8000830:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000834:	6313      	str	r3, [r2, #48]	; 0x30
 8000836:	4b23      	ldr	r3, [pc, #140]	; (80008c4 <MX_GPIO_Init+0xd0>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800083e:	60fb      	str	r3, [r7, #12]
 8000840:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	60bb      	str	r3, [r7, #8]
 8000846:	4b1f      	ldr	r3, [pc, #124]	; (80008c4 <MX_GPIO_Init+0xd0>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	4a1e      	ldr	r2, [pc, #120]	; (80008c4 <MX_GPIO_Init+0xd0>)
 800084c:	f043 0301 	orr.w	r3, r3, #1
 8000850:	6313      	str	r3, [r2, #48]	; 0x30
 8000852:	4b1c      	ldr	r3, [pc, #112]	; (80008c4 <MX_GPIO_Init+0xd0>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	f003 0301 	and.w	r3, r3, #1
 800085a:	60bb      	str	r3, [r7, #8]
 800085c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	607b      	str	r3, [r7, #4]
 8000862:	4b18      	ldr	r3, [pc, #96]	; (80008c4 <MX_GPIO_Init+0xd0>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	4a17      	ldr	r2, [pc, #92]	; (80008c4 <MX_GPIO_Init+0xd0>)
 8000868:	f043 0302 	orr.w	r3, r3, #2
 800086c:	6313      	str	r3, [r2, #48]	; 0x30
 800086e:	4b15      	ldr	r3, [pc, #84]	; (80008c4 <MX_GPIO_Init+0xd0>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	f003 0302 	and.w	r3, r3, #2
 8000876:	607b      	str	r3, [r7, #4]
 8000878:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800087a:	2200      	movs	r2, #0
 800087c:	2120      	movs	r1, #32
 800087e:	4812      	ldr	r0, [pc, #72]	; (80008c8 <MX_GPIO_Init+0xd4>)
 8000880:	f001 fb56 	bl	8001f30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000884:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000888:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800088a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800088e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000894:	f107 0314 	add.w	r3, r7, #20
 8000898:	4619      	mov	r1, r3
 800089a:	480c      	ldr	r0, [pc, #48]	; (80008cc <MX_GPIO_Init+0xd8>)
 800089c:	f001 f9b4 	bl	8001c08 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008a0:	2320      	movs	r3, #32
 80008a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a4:	2301      	movs	r3, #1
 80008a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ac:	2300      	movs	r3, #0
 80008ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008b0:	f107 0314 	add.w	r3, r7, #20
 80008b4:	4619      	mov	r1, r3
 80008b6:	4804      	ldr	r0, [pc, #16]	; (80008c8 <MX_GPIO_Init+0xd4>)
 80008b8:	f001 f9a6 	bl	8001c08 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008bc:	bf00      	nop
 80008be:	3728      	adds	r7, #40	; 0x28
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	40023800 	.word	0x40023800
 80008c8:	40020000 	.word	0x40020000
 80008cc:	40020800 	.word	0x40020800

080008d0 <HAL_CAN_RxFifo0MsgPendingCallback>:
  uint32_t id;
  uint32_t dlc;
  uint8_t data[8];

  void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
  {
 80008d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008d2:	b093      	sub	sp, #76	; 0x4c
 80008d4:	af06      	add	r7, sp, #24
 80008d6:	6078      	str	r0, [r7, #4]
	  uint8_t RxData[8];
	  CAN_RxHeaderTypeDef RxHeader;

	  if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 80008d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008dc:	f107 020c 	add.w	r2, r7, #12
 80008e0:	2100      	movs	r1, #0
 80008e2:	6878      	ldr	r0, [r7, #4]
 80008e4:	f000 fd16 	bl	8001314 <HAL_CAN_GetRxMessage>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d14c      	bne.n	8000988 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>
	  {
		  id = (RxHeader.IDE == CAN_ID_STD)? RxHeader.StdId : RxHeader.ExtId;     // ID
 80008ee:	697b      	ldr	r3, [r7, #20]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d101      	bne.n	80008f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	e000      	b.n	80008fa <HAL_CAN_RxFifo0MsgPendingCallback+0x2a>
 80008f8:	693b      	ldr	r3, [r7, #16]
 80008fa:	4a25      	ldr	r2, [pc, #148]	; (8000990 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 80008fc:	6013      	str	r3, [r2, #0]
		  dlc = RxHeader.DLC;                                                     // DLC
 80008fe:	69fb      	ldr	r3, [r7, #28]
 8000900:	4a24      	ldr	r2, [pc, #144]	; (8000994 <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 8000902:	6013      	str	r3, [r2, #0]
		  data[0] = RxData[0];                                                    // Data
 8000904:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8000908:	4b23      	ldr	r3, [pc, #140]	; (8000998 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>)
 800090a:	701a      	strb	r2, [r3, #0]
		  data[1] = RxData[1];
 800090c:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8000910:	4b21      	ldr	r3, [pc, #132]	; (8000998 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>)
 8000912:	705a      	strb	r2, [r3, #1]
		  data[2] = RxData[2];
 8000914:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8000918:	4b1f      	ldr	r3, [pc, #124]	; (8000998 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>)
 800091a:	709a      	strb	r2, [r3, #2]
		  data[3] = RxData[3];
 800091c:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8000920:	4b1d      	ldr	r3, [pc, #116]	; (8000998 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>)
 8000922:	70da      	strb	r2, [r3, #3]
		  data[4] = RxData[4];
 8000924:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8000928:	4b1b      	ldr	r3, [pc, #108]	; (8000998 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>)
 800092a:	711a      	strb	r2, [r3, #4]
		  data[5] = RxData[5];
 800092c:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8000930:	4b19      	ldr	r3, [pc, #100]	; (8000998 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>)
 8000932:	715a      	strb	r2, [r3, #5]
		  data[6] = RxData[6];
 8000934:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8000938:	4b17      	ldr	r3, [pc, #92]	; (8000998 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>)
 800093a:	719a      	strb	r2, [r3, #6]
		  data[7] = RxData[7];
 800093c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8000940:	4b15      	ldr	r3, [pc, #84]	; (8000998 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>)
 8000942:	71da      	strb	r2, [r3, #7]

		  printf("%d,%d,%d,%d,%d,%d,%d,%d\n",data[0],data[1],data[2],data[3],data[4],data[5],data[6],data[7]);
 8000944:	4b14      	ldr	r3, [pc, #80]	; (8000998 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	461d      	mov	r5, r3
 800094a:	4b13      	ldr	r3, [pc, #76]	; (8000998 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>)
 800094c:	785b      	ldrb	r3, [r3, #1]
 800094e:	461e      	mov	r6, r3
 8000950:	4b11      	ldr	r3, [pc, #68]	; (8000998 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>)
 8000952:	789b      	ldrb	r3, [r3, #2]
 8000954:	469c      	mov	ip, r3
 8000956:	4b10      	ldr	r3, [pc, #64]	; (8000998 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>)
 8000958:	78db      	ldrb	r3, [r3, #3]
 800095a:	461a      	mov	r2, r3
 800095c:	4b0e      	ldr	r3, [pc, #56]	; (8000998 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>)
 800095e:	791b      	ldrb	r3, [r3, #4]
 8000960:	4619      	mov	r1, r3
 8000962:	4b0d      	ldr	r3, [pc, #52]	; (8000998 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>)
 8000964:	795b      	ldrb	r3, [r3, #5]
 8000966:	4618      	mov	r0, r3
 8000968:	4b0b      	ldr	r3, [pc, #44]	; (8000998 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>)
 800096a:	799b      	ldrb	r3, [r3, #6]
 800096c:	461c      	mov	r4, r3
 800096e:	4b0a      	ldr	r3, [pc, #40]	; (8000998 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>)
 8000970:	79db      	ldrb	r3, [r3, #7]
 8000972:	9304      	str	r3, [sp, #16]
 8000974:	9403      	str	r4, [sp, #12]
 8000976:	9002      	str	r0, [sp, #8]
 8000978:	9101      	str	r1, [sp, #4]
 800097a:	9200      	str	r2, [sp, #0]
 800097c:	4663      	mov	r3, ip
 800097e:	4632      	mov	r2, r6
 8000980:	4629      	mov	r1, r5
 8000982:	4806      	ldr	r0, [pc, #24]	; (800099c <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 8000984:	f002 fd34 	bl	80033f0 <iprintf>

	  }
  }
 8000988:	bf00      	nop
 800098a:	3734      	adds	r7, #52	; 0x34
 800098c:	46bd      	mov	sp, r7
 800098e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000990:	200000f8 	.word	0x200000f8
 8000994:	200000fc 	.word	0x200000fc
 8000998:	20000100 	.word	0x20000100
 800099c:	080045c4 	.word	0x080045c4

080009a0 <_write>:

  int _write(int file, char *ptr, int len)
  {
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b084      	sub	sp, #16
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	60f8      	str	r0, [r7, #12]
 80009a8:	60b9      	str	r1, [r7, #8]
 80009aa:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2,(uint8_t *)ptr,len,10);
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	b29a      	uxth	r2, r3
 80009b0:	230a      	movs	r3, #10
 80009b2:	68b9      	ldr	r1, [r7, #8]
 80009b4:	4803      	ldr	r0, [pc, #12]	; (80009c4 <_write+0x24>)
 80009b6:	f002 f974 	bl	8002ca2 <HAL_UART_Transmit>
    return len;
 80009ba:	687b      	ldr	r3, [r7, #4]
  }
 80009bc:	4618      	mov	r0, r3
 80009be:	3710      	adds	r7, #16
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	200000b4 	.word	0x200000b4

080009c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009cc:	b672      	cpsid	i
}
 80009ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009d0:	e7fe      	b.n	80009d0 <Error_Handler+0x8>
	...

080009d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	607b      	str	r3, [r7, #4]
 80009de:	4b10      	ldr	r3, [pc, #64]	; (8000a20 <HAL_MspInit+0x4c>)
 80009e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009e2:	4a0f      	ldr	r2, [pc, #60]	; (8000a20 <HAL_MspInit+0x4c>)
 80009e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009e8:	6453      	str	r3, [r2, #68]	; 0x44
 80009ea:	4b0d      	ldr	r3, [pc, #52]	; (8000a20 <HAL_MspInit+0x4c>)
 80009ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009f2:	607b      	str	r3, [r7, #4]
 80009f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	603b      	str	r3, [r7, #0]
 80009fa:	4b09      	ldr	r3, [pc, #36]	; (8000a20 <HAL_MspInit+0x4c>)
 80009fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fe:	4a08      	ldr	r2, [pc, #32]	; (8000a20 <HAL_MspInit+0x4c>)
 8000a00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a04:	6413      	str	r3, [r2, #64]	; 0x40
 8000a06:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <HAL_MspInit+0x4c>)
 8000a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a0e:	603b      	str	r3, [r7, #0]
 8000a10:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a12:	2007      	movs	r0, #7
 8000a14:	f001 f8b6 	bl	8001b84 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a18:	bf00      	nop
 8000a1a:	3708      	adds	r7, #8
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	40023800 	.word	0x40023800

08000a24 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b08a      	sub	sp, #40	; 0x28
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2c:	f107 0314 	add.w	r3, r7, #20
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	605a      	str	r2, [r3, #4]
 8000a36:	609a      	str	r2, [r3, #8]
 8000a38:	60da      	str	r2, [r3, #12]
 8000a3a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN2)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a2c      	ldr	r2, [pc, #176]	; (8000af4 <HAL_CAN_MspInit+0xd0>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d151      	bne.n	8000aea <HAL_CAN_MspInit+0xc6>
  {
  /* USER CODE BEGIN CAN2_MspInit 0 */

  /* USER CODE END CAN2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000a46:	2300      	movs	r3, #0
 8000a48:	613b      	str	r3, [r7, #16]
 8000a4a:	4b2b      	ldr	r3, [pc, #172]	; (8000af8 <HAL_CAN_MspInit+0xd4>)
 8000a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4e:	4a2a      	ldr	r2, [pc, #168]	; (8000af8 <HAL_CAN_MspInit+0xd4>)
 8000a50:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000a54:	6413      	str	r3, [r2, #64]	; 0x40
 8000a56:	4b28      	ldr	r3, [pc, #160]	; (8000af8 <HAL_CAN_MspInit+0xd4>)
 8000a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000a5e:	613b      	str	r3, [r7, #16]
 8000a60:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	60fb      	str	r3, [r7, #12]
 8000a66:	4b24      	ldr	r3, [pc, #144]	; (8000af8 <HAL_CAN_MspInit+0xd4>)
 8000a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6a:	4a23      	ldr	r2, [pc, #140]	; (8000af8 <HAL_CAN_MspInit+0xd4>)
 8000a6c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a70:	6413      	str	r3, [r2, #64]	; 0x40
 8000a72:	4b21      	ldr	r3, [pc, #132]	; (8000af8 <HAL_CAN_MspInit+0xd4>)
 8000a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a7a:	60fb      	str	r3, [r7, #12]
 8000a7c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	60bb      	str	r3, [r7, #8]
 8000a82:	4b1d      	ldr	r3, [pc, #116]	; (8000af8 <HAL_CAN_MspInit+0xd4>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	4a1c      	ldr	r2, [pc, #112]	; (8000af8 <HAL_CAN_MspInit+0xd4>)
 8000a88:	f043 0302 	orr.w	r3, r3, #2
 8000a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8e:	4b1a      	ldr	r3, [pc, #104]	; (8000af8 <HAL_CAN_MspInit+0xd4>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	f003 0302 	and.w	r3, r3, #2
 8000a96:	60bb      	str	r3, [r7, #8]
 8000a98:	68bb      	ldr	r3, [r7, #8]
    /**CAN2 GPIO Configuration
    PB5     ------> CAN2_RX
    PB6     ------> CAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000a9a:	2360      	movs	r3, #96	; 0x60
 8000a9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa6:	2303      	movs	r3, #3
 8000aa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000aaa:	2309      	movs	r3, #9
 8000aac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aae:	f107 0314 	add.w	r3, r7, #20
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4811      	ldr	r0, [pc, #68]	; (8000afc <HAL_CAN_MspInit+0xd8>)
 8000ab6:	f001 f8a7 	bl	8001c08 <HAL_GPIO_Init>

    /* CAN2 interrupt Init */
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 0, 0);
 8000aba:	2200      	movs	r2, #0
 8000abc:	2100      	movs	r1, #0
 8000abe:	203f      	movs	r0, #63	; 0x3f
 8000ac0:	f001 f86b 	bl	8001b9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 8000ac4:	203f      	movs	r0, #63	; 0x3f
 8000ac6:	f001 f884 	bl	8001bd2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 8000aca:	2200      	movs	r2, #0
 8000acc:	2100      	movs	r1, #0
 8000ace:	2040      	movs	r0, #64	; 0x40
 8000ad0:	f001 f863 	bl	8001b9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8000ad4:	2040      	movs	r0, #64	; 0x40
 8000ad6:	f001 f87c 	bl	8001bd2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 8000ada:	2200      	movs	r2, #0
 8000adc:	2100      	movs	r1, #0
 8000ade:	2041      	movs	r0, #65	; 0x41
 8000ae0:	f001 f85b 	bl	8001b9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8000ae4:	2041      	movs	r0, #65	; 0x41
 8000ae6:	f001 f874 	bl	8001bd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8000aea:	bf00      	nop
 8000aec:	3728      	adds	r7, #40	; 0x28
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	40006800 	.word	0x40006800
 8000af8:	40023800 	.word	0x40023800
 8000afc:	40020400 	.word	0x40020400

08000b00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b08a      	sub	sp, #40	; 0x28
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b08:	f107 0314 	add.w	r3, r7, #20
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	609a      	str	r2, [r3, #8]
 8000b14:	60da      	str	r2, [r3, #12]
 8000b16:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a19      	ldr	r2, [pc, #100]	; (8000b84 <HAL_UART_MspInit+0x84>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d12b      	bne.n	8000b7a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	613b      	str	r3, [r7, #16]
 8000b26:	4b18      	ldr	r3, [pc, #96]	; (8000b88 <HAL_UART_MspInit+0x88>)
 8000b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2a:	4a17      	ldr	r2, [pc, #92]	; (8000b88 <HAL_UART_MspInit+0x88>)
 8000b2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b30:	6413      	str	r3, [r2, #64]	; 0x40
 8000b32:	4b15      	ldr	r3, [pc, #84]	; (8000b88 <HAL_UART_MspInit+0x88>)
 8000b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b3a:	613b      	str	r3, [r7, #16]
 8000b3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	60fb      	str	r3, [r7, #12]
 8000b42:	4b11      	ldr	r3, [pc, #68]	; (8000b88 <HAL_UART_MspInit+0x88>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	4a10      	ldr	r2, [pc, #64]	; (8000b88 <HAL_UART_MspInit+0x88>)
 8000b48:	f043 0301 	orr.w	r3, r3, #1
 8000b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4e:	4b0e      	ldr	r3, [pc, #56]	; (8000b88 <HAL_UART_MspInit+0x88>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	f003 0301 	and.w	r3, r3, #1
 8000b56:	60fb      	str	r3, [r7, #12]
 8000b58:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b5a:	230c      	movs	r3, #12
 8000b5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b62:	2300      	movs	r3, #0
 8000b64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b66:	2303      	movs	r3, #3
 8000b68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b6a:	2307      	movs	r3, #7
 8000b6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b6e:	f107 0314 	add.w	r3, r7, #20
 8000b72:	4619      	mov	r1, r3
 8000b74:	4805      	ldr	r0, [pc, #20]	; (8000b8c <HAL_UART_MspInit+0x8c>)
 8000b76:	f001 f847 	bl	8001c08 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b7a:	bf00      	nop
 8000b7c:	3728      	adds	r7, #40	; 0x28
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	40004400 	.word	0x40004400
 8000b88:	40023800 	.word	0x40023800
 8000b8c:	40020000 	.word	0x40020000

08000b90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b94:	e7fe      	b.n	8000b94 <NMI_Handler+0x4>

08000b96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b96:	b480      	push	{r7}
 8000b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b9a:	e7fe      	b.n	8000b9a <HardFault_Handler+0x4>

08000b9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ba0:	e7fe      	b.n	8000ba0 <MemManage_Handler+0x4>

08000ba2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ba6:	e7fe      	b.n	8000ba6 <BusFault_Handler+0x4>

08000ba8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bac:	e7fe      	b.n	8000bac <UsageFault_Handler+0x4>

08000bae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr

08000bbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bc0:	bf00      	nop
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr

08000bca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr

08000bd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bdc:	f000 f936 	bl	8000e4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000be0:	bf00      	nop
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupt.
  */
void CAN2_TX_IRQHandler(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8000be8:	4802      	ldr	r0, [pc, #8]	; (8000bf4 <CAN2_TX_IRQHandler+0x10>)
 8000bea:	f000 fccb 	bl	8001584 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	2000008c 	.word	0x2000008c

08000bf8 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupt.
  */
void CAN2_RX0_IRQHandler(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8000bfc:	4802      	ldr	r0, [pc, #8]	; (8000c08 <CAN2_RX0_IRQHandler+0x10>)
 8000bfe:	f000 fcc1 	bl	8001584 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8000c02:	bf00      	nop
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	2000008c 	.word	0x2000008c

08000c0c <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8000c10:	4802      	ldr	r0, [pc, #8]	; (8000c1c <CAN2_RX1_IRQHandler+0x10>)
 8000c12:	f000 fcb7 	bl	8001584 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8000c16:	bf00      	nop
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	2000008c 	.word	0x2000008c

08000c20 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b086      	sub	sp, #24
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	60f8      	str	r0, [r7, #12]
 8000c28:	60b9      	str	r1, [r7, #8]
 8000c2a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	617b      	str	r3, [r7, #20]
 8000c30:	e00a      	b.n	8000c48 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c32:	f3af 8000 	nop.w
 8000c36:	4601      	mov	r1, r0
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	1c5a      	adds	r2, r3, #1
 8000c3c:	60ba      	str	r2, [r7, #8]
 8000c3e:	b2ca      	uxtb	r2, r1
 8000c40:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c42:	697b      	ldr	r3, [r7, #20]
 8000c44:	3301      	adds	r3, #1
 8000c46:	617b      	str	r3, [r7, #20]
 8000c48:	697a      	ldr	r2, [r7, #20]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	dbf0      	blt.n	8000c32 <_read+0x12>
  }

  return len;
 8000c50:	687b      	ldr	r3, [r7, #4]
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3718      	adds	r7, #24
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}

08000c5a <_close>:
  }
  return len;
}

int _close(int file)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	b083      	sub	sp, #12
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	370c      	adds	r7, #12
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr

08000c72 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c72:	b480      	push	{r7}
 8000c74:	b083      	sub	sp, #12
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	6078      	str	r0, [r7, #4]
 8000c7a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c82:	605a      	str	r2, [r3, #4]
  return 0;
 8000c84:	2300      	movs	r3, #0
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	370c      	adds	r7, #12
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr

08000c92 <_isatty>:

int _isatty(int file)
{
 8000c92:	b480      	push	{r7}
 8000c94:	b083      	sub	sp, #12
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c9a:	2301      	movs	r3, #1
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	370c      	adds	r7, #12
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b085      	sub	sp, #20
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	60f8      	str	r0, [r7, #12]
 8000cb0:	60b9      	str	r1, [r7, #8]
 8000cb2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000cb4:	2300      	movs	r3, #0
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3714      	adds	r7, #20
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
	...

08000cc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b086      	sub	sp, #24
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ccc:	4a14      	ldr	r2, [pc, #80]	; (8000d20 <_sbrk+0x5c>)
 8000cce:	4b15      	ldr	r3, [pc, #84]	; (8000d24 <_sbrk+0x60>)
 8000cd0:	1ad3      	subs	r3, r2, r3
 8000cd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cd8:	4b13      	ldr	r3, [pc, #76]	; (8000d28 <_sbrk+0x64>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d102      	bne.n	8000ce6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ce0:	4b11      	ldr	r3, [pc, #68]	; (8000d28 <_sbrk+0x64>)
 8000ce2:	4a12      	ldr	r2, [pc, #72]	; (8000d2c <_sbrk+0x68>)
 8000ce4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ce6:	4b10      	ldr	r3, [pc, #64]	; (8000d28 <_sbrk+0x64>)
 8000ce8:	681a      	ldr	r2, [r3, #0]
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	4413      	add	r3, r2
 8000cee:	693a      	ldr	r2, [r7, #16]
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	d207      	bcs.n	8000d04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cf4:	f002 fb4a 	bl	800338c <__errno>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	220c      	movs	r2, #12
 8000cfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cfe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d02:	e009      	b.n	8000d18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d04:	4b08      	ldr	r3, [pc, #32]	; (8000d28 <_sbrk+0x64>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d0a:	4b07      	ldr	r3, [pc, #28]	; (8000d28 <_sbrk+0x64>)
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	4413      	add	r3, r2
 8000d12:	4a05      	ldr	r2, [pc, #20]	; (8000d28 <_sbrk+0x64>)
 8000d14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d16:	68fb      	ldr	r3, [r7, #12]
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	3718      	adds	r7, #24
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	20020000 	.word	0x20020000
 8000d24:	00000400 	.word	0x00000400
 8000d28:	20000108 	.word	0x20000108
 8000d2c:	20000120 	.word	0x20000120

08000d30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d34:	4b06      	ldr	r3, [pc, #24]	; (8000d50 <SystemInit+0x20>)
 8000d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d3a:	4a05      	ldr	r2, [pc, #20]	; (8000d50 <SystemInit+0x20>)
 8000d3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d44:	bf00      	nop
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	e000ed00 	.word	0xe000ed00

08000d54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d8c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d58:	480d      	ldr	r0, [pc, #52]	; (8000d90 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d5a:	490e      	ldr	r1, [pc, #56]	; (8000d94 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d5c:	4a0e      	ldr	r2, [pc, #56]	; (8000d98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d60:	e002      	b.n	8000d68 <LoopCopyDataInit>

08000d62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d66:	3304      	adds	r3, #4

08000d68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d6c:	d3f9      	bcc.n	8000d62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d6e:	4a0b      	ldr	r2, [pc, #44]	; (8000d9c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d70:	4c0b      	ldr	r4, [pc, #44]	; (8000da0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d74:	e001      	b.n	8000d7a <LoopFillZerobss>

08000d76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d78:	3204      	adds	r2, #4

08000d7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d7c:	d3fb      	bcc.n	8000d76 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d7e:	f7ff ffd7 	bl	8000d30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d82:	f002 fb09 	bl	8003398 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d86:	f7ff fc15 	bl	80005b4 <main>
  bx  lr    
 8000d8a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d8c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d94:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000d98:	080046a0 	.word	0x080046a0
  ldr r2, =_sbss
 8000d9c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000da0:	20000120 	.word	0x20000120

08000da4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000da4:	e7fe      	b.n	8000da4 <ADC_IRQHandler>
	...

08000da8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dac:	4b0e      	ldr	r3, [pc, #56]	; (8000de8 <HAL_Init+0x40>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a0d      	ldr	r2, [pc, #52]	; (8000de8 <HAL_Init+0x40>)
 8000db2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000db6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000db8:	4b0b      	ldr	r3, [pc, #44]	; (8000de8 <HAL_Init+0x40>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a0a      	ldr	r2, [pc, #40]	; (8000de8 <HAL_Init+0x40>)
 8000dbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dc2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dc4:	4b08      	ldr	r3, [pc, #32]	; (8000de8 <HAL_Init+0x40>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a07      	ldr	r2, [pc, #28]	; (8000de8 <HAL_Init+0x40>)
 8000dca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dd0:	2003      	movs	r0, #3
 8000dd2:	f000 fed7 	bl	8001b84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dd6:	2000      	movs	r0, #0
 8000dd8:	f000 f808 	bl	8000dec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ddc:	f7ff fdfa 	bl	80009d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000de0:	2300      	movs	r3, #0
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	40023c00 	.word	0x40023c00

08000dec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000df4:	4b12      	ldr	r3, [pc, #72]	; (8000e40 <HAL_InitTick+0x54>)
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	4b12      	ldr	r3, [pc, #72]	; (8000e44 <HAL_InitTick+0x58>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e02:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f000 feef 	bl	8001bee <HAL_SYSTICK_Config>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e16:	2301      	movs	r3, #1
 8000e18:	e00e      	b.n	8000e38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2b0f      	cmp	r3, #15
 8000e1e:	d80a      	bhi.n	8000e36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e20:	2200      	movs	r2, #0
 8000e22:	6879      	ldr	r1, [r7, #4]
 8000e24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e28:	f000 feb7 	bl	8001b9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e2c:	4a06      	ldr	r2, [pc, #24]	; (8000e48 <HAL_InitTick+0x5c>)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e32:	2300      	movs	r3, #0
 8000e34:	e000      	b.n	8000e38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e36:	2301      	movs	r3, #1
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	3708      	adds	r7, #8
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	20000000 	.word	0x20000000
 8000e44:	20000008 	.word	0x20000008
 8000e48:	20000004 	.word	0x20000004

08000e4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e50:	4b06      	ldr	r3, [pc, #24]	; (8000e6c <HAL_IncTick+0x20>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	461a      	mov	r2, r3
 8000e56:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <HAL_IncTick+0x24>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4413      	add	r3, r2
 8000e5c:	4a04      	ldr	r2, [pc, #16]	; (8000e70 <HAL_IncTick+0x24>)
 8000e5e:	6013      	str	r3, [r2, #0]
}
 8000e60:	bf00      	nop
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	20000008 	.word	0x20000008
 8000e70:	2000010c 	.word	0x2000010c

08000e74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  return uwTick;
 8000e78:	4b03      	ldr	r3, [pc, #12]	; (8000e88 <HAL_GetTick+0x14>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	2000010c 	.word	0x2000010c

08000e8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b084      	sub	sp, #16
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e94:	f7ff ffee 	bl	8000e74 <HAL_GetTick>
 8000e98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ea4:	d005      	beq.n	8000eb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ea6:	4b0a      	ldr	r3, [pc, #40]	; (8000ed0 <HAL_Delay+0x44>)
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	461a      	mov	r2, r3
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	4413      	add	r3, r2
 8000eb0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000eb2:	bf00      	nop
 8000eb4:	f7ff ffde 	bl	8000e74 <HAL_GetTick>
 8000eb8:	4602      	mov	r2, r0
 8000eba:	68bb      	ldr	r3, [r7, #8]
 8000ebc:	1ad3      	subs	r3, r2, r3
 8000ebe:	68fa      	ldr	r2, [r7, #12]
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	d8f7      	bhi.n	8000eb4 <HAL_Delay+0x28>
  {
  }
}
 8000ec4:	bf00      	nop
 8000ec6:	bf00      	nop
 8000ec8:	3710      	adds	r7, #16
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	20000008 	.word	0x20000008

08000ed4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d101      	bne.n	8000ee6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	e0ed      	b.n	80010c2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d102      	bne.n	8000ef8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000ef2:	6878      	ldr	r0, [r7, #4]
 8000ef4:	f7ff fd96 	bl	8000a24 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f042 0201 	orr.w	r2, r2, #1
 8000f06:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f08:	f7ff ffb4 	bl	8000e74 <HAL_GetTick>
 8000f0c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000f0e:	e012      	b.n	8000f36 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f10:	f7ff ffb0 	bl	8000e74 <HAL_GetTick>
 8000f14:	4602      	mov	r2, r0
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	1ad3      	subs	r3, r2, r3
 8000f1a:	2b0a      	cmp	r3, #10
 8000f1c:	d90b      	bls.n	8000f36 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f22:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2205      	movs	r2, #5
 8000f2e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000f32:	2301      	movs	r3, #1
 8000f34:	e0c5      	b.n	80010c2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	f003 0301 	and.w	r3, r3, #1
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d0e5      	beq.n	8000f10 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f022 0202 	bic.w	r2, r2, #2
 8000f52:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f54:	f7ff ff8e 	bl	8000e74 <HAL_GetTick>
 8000f58:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000f5a:	e012      	b.n	8000f82 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f5c:	f7ff ff8a 	bl	8000e74 <HAL_GetTick>
 8000f60:	4602      	mov	r2, r0
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	1ad3      	subs	r3, r2, r3
 8000f66:	2b0a      	cmp	r3, #10
 8000f68:	d90b      	bls.n	8000f82 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f6e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2205      	movs	r2, #5
 8000f7a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e09f      	b.n	80010c2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f003 0302 	and.w	r3, r3, #2
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d1e5      	bne.n	8000f5c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	7e1b      	ldrb	r3, [r3, #24]
 8000f94:	2b01      	cmp	r3, #1
 8000f96:	d108      	bne.n	8000faa <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	e007      	b.n	8000fba <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000fb8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	7e5b      	ldrb	r3, [r3, #25]
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d108      	bne.n	8000fd4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000fd0:	601a      	str	r2, [r3, #0]
 8000fd2:	e007      	b.n	8000fe4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000fe2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	7e9b      	ldrb	r3, [r3, #26]
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	d108      	bne.n	8000ffe <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f042 0220 	orr.w	r2, r2, #32
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	e007      	b.n	800100e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f022 0220 	bic.w	r2, r2, #32
 800100c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	7edb      	ldrb	r3, [r3, #27]
 8001012:	2b01      	cmp	r3, #1
 8001014:	d108      	bne.n	8001028 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f022 0210 	bic.w	r2, r2, #16
 8001024:	601a      	str	r2, [r3, #0]
 8001026:	e007      	b.n	8001038 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f042 0210 	orr.w	r2, r2, #16
 8001036:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	7f1b      	ldrb	r3, [r3, #28]
 800103c:	2b01      	cmp	r3, #1
 800103e:	d108      	bne.n	8001052 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f042 0208 	orr.w	r2, r2, #8
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	e007      	b.n	8001062 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f022 0208 	bic.w	r2, r2, #8
 8001060:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	7f5b      	ldrb	r3, [r3, #29]
 8001066:	2b01      	cmp	r3, #1
 8001068:	d108      	bne.n	800107c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f042 0204 	orr.w	r2, r2, #4
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	e007      	b.n	800108c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f022 0204 	bic.w	r2, r2, #4
 800108a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	689a      	ldr	r2, [r3, #8]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	431a      	orrs	r2, r3
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	691b      	ldr	r3, [r3, #16]
 800109a:	431a      	orrs	r2, r3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	695b      	ldr	r3, [r3, #20]
 80010a0:	ea42 0103 	orr.w	r1, r2, r3
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	1e5a      	subs	r2, r3, #1
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	430a      	orrs	r2, r1
 80010b0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2200      	movs	r2, #0
 80010b6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2201      	movs	r2, #1
 80010bc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80010c0:	2300      	movs	r3, #0
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3710      	adds	r7, #16
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
	...

080010cc <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b087      	sub	sp, #28
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010e2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80010e4:	7cfb      	ldrb	r3, [r7, #19]
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d003      	beq.n	80010f2 <HAL_CAN_ConfigFilter+0x26>
 80010ea:	7cfb      	ldrb	r3, [r7, #19]
 80010ec:	2b02      	cmp	r3, #2
 80010ee:	f040 80be 	bne.w	800126e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80010f2:	4b65      	ldr	r3, [pc, #404]	; (8001288 <HAL_CAN_ConfigFilter+0x1bc>)
 80010f4:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80010fc:	f043 0201 	orr.w	r2, r3, #1
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800110c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001120:	021b      	lsls	r3, r3, #8
 8001122:	431a      	orrs	r2, r3
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	695b      	ldr	r3, [r3, #20]
 800112e:	f003 031f 	and.w	r3, r3, #31
 8001132:	2201      	movs	r2, #1
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	43db      	mvns	r3, r3
 8001144:	401a      	ands	r2, r3
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	69db      	ldr	r3, [r3, #28]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d123      	bne.n	800119c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	43db      	mvns	r3, r3
 800115e:	401a      	ands	r2, r3
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	68db      	ldr	r3, [r3, #12]
 800116a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001172:	683a      	ldr	r2, [r7, #0]
 8001174:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001176:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	3248      	adds	r2, #72	; 0x48
 800117c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	689b      	ldr	r3, [r3, #8]
 8001184:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001190:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001192:	6979      	ldr	r1, [r7, #20]
 8001194:	3348      	adds	r3, #72	; 0x48
 8001196:	00db      	lsls	r3, r3, #3
 8001198:	440b      	add	r3, r1
 800119a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	69db      	ldr	r3, [r3, #28]
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d122      	bne.n	80011ea <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	431a      	orrs	r2, r3
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80011c0:	683a      	ldr	r2, [r7, #0]
 80011c2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80011c4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	3248      	adds	r2, #72	; 0x48
 80011ca:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80011de:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80011e0:	6979      	ldr	r1, [r7, #20]
 80011e2:	3348      	adds	r3, #72	; 0x48
 80011e4:	00db      	lsls	r3, r3, #3
 80011e6:	440b      	add	r3, r1
 80011e8:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	699b      	ldr	r3, [r3, #24]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d109      	bne.n	8001206 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	43db      	mvns	r3, r3
 80011fc:	401a      	ands	r2, r3
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001204:	e007      	b.n	8001216 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	431a      	orrs	r2, r3
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	691b      	ldr	r3, [r3, #16]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d109      	bne.n	8001232 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	43db      	mvns	r3, r3
 8001228:	401a      	ands	r2, r3
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001230:	e007      	b.n	8001242 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	431a      	orrs	r2, r3
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	6a1b      	ldr	r3, [r3, #32]
 8001246:	2b01      	cmp	r3, #1
 8001248:	d107      	bne.n	800125a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	431a      	orrs	r2, r3
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001260:	f023 0201 	bic.w	r2, r3, #1
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800126a:	2300      	movs	r3, #0
 800126c:	e006      	b.n	800127c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001272:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
  }
}
 800127c:	4618      	mov	r0, r3
 800127e:	371c      	adds	r7, #28
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr
 8001288:	40006400 	.word	0x40006400

0800128c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	f893 3020 	ldrb.w	r3, [r3, #32]
 800129a:	b2db      	uxtb	r3, r3
 800129c:	2b01      	cmp	r3, #1
 800129e:	d12e      	bne.n	80012fe <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2202      	movs	r2, #2
 80012a4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f022 0201 	bic.w	r2, r2, #1
 80012b6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80012b8:	f7ff fddc 	bl	8000e74 <HAL_GetTick>
 80012bc:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80012be:	e012      	b.n	80012e6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80012c0:	f7ff fdd8 	bl	8000e74 <HAL_GetTick>
 80012c4:	4602      	mov	r2, r0
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	2b0a      	cmp	r3, #10
 80012cc:	d90b      	bls.n	80012e6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2205      	movs	r2, #5
 80012de:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e012      	b.n	800130c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f003 0301 	and.w	r3, r3, #1
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d1e5      	bne.n	80012c0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2200      	movs	r2, #0
 80012f8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80012fa:	2300      	movs	r3, #0
 80012fc:	e006      	b.n	800130c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001302:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
  }
}
 800130c:	4618      	mov	r0, r3
 800130e:	3710      	adds	r7, #16
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}

08001314 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001314:	b480      	push	{r7}
 8001316:	b087      	sub	sp, #28
 8001318:	af00      	add	r7, sp, #0
 800131a:	60f8      	str	r0, [r7, #12]
 800131c:	60b9      	str	r1, [r7, #8]
 800131e:	607a      	str	r2, [r7, #4]
 8001320:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001328:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800132a:	7dfb      	ldrb	r3, [r7, #23]
 800132c:	2b01      	cmp	r3, #1
 800132e:	d003      	beq.n	8001338 <HAL_CAN_GetRxMessage+0x24>
 8001330:	7dfb      	ldrb	r3, [r7, #23]
 8001332:	2b02      	cmp	r3, #2
 8001334:	f040 80f3 	bne.w	800151e <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d10e      	bne.n	800135c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	f003 0303 	and.w	r3, r3, #3
 8001348:	2b00      	cmp	r3, #0
 800134a:	d116      	bne.n	800137a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001350:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	e0e7      	b.n	800152c <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	691b      	ldr	r3, [r3, #16]
 8001362:	f003 0303 	and.w	r3, r3, #3
 8001366:	2b00      	cmp	r3, #0
 8001368:	d107      	bne.n	800137a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800136e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	e0d8      	b.n	800152c <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	68bb      	ldr	r3, [r7, #8]
 8001380:	331b      	adds	r3, #27
 8001382:	011b      	lsls	r3, r3, #4
 8001384:	4413      	add	r3, r2
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f003 0204 	and.w	r2, r3, #4
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	689b      	ldr	r3, [r3, #8]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d10c      	bne.n	80013b2 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	331b      	adds	r3, #27
 80013a0:	011b      	lsls	r3, r3, #4
 80013a2:	4413      	add	r3, r2
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	0d5b      	lsrs	r3, r3, #21
 80013a8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	e00b      	b.n	80013ca <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	68bb      	ldr	r3, [r7, #8]
 80013b8:	331b      	adds	r3, #27
 80013ba:	011b      	lsls	r3, r3, #4
 80013bc:	4413      	add	r3, r2
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	08db      	lsrs	r3, r3, #3
 80013c2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	331b      	adds	r3, #27
 80013d2:	011b      	lsls	r3, r3, #4
 80013d4:	4413      	add	r3, r2
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f003 0202 	and.w	r2, r3, #2
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	331b      	adds	r3, #27
 80013e8:	011b      	lsls	r3, r3, #4
 80013ea:	4413      	add	r3, r2
 80013ec:	3304      	adds	r3, #4
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f003 020f 	and.w	r2, r3, #15
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	331b      	adds	r3, #27
 8001400:	011b      	lsls	r3, r3, #4
 8001402:	4413      	add	r3, r2
 8001404:	3304      	adds	r3, #4
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	0a1b      	lsrs	r3, r3, #8
 800140a:	b2da      	uxtb	r2, r3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	331b      	adds	r3, #27
 8001418:	011b      	lsls	r3, r3, #4
 800141a:	4413      	add	r3, r2
 800141c:	3304      	adds	r3, #4
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	0c1b      	lsrs	r3, r3, #16
 8001422:	b29a      	uxth	r2, r3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	011b      	lsls	r3, r3, #4
 8001430:	4413      	add	r3, r2
 8001432:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	b2da      	uxtb	r2, r3
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	011b      	lsls	r3, r3, #4
 8001446:	4413      	add	r3, r2
 8001448:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	0a1a      	lsrs	r2, r3, #8
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	3301      	adds	r3, #1
 8001454:	b2d2      	uxtb	r2, r2
 8001456:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	011b      	lsls	r3, r3, #4
 8001460:	4413      	add	r3, r2
 8001462:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	0c1a      	lsrs	r2, r3, #16
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	3302      	adds	r3, #2
 800146e:	b2d2      	uxtb	r2, r2
 8001470:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	011b      	lsls	r3, r3, #4
 800147a:	4413      	add	r3, r2
 800147c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	0e1a      	lsrs	r2, r3, #24
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	3303      	adds	r3, #3
 8001488:	b2d2      	uxtb	r2, r2
 800148a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	011b      	lsls	r3, r3, #4
 8001494:	4413      	add	r3, r2
 8001496:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	3304      	adds	r3, #4
 80014a0:	b2d2      	uxtb	r2, r2
 80014a2:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	011b      	lsls	r3, r3, #4
 80014ac:	4413      	add	r3, r2
 80014ae:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	0a1a      	lsrs	r2, r3, #8
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	3305      	adds	r3, #5
 80014ba:	b2d2      	uxtb	r2, r2
 80014bc:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	011b      	lsls	r3, r3, #4
 80014c6:	4413      	add	r3, r2
 80014c8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	0c1a      	lsrs	r2, r3, #16
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	3306      	adds	r3, #6
 80014d4:	b2d2      	uxtb	r2, r2
 80014d6:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	011b      	lsls	r3, r3, #4
 80014e0:	4413      	add	r3, r2
 80014e2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	0e1a      	lsrs	r2, r3, #24
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	3307      	adds	r3, #7
 80014ee:	b2d2      	uxtb	r2, r2
 80014f0:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80014f2:	68bb      	ldr	r3, [r7, #8]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d108      	bne.n	800150a <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	68da      	ldr	r2, [r3, #12]
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f042 0220 	orr.w	r2, r2, #32
 8001506:	60da      	str	r2, [r3, #12]
 8001508:	e007      	b.n	800151a <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	691a      	ldr	r2, [r3, #16]
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f042 0220 	orr.w	r2, r2, #32
 8001518:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800151a:	2300      	movs	r3, #0
 800151c:	e006      	b.n	800152c <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001522:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
  }
}
 800152c:	4618      	mov	r0, r3
 800152e:	371c      	adds	r7, #28
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001538:	b480      	push	{r7}
 800153a:	b085      	sub	sp, #20
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001548:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800154a:	7bfb      	ldrb	r3, [r7, #15]
 800154c:	2b01      	cmp	r3, #1
 800154e:	d002      	beq.n	8001556 <HAL_CAN_ActivateNotification+0x1e>
 8001550:	7bfb      	ldrb	r3, [r7, #15]
 8001552:	2b02      	cmp	r3, #2
 8001554:	d109      	bne.n	800156a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	6959      	ldr	r1, [r3, #20]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	683a      	ldr	r2, [r7, #0]
 8001562:	430a      	orrs	r2, r1
 8001564:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001566:	2300      	movs	r3, #0
 8001568:	e006      	b.n	8001578 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800156e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
  }
}
 8001578:	4618      	mov	r0, r3
 800157a:	3714      	adds	r7, #20
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr

08001584 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b08a      	sub	sp, #40	; 0x28
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800158c:	2300      	movs	r3, #0
 800158e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	695b      	ldr	r3, [r3, #20]
 8001596:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	68db      	ldr	r3, [r3, #12]
 80015ae:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	691b      	ldr	r3, [r3, #16]
 80015b6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	699b      	ldr	r3, [r3, #24]
 80015be:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80015c0:	6a3b      	ldr	r3, [r7, #32]
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d07c      	beq.n	80016c4 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80015ca:	69bb      	ldr	r3, [r7, #24]
 80015cc:	f003 0301 	and.w	r3, r3, #1
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d023      	beq.n	800161c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	2201      	movs	r2, #1
 80015da:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80015dc:	69bb      	ldr	r3, [r7, #24]
 80015de:	f003 0302 	and.w	r3, r3, #2
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d003      	beq.n	80015ee <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f000 f983 	bl	80018f2 <HAL_CAN_TxMailbox0CompleteCallback>
 80015ec:	e016      	b.n	800161c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80015ee:	69bb      	ldr	r3, [r7, #24]
 80015f0:	f003 0304 	and.w	r3, r3, #4
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d004      	beq.n	8001602 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80015f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80015fe:	627b      	str	r3, [r7, #36]	; 0x24
 8001600:	e00c      	b.n	800161c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001602:	69bb      	ldr	r3, [r7, #24]
 8001604:	f003 0308 	and.w	r3, r3, #8
 8001608:	2b00      	cmp	r3, #0
 800160a:	d004      	beq.n	8001616 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800160c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001612:	627b      	str	r3, [r7, #36]	; 0x24
 8001614:	e002      	b.n	800161c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f000 f989 	bl	800192e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800161c:	69bb      	ldr	r3, [r7, #24]
 800161e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001622:	2b00      	cmp	r3, #0
 8001624:	d024      	beq.n	8001670 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800162e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001630:	69bb      	ldr	r3, [r7, #24]
 8001632:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001636:	2b00      	cmp	r3, #0
 8001638:	d003      	beq.n	8001642 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f000 f963 	bl	8001906 <HAL_CAN_TxMailbox1CompleteCallback>
 8001640:	e016      	b.n	8001670 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001642:	69bb      	ldr	r3, [r7, #24]
 8001644:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001648:	2b00      	cmp	r3, #0
 800164a:	d004      	beq.n	8001656 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800164c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001652:	627b      	str	r3, [r7, #36]	; 0x24
 8001654:	e00c      	b.n	8001670 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001656:	69bb      	ldr	r3, [r7, #24]
 8001658:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800165c:	2b00      	cmp	r3, #0
 800165e:	d004      	beq.n	800166a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001662:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001666:	627b      	str	r3, [r7, #36]	; 0x24
 8001668:	e002      	b.n	8001670 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f000 f969 	bl	8001942 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001670:	69bb      	ldr	r3, [r7, #24]
 8001672:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d024      	beq.n	80016c4 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001682:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d003      	beq.n	8001696 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f000 f943 	bl	800191a <HAL_CAN_TxMailbox2CompleteCallback>
 8001694:	e016      	b.n	80016c4 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001696:	69bb      	ldr	r3, [r7, #24]
 8001698:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800169c:	2b00      	cmp	r3, #0
 800169e:	d004      	beq.n	80016aa <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80016a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016a6:	627b      	str	r3, [r7, #36]	; 0x24
 80016a8:	e00c      	b.n	80016c4 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80016aa:	69bb      	ldr	r3, [r7, #24]
 80016ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d004      	beq.n	80016be <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80016b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016ba:	627b      	str	r3, [r7, #36]	; 0x24
 80016bc:	e002      	b.n	80016c4 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f000 f949 	bl	8001956 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80016c4:	6a3b      	ldr	r3, [r7, #32]
 80016c6:	f003 0308 	and.w	r3, r3, #8
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d00c      	beq.n	80016e8 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	f003 0310 	and.w	r3, r3, #16
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d007      	beq.n	80016e8 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80016d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016de:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	2210      	movs	r2, #16
 80016e6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80016e8:	6a3b      	ldr	r3, [r7, #32]
 80016ea:	f003 0304 	and.w	r3, r3, #4
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d00b      	beq.n	800170a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	f003 0308 	and.w	r3, r3, #8
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d006      	beq.n	800170a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	2208      	movs	r2, #8
 8001702:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f000 f930 	bl	800196a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800170a:	6a3b      	ldr	r3, [r7, #32]
 800170c:	f003 0302 	and.w	r3, r3, #2
 8001710:	2b00      	cmp	r3, #0
 8001712:	d009      	beq.n	8001728 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	68db      	ldr	r3, [r3, #12]
 800171a:	f003 0303 	and.w	r3, r3, #3
 800171e:	2b00      	cmp	r3, #0
 8001720:	d002      	beq.n	8001728 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f7ff f8d4 	bl	80008d0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001728:	6a3b      	ldr	r3, [r7, #32]
 800172a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800172e:	2b00      	cmp	r3, #0
 8001730:	d00c      	beq.n	800174c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	f003 0310 	and.w	r3, r3, #16
 8001738:	2b00      	cmp	r3, #0
 800173a:	d007      	beq.n	800174c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800173c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001742:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	2210      	movs	r2, #16
 800174a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800174c:	6a3b      	ldr	r3, [r7, #32]
 800174e:	f003 0320 	and.w	r3, r3, #32
 8001752:	2b00      	cmp	r3, #0
 8001754:	d00b      	beq.n	800176e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	f003 0308 	and.w	r3, r3, #8
 800175c:	2b00      	cmp	r3, #0
 800175e:	d006      	beq.n	800176e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2208      	movs	r2, #8
 8001766:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f000 f912 	bl	8001992 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800176e:	6a3b      	ldr	r3, [r7, #32]
 8001770:	f003 0310 	and.w	r3, r3, #16
 8001774:	2b00      	cmp	r3, #0
 8001776:	d009      	beq.n	800178c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	691b      	ldr	r3, [r3, #16]
 800177e:	f003 0303 	and.w	r3, r3, #3
 8001782:	2b00      	cmp	r3, #0
 8001784:	d002      	beq.n	800178c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f000 f8f9 	bl	800197e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800178c:	6a3b      	ldr	r3, [r7, #32]
 800178e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d00b      	beq.n	80017ae <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	f003 0310 	and.w	r3, r3, #16
 800179c:	2b00      	cmp	r3, #0
 800179e:	d006      	beq.n	80017ae <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	2210      	movs	r2, #16
 80017a6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f000 f8fc 	bl	80019a6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80017ae:	6a3b      	ldr	r3, [r7, #32]
 80017b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d00b      	beq.n	80017d0 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	f003 0308 	and.w	r3, r3, #8
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d006      	beq.n	80017d0 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	2208      	movs	r2, #8
 80017c8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f000 f8f5 	bl	80019ba <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80017d0:	6a3b      	ldr	r3, [r7, #32]
 80017d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d07b      	beq.n	80018d2 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	f003 0304 	and.w	r3, r3, #4
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d072      	beq.n	80018ca <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80017e4:	6a3b      	ldr	r3, [r7, #32]
 80017e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d008      	beq.n	8001800 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d003      	beq.n	8001800 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80017f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fa:	f043 0301 	orr.w	r3, r3, #1
 80017fe:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001800:	6a3b      	ldr	r3, [r7, #32]
 8001802:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001806:	2b00      	cmp	r3, #0
 8001808:	d008      	beq.n	800181c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001810:	2b00      	cmp	r3, #0
 8001812:	d003      	beq.n	800181c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001816:	f043 0302 	orr.w	r3, r3, #2
 800181a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800181c:	6a3b      	ldr	r3, [r7, #32]
 800181e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001822:	2b00      	cmp	r3, #0
 8001824:	d008      	beq.n	8001838 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800182c:	2b00      	cmp	r3, #0
 800182e:	d003      	beq.n	8001838 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001832:	f043 0304 	orr.w	r3, r3, #4
 8001836:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001838:	6a3b      	ldr	r3, [r7, #32]
 800183a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800183e:	2b00      	cmp	r3, #0
 8001840:	d043      	beq.n	80018ca <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001848:	2b00      	cmp	r3, #0
 800184a:	d03e      	beq.n	80018ca <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001852:	2b60      	cmp	r3, #96	; 0x60
 8001854:	d02b      	beq.n	80018ae <HAL_CAN_IRQHandler+0x32a>
 8001856:	2b60      	cmp	r3, #96	; 0x60
 8001858:	d82e      	bhi.n	80018b8 <HAL_CAN_IRQHandler+0x334>
 800185a:	2b50      	cmp	r3, #80	; 0x50
 800185c:	d022      	beq.n	80018a4 <HAL_CAN_IRQHandler+0x320>
 800185e:	2b50      	cmp	r3, #80	; 0x50
 8001860:	d82a      	bhi.n	80018b8 <HAL_CAN_IRQHandler+0x334>
 8001862:	2b40      	cmp	r3, #64	; 0x40
 8001864:	d019      	beq.n	800189a <HAL_CAN_IRQHandler+0x316>
 8001866:	2b40      	cmp	r3, #64	; 0x40
 8001868:	d826      	bhi.n	80018b8 <HAL_CAN_IRQHandler+0x334>
 800186a:	2b30      	cmp	r3, #48	; 0x30
 800186c:	d010      	beq.n	8001890 <HAL_CAN_IRQHandler+0x30c>
 800186e:	2b30      	cmp	r3, #48	; 0x30
 8001870:	d822      	bhi.n	80018b8 <HAL_CAN_IRQHandler+0x334>
 8001872:	2b10      	cmp	r3, #16
 8001874:	d002      	beq.n	800187c <HAL_CAN_IRQHandler+0x2f8>
 8001876:	2b20      	cmp	r3, #32
 8001878:	d005      	beq.n	8001886 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800187a:	e01d      	b.n	80018b8 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800187c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187e:	f043 0308 	orr.w	r3, r3, #8
 8001882:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001884:	e019      	b.n	80018ba <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001888:	f043 0310 	orr.w	r3, r3, #16
 800188c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800188e:	e014      	b.n	80018ba <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001892:	f043 0320 	orr.w	r3, r3, #32
 8001896:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001898:	e00f      	b.n	80018ba <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800189a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018a0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80018a2:	e00a      	b.n	80018ba <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80018a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018aa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80018ac:	e005      	b.n	80018ba <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80018ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018b4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80018b6:	e000      	b.n	80018ba <HAL_CAN_IRQHandler+0x336>
            break;
 80018b8:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	699a      	ldr	r2, [r3, #24]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80018c8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	2204      	movs	r2, #4
 80018d0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80018d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d008      	beq.n	80018ea <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018de:	431a      	orrs	r2, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	f000 f872 	bl	80019ce <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80018ea:	bf00      	nop
 80018ec:	3728      	adds	r7, #40	; 0x28
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80018f2:	b480      	push	{r7}
 80018f4:	b083      	sub	sp, #12
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80018fa:	bf00      	nop
 80018fc:	370c      	adds	r7, #12
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr

08001906 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001906:	b480      	push	{r7}
 8001908:	b083      	sub	sp, #12
 800190a:	af00      	add	r7, sp, #0
 800190c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800190e:	bf00      	nop
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr

0800191a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800191a:	b480      	push	{r7}
 800191c:	b083      	sub	sp, #12
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001922:	bf00      	nop
 8001924:	370c      	adds	r7, #12
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr

0800192e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800192e:	b480      	push	{r7}
 8001930:	b083      	sub	sp, #12
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001936:	bf00      	nop
 8001938:	370c      	adds	r7, #12
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr

08001942 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001942:	b480      	push	{r7}
 8001944:	b083      	sub	sp, #12
 8001946:	af00      	add	r7, sp, #0
 8001948:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800194a:	bf00      	nop
 800194c:	370c      	adds	r7, #12
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr

08001956 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001956:	b480      	push	{r7}
 8001958:	b083      	sub	sp, #12
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800195e:	bf00      	nop
 8001960:	370c      	adds	r7, #12
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr

0800196a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800196a:	b480      	push	{r7}
 800196c:	b083      	sub	sp, #12
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001972:	bf00      	nop
 8001974:	370c      	adds	r7, #12
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr

0800197e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800197e:	b480      	push	{r7}
 8001980:	b083      	sub	sp, #12
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001986:	bf00      	nop
 8001988:	370c      	adds	r7, #12
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr

08001992 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001992:	b480      	push	{r7}
 8001994:	b083      	sub	sp, #12
 8001996:	af00      	add	r7, sp, #0
 8001998:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800199a:	bf00      	nop
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr

080019a6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80019a6:	b480      	push	{r7}
 80019a8:	b083      	sub	sp, #12
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80019ae:	bf00      	nop
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr

080019ba <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80019ba:	b480      	push	{r7}
 80019bc:	b083      	sub	sp, #12
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80019c2:	bf00      	nop
 80019c4:	370c      	adds	r7, #12
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr

080019ce <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80019ce:	b480      	push	{r7}
 80019d0:	b083      	sub	sp, #12
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80019d6:	bf00      	nop
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
	...

080019e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b085      	sub	sp, #20
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	f003 0307 	and.w	r3, r3, #7
 80019f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019f4:	4b0c      	ldr	r3, [pc, #48]	; (8001a28 <__NVIC_SetPriorityGrouping+0x44>)
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019fa:	68ba      	ldr	r2, [r7, #8]
 80019fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a00:	4013      	ands	r3, r2
 8001a02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a16:	4a04      	ldr	r2, [pc, #16]	; (8001a28 <__NVIC_SetPriorityGrouping+0x44>)
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	60d3      	str	r3, [r2, #12]
}
 8001a1c:	bf00      	nop
 8001a1e:	3714      	adds	r7, #20
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr
 8001a28:	e000ed00 	.word	0xe000ed00

08001a2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a30:	4b04      	ldr	r3, [pc, #16]	; (8001a44 <__NVIC_GetPriorityGrouping+0x18>)
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	0a1b      	lsrs	r3, r3, #8
 8001a36:	f003 0307 	and.w	r3, r3, #7
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr
 8001a44:	e000ed00 	.word	0xe000ed00

08001a48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	4603      	mov	r3, r0
 8001a50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	db0b      	blt.n	8001a72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a5a:	79fb      	ldrb	r3, [r7, #7]
 8001a5c:	f003 021f 	and.w	r2, r3, #31
 8001a60:	4907      	ldr	r1, [pc, #28]	; (8001a80 <__NVIC_EnableIRQ+0x38>)
 8001a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a66:	095b      	lsrs	r3, r3, #5
 8001a68:	2001      	movs	r0, #1
 8001a6a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a72:	bf00      	nop
 8001a74:	370c      	adds	r7, #12
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	e000e100 	.word	0xe000e100

08001a84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	6039      	str	r1, [r7, #0]
 8001a8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	db0a      	blt.n	8001aae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	b2da      	uxtb	r2, r3
 8001a9c:	490c      	ldr	r1, [pc, #48]	; (8001ad0 <__NVIC_SetPriority+0x4c>)
 8001a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa2:	0112      	lsls	r2, r2, #4
 8001aa4:	b2d2      	uxtb	r2, r2
 8001aa6:	440b      	add	r3, r1
 8001aa8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001aac:	e00a      	b.n	8001ac4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	b2da      	uxtb	r2, r3
 8001ab2:	4908      	ldr	r1, [pc, #32]	; (8001ad4 <__NVIC_SetPriority+0x50>)
 8001ab4:	79fb      	ldrb	r3, [r7, #7]
 8001ab6:	f003 030f 	and.w	r3, r3, #15
 8001aba:	3b04      	subs	r3, #4
 8001abc:	0112      	lsls	r2, r2, #4
 8001abe:	b2d2      	uxtb	r2, r2
 8001ac0:	440b      	add	r3, r1
 8001ac2:	761a      	strb	r2, [r3, #24]
}
 8001ac4:	bf00      	nop
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr
 8001ad0:	e000e100 	.word	0xe000e100
 8001ad4:	e000ed00 	.word	0xe000ed00

08001ad8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b089      	sub	sp, #36	; 0x24
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	60f8      	str	r0, [r7, #12]
 8001ae0:	60b9      	str	r1, [r7, #8]
 8001ae2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	f003 0307 	and.w	r3, r3, #7
 8001aea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	f1c3 0307 	rsb	r3, r3, #7
 8001af2:	2b04      	cmp	r3, #4
 8001af4:	bf28      	it	cs
 8001af6:	2304      	movcs	r3, #4
 8001af8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	3304      	adds	r3, #4
 8001afe:	2b06      	cmp	r3, #6
 8001b00:	d902      	bls.n	8001b08 <NVIC_EncodePriority+0x30>
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	3b03      	subs	r3, #3
 8001b06:	e000      	b.n	8001b0a <NVIC_EncodePriority+0x32>
 8001b08:	2300      	movs	r3, #0
 8001b0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	fa02 f303 	lsl.w	r3, r2, r3
 8001b16:	43da      	mvns	r2, r3
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	401a      	ands	r2, r3
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b20:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	fa01 f303 	lsl.w	r3, r1, r3
 8001b2a:	43d9      	mvns	r1, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b30:	4313      	orrs	r3, r2
         );
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3724      	adds	r7, #36	; 0x24
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
	...

08001b40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	3b01      	subs	r3, #1
 8001b4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b50:	d301      	bcc.n	8001b56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b52:	2301      	movs	r3, #1
 8001b54:	e00f      	b.n	8001b76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b56:	4a0a      	ldr	r2, [pc, #40]	; (8001b80 <SysTick_Config+0x40>)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	3b01      	subs	r3, #1
 8001b5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b5e:	210f      	movs	r1, #15
 8001b60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b64:	f7ff ff8e 	bl	8001a84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b68:	4b05      	ldr	r3, [pc, #20]	; (8001b80 <SysTick_Config+0x40>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b6e:	4b04      	ldr	r3, [pc, #16]	; (8001b80 <SysTick_Config+0x40>)
 8001b70:	2207      	movs	r2, #7
 8001b72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	e000e010 	.word	0xe000e010

08001b84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f7ff ff29 	bl	80019e4 <__NVIC_SetPriorityGrouping>
}
 8001b92:	bf00      	nop
 8001b94:	3708      	adds	r7, #8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b9a:	b580      	push	{r7, lr}
 8001b9c:	b086      	sub	sp, #24
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	60b9      	str	r1, [r7, #8]
 8001ba4:	607a      	str	r2, [r7, #4]
 8001ba6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bac:	f7ff ff3e 	bl	8001a2c <__NVIC_GetPriorityGrouping>
 8001bb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	68b9      	ldr	r1, [r7, #8]
 8001bb6:	6978      	ldr	r0, [r7, #20]
 8001bb8:	f7ff ff8e 	bl	8001ad8 <NVIC_EncodePriority>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bc2:	4611      	mov	r1, r2
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7ff ff5d 	bl	8001a84 <__NVIC_SetPriority>
}
 8001bca:	bf00      	nop
 8001bcc:	3718      	adds	r7, #24
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b082      	sub	sp, #8
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	4603      	mov	r3, r0
 8001bda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7ff ff31 	bl	8001a48 <__NVIC_EnableIRQ>
}
 8001be6:	bf00      	nop
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}

08001bee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bee:	b580      	push	{r7, lr}
 8001bf0:	b082      	sub	sp, #8
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f7ff ffa2 	bl	8001b40 <SysTick_Config>
 8001bfc:	4603      	mov	r3, r0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
	...

08001c08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b089      	sub	sp, #36	; 0x24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c12:	2300      	movs	r3, #0
 8001c14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c16:	2300      	movs	r3, #0
 8001c18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c1e:	2300      	movs	r3, #0
 8001c20:	61fb      	str	r3, [r7, #28]
 8001c22:	e165      	b.n	8001ef0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c24:	2201      	movs	r2, #1
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	697a      	ldr	r2, [r7, #20]
 8001c34:	4013      	ands	r3, r2
 8001c36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c38:	693a      	ldr	r2, [r7, #16]
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	f040 8154 	bne.w	8001eea <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f003 0303 	and.w	r3, r3, #3
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d005      	beq.n	8001c5a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d130      	bne.n	8001cbc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	2203      	movs	r2, #3
 8001c66:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6a:	43db      	mvns	r3, r3
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	4013      	ands	r3, r2
 8001c70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	68da      	ldr	r2, [r3, #12]
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	005b      	lsls	r3, r3, #1
 8001c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7e:	69ba      	ldr	r2, [r7, #24]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	69ba      	ldr	r2, [r7, #24]
 8001c88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c90:	2201      	movs	r2, #1
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	fa02 f303 	lsl.w	r3, r2, r3
 8001c98:	43db      	mvns	r3, r3
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	091b      	lsrs	r3, r3, #4
 8001ca6:	f003 0201 	and.w	r2, r3, #1
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f003 0303 	and.w	r3, r3, #3
 8001cc4:	2b03      	cmp	r3, #3
 8001cc6:	d017      	beq.n	8001cf8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	2203      	movs	r2, #3
 8001cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd8:	43db      	mvns	r3, r3
 8001cda:	69ba      	ldr	r2, [r7, #24]
 8001cdc:	4013      	ands	r3, r2
 8001cde:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	689a      	ldr	r2, [r3, #8]
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f003 0303 	and.w	r3, r3, #3
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d123      	bne.n	8001d4c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	08da      	lsrs	r2, r3, #3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	3208      	adds	r2, #8
 8001d0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d10:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	f003 0307 	and.w	r3, r3, #7
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	220f      	movs	r2, #15
 8001d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d20:	43db      	mvns	r3, r3
 8001d22:	69ba      	ldr	r2, [r7, #24]
 8001d24:	4013      	ands	r3, r2
 8001d26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	691a      	ldr	r2, [r3, #16]
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	f003 0307 	and.w	r3, r3, #7
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	fa02 f303 	lsl.w	r3, r2, r3
 8001d38:	69ba      	ldr	r2, [r7, #24]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	08da      	lsrs	r2, r3, #3
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	3208      	adds	r2, #8
 8001d46:	69b9      	ldr	r1, [r7, #24]
 8001d48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	005b      	lsls	r3, r3, #1
 8001d56:	2203      	movs	r2, #3
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	69ba      	ldr	r2, [r7, #24]
 8001d60:	4013      	ands	r3, r2
 8001d62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f003 0203 	and.w	r2, r3, #3
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	005b      	lsls	r3, r3, #1
 8001d70:	fa02 f303 	lsl.w	r3, r2, r3
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	f000 80ae 	beq.w	8001eea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d8e:	2300      	movs	r3, #0
 8001d90:	60fb      	str	r3, [r7, #12]
 8001d92:	4b5d      	ldr	r3, [pc, #372]	; (8001f08 <HAL_GPIO_Init+0x300>)
 8001d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d96:	4a5c      	ldr	r2, [pc, #368]	; (8001f08 <HAL_GPIO_Init+0x300>)
 8001d98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d9c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d9e:	4b5a      	ldr	r3, [pc, #360]	; (8001f08 <HAL_GPIO_Init+0x300>)
 8001da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001da6:	60fb      	str	r3, [r7, #12]
 8001da8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001daa:	4a58      	ldr	r2, [pc, #352]	; (8001f0c <HAL_GPIO_Init+0x304>)
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	089b      	lsrs	r3, r3, #2
 8001db0:	3302      	adds	r3, #2
 8001db2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001db6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	f003 0303 	and.w	r3, r3, #3
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	220f      	movs	r2, #15
 8001dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc6:	43db      	mvns	r3, r3
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	4013      	ands	r3, r2
 8001dcc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a4f      	ldr	r2, [pc, #316]	; (8001f10 <HAL_GPIO_Init+0x308>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d025      	beq.n	8001e22 <HAL_GPIO_Init+0x21a>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a4e      	ldr	r2, [pc, #312]	; (8001f14 <HAL_GPIO_Init+0x30c>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d01f      	beq.n	8001e1e <HAL_GPIO_Init+0x216>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4a4d      	ldr	r2, [pc, #308]	; (8001f18 <HAL_GPIO_Init+0x310>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d019      	beq.n	8001e1a <HAL_GPIO_Init+0x212>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4a4c      	ldr	r2, [pc, #304]	; (8001f1c <HAL_GPIO_Init+0x314>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d013      	beq.n	8001e16 <HAL_GPIO_Init+0x20e>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a4b      	ldr	r2, [pc, #300]	; (8001f20 <HAL_GPIO_Init+0x318>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d00d      	beq.n	8001e12 <HAL_GPIO_Init+0x20a>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a4a      	ldr	r2, [pc, #296]	; (8001f24 <HAL_GPIO_Init+0x31c>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d007      	beq.n	8001e0e <HAL_GPIO_Init+0x206>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a49      	ldr	r2, [pc, #292]	; (8001f28 <HAL_GPIO_Init+0x320>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d101      	bne.n	8001e0a <HAL_GPIO_Init+0x202>
 8001e06:	2306      	movs	r3, #6
 8001e08:	e00c      	b.n	8001e24 <HAL_GPIO_Init+0x21c>
 8001e0a:	2307      	movs	r3, #7
 8001e0c:	e00a      	b.n	8001e24 <HAL_GPIO_Init+0x21c>
 8001e0e:	2305      	movs	r3, #5
 8001e10:	e008      	b.n	8001e24 <HAL_GPIO_Init+0x21c>
 8001e12:	2304      	movs	r3, #4
 8001e14:	e006      	b.n	8001e24 <HAL_GPIO_Init+0x21c>
 8001e16:	2303      	movs	r3, #3
 8001e18:	e004      	b.n	8001e24 <HAL_GPIO_Init+0x21c>
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	e002      	b.n	8001e24 <HAL_GPIO_Init+0x21c>
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e000      	b.n	8001e24 <HAL_GPIO_Init+0x21c>
 8001e22:	2300      	movs	r3, #0
 8001e24:	69fa      	ldr	r2, [r7, #28]
 8001e26:	f002 0203 	and.w	r2, r2, #3
 8001e2a:	0092      	lsls	r2, r2, #2
 8001e2c:	4093      	lsls	r3, r2
 8001e2e:	69ba      	ldr	r2, [r7, #24]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e34:	4935      	ldr	r1, [pc, #212]	; (8001f0c <HAL_GPIO_Init+0x304>)
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	089b      	lsrs	r3, r3, #2
 8001e3a:	3302      	adds	r3, #2
 8001e3c:	69ba      	ldr	r2, [r7, #24]
 8001e3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e42:	4b3a      	ldr	r3, [pc, #232]	; (8001f2c <HAL_GPIO_Init+0x324>)
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	43db      	mvns	r3, r3
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	4013      	ands	r3, r2
 8001e50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d003      	beq.n	8001e66 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001e5e:	69ba      	ldr	r2, [r7, #24]
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e66:	4a31      	ldr	r2, [pc, #196]	; (8001f2c <HAL_GPIO_Init+0x324>)
 8001e68:	69bb      	ldr	r3, [r7, #24]
 8001e6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e6c:	4b2f      	ldr	r3, [pc, #188]	; (8001f2c <HAL_GPIO_Init+0x324>)
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	43db      	mvns	r3, r3
 8001e76:	69ba      	ldr	r2, [r7, #24]
 8001e78:	4013      	ands	r3, r2
 8001e7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d003      	beq.n	8001e90 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e90:	4a26      	ldr	r2, [pc, #152]	; (8001f2c <HAL_GPIO_Init+0x324>)
 8001e92:	69bb      	ldr	r3, [r7, #24]
 8001e94:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e96:	4b25      	ldr	r3, [pc, #148]	; (8001f2c <HAL_GPIO_Init+0x324>)
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	43db      	mvns	r3, r3
 8001ea0:	69ba      	ldr	r2, [r7, #24]
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d003      	beq.n	8001eba <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001eb2:	69ba      	ldr	r2, [r7, #24]
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001eba:	4a1c      	ldr	r2, [pc, #112]	; (8001f2c <HAL_GPIO_Init+0x324>)
 8001ebc:	69bb      	ldr	r3, [r7, #24]
 8001ebe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ec0:	4b1a      	ldr	r3, [pc, #104]	; (8001f2c <HAL_GPIO_Init+0x324>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	43db      	mvns	r3, r3
 8001eca:	69ba      	ldr	r2, [r7, #24]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d003      	beq.n	8001ee4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ee4:	4a11      	ldr	r2, [pc, #68]	; (8001f2c <HAL_GPIO_Init+0x324>)
 8001ee6:	69bb      	ldr	r3, [r7, #24]
 8001ee8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	3301      	adds	r3, #1
 8001eee:	61fb      	str	r3, [r7, #28]
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	2b0f      	cmp	r3, #15
 8001ef4:	f67f ae96 	bls.w	8001c24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ef8:	bf00      	nop
 8001efa:	bf00      	nop
 8001efc:	3724      	adds	r7, #36	; 0x24
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	40023800 	.word	0x40023800
 8001f0c:	40013800 	.word	0x40013800
 8001f10:	40020000 	.word	0x40020000
 8001f14:	40020400 	.word	0x40020400
 8001f18:	40020800 	.word	0x40020800
 8001f1c:	40020c00 	.word	0x40020c00
 8001f20:	40021000 	.word	0x40021000
 8001f24:	40021400 	.word	0x40021400
 8001f28:	40021800 	.word	0x40021800
 8001f2c:	40013c00 	.word	0x40013c00

08001f30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	460b      	mov	r3, r1
 8001f3a:	807b      	strh	r3, [r7, #2]
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f40:	787b      	ldrb	r3, [r7, #1]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d003      	beq.n	8001f4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f46:	887a      	ldrh	r2, [r7, #2]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f4c:	e003      	b.n	8001f56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f4e:	887b      	ldrh	r3, [r7, #2]
 8001f50:	041a      	lsls	r2, r3, #16
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	619a      	str	r2, [r3, #24]
}
 8001f56:	bf00      	nop
 8001f58:	370c      	adds	r7, #12
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr

08001f62 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f62:	b480      	push	{r7}
 8001f64:	b085      	sub	sp, #20
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	6078      	str	r0, [r7, #4]
 8001f6a:	460b      	mov	r3, r1
 8001f6c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	695b      	ldr	r3, [r3, #20]
 8001f72:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f74:	887a      	ldrh	r2, [r7, #2]
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	4013      	ands	r3, r2
 8001f7a:	041a      	lsls	r2, r3, #16
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	43d9      	mvns	r1, r3
 8001f80:	887b      	ldrh	r3, [r7, #2]
 8001f82:	400b      	ands	r3, r1
 8001f84:	431a      	orrs	r2, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	619a      	str	r2, [r3, #24]
}
 8001f8a:	bf00      	nop
 8001f8c:	3714      	adds	r7, #20
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
	...

08001f98 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	603b      	str	r3, [r7, #0]
 8001fa6:	4b20      	ldr	r3, [pc, #128]	; (8002028 <HAL_PWREx_EnableOverDrive+0x90>)
 8001fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001faa:	4a1f      	ldr	r2, [pc, #124]	; (8002028 <HAL_PWREx_EnableOverDrive+0x90>)
 8001fac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fb0:	6413      	str	r3, [r2, #64]	; 0x40
 8001fb2:	4b1d      	ldr	r3, [pc, #116]	; (8002028 <HAL_PWREx_EnableOverDrive+0x90>)
 8001fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fba:	603b      	str	r3, [r7, #0]
 8001fbc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001fbe:	4b1b      	ldr	r3, [pc, #108]	; (800202c <HAL_PWREx_EnableOverDrive+0x94>)
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001fc4:	f7fe ff56 	bl	8000e74 <HAL_GetTick>
 8001fc8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001fca:	e009      	b.n	8001fe0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001fcc:	f7fe ff52 	bl	8000e74 <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001fda:	d901      	bls.n	8001fe0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e01f      	b.n	8002020 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001fe0:	4b13      	ldr	r3, [pc, #76]	; (8002030 <HAL_PWREx_EnableOverDrive+0x98>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fe8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fec:	d1ee      	bne.n	8001fcc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001fee:	4b11      	ldr	r3, [pc, #68]	; (8002034 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ff4:	f7fe ff3e 	bl	8000e74 <HAL_GetTick>
 8001ff8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001ffa:	e009      	b.n	8002010 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001ffc:	f7fe ff3a 	bl	8000e74 <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800200a:	d901      	bls.n	8002010 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800200c:	2303      	movs	r3, #3
 800200e:	e007      	b.n	8002020 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002010:	4b07      	ldr	r3, [pc, #28]	; (8002030 <HAL_PWREx_EnableOverDrive+0x98>)
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002018:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800201c:	d1ee      	bne.n	8001ffc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800201e:	2300      	movs	r3, #0
}
 8002020:	4618      	mov	r0, r3
 8002022:	3708      	adds	r7, #8
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	40023800 	.word	0x40023800
 800202c:	420e0040 	.word	0x420e0040
 8002030:	40007000 	.word	0x40007000
 8002034:	420e0044 	.word	0x420e0044

08002038 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b084      	sub	sp, #16
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d101      	bne.n	800204c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e0cc      	b.n	80021e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800204c:	4b68      	ldr	r3, [pc, #416]	; (80021f0 <HAL_RCC_ClockConfig+0x1b8>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 030f 	and.w	r3, r3, #15
 8002054:	683a      	ldr	r2, [r7, #0]
 8002056:	429a      	cmp	r2, r3
 8002058:	d90c      	bls.n	8002074 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800205a:	4b65      	ldr	r3, [pc, #404]	; (80021f0 <HAL_RCC_ClockConfig+0x1b8>)
 800205c:	683a      	ldr	r2, [r7, #0]
 800205e:	b2d2      	uxtb	r2, r2
 8002060:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002062:	4b63      	ldr	r3, [pc, #396]	; (80021f0 <HAL_RCC_ClockConfig+0x1b8>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 030f 	and.w	r3, r3, #15
 800206a:	683a      	ldr	r2, [r7, #0]
 800206c:	429a      	cmp	r2, r3
 800206e:	d001      	beq.n	8002074 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e0b8      	b.n	80021e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0302 	and.w	r3, r3, #2
 800207c:	2b00      	cmp	r3, #0
 800207e:	d020      	beq.n	80020c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0304 	and.w	r3, r3, #4
 8002088:	2b00      	cmp	r3, #0
 800208a:	d005      	beq.n	8002098 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800208c:	4b59      	ldr	r3, [pc, #356]	; (80021f4 <HAL_RCC_ClockConfig+0x1bc>)
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	4a58      	ldr	r2, [pc, #352]	; (80021f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002092:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002096:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0308 	and.w	r3, r3, #8
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d005      	beq.n	80020b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020a4:	4b53      	ldr	r3, [pc, #332]	; (80021f4 <HAL_RCC_ClockConfig+0x1bc>)
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	4a52      	ldr	r2, [pc, #328]	; (80021f4 <HAL_RCC_ClockConfig+0x1bc>)
 80020aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80020ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020b0:	4b50      	ldr	r3, [pc, #320]	; (80021f4 <HAL_RCC_ClockConfig+0x1bc>)
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	494d      	ldr	r1, [pc, #308]	; (80021f4 <HAL_RCC_ClockConfig+0x1bc>)
 80020be:	4313      	orrs	r3, r2
 80020c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0301 	and.w	r3, r3, #1
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d044      	beq.n	8002158 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d107      	bne.n	80020e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020d6:	4b47      	ldr	r3, [pc, #284]	; (80021f4 <HAL_RCC_ClockConfig+0x1bc>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d119      	bne.n	8002116 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e07f      	b.n	80021e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d003      	beq.n	80020f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020f2:	2b03      	cmp	r3, #3
 80020f4:	d107      	bne.n	8002106 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020f6:	4b3f      	ldr	r3, [pc, #252]	; (80021f4 <HAL_RCC_ClockConfig+0x1bc>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d109      	bne.n	8002116 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e06f      	b.n	80021e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002106:	4b3b      	ldr	r3, [pc, #236]	; (80021f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0302 	and.w	r3, r3, #2
 800210e:	2b00      	cmp	r3, #0
 8002110:	d101      	bne.n	8002116 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e067      	b.n	80021e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002116:	4b37      	ldr	r3, [pc, #220]	; (80021f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	f023 0203 	bic.w	r2, r3, #3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	4934      	ldr	r1, [pc, #208]	; (80021f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002124:	4313      	orrs	r3, r2
 8002126:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002128:	f7fe fea4 	bl	8000e74 <HAL_GetTick>
 800212c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800212e:	e00a      	b.n	8002146 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002130:	f7fe fea0 	bl	8000e74 <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	f241 3288 	movw	r2, #5000	; 0x1388
 800213e:	4293      	cmp	r3, r2
 8002140:	d901      	bls.n	8002146 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e04f      	b.n	80021e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002146:	4b2b      	ldr	r3, [pc, #172]	; (80021f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	f003 020c 	and.w	r2, r3, #12
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	429a      	cmp	r2, r3
 8002156:	d1eb      	bne.n	8002130 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002158:	4b25      	ldr	r3, [pc, #148]	; (80021f0 <HAL_RCC_ClockConfig+0x1b8>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 030f 	and.w	r3, r3, #15
 8002160:	683a      	ldr	r2, [r7, #0]
 8002162:	429a      	cmp	r2, r3
 8002164:	d20c      	bcs.n	8002180 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002166:	4b22      	ldr	r3, [pc, #136]	; (80021f0 <HAL_RCC_ClockConfig+0x1b8>)
 8002168:	683a      	ldr	r2, [r7, #0]
 800216a:	b2d2      	uxtb	r2, r2
 800216c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800216e:	4b20      	ldr	r3, [pc, #128]	; (80021f0 <HAL_RCC_ClockConfig+0x1b8>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 030f 	and.w	r3, r3, #15
 8002176:	683a      	ldr	r2, [r7, #0]
 8002178:	429a      	cmp	r2, r3
 800217a:	d001      	beq.n	8002180 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e032      	b.n	80021e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0304 	and.w	r3, r3, #4
 8002188:	2b00      	cmp	r3, #0
 800218a:	d008      	beq.n	800219e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800218c:	4b19      	ldr	r3, [pc, #100]	; (80021f4 <HAL_RCC_ClockConfig+0x1bc>)
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	4916      	ldr	r1, [pc, #88]	; (80021f4 <HAL_RCC_ClockConfig+0x1bc>)
 800219a:	4313      	orrs	r3, r2
 800219c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0308 	and.w	r3, r3, #8
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d009      	beq.n	80021be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021aa:	4b12      	ldr	r3, [pc, #72]	; (80021f4 <HAL_RCC_ClockConfig+0x1bc>)
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	691b      	ldr	r3, [r3, #16]
 80021b6:	00db      	lsls	r3, r3, #3
 80021b8:	490e      	ldr	r1, [pc, #56]	; (80021f4 <HAL_RCC_ClockConfig+0x1bc>)
 80021ba:	4313      	orrs	r3, r2
 80021bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80021be:	f000 f855 	bl	800226c <HAL_RCC_GetSysClockFreq>
 80021c2:	4602      	mov	r2, r0
 80021c4:	4b0b      	ldr	r3, [pc, #44]	; (80021f4 <HAL_RCC_ClockConfig+0x1bc>)
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	091b      	lsrs	r3, r3, #4
 80021ca:	f003 030f 	and.w	r3, r3, #15
 80021ce:	490a      	ldr	r1, [pc, #40]	; (80021f8 <HAL_RCC_ClockConfig+0x1c0>)
 80021d0:	5ccb      	ldrb	r3, [r1, r3]
 80021d2:	fa22 f303 	lsr.w	r3, r2, r3
 80021d6:	4a09      	ldr	r2, [pc, #36]	; (80021fc <HAL_RCC_ClockConfig+0x1c4>)
 80021d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80021da:	4b09      	ldr	r3, [pc, #36]	; (8002200 <HAL_RCC_ClockConfig+0x1c8>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4618      	mov	r0, r3
 80021e0:	f7fe fe04 	bl	8000dec <HAL_InitTick>

  return HAL_OK;
 80021e4:	2300      	movs	r3, #0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3710      	adds	r7, #16
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	40023c00 	.word	0x40023c00
 80021f4:	40023800 	.word	0x40023800
 80021f8:	080045e0 	.word	0x080045e0
 80021fc:	20000000 	.word	0x20000000
 8002200:	20000004 	.word	0x20000004

08002204 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002208:	4b03      	ldr	r3, [pc, #12]	; (8002218 <HAL_RCC_GetHCLKFreq+0x14>)
 800220a:	681b      	ldr	r3, [r3, #0]
}
 800220c:	4618      	mov	r0, r3
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	20000000 	.word	0x20000000

0800221c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002220:	f7ff fff0 	bl	8002204 <HAL_RCC_GetHCLKFreq>
 8002224:	4602      	mov	r2, r0
 8002226:	4b05      	ldr	r3, [pc, #20]	; (800223c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	0a9b      	lsrs	r3, r3, #10
 800222c:	f003 0307 	and.w	r3, r3, #7
 8002230:	4903      	ldr	r1, [pc, #12]	; (8002240 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002232:	5ccb      	ldrb	r3, [r1, r3]
 8002234:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002238:	4618      	mov	r0, r3
 800223a:	bd80      	pop	{r7, pc}
 800223c:	40023800 	.word	0x40023800
 8002240:	080045f0 	.word	0x080045f0

08002244 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002248:	f7ff ffdc 	bl	8002204 <HAL_RCC_GetHCLKFreq>
 800224c:	4602      	mov	r2, r0
 800224e:	4b05      	ldr	r3, [pc, #20]	; (8002264 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	0b5b      	lsrs	r3, r3, #13
 8002254:	f003 0307 	and.w	r3, r3, #7
 8002258:	4903      	ldr	r1, [pc, #12]	; (8002268 <HAL_RCC_GetPCLK2Freq+0x24>)
 800225a:	5ccb      	ldrb	r3, [r1, r3]
 800225c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002260:	4618      	mov	r0, r3
 8002262:	bd80      	pop	{r7, pc}
 8002264:	40023800 	.word	0x40023800
 8002268:	080045f0 	.word	0x080045f0

0800226c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800226c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002270:	b0ae      	sub	sp, #184	; 0xb8
 8002272:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002274:	2300      	movs	r3, #0
 8002276:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800227a:	2300      	movs	r3, #0
 800227c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002280:	2300      	movs	r3, #0
 8002282:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002286:	2300      	movs	r3, #0
 8002288:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800228c:	2300      	movs	r3, #0
 800228e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002292:	4bcb      	ldr	r3, [pc, #812]	; (80025c0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	f003 030c 	and.w	r3, r3, #12
 800229a:	2b0c      	cmp	r3, #12
 800229c:	f200 8206 	bhi.w	80026ac <HAL_RCC_GetSysClockFreq+0x440>
 80022a0:	a201      	add	r2, pc, #4	; (adr r2, 80022a8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80022a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022a6:	bf00      	nop
 80022a8:	080022dd 	.word	0x080022dd
 80022ac:	080026ad 	.word	0x080026ad
 80022b0:	080026ad 	.word	0x080026ad
 80022b4:	080026ad 	.word	0x080026ad
 80022b8:	080022e5 	.word	0x080022e5
 80022bc:	080026ad 	.word	0x080026ad
 80022c0:	080026ad 	.word	0x080026ad
 80022c4:	080026ad 	.word	0x080026ad
 80022c8:	080022ed 	.word	0x080022ed
 80022cc:	080026ad 	.word	0x080026ad
 80022d0:	080026ad 	.word	0x080026ad
 80022d4:	080026ad 	.word	0x080026ad
 80022d8:	080024dd 	.word	0x080024dd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022dc:	4bb9      	ldr	r3, [pc, #740]	; (80025c4 <HAL_RCC_GetSysClockFreq+0x358>)
 80022de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80022e2:	e1e7      	b.n	80026b4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80022e4:	4bb8      	ldr	r3, [pc, #736]	; (80025c8 <HAL_RCC_GetSysClockFreq+0x35c>)
 80022e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80022ea:	e1e3      	b.n	80026b4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022ec:	4bb4      	ldr	r3, [pc, #720]	; (80025c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80022f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022f8:	4bb1      	ldr	r3, [pc, #708]	; (80025c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d071      	beq.n	80023e8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002304:	4bae      	ldr	r3, [pc, #696]	; (80025c0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	099b      	lsrs	r3, r3, #6
 800230a:	2200      	movs	r2, #0
 800230c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002310:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002314:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002318:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800231c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002320:	2300      	movs	r3, #0
 8002322:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002326:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800232a:	4622      	mov	r2, r4
 800232c:	462b      	mov	r3, r5
 800232e:	f04f 0000 	mov.w	r0, #0
 8002332:	f04f 0100 	mov.w	r1, #0
 8002336:	0159      	lsls	r1, r3, #5
 8002338:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800233c:	0150      	lsls	r0, r2, #5
 800233e:	4602      	mov	r2, r0
 8002340:	460b      	mov	r3, r1
 8002342:	4621      	mov	r1, r4
 8002344:	1a51      	subs	r1, r2, r1
 8002346:	6439      	str	r1, [r7, #64]	; 0x40
 8002348:	4629      	mov	r1, r5
 800234a:	eb63 0301 	sbc.w	r3, r3, r1
 800234e:	647b      	str	r3, [r7, #68]	; 0x44
 8002350:	f04f 0200 	mov.w	r2, #0
 8002354:	f04f 0300 	mov.w	r3, #0
 8002358:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800235c:	4649      	mov	r1, r9
 800235e:	018b      	lsls	r3, r1, #6
 8002360:	4641      	mov	r1, r8
 8002362:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002366:	4641      	mov	r1, r8
 8002368:	018a      	lsls	r2, r1, #6
 800236a:	4641      	mov	r1, r8
 800236c:	1a51      	subs	r1, r2, r1
 800236e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002370:	4649      	mov	r1, r9
 8002372:	eb63 0301 	sbc.w	r3, r3, r1
 8002376:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002378:	f04f 0200 	mov.w	r2, #0
 800237c:	f04f 0300 	mov.w	r3, #0
 8002380:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002384:	4649      	mov	r1, r9
 8002386:	00cb      	lsls	r3, r1, #3
 8002388:	4641      	mov	r1, r8
 800238a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800238e:	4641      	mov	r1, r8
 8002390:	00ca      	lsls	r2, r1, #3
 8002392:	4610      	mov	r0, r2
 8002394:	4619      	mov	r1, r3
 8002396:	4603      	mov	r3, r0
 8002398:	4622      	mov	r2, r4
 800239a:	189b      	adds	r3, r3, r2
 800239c:	633b      	str	r3, [r7, #48]	; 0x30
 800239e:	462b      	mov	r3, r5
 80023a0:	460a      	mov	r2, r1
 80023a2:	eb42 0303 	adc.w	r3, r2, r3
 80023a6:	637b      	str	r3, [r7, #52]	; 0x34
 80023a8:	f04f 0200 	mov.w	r2, #0
 80023ac:	f04f 0300 	mov.w	r3, #0
 80023b0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80023b4:	4629      	mov	r1, r5
 80023b6:	024b      	lsls	r3, r1, #9
 80023b8:	4621      	mov	r1, r4
 80023ba:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80023be:	4621      	mov	r1, r4
 80023c0:	024a      	lsls	r2, r1, #9
 80023c2:	4610      	mov	r0, r2
 80023c4:	4619      	mov	r1, r3
 80023c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80023ca:	2200      	movs	r2, #0
 80023cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80023d0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80023d4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80023d8:	f7fd ff6a 	bl	80002b0 <__aeabi_uldivmod>
 80023dc:	4602      	mov	r2, r0
 80023de:	460b      	mov	r3, r1
 80023e0:	4613      	mov	r3, r2
 80023e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80023e6:	e067      	b.n	80024b8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023e8:	4b75      	ldr	r3, [pc, #468]	; (80025c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	099b      	lsrs	r3, r3, #6
 80023ee:	2200      	movs	r2, #0
 80023f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80023f4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80023f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80023fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002400:	67bb      	str	r3, [r7, #120]	; 0x78
 8002402:	2300      	movs	r3, #0
 8002404:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002406:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800240a:	4622      	mov	r2, r4
 800240c:	462b      	mov	r3, r5
 800240e:	f04f 0000 	mov.w	r0, #0
 8002412:	f04f 0100 	mov.w	r1, #0
 8002416:	0159      	lsls	r1, r3, #5
 8002418:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800241c:	0150      	lsls	r0, r2, #5
 800241e:	4602      	mov	r2, r0
 8002420:	460b      	mov	r3, r1
 8002422:	4621      	mov	r1, r4
 8002424:	1a51      	subs	r1, r2, r1
 8002426:	62b9      	str	r1, [r7, #40]	; 0x28
 8002428:	4629      	mov	r1, r5
 800242a:	eb63 0301 	sbc.w	r3, r3, r1
 800242e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002430:	f04f 0200 	mov.w	r2, #0
 8002434:	f04f 0300 	mov.w	r3, #0
 8002438:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800243c:	4649      	mov	r1, r9
 800243e:	018b      	lsls	r3, r1, #6
 8002440:	4641      	mov	r1, r8
 8002442:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002446:	4641      	mov	r1, r8
 8002448:	018a      	lsls	r2, r1, #6
 800244a:	4641      	mov	r1, r8
 800244c:	ebb2 0a01 	subs.w	sl, r2, r1
 8002450:	4649      	mov	r1, r9
 8002452:	eb63 0b01 	sbc.w	fp, r3, r1
 8002456:	f04f 0200 	mov.w	r2, #0
 800245a:	f04f 0300 	mov.w	r3, #0
 800245e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002462:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002466:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800246a:	4692      	mov	sl, r2
 800246c:	469b      	mov	fp, r3
 800246e:	4623      	mov	r3, r4
 8002470:	eb1a 0303 	adds.w	r3, sl, r3
 8002474:	623b      	str	r3, [r7, #32]
 8002476:	462b      	mov	r3, r5
 8002478:	eb4b 0303 	adc.w	r3, fp, r3
 800247c:	627b      	str	r3, [r7, #36]	; 0x24
 800247e:	f04f 0200 	mov.w	r2, #0
 8002482:	f04f 0300 	mov.w	r3, #0
 8002486:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800248a:	4629      	mov	r1, r5
 800248c:	028b      	lsls	r3, r1, #10
 800248e:	4621      	mov	r1, r4
 8002490:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002494:	4621      	mov	r1, r4
 8002496:	028a      	lsls	r2, r1, #10
 8002498:	4610      	mov	r0, r2
 800249a:	4619      	mov	r1, r3
 800249c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80024a0:	2200      	movs	r2, #0
 80024a2:	673b      	str	r3, [r7, #112]	; 0x70
 80024a4:	677a      	str	r2, [r7, #116]	; 0x74
 80024a6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80024aa:	f7fd ff01 	bl	80002b0 <__aeabi_uldivmod>
 80024ae:	4602      	mov	r2, r0
 80024b0:	460b      	mov	r3, r1
 80024b2:	4613      	mov	r3, r2
 80024b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80024b8:	4b41      	ldr	r3, [pc, #260]	; (80025c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	0c1b      	lsrs	r3, r3, #16
 80024be:	f003 0303 	and.w	r3, r3, #3
 80024c2:	3301      	adds	r3, #1
 80024c4:	005b      	lsls	r3, r3, #1
 80024c6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80024ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80024ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80024d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80024d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80024da:	e0eb      	b.n	80026b4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024dc:	4b38      	ldr	r3, [pc, #224]	; (80025c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80024e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024e8:	4b35      	ldr	r3, [pc, #212]	; (80025c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d06b      	beq.n	80025cc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024f4:	4b32      	ldr	r3, [pc, #200]	; (80025c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	099b      	lsrs	r3, r3, #6
 80024fa:	2200      	movs	r2, #0
 80024fc:	66bb      	str	r3, [r7, #104]	; 0x68
 80024fe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002500:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002502:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002506:	663b      	str	r3, [r7, #96]	; 0x60
 8002508:	2300      	movs	r3, #0
 800250a:	667b      	str	r3, [r7, #100]	; 0x64
 800250c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002510:	4622      	mov	r2, r4
 8002512:	462b      	mov	r3, r5
 8002514:	f04f 0000 	mov.w	r0, #0
 8002518:	f04f 0100 	mov.w	r1, #0
 800251c:	0159      	lsls	r1, r3, #5
 800251e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002522:	0150      	lsls	r0, r2, #5
 8002524:	4602      	mov	r2, r0
 8002526:	460b      	mov	r3, r1
 8002528:	4621      	mov	r1, r4
 800252a:	1a51      	subs	r1, r2, r1
 800252c:	61b9      	str	r1, [r7, #24]
 800252e:	4629      	mov	r1, r5
 8002530:	eb63 0301 	sbc.w	r3, r3, r1
 8002534:	61fb      	str	r3, [r7, #28]
 8002536:	f04f 0200 	mov.w	r2, #0
 800253a:	f04f 0300 	mov.w	r3, #0
 800253e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002542:	4659      	mov	r1, fp
 8002544:	018b      	lsls	r3, r1, #6
 8002546:	4651      	mov	r1, sl
 8002548:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800254c:	4651      	mov	r1, sl
 800254e:	018a      	lsls	r2, r1, #6
 8002550:	4651      	mov	r1, sl
 8002552:	ebb2 0801 	subs.w	r8, r2, r1
 8002556:	4659      	mov	r1, fp
 8002558:	eb63 0901 	sbc.w	r9, r3, r1
 800255c:	f04f 0200 	mov.w	r2, #0
 8002560:	f04f 0300 	mov.w	r3, #0
 8002564:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002568:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800256c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002570:	4690      	mov	r8, r2
 8002572:	4699      	mov	r9, r3
 8002574:	4623      	mov	r3, r4
 8002576:	eb18 0303 	adds.w	r3, r8, r3
 800257a:	613b      	str	r3, [r7, #16]
 800257c:	462b      	mov	r3, r5
 800257e:	eb49 0303 	adc.w	r3, r9, r3
 8002582:	617b      	str	r3, [r7, #20]
 8002584:	f04f 0200 	mov.w	r2, #0
 8002588:	f04f 0300 	mov.w	r3, #0
 800258c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002590:	4629      	mov	r1, r5
 8002592:	024b      	lsls	r3, r1, #9
 8002594:	4621      	mov	r1, r4
 8002596:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800259a:	4621      	mov	r1, r4
 800259c:	024a      	lsls	r2, r1, #9
 800259e:	4610      	mov	r0, r2
 80025a0:	4619      	mov	r1, r3
 80025a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80025a6:	2200      	movs	r2, #0
 80025a8:	65bb      	str	r3, [r7, #88]	; 0x58
 80025aa:	65fa      	str	r2, [r7, #92]	; 0x5c
 80025ac:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80025b0:	f7fd fe7e 	bl	80002b0 <__aeabi_uldivmod>
 80025b4:	4602      	mov	r2, r0
 80025b6:	460b      	mov	r3, r1
 80025b8:	4613      	mov	r3, r2
 80025ba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80025be:	e065      	b.n	800268c <HAL_RCC_GetSysClockFreq+0x420>
 80025c0:	40023800 	.word	0x40023800
 80025c4:	00f42400 	.word	0x00f42400
 80025c8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025cc:	4b3d      	ldr	r3, [pc, #244]	; (80026c4 <HAL_RCC_GetSysClockFreq+0x458>)
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	099b      	lsrs	r3, r3, #6
 80025d2:	2200      	movs	r2, #0
 80025d4:	4618      	mov	r0, r3
 80025d6:	4611      	mov	r1, r2
 80025d8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80025dc:	653b      	str	r3, [r7, #80]	; 0x50
 80025de:	2300      	movs	r3, #0
 80025e0:	657b      	str	r3, [r7, #84]	; 0x54
 80025e2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80025e6:	4642      	mov	r2, r8
 80025e8:	464b      	mov	r3, r9
 80025ea:	f04f 0000 	mov.w	r0, #0
 80025ee:	f04f 0100 	mov.w	r1, #0
 80025f2:	0159      	lsls	r1, r3, #5
 80025f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025f8:	0150      	lsls	r0, r2, #5
 80025fa:	4602      	mov	r2, r0
 80025fc:	460b      	mov	r3, r1
 80025fe:	4641      	mov	r1, r8
 8002600:	1a51      	subs	r1, r2, r1
 8002602:	60b9      	str	r1, [r7, #8]
 8002604:	4649      	mov	r1, r9
 8002606:	eb63 0301 	sbc.w	r3, r3, r1
 800260a:	60fb      	str	r3, [r7, #12]
 800260c:	f04f 0200 	mov.w	r2, #0
 8002610:	f04f 0300 	mov.w	r3, #0
 8002614:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002618:	4659      	mov	r1, fp
 800261a:	018b      	lsls	r3, r1, #6
 800261c:	4651      	mov	r1, sl
 800261e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002622:	4651      	mov	r1, sl
 8002624:	018a      	lsls	r2, r1, #6
 8002626:	4651      	mov	r1, sl
 8002628:	1a54      	subs	r4, r2, r1
 800262a:	4659      	mov	r1, fp
 800262c:	eb63 0501 	sbc.w	r5, r3, r1
 8002630:	f04f 0200 	mov.w	r2, #0
 8002634:	f04f 0300 	mov.w	r3, #0
 8002638:	00eb      	lsls	r3, r5, #3
 800263a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800263e:	00e2      	lsls	r2, r4, #3
 8002640:	4614      	mov	r4, r2
 8002642:	461d      	mov	r5, r3
 8002644:	4643      	mov	r3, r8
 8002646:	18e3      	adds	r3, r4, r3
 8002648:	603b      	str	r3, [r7, #0]
 800264a:	464b      	mov	r3, r9
 800264c:	eb45 0303 	adc.w	r3, r5, r3
 8002650:	607b      	str	r3, [r7, #4]
 8002652:	f04f 0200 	mov.w	r2, #0
 8002656:	f04f 0300 	mov.w	r3, #0
 800265a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800265e:	4629      	mov	r1, r5
 8002660:	028b      	lsls	r3, r1, #10
 8002662:	4621      	mov	r1, r4
 8002664:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002668:	4621      	mov	r1, r4
 800266a:	028a      	lsls	r2, r1, #10
 800266c:	4610      	mov	r0, r2
 800266e:	4619      	mov	r1, r3
 8002670:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002674:	2200      	movs	r2, #0
 8002676:	64bb      	str	r3, [r7, #72]	; 0x48
 8002678:	64fa      	str	r2, [r7, #76]	; 0x4c
 800267a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800267e:	f7fd fe17 	bl	80002b0 <__aeabi_uldivmod>
 8002682:	4602      	mov	r2, r0
 8002684:	460b      	mov	r3, r1
 8002686:	4613      	mov	r3, r2
 8002688:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800268c:	4b0d      	ldr	r3, [pc, #52]	; (80026c4 <HAL_RCC_GetSysClockFreq+0x458>)
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	0f1b      	lsrs	r3, r3, #28
 8002692:	f003 0307 	and.w	r3, r3, #7
 8002696:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800269a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800269e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80026a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80026a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80026aa:	e003      	b.n	80026b4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026ac:	4b06      	ldr	r3, [pc, #24]	; (80026c8 <HAL_RCC_GetSysClockFreq+0x45c>)
 80026ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80026b2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026b4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	37b8      	adds	r7, #184	; 0xb8
 80026bc:	46bd      	mov	sp, r7
 80026be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026c2:	bf00      	nop
 80026c4:	40023800 	.word	0x40023800
 80026c8:	00f42400 	.word	0x00f42400

080026cc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b086      	sub	sp, #24
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d101      	bne.n	80026de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e28d      	b.n	8002bfa <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0301 	and.w	r3, r3, #1
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	f000 8083 	beq.w	80027f2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80026ec:	4b94      	ldr	r3, [pc, #592]	; (8002940 <HAL_RCC_OscConfig+0x274>)
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	f003 030c 	and.w	r3, r3, #12
 80026f4:	2b04      	cmp	r3, #4
 80026f6:	d019      	beq.n	800272c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80026f8:	4b91      	ldr	r3, [pc, #580]	; (8002940 <HAL_RCC_OscConfig+0x274>)
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002700:	2b08      	cmp	r3, #8
 8002702:	d106      	bne.n	8002712 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002704:	4b8e      	ldr	r3, [pc, #568]	; (8002940 <HAL_RCC_OscConfig+0x274>)
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800270c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002710:	d00c      	beq.n	800272c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002712:	4b8b      	ldr	r3, [pc, #556]	; (8002940 <HAL_RCC_OscConfig+0x274>)
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800271a:	2b0c      	cmp	r3, #12
 800271c:	d112      	bne.n	8002744 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800271e:	4b88      	ldr	r3, [pc, #544]	; (8002940 <HAL_RCC_OscConfig+0x274>)
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002726:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800272a:	d10b      	bne.n	8002744 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800272c:	4b84      	ldr	r3, [pc, #528]	; (8002940 <HAL_RCC_OscConfig+0x274>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d05b      	beq.n	80027f0 <HAL_RCC_OscConfig+0x124>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d157      	bne.n	80027f0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e25a      	b.n	8002bfa <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800274c:	d106      	bne.n	800275c <HAL_RCC_OscConfig+0x90>
 800274e:	4b7c      	ldr	r3, [pc, #496]	; (8002940 <HAL_RCC_OscConfig+0x274>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a7b      	ldr	r2, [pc, #492]	; (8002940 <HAL_RCC_OscConfig+0x274>)
 8002754:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002758:	6013      	str	r3, [r2, #0]
 800275a:	e01d      	b.n	8002798 <HAL_RCC_OscConfig+0xcc>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002764:	d10c      	bne.n	8002780 <HAL_RCC_OscConfig+0xb4>
 8002766:	4b76      	ldr	r3, [pc, #472]	; (8002940 <HAL_RCC_OscConfig+0x274>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a75      	ldr	r2, [pc, #468]	; (8002940 <HAL_RCC_OscConfig+0x274>)
 800276c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002770:	6013      	str	r3, [r2, #0]
 8002772:	4b73      	ldr	r3, [pc, #460]	; (8002940 <HAL_RCC_OscConfig+0x274>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a72      	ldr	r2, [pc, #456]	; (8002940 <HAL_RCC_OscConfig+0x274>)
 8002778:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800277c:	6013      	str	r3, [r2, #0]
 800277e:	e00b      	b.n	8002798 <HAL_RCC_OscConfig+0xcc>
 8002780:	4b6f      	ldr	r3, [pc, #444]	; (8002940 <HAL_RCC_OscConfig+0x274>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a6e      	ldr	r2, [pc, #440]	; (8002940 <HAL_RCC_OscConfig+0x274>)
 8002786:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800278a:	6013      	str	r3, [r2, #0]
 800278c:	4b6c      	ldr	r3, [pc, #432]	; (8002940 <HAL_RCC_OscConfig+0x274>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a6b      	ldr	r2, [pc, #428]	; (8002940 <HAL_RCC_OscConfig+0x274>)
 8002792:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002796:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d013      	beq.n	80027c8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a0:	f7fe fb68 	bl	8000e74 <HAL_GetTick>
 80027a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027a6:	e008      	b.n	80027ba <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027a8:	f7fe fb64 	bl	8000e74 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	2b64      	cmp	r3, #100	; 0x64
 80027b4:	d901      	bls.n	80027ba <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e21f      	b.n	8002bfa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ba:	4b61      	ldr	r3, [pc, #388]	; (8002940 <HAL_RCC_OscConfig+0x274>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d0f0      	beq.n	80027a8 <HAL_RCC_OscConfig+0xdc>
 80027c6:	e014      	b.n	80027f2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c8:	f7fe fb54 	bl	8000e74 <HAL_GetTick>
 80027cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027ce:	e008      	b.n	80027e2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027d0:	f7fe fb50 	bl	8000e74 <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	2b64      	cmp	r3, #100	; 0x64
 80027dc:	d901      	bls.n	80027e2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	e20b      	b.n	8002bfa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027e2:	4b57      	ldr	r3, [pc, #348]	; (8002940 <HAL_RCC_OscConfig+0x274>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d1f0      	bne.n	80027d0 <HAL_RCC_OscConfig+0x104>
 80027ee:	e000      	b.n	80027f2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0302 	and.w	r3, r3, #2
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d06f      	beq.n	80028de <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80027fe:	4b50      	ldr	r3, [pc, #320]	; (8002940 <HAL_RCC_OscConfig+0x274>)
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	f003 030c 	and.w	r3, r3, #12
 8002806:	2b00      	cmp	r3, #0
 8002808:	d017      	beq.n	800283a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800280a:	4b4d      	ldr	r3, [pc, #308]	; (8002940 <HAL_RCC_OscConfig+0x274>)
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002812:	2b08      	cmp	r3, #8
 8002814:	d105      	bne.n	8002822 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002816:	4b4a      	ldr	r3, [pc, #296]	; (8002940 <HAL_RCC_OscConfig+0x274>)
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d00b      	beq.n	800283a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002822:	4b47      	ldr	r3, [pc, #284]	; (8002940 <HAL_RCC_OscConfig+0x274>)
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800282a:	2b0c      	cmp	r3, #12
 800282c:	d11c      	bne.n	8002868 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800282e:	4b44      	ldr	r3, [pc, #272]	; (8002940 <HAL_RCC_OscConfig+0x274>)
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d116      	bne.n	8002868 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800283a:	4b41      	ldr	r3, [pc, #260]	; (8002940 <HAL_RCC_OscConfig+0x274>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0302 	and.w	r3, r3, #2
 8002842:	2b00      	cmp	r3, #0
 8002844:	d005      	beq.n	8002852 <HAL_RCC_OscConfig+0x186>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	2b01      	cmp	r3, #1
 800284c:	d001      	beq.n	8002852 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e1d3      	b.n	8002bfa <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002852:	4b3b      	ldr	r3, [pc, #236]	; (8002940 <HAL_RCC_OscConfig+0x274>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	691b      	ldr	r3, [r3, #16]
 800285e:	00db      	lsls	r3, r3, #3
 8002860:	4937      	ldr	r1, [pc, #220]	; (8002940 <HAL_RCC_OscConfig+0x274>)
 8002862:	4313      	orrs	r3, r2
 8002864:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002866:	e03a      	b.n	80028de <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d020      	beq.n	80028b2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002870:	4b34      	ldr	r3, [pc, #208]	; (8002944 <HAL_RCC_OscConfig+0x278>)
 8002872:	2201      	movs	r2, #1
 8002874:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002876:	f7fe fafd 	bl	8000e74 <HAL_GetTick>
 800287a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800287c:	e008      	b.n	8002890 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800287e:	f7fe faf9 	bl	8000e74 <HAL_GetTick>
 8002882:	4602      	mov	r2, r0
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	2b02      	cmp	r3, #2
 800288a:	d901      	bls.n	8002890 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800288c:	2303      	movs	r3, #3
 800288e:	e1b4      	b.n	8002bfa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002890:	4b2b      	ldr	r3, [pc, #172]	; (8002940 <HAL_RCC_OscConfig+0x274>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0302 	and.w	r3, r3, #2
 8002898:	2b00      	cmp	r3, #0
 800289a:	d0f0      	beq.n	800287e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800289c:	4b28      	ldr	r3, [pc, #160]	; (8002940 <HAL_RCC_OscConfig+0x274>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	691b      	ldr	r3, [r3, #16]
 80028a8:	00db      	lsls	r3, r3, #3
 80028aa:	4925      	ldr	r1, [pc, #148]	; (8002940 <HAL_RCC_OscConfig+0x274>)
 80028ac:	4313      	orrs	r3, r2
 80028ae:	600b      	str	r3, [r1, #0]
 80028b0:	e015      	b.n	80028de <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028b2:	4b24      	ldr	r3, [pc, #144]	; (8002944 <HAL_RCC_OscConfig+0x278>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b8:	f7fe fadc 	bl	8000e74 <HAL_GetTick>
 80028bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028be:	e008      	b.n	80028d2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028c0:	f7fe fad8 	bl	8000e74 <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d901      	bls.n	80028d2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e193      	b.n	8002bfa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028d2:	4b1b      	ldr	r3, [pc, #108]	; (8002940 <HAL_RCC_OscConfig+0x274>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0302 	and.w	r3, r3, #2
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d1f0      	bne.n	80028c0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0308 	and.w	r3, r3, #8
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d036      	beq.n	8002958 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	695b      	ldr	r3, [r3, #20]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d016      	beq.n	8002920 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028f2:	4b15      	ldr	r3, [pc, #84]	; (8002948 <HAL_RCC_OscConfig+0x27c>)
 80028f4:	2201      	movs	r2, #1
 80028f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028f8:	f7fe fabc 	bl	8000e74 <HAL_GetTick>
 80028fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028fe:	e008      	b.n	8002912 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002900:	f7fe fab8 	bl	8000e74 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	2b02      	cmp	r3, #2
 800290c:	d901      	bls.n	8002912 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e173      	b.n	8002bfa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002912:	4b0b      	ldr	r3, [pc, #44]	; (8002940 <HAL_RCC_OscConfig+0x274>)
 8002914:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002916:	f003 0302 	and.w	r3, r3, #2
 800291a:	2b00      	cmp	r3, #0
 800291c:	d0f0      	beq.n	8002900 <HAL_RCC_OscConfig+0x234>
 800291e:	e01b      	b.n	8002958 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002920:	4b09      	ldr	r3, [pc, #36]	; (8002948 <HAL_RCC_OscConfig+0x27c>)
 8002922:	2200      	movs	r2, #0
 8002924:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002926:	f7fe faa5 	bl	8000e74 <HAL_GetTick>
 800292a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800292c:	e00e      	b.n	800294c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800292e:	f7fe faa1 	bl	8000e74 <HAL_GetTick>
 8002932:	4602      	mov	r2, r0
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	2b02      	cmp	r3, #2
 800293a:	d907      	bls.n	800294c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800293c:	2303      	movs	r3, #3
 800293e:	e15c      	b.n	8002bfa <HAL_RCC_OscConfig+0x52e>
 8002940:	40023800 	.word	0x40023800
 8002944:	42470000 	.word	0x42470000
 8002948:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800294c:	4b8a      	ldr	r3, [pc, #552]	; (8002b78 <HAL_RCC_OscConfig+0x4ac>)
 800294e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002950:	f003 0302 	and.w	r3, r3, #2
 8002954:	2b00      	cmp	r3, #0
 8002956:	d1ea      	bne.n	800292e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0304 	and.w	r3, r3, #4
 8002960:	2b00      	cmp	r3, #0
 8002962:	f000 8097 	beq.w	8002a94 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002966:	2300      	movs	r3, #0
 8002968:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800296a:	4b83      	ldr	r3, [pc, #524]	; (8002b78 <HAL_RCC_OscConfig+0x4ac>)
 800296c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d10f      	bne.n	8002996 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002976:	2300      	movs	r3, #0
 8002978:	60bb      	str	r3, [r7, #8]
 800297a:	4b7f      	ldr	r3, [pc, #508]	; (8002b78 <HAL_RCC_OscConfig+0x4ac>)
 800297c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297e:	4a7e      	ldr	r2, [pc, #504]	; (8002b78 <HAL_RCC_OscConfig+0x4ac>)
 8002980:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002984:	6413      	str	r3, [r2, #64]	; 0x40
 8002986:	4b7c      	ldr	r3, [pc, #496]	; (8002b78 <HAL_RCC_OscConfig+0x4ac>)
 8002988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800298e:	60bb      	str	r3, [r7, #8]
 8002990:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002992:	2301      	movs	r3, #1
 8002994:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002996:	4b79      	ldr	r3, [pc, #484]	; (8002b7c <HAL_RCC_OscConfig+0x4b0>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d118      	bne.n	80029d4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029a2:	4b76      	ldr	r3, [pc, #472]	; (8002b7c <HAL_RCC_OscConfig+0x4b0>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a75      	ldr	r2, [pc, #468]	; (8002b7c <HAL_RCC_OscConfig+0x4b0>)
 80029a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029ae:	f7fe fa61 	bl	8000e74 <HAL_GetTick>
 80029b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029b4:	e008      	b.n	80029c8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029b6:	f7fe fa5d 	bl	8000e74 <HAL_GetTick>
 80029ba:	4602      	mov	r2, r0
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d901      	bls.n	80029c8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80029c4:	2303      	movs	r3, #3
 80029c6:	e118      	b.n	8002bfa <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029c8:	4b6c      	ldr	r3, [pc, #432]	; (8002b7c <HAL_RCC_OscConfig+0x4b0>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d0f0      	beq.n	80029b6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d106      	bne.n	80029ea <HAL_RCC_OscConfig+0x31e>
 80029dc:	4b66      	ldr	r3, [pc, #408]	; (8002b78 <HAL_RCC_OscConfig+0x4ac>)
 80029de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029e0:	4a65      	ldr	r2, [pc, #404]	; (8002b78 <HAL_RCC_OscConfig+0x4ac>)
 80029e2:	f043 0301 	orr.w	r3, r3, #1
 80029e6:	6713      	str	r3, [r2, #112]	; 0x70
 80029e8:	e01c      	b.n	8002a24 <HAL_RCC_OscConfig+0x358>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	2b05      	cmp	r3, #5
 80029f0:	d10c      	bne.n	8002a0c <HAL_RCC_OscConfig+0x340>
 80029f2:	4b61      	ldr	r3, [pc, #388]	; (8002b78 <HAL_RCC_OscConfig+0x4ac>)
 80029f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029f6:	4a60      	ldr	r2, [pc, #384]	; (8002b78 <HAL_RCC_OscConfig+0x4ac>)
 80029f8:	f043 0304 	orr.w	r3, r3, #4
 80029fc:	6713      	str	r3, [r2, #112]	; 0x70
 80029fe:	4b5e      	ldr	r3, [pc, #376]	; (8002b78 <HAL_RCC_OscConfig+0x4ac>)
 8002a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a02:	4a5d      	ldr	r2, [pc, #372]	; (8002b78 <HAL_RCC_OscConfig+0x4ac>)
 8002a04:	f043 0301 	orr.w	r3, r3, #1
 8002a08:	6713      	str	r3, [r2, #112]	; 0x70
 8002a0a:	e00b      	b.n	8002a24 <HAL_RCC_OscConfig+0x358>
 8002a0c:	4b5a      	ldr	r3, [pc, #360]	; (8002b78 <HAL_RCC_OscConfig+0x4ac>)
 8002a0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a10:	4a59      	ldr	r2, [pc, #356]	; (8002b78 <HAL_RCC_OscConfig+0x4ac>)
 8002a12:	f023 0301 	bic.w	r3, r3, #1
 8002a16:	6713      	str	r3, [r2, #112]	; 0x70
 8002a18:	4b57      	ldr	r3, [pc, #348]	; (8002b78 <HAL_RCC_OscConfig+0x4ac>)
 8002a1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a1c:	4a56      	ldr	r2, [pc, #344]	; (8002b78 <HAL_RCC_OscConfig+0x4ac>)
 8002a1e:	f023 0304 	bic.w	r3, r3, #4
 8002a22:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d015      	beq.n	8002a58 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a2c:	f7fe fa22 	bl	8000e74 <HAL_GetTick>
 8002a30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a32:	e00a      	b.n	8002a4a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a34:	f7fe fa1e 	bl	8000e74 <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d901      	bls.n	8002a4a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e0d7      	b.n	8002bfa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a4a:	4b4b      	ldr	r3, [pc, #300]	; (8002b78 <HAL_RCC_OscConfig+0x4ac>)
 8002a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a4e:	f003 0302 	and.w	r3, r3, #2
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d0ee      	beq.n	8002a34 <HAL_RCC_OscConfig+0x368>
 8002a56:	e014      	b.n	8002a82 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a58:	f7fe fa0c 	bl	8000e74 <HAL_GetTick>
 8002a5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a5e:	e00a      	b.n	8002a76 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a60:	f7fe fa08 	bl	8000e74 <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d901      	bls.n	8002a76 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e0c1      	b.n	8002bfa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a76:	4b40      	ldr	r3, [pc, #256]	; (8002b78 <HAL_RCC_OscConfig+0x4ac>)
 8002a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a7a:	f003 0302 	and.w	r3, r3, #2
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d1ee      	bne.n	8002a60 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a82:	7dfb      	ldrb	r3, [r7, #23]
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d105      	bne.n	8002a94 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a88:	4b3b      	ldr	r3, [pc, #236]	; (8002b78 <HAL_RCC_OscConfig+0x4ac>)
 8002a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8c:	4a3a      	ldr	r2, [pc, #232]	; (8002b78 <HAL_RCC_OscConfig+0x4ac>)
 8002a8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a92:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	699b      	ldr	r3, [r3, #24]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	f000 80ad 	beq.w	8002bf8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a9e:	4b36      	ldr	r3, [pc, #216]	; (8002b78 <HAL_RCC_OscConfig+0x4ac>)
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	f003 030c 	and.w	r3, r3, #12
 8002aa6:	2b08      	cmp	r3, #8
 8002aa8:	d060      	beq.n	8002b6c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	699b      	ldr	r3, [r3, #24]
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d145      	bne.n	8002b3e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ab2:	4b33      	ldr	r3, [pc, #204]	; (8002b80 <HAL_RCC_OscConfig+0x4b4>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ab8:	f7fe f9dc 	bl	8000e74 <HAL_GetTick>
 8002abc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002abe:	e008      	b.n	8002ad2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ac0:	f7fe f9d8 	bl	8000e74 <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d901      	bls.n	8002ad2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e093      	b.n	8002bfa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ad2:	4b29      	ldr	r3, [pc, #164]	; (8002b78 <HAL_RCC_OscConfig+0x4ac>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d1f0      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	69da      	ldr	r2, [r3, #28]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6a1b      	ldr	r3, [r3, #32]
 8002ae6:	431a      	orrs	r2, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aec:	019b      	lsls	r3, r3, #6
 8002aee:	431a      	orrs	r2, r3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002af4:	085b      	lsrs	r3, r3, #1
 8002af6:	3b01      	subs	r3, #1
 8002af8:	041b      	lsls	r3, r3, #16
 8002afa:	431a      	orrs	r2, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b00:	061b      	lsls	r3, r3, #24
 8002b02:	431a      	orrs	r2, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b08:	071b      	lsls	r3, r3, #28
 8002b0a:	491b      	ldr	r1, [pc, #108]	; (8002b78 <HAL_RCC_OscConfig+0x4ac>)
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b10:	4b1b      	ldr	r3, [pc, #108]	; (8002b80 <HAL_RCC_OscConfig+0x4b4>)
 8002b12:	2201      	movs	r2, #1
 8002b14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b16:	f7fe f9ad 	bl	8000e74 <HAL_GetTick>
 8002b1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b1c:	e008      	b.n	8002b30 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b1e:	f7fe f9a9 	bl	8000e74 <HAL_GetTick>
 8002b22:	4602      	mov	r2, r0
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d901      	bls.n	8002b30 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	e064      	b.n	8002bfa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b30:	4b11      	ldr	r3, [pc, #68]	; (8002b78 <HAL_RCC_OscConfig+0x4ac>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d0f0      	beq.n	8002b1e <HAL_RCC_OscConfig+0x452>
 8002b3c:	e05c      	b.n	8002bf8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b3e:	4b10      	ldr	r3, [pc, #64]	; (8002b80 <HAL_RCC_OscConfig+0x4b4>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b44:	f7fe f996 	bl	8000e74 <HAL_GetTick>
 8002b48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b4a:	e008      	b.n	8002b5e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b4c:	f7fe f992 	bl	8000e74 <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d901      	bls.n	8002b5e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e04d      	b.n	8002bfa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b5e:	4b06      	ldr	r3, [pc, #24]	; (8002b78 <HAL_RCC_OscConfig+0x4ac>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d1f0      	bne.n	8002b4c <HAL_RCC_OscConfig+0x480>
 8002b6a:	e045      	b.n	8002bf8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	699b      	ldr	r3, [r3, #24]
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d107      	bne.n	8002b84 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e040      	b.n	8002bfa <HAL_RCC_OscConfig+0x52e>
 8002b78:	40023800 	.word	0x40023800
 8002b7c:	40007000 	.word	0x40007000
 8002b80:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b84:	4b1f      	ldr	r3, [pc, #124]	; (8002c04 <HAL_RCC_OscConfig+0x538>)
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	699b      	ldr	r3, [r3, #24]
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d030      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d129      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d122      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bae:	68fa      	ldr	r2, [r7, #12]
 8002bb0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002bba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d119      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bca:	085b      	lsrs	r3, r3, #1
 8002bcc:	3b01      	subs	r3, #1
 8002bce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d10f      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bde:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d107      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bee:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d001      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e000      	b.n	8002bfa <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3718      	adds	r7, #24
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	40023800 	.word	0x40023800

08002c08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d101      	bne.n	8002c1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e03f      	b.n	8002c9a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d106      	bne.n	8002c34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f7fd ff66 	bl	8000b00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2224      	movs	r2, #36	; 0x24
 8002c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	68da      	ldr	r2, [r3, #12]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f000 f929 	bl	8002ea4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	691a      	ldr	r2, [r3, #16]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	695a      	ldr	r2, [r3, #20]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	68da      	ldr	r2, [r3, #12]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2220      	movs	r2, #32
 8002c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2220      	movs	r2, #32
 8002c94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c98:	2300      	movs	r3, #0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3708      	adds	r7, #8
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}

08002ca2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ca2:	b580      	push	{r7, lr}
 8002ca4:	b08a      	sub	sp, #40	; 0x28
 8002ca6:	af02      	add	r7, sp, #8
 8002ca8:	60f8      	str	r0, [r7, #12]
 8002caa:	60b9      	str	r1, [r7, #8]
 8002cac:	603b      	str	r3, [r7, #0]
 8002cae:	4613      	mov	r3, r2
 8002cb0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	2b20      	cmp	r3, #32
 8002cc0:	d17c      	bne.n	8002dbc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d002      	beq.n	8002cce <HAL_UART_Transmit+0x2c>
 8002cc8:	88fb      	ldrh	r3, [r7, #6]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d101      	bne.n	8002cd2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e075      	b.n	8002dbe <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d101      	bne.n	8002ce0 <HAL_UART_Transmit+0x3e>
 8002cdc:	2302      	movs	r3, #2
 8002cde:	e06e      	b.n	8002dbe <HAL_UART_Transmit+0x11c>
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2200      	movs	r2, #0
 8002cec:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2221      	movs	r2, #33	; 0x21
 8002cf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002cf6:	f7fe f8bd 	bl	8000e74 <HAL_GetTick>
 8002cfa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	88fa      	ldrh	r2, [r7, #6]
 8002d00:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	88fa      	ldrh	r2, [r7, #6]
 8002d06:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d10:	d108      	bne.n	8002d24 <HAL_UART_Transmit+0x82>
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	691b      	ldr	r3, [r3, #16]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d104      	bne.n	8002d24 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	61bb      	str	r3, [r7, #24]
 8002d22:	e003      	b.n	8002d2c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002d34:	e02a      	b.n	8002d8c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	9300      	str	r3, [sp, #0]
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	2180      	movs	r1, #128	; 0x80
 8002d40:	68f8      	ldr	r0, [r7, #12]
 8002d42:	f000 f840 	bl	8002dc6 <UART_WaitOnFlagUntilTimeout>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d001      	beq.n	8002d50 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	e036      	b.n	8002dbe <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d10b      	bne.n	8002d6e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d56:	69bb      	ldr	r3, [r7, #24]
 8002d58:	881b      	ldrh	r3, [r3, #0]
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d64:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	3302      	adds	r3, #2
 8002d6a:	61bb      	str	r3, [r7, #24]
 8002d6c:	e007      	b.n	8002d7e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	781a      	ldrb	r2, [r3, #0]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	3301      	adds	r3, #1
 8002d7c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	3b01      	subs	r3, #1
 8002d86:	b29a      	uxth	r2, r3
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d1cf      	bne.n	8002d36 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	9300      	str	r3, [sp, #0]
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	2140      	movs	r1, #64	; 0x40
 8002da0:	68f8      	ldr	r0, [r7, #12]
 8002da2:	f000 f810 	bl	8002dc6 <UART_WaitOnFlagUntilTimeout>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d001      	beq.n	8002db0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	e006      	b.n	8002dbe <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2220      	movs	r2, #32
 8002db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002db8:	2300      	movs	r3, #0
 8002dba:	e000      	b.n	8002dbe <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002dbc:	2302      	movs	r3, #2
  }
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3720      	adds	r7, #32
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}

08002dc6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002dc6:	b580      	push	{r7, lr}
 8002dc8:	b090      	sub	sp, #64	; 0x40
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	60f8      	str	r0, [r7, #12]
 8002dce:	60b9      	str	r1, [r7, #8]
 8002dd0:	603b      	str	r3, [r7, #0]
 8002dd2:	4613      	mov	r3, r2
 8002dd4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dd6:	e050      	b.n	8002e7a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002dde:	d04c      	beq.n	8002e7a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002de0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d007      	beq.n	8002df6 <UART_WaitOnFlagUntilTimeout+0x30>
 8002de6:	f7fe f845 	bl	8000e74 <HAL_GetTick>
 8002dea:	4602      	mov	r2, r0
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d241      	bcs.n	8002e7a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	330c      	adds	r3, #12
 8002dfc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e00:	e853 3f00 	ldrex	r3, [r3]
 8002e04:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e08:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002e0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	330c      	adds	r3, #12
 8002e14:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e16:	637a      	str	r2, [r7, #52]	; 0x34
 8002e18:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e1a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002e1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e1e:	e841 2300 	strex	r3, r2, [r1]
 8002e22:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d1e5      	bne.n	8002df6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	3314      	adds	r3, #20
 8002e30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	e853 3f00 	ldrex	r3, [r3]
 8002e38:	613b      	str	r3, [r7, #16]
   return(result);
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	f023 0301 	bic.w	r3, r3, #1
 8002e40:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	3314      	adds	r3, #20
 8002e48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e4a:	623a      	str	r2, [r7, #32]
 8002e4c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e4e:	69f9      	ldr	r1, [r7, #28]
 8002e50:	6a3a      	ldr	r2, [r7, #32]
 8002e52:	e841 2300 	strex	r3, r2, [r1]
 8002e56:	61bb      	str	r3, [r7, #24]
   return(result);
 8002e58:	69bb      	ldr	r3, [r7, #24]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d1e5      	bne.n	8002e2a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2220      	movs	r2, #32
 8002e62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2220      	movs	r2, #32
 8002e6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2200      	movs	r2, #0
 8002e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e00f      	b.n	8002e9a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	4013      	ands	r3, r2
 8002e84:	68ba      	ldr	r2, [r7, #8]
 8002e86:	429a      	cmp	r2, r3
 8002e88:	bf0c      	ite	eq
 8002e8a:	2301      	moveq	r3, #1
 8002e8c:	2300      	movne	r3, #0
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	461a      	mov	r2, r3
 8002e92:	79fb      	ldrb	r3, [r7, #7]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d09f      	beq.n	8002dd8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3740      	adds	r7, #64	; 0x40
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
	...

08002ea4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ea4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ea8:	b0c0      	sub	sp, #256	; 0x100
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	691b      	ldr	r3, [r3, #16]
 8002eb8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ec0:	68d9      	ldr	r1, [r3, #12]
 8002ec2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	ea40 0301 	orr.w	r3, r0, r1
 8002ecc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002ece:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ed2:	689a      	ldr	r2, [r3, #8]
 8002ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ed8:	691b      	ldr	r3, [r3, #16]
 8002eda:	431a      	orrs	r2, r3
 8002edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ee0:	695b      	ldr	r3, [r3, #20]
 8002ee2:	431a      	orrs	r2, r3
 8002ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ee8:	69db      	ldr	r3, [r3, #28]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002efc:	f021 010c 	bic.w	r1, r1, #12
 8002f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002f0a:	430b      	orrs	r3, r1
 8002f0c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	695b      	ldr	r3, [r3, #20]
 8002f16:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002f1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f1e:	6999      	ldr	r1, [r3, #24]
 8002f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	ea40 0301 	orr.w	r3, r0, r1
 8002f2a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	4b8f      	ldr	r3, [pc, #572]	; (8003170 <UART_SetConfig+0x2cc>)
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d005      	beq.n	8002f44 <UART_SetConfig+0xa0>
 8002f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	4b8d      	ldr	r3, [pc, #564]	; (8003174 <UART_SetConfig+0x2d0>)
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d104      	bne.n	8002f4e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002f44:	f7ff f97e 	bl	8002244 <HAL_RCC_GetPCLK2Freq>
 8002f48:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002f4c:	e003      	b.n	8002f56 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002f4e:	f7ff f965 	bl	800221c <HAL_RCC_GetPCLK1Freq>
 8002f52:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f5a:	69db      	ldr	r3, [r3, #28]
 8002f5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f60:	f040 810c 	bne.w	800317c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002f64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002f6e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002f72:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002f76:	4622      	mov	r2, r4
 8002f78:	462b      	mov	r3, r5
 8002f7a:	1891      	adds	r1, r2, r2
 8002f7c:	65b9      	str	r1, [r7, #88]	; 0x58
 8002f7e:	415b      	adcs	r3, r3
 8002f80:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f82:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002f86:	4621      	mov	r1, r4
 8002f88:	eb12 0801 	adds.w	r8, r2, r1
 8002f8c:	4629      	mov	r1, r5
 8002f8e:	eb43 0901 	adc.w	r9, r3, r1
 8002f92:	f04f 0200 	mov.w	r2, #0
 8002f96:	f04f 0300 	mov.w	r3, #0
 8002f9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002fa2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002fa6:	4690      	mov	r8, r2
 8002fa8:	4699      	mov	r9, r3
 8002faa:	4623      	mov	r3, r4
 8002fac:	eb18 0303 	adds.w	r3, r8, r3
 8002fb0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002fb4:	462b      	mov	r3, r5
 8002fb6:	eb49 0303 	adc.w	r3, r9, r3
 8002fba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002fbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002fca:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002fce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002fd2:	460b      	mov	r3, r1
 8002fd4:	18db      	adds	r3, r3, r3
 8002fd6:	653b      	str	r3, [r7, #80]	; 0x50
 8002fd8:	4613      	mov	r3, r2
 8002fda:	eb42 0303 	adc.w	r3, r2, r3
 8002fde:	657b      	str	r3, [r7, #84]	; 0x54
 8002fe0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002fe4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002fe8:	f7fd f962 	bl	80002b0 <__aeabi_uldivmod>
 8002fec:	4602      	mov	r2, r0
 8002fee:	460b      	mov	r3, r1
 8002ff0:	4b61      	ldr	r3, [pc, #388]	; (8003178 <UART_SetConfig+0x2d4>)
 8002ff2:	fba3 2302 	umull	r2, r3, r3, r2
 8002ff6:	095b      	lsrs	r3, r3, #5
 8002ff8:	011c      	lsls	r4, r3, #4
 8002ffa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ffe:	2200      	movs	r2, #0
 8003000:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003004:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003008:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800300c:	4642      	mov	r2, r8
 800300e:	464b      	mov	r3, r9
 8003010:	1891      	adds	r1, r2, r2
 8003012:	64b9      	str	r1, [r7, #72]	; 0x48
 8003014:	415b      	adcs	r3, r3
 8003016:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003018:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800301c:	4641      	mov	r1, r8
 800301e:	eb12 0a01 	adds.w	sl, r2, r1
 8003022:	4649      	mov	r1, r9
 8003024:	eb43 0b01 	adc.w	fp, r3, r1
 8003028:	f04f 0200 	mov.w	r2, #0
 800302c:	f04f 0300 	mov.w	r3, #0
 8003030:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003034:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003038:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800303c:	4692      	mov	sl, r2
 800303e:	469b      	mov	fp, r3
 8003040:	4643      	mov	r3, r8
 8003042:	eb1a 0303 	adds.w	r3, sl, r3
 8003046:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800304a:	464b      	mov	r3, r9
 800304c:	eb4b 0303 	adc.w	r3, fp, r3
 8003050:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003060:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003064:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003068:	460b      	mov	r3, r1
 800306a:	18db      	adds	r3, r3, r3
 800306c:	643b      	str	r3, [r7, #64]	; 0x40
 800306e:	4613      	mov	r3, r2
 8003070:	eb42 0303 	adc.w	r3, r2, r3
 8003074:	647b      	str	r3, [r7, #68]	; 0x44
 8003076:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800307a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800307e:	f7fd f917 	bl	80002b0 <__aeabi_uldivmod>
 8003082:	4602      	mov	r2, r0
 8003084:	460b      	mov	r3, r1
 8003086:	4611      	mov	r1, r2
 8003088:	4b3b      	ldr	r3, [pc, #236]	; (8003178 <UART_SetConfig+0x2d4>)
 800308a:	fba3 2301 	umull	r2, r3, r3, r1
 800308e:	095b      	lsrs	r3, r3, #5
 8003090:	2264      	movs	r2, #100	; 0x64
 8003092:	fb02 f303 	mul.w	r3, r2, r3
 8003096:	1acb      	subs	r3, r1, r3
 8003098:	00db      	lsls	r3, r3, #3
 800309a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800309e:	4b36      	ldr	r3, [pc, #216]	; (8003178 <UART_SetConfig+0x2d4>)
 80030a0:	fba3 2302 	umull	r2, r3, r3, r2
 80030a4:	095b      	lsrs	r3, r3, #5
 80030a6:	005b      	lsls	r3, r3, #1
 80030a8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80030ac:	441c      	add	r4, r3
 80030ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030b2:	2200      	movs	r2, #0
 80030b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80030b8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80030bc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80030c0:	4642      	mov	r2, r8
 80030c2:	464b      	mov	r3, r9
 80030c4:	1891      	adds	r1, r2, r2
 80030c6:	63b9      	str	r1, [r7, #56]	; 0x38
 80030c8:	415b      	adcs	r3, r3
 80030ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80030d0:	4641      	mov	r1, r8
 80030d2:	1851      	adds	r1, r2, r1
 80030d4:	6339      	str	r1, [r7, #48]	; 0x30
 80030d6:	4649      	mov	r1, r9
 80030d8:	414b      	adcs	r3, r1
 80030da:	637b      	str	r3, [r7, #52]	; 0x34
 80030dc:	f04f 0200 	mov.w	r2, #0
 80030e0:	f04f 0300 	mov.w	r3, #0
 80030e4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80030e8:	4659      	mov	r1, fp
 80030ea:	00cb      	lsls	r3, r1, #3
 80030ec:	4651      	mov	r1, sl
 80030ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80030f2:	4651      	mov	r1, sl
 80030f4:	00ca      	lsls	r2, r1, #3
 80030f6:	4610      	mov	r0, r2
 80030f8:	4619      	mov	r1, r3
 80030fa:	4603      	mov	r3, r0
 80030fc:	4642      	mov	r2, r8
 80030fe:	189b      	adds	r3, r3, r2
 8003100:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003104:	464b      	mov	r3, r9
 8003106:	460a      	mov	r2, r1
 8003108:	eb42 0303 	adc.w	r3, r2, r3
 800310c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800311c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003120:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003124:	460b      	mov	r3, r1
 8003126:	18db      	adds	r3, r3, r3
 8003128:	62bb      	str	r3, [r7, #40]	; 0x28
 800312a:	4613      	mov	r3, r2
 800312c:	eb42 0303 	adc.w	r3, r2, r3
 8003130:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003132:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003136:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800313a:	f7fd f8b9 	bl	80002b0 <__aeabi_uldivmod>
 800313e:	4602      	mov	r2, r0
 8003140:	460b      	mov	r3, r1
 8003142:	4b0d      	ldr	r3, [pc, #52]	; (8003178 <UART_SetConfig+0x2d4>)
 8003144:	fba3 1302 	umull	r1, r3, r3, r2
 8003148:	095b      	lsrs	r3, r3, #5
 800314a:	2164      	movs	r1, #100	; 0x64
 800314c:	fb01 f303 	mul.w	r3, r1, r3
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	00db      	lsls	r3, r3, #3
 8003154:	3332      	adds	r3, #50	; 0x32
 8003156:	4a08      	ldr	r2, [pc, #32]	; (8003178 <UART_SetConfig+0x2d4>)
 8003158:	fba2 2303 	umull	r2, r3, r2, r3
 800315c:	095b      	lsrs	r3, r3, #5
 800315e:	f003 0207 	and.w	r2, r3, #7
 8003162:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4422      	add	r2, r4
 800316a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800316c:	e105      	b.n	800337a <UART_SetConfig+0x4d6>
 800316e:	bf00      	nop
 8003170:	40011000 	.word	0x40011000
 8003174:	40011400 	.word	0x40011400
 8003178:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800317c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003180:	2200      	movs	r2, #0
 8003182:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003186:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800318a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800318e:	4642      	mov	r2, r8
 8003190:	464b      	mov	r3, r9
 8003192:	1891      	adds	r1, r2, r2
 8003194:	6239      	str	r1, [r7, #32]
 8003196:	415b      	adcs	r3, r3
 8003198:	627b      	str	r3, [r7, #36]	; 0x24
 800319a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800319e:	4641      	mov	r1, r8
 80031a0:	1854      	adds	r4, r2, r1
 80031a2:	4649      	mov	r1, r9
 80031a4:	eb43 0501 	adc.w	r5, r3, r1
 80031a8:	f04f 0200 	mov.w	r2, #0
 80031ac:	f04f 0300 	mov.w	r3, #0
 80031b0:	00eb      	lsls	r3, r5, #3
 80031b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031b6:	00e2      	lsls	r2, r4, #3
 80031b8:	4614      	mov	r4, r2
 80031ba:	461d      	mov	r5, r3
 80031bc:	4643      	mov	r3, r8
 80031be:	18e3      	adds	r3, r4, r3
 80031c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80031c4:	464b      	mov	r3, r9
 80031c6:	eb45 0303 	adc.w	r3, r5, r3
 80031ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80031ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80031da:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80031de:	f04f 0200 	mov.w	r2, #0
 80031e2:	f04f 0300 	mov.w	r3, #0
 80031e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80031ea:	4629      	mov	r1, r5
 80031ec:	008b      	lsls	r3, r1, #2
 80031ee:	4621      	mov	r1, r4
 80031f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80031f4:	4621      	mov	r1, r4
 80031f6:	008a      	lsls	r2, r1, #2
 80031f8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80031fc:	f7fd f858 	bl	80002b0 <__aeabi_uldivmod>
 8003200:	4602      	mov	r2, r0
 8003202:	460b      	mov	r3, r1
 8003204:	4b60      	ldr	r3, [pc, #384]	; (8003388 <UART_SetConfig+0x4e4>)
 8003206:	fba3 2302 	umull	r2, r3, r3, r2
 800320a:	095b      	lsrs	r3, r3, #5
 800320c:	011c      	lsls	r4, r3, #4
 800320e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003212:	2200      	movs	r2, #0
 8003214:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003218:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800321c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003220:	4642      	mov	r2, r8
 8003222:	464b      	mov	r3, r9
 8003224:	1891      	adds	r1, r2, r2
 8003226:	61b9      	str	r1, [r7, #24]
 8003228:	415b      	adcs	r3, r3
 800322a:	61fb      	str	r3, [r7, #28]
 800322c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003230:	4641      	mov	r1, r8
 8003232:	1851      	adds	r1, r2, r1
 8003234:	6139      	str	r1, [r7, #16]
 8003236:	4649      	mov	r1, r9
 8003238:	414b      	adcs	r3, r1
 800323a:	617b      	str	r3, [r7, #20]
 800323c:	f04f 0200 	mov.w	r2, #0
 8003240:	f04f 0300 	mov.w	r3, #0
 8003244:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003248:	4659      	mov	r1, fp
 800324a:	00cb      	lsls	r3, r1, #3
 800324c:	4651      	mov	r1, sl
 800324e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003252:	4651      	mov	r1, sl
 8003254:	00ca      	lsls	r2, r1, #3
 8003256:	4610      	mov	r0, r2
 8003258:	4619      	mov	r1, r3
 800325a:	4603      	mov	r3, r0
 800325c:	4642      	mov	r2, r8
 800325e:	189b      	adds	r3, r3, r2
 8003260:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003264:	464b      	mov	r3, r9
 8003266:	460a      	mov	r2, r1
 8003268:	eb42 0303 	adc.w	r3, r2, r3
 800326c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	67bb      	str	r3, [r7, #120]	; 0x78
 800327a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800327c:	f04f 0200 	mov.w	r2, #0
 8003280:	f04f 0300 	mov.w	r3, #0
 8003284:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003288:	4649      	mov	r1, r9
 800328a:	008b      	lsls	r3, r1, #2
 800328c:	4641      	mov	r1, r8
 800328e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003292:	4641      	mov	r1, r8
 8003294:	008a      	lsls	r2, r1, #2
 8003296:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800329a:	f7fd f809 	bl	80002b0 <__aeabi_uldivmod>
 800329e:	4602      	mov	r2, r0
 80032a0:	460b      	mov	r3, r1
 80032a2:	4b39      	ldr	r3, [pc, #228]	; (8003388 <UART_SetConfig+0x4e4>)
 80032a4:	fba3 1302 	umull	r1, r3, r3, r2
 80032a8:	095b      	lsrs	r3, r3, #5
 80032aa:	2164      	movs	r1, #100	; 0x64
 80032ac:	fb01 f303 	mul.w	r3, r1, r3
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	011b      	lsls	r3, r3, #4
 80032b4:	3332      	adds	r3, #50	; 0x32
 80032b6:	4a34      	ldr	r2, [pc, #208]	; (8003388 <UART_SetConfig+0x4e4>)
 80032b8:	fba2 2303 	umull	r2, r3, r2, r3
 80032bc:	095b      	lsrs	r3, r3, #5
 80032be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032c2:	441c      	add	r4, r3
 80032c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032c8:	2200      	movs	r2, #0
 80032ca:	673b      	str	r3, [r7, #112]	; 0x70
 80032cc:	677a      	str	r2, [r7, #116]	; 0x74
 80032ce:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80032d2:	4642      	mov	r2, r8
 80032d4:	464b      	mov	r3, r9
 80032d6:	1891      	adds	r1, r2, r2
 80032d8:	60b9      	str	r1, [r7, #8]
 80032da:	415b      	adcs	r3, r3
 80032dc:	60fb      	str	r3, [r7, #12]
 80032de:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80032e2:	4641      	mov	r1, r8
 80032e4:	1851      	adds	r1, r2, r1
 80032e6:	6039      	str	r1, [r7, #0]
 80032e8:	4649      	mov	r1, r9
 80032ea:	414b      	adcs	r3, r1
 80032ec:	607b      	str	r3, [r7, #4]
 80032ee:	f04f 0200 	mov.w	r2, #0
 80032f2:	f04f 0300 	mov.w	r3, #0
 80032f6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80032fa:	4659      	mov	r1, fp
 80032fc:	00cb      	lsls	r3, r1, #3
 80032fe:	4651      	mov	r1, sl
 8003300:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003304:	4651      	mov	r1, sl
 8003306:	00ca      	lsls	r2, r1, #3
 8003308:	4610      	mov	r0, r2
 800330a:	4619      	mov	r1, r3
 800330c:	4603      	mov	r3, r0
 800330e:	4642      	mov	r2, r8
 8003310:	189b      	adds	r3, r3, r2
 8003312:	66bb      	str	r3, [r7, #104]	; 0x68
 8003314:	464b      	mov	r3, r9
 8003316:	460a      	mov	r2, r1
 8003318:	eb42 0303 	adc.w	r3, r2, r3
 800331c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800331e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	2200      	movs	r2, #0
 8003326:	663b      	str	r3, [r7, #96]	; 0x60
 8003328:	667a      	str	r2, [r7, #100]	; 0x64
 800332a:	f04f 0200 	mov.w	r2, #0
 800332e:	f04f 0300 	mov.w	r3, #0
 8003332:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003336:	4649      	mov	r1, r9
 8003338:	008b      	lsls	r3, r1, #2
 800333a:	4641      	mov	r1, r8
 800333c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003340:	4641      	mov	r1, r8
 8003342:	008a      	lsls	r2, r1, #2
 8003344:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003348:	f7fc ffb2 	bl	80002b0 <__aeabi_uldivmod>
 800334c:	4602      	mov	r2, r0
 800334e:	460b      	mov	r3, r1
 8003350:	4b0d      	ldr	r3, [pc, #52]	; (8003388 <UART_SetConfig+0x4e4>)
 8003352:	fba3 1302 	umull	r1, r3, r3, r2
 8003356:	095b      	lsrs	r3, r3, #5
 8003358:	2164      	movs	r1, #100	; 0x64
 800335a:	fb01 f303 	mul.w	r3, r1, r3
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	011b      	lsls	r3, r3, #4
 8003362:	3332      	adds	r3, #50	; 0x32
 8003364:	4a08      	ldr	r2, [pc, #32]	; (8003388 <UART_SetConfig+0x4e4>)
 8003366:	fba2 2303 	umull	r2, r3, r2, r3
 800336a:	095b      	lsrs	r3, r3, #5
 800336c:	f003 020f 	and.w	r2, r3, #15
 8003370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4422      	add	r2, r4
 8003378:	609a      	str	r2, [r3, #8]
}
 800337a:	bf00      	nop
 800337c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003380:	46bd      	mov	sp, r7
 8003382:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003386:	bf00      	nop
 8003388:	51eb851f 	.word	0x51eb851f

0800338c <__errno>:
 800338c:	4b01      	ldr	r3, [pc, #4]	; (8003394 <__errno+0x8>)
 800338e:	6818      	ldr	r0, [r3, #0]
 8003390:	4770      	bx	lr
 8003392:	bf00      	nop
 8003394:	2000000c 	.word	0x2000000c

08003398 <__libc_init_array>:
 8003398:	b570      	push	{r4, r5, r6, lr}
 800339a:	4d0d      	ldr	r5, [pc, #52]	; (80033d0 <__libc_init_array+0x38>)
 800339c:	4c0d      	ldr	r4, [pc, #52]	; (80033d4 <__libc_init_array+0x3c>)
 800339e:	1b64      	subs	r4, r4, r5
 80033a0:	10a4      	asrs	r4, r4, #2
 80033a2:	2600      	movs	r6, #0
 80033a4:	42a6      	cmp	r6, r4
 80033a6:	d109      	bne.n	80033bc <__libc_init_array+0x24>
 80033a8:	4d0b      	ldr	r5, [pc, #44]	; (80033d8 <__libc_init_array+0x40>)
 80033aa:	4c0c      	ldr	r4, [pc, #48]	; (80033dc <__libc_init_array+0x44>)
 80033ac:	f001 f8fa 	bl	80045a4 <_init>
 80033b0:	1b64      	subs	r4, r4, r5
 80033b2:	10a4      	asrs	r4, r4, #2
 80033b4:	2600      	movs	r6, #0
 80033b6:	42a6      	cmp	r6, r4
 80033b8:	d105      	bne.n	80033c6 <__libc_init_array+0x2e>
 80033ba:	bd70      	pop	{r4, r5, r6, pc}
 80033bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80033c0:	4798      	blx	r3
 80033c2:	3601      	adds	r6, #1
 80033c4:	e7ee      	b.n	80033a4 <__libc_init_array+0xc>
 80033c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80033ca:	4798      	blx	r3
 80033cc:	3601      	adds	r6, #1
 80033ce:	e7f2      	b.n	80033b6 <__libc_init_array+0x1e>
 80033d0:	08004698 	.word	0x08004698
 80033d4:	08004698 	.word	0x08004698
 80033d8:	08004698 	.word	0x08004698
 80033dc:	0800469c 	.word	0x0800469c

080033e0 <memset>:
 80033e0:	4402      	add	r2, r0
 80033e2:	4603      	mov	r3, r0
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d100      	bne.n	80033ea <memset+0xa>
 80033e8:	4770      	bx	lr
 80033ea:	f803 1b01 	strb.w	r1, [r3], #1
 80033ee:	e7f9      	b.n	80033e4 <memset+0x4>

080033f0 <iprintf>:
 80033f0:	b40f      	push	{r0, r1, r2, r3}
 80033f2:	4b0a      	ldr	r3, [pc, #40]	; (800341c <iprintf+0x2c>)
 80033f4:	b513      	push	{r0, r1, r4, lr}
 80033f6:	681c      	ldr	r4, [r3, #0]
 80033f8:	b124      	cbz	r4, 8003404 <iprintf+0x14>
 80033fa:	69a3      	ldr	r3, [r4, #24]
 80033fc:	b913      	cbnz	r3, 8003404 <iprintf+0x14>
 80033fe:	4620      	mov	r0, r4
 8003400:	f000 fb2c 	bl	8003a5c <__sinit>
 8003404:	ab05      	add	r3, sp, #20
 8003406:	9a04      	ldr	r2, [sp, #16]
 8003408:	68a1      	ldr	r1, [r4, #8]
 800340a:	9301      	str	r3, [sp, #4]
 800340c:	4620      	mov	r0, r4
 800340e:	f000 fd3d 	bl	8003e8c <_vfiprintf_r>
 8003412:	b002      	add	sp, #8
 8003414:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003418:	b004      	add	sp, #16
 800341a:	4770      	bx	lr
 800341c:	2000000c 	.word	0x2000000c

08003420 <_puts_r>:
 8003420:	b570      	push	{r4, r5, r6, lr}
 8003422:	460e      	mov	r6, r1
 8003424:	4605      	mov	r5, r0
 8003426:	b118      	cbz	r0, 8003430 <_puts_r+0x10>
 8003428:	6983      	ldr	r3, [r0, #24]
 800342a:	b90b      	cbnz	r3, 8003430 <_puts_r+0x10>
 800342c:	f000 fb16 	bl	8003a5c <__sinit>
 8003430:	69ab      	ldr	r3, [r5, #24]
 8003432:	68ac      	ldr	r4, [r5, #8]
 8003434:	b913      	cbnz	r3, 800343c <_puts_r+0x1c>
 8003436:	4628      	mov	r0, r5
 8003438:	f000 fb10 	bl	8003a5c <__sinit>
 800343c:	4b2c      	ldr	r3, [pc, #176]	; (80034f0 <_puts_r+0xd0>)
 800343e:	429c      	cmp	r4, r3
 8003440:	d120      	bne.n	8003484 <_puts_r+0x64>
 8003442:	686c      	ldr	r4, [r5, #4]
 8003444:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003446:	07db      	lsls	r3, r3, #31
 8003448:	d405      	bmi.n	8003456 <_puts_r+0x36>
 800344a:	89a3      	ldrh	r3, [r4, #12]
 800344c:	0598      	lsls	r0, r3, #22
 800344e:	d402      	bmi.n	8003456 <_puts_r+0x36>
 8003450:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003452:	f000 fba1 	bl	8003b98 <__retarget_lock_acquire_recursive>
 8003456:	89a3      	ldrh	r3, [r4, #12]
 8003458:	0719      	lsls	r1, r3, #28
 800345a:	d51d      	bpl.n	8003498 <_puts_r+0x78>
 800345c:	6923      	ldr	r3, [r4, #16]
 800345e:	b1db      	cbz	r3, 8003498 <_puts_r+0x78>
 8003460:	3e01      	subs	r6, #1
 8003462:	68a3      	ldr	r3, [r4, #8]
 8003464:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003468:	3b01      	subs	r3, #1
 800346a:	60a3      	str	r3, [r4, #8]
 800346c:	bb39      	cbnz	r1, 80034be <_puts_r+0x9e>
 800346e:	2b00      	cmp	r3, #0
 8003470:	da38      	bge.n	80034e4 <_puts_r+0xc4>
 8003472:	4622      	mov	r2, r4
 8003474:	210a      	movs	r1, #10
 8003476:	4628      	mov	r0, r5
 8003478:	f000 f916 	bl	80036a8 <__swbuf_r>
 800347c:	3001      	adds	r0, #1
 800347e:	d011      	beq.n	80034a4 <_puts_r+0x84>
 8003480:	250a      	movs	r5, #10
 8003482:	e011      	b.n	80034a8 <_puts_r+0x88>
 8003484:	4b1b      	ldr	r3, [pc, #108]	; (80034f4 <_puts_r+0xd4>)
 8003486:	429c      	cmp	r4, r3
 8003488:	d101      	bne.n	800348e <_puts_r+0x6e>
 800348a:	68ac      	ldr	r4, [r5, #8]
 800348c:	e7da      	b.n	8003444 <_puts_r+0x24>
 800348e:	4b1a      	ldr	r3, [pc, #104]	; (80034f8 <_puts_r+0xd8>)
 8003490:	429c      	cmp	r4, r3
 8003492:	bf08      	it	eq
 8003494:	68ec      	ldreq	r4, [r5, #12]
 8003496:	e7d5      	b.n	8003444 <_puts_r+0x24>
 8003498:	4621      	mov	r1, r4
 800349a:	4628      	mov	r0, r5
 800349c:	f000 f956 	bl	800374c <__swsetup_r>
 80034a0:	2800      	cmp	r0, #0
 80034a2:	d0dd      	beq.n	8003460 <_puts_r+0x40>
 80034a4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80034a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80034aa:	07da      	lsls	r2, r3, #31
 80034ac:	d405      	bmi.n	80034ba <_puts_r+0x9a>
 80034ae:	89a3      	ldrh	r3, [r4, #12]
 80034b0:	059b      	lsls	r3, r3, #22
 80034b2:	d402      	bmi.n	80034ba <_puts_r+0x9a>
 80034b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80034b6:	f000 fb70 	bl	8003b9a <__retarget_lock_release_recursive>
 80034ba:	4628      	mov	r0, r5
 80034bc:	bd70      	pop	{r4, r5, r6, pc}
 80034be:	2b00      	cmp	r3, #0
 80034c0:	da04      	bge.n	80034cc <_puts_r+0xac>
 80034c2:	69a2      	ldr	r2, [r4, #24]
 80034c4:	429a      	cmp	r2, r3
 80034c6:	dc06      	bgt.n	80034d6 <_puts_r+0xb6>
 80034c8:	290a      	cmp	r1, #10
 80034ca:	d004      	beq.n	80034d6 <_puts_r+0xb6>
 80034cc:	6823      	ldr	r3, [r4, #0]
 80034ce:	1c5a      	adds	r2, r3, #1
 80034d0:	6022      	str	r2, [r4, #0]
 80034d2:	7019      	strb	r1, [r3, #0]
 80034d4:	e7c5      	b.n	8003462 <_puts_r+0x42>
 80034d6:	4622      	mov	r2, r4
 80034d8:	4628      	mov	r0, r5
 80034da:	f000 f8e5 	bl	80036a8 <__swbuf_r>
 80034de:	3001      	adds	r0, #1
 80034e0:	d1bf      	bne.n	8003462 <_puts_r+0x42>
 80034e2:	e7df      	b.n	80034a4 <_puts_r+0x84>
 80034e4:	6823      	ldr	r3, [r4, #0]
 80034e6:	250a      	movs	r5, #10
 80034e8:	1c5a      	adds	r2, r3, #1
 80034ea:	6022      	str	r2, [r4, #0]
 80034ec:	701d      	strb	r5, [r3, #0]
 80034ee:	e7db      	b.n	80034a8 <_puts_r+0x88>
 80034f0:	0800461c 	.word	0x0800461c
 80034f4:	0800463c 	.word	0x0800463c
 80034f8:	080045fc 	.word	0x080045fc

080034fc <puts>:
 80034fc:	4b02      	ldr	r3, [pc, #8]	; (8003508 <puts+0xc>)
 80034fe:	4601      	mov	r1, r0
 8003500:	6818      	ldr	r0, [r3, #0]
 8003502:	f7ff bf8d 	b.w	8003420 <_puts_r>
 8003506:	bf00      	nop
 8003508:	2000000c 	.word	0x2000000c

0800350c <setbuf>:
 800350c:	2900      	cmp	r1, #0
 800350e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003512:	bf0c      	ite	eq
 8003514:	2202      	moveq	r2, #2
 8003516:	2200      	movne	r2, #0
 8003518:	f000 b800 	b.w	800351c <setvbuf>

0800351c <setvbuf>:
 800351c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003520:	461d      	mov	r5, r3
 8003522:	4b5d      	ldr	r3, [pc, #372]	; (8003698 <setvbuf+0x17c>)
 8003524:	681f      	ldr	r7, [r3, #0]
 8003526:	4604      	mov	r4, r0
 8003528:	460e      	mov	r6, r1
 800352a:	4690      	mov	r8, r2
 800352c:	b127      	cbz	r7, 8003538 <setvbuf+0x1c>
 800352e:	69bb      	ldr	r3, [r7, #24]
 8003530:	b913      	cbnz	r3, 8003538 <setvbuf+0x1c>
 8003532:	4638      	mov	r0, r7
 8003534:	f000 fa92 	bl	8003a5c <__sinit>
 8003538:	4b58      	ldr	r3, [pc, #352]	; (800369c <setvbuf+0x180>)
 800353a:	429c      	cmp	r4, r3
 800353c:	d167      	bne.n	800360e <setvbuf+0xf2>
 800353e:	687c      	ldr	r4, [r7, #4]
 8003540:	f1b8 0f02 	cmp.w	r8, #2
 8003544:	d006      	beq.n	8003554 <setvbuf+0x38>
 8003546:	f1b8 0f01 	cmp.w	r8, #1
 800354a:	f200 809f 	bhi.w	800368c <setvbuf+0x170>
 800354e:	2d00      	cmp	r5, #0
 8003550:	f2c0 809c 	blt.w	800368c <setvbuf+0x170>
 8003554:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003556:	07db      	lsls	r3, r3, #31
 8003558:	d405      	bmi.n	8003566 <setvbuf+0x4a>
 800355a:	89a3      	ldrh	r3, [r4, #12]
 800355c:	0598      	lsls	r0, r3, #22
 800355e:	d402      	bmi.n	8003566 <setvbuf+0x4a>
 8003560:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003562:	f000 fb19 	bl	8003b98 <__retarget_lock_acquire_recursive>
 8003566:	4621      	mov	r1, r4
 8003568:	4638      	mov	r0, r7
 800356a:	f000 f9e3 	bl	8003934 <_fflush_r>
 800356e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003570:	b141      	cbz	r1, 8003584 <setvbuf+0x68>
 8003572:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003576:	4299      	cmp	r1, r3
 8003578:	d002      	beq.n	8003580 <setvbuf+0x64>
 800357a:	4638      	mov	r0, r7
 800357c:	f000 fb7c 	bl	8003c78 <_free_r>
 8003580:	2300      	movs	r3, #0
 8003582:	6363      	str	r3, [r4, #52]	; 0x34
 8003584:	2300      	movs	r3, #0
 8003586:	61a3      	str	r3, [r4, #24]
 8003588:	6063      	str	r3, [r4, #4]
 800358a:	89a3      	ldrh	r3, [r4, #12]
 800358c:	0619      	lsls	r1, r3, #24
 800358e:	d503      	bpl.n	8003598 <setvbuf+0x7c>
 8003590:	6921      	ldr	r1, [r4, #16]
 8003592:	4638      	mov	r0, r7
 8003594:	f000 fb70 	bl	8003c78 <_free_r>
 8003598:	89a3      	ldrh	r3, [r4, #12]
 800359a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800359e:	f023 0303 	bic.w	r3, r3, #3
 80035a2:	f1b8 0f02 	cmp.w	r8, #2
 80035a6:	81a3      	strh	r3, [r4, #12]
 80035a8:	d06c      	beq.n	8003684 <setvbuf+0x168>
 80035aa:	ab01      	add	r3, sp, #4
 80035ac:	466a      	mov	r2, sp
 80035ae:	4621      	mov	r1, r4
 80035b0:	4638      	mov	r0, r7
 80035b2:	f000 faf3 	bl	8003b9c <__swhatbuf_r>
 80035b6:	89a3      	ldrh	r3, [r4, #12]
 80035b8:	4318      	orrs	r0, r3
 80035ba:	81a0      	strh	r0, [r4, #12]
 80035bc:	2d00      	cmp	r5, #0
 80035be:	d130      	bne.n	8003622 <setvbuf+0x106>
 80035c0:	9d00      	ldr	r5, [sp, #0]
 80035c2:	4628      	mov	r0, r5
 80035c4:	f000 fb50 	bl	8003c68 <malloc>
 80035c8:	4606      	mov	r6, r0
 80035ca:	2800      	cmp	r0, #0
 80035cc:	d155      	bne.n	800367a <setvbuf+0x15e>
 80035ce:	f8dd 9000 	ldr.w	r9, [sp]
 80035d2:	45a9      	cmp	r9, r5
 80035d4:	d14a      	bne.n	800366c <setvbuf+0x150>
 80035d6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80035da:	2200      	movs	r2, #0
 80035dc:	60a2      	str	r2, [r4, #8]
 80035de:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80035e2:	6022      	str	r2, [r4, #0]
 80035e4:	6122      	str	r2, [r4, #16]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80035ec:	6162      	str	r2, [r4, #20]
 80035ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80035f0:	f043 0302 	orr.w	r3, r3, #2
 80035f4:	07d2      	lsls	r2, r2, #31
 80035f6:	81a3      	strh	r3, [r4, #12]
 80035f8:	d405      	bmi.n	8003606 <setvbuf+0xea>
 80035fa:	f413 7f00 	tst.w	r3, #512	; 0x200
 80035fe:	d102      	bne.n	8003606 <setvbuf+0xea>
 8003600:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003602:	f000 faca 	bl	8003b9a <__retarget_lock_release_recursive>
 8003606:	4628      	mov	r0, r5
 8003608:	b003      	add	sp, #12
 800360a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800360e:	4b24      	ldr	r3, [pc, #144]	; (80036a0 <setvbuf+0x184>)
 8003610:	429c      	cmp	r4, r3
 8003612:	d101      	bne.n	8003618 <setvbuf+0xfc>
 8003614:	68bc      	ldr	r4, [r7, #8]
 8003616:	e793      	b.n	8003540 <setvbuf+0x24>
 8003618:	4b22      	ldr	r3, [pc, #136]	; (80036a4 <setvbuf+0x188>)
 800361a:	429c      	cmp	r4, r3
 800361c:	bf08      	it	eq
 800361e:	68fc      	ldreq	r4, [r7, #12]
 8003620:	e78e      	b.n	8003540 <setvbuf+0x24>
 8003622:	2e00      	cmp	r6, #0
 8003624:	d0cd      	beq.n	80035c2 <setvbuf+0xa6>
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	b913      	cbnz	r3, 8003630 <setvbuf+0x114>
 800362a:	4638      	mov	r0, r7
 800362c:	f000 fa16 	bl	8003a5c <__sinit>
 8003630:	f1b8 0f01 	cmp.w	r8, #1
 8003634:	bf08      	it	eq
 8003636:	89a3      	ldrheq	r3, [r4, #12]
 8003638:	6026      	str	r6, [r4, #0]
 800363a:	bf04      	itt	eq
 800363c:	f043 0301 	orreq.w	r3, r3, #1
 8003640:	81a3      	strheq	r3, [r4, #12]
 8003642:	89a2      	ldrh	r2, [r4, #12]
 8003644:	f012 0308 	ands.w	r3, r2, #8
 8003648:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800364c:	d01c      	beq.n	8003688 <setvbuf+0x16c>
 800364e:	07d3      	lsls	r3, r2, #31
 8003650:	bf41      	itttt	mi
 8003652:	2300      	movmi	r3, #0
 8003654:	426d      	negmi	r5, r5
 8003656:	60a3      	strmi	r3, [r4, #8]
 8003658:	61a5      	strmi	r5, [r4, #24]
 800365a:	bf58      	it	pl
 800365c:	60a5      	strpl	r5, [r4, #8]
 800365e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8003660:	f015 0501 	ands.w	r5, r5, #1
 8003664:	d115      	bne.n	8003692 <setvbuf+0x176>
 8003666:	f412 7f00 	tst.w	r2, #512	; 0x200
 800366a:	e7c8      	b.n	80035fe <setvbuf+0xe2>
 800366c:	4648      	mov	r0, r9
 800366e:	f000 fafb 	bl	8003c68 <malloc>
 8003672:	4606      	mov	r6, r0
 8003674:	2800      	cmp	r0, #0
 8003676:	d0ae      	beq.n	80035d6 <setvbuf+0xba>
 8003678:	464d      	mov	r5, r9
 800367a:	89a3      	ldrh	r3, [r4, #12]
 800367c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003680:	81a3      	strh	r3, [r4, #12]
 8003682:	e7d0      	b.n	8003626 <setvbuf+0x10a>
 8003684:	2500      	movs	r5, #0
 8003686:	e7a8      	b.n	80035da <setvbuf+0xbe>
 8003688:	60a3      	str	r3, [r4, #8]
 800368a:	e7e8      	b.n	800365e <setvbuf+0x142>
 800368c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003690:	e7b9      	b.n	8003606 <setvbuf+0xea>
 8003692:	2500      	movs	r5, #0
 8003694:	e7b7      	b.n	8003606 <setvbuf+0xea>
 8003696:	bf00      	nop
 8003698:	2000000c 	.word	0x2000000c
 800369c:	0800461c 	.word	0x0800461c
 80036a0:	0800463c 	.word	0x0800463c
 80036a4:	080045fc 	.word	0x080045fc

080036a8 <__swbuf_r>:
 80036a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036aa:	460e      	mov	r6, r1
 80036ac:	4614      	mov	r4, r2
 80036ae:	4605      	mov	r5, r0
 80036b0:	b118      	cbz	r0, 80036ba <__swbuf_r+0x12>
 80036b2:	6983      	ldr	r3, [r0, #24]
 80036b4:	b90b      	cbnz	r3, 80036ba <__swbuf_r+0x12>
 80036b6:	f000 f9d1 	bl	8003a5c <__sinit>
 80036ba:	4b21      	ldr	r3, [pc, #132]	; (8003740 <__swbuf_r+0x98>)
 80036bc:	429c      	cmp	r4, r3
 80036be:	d12b      	bne.n	8003718 <__swbuf_r+0x70>
 80036c0:	686c      	ldr	r4, [r5, #4]
 80036c2:	69a3      	ldr	r3, [r4, #24]
 80036c4:	60a3      	str	r3, [r4, #8]
 80036c6:	89a3      	ldrh	r3, [r4, #12]
 80036c8:	071a      	lsls	r2, r3, #28
 80036ca:	d52f      	bpl.n	800372c <__swbuf_r+0x84>
 80036cc:	6923      	ldr	r3, [r4, #16]
 80036ce:	b36b      	cbz	r3, 800372c <__swbuf_r+0x84>
 80036d0:	6923      	ldr	r3, [r4, #16]
 80036d2:	6820      	ldr	r0, [r4, #0]
 80036d4:	1ac0      	subs	r0, r0, r3
 80036d6:	6963      	ldr	r3, [r4, #20]
 80036d8:	b2f6      	uxtb	r6, r6
 80036da:	4283      	cmp	r3, r0
 80036dc:	4637      	mov	r7, r6
 80036de:	dc04      	bgt.n	80036ea <__swbuf_r+0x42>
 80036e0:	4621      	mov	r1, r4
 80036e2:	4628      	mov	r0, r5
 80036e4:	f000 f926 	bl	8003934 <_fflush_r>
 80036e8:	bb30      	cbnz	r0, 8003738 <__swbuf_r+0x90>
 80036ea:	68a3      	ldr	r3, [r4, #8]
 80036ec:	3b01      	subs	r3, #1
 80036ee:	60a3      	str	r3, [r4, #8]
 80036f0:	6823      	ldr	r3, [r4, #0]
 80036f2:	1c5a      	adds	r2, r3, #1
 80036f4:	6022      	str	r2, [r4, #0]
 80036f6:	701e      	strb	r6, [r3, #0]
 80036f8:	6963      	ldr	r3, [r4, #20]
 80036fa:	3001      	adds	r0, #1
 80036fc:	4283      	cmp	r3, r0
 80036fe:	d004      	beq.n	800370a <__swbuf_r+0x62>
 8003700:	89a3      	ldrh	r3, [r4, #12]
 8003702:	07db      	lsls	r3, r3, #31
 8003704:	d506      	bpl.n	8003714 <__swbuf_r+0x6c>
 8003706:	2e0a      	cmp	r6, #10
 8003708:	d104      	bne.n	8003714 <__swbuf_r+0x6c>
 800370a:	4621      	mov	r1, r4
 800370c:	4628      	mov	r0, r5
 800370e:	f000 f911 	bl	8003934 <_fflush_r>
 8003712:	b988      	cbnz	r0, 8003738 <__swbuf_r+0x90>
 8003714:	4638      	mov	r0, r7
 8003716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003718:	4b0a      	ldr	r3, [pc, #40]	; (8003744 <__swbuf_r+0x9c>)
 800371a:	429c      	cmp	r4, r3
 800371c:	d101      	bne.n	8003722 <__swbuf_r+0x7a>
 800371e:	68ac      	ldr	r4, [r5, #8]
 8003720:	e7cf      	b.n	80036c2 <__swbuf_r+0x1a>
 8003722:	4b09      	ldr	r3, [pc, #36]	; (8003748 <__swbuf_r+0xa0>)
 8003724:	429c      	cmp	r4, r3
 8003726:	bf08      	it	eq
 8003728:	68ec      	ldreq	r4, [r5, #12]
 800372a:	e7ca      	b.n	80036c2 <__swbuf_r+0x1a>
 800372c:	4621      	mov	r1, r4
 800372e:	4628      	mov	r0, r5
 8003730:	f000 f80c 	bl	800374c <__swsetup_r>
 8003734:	2800      	cmp	r0, #0
 8003736:	d0cb      	beq.n	80036d0 <__swbuf_r+0x28>
 8003738:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800373c:	e7ea      	b.n	8003714 <__swbuf_r+0x6c>
 800373e:	bf00      	nop
 8003740:	0800461c 	.word	0x0800461c
 8003744:	0800463c 	.word	0x0800463c
 8003748:	080045fc 	.word	0x080045fc

0800374c <__swsetup_r>:
 800374c:	4b32      	ldr	r3, [pc, #200]	; (8003818 <__swsetup_r+0xcc>)
 800374e:	b570      	push	{r4, r5, r6, lr}
 8003750:	681d      	ldr	r5, [r3, #0]
 8003752:	4606      	mov	r6, r0
 8003754:	460c      	mov	r4, r1
 8003756:	b125      	cbz	r5, 8003762 <__swsetup_r+0x16>
 8003758:	69ab      	ldr	r3, [r5, #24]
 800375a:	b913      	cbnz	r3, 8003762 <__swsetup_r+0x16>
 800375c:	4628      	mov	r0, r5
 800375e:	f000 f97d 	bl	8003a5c <__sinit>
 8003762:	4b2e      	ldr	r3, [pc, #184]	; (800381c <__swsetup_r+0xd0>)
 8003764:	429c      	cmp	r4, r3
 8003766:	d10f      	bne.n	8003788 <__swsetup_r+0x3c>
 8003768:	686c      	ldr	r4, [r5, #4]
 800376a:	89a3      	ldrh	r3, [r4, #12]
 800376c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003770:	0719      	lsls	r1, r3, #28
 8003772:	d42c      	bmi.n	80037ce <__swsetup_r+0x82>
 8003774:	06dd      	lsls	r5, r3, #27
 8003776:	d411      	bmi.n	800379c <__swsetup_r+0x50>
 8003778:	2309      	movs	r3, #9
 800377a:	6033      	str	r3, [r6, #0]
 800377c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003780:	81a3      	strh	r3, [r4, #12]
 8003782:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003786:	e03e      	b.n	8003806 <__swsetup_r+0xba>
 8003788:	4b25      	ldr	r3, [pc, #148]	; (8003820 <__swsetup_r+0xd4>)
 800378a:	429c      	cmp	r4, r3
 800378c:	d101      	bne.n	8003792 <__swsetup_r+0x46>
 800378e:	68ac      	ldr	r4, [r5, #8]
 8003790:	e7eb      	b.n	800376a <__swsetup_r+0x1e>
 8003792:	4b24      	ldr	r3, [pc, #144]	; (8003824 <__swsetup_r+0xd8>)
 8003794:	429c      	cmp	r4, r3
 8003796:	bf08      	it	eq
 8003798:	68ec      	ldreq	r4, [r5, #12]
 800379a:	e7e6      	b.n	800376a <__swsetup_r+0x1e>
 800379c:	0758      	lsls	r0, r3, #29
 800379e:	d512      	bpl.n	80037c6 <__swsetup_r+0x7a>
 80037a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80037a2:	b141      	cbz	r1, 80037b6 <__swsetup_r+0x6a>
 80037a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80037a8:	4299      	cmp	r1, r3
 80037aa:	d002      	beq.n	80037b2 <__swsetup_r+0x66>
 80037ac:	4630      	mov	r0, r6
 80037ae:	f000 fa63 	bl	8003c78 <_free_r>
 80037b2:	2300      	movs	r3, #0
 80037b4:	6363      	str	r3, [r4, #52]	; 0x34
 80037b6:	89a3      	ldrh	r3, [r4, #12]
 80037b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80037bc:	81a3      	strh	r3, [r4, #12]
 80037be:	2300      	movs	r3, #0
 80037c0:	6063      	str	r3, [r4, #4]
 80037c2:	6923      	ldr	r3, [r4, #16]
 80037c4:	6023      	str	r3, [r4, #0]
 80037c6:	89a3      	ldrh	r3, [r4, #12]
 80037c8:	f043 0308 	orr.w	r3, r3, #8
 80037cc:	81a3      	strh	r3, [r4, #12]
 80037ce:	6923      	ldr	r3, [r4, #16]
 80037d0:	b94b      	cbnz	r3, 80037e6 <__swsetup_r+0x9a>
 80037d2:	89a3      	ldrh	r3, [r4, #12]
 80037d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80037d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037dc:	d003      	beq.n	80037e6 <__swsetup_r+0x9a>
 80037de:	4621      	mov	r1, r4
 80037e0:	4630      	mov	r0, r6
 80037e2:	f000 fa01 	bl	8003be8 <__smakebuf_r>
 80037e6:	89a0      	ldrh	r0, [r4, #12]
 80037e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80037ec:	f010 0301 	ands.w	r3, r0, #1
 80037f0:	d00a      	beq.n	8003808 <__swsetup_r+0xbc>
 80037f2:	2300      	movs	r3, #0
 80037f4:	60a3      	str	r3, [r4, #8]
 80037f6:	6963      	ldr	r3, [r4, #20]
 80037f8:	425b      	negs	r3, r3
 80037fa:	61a3      	str	r3, [r4, #24]
 80037fc:	6923      	ldr	r3, [r4, #16]
 80037fe:	b943      	cbnz	r3, 8003812 <__swsetup_r+0xc6>
 8003800:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003804:	d1ba      	bne.n	800377c <__swsetup_r+0x30>
 8003806:	bd70      	pop	{r4, r5, r6, pc}
 8003808:	0781      	lsls	r1, r0, #30
 800380a:	bf58      	it	pl
 800380c:	6963      	ldrpl	r3, [r4, #20]
 800380e:	60a3      	str	r3, [r4, #8]
 8003810:	e7f4      	b.n	80037fc <__swsetup_r+0xb0>
 8003812:	2000      	movs	r0, #0
 8003814:	e7f7      	b.n	8003806 <__swsetup_r+0xba>
 8003816:	bf00      	nop
 8003818:	2000000c 	.word	0x2000000c
 800381c:	0800461c 	.word	0x0800461c
 8003820:	0800463c 	.word	0x0800463c
 8003824:	080045fc 	.word	0x080045fc

08003828 <__sflush_r>:
 8003828:	898a      	ldrh	r2, [r1, #12]
 800382a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800382e:	4605      	mov	r5, r0
 8003830:	0710      	lsls	r0, r2, #28
 8003832:	460c      	mov	r4, r1
 8003834:	d458      	bmi.n	80038e8 <__sflush_r+0xc0>
 8003836:	684b      	ldr	r3, [r1, #4]
 8003838:	2b00      	cmp	r3, #0
 800383a:	dc05      	bgt.n	8003848 <__sflush_r+0x20>
 800383c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800383e:	2b00      	cmp	r3, #0
 8003840:	dc02      	bgt.n	8003848 <__sflush_r+0x20>
 8003842:	2000      	movs	r0, #0
 8003844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003848:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800384a:	2e00      	cmp	r6, #0
 800384c:	d0f9      	beq.n	8003842 <__sflush_r+0x1a>
 800384e:	2300      	movs	r3, #0
 8003850:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003854:	682f      	ldr	r7, [r5, #0]
 8003856:	602b      	str	r3, [r5, #0]
 8003858:	d032      	beq.n	80038c0 <__sflush_r+0x98>
 800385a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800385c:	89a3      	ldrh	r3, [r4, #12]
 800385e:	075a      	lsls	r2, r3, #29
 8003860:	d505      	bpl.n	800386e <__sflush_r+0x46>
 8003862:	6863      	ldr	r3, [r4, #4]
 8003864:	1ac0      	subs	r0, r0, r3
 8003866:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003868:	b10b      	cbz	r3, 800386e <__sflush_r+0x46>
 800386a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800386c:	1ac0      	subs	r0, r0, r3
 800386e:	2300      	movs	r3, #0
 8003870:	4602      	mov	r2, r0
 8003872:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003874:	6a21      	ldr	r1, [r4, #32]
 8003876:	4628      	mov	r0, r5
 8003878:	47b0      	blx	r6
 800387a:	1c43      	adds	r3, r0, #1
 800387c:	89a3      	ldrh	r3, [r4, #12]
 800387e:	d106      	bne.n	800388e <__sflush_r+0x66>
 8003880:	6829      	ldr	r1, [r5, #0]
 8003882:	291d      	cmp	r1, #29
 8003884:	d82c      	bhi.n	80038e0 <__sflush_r+0xb8>
 8003886:	4a2a      	ldr	r2, [pc, #168]	; (8003930 <__sflush_r+0x108>)
 8003888:	40ca      	lsrs	r2, r1
 800388a:	07d6      	lsls	r6, r2, #31
 800388c:	d528      	bpl.n	80038e0 <__sflush_r+0xb8>
 800388e:	2200      	movs	r2, #0
 8003890:	6062      	str	r2, [r4, #4]
 8003892:	04d9      	lsls	r1, r3, #19
 8003894:	6922      	ldr	r2, [r4, #16]
 8003896:	6022      	str	r2, [r4, #0]
 8003898:	d504      	bpl.n	80038a4 <__sflush_r+0x7c>
 800389a:	1c42      	adds	r2, r0, #1
 800389c:	d101      	bne.n	80038a2 <__sflush_r+0x7a>
 800389e:	682b      	ldr	r3, [r5, #0]
 80038a0:	b903      	cbnz	r3, 80038a4 <__sflush_r+0x7c>
 80038a2:	6560      	str	r0, [r4, #84]	; 0x54
 80038a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80038a6:	602f      	str	r7, [r5, #0]
 80038a8:	2900      	cmp	r1, #0
 80038aa:	d0ca      	beq.n	8003842 <__sflush_r+0x1a>
 80038ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80038b0:	4299      	cmp	r1, r3
 80038b2:	d002      	beq.n	80038ba <__sflush_r+0x92>
 80038b4:	4628      	mov	r0, r5
 80038b6:	f000 f9df 	bl	8003c78 <_free_r>
 80038ba:	2000      	movs	r0, #0
 80038bc:	6360      	str	r0, [r4, #52]	; 0x34
 80038be:	e7c1      	b.n	8003844 <__sflush_r+0x1c>
 80038c0:	6a21      	ldr	r1, [r4, #32]
 80038c2:	2301      	movs	r3, #1
 80038c4:	4628      	mov	r0, r5
 80038c6:	47b0      	blx	r6
 80038c8:	1c41      	adds	r1, r0, #1
 80038ca:	d1c7      	bne.n	800385c <__sflush_r+0x34>
 80038cc:	682b      	ldr	r3, [r5, #0]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d0c4      	beq.n	800385c <__sflush_r+0x34>
 80038d2:	2b1d      	cmp	r3, #29
 80038d4:	d001      	beq.n	80038da <__sflush_r+0xb2>
 80038d6:	2b16      	cmp	r3, #22
 80038d8:	d101      	bne.n	80038de <__sflush_r+0xb6>
 80038da:	602f      	str	r7, [r5, #0]
 80038dc:	e7b1      	b.n	8003842 <__sflush_r+0x1a>
 80038de:	89a3      	ldrh	r3, [r4, #12]
 80038e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038e4:	81a3      	strh	r3, [r4, #12]
 80038e6:	e7ad      	b.n	8003844 <__sflush_r+0x1c>
 80038e8:	690f      	ldr	r7, [r1, #16]
 80038ea:	2f00      	cmp	r7, #0
 80038ec:	d0a9      	beq.n	8003842 <__sflush_r+0x1a>
 80038ee:	0793      	lsls	r3, r2, #30
 80038f0:	680e      	ldr	r6, [r1, #0]
 80038f2:	bf08      	it	eq
 80038f4:	694b      	ldreq	r3, [r1, #20]
 80038f6:	600f      	str	r7, [r1, #0]
 80038f8:	bf18      	it	ne
 80038fa:	2300      	movne	r3, #0
 80038fc:	eba6 0807 	sub.w	r8, r6, r7
 8003900:	608b      	str	r3, [r1, #8]
 8003902:	f1b8 0f00 	cmp.w	r8, #0
 8003906:	dd9c      	ble.n	8003842 <__sflush_r+0x1a>
 8003908:	6a21      	ldr	r1, [r4, #32]
 800390a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800390c:	4643      	mov	r3, r8
 800390e:	463a      	mov	r2, r7
 8003910:	4628      	mov	r0, r5
 8003912:	47b0      	blx	r6
 8003914:	2800      	cmp	r0, #0
 8003916:	dc06      	bgt.n	8003926 <__sflush_r+0xfe>
 8003918:	89a3      	ldrh	r3, [r4, #12]
 800391a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800391e:	81a3      	strh	r3, [r4, #12]
 8003920:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003924:	e78e      	b.n	8003844 <__sflush_r+0x1c>
 8003926:	4407      	add	r7, r0
 8003928:	eba8 0800 	sub.w	r8, r8, r0
 800392c:	e7e9      	b.n	8003902 <__sflush_r+0xda>
 800392e:	bf00      	nop
 8003930:	20400001 	.word	0x20400001

08003934 <_fflush_r>:
 8003934:	b538      	push	{r3, r4, r5, lr}
 8003936:	690b      	ldr	r3, [r1, #16]
 8003938:	4605      	mov	r5, r0
 800393a:	460c      	mov	r4, r1
 800393c:	b913      	cbnz	r3, 8003944 <_fflush_r+0x10>
 800393e:	2500      	movs	r5, #0
 8003940:	4628      	mov	r0, r5
 8003942:	bd38      	pop	{r3, r4, r5, pc}
 8003944:	b118      	cbz	r0, 800394e <_fflush_r+0x1a>
 8003946:	6983      	ldr	r3, [r0, #24]
 8003948:	b90b      	cbnz	r3, 800394e <_fflush_r+0x1a>
 800394a:	f000 f887 	bl	8003a5c <__sinit>
 800394e:	4b14      	ldr	r3, [pc, #80]	; (80039a0 <_fflush_r+0x6c>)
 8003950:	429c      	cmp	r4, r3
 8003952:	d11b      	bne.n	800398c <_fflush_r+0x58>
 8003954:	686c      	ldr	r4, [r5, #4]
 8003956:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d0ef      	beq.n	800393e <_fflush_r+0xa>
 800395e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003960:	07d0      	lsls	r0, r2, #31
 8003962:	d404      	bmi.n	800396e <_fflush_r+0x3a>
 8003964:	0599      	lsls	r1, r3, #22
 8003966:	d402      	bmi.n	800396e <_fflush_r+0x3a>
 8003968:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800396a:	f000 f915 	bl	8003b98 <__retarget_lock_acquire_recursive>
 800396e:	4628      	mov	r0, r5
 8003970:	4621      	mov	r1, r4
 8003972:	f7ff ff59 	bl	8003828 <__sflush_r>
 8003976:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003978:	07da      	lsls	r2, r3, #31
 800397a:	4605      	mov	r5, r0
 800397c:	d4e0      	bmi.n	8003940 <_fflush_r+0xc>
 800397e:	89a3      	ldrh	r3, [r4, #12]
 8003980:	059b      	lsls	r3, r3, #22
 8003982:	d4dd      	bmi.n	8003940 <_fflush_r+0xc>
 8003984:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003986:	f000 f908 	bl	8003b9a <__retarget_lock_release_recursive>
 800398a:	e7d9      	b.n	8003940 <_fflush_r+0xc>
 800398c:	4b05      	ldr	r3, [pc, #20]	; (80039a4 <_fflush_r+0x70>)
 800398e:	429c      	cmp	r4, r3
 8003990:	d101      	bne.n	8003996 <_fflush_r+0x62>
 8003992:	68ac      	ldr	r4, [r5, #8]
 8003994:	e7df      	b.n	8003956 <_fflush_r+0x22>
 8003996:	4b04      	ldr	r3, [pc, #16]	; (80039a8 <_fflush_r+0x74>)
 8003998:	429c      	cmp	r4, r3
 800399a:	bf08      	it	eq
 800399c:	68ec      	ldreq	r4, [r5, #12]
 800399e:	e7da      	b.n	8003956 <_fflush_r+0x22>
 80039a0:	0800461c 	.word	0x0800461c
 80039a4:	0800463c 	.word	0x0800463c
 80039a8:	080045fc 	.word	0x080045fc

080039ac <std>:
 80039ac:	2300      	movs	r3, #0
 80039ae:	b510      	push	{r4, lr}
 80039b0:	4604      	mov	r4, r0
 80039b2:	e9c0 3300 	strd	r3, r3, [r0]
 80039b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80039ba:	6083      	str	r3, [r0, #8]
 80039bc:	8181      	strh	r1, [r0, #12]
 80039be:	6643      	str	r3, [r0, #100]	; 0x64
 80039c0:	81c2      	strh	r2, [r0, #14]
 80039c2:	6183      	str	r3, [r0, #24]
 80039c4:	4619      	mov	r1, r3
 80039c6:	2208      	movs	r2, #8
 80039c8:	305c      	adds	r0, #92	; 0x5c
 80039ca:	f7ff fd09 	bl	80033e0 <memset>
 80039ce:	4b05      	ldr	r3, [pc, #20]	; (80039e4 <std+0x38>)
 80039d0:	6263      	str	r3, [r4, #36]	; 0x24
 80039d2:	4b05      	ldr	r3, [pc, #20]	; (80039e8 <std+0x3c>)
 80039d4:	62a3      	str	r3, [r4, #40]	; 0x28
 80039d6:	4b05      	ldr	r3, [pc, #20]	; (80039ec <std+0x40>)
 80039d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80039da:	4b05      	ldr	r3, [pc, #20]	; (80039f0 <std+0x44>)
 80039dc:	6224      	str	r4, [r4, #32]
 80039de:	6323      	str	r3, [r4, #48]	; 0x30
 80039e0:	bd10      	pop	{r4, pc}
 80039e2:	bf00      	nop
 80039e4:	08004435 	.word	0x08004435
 80039e8:	08004457 	.word	0x08004457
 80039ec:	0800448f 	.word	0x0800448f
 80039f0:	080044b3 	.word	0x080044b3

080039f4 <_cleanup_r>:
 80039f4:	4901      	ldr	r1, [pc, #4]	; (80039fc <_cleanup_r+0x8>)
 80039f6:	f000 b8af 	b.w	8003b58 <_fwalk_reent>
 80039fa:	bf00      	nop
 80039fc:	08003935 	.word	0x08003935

08003a00 <__sfmoreglue>:
 8003a00:	b570      	push	{r4, r5, r6, lr}
 8003a02:	2268      	movs	r2, #104	; 0x68
 8003a04:	1e4d      	subs	r5, r1, #1
 8003a06:	4355      	muls	r5, r2
 8003a08:	460e      	mov	r6, r1
 8003a0a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003a0e:	f000 f99f 	bl	8003d50 <_malloc_r>
 8003a12:	4604      	mov	r4, r0
 8003a14:	b140      	cbz	r0, 8003a28 <__sfmoreglue+0x28>
 8003a16:	2100      	movs	r1, #0
 8003a18:	e9c0 1600 	strd	r1, r6, [r0]
 8003a1c:	300c      	adds	r0, #12
 8003a1e:	60a0      	str	r0, [r4, #8]
 8003a20:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003a24:	f7ff fcdc 	bl	80033e0 <memset>
 8003a28:	4620      	mov	r0, r4
 8003a2a:	bd70      	pop	{r4, r5, r6, pc}

08003a2c <__sfp_lock_acquire>:
 8003a2c:	4801      	ldr	r0, [pc, #4]	; (8003a34 <__sfp_lock_acquire+0x8>)
 8003a2e:	f000 b8b3 	b.w	8003b98 <__retarget_lock_acquire_recursive>
 8003a32:	bf00      	nop
 8003a34:	20000111 	.word	0x20000111

08003a38 <__sfp_lock_release>:
 8003a38:	4801      	ldr	r0, [pc, #4]	; (8003a40 <__sfp_lock_release+0x8>)
 8003a3a:	f000 b8ae 	b.w	8003b9a <__retarget_lock_release_recursive>
 8003a3e:	bf00      	nop
 8003a40:	20000111 	.word	0x20000111

08003a44 <__sinit_lock_acquire>:
 8003a44:	4801      	ldr	r0, [pc, #4]	; (8003a4c <__sinit_lock_acquire+0x8>)
 8003a46:	f000 b8a7 	b.w	8003b98 <__retarget_lock_acquire_recursive>
 8003a4a:	bf00      	nop
 8003a4c:	20000112 	.word	0x20000112

08003a50 <__sinit_lock_release>:
 8003a50:	4801      	ldr	r0, [pc, #4]	; (8003a58 <__sinit_lock_release+0x8>)
 8003a52:	f000 b8a2 	b.w	8003b9a <__retarget_lock_release_recursive>
 8003a56:	bf00      	nop
 8003a58:	20000112 	.word	0x20000112

08003a5c <__sinit>:
 8003a5c:	b510      	push	{r4, lr}
 8003a5e:	4604      	mov	r4, r0
 8003a60:	f7ff fff0 	bl	8003a44 <__sinit_lock_acquire>
 8003a64:	69a3      	ldr	r3, [r4, #24]
 8003a66:	b11b      	cbz	r3, 8003a70 <__sinit+0x14>
 8003a68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a6c:	f7ff bff0 	b.w	8003a50 <__sinit_lock_release>
 8003a70:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003a74:	6523      	str	r3, [r4, #80]	; 0x50
 8003a76:	4b13      	ldr	r3, [pc, #76]	; (8003ac4 <__sinit+0x68>)
 8003a78:	4a13      	ldr	r2, [pc, #76]	; (8003ac8 <__sinit+0x6c>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	62a2      	str	r2, [r4, #40]	; 0x28
 8003a7e:	42a3      	cmp	r3, r4
 8003a80:	bf04      	itt	eq
 8003a82:	2301      	moveq	r3, #1
 8003a84:	61a3      	streq	r3, [r4, #24]
 8003a86:	4620      	mov	r0, r4
 8003a88:	f000 f820 	bl	8003acc <__sfp>
 8003a8c:	6060      	str	r0, [r4, #4]
 8003a8e:	4620      	mov	r0, r4
 8003a90:	f000 f81c 	bl	8003acc <__sfp>
 8003a94:	60a0      	str	r0, [r4, #8]
 8003a96:	4620      	mov	r0, r4
 8003a98:	f000 f818 	bl	8003acc <__sfp>
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	60e0      	str	r0, [r4, #12]
 8003aa0:	2104      	movs	r1, #4
 8003aa2:	6860      	ldr	r0, [r4, #4]
 8003aa4:	f7ff ff82 	bl	80039ac <std>
 8003aa8:	68a0      	ldr	r0, [r4, #8]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	2109      	movs	r1, #9
 8003aae:	f7ff ff7d 	bl	80039ac <std>
 8003ab2:	68e0      	ldr	r0, [r4, #12]
 8003ab4:	2202      	movs	r2, #2
 8003ab6:	2112      	movs	r1, #18
 8003ab8:	f7ff ff78 	bl	80039ac <std>
 8003abc:	2301      	movs	r3, #1
 8003abe:	61a3      	str	r3, [r4, #24]
 8003ac0:	e7d2      	b.n	8003a68 <__sinit+0xc>
 8003ac2:	bf00      	nop
 8003ac4:	080045f8 	.word	0x080045f8
 8003ac8:	080039f5 	.word	0x080039f5

08003acc <__sfp>:
 8003acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ace:	4607      	mov	r7, r0
 8003ad0:	f7ff ffac 	bl	8003a2c <__sfp_lock_acquire>
 8003ad4:	4b1e      	ldr	r3, [pc, #120]	; (8003b50 <__sfp+0x84>)
 8003ad6:	681e      	ldr	r6, [r3, #0]
 8003ad8:	69b3      	ldr	r3, [r6, #24]
 8003ada:	b913      	cbnz	r3, 8003ae2 <__sfp+0x16>
 8003adc:	4630      	mov	r0, r6
 8003ade:	f7ff ffbd 	bl	8003a5c <__sinit>
 8003ae2:	3648      	adds	r6, #72	; 0x48
 8003ae4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003ae8:	3b01      	subs	r3, #1
 8003aea:	d503      	bpl.n	8003af4 <__sfp+0x28>
 8003aec:	6833      	ldr	r3, [r6, #0]
 8003aee:	b30b      	cbz	r3, 8003b34 <__sfp+0x68>
 8003af0:	6836      	ldr	r6, [r6, #0]
 8003af2:	e7f7      	b.n	8003ae4 <__sfp+0x18>
 8003af4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003af8:	b9d5      	cbnz	r5, 8003b30 <__sfp+0x64>
 8003afa:	4b16      	ldr	r3, [pc, #88]	; (8003b54 <__sfp+0x88>)
 8003afc:	60e3      	str	r3, [r4, #12]
 8003afe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003b02:	6665      	str	r5, [r4, #100]	; 0x64
 8003b04:	f000 f847 	bl	8003b96 <__retarget_lock_init_recursive>
 8003b08:	f7ff ff96 	bl	8003a38 <__sfp_lock_release>
 8003b0c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003b10:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003b14:	6025      	str	r5, [r4, #0]
 8003b16:	61a5      	str	r5, [r4, #24]
 8003b18:	2208      	movs	r2, #8
 8003b1a:	4629      	mov	r1, r5
 8003b1c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003b20:	f7ff fc5e 	bl	80033e0 <memset>
 8003b24:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003b28:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003b2c:	4620      	mov	r0, r4
 8003b2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b30:	3468      	adds	r4, #104	; 0x68
 8003b32:	e7d9      	b.n	8003ae8 <__sfp+0x1c>
 8003b34:	2104      	movs	r1, #4
 8003b36:	4638      	mov	r0, r7
 8003b38:	f7ff ff62 	bl	8003a00 <__sfmoreglue>
 8003b3c:	4604      	mov	r4, r0
 8003b3e:	6030      	str	r0, [r6, #0]
 8003b40:	2800      	cmp	r0, #0
 8003b42:	d1d5      	bne.n	8003af0 <__sfp+0x24>
 8003b44:	f7ff ff78 	bl	8003a38 <__sfp_lock_release>
 8003b48:	230c      	movs	r3, #12
 8003b4a:	603b      	str	r3, [r7, #0]
 8003b4c:	e7ee      	b.n	8003b2c <__sfp+0x60>
 8003b4e:	bf00      	nop
 8003b50:	080045f8 	.word	0x080045f8
 8003b54:	ffff0001 	.word	0xffff0001

08003b58 <_fwalk_reent>:
 8003b58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b5c:	4606      	mov	r6, r0
 8003b5e:	4688      	mov	r8, r1
 8003b60:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003b64:	2700      	movs	r7, #0
 8003b66:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003b6a:	f1b9 0901 	subs.w	r9, r9, #1
 8003b6e:	d505      	bpl.n	8003b7c <_fwalk_reent+0x24>
 8003b70:	6824      	ldr	r4, [r4, #0]
 8003b72:	2c00      	cmp	r4, #0
 8003b74:	d1f7      	bne.n	8003b66 <_fwalk_reent+0xe>
 8003b76:	4638      	mov	r0, r7
 8003b78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b7c:	89ab      	ldrh	r3, [r5, #12]
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d907      	bls.n	8003b92 <_fwalk_reent+0x3a>
 8003b82:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003b86:	3301      	adds	r3, #1
 8003b88:	d003      	beq.n	8003b92 <_fwalk_reent+0x3a>
 8003b8a:	4629      	mov	r1, r5
 8003b8c:	4630      	mov	r0, r6
 8003b8e:	47c0      	blx	r8
 8003b90:	4307      	orrs	r7, r0
 8003b92:	3568      	adds	r5, #104	; 0x68
 8003b94:	e7e9      	b.n	8003b6a <_fwalk_reent+0x12>

08003b96 <__retarget_lock_init_recursive>:
 8003b96:	4770      	bx	lr

08003b98 <__retarget_lock_acquire_recursive>:
 8003b98:	4770      	bx	lr

08003b9a <__retarget_lock_release_recursive>:
 8003b9a:	4770      	bx	lr

08003b9c <__swhatbuf_r>:
 8003b9c:	b570      	push	{r4, r5, r6, lr}
 8003b9e:	460e      	mov	r6, r1
 8003ba0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ba4:	2900      	cmp	r1, #0
 8003ba6:	b096      	sub	sp, #88	; 0x58
 8003ba8:	4614      	mov	r4, r2
 8003baa:	461d      	mov	r5, r3
 8003bac:	da08      	bge.n	8003bc0 <__swhatbuf_r+0x24>
 8003bae:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	602a      	str	r2, [r5, #0]
 8003bb6:	061a      	lsls	r2, r3, #24
 8003bb8:	d410      	bmi.n	8003bdc <__swhatbuf_r+0x40>
 8003bba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003bbe:	e00e      	b.n	8003bde <__swhatbuf_r+0x42>
 8003bc0:	466a      	mov	r2, sp
 8003bc2:	f000 fc9d 	bl	8004500 <_fstat_r>
 8003bc6:	2800      	cmp	r0, #0
 8003bc8:	dbf1      	blt.n	8003bae <__swhatbuf_r+0x12>
 8003bca:	9a01      	ldr	r2, [sp, #4]
 8003bcc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003bd0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003bd4:	425a      	negs	r2, r3
 8003bd6:	415a      	adcs	r2, r3
 8003bd8:	602a      	str	r2, [r5, #0]
 8003bda:	e7ee      	b.n	8003bba <__swhatbuf_r+0x1e>
 8003bdc:	2340      	movs	r3, #64	; 0x40
 8003bde:	2000      	movs	r0, #0
 8003be0:	6023      	str	r3, [r4, #0]
 8003be2:	b016      	add	sp, #88	; 0x58
 8003be4:	bd70      	pop	{r4, r5, r6, pc}
	...

08003be8 <__smakebuf_r>:
 8003be8:	898b      	ldrh	r3, [r1, #12]
 8003bea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003bec:	079d      	lsls	r5, r3, #30
 8003bee:	4606      	mov	r6, r0
 8003bf0:	460c      	mov	r4, r1
 8003bf2:	d507      	bpl.n	8003c04 <__smakebuf_r+0x1c>
 8003bf4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003bf8:	6023      	str	r3, [r4, #0]
 8003bfa:	6123      	str	r3, [r4, #16]
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	6163      	str	r3, [r4, #20]
 8003c00:	b002      	add	sp, #8
 8003c02:	bd70      	pop	{r4, r5, r6, pc}
 8003c04:	ab01      	add	r3, sp, #4
 8003c06:	466a      	mov	r2, sp
 8003c08:	f7ff ffc8 	bl	8003b9c <__swhatbuf_r>
 8003c0c:	9900      	ldr	r1, [sp, #0]
 8003c0e:	4605      	mov	r5, r0
 8003c10:	4630      	mov	r0, r6
 8003c12:	f000 f89d 	bl	8003d50 <_malloc_r>
 8003c16:	b948      	cbnz	r0, 8003c2c <__smakebuf_r+0x44>
 8003c18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c1c:	059a      	lsls	r2, r3, #22
 8003c1e:	d4ef      	bmi.n	8003c00 <__smakebuf_r+0x18>
 8003c20:	f023 0303 	bic.w	r3, r3, #3
 8003c24:	f043 0302 	orr.w	r3, r3, #2
 8003c28:	81a3      	strh	r3, [r4, #12]
 8003c2a:	e7e3      	b.n	8003bf4 <__smakebuf_r+0xc>
 8003c2c:	4b0d      	ldr	r3, [pc, #52]	; (8003c64 <__smakebuf_r+0x7c>)
 8003c2e:	62b3      	str	r3, [r6, #40]	; 0x28
 8003c30:	89a3      	ldrh	r3, [r4, #12]
 8003c32:	6020      	str	r0, [r4, #0]
 8003c34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c38:	81a3      	strh	r3, [r4, #12]
 8003c3a:	9b00      	ldr	r3, [sp, #0]
 8003c3c:	6163      	str	r3, [r4, #20]
 8003c3e:	9b01      	ldr	r3, [sp, #4]
 8003c40:	6120      	str	r0, [r4, #16]
 8003c42:	b15b      	cbz	r3, 8003c5c <__smakebuf_r+0x74>
 8003c44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003c48:	4630      	mov	r0, r6
 8003c4a:	f000 fc6b 	bl	8004524 <_isatty_r>
 8003c4e:	b128      	cbz	r0, 8003c5c <__smakebuf_r+0x74>
 8003c50:	89a3      	ldrh	r3, [r4, #12]
 8003c52:	f023 0303 	bic.w	r3, r3, #3
 8003c56:	f043 0301 	orr.w	r3, r3, #1
 8003c5a:	81a3      	strh	r3, [r4, #12]
 8003c5c:	89a0      	ldrh	r0, [r4, #12]
 8003c5e:	4305      	orrs	r5, r0
 8003c60:	81a5      	strh	r5, [r4, #12]
 8003c62:	e7cd      	b.n	8003c00 <__smakebuf_r+0x18>
 8003c64:	080039f5 	.word	0x080039f5

08003c68 <malloc>:
 8003c68:	4b02      	ldr	r3, [pc, #8]	; (8003c74 <malloc+0xc>)
 8003c6a:	4601      	mov	r1, r0
 8003c6c:	6818      	ldr	r0, [r3, #0]
 8003c6e:	f000 b86f 	b.w	8003d50 <_malloc_r>
 8003c72:	bf00      	nop
 8003c74:	2000000c 	.word	0x2000000c

08003c78 <_free_r>:
 8003c78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003c7a:	2900      	cmp	r1, #0
 8003c7c:	d044      	beq.n	8003d08 <_free_r+0x90>
 8003c7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c82:	9001      	str	r0, [sp, #4]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	f1a1 0404 	sub.w	r4, r1, #4
 8003c8a:	bfb8      	it	lt
 8003c8c:	18e4      	addlt	r4, r4, r3
 8003c8e:	f000 fc6b 	bl	8004568 <__malloc_lock>
 8003c92:	4a1e      	ldr	r2, [pc, #120]	; (8003d0c <_free_r+0x94>)
 8003c94:	9801      	ldr	r0, [sp, #4]
 8003c96:	6813      	ldr	r3, [r2, #0]
 8003c98:	b933      	cbnz	r3, 8003ca8 <_free_r+0x30>
 8003c9a:	6063      	str	r3, [r4, #4]
 8003c9c:	6014      	str	r4, [r2, #0]
 8003c9e:	b003      	add	sp, #12
 8003ca0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003ca4:	f000 bc66 	b.w	8004574 <__malloc_unlock>
 8003ca8:	42a3      	cmp	r3, r4
 8003caa:	d908      	bls.n	8003cbe <_free_r+0x46>
 8003cac:	6825      	ldr	r5, [r4, #0]
 8003cae:	1961      	adds	r1, r4, r5
 8003cb0:	428b      	cmp	r3, r1
 8003cb2:	bf01      	itttt	eq
 8003cb4:	6819      	ldreq	r1, [r3, #0]
 8003cb6:	685b      	ldreq	r3, [r3, #4]
 8003cb8:	1949      	addeq	r1, r1, r5
 8003cba:	6021      	streq	r1, [r4, #0]
 8003cbc:	e7ed      	b.n	8003c9a <_free_r+0x22>
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	b10b      	cbz	r3, 8003cc8 <_free_r+0x50>
 8003cc4:	42a3      	cmp	r3, r4
 8003cc6:	d9fa      	bls.n	8003cbe <_free_r+0x46>
 8003cc8:	6811      	ldr	r1, [r2, #0]
 8003cca:	1855      	adds	r5, r2, r1
 8003ccc:	42a5      	cmp	r5, r4
 8003cce:	d10b      	bne.n	8003ce8 <_free_r+0x70>
 8003cd0:	6824      	ldr	r4, [r4, #0]
 8003cd2:	4421      	add	r1, r4
 8003cd4:	1854      	adds	r4, r2, r1
 8003cd6:	42a3      	cmp	r3, r4
 8003cd8:	6011      	str	r1, [r2, #0]
 8003cda:	d1e0      	bne.n	8003c9e <_free_r+0x26>
 8003cdc:	681c      	ldr	r4, [r3, #0]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	6053      	str	r3, [r2, #4]
 8003ce2:	4421      	add	r1, r4
 8003ce4:	6011      	str	r1, [r2, #0]
 8003ce6:	e7da      	b.n	8003c9e <_free_r+0x26>
 8003ce8:	d902      	bls.n	8003cf0 <_free_r+0x78>
 8003cea:	230c      	movs	r3, #12
 8003cec:	6003      	str	r3, [r0, #0]
 8003cee:	e7d6      	b.n	8003c9e <_free_r+0x26>
 8003cf0:	6825      	ldr	r5, [r4, #0]
 8003cf2:	1961      	adds	r1, r4, r5
 8003cf4:	428b      	cmp	r3, r1
 8003cf6:	bf04      	itt	eq
 8003cf8:	6819      	ldreq	r1, [r3, #0]
 8003cfa:	685b      	ldreq	r3, [r3, #4]
 8003cfc:	6063      	str	r3, [r4, #4]
 8003cfe:	bf04      	itt	eq
 8003d00:	1949      	addeq	r1, r1, r5
 8003d02:	6021      	streq	r1, [r4, #0]
 8003d04:	6054      	str	r4, [r2, #4]
 8003d06:	e7ca      	b.n	8003c9e <_free_r+0x26>
 8003d08:	b003      	add	sp, #12
 8003d0a:	bd30      	pop	{r4, r5, pc}
 8003d0c:	20000114 	.word	0x20000114

08003d10 <sbrk_aligned>:
 8003d10:	b570      	push	{r4, r5, r6, lr}
 8003d12:	4e0e      	ldr	r6, [pc, #56]	; (8003d4c <sbrk_aligned+0x3c>)
 8003d14:	460c      	mov	r4, r1
 8003d16:	6831      	ldr	r1, [r6, #0]
 8003d18:	4605      	mov	r5, r0
 8003d1a:	b911      	cbnz	r1, 8003d22 <sbrk_aligned+0x12>
 8003d1c:	f000 fb7a 	bl	8004414 <_sbrk_r>
 8003d20:	6030      	str	r0, [r6, #0]
 8003d22:	4621      	mov	r1, r4
 8003d24:	4628      	mov	r0, r5
 8003d26:	f000 fb75 	bl	8004414 <_sbrk_r>
 8003d2a:	1c43      	adds	r3, r0, #1
 8003d2c:	d00a      	beq.n	8003d44 <sbrk_aligned+0x34>
 8003d2e:	1cc4      	adds	r4, r0, #3
 8003d30:	f024 0403 	bic.w	r4, r4, #3
 8003d34:	42a0      	cmp	r0, r4
 8003d36:	d007      	beq.n	8003d48 <sbrk_aligned+0x38>
 8003d38:	1a21      	subs	r1, r4, r0
 8003d3a:	4628      	mov	r0, r5
 8003d3c:	f000 fb6a 	bl	8004414 <_sbrk_r>
 8003d40:	3001      	adds	r0, #1
 8003d42:	d101      	bne.n	8003d48 <sbrk_aligned+0x38>
 8003d44:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003d48:	4620      	mov	r0, r4
 8003d4a:	bd70      	pop	{r4, r5, r6, pc}
 8003d4c:	20000118 	.word	0x20000118

08003d50 <_malloc_r>:
 8003d50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d54:	1ccd      	adds	r5, r1, #3
 8003d56:	f025 0503 	bic.w	r5, r5, #3
 8003d5a:	3508      	adds	r5, #8
 8003d5c:	2d0c      	cmp	r5, #12
 8003d5e:	bf38      	it	cc
 8003d60:	250c      	movcc	r5, #12
 8003d62:	2d00      	cmp	r5, #0
 8003d64:	4607      	mov	r7, r0
 8003d66:	db01      	blt.n	8003d6c <_malloc_r+0x1c>
 8003d68:	42a9      	cmp	r1, r5
 8003d6a:	d905      	bls.n	8003d78 <_malloc_r+0x28>
 8003d6c:	230c      	movs	r3, #12
 8003d6e:	603b      	str	r3, [r7, #0]
 8003d70:	2600      	movs	r6, #0
 8003d72:	4630      	mov	r0, r6
 8003d74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d78:	4e2e      	ldr	r6, [pc, #184]	; (8003e34 <_malloc_r+0xe4>)
 8003d7a:	f000 fbf5 	bl	8004568 <__malloc_lock>
 8003d7e:	6833      	ldr	r3, [r6, #0]
 8003d80:	461c      	mov	r4, r3
 8003d82:	bb34      	cbnz	r4, 8003dd2 <_malloc_r+0x82>
 8003d84:	4629      	mov	r1, r5
 8003d86:	4638      	mov	r0, r7
 8003d88:	f7ff ffc2 	bl	8003d10 <sbrk_aligned>
 8003d8c:	1c43      	adds	r3, r0, #1
 8003d8e:	4604      	mov	r4, r0
 8003d90:	d14d      	bne.n	8003e2e <_malloc_r+0xde>
 8003d92:	6834      	ldr	r4, [r6, #0]
 8003d94:	4626      	mov	r6, r4
 8003d96:	2e00      	cmp	r6, #0
 8003d98:	d140      	bne.n	8003e1c <_malloc_r+0xcc>
 8003d9a:	6823      	ldr	r3, [r4, #0]
 8003d9c:	4631      	mov	r1, r6
 8003d9e:	4638      	mov	r0, r7
 8003da0:	eb04 0803 	add.w	r8, r4, r3
 8003da4:	f000 fb36 	bl	8004414 <_sbrk_r>
 8003da8:	4580      	cmp	r8, r0
 8003daa:	d13a      	bne.n	8003e22 <_malloc_r+0xd2>
 8003dac:	6821      	ldr	r1, [r4, #0]
 8003dae:	3503      	adds	r5, #3
 8003db0:	1a6d      	subs	r5, r5, r1
 8003db2:	f025 0503 	bic.w	r5, r5, #3
 8003db6:	3508      	adds	r5, #8
 8003db8:	2d0c      	cmp	r5, #12
 8003dba:	bf38      	it	cc
 8003dbc:	250c      	movcc	r5, #12
 8003dbe:	4629      	mov	r1, r5
 8003dc0:	4638      	mov	r0, r7
 8003dc2:	f7ff ffa5 	bl	8003d10 <sbrk_aligned>
 8003dc6:	3001      	adds	r0, #1
 8003dc8:	d02b      	beq.n	8003e22 <_malloc_r+0xd2>
 8003dca:	6823      	ldr	r3, [r4, #0]
 8003dcc:	442b      	add	r3, r5
 8003dce:	6023      	str	r3, [r4, #0]
 8003dd0:	e00e      	b.n	8003df0 <_malloc_r+0xa0>
 8003dd2:	6822      	ldr	r2, [r4, #0]
 8003dd4:	1b52      	subs	r2, r2, r5
 8003dd6:	d41e      	bmi.n	8003e16 <_malloc_r+0xc6>
 8003dd8:	2a0b      	cmp	r2, #11
 8003dda:	d916      	bls.n	8003e0a <_malloc_r+0xba>
 8003ddc:	1961      	adds	r1, r4, r5
 8003dde:	42a3      	cmp	r3, r4
 8003de0:	6025      	str	r5, [r4, #0]
 8003de2:	bf18      	it	ne
 8003de4:	6059      	strne	r1, [r3, #4]
 8003de6:	6863      	ldr	r3, [r4, #4]
 8003de8:	bf08      	it	eq
 8003dea:	6031      	streq	r1, [r6, #0]
 8003dec:	5162      	str	r2, [r4, r5]
 8003dee:	604b      	str	r3, [r1, #4]
 8003df0:	4638      	mov	r0, r7
 8003df2:	f104 060b 	add.w	r6, r4, #11
 8003df6:	f000 fbbd 	bl	8004574 <__malloc_unlock>
 8003dfa:	f026 0607 	bic.w	r6, r6, #7
 8003dfe:	1d23      	adds	r3, r4, #4
 8003e00:	1af2      	subs	r2, r6, r3
 8003e02:	d0b6      	beq.n	8003d72 <_malloc_r+0x22>
 8003e04:	1b9b      	subs	r3, r3, r6
 8003e06:	50a3      	str	r3, [r4, r2]
 8003e08:	e7b3      	b.n	8003d72 <_malloc_r+0x22>
 8003e0a:	6862      	ldr	r2, [r4, #4]
 8003e0c:	42a3      	cmp	r3, r4
 8003e0e:	bf0c      	ite	eq
 8003e10:	6032      	streq	r2, [r6, #0]
 8003e12:	605a      	strne	r2, [r3, #4]
 8003e14:	e7ec      	b.n	8003df0 <_malloc_r+0xa0>
 8003e16:	4623      	mov	r3, r4
 8003e18:	6864      	ldr	r4, [r4, #4]
 8003e1a:	e7b2      	b.n	8003d82 <_malloc_r+0x32>
 8003e1c:	4634      	mov	r4, r6
 8003e1e:	6876      	ldr	r6, [r6, #4]
 8003e20:	e7b9      	b.n	8003d96 <_malloc_r+0x46>
 8003e22:	230c      	movs	r3, #12
 8003e24:	603b      	str	r3, [r7, #0]
 8003e26:	4638      	mov	r0, r7
 8003e28:	f000 fba4 	bl	8004574 <__malloc_unlock>
 8003e2c:	e7a1      	b.n	8003d72 <_malloc_r+0x22>
 8003e2e:	6025      	str	r5, [r4, #0]
 8003e30:	e7de      	b.n	8003df0 <_malloc_r+0xa0>
 8003e32:	bf00      	nop
 8003e34:	20000114 	.word	0x20000114

08003e38 <__sfputc_r>:
 8003e38:	6893      	ldr	r3, [r2, #8]
 8003e3a:	3b01      	subs	r3, #1
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	b410      	push	{r4}
 8003e40:	6093      	str	r3, [r2, #8]
 8003e42:	da08      	bge.n	8003e56 <__sfputc_r+0x1e>
 8003e44:	6994      	ldr	r4, [r2, #24]
 8003e46:	42a3      	cmp	r3, r4
 8003e48:	db01      	blt.n	8003e4e <__sfputc_r+0x16>
 8003e4a:	290a      	cmp	r1, #10
 8003e4c:	d103      	bne.n	8003e56 <__sfputc_r+0x1e>
 8003e4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003e52:	f7ff bc29 	b.w	80036a8 <__swbuf_r>
 8003e56:	6813      	ldr	r3, [r2, #0]
 8003e58:	1c58      	adds	r0, r3, #1
 8003e5a:	6010      	str	r0, [r2, #0]
 8003e5c:	7019      	strb	r1, [r3, #0]
 8003e5e:	4608      	mov	r0, r1
 8003e60:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003e64:	4770      	bx	lr

08003e66 <__sfputs_r>:
 8003e66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e68:	4606      	mov	r6, r0
 8003e6a:	460f      	mov	r7, r1
 8003e6c:	4614      	mov	r4, r2
 8003e6e:	18d5      	adds	r5, r2, r3
 8003e70:	42ac      	cmp	r4, r5
 8003e72:	d101      	bne.n	8003e78 <__sfputs_r+0x12>
 8003e74:	2000      	movs	r0, #0
 8003e76:	e007      	b.n	8003e88 <__sfputs_r+0x22>
 8003e78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e7c:	463a      	mov	r2, r7
 8003e7e:	4630      	mov	r0, r6
 8003e80:	f7ff ffda 	bl	8003e38 <__sfputc_r>
 8003e84:	1c43      	adds	r3, r0, #1
 8003e86:	d1f3      	bne.n	8003e70 <__sfputs_r+0xa>
 8003e88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003e8c <_vfiprintf_r>:
 8003e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e90:	460d      	mov	r5, r1
 8003e92:	b09d      	sub	sp, #116	; 0x74
 8003e94:	4614      	mov	r4, r2
 8003e96:	4698      	mov	r8, r3
 8003e98:	4606      	mov	r6, r0
 8003e9a:	b118      	cbz	r0, 8003ea4 <_vfiprintf_r+0x18>
 8003e9c:	6983      	ldr	r3, [r0, #24]
 8003e9e:	b90b      	cbnz	r3, 8003ea4 <_vfiprintf_r+0x18>
 8003ea0:	f7ff fddc 	bl	8003a5c <__sinit>
 8003ea4:	4b89      	ldr	r3, [pc, #548]	; (80040cc <_vfiprintf_r+0x240>)
 8003ea6:	429d      	cmp	r5, r3
 8003ea8:	d11b      	bne.n	8003ee2 <_vfiprintf_r+0x56>
 8003eaa:	6875      	ldr	r5, [r6, #4]
 8003eac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003eae:	07d9      	lsls	r1, r3, #31
 8003eb0:	d405      	bmi.n	8003ebe <_vfiprintf_r+0x32>
 8003eb2:	89ab      	ldrh	r3, [r5, #12]
 8003eb4:	059a      	lsls	r2, r3, #22
 8003eb6:	d402      	bmi.n	8003ebe <_vfiprintf_r+0x32>
 8003eb8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003eba:	f7ff fe6d 	bl	8003b98 <__retarget_lock_acquire_recursive>
 8003ebe:	89ab      	ldrh	r3, [r5, #12]
 8003ec0:	071b      	lsls	r3, r3, #28
 8003ec2:	d501      	bpl.n	8003ec8 <_vfiprintf_r+0x3c>
 8003ec4:	692b      	ldr	r3, [r5, #16]
 8003ec6:	b9eb      	cbnz	r3, 8003f04 <_vfiprintf_r+0x78>
 8003ec8:	4629      	mov	r1, r5
 8003eca:	4630      	mov	r0, r6
 8003ecc:	f7ff fc3e 	bl	800374c <__swsetup_r>
 8003ed0:	b1c0      	cbz	r0, 8003f04 <_vfiprintf_r+0x78>
 8003ed2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003ed4:	07dc      	lsls	r4, r3, #31
 8003ed6:	d50e      	bpl.n	8003ef6 <_vfiprintf_r+0x6a>
 8003ed8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003edc:	b01d      	add	sp, #116	; 0x74
 8003ede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ee2:	4b7b      	ldr	r3, [pc, #492]	; (80040d0 <_vfiprintf_r+0x244>)
 8003ee4:	429d      	cmp	r5, r3
 8003ee6:	d101      	bne.n	8003eec <_vfiprintf_r+0x60>
 8003ee8:	68b5      	ldr	r5, [r6, #8]
 8003eea:	e7df      	b.n	8003eac <_vfiprintf_r+0x20>
 8003eec:	4b79      	ldr	r3, [pc, #484]	; (80040d4 <_vfiprintf_r+0x248>)
 8003eee:	429d      	cmp	r5, r3
 8003ef0:	bf08      	it	eq
 8003ef2:	68f5      	ldreq	r5, [r6, #12]
 8003ef4:	e7da      	b.n	8003eac <_vfiprintf_r+0x20>
 8003ef6:	89ab      	ldrh	r3, [r5, #12]
 8003ef8:	0598      	lsls	r0, r3, #22
 8003efa:	d4ed      	bmi.n	8003ed8 <_vfiprintf_r+0x4c>
 8003efc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003efe:	f7ff fe4c 	bl	8003b9a <__retarget_lock_release_recursive>
 8003f02:	e7e9      	b.n	8003ed8 <_vfiprintf_r+0x4c>
 8003f04:	2300      	movs	r3, #0
 8003f06:	9309      	str	r3, [sp, #36]	; 0x24
 8003f08:	2320      	movs	r3, #32
 8003f0a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003f0e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003f12:	2330      	movs	r3, #48	; 0x30
 8003f14:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80040d8 <_vfiprintf_r+0x24c>
 8003f18:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003f1c:	f04f 0901 	mov.w	r9, #1
 8003f20:	4623      	mov	r3, r4
 8003f22:	469a      	mov	sl, r3
 8003f24:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003f28:	b10a      	cbz	r2, 8003f2e <_vfiprintf_r+0xa2>
 8003f2a:	2a25      	cmp	r2, #37	; 0x25
 8003f2c:	d1f9      	bne.n	8003f22 <_vfiprintf_r+0x96>
 8003f2e:	ebba 0b04 	subs.w	fp, sl, r4
 8003f32:	d00b      	beq.n	8003f4c <_vfiprintf_r+0xc0>
 8003f34:	465b      	mov	r3, fp
 8003f36:	4622      	mov	r2, r4
 8003f38:	4629      	mov	r1, r5
 8003f3a:	4630      	mov	r0, r6
 8003f3c:	f7ff ff93 	bl	8003e66 <__sfputs_r>
 8003f40:	3001      	adds	r0, #1
 8003f42:	f000 80aa 	beq.w	800409a <_vfiprintf_r+0x20e>
 8003f46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003f48:	445a      	add	r2, fp
 8003f4a:	9209      	str	r2, [sp, #36]	; 0x24
 8003f4c:	f89a 3000 	ldrb.w	r3, [sl]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	f000 80a2 	beq.w	800409a <_vfiprintf_r+0x20e>
 8003f56:	2300      	movs	r3, #0
 8003f58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003f5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f60:	f10a 0a01 	add.w	sl, sl, #1
 8003f64:	9304      	str	r3, [sp, #16]
 8003f66:	9307      	str	r3, [sp, #28]
 8003f68:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003f6c:	931a      	str	r3, [sp, #104]	; 0x68
 8003f6e:	4654      	mov	r4, sl
 8003f70:	2205      	movs	r2, #5
 8003f72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f76:	4858      	ldr	r0, [pc, #352]	; (80040d8 <_vfiprintf_r+0x24c>)
 8003f78:	f7fc f94a 	bl	8000210 <memchr>
 8003f7c:	9a04      	ldr	r2, [sp, #16]
 8003f7e:	b9d8      	cbnz	r0, 8003fb8 <_vfiprintf_r+0x12c>
 8003f80:	06d1      	lsls	r1, r2, #27
 8003f82:	bf44      	itt	mi
 8003f84:	2320      	movmi	r3, #32
 8003f86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f8a:	0713      	lsls	r3, r2, #28
 8003f8c:	bf44      	itt	mi
 8003f8e:	232b      	movmi	r3, #43	; 0x2b
 8003f90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f94:	f89a 3000 	ldrb.w	r3, [sl]
 8003f98:	2b2a      	cmp	r3, #42	; 0x2a
 8003f9a:	d015      	beq.n	8003fc8 <_vfiprintf_r+0x13c>
 8003f9c:	9a07      	ldr	r2, [sp, #28]
 8003f9e:	4654      	mov	r4, sl
 8003fa0:	2000      	movs	r0, #0
 8003fa2:	f04f 0c0a 	mov.w	ip, #10
 8003fa6:	4621      	mov	r1, r4
 8003fa8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003fac:	3b30      	subs	r3, #48	; 0x30
 8003fae:	2b09      	cmp	r3, #9
 8003fb0:	d94e      	bls.n	8004050 <_vfiprintf_r+0x1c4>
 8003fb2:	b1b0      	cbz	r0, 8003fe2 <_vfiprintf_r+0x156>
 8003fb4:	9207      	str	r2, [sp, #28]
 8003fb6:	e014      	b.n	8003fe2 <_vfiprintf_r+0x156>
 8003fb8:	eba0 0308 	sub.w	r3, r0, r8
 8003fbc:	fa09 f303 	lsl.w	r3, r9, r3
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	9304      	str	r3, [sp, #16]
 8003fc4:	46a2      	mov	sl, r4
 8003fc6:	e7d2      	b.n	8003f6e <_vfiprintf_r+0xe2>
 8003fc8:	9b03      	ldr	r3, [sp, #12]
 8003fca:	1d19      	adds	r1, r3, #4
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	9103      	str	r1, [sp, #12]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	bfbb      	ittet	lt
 8003fd4:	425b      	neglt	r3, r3
 8003fd6:	f042 0202 	orrlt.w	r2, r2, #2
 8003fda:	9307      	strge	r3, [sp, #28]
 8003fdc:	9307      	strlt	r3, [sp, #28]
 8003fde:	bfb8      	it	lt
 8003fe0:	9204      	strlt	r2, [sp, #16]
 8003fe2:	7823      	ldrb	r3, [r4, #0]
 8003fe4:	2b2e      	cmp	r3, #46	; 0x2e
 8003fe6:	d10c      	bne.n	8004002 <_vfiprintf_r+0x176>
 8003fe8:	7863      	ldrb	r3, [r4, #1]
 8003fea:	2b2a      	cmp	r3, #42	; 0x2a
 8003fec:	d135      	bne.n	800405a <_vfiprintf_r+0x1ce>
 8003fee:	9b03      	ldr	r3, [sp, #12]
 8003ff0:	1d1a      	adds	r2, r3, #4
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	9203      	str	r2, [sp, #12]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	bfb8      	it	lt
 8003ffa:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003ffe:	3402      	adds	r4, #2
 8004000:	9305      	str	r3, [sp, #20]
 8004002:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80040e8 <_vfiprintf_r+0x25c>
 8004006:	7821      	ldrb	r1, [r4, #0]
 8004008:	2203      	movs	r2, #3
 800400a:	4650      	mov	r0, sl
 800400c:	f7fc f900 	bl	8000210 <memchr>
 8004010:	b140      	cbz	r0, 8004024 <_vfiprintf_r+0x198>
 8004012:	2340      	movs	r3, #64	; 0x40
 8004014:	eba0 000a 	sub.w	r0, r0, sl
 8004018:	fa03 f000 	lsl.w	r0, r3, r0
 800401c:	9b04      	ldr	r3, [sp, #16]
 800401e:	4303      	orrs	r3, r0
 8004020:	3401      	adds	r4, #1
 8004022:	9304      	str	r3, [sp, #16]
 8004024:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004028:	482c      	ldr	r0, [pc, #176]	; (80040dc <_vfiprintf_r+0x250>)
 800402a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800402e:	2206      	movs	r2, #6
 8004030:	f7fc f8ee 	bl	8000210 <memchr>
 8004034:	2800      	cmp	r0, #0
 8004036:	d03f      	beq.n	80040b8 <_vfiprintf_r+0x22c>
 8004038:	4b29      	ldr	r3, [pc, #164]	; (80040e0 <_vfiprintf_r+0x254>)
 800403a:	bb1b      	cbnz	r3, 8004084 <_vfiprintf_r+0x1f8>
 800403c:	9b03      	ldr	r3, [sp, #12]
 800403e:	3307      	adds	r3, #7
 8004040:	f023 0307 	bic.w	r3, r3, #7
 8004044:	3308      	adds	r3, #8
 8004046:	9303      	str	r3, [sp, #12]
 8004048:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800404a:	443b      	add	r3, r7
 800404c:	9309      	str	r3, [sp, #36]	; 0x24
 800404e:	e767      	b.n	8003f20 <_vfiprintf_r+0x94>
 8004050:	fb0c 3202 	mla	r2, ip, r2, r3
 8004054:	460c      	mov	r4, r1
 8004056:	2001      	movs	r0, #1
 8004058:	e7a5      	b.n	8003fa6 <_vfiprintf_r+0x11a>
 800405a:	2300      	movs	r3, #0
 800405c:	3401      	adds	r4, #1
 800405e:	9305      	str	r3, [sp, #20]
 8004060:	4619      	mov	r1, r3
 8004062:	f04f 0c0a 	mov.w	ip, #10
 8004066:	4620      	mov	r0, r4
 8004068:	f810 2b01 	ldrb.w	r2, [r0], #1
 800406c:	3a30      	subs	r2, #48	; 0x30
 800406e:	2a09      	cmp	r2, #9
 8004070:	d903      	bls.n	800407a <_vfiprintf_r+0x1ee>
 8004072:	2b00      	cmp	r3, #0
 8004074:	d0c5      	beq.n	8004002 <_vfiprintf_r+0x176>
 8004076:	9105      	str	r1, [sp, #20]
 8004078:	e7c3      	b.n	8004002 <_vfiprintf_r+0x176>
 800407a:	fb0c 2101 	mla	r1, ip, r1, r2
 800407e:	4604      	mov	r4, r0
 8004080:	2301      	movs	r3, #1
 8004082:	e7f0      	b.n	8004066 <_vfiprintf_r+0x1da>
 8004084:	ab03      	add	r3, sp, #12
 8004086:	9300      	str	r3, [sp, #0]
 8004088:	462a      	mov	r2, r5
 800408a:	4b16      	ldr	r3, [pc, #88]	; (80040e4 <_vfiprintf_r+0x258>)
 800408c:	a904      	add	r1, sp, #16
 800408e:	4630      	mov	r0, r6
 8004090:	f3af 8000 	nop.w
 8004094:	4607      	mov	r7, r0
 8004096:	1c78      	adds	r0, r7, #1
 8004098:	d1d6      	bne.n	8004048 <_vfiprintf_r+0x1bc>
 800409a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800409c:	07d9      	lsls	r1, r3, #31
 800409e:	d405      	bmi.n	80040ac <_vfiprintf_r+0x220>
 80040a0:	89ab      	ldrh	r3, [r5, #12]
 80040a2:	059a      	lsls	r2, r3, #22
 80040a4:	d402      	bmi.n	80040ac <_vfiprintf_r+0x220>
 80040a6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80040a8:	f7ff fd77 	bl	8003b9a <__retarget_lock_release_recursive>
 80040ac:	89ab      	ldrh	r3, [r5, #12]
 80040ae:	065b      	lsls	r3, r3, #25
 80040b0:	f53f af12 	bmi.w	8003ed8 <_vfiprintf_r+0x4c>
 80040b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80040b6:	e711      	b.n	8003edc <_vfiprintf_r+0x50>
 80040b8:	ab03      	add	r3, sp, #12
 80040ba:	9300      	str	r3, [sp, #0]
 80040bc:	462a      	mov	r2, r5
 80040be:	4b09      	ldr	r3, [pc, #36]	; (80040e4 <_vfiprintf_r+0x258>)
 80040c0:	a904      	add	r1, sp, #16
 80040c2:	4630      	mov	r0, r6
 80040c4:	f000 f880 	bl	80041c8 <_printf_i>
 80040c8:	e7e4      	b.n	8004094 <_vfiprintf_r+0x208>
 80040ca:	bf00      	nop
 80040cc:	0800461c 	.word	0x0800461c
 80040d0:	0800463c 	.word	0x0800463c
 80040d4:	080045fc 	.word	0x080045fc
 80040d8:	0800465c 	.word	0x0800465c
 80040dc:	08004666 	.word	0x08004666
 80040e0:	00000000 	.word	0x00000000
 80040e4:	08003e67 	.word	0x08003e67
 80040e8:	08004662 	.word	0x08004662

080040ec <_printf_common>:
 80040ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040f0:	4616      	mov	r6, r2
 80040f2:	4699      	mov	r9, r3
 80040f4:	688a      	ldr	r2, [r1, #8]
 80040f6:	690b      	ldr	r3, [r1, #16]
 80040f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80040fc:	4293      	cmp	r3, r2
 80040fe:	bfb8      	it	lt
 8004100:	4613      	movlt	r3, r2
 8004102:	6033      	str	r3, [r6, #0]
 8004104:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004108:	4607      	mov	r7, r0
 800410a:	460c      	mov	r4, r1
 800410c:	b10a      	cbz	r2, 8004112 <_printf_common+0x26>
 800410e:	3301      	adds	r3, #1
 8004110:	6033      	str	r3, [r6, #0]
 8004112:	6823      	ldr	r3, [r4, #0]
 8004114:	0699      	lsls	r1, r3, #26
 8004116:	bf42      	ittt	mi
 8004118:	6833      	ldrmi	r3, [r6, #0]
 800411a:	3302      	addmi	r3, #2
 800411c:	6033      	strmi	r3, [r6, #0]
 800411e:	6825      	ldr	r5, [r4, #0]
 8004120:	f015 0506 	ands.w	r5, r5, #6
 8004124:	d106      	bne.n	8004134 <_printf_common+0x48>
 8004126:	f104 0a19 	add.w	sl, r4, #25
 800412a:	68e3      	ldr	r3, [r4, #12]
 800412c:	6832      	ldr	r2, [r6, #0]
 800412e:	1a9b      	subs	r3, r3, r2
 8004130:	42ab      	cmp	r3, r5
 8004132:	dc26      	bgt.n	8004182 <_printf_common+0x96>
 8004134:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004138:	1e13      	subs	r3, r2, #0
 800413a:	6822      	ldr	r2, [r4, #0]
 800413c:	bf18      	it	ne
 800413e:	2301      	movne	r3, #1
 8004140:	0692      	lsls	r2, r2, #26
 8004142:	d42b      	bmi.n	800419c <_printf_common+0xb0>
 8004144:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004148:	4649      	mov	r1, r9
 800414a:	4638      	mov	r0, r7
 800414c:	47c0      	blx	r8
 800414e:	3001      	adds	r0, #1
 8004150:	d01e      	beq.n	8004190 <_printf_common+0xa4>
 8004152:	6823      	ldr	r3, [r4, #0]
 8004154:	68e5      	ldr	r5, [r4, #12]
 8004156:	6832      	ldr	r2, [r6, #0]
 8004158:	f003 0306 	and.w	r3, r3, #6
 800415c:	2b04      	cmp	r3, #4
 800415e:	bf08      	it	eq
 8004160:	1aad      	subeq	r5, r5, r2
 8004162:	68a3      	ldr	r3, [r4, #8]
 8004164:	6922      	ldr	r2, [r4, #16]
 8004166:	bf0c      	ite	eq
 8004168:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800416c:	2500      	movne	r5, #0
 800416e:	4293      	cmp	r3, r2
 8004170:	bfc4      	itt	gt
 8004172:	1a9b      	subgt	r3, r3, r2
 8004174:	18ed      	addgt	r5, r5, r3
 8004176:	2600      	movs	r6, #0
 8004178:	341a      	adds	r4, #26
 800417a:	42b5      	cmp	r5, r6
 800417c:	d11a      	bne.n	80041b4 <_printf_common+0xc8>
 800417e:	2000      	movs	r0, #0
 8004180:	e008      	b.n	8004194 <_printf_common+0xa8>
 8004182:	2301      	movs	r3, #1
 8004184:	4652      	mov	r2, sl
 8004186:	4649      	mov	r1, r9
 8004188:	4638      	mov	r0, r7
 800418a:	47c0      	blx	r8
 800418c:	3001      	adds	r0, #1
 800418e:	d103      	bne.n	8004198 <_printf_common+0xac>
 8004190:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004194:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004198:	3501      	adds	r5, #1
 800419a:	e7c6      	b.n	800412a <_printf_common+0x3e>
 800419c:	18e1      	adds	r1, r4, r3
 800419e:	1c5a      	adds	r2, r3, #1
 80041a0:	2030      	movs	r0, #48	; 0x30
 80041a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80041a6:	4422      	add	r2, r4
 80041a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80041ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80041b0:	3302      	adds	r3, #2
 80041b2:	e7c7      	b.n	8004144 <_printf_common+0x58>
 80041b4:	2301      	movs	r3, #1
 80041b6:	4622      	mov	r2, r4
 80041b8:	4649      	mov	r1, r9
 80041ba:	4638      	mov	r0, r7
 80041bc:	47c0      	blx	r8
 80041be:	3001      	adds	r0, #1
 80041c0:	d0e6      	beq.n	8004190 <_printf_common+0xa4>
 80041c2:	3601      	adds	r6, #1
 80041c4:	e7d9      	b.n	800417a <_printf_common+0x8e>
	...

080041c8 <_printf_i>:
 80041c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80041cc:	7e0f      	ldrb	r7, [r1, #24]
 80041ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80041d0:	2f78      	cmp	r7, #120	; 0x78
 80041d2:	4691      	mov	r9, r2
 80041d4:	4680      	mov	r8, r0
 80041d6:	460c      	mov	r4, r1
 80041d8:	469a      	mov	sl, r3
 80041da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80041de:	d807      	bhi.n	80041f0 <_printf_i+0x28>
 80041e0:	2f62      	cmp	r7, #98	; 0x62
 80041e2:	d80a      	bhi.n	80041fa <_printf_i+0x32>
 80041e4:	2f00      	cmp	r7, #0
 80041e6:	f000 80d8 	beq.w	800439a <_printf_i+0x1d2>
 80041ea:	2f58      	cmp	r7, #88	; 0x58
 80041ec:	f000 80a3 	beq.w	8004336 <_printf_i+0x16e>
 80041f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80041f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80041f8:	e03a      	b.n	8004270 <_printf_i+0xa8>
 80041fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80041fe:	2b15      	cmp	r3, #21
 8004200:	d8f6      	bhi.n	80041f0 <_printf_i+0x28>
 8004202:	a101      	add	r1, pc, #4	; (adr r1, 8004208 <_printf_i+0x40>)
 8004204:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004208:	08004261 	.word	0x08004261
 800420c:	08004275 	.word	0x08004275
 8004210:	080041f1 	.word	0x080041f1
 8004214:	080041f1 	.word	0x080041f1
 8004218:	080041f1 	.word	0x080041f1
 800421c:	080041f1 	.word	0x080041f1
 8004220:	08004275 	.word	0x08004275
 8004224:	080041f1 	.word	0x080041f1
 8004228:	080041f1 	.word	0x080041f1
 800422c:	080041f1 	.word	0x080041f1
 8004230:	080041f1 	.word	0x080041f1
 8004234:	08004381 	.word	0x08004381
 8004238:	080042a5 	.word	0x080042a5
 800423c:	08004363 	.word	0x08004363
 8004240:	080041f1 	.word	0x080041f1
 8004244:	080041f1 	.word	0x080041f1
 8004248:	080043a3 	.word	0x080043a3
 800424c:	080041f1 	.word	0x080041f1
 8004250:	080042a5 	.word	0x080042a5
 8004254:	080041f1 	.word	0x080041f1
 8004258:	080041f1 	.word	0x080041f1
 800425c:	0800436b 	.word	0x0800436b
 8004260:	682b      	ldr	r3, [r5, #0]
 8004262:	1d1a      	adds	r2, r3, #4
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	602a      	str	r2, [r5, #0]
 8004268:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800426c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004270:	2301      	movs	r3, #1
 8004272:	e0a3      	b.n	80043bc <_printf_i+0x1f4>
 8004274:	6820      	ldr	r0, [r4, #0]
 8004276:	6829      	ldr	r1, [r5, #0]
 8004278:	0606      	lsls	r6, r0, #24
 800427a:	f101 0304 	add.w	r3, r1, #4
 800427e:	d50a      	bpl.n	8004296 <_printf_i+0xce>
 8004280:	680e      	ldr	r6, [r1, #0]
 8004282:	602b      	str	r3, [r5, #0]
 8004284:	2e00      	cmp	r6, #0
 8004286:	da03      	bge.n	8004290 <_printf_i+0xc8>
 8004288:	232d      	movs	r3, #45	; 0x2d
 800428a:	4276      	negs	r6, r6
 800428c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004290:	485e      	ldr	r0, [pc, #376]	; (800440c <_printf_i+0x244>)
 8004292:	230a      	movs	r3, #10
 8004294:	e019      	b.n	80042ca <_printf_i+0x102>
 8004296:	680e      	ldr	r6, [r1, #0]
 8004298:	602b      	str	r3, [r5, #0]
 800429a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800429e:	bf18      	it	ne
 80042a0:	b236      	sxthne	r6, r6
 80042a2:	e7ef      	b.n	8004284 <_printf_i+0xbc>
 80042a4:	682b      	ldr	r3, [r5, #0]
 80042a6:	6820      	ldr	r0, [r4, #0]
 80042a8:	1d19      	adds	r1, r3, #4
 80042aa:	6029      	str	r1, [r5, #0]
 80042ac:	0601      	lsls	r1, r0, #24
 80042ae:	d501      	bpl.n	80042b4 <_printf_i+0xec>
 80042b0:	681e      	ldr	r6, [r3, #0]
 80042b2:	e002      	b.n	80042ba <_printf_i+0xf2>
 80042b4:	0646      	lsls	r6, r0, #25
 80042b6:	d5fb      	bpl.n	80042b0 <_printf_i+0xe8>
 80042b8:	881e      	ldrh	r6, [r3, #0]
 80042ba:	4854      	ldr	r0, [pc, #336]	; (800440c <_printf_i+0x244>)
 80042bc:	2f6f      	cmp	r7, #111	; 0x6f
 80042be:	bf0c      	ite	eq
 80042c0:	2308      	moveq	r3, #8
 80042c2:	230a      	movne	r3, #10
 80042c4:	2100      	movs	r1, #0
 80042c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80042ca:	6865      	ldr	r5, [r4, #4]
 80042cc:	60a5      	str	r5, [r4, #8]
 80042ce:	2d00      	cmp	r5, #0
 80042d0:	bfa2      	ittt	ge
 80042d2:	6821      	ldrge	r1, [r4, #0]
 80042d4:	f021 0104 	bicge.w	r1, r1, #4
 80042d8:	6021      	strge	r1, [r4, #0]
 80042da:	b90e      	cbnz	r6, 80042e0 <_printf_i+0x118>
 80042dc:	2d00      	cmp	r5, #0
 80042de:	d04d      	beq.n	800437c <_printf_i+0x1b4>
 80042e0:	4615      	mov	r5, r2
 80042e2:	fbb6 f1f3 	udiv	r1, r6, r3
 80042e6:	fb03 6711 	mls	r7, r3, r1, r6
 80042ea:	5dc7      	ldrb	r7, [r0, r7]
 80042ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80042f0:	4637      	mov	r7, r6
 80042f2:	42bb      	cmp	r3, r7
 80042f4:	460e      	mov	r6, r1
 80042f6:	d9f4      	bls.n	80042e2 <_printf_i+0x11a>
 80042f8:	2b08      	cmp	r3, #8
 80042fa:	d10b      	bne.n	8004314 <_printf_i+0x14c>
 80042fc:	6823      	ldr	r3, [r4, #0]
 80042fe:	07de      	lsls	r6, r3, #31
 8004300:	d508      	bpl.n	8004314 <_printf_i+0x14c>
 8004302:	6923      	ldr	r3, [r4, #16]
 8004304:	6861      	ldr	r1, [r4, #4]
 8004306:	4299      	cmp	r1, r3
 8004308:	bfde      	ittt	le
 800430a:	2330      	movle	r3, #48	; 0x30
 800430c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004310:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004314:	1b52      	subs	r2, r2, r5
 8004316:	6122      	str	r2, [r4, #16]
 8004318:	f8cd a000 	str.w	sl, [sp]
 800431c:	464b      	mov	r3, r9
 800431e:	aa03      	add	r2, sp, #12
 8004320:	4621      	mov	r1, r4
 8004322:	4640      	mov	r0, r8
 8004324:	f7ff fee2 	bl	80040ec <_printf_common>
 8004328:	3001      	adds	r0, #1
 800432a:	d14c      	bne.n	80043c6 <_printf_i+0x1fe>
 800432c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004330:	b004      	add	sp, #16
 8004332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004336:	4835      	ldr	r0, [pc, #212]	; (800440c <_printf_i+0x244>)
 8004338:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800433c:	6829      	ldr	r1, [r5, #0]
 800433e:	6823      	ldr	r3, [r4, #0]
 8004340:	f851 6b04 	ldr.w	r6, [r1], #4
 8004344:	6029      	str	r1, [r5, #0]
 8004346:	061d      	lsls	r5, r3, #24
 8004348:	d514      	bpl.n	8004374 <_printf_i+0x1ac>
 800434a:	07df      	lsls	r7, r3, #31
 800434c:	bf44      	itt	mi
 800434e:	f043 0320 	orrmi.w	r3, r3, #32
 8004352:	6023      	strmi	r3, [r4, #0]
 8004354:	b91e      	cbnz	r6, 800435e <_printf_i+0x196>
 8004356:	6823      	ldr	r3, [r4, #0]
 8004358:	f023 0320 	bic.w	r3, r3, #32
 800435c:	6023      	str	r3, [r4, #0]
 800435e:	2310      	movs	r3, #16
 8004360:	e7b0      	b.n	80042c4 <_printf_i+0xfc>
 8004362:	6823      	ldr	r3, [r4, #0]
 8004364:	f043 0320 	orr.w	r3, r3, #32
 8004368:	6023      	str	r3, [r4, #0]
 800436a:	2378      	movs	r3, #120	; 0x78
 800436c:	4828      	ldr	r0, [pc, #160]	; (8004410 <_printf_i+0x248>)
 800436e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004372:	e7e3      	b.n	800433c <_printf_i+0x174>
 8004374:	0659      	lsls	r1, r3, #25
 8004376:	bf48      	it	mi
 8004378:	b2b6      	uxthmi	r6, r6
 800437a:	e7e6      	b.n	800434a <_printf_i+0x182>
 800437c:	4615      	mov	r5, r2
 800437e:	e7bb      	b.n	80042f8 <_printf_i+0x130>
 8004380:	682b      	ldr	r3, [r5, #0]
 8004382:	6826      	ldr	r6, [r4, #0]
 8004384:	6961      	ldr	r1, [r4, #20]
 8004386:	1d18      	adds	r0, r3, #4
 8004388:	6028      	str	r0, [r5, #0]
 800438a:	0635      	lsls	r5, r6, #24
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	d501      	bpl.n	8004394 <_printf_i+0x1cc>
 8004390:	6019      	str	r1, [r3, #0]
 8004392:	e002      	b.n	800439a <_printf_i+0x1d2>
 8004394:	0670      	lsls	r0, r6, #25
 8004396:	d5fb      	bpl.n	8004390 <_printf_i+0x1c8>
 8004398:	8019      	strh	r1, [r3, #0]
 800439a:	2300      	movs	r3, #0
 800439c:	6123      	str	r3, [r4, #16]
 800439e:	4615      	mov	r5, r2
 80043a0:	e7ba      	b.n	8004318 <_printf_i+0x150>
 80043a2:	682b      	ldr	r3, [r5, #0]
 80043a4:	1d1a      	adds	r2, r3, #4
 80043a6:	602a      	str	r2, [r5, #0]
 80043a8:	681d      	ldr	r5, [r3, #0]
 80043aa:	6862      	ldr	r2, [r4, #4]
 80043ac:	2100      	movs	r1, #0
 80043ae:	4628      	mov	r0, r5
 80043b0:	f7fb ff2e 	bl	8000210 <memchr>
 80043b4:	b108      	cbz	r0, 80043ba <_printf_i+0x1f2>
 80043b6:	1b40      	subs	r0, r0, r5
 80043b8:	6060      	str	r0, [r4, #4]
 80043ba:	6863      	ldr	r3, [r4, #4]
 80043bc:	6123      	str	r3, [r4, #16]
 80043be:	2300      	movs	r3, #0
 80043c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043c4:	e7a8      	b.n	8004318 <_printf_i+0x150>
 80043c6:	6923      	ldr	r3, [r4, #16]
 80043c8:	462a      	mov	r2, r5
 80043ca:	4649      	mov	r1, r9
 80043cc:	4640      	mov	r0, r8
 80043ce:	47d0      	blx	sl
 80043d0:	3001      	adds	r0, #1
 80043d2:	d0ab      	beq.n	800432c <_printf_i+0x164>
 80043d4:	6823      	ldr	r3, [r4, #0]
 80043d6:	079b      	lsls	r3, r3, #30
 80043d8:	d413      	bmi.n	8004402 <_printf_i+0x23a>
 80043da:	68e0      	ldr	r0, [r4, #12]
 80043dc:	9b03      	ldr	r3, [sp, #12]
 80043de:	4298      	cmp	r0, r3
 80043e0:	bfb8      	it	lt
 80043e2:	4618      	movlt	r0, r3
 80043e4:	e7a4      	b.n	8004330 <_printf_i+0x168>
 80043e6:	2301      	movs	r3, #1
 80043e8:	4632      	mov	r2, r6
 80043ea:	4649      	mov	r1, r9
 80043ec:	4640      	mov	r0, r8
 80043ee:	47d0      	blx	sl
 80043f0:	3001      	adds	r0, #1
 80043f2:	d09b      	beq.n	800432c <_printf_i+0x164>
 80043f4:	3501      	adds	r5, #1
 80043f6:	68e3      	ldr	r3, [r4, #12]
 80043f8:	9903      	ldr	r1, [sp, #12]
 80043fa:	1a5b      	subs	r3, r3, r1
 80043fc:	42ab      	cmp	r3, r5
 80043fe:	dcf2      	bgt.n	80043e6 <_printf_i+0x21e>
 8004400:	e7eb      	b.n	80043da <_printf_i+0x212>
 8004402:	2500      	movs	r5, #0
 8004404:	f104 0619 	add.w	r6, r4, #25
 8004408:	e7f5      	b.n	80043f6 <_printf_i+0x22e>
 800440a:	bf00      	nop
 800440c:	0800466d 	.word	0x0800466d
 8004410:	0800467e 	.word	0x0800467e

08004414 <_sbrk_r>:
 8004414:	b538      	push	{r3, r4, r5, lr}
 8004416:	4d06      	ldr	r5, [pc, #24]	; (8004430 <_sbrk_r+0x1c>)
 8004418:	2300      	movs	r3, #0
 800441a:	4604      	mov	r4, r0
 800441c:	4608      	mov	r0, r1
 800441e:	602b      	str	r3, [r5, #0]
 8004420:	f7fc fc50 	bl	8000cc4 <_sbrk>
 8004424:	1c43      	adds	r3, r0, #1
 8004426:	d102      	bne.n	800442e <_sbrk_r+0x1a>
 8004428:	682b      	ldr	r3, [r5, #0]
 800442a:	b103      	cbz	r3, 800442e <_sbrk_r+0x1a>
 800442c:	6023      	str	r3, [r4, #0]
 800442e:	bd38      	pop	{r3, r4, r5, pc}
 8004430:	2000011c 	.word	0x2000011c

08004434 <__sread>:
 8004434:	b510      	push	{r4, lr}
 8004436:	460c      	mov	r4, r1
 8004438:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800443c:	f000 f8a0 	bl	8004580 <_read_r>
 8004440:	2800      	cmp	r0, #0
 8004442:	bfab      	itete	ge
 8004444:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004446:	89a3      	ldrhlt	r3, [r4, #12]
 8004448:	181b      	addge	r3, r3, r0
 800444a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800444e:	bfac      	ite	ge
 8004450:	6563      	strge	r3, [r4, #84]	; 0x54
 8004452:	81a3      	strhlt	r3, [r4, #12]
 8004454:	bd10      	pop	{r4, pc}

08004456 <__swrite>:
 8004456:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800445a:	461f      	mov	r7, r3
 800445c:	898b      	ldrh	r3, [r1, #12]
 800445e:	05db      	lsls	r3, r3, #23
 8004460:	4605      	mov	r5, r0
 8004462:	460c      	mov	r4, r1
 8004464:	4616      	mov	r6, r2
 8004466:	d505      	bpl.n	8004474 <__swrite+0x1e>
 8004468:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800446c:	2302      	movs	r3, #2
 800446e:	2200      	movs	r2, #0
 8004470:	f000 f868 	bl	8004544 <_lseek_r>
 8004474:	89a3      	ldrh	r3, [r4, #12]
 8004476:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800447a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800447e:	81a3      	strh	r3, [r4, #12]
 8004480:	4632      	mov	r2, r6
 8004482:	463b      	mov	r3, r7
 8004484:	4628      	mov	r0, r5
 8004486:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800448a:	f000 b817 	b.w	80044bc <_write_r>

0800448e <__sseek>:
 800448e:	b510      	push	{r4, lr}
 8004490:	460c      	mov	r4, r1
 8004492:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004496:	f000 f855 	bl	8004544 <_lseek_r>
 800449a:	1c43      	adds	r3, r0, #1
 800449c:	89a3      	ldrh	r3, [r4, #12]
 800449e:	bf15      	itete	ne
 80044a0:	6560      	strne	r0, [r4, #84]	; 0x54
 80044a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80044a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80044aa:	81a3      	strheq	r3, [r4, #12]
 80044ac:	bf18      	it	ne
 80044ae:	81a3      	strhne	r3, [r4, #12]
 80044b0:	bd10      	pop	{r4, pc}

080044b2 <__sclose>:
 80044b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044b6:	f000 b813 	b.w	80044e0 <_close_r>
	...

080044bc <_write_r>:
 80044bc:	b538      	push	{r3, r4, r5, lr}
 80044be:	4d07      	ldr	r5, [pc, #28]	; (80044dc <_write_r+0x20>)
 80044c0:	4604      	mov	r4, r0
 80044c2:	4608      	mov	r0, r1
 80044c4:	4611      	mov	r1, r2
 80044c6:	2200      	movs	r2, #0
 80044c8:	602a      	str	r2, [r5, #0]
 80044ca:	461a      	mov	r2, r3
 80044cc:	f7fc fa68 	bl	80009a0 <_write>
 80044d0:	1c43      	adds	r3, r0, #1
 80044d2:	d102      	bne.n	80044da <_write_r+0x1e>
 80044d4:	682b      	ldr	r3, [r5, #0]
 80044d6:	b103      	cbz	r3, 80044da <_write_r+0x1e>
 80044d8:	6023      	str	r3, [r4, #0]
 80044da:	bd38      	pop	{r3, r4, r5, pc}
 80044dc:	2000011c 	.word	0x2000011c

080044e0 <_close_r>:
 80044e0:	b538      	push	{r3, r4, r5, lr}
 80044e2:	4d06      	ldr	r5, [pc, #24]	; (80044fc <_close_r+0x1c>)
 80044e4:	2300      	movs	r3, #0
 80044e6:	4604      	mov	r4, r0
 80044e8:	4608      	mov	r0, r1
 80044ea:	602b      	str	r3, [r5, #0]
 80044ec:	f7fc fbb5 	bl	8000c5a <_close>
 80044f0:	1c43      	adds	r3, r0, #1
 80044f2:	d102      	bne.n	80044fa <_close_r+0x1a>
 80044f4:	682b      	ldr	r3, [r5, #0]
 80044f6:	b103      	cbz	r3, 80044fa <_close_r+0x1a>
 80044f8:	6023      	str	r3, [r4, #0]
 80044fa:	bd38      	pop	{r3, r4, r5, pc}
 80044fc:	2000011c 	.word	0x2000011c

08004500 <_fstat_r>:
 8004500:	b538      	push	{r3, r4, r5, lr}
 8004502:	4d07      	ldr	r5, [pc, #28]	; (8004520 <_fstat_r+0x20>)
 8004504:	2300      	movs	r3, #0
 8004506:	4604      	mov	r4, r0
 8004508:	4608      	mov	r0, r1
 800450a:	4611      	mov	r1, r2
 800450c:	602b      	str	r3, [r5, #0]
 800450e:	f7fc fbb0 	bl	8000c72 <_fstat>
 8004512:	1c43      	adds	r3, r0, #1
 8004514:	d102      	bne.n	800451c <_fstat_r+0x1c>
 8004516:	682b      	ldr	r3, [r5, #0]
 8004518:	b103      	cbz	r3, 800451c <_fstat_r+0x1c>
 800451a:	6023      	str	r3, [r4, #0]
 800451c:	bd38      	pop	{r3, r4, r5, pc}
 800451e:	bf00      	nop
 8004520:	2000011c 	.word	0x2000011c

08004524 <_isatty_r>:
 8004524:	b538      	push	{r3, r4, r5, lr}
 8004526:	4d06      	ldr	r5, [pc, #24]	; (8004540 <_isatty_r+0x1c>)
 8004528:	2300      	movs	r3, #0
 800452a:	4604      	mov	r4, r0
 800452c:	4608      	mov	r0, r1
 800452e:	602b      	str	r3, [r5, #0]
 8004530:	f7fc fbaf 	bl	8000c92 <_isatty>
 8004534:	1c43      	adds	r3, r0, #1
 8004536:	d102      	bne.n	800453e <_isatty_r+0x1a>
 8004538:	682b      	ldr	r3, [r5, #0]
 800453a:	b103      	cbz	r3, 800453e <_isatty_r+0x1a>
 800453c:	6023      	str	r3, [r4, #0]
 800453e:	bd38      	pop	{r3, r4, r5, pc}
 8004540:	2000011c 	.word	0x2000011c

08004544 <_lseek_r>:
 8004544:	b538      	push	{r3, r4, r5, lr}
 8004546:	4d07      	ldr	r5, [pc, #28]	; (8004564 <_lseek_r+0x20>)
 8004548:	4604      	mov	r4, r0
 800454a:	4608      	mov	r0, r1
 800454c:	4611      	mov	r1, r2
 800454e:	2200      	movs	r2, #0
 8004550:	602a      	str	r2, [r5, #0]
 8004552:	461a      	mov	r2, r3
 8004554:	f7fc fba8 	bl	8000ca8 <_lseek>
 8004558:	1c43      	adds	r3, r0, #1
 800455a:	d102      	bne.n	8004562 <_lseek_r+0x1e>
 800455c:	682b      	ldr	r3, [r5, #0]
 800455e:	b103      	cbz	r3, 8004562 <_lseek_r+0x1e>
 8004560:	6023      	str	r3, [r4, #0]
 8004562:	bd38      	pop	{r3, r4, r5, pc}
 8004564:	2000011c 	.word	0x2000011c

08004568 <__malloc_lock>:
 8004568:	4801      	ldr	r0, [pc, #4]	; (8004570 <__malloc_lock+0x8>)
 800456a:	f7ff bb15 	b.w	8003b98 <__retarget_lock_acquire_recursive>
 800456e:	bf00      	nop
 8004570:	20000110 	.word	0x20000110

08004574 <__malloc_unlock>:
 8004574:	4801      	ldr	r0, [pc, #4]	; (800457c <__malloc_unlock+0x8>)
 8004576:	f7ff bb10 	b.w	8003b9a <__retarget_lock_release_recursive>
 800457a:	bf00      	nop
 800457c:	20000110 	.word	0x20000110

08004580 <_read_r>:
 8004580:	b538      	push	{r3, r4, r5, lr}
 8004582:	4d07      	ldr	r5, [pc, #28]	; (80045a0 <_read_r+0x20>)
 8004584:	4604      	mov	r4, r0
 8004586:	4608      	mov	r0, r1
 8004588:	4611      	mov	r1, r2
 800458a:	2200      	movs	r2, #0
 800458c:	602a      	str	r2, [r5, #0]
 800458e:	461a      	mov	r2, r3
 8004590:	f7fc fb46 	bl	8000c20 <_read>
 8004594:	1c43      	adds	r3, r0, #1
 8004596:	d102      	bne.n	800459e <_read_r+0x1e>
 8004598:	682b      	ldr	r3, [r5, #0]
 800459a:	b103      	cbz	r3, 800459e <_read_r+0x1e>
 800459c:	6023      	str	r3, [r4, #0]
 800459e:	bd38      	pop	{r3, r4, r5, pc}
 80045a0:	2000011c 	.word	0x2000011c

080045a4 <_init>:
 80045a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045a6:	bf00      	nop
 80045a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045aa:	bc08      	pop	{r3}
 80045ac:	469e      	mov	lr, r3
 80045ae:	4770      	bx	lr

080045b0 <_fini>:
 80045b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045b2:	bf00      	nop
 80045b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045b6:	bc08      	pop	{r3}
 80045b8:	469e      	mov	lr, r3
 80045ba:	4770      	bx	lr
