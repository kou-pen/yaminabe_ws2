
yaminabe_product3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003aa8  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003c6c  08003c6c  00013c6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c84  08003c84  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003c84  08003c84  00013c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003c8c  08003c8c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c8c  08003c8c  00013c8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c90  08003c90  00013c90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003c94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  2000000c  08003ca0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000128  08003ca0  00020128  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f4bf  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f0e  00000000  00000000  0002f4fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da8  00000000  00000000  00031410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cf0  00000000  00000000  000321b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021843  00000000  00000000  00032ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f6ff  00000000  00000000  000546eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf845  00000000  00000000  00063dea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013362f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039e8  00000000  00000000  00133680  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003c54 	.word	0x08003c54

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08003c54 	.word	0x08003c54

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050c:	f000 fd1a 	bl	8000f44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000510:	f000 f842 	bl	8000598 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000514:	f000 fa58 	bl	80009c8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000518:	f000 fa2c 	bl	8000974 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800051c:	f000 f8e6 	bl	80006ec <MX_TIM1_Init>
  MX_TIM2_Init();
 8000520:	f000 f99c 	bl	800085c <MX_TIM2_Init>
  MX_CAN2_Init();
 8000524:	f000 f8aa 	bl	800067c <MX_CAN2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000528:	2100      	movs	r1, #0
 800052a:	4817      	ldr	r0, [pc, #92]	; (8000588 <main+0x80>)
 800052c:	f002 fa74 	bl	8002a18 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000530:	2104      	movs	r1, #4
 8000532:	4815      	ldr	r0, [pc, #84]	; (8000588 <main+0x80>)
 8000534:	f002 fa70 	bl	8002a18 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOC,PSB1_Pin,GPIO_PIN_SET);
 8000538:	2201      	movs	r2, #1
 800053a:	2102      	movs	r1, #2
 800053c:	4813      	ldr	r0, [pc, #76]	; (800058c <main+0x84>)
 800053e:	f001 fb71 	bl	8001c24 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB,BRK1_Pin,GPIO_PIN_RESET);
 8000542:	2200      	movs	r2, #0
 8000544:	2101      	movs	r1, #1
 8000546:	4812      	ldr	r0, [pc, #72]	; (8000590 <main+0x88>)
 8000548:	f001 fb6c 	bl	8001c24 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA,DIRECTION1_Pin,GPIO_PIN_SET);
 800054c:	2201      	movs	r2, #1
 800054e:	2110      	movs	r1, #16
 8000550:	4810      	ldr	r0, [pc, #64]	; (8000594 <main+0x8c>)
 8000552:	f001 fb67 	bl	8001c24 <HAL_GPIO_WritePin>
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,60000);
 8000556:	4b0c      	ldr	r3, [pc, #48]	; (8000588 <main+0x80>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	f64e 2260 	movw	r2, #60000	; 0xea60
 800055e:	635a      	str	r2, [r3, #52]	; 0x34
	  HAL_Delay(1000);
 8000560:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000564:	f000 fd60 	bl	8001028 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA,DIRECTION1_Pin,GPIO_PIN_RESET);
 8000568:	2200      	movs	r2, #0
 800056a:	2110      	movs	r1, #16
 800056c:	4809      	ldr	r0, [pc, #36]	; (8000594 <main+0x8c>)
 800056e:	f001 fb59 	bl	8001c24 <HAL_GPIO_WritePin>
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,30000);
 8000572:	4b05      	ldr	r3, [pc, #20]	; (8000588 <main+0x80>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	f247 5230 	movw	r2, #30000	; 0x7530
 800057a:	635a      	str	r2, [r3, #52]	; 0x34
	  HAL_Delay(1000);
 800057c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000580:	f000 fd52 	bl	8001028 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC,PSB1_Pin,GPIO_PIN_SET);
 8000584:	e7d8      	b.n	8000538 <main+0x30>
 8000586:	bf00      	nop
 8000588:	20000050 	.word	0x20000050
 800058c:	40020800 	.word	0x40020800
 8000590:	40020400 	.word	0x40020400
 8000594:	40020000 	.word	0x40020000

08000598 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b094      	sub	sp, #80	; 0x50
 800059c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059e:	f107 031c 	add.w	r3, r7, #28
 80005a2:	2234      	movs	r2, #52	; 0x34
 80005a4:	2100      	movs	r1, #0
 80005a6:	4618      	mov	r0, r3
 80005a8:	f003 fb4c 	bl	8003c44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ac:	f107 0308 	add.w	r3, r7, #8
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	605a      	str	r2, [r3, #4]
 80005b6:	609a      	str	r2, [r3, #8]
 80005b8:	60da      	str	r2, [r3, #12]
 80005ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005bc:	2300      	movs	r3, #0
 80005be:	607b      	str	r3, [r7, #4]
 80005c0:	4b2c      	ldr	r3, [pc, #176]	; (8000674 <SystemClock_Config+0xdc>)
 80005c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c4:	4a2b      	ldr	r2, [pc, #172]	; (8000674 <SystemClock_Config+0xdc>)
 80005c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ca:	6413      	str	r3, [r2, #64]	; 0x40
 80005cc:	4b29      	ldr	r3, [pc, #164]	; (8000674 <SystemClock_Config+0xdc>)
 80005ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005d4:	607b      	str	r3, [r7, #4]
 80005d6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d8:	2300      	movs	r3, #0
 80005da:	603b      	str	r3, [r7, #0]
 80005dc:	4b26      	ldr	r3, [pc, #152]	; (8000678 <SystemClock_Config+0xe0>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a25      	ldr	r2, [pc, #148]	; (8000678 <SystemClock_Config+0xe0>)
 80005e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005e6:	6013      	str	r3, [r2, #0]
 80005e8:	4b23      	ldr	r3, [pc, #140]	; (8000678 <SystemClock_Config+0xe0>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005f0:	603b      	str	r3, [r7, #0]
 80005f2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005f4:	2302      	movs	r3, #2
 80005f6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005f8:	2301      	movs	r3, #1
 80005fa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005fc:	2310      	movs	r3, #16
 80005fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000600:	2302      	movs	r3, #2
 8000602:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000604:	2300      	movs	r3, #0
 8000606:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000608:	2308      	movs	r3, #8
 800060a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800060c:	23b4      	movs	r3, #180	; 0xb4
 800060e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000610:	2302      	movs	r3, #2
 8000612:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000614:	2302      	movs	r3, #2
 8000616:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000618:	2302      	movs	r3, #2
 800061a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800061c:	f107 031c 	add.w	r3, r7, #28
 8000620:	4618      	mov	r0, r3
 8000622:	f001 feb3 	bl	800238c <HAL_RCC_OscConfig>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800062c:	f000 fa8a 	bl	8000b44 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000630:	f001 fb12 	bl	8001c58 <HAL_PWREx_EnableOverDrive>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800063a:	f000 fa83 	bl	8000b44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800063e:	230f      	movs	r3, #15
 8000640:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000642:	2302      	movs	r3, #2
 8000644:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000646:	2300      	movs	r3, #0
 8000648:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800064a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800064e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000650:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000654:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000656:	f107 0308 	add.w	r3, r7, #8
 800065a:	2105      	movs	r1, #5
 800065c:	4618      	mov	r0, r3
 800065e:	f001 fb4b 	bl	8001cf8 <HAL_RCC_ClockConfig>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000668:	f000 fa6c 	bl	8000b44 <Error_Handler>
  }
}
 800066c:	bf00      	nop
 800066e:	3750      	adds	r7, #80	; 0x50
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	40023800 	.word	0x40023800
 8000678:	40007000 	.word	0x40007000

0800067c <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000680:	4b18      	ldr	r3, [pc, #96]	; (80006e4 <MX_CAN2_Init+0x68>)
 8000682:	4a19      	ldr	r2, [pc, #100]	; (80006e8 <MX_CAN2_Init+0x6c>)
 8000684:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 9;
 8000686:	4b17      	ldr	r3, [pc, #92]	; (80006e4 <MX_CAN2_Init+0x68>)
 8000688:	2209      	movs	r2, #9
 800068a:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 800068c:	4b15      	ldr	r3, [pc, #84]	; (80006e4 <MX_CAN2_Init+0x68>)
 800068e:	2200      	movs	r2, #0
 8000690:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_4TQ;
 8000692:	4b14      	ldr	r3, [pc, #80]	; (80006e4 <MX_CAN2_Init+0x68>)
 8000694:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 8000698:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_4TQ;
 800069a:	4b12      	ldr	r3, [pc, #72]	; (80006e4 <MX_CAN2_Init+0x68>)
 800069c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80006a0:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_5TQ;
 80006a2:	4b10      	ldr	r3, [pc, #64]	; (80006e4 <MX_CAN2_Init+0x68>)
 80006a4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80006a8:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80006aa:	4b0e      	ldr	r3, [pc, #56]	; (80006e4 <MX_CAN2_Init+0x68>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80006b0:	4b0c      	ldr	r3, [pc, #48]	; (80006e4 <MX_CAN2_Init+0x68>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80006b6:	4b0b      	ldr	r3, [pc, #44]	; (80006e4 <MX_CAN2_Init+0x68>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80006bc:	4b09      	ldr	r3, [pc, #36]	; (80006e4 <MX_CAN2_Init+0x68>)
 80006be:	2200      	movs	r2, #0
 80006c0:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80006c2:	4b08      	ldr	r3, [pc, #32]	; (80006e4 <MX_CAN2_Init+0x68>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80006c8:	4b06      	ldr	r3, [pc, #24]	; (80006e4 <MX_CAN2_Init+0x68>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80006ce:	4805      	ldr	r0, [pc, #20]	; (80006e4 <MX_CAN2_Init+0x68>)
 80006d0:	f000 fcce 	bl	8001070 <HAL_CAN_Init>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_CAN2_Init+0x62>
  {
    Error_Handler();
 80006da:	f000 fa33 	bl	8000b44 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80006de:	bf00      	nop
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	20000028 	.word	0x20000028
 80006e8:	40006800 	.word	0x40006800

080006ec <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b096      	sub	sp, #88	; 0x58
 80006f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006f2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	605a      	str	r2, [r3, #4]
 80006fc:	609a      	str	r2, [r3, #8]
 80006fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000700:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800070a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800070e:	2200      	movs	r2, #0
 8000710:	601a      	str	r2, [r3, #0]
 8000712:	605a      	str	r2, [r3, #4]
 8000714:	609a      	str	r2, [r3, #8]
 8000716:	60da      	str	r2, [r3, #12]
 8000718:	611a      	str	r2, [r3, #16]
 800071a:	615a      	str	r2, [r3, #20]
 800071c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800071e:	1d3b      	adds	r3, r7, #4
 8000720:	2220      	movs	r2, #32
 8000722:	2100      	movs	r1, #0
 8000724:	4618      	mov	r0, r3
 8000726:	f003 fa8d 	bl	8003c44 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800072a:	4b4a      	ldr	r3, [pc, #296]	; (8000854 <MX_TIM1_Init+0x168>)
 800072c:	4a4a      	ldr	r2, [pc, #296]	; (8000858 <MX_TIM1_Init+0x16c>)
 800072e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000730:	4b48      	ldr	r3, [pc, #288]	; (8000854 <MX_TIM1_Init+0x168>)
 8000732:	2200      	movs	r2, #0
 8000734:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000736:	4b47      	ldr	r3, [pc, #284]	; (8000854 <MX_TIM1_Init+0x168>)
 8000738:	2200      	movs	r2, #0
 800073a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800073c:	4b45      	ldr	r3, [pc, #276]	; (8000854 <MX_TIM1_Init+0x168>)
 800073e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000742:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000744:	4b43      	ldr	r3, [pc, #268]	; (8000854 <MX_TIM1_Init+0x168>)
 8000746:	2200      	movs	r2, #0
 8000748:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800074a:	4b42      	ldr	r3, [pc, #264]	; (8000854 <MX_TIM1_Init+0x168>)
 800074c:	2200      	movs	r2, #0
 800074e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000750:	4b40      	ldr	r3, [pc, #256]	; (8000854 <MX_TIM1_Init+0x168>)
 8000752:	2200      	movs	r2, #0
 8000754:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000756:	483f      	ldr	r0, [pc, #252]	; (8000854 <MX_TIM1_Init+0x168>)
 8000758:	f002 f8b6 	bl	80028c8 <HAL_TIM_Base_Init>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000762:	f000 f9ef 	bl	8000b44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000766:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800076a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800076c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000770:	4619      	mov	r1, r3
 8000772:	4838      	ldr	r0, [pc, #224]	; (8000854 <MX_TIM1_Init+0x168>)
 8000774:	f002 fada 	bl	8002d2c <HAL_TIM_ConfigClockSource>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800077e:	f000 f9e1 	bl	8000b44 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000782:	4834      	ldr	r0, [pc, #208]	; (8000854 <MX_TIM1_Init+0x168>)
 8000784:	f002 f8ef 	bl	8002966 <HAL_TIM_PWM_Init>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800078e:	f000 f9d9 	bl	8000b44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000792:	2300      	movs	r3, #0
 8000794:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000796:	2300      	movs	r3, #0
 8000798:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800079a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800079e:	4619      	mov	r1, r3
 80007a0:	482c      	ldr	r0, [pc, #176]	; (8000854 <MX_TIM1_Init+0x168>)
 80007a2:	f002 fe9b 	bl	80034dc <HAL_TIMEx_MasterConfigSynchronization>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80007ac:	f000 f9ca 	bl	8000b44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007b0:	2360      	movs	r3, #96	; 0x60
 80007b2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80007b4:	2300      	movs	r3, #0
 80007b6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007b8:	2300      	movs	r3, #0
 80007ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80007bc:	2300      	movs	r3, #0
 80007be:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007c0:	2300      	movs	r3, #0
 80007c2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007c4:	2300      	movs	r3, #0
 80007c6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007c8:	2300      	movs	r3, #0
 80007ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007d0:	2200      	movs	r2, #0
 80007d2:	4619      	mov	r1, r3
 80007d4:	481f      	ldr	r0, [pc, #124]	; (8000854 <MX_TIM1_Init+0x168>)
 80007d6:	f002 f9e7 	bl	8002ba8 <HAL_TIM_PWM_ConfigChannel>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80007e0:	f000 f9b0 	bl	8000b44 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80007e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007e8:	2204      	movs	r2, #4
 80007ea:	4619      	mov	r1, r3
 80007ec:	4819      	ldr	r0, [pc, #100]	; (8000854 <MX_TIM1_Init+0x168>)
 80007ee:	f002 f9db 	bl	8002ba8 <HAL_TIM_PWM_ConfigChannel>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80007f8:	f000 f9a4 	bl	8000b44 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80007fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000800:	2208      	movs	r2, #8
 8000802:	4619      	mov	r1, r3
 8000804:	4813      	ldr	r0, [pc, #76]	; (8000854 <MX_TIM1_Init+0x168>)
 8000806:	f002 f9cf 	bl	8002ba8 <HAL_TIM_PWM_ConfigChannel>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000810:	f000 f998 	bl	8000b44 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000814:	2300      	movs	r3, #0
 8000816:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000818:	2300      	movs	r3, #0
 800081a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800081c:	2300      	movs	r3, #0
 800081e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000820:	2300      	movs	r3, #0
 8000822:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000824:	2300      	movs	r3, #0
 8000826:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000828:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800082c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800082e:	2300      	movs	r3, #0
 8000830:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000832:	1d3b      	adds	r3, r7, #4
 8000834:	4619      	mov	r1, r3
 8000836:	4807      	ldr	r0, [pc, #28]	; (8000854 <MX_TIM1_Init+0x168>)
 8000838:	f002 fecc 	bl	80035d4 <HAL_TIMEx_ConfigBreakDeadTime>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8000842:	f000 f97f 	bl	8000b44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000846:	4803      	ldr	r0, [pc, #12]	; (8000854 <MX_TIM1_Init+0x168>)
 8000848:	f000 fa4e 	bl	8000ce8 <HAL_TIM_MspPostInit>

}
 800084c:	bf00      	nop
 800084e:	3758      	adds	r7, #88	; 0x58
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	20000050 	.word	0x20000050
 8000858:	40010000 	.word	0x40010000

0800085c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b08e      	sub	sp, #56	; 0x38
 8000860:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000862:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
 800086a:	605a      	str	r2, [r3, #4]
 800086c:	609a      	str	r2, [r3, #8]
 800086e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000870:	f107 0320 	add.w	r3, r7, #32
 8000874:	2200      	movs	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
 8000878:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800087a:	1d3b      	adds	r3, r7, #4
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	605a      	str	r2, [r3, #4]
 8000882:	609a      	str	r2, [r3, #8]
 8000884:	60da      	str	r2, [r3, #12]
 8000886:	611a      	str	r2, [r3, #16]
 8000888:	615a      	str	r2, [r3, #20]
 800088a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800088c:	4b38      	ldr	r3, [pc, #224]	; (8000970 <MX_TIM2_Init+0x114>)
 800088e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000892:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000894:	4b36      	ldr	r3, [pc, #216]	; (8000970 <MX_TIM2_Init+0x114>)
 8000896:	2200      	movs	r2, #0
 8000898:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800089a:	4b35      	ldr	r3, [pc, #212]	; (8000970 <MX_TIM2_Init+0x114>)
 800089c:	2200      	movs	r2, #0
 800089e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80008a0:	4b33      	ldr	r3, [pc, #204]	; (8000970 <MX_TIM2_Init+0x114>)
 80008a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008a6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008a8:	4b31      	ldr	r3, [pc, #196]	; (8000970 <MX_TIM2_Init+0x114>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008ae:	4b30      	ldr	r3, [pc, #192]	; (8000970 <MX_TIM2_Init+0x114>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008b4:	482e      	ldr	r0, [pc, #184]	; (8000970 <MX_TIM2_Init+0x114>)
 80008b6:	f002 f807 	bl	80028c8 <HAL_TIM_Base_Init>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80008c0:	f000 f940 	bl	8000b44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008c8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008ce:	4619      	mov	r1, r3
 80008d0:	4827      	ldr	r0, [pc, #156]	; (8000970 <MX_TIM2_Init+0x114>)
 80008d2:	f002 fa2b 	bl	8002d2c <HAL_TIM_ConfigClockSource>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80008dc:	f000 f932 	bl	8000b44 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80008e0:	4823      	ldr	r0, [pc, #140]	; (8000970 <MX_TIM2_Init+0x114>)
 80008e2:	f002 f840 	bl	8002966 <HAL_TIM_PWM_Init>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80008ec:	f000 f92a 	bl	8000b44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008f0:	2300      	movs	r3, #0
 80008f2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008f4:	2300      	movs	r3, #0
 80008f6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008f8:	f107 0320 	add.w	r3, r7, #32
 80008fc:	4619      	mov	r1, r3
 80008fe:	481c      	ldr	r0, [pc, #112]	; (8000970 <MX_TIM2_Init+0x114>)
 8000900:	f002 fdec 	bl	80034dc <HAL_TIMEx_MasterConfigSynchronization>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800090a:	f000 f91b 	bl	8000b44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800090e:	2360      	movs	r3, #96	; 0x60
 8000910:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000912:	2300      	movs	r3, #0
 8000914:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000916:	2300      	movs	r3, #0
 8000918:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800091a:	2300      	movs	r3, #0
 800091c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800091e:	1d3b      	adds	r3, r7, #4
 8000920:	2200      	movs	r2, #0
 8000922:	4619      	mov	r1, r3
 8000924:	4812      	ldr	r0, [pc, #72]	; (8000970 <MX_TIM2_Init+0x114>)
 8000926:	f002 f93f 	bl	8002ba8 <HAL_TIM_PWM_ConfigChannel>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000930:	f000 f908 	bl	8000b44 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000934:	1d3b      	adds	r3, r7, #4
 8000936:	2204      	movs	r2, #4
 8000938:	4619      	mov	r1, r3
 800093a:	480d      	ldr	r0, [pc, #52]	; (8000970 <MX_TIM2_Init+0x114>)
 800093c:	f002 f934 	bl	8002ba8 <HAL_TIM_PWM_ConfigChannel>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8000946:	f000 f8fd 	bl	8000b44 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800094a:	1d3b      	adds	r3, r7, #4
 800094c:	2208      	movs	r2, #8
 800094e:	4619      	mov	r1, r3
 8000950:	4807      	ldr	r0, [pc, #28]	; (8000970 <MX_TIM2_Init+0x114>)
 8000952:	f002 f929 	bl	8002ba8 <HAL_TIM_PWM_ConfigChannel>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 800095c:	f000 f8f2 	bl	8000b44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000960:	4803      	ldr	r0, [pc, #12]	; (8000970 <MX_TIM2_Init+0x114>)
 8000962:	f000 f9c1 	bl	8000ce8 <HAL_TIM_MspPostInit>

}
 8000966:	bf00      	nop
 8000968:	3738      	adds	r7, #56	; 0x38
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	20000098 	.word	0x20000098

08000974 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000978:	4b11      	ldr	r3, [pc, #68]	; (80009c0 <MX_USART2_UART_Init+0x4c>)
 800097a:	4a12      	ldr	r2, [pc, #72]	; (80009c4 <MX_USART2_UART_Init+0x50>)
 800097c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800097e:	4b10      	ldr	r3, [pc, #64]	; (80009c0 <MX_USART2_UART_Init+0x4c>)
 8000980:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000984:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000986:	4b0e      	ldr	r3, [pc, #56]	; (80009c0 <MX_USART2_UART_Init+0x4c>)
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800098c:	4b0c      	ldr	r3, [pc, #48]	; (80009c0 <MX_USART2_UART_Init+0x4c>)
 800098e:	2200      	movs	r2, #0
 8000990:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000992:	4b0b      	ldr	r3, [pc, #44]	; (80009c0 <MX_USART2_UART_Init+0x4c>)
 8000994:	2200      	movs	r2, #0
 8000996:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000998:	4b09      	ldr	r3, [pc, #36]	; (80009c0 <MX_USART2_UART_Init+0x4c>)
 800099a:	220c      	movs	r2, #12
 800099c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800099e:	4b08      	ldr	r3, [pc, #32]	; (80009c0 <MX_USART2_UART_Init+0x4c>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009a4:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <MX_USART2_UART_Init+0x4c>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009aa:	4805      	ldr	r0, [pc, #20]	; (80009c0 <MX_USART2_UART_Init+0x4c>)
 80009ac:	f002 fe64 	bl	8003678 <HAL_UART_Init>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009b6:	f000 f8c5 	bl	8000b44 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	200000e0 	.word	0x200000e0
 80009c4:	40004400 	.word	0x40004400

080009c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b08a      	sub	sp, #40	; 0x28
 80009cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ce:	f107 0314 	add.w	r3, r7, #20
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
 80009d6:	605a      	str	r2, [r3, #4]
 80009d8:	609a      	str	r2, [r3, #8]
 80009da:	60da      	str	r2, [r3, #12]
 80009dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	613b      	str	r3, [r7, #16]
 80009e2:	4b53      	ldr	r3, [pc, #332]	; (8000b30 <MX_GPIO_Init+0x168>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	4a52      	ldr	r2, [pc, #328]	; (8000b30 <MX_GPIO_Init+0x168>)
 80009e8:	f043 0304 	orr.w	r3, r3, #4
 80009ec:	6313      	str	r3, [r2, #48]	; 0x30
 80009ee:	4b50      	ldr	r3, [pc, #320]	; (8000b30 <MX_GPIO_Init+0x168>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	f003 0304 	and.w	r3, r3, #4
 80009f6:	613b      	str	r3, [r7, #16]
 80009f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	60fb      	str	r3, [r7, #12]
 80009fe:	4b4c      	ldr	r3, [pc, #304]	; (8000b30 <MX_GPIO_Init+0x168>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	4a4b      	ldr	r2, [pc, #300]	; (8000b30 <MX_GPIO_Init+0x168>)
 8000a04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a08:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0a:	4b49      	ldr	r3, [pc, #292]	; (8000b30 <MX_GPIO_Init+0x168>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a12:	60fb      	str	r3, [r7, #12]
 8000a14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a16:	2300      	movs	r3, #0
 8000a18:	60bb      	str	r3, [r7, #8]
 8000a1a:	4b45      	ldr	r3, [pc, #276]	; (8000b30 <MX_GPIO_Init+0x168>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	4a44      	ldr	r2, [pc, #272]	; (8000b30 <MX_GPIO_Init+0x168>)
 8000a20:	f043 0301 	orr.w	r3, r3, #1
 8000a24:	6313      	str	r3, [r2, #48]	; 0x30
 8000a26:	4b42      	ldr	r3, [pc, #264]	; (8000b30 <MX_GPIO_Init+0x168>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	f003 0301 	and.w	r3, r3, #1
 8000a2e:	60bb      	str	r3, [r7, #8]
 8000a30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	607b      	str	r3, [r7, #4]
 8000a36:	4b3e      	ldr	r3, [pc, #248]	; (8000b30 <MX_GPIO_Init+0x168>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	4a3d      	ldr	r2, [pc, #244]	; (8000b30 <MX_GPIO_Init+0x168>)
 8000a3c:	f043 0302 	orr.w	r3, r3, #2
 8000a40:	6313      	str	r3, [r2, #48]	; 0x30
 8000a42:	4b3b      	ldr	r3, [pc, #236]	; (8000b30 <MX_GPIO_Init+0x168>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	f003 0302 	and.w	r3, r3, #2
 8000a4a:	607b      	str	r3, [r7, #4]
 8000a4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	603b      	str	r3, [r7, #0]
 8000a52:	4b37      	ldr	r3, [pc, #220]	; (8000b30 <MX_GPIO_Init+0x168>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	4a36      	ldr	r2, [pc, #216]	; (8000b30 <MX_GPIO_Init+0x168>)
 8000a58:	f043 0308 	orr.w	r3, r3, #8
 8000a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5e:	4b34      	ldr	r3, [pc, #208]	; (8000b30 <MX_GPIO_Init+0x168>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	f003 0308 	and.w	r3, r3, #8
 8000a66:	603b      	str	r3, [r7, #0]
 8000a68:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PSB2_Pin|PSB1_Pin|BRK2_Pin|BATT_Pin
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	211f      	movs	r1, #31
 8000a6e:	4831      	ldr	r0, [pc, #196]	; (8000b34 <MX_GPIO_Init+0x16c>)
 8000a70:	f001 f8d8 	bl	8001c24 <HAL_GPIO_WritePin>
                          |PSB3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DIRECTION3_Pin|DIRECTION2_Pin|DIRECTION1_Pin|DIRECTION6_Pin
 8000a74:	2200      	movs	r2, #0
 8000a76:	f64e 0173 	movw	r1, #59507	; 0xe873
 8000a7a:	482f      	ldr	r0, [pc, #188]	; (8000b38 <MX_GPIO_Init+0x170>)
 8000a7c:	f001 f8d2 	bl	8001c24 <HAL_GPIO_WritePin>
                          |DIRECTION5_Pin|BRK6_Pin|LED1_Pin|LED2_Pin
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BRK1_Pin|PSB5_Pin|BRK5_Pin|PSB6_Pin
 8000a80:	2200      	movs	r2, #0
 8000a82:	f24f 0107 	movw	r1, #61447	; 0xf007
 8000a86:	482d      	ldr	r0, [pc, #180]	; (8000b3c <MX_GPIO_Init+0x174>)
 8000a88:	f001 f8cc 	bl	8001c24 <HAL_GPIO_WritePin>
                          |BRK3_Pin|PSB4_Pin|BRK4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIRECTION4_GPIO_Port, DIRECTION4_Pin, GPIO_PIN_RESET);
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	2104      	movs	r1, #4
 8000a90:	482b      	ldr	r0, [pc, #172]	; (8000b40 <MX_GPIO_Init+0x178>)
 8000a92:	f001 f8c7 	bl	8001c24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a96:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a9c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000aa0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000aa6:	f107 0314 	add.w	r3, r7, #20
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4821      	ldr	r0, [pc, #132]	; (8000b34 <MX_GPIO_Init+0x16c>)
 8000aae:	f000 ff25 	bl	80018fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PSB2_Pin PSB1_Pin BRK2_Pin BATT_Pin
                           PSB3_Pin */
  GPIO_InitStruct.Pin = PSB2_Pin|PSB1_Pin|BRK2_Pin|BATT_Pin
 8000ab2:	231f      	movs	r3, #31
 8000ab4:	617b      	str	r3, [r7, #20]
                          |PSB3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aba:	2300      	movs	r3, #0
 8000abc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ac2:	f107 0314 	add.w	r3, r7, #20
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	481a      	ldr	r0, [pc, #104]	; (8000b34 <MX_GPIO_Init+0x16c>)
 8000aca:	f000 ff17 	bl	80018fc <HAL_GPIO_Init>

  /*Configure GPIO pins : DIRECTION3_Pin DIRECTION2_Pin DIRECTION1_Pin DIRECTION6_Pin
                           DIRECTION5_Pin BRK6_Pin LED1_Pin LED2_Pin
                           LED3_Pin */
  GPIO_InitStruct.Pin = DIRECTION3_Pin|DIRECTION2_Pin|DIRECTION1_Pin|DIRECTION6_Pin
 8000ace:	f64e 0373 	movw	r3, #59507	; 0xe873
 8000ad2:	617b      	str	r3, [r7, #20]
                          |DIRECTION5_Pin|BRK6_Pin|LED1_Pin|LED2_Pin
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000adc:	2300      	movs	r3, #0
 8000ade:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae0:	f107 0314 	add.w	r3, r7, #20
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4814      	ldr	r0, [pc, #80]	; (8000b38 <MX_GPIO_Init+0x170>)
 8000ae8:	f000 ff08 	bl	80018fc <HAL_GPIO_Init>

  /*Configure GPIO pins : BRK1_Pin PSB5_Pin BRK5_Pin PSB6_Pin
                           BRK3_Pin PSB4_Pin BRK4_Pin */
  GPIO_InitStruct.Pin = BRK1_Pin|PSB5_Pin|BRK5_Pin|PSB6_Pin
 8000aec:	f24f 0307 	movw	r3, #61447	; 0xf007
 8000af0:	617b      	str	r3, [r7, #20]
                          |BRK3_Pin|PSB4_Pin|BRK4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af2:	2301      	movs	r3, #1
 8000af4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afa:	2300      	movs	r3, #0
 8000afc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000afe:	f107 0314 	add.w	r3, r7, #20
 8000b02:	4619      	mov	r1, r3
 8000b04:	480d      	ldr	r0, [pc, #52]	; (8000b3c <MX_GPIO_Init+0x174>)
 8000b06:	f000 fef9 	bl	80018fc <HAL_GPIO_Init>

  /*Configure GPIO pin : DIRECTION4_Pin */
  GPIO_InitStruct.Pin = DIRECTION4_Pin;
 8000b0a:	2304      	movs	r3, #4
 8000b0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b16:	2300      	movs	r3, #0
 8000b18:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIRECTION4_GPIO_Port, &GPIO_InitStruct);
 8000b1a:	f107 0314 	add.w	r3, r7, #20
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4807      	ldr	r0, [pc, #28]	; (8000b40 <MX_GPIO_Init+0x178>)
 8000b22:	f000 feeb 	bl	80018fc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b26:	bf00      	nop
 8000b28:	3728      	adds	r7, #40	; 0x28
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	40023800 	.word	0x40023800
 8000b34:	40020800 	.word	0x40020800
 8000b38:	40020000 	.word	0x40020000
 8000b3c:	40020400 	.word	0x40020400
 8000b40:	40020c00 	.word	0x40020c00

08000b44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b48:	b672      	cpsid	i
}
 8000b4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b4c:	e7fe      	b.n	8000b4c <Error_Handler+0x8>
	...

08000b50 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	607b      	str	r3, [r7, #4]
 8000b5a:	4b10      	ldr	r3, [pc, #64]	; (8000b9c <HAL_MspInit+0x4c>)
 8000b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b5e:	4a0f      	ldr	r2, [pc, #60]	; (8000b9c <HAL_MspInit+0x4c>)
 8000b60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b64:	6453      	str	r3, [r2, #68]	; 0x44
 8000b66:	4b0d      	ldr	r3, [pc, #52]	; (8000b9c <HAL_MspInit+0x4c>)
 8000b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b6e:	607b      	str	r3, [r7, #4]
 8000b70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	603b      	str	r3, [r7, #0]
 8000b76:	4b09      	ldr	r3, [pc, #36]	; (8000b9c <HAL_MspInit+0x4c>)
 8000b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7a:	4a08      	ldr	r2, [pc, #32]	; (8000b9c <HAL_MspInit+0x4c>)
 8000b7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b80:	6413      	str	r3, [r2, #64]	; 0x40
 8000b82:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <HAL_MspInit+0x4c>)
 8000b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b8a:	603b      	str	r3, [r7, #0]
 8000b8c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b8e:	2007      	movs	r0, #7
 8000b90:	f000 fe72 	bl	8001878 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b94:	bf00      	nop
 8000b96:	3708      	adds	r7, #8
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	40023800 	.word	0x40023800

08000ba0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b08a      	sub	sp, #40	; 0x28
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba8:	f107 0314 	add.w	r3, r7, #20
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
 8000bb2:	609a      	str	r2, [r3, #8]
 8000bb4:	60da      	str	r2, [r3, #12]
 8000bb6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN2)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a2c      	ldr	r2, [pc, #176]	; (8000c70 <HAL_CAN_MspInit+0xd0>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d151      	bne.n	8000c66 <HAL_CAN_MspInit+0xc6>
  {
  /* USER CODE BEGIN CAN2_MspInit 0 */

  /* USER CODE END CAN2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	613b      	str	r3, [r7, #16]
 8000bc6:	4b2b      	ldr	r3, [pc, #172]	; (8000c74 <HAL_CAN_MspInit+0xd4>)
 8000bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bca:	4a2a      	ldr	r2, [pc, #168]	; (8000c74 <HAL_CAN_MspInit+0xd4>)
 8000bcc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000bd0:	6413      	str	r3, [r2, #64]	; 0x40
 8000bd2:	4b28      	ldr	r3, [pc, #160]	; (8000c74 <HAL_CAN_MspInit+0xd4>)
 8000bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000bda:	613b      	str	r3, [r7, #16]
 8000bdc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	60fb      	str	r3, [r7, #12]
 8000be2:	4b24      	ldr	r3, [pc, #144]	; (8000c74 <HAL_CAN_MspInit+0xd4>)
 8000be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be6:	4a23      	ldr	r2, [pc, #140]	; (8000c74 <HAL_CAN_MspInit+0xd4>)
 8000be8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000bec:	6413      	str	r3, [r2, #64]	; 0x40
 8000bee:	4b21      	ldr	r3, [pc, #132]	; (8000c74 <HAL_CAN_MspInit+0xd4>)
 8000bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bf6:	60fb      	str	r3, [r7, #12]
 8000bf8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	60bb      	str	r3, [r7, #8]
 8000bfe:	4b1d      	ldr	r3, [pc, #116]	; (8000c74 <HAL_CAN_MspInit+0xd4>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	4a1c      	ldr	r2, [pc, #112]	; (8000c74 <HAL_CAN_MspInit+0xd4>)
 8000c04:	f043 0302 	orr.w	r3, r3, #2
 8000c08:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0a:	4b1a      	ldr	r3, [pc, #104]	; (8000c74 <HAL_CAN_MspInit+0xd4>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	f003 0302 	and.w	r3, r3, #2
 8000c12:	60bb      	str	r3, [r7, #8]
 8000c14:	68bb      	ldr	r3, [r7, #8]
    /**CAN2 GPIO Configuration
    PB5     ------> CAN2_RX
    PB6     ------> CAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000c16:	2360      	movs	r3, #96	; 0x60
 8000c18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c22:	2303      	movs	r3, #3
 8000c24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000c26:	2309      	movs	r3, #9
 8000c28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c2a:	f107 0314 	add.w	r3, r7, #20
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4811      	ldr	r0, [pc, #68]	; (8000c78 <HAL_CAN_MspInit+0xd8>)
 8000c32:	f000 fe63 	bl	80018fc <HAL_GPIO_Init>

    /* CAN2 interrupt Init */
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 0, 0);
 8000c36:	2200      	movs	r2, #0
 8000c38:	2100      	movs	r1, #0
 8000c3a:	203f      	movs	r0, #63	; 0x3f
 8000c3c:	f000 fe27 	bl	800188e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 8000c40:	203f      	movs	r0, #63	; 0x3f
 8000c42:	f000 fe40 	bl	80018c6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 8000c46:	2200      	movs	r2, #0
 8000c48:	2100      	movs	r1, #0
 8000c4a:	2040      	movs	r0, #64	; 0x40
 8000c4c:	f000 fe1f 	bl	800188e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8000c50:	2040      	movs	r0, #64	; 0x40
 8000c52:	f000 fe38 	bl	80018c6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 8000c56:	2200      	movs	r2, #0
 8000c58:	2100      	movs	r1, #0
 8000c5a:	2041      	movs	r0, #65	; 0x41
 8000c5c:	f000 fe17 	bl	800188e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8000c60:	2041      	movs	r0, #65	; 0x41
 8000c62:	f000 fe30 	bl	80018c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8000c66:	bf00      	nop
 8000c68:	3728      	adds	r7, #40	; 0x28
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40006800 	.word	0x40006800
 8000c74:	40023800 	.word	0x40023800
 8000c78:	40020400 	.word	0x40020400

08000c7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b085      	sub	sp, #20
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a15      	ldr	r2, [pc, #84]	; (8000ce0 <HAL_TIM_Base_MspInit+0x64>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d10e      	bne.n	8000cac <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c8e:	2300      	movs	r3, #0
 8000c90:	60fb      	str	r3, [r7, #12]
 8000c92:	4b14      	ldr	r3, [pc, #80]	; (8000ce4 <HAL_TIM_Base_MspInit+0x68>)
 8000c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c96:	4a13      	ldr	r2, [pc, #76]	; (8000ce4 <HAL_TIM_Base_MspInit+0x68>)
 8000c98:	f043 0301 	orr.w	r3, r3, #1
 8000c9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c9e:	4b11      	ldr	r3, [pc, #68]	; (8000ce4 <HAL_TIM_Base_MspInit+0x68>)
 8000ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca2:	f003 0301 	and.w	r3, r3, #1
 8000ca6:	60fb      	str	r3, [r7, #12]
 8000ca8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000caa:	e012      	b.n	8000cd2 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM2)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000cb4:	d10d      	bne.n	8000cd2 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	60bb      	str	r3, [r7, #8]
 8000cba:	4b0a      	ldr	r3, [pc, #40]	; (8000ce4 <HAL_TIM_Base_MspInit+0x68>)
 8000cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cbe:	4a09      	ldr	r2, [pc, #36]	; (8000ce4 <HAL_TIM_Base_MspInit+0x68>)
 8000cc0:	f043 0301 	orr.w	r3, r3, #1
 8000cc4:	6413      	str	r3, [r2, #64]	; 0x40
 8000cc6:	4b07      	ldr	r3, [pc, #28]	; (8000ce4 <HAL_TIM_Base_MspInit+0x68>)
 8000cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cca:	f003 0301 	and.w	r3, r3, #1
 8000cce:	60bb      	str	r3, [r7, #8]
 8000cd0:	68bb      	ldr	r3, [r7, #8]
}
 8000cd2:	bf00      	nop
 8000cd4:	3714      	adds	r7, #20
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	40010000 	.word	0x40010000
 8000ce4:	40023800 	.word	0x40023800

08000ce8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b08a      	sub	sp, #40	; 0x28
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf0:	f107 0314 	add.w	r3, r7, #20
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
 8000cf8:	605a      	str	r2, [r3, #4]
 8000cfa:	609a      	str	r2, [r3, #8]
 8000cfc:	60da      	str	r2, [r3, #12]
 8000cfe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a25      	ldr	r2, [pc, #148]	; (8000d9c <HAL_TIM_MspPostInit+0xb4>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d11f      	bne.n	8000d4a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	613b      	str	r3, [r7, #16]
 8000d0e:	4b24      	ldr	r3, [pc, #144]	; (8000da0 <HAL_TIM_MspPostInit+0xb8>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	4a23      	ldr	r2, [pc, #140]	; (8000da0 <HAL_TIM_MspPostInit+0xb8>)
 8000d14:	f043 0301 	orr.w	r3, r3, #1
 8000d18:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1a:	4b21      	ldr	r3, [pc, #132]	; (8000da0 <HAL_TIM_MspPostInit+0xb8>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1e:	f003 0301 	and.w	r3, r3, #1
 8000d22:	613b      	str	r3, [r7, #16]
 8000d24:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = pwm1_Pin|pwm2_Pin|pwm3_Pin;
 8000d26:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000d2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d30:	2300      	movs	r3, #0
 8000d32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d34:	2300      	movs	r3, #0
 8000d36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d3c:	f107 0314 	add.w	r3, r7, #20
 8000d40:	4619      	mov	r1, r3
 8000d42:	4818      	ldr	r0, [pc, #96]	; (8000da4 <HAL_TIM_MspPostInit+0xbc>)
 8000d44:	f000 fdda 	bl	80018fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000d48:	e023      	b.n	8000d92 <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM2)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d52:	d11e      	bne.n	8000d92 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d54:	2300      	movs	r3, #0
 8000d56:	60fb      	str	r3, [r7, #12]
 8000d58:	4b11      	ldr	r3, [pc, #68]	; (8000da0 <HAL_TIM_MspPostInit+0xb8>)
 8000d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5c:	4a10      	ldr	r2, [pc, #64]	; (8000da0 <HAL_TIM_MspPostInit+0xb8>)
 8000d5e:	f043 0302 	orr.w	r3, r3, #2
 8000d62:	6313      	str	r3, [r2, #48]	; 0x30
 8000d64:	4b0e      	ldr	r3, [pc, #56]	; (8000da0 <HAL_TIM_MspPostInit+0xb8>)
 8000d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d68:	f003 0302 	and.w	r3, r3, #2
 8000d6c:	60fb      	str	r3, [r7, #12]
 8000d6e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = pwm6_Pin|pwm4_Pin|pwm5_Pin;
 8000d70:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000d74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d76:	2302      	movs	r3, #2
 8000d78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d82:	2301      	movs	r3, #1
 8000d84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d86:	f107 0314 	add.w	r3, r7, #20
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4806      	ldr	r0, [pc, #24]	; (8000da8 <HAL_TIM_MspPostInit+0xc0>)
 8000d8e:	f000 fdb5 	bl	80018fc <HAL_GPIO_Init>
}
 8000d92:	bf00      	nop
 8000d94:	3728      	adds	r7, #40	; 0x28
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	40010000 	.word	0x40010000
 8000da0:	40023800 	.word	0x40023800
 8000da4:	40020000 	.word	0x40020000
 8000da8:	40020400 	.word	0x40020400

08000dac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b08a      	sub	sp, #40	; 0x28
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db4:	f107 0314 	add.w	r3, r7, #20
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
 8000dbc:	605a      	str	r2, [r3, #4]
 8000dbe:	609a      	str	r2, [r3, #8]
 8000dc0:	60da      	str	r2, [r3, #12]
 8000dc2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a19      	ldr	r2, [pc, #100]	; (8000e30 <HAL_UART_MspInit+0x84>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d12b      	bne.n	8000e26 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dce:	2300      	movs	r3, #0
 8000dd0:	613b      	str	r3, [r7, #16]
 8000dd2:	4b18      	ldr	r3, [pc, #96]	; (8000e34 <HAL_UART_MspInit+0x88>)
 8000dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd6:	4a17      	ldr	r2, [pc, #92]	; (8000e34 <HAL_UART_MspInit+0x88>)
 8000dd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ddc:	6413      	str	r3, [r2, #64]	; 0x40
 8000dde:	4b15      	ldr	r3, [pc, #84]	; (8000e34 <HAL_UART_MspInit+0x88>)
 8000de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000de6:	613b      	str	r3, [r7, #16]
 8000de8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dea:	2300      	movs	r3, #0
 8000dec:	60fb      	str	r3, [r7, #12]
 8000dee:	4b11      	ldr	r3, [pc, #68]	; (8000e34 <HAL_UART_MspInit+0x88>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df2:	4a10      	ldr	r2, [pc, #64]	; (8000e34 <HAL_UART_MspInit+0x88>)
 8000df4:	f043 0301 	orr.w	r3, r3, #1
 8000df8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dfa:	4b0e      	ldr	r3, [pc, #56]	; (8000e34 <HAL_UART_MspInit+0x88>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfe:	f003 0301 	and.w	r3, r3, #1
 8000e02:	60fb      	str	r3, [r7, #12]
 8000e04:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e06:	230c      	movs	r3, #12
 8000e08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e12:	2303      	movs	r3, #3
 8000e14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e16:	2307      	movs	r3, #7
 8000e18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1a:	f107 0314 	add.w	r3, r7, #20
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4805      	ldr	r0, [pc, #20]	; (8000e38 <HAL_UART_MspInit+0x8c>)
 8000e22:	f000 fd6b 	bl	80018fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e26:	bf00      	nop
 8000e28:	3728      	adds	r7, #40	; 0x28
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	40004400 	.word	0x40004400
 8000e34:	40023800 	.word	0x40023800
 8000e38:	40020000 	.word	0x40020000

08000e3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e40:	e7fe      	b.n	8000e40 <NMI_Handler+0x4>

08000e42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e42:	b480      	push	{r7}
 8000e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e46:	e7fe      	b.n	8000e46 <HardFault_Handler+0x4>

08000e48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e4c:	e7fe      	b.n	8000e4c <MemManage_Handler+0x4>

08000e4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e52:	e7fe      	b.n	8000e52 <BusFault_Handler+0x4>

08000e54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e58:	e7fe      	b.n	8000e58 <UsageFault_Handler+0x4>

08000e5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e5a:	b480      	push	{r7}
 8000e5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e5e:	bf00      	nop
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr

08000e68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e6c:	bf00      	nop
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr

08000e76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e76:	b480      	push	{r7}
 8000e78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e7a:	bf00      	nop
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr

08000e84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e88:	f000 f8ae 	bl	8000fe8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e8c:	bf00      	nop
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupt.
  */
void CAN2_TX_IRQHandler(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8000e94:	4802      	ldr	r0, [pc, #8]	; (8000ea0 <CAN2_TX_IRQHandler+0x10>)
 8000e96:	f000 f9e6 	bl	8001266 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	20000028 	.word	0x20000028

08000ea4 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupt.
  */
void CAN2_RX0_IRQHandler(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8000ea8:	4802      	ldr	r0, [pc, #8]	; (8000eb4 <CAN2_RX0_IRQHandler+0x10>)
 8000eaa:	f000 f9dc 	bl	8001266 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	20000028 	.word	0x20000028

08000eb8 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8000ebc:	4802      	ldr	r0, [pc, #8]	; (8000ec8 <CAN2_RX1_IRQHandler+0x10>)
 8000ebe:	f000 f9d2 	bl	8001266 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	20000028 	.word	0x20000028

08000ecc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ed0:	4b06      	ldr	r3, [pc, #24]	; (8000eec <SystemInit+0x20>)
 8000ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ed6:	4a05      	ldr	r2, [pc, #20]	; (8000eec <SystemInit+0x20>)
 8000ed8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000edc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	e000ed00 	.word	0xe000ed00

08000ef0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ef0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f28 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ef4:	480d      	ldr	r0, [pc, #52]	; (8000f2c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ef6:	490e      	ldr	r1, [pc, #56]	; (8000f30 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ef8:	4a0e      	ldr	r2, [pc, #56]	; (8000f34 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000efa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000efc:	e002      	b.n	8000f04 <LoopCopyDataInit>

08000efe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000efe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f02:	3304      	adds	r3, #4

08000f04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f08:	d3f9      	bcc.n	8000efe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f0a:	4a0b      	ldr	r2, [pc, #44]	; (8000f38 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f0c:	4c0b      	ldr	r4, [pc, #44]	; (8000f3c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f10:	e001      	b.n	8000f16 <LoopFillZerobss>

08000f12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f14:	3204      	adds	r2, #4

08000f16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f18:	d3fb      	bcc.n	8000f12 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f1a:	f7ff ffd7 	bl	8000ecc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f1e:	f002 fe6d 	bl	8003bfc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f22:	f7ff faf1 	bl	8000508 <main>
  bx  lr    
 8000f26:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f28:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f30:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f34:	08003c94 	.word	0x08003c94
  ldr r2, =_sbss
 8000f38:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f3c:	20000128 	.word	0x20000128

08000f40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f40:	e7fe      	b.n	8000f40 <ADC_IRQHandler>
	...

08000f44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f48:	4b0e      	ldr	r3, [pc, #56]	; (8000f84 <HAL_Init+0x40>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a0d      	ldr	r2, [pc, #52]	; (8000f84 <HAL_Init+0x40>)
 8000f4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f54:	4b0b      	ldr	r3, [pc, #44]	; (8000f84 <HAL_Init+0x40>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a0a      	ldr	r2, [pc, #40]	; (8000f84 <HAL_Init+0x40>)
 8000f5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f60:	4b08      	ldr	r3, [pc, #32]	; (8000f84 <HAL_Init+0x40>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a07      	ldr	r2, [pc, #28]	; (8000f84 <HAL_Init+0x40>)
 8000f66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f6c:	2003      	movs	r0, #3
 8000f6e:	f000 fc83 	bl	8001878 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f72:	2000      	movs	r0, #0
 8000f74:	f000 f808 	bl	8000f88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f78:	f7ff fdea 	bl	8000b50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f7c:	2300      	movs	r3, #0
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40023c00 	.word	0x40023c00

08000f88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f90:	4b12      	ldr	r3, [pc, #72]	; (8000fdc <HAL_InitTick+0x54>)
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	4b12      	ldr	r3, [pc, #72]	; (8000fe0 <HAL_InitTick+0x58>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	4619      	mov	r1, r3
 8000f9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f000 fc9b 	bl	80018e2 <HAL_SYSTICK_Config>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e00e      	b.n	8000fd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2b0f      	cmp	r3, #15
 8000fba:	d80a      	bhi.n	8000fd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	6879      	ldr	r1, [r7, #4]
 8000fc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fc4:	f000 fc63 	bl	800188e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fc8:	4a06      	ldr	r2, [pc, #24]	; (8000fe4 <HAL_InitTick+0x5c>)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	e000      	b.n	8000fd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fd2:	2301      	movs	r3, #1
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	3708      	adds	r7, #8
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	20000000 	.word	0x20000000
 8000fe0:	20000008 	.word	0x20000008
 8000fe4:	20000004 	.word	0x20000004

08000fe8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fec:	4b06      	ldr	r3, [pc, #24]	; (8001008 <HAL_IncTick+0x20>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	4b06      	ldr	r3, [pc, #24]	; (800100c <HAL_IncTick+0x24>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4413      	add	r3, r2
 8000ff8:	4a04      	ldr	r2, [pc, #16]	; (800100c <HAL_IncTick+0x24>)
 8000ffa:	6013      	str	r3, [r2, #0]
}
 8000ffc:	bf00      	nop
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	20000008 	.word	0x20000008
 800100c:	20000124 	.word	0x20000124

08001010 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  return uwTick;
 8001014:	4b03      	ldr	r3, [pc, #12]	; (8001024 <HAL_GetTick+0x14>)
 8001016:	681b      	ldr	r3, [r3, #0]
}
 8001018:	4618      	mov	r0, r3
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	20000124 	.word	0x20000124

08001028 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001030:	f7ff ffee 	bl	8001010 <HAL_GetTick>
 8001034:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001040:	d005      	beq.n	800104e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001042:	4b0a      	ldr	r3, [pc, #40]	; (800106c <HAL_Delay+0x44>)
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	461a      	mov	r2, r3
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	4413      	add	r3, r2
 800104c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800104e:	bf00      	nop
 8001050:	f7ff ffde 	bl	8001010 <HAL_GetTick>
 8001054:	4602      	mov	r2, r0
 8001056:	68bb      	ldr	r3, [r7, #8]
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	68fa      	ldr	r2, [r7, #12]
 800105c:	429a      	cmp	r2, r3
 800105e:	d8f7      	bhi.n	8001050 <HAL_Delay+0x28>
  {
  }
}
 8001060:	bf00      	nop
 8001062:	bf00      	nop
 8001064:	3710      	adds	r7, #16
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	20000008 	.word	0x20000008

08001070 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d101      	bne.n	8001082 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800107e:	2301      	movs	r3, #1
 8001080:	e0ed      	b.n	800125e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001088:	b2db      	uxtb	r3, r3
 800108a:	2b00      	cmp	r3, #0
 800108c:	d102      	bne.n	8001094 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f7ff fd86 	bl	8000ba0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f042 0201 	orr.w	r2, r2, #1
 80010a2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010a4:	f7ff ffb4 	bl	8001010 <HAL_GetTick>
 80010a8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80010aa:	e012      	b.n	80010d2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80010ac:	f7ff ffb0 	bl	8001010 <HAL_GetTick>
 80010b0:	4602      	mov	r2, r0
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	2b0a      	cmp	r3, #10
 80010b8:	d90b      	bls.n	80010d2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010be:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2205      	movs	r2, #5
 80010ca:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	e0c5      	b.n	800125e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f003 0301 	and.w	r3, r3, #1
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d0e5      	beq.n	80010ac <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f022 0202 	bic.w	r2, r2, #2
 80010ee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010f0:	f7ff ff8e 	bl	8001010 <HAL_GetTick>
 80010f4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80010f6:	e012      	b.n	800111e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80010f8:	f7ff ff8a 	bl	8001010 <HAL_GetTick>
 80010fc:	4602      	mov	r2, r0
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	2b0a      	cmp	r3, #10
 8001104:	d90b      	bls.n	800111e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800110a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2205      	movs	r2, #5
 8001116:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
 800111c:	e09f      	b.n	800125e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f003 0302 	and.w	r3, r3, #2
 8001128:	2b00      	cmp	r3, #0
 800112a:	d1e5      	bne.n	80010f8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	7e1b      	ldrb	r3, [r3, #24]
 8001130:	2b01      	cmp	r3, #1
 8001132:	d108      	bne.n	8001146 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	e007      	b.n	8001156 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001154:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	7e5b      	ldrb	r3, [r3, #25]
 800115a:	2b01      	cmp	r3, #1
 800115c:	d108      	bne.n	8001170 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	e007      	b.n	8001180 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800117e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	7e9b      	ldrb	r3, [r3, #26]
 8001184:	2b01      	cmp	r3, #1
 8001186:	d108      	bne.n	800119a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f042 0220 	orr.w	r2, r2, #32
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	e007      	b.n	80011aa <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f022 0220 	bic.w	r2, r2, #32
 80011a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	7edb      	ldrb	r3, [r3, #27]
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d108      	bne.n	80011c4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f022 0210 	bic.w	r2, r2, #16
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	e007      	b.n	80011d4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f042 0210 	orr.w	r2, r2, #16
 80011d2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	7f1b      	ldrb	r3, [r3, #28]
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d108      	bne.n	80011ee <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f042 0208 	orr.w	r2, r2, #8
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	e007      	b.n	80011fe <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f022 0208 	bic.w	r2, r2, #8
 80011fc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	7f5b      	ldrb	r3, [r3, #29]
 8001202:	2b01      	cmp	r3, #1
 8001204:	d108      	bne.n	8001218 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f042 0204 	orr.w	r2, r2, #4
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	e007      	b.n	8001228 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f022 0204 	bic.w	r2, r2, #4
 8001226:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	689a      	ldr	r2, [r3, #8]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	431a      	orrs	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	691b      	ldr	r3, [r3, #16]
 8001236:	431a      	orrs	r2, r3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	695b      	ldr	r3, [r3, #20]
 800123c:	ea42 0103 	orr.w	r1, r2, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	1e5a      	subs	r2, r3, #1
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	430a      	orrs	r2, r1
 800124c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2200      	movs	r2, #0
 8001252:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2201      	movs	r2, #1
 8001258:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800125c:	2300      	movs	r3, #0
}
 800125e:	4618      	mov	r0, r3
 8001260:	3710      	adds	r7, #16
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}

08001266 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001266:	b580      	push	{r7, lr}
 8001268:	b08a      	sub	sp, #40	; 0x28
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800126e:	2300      	movs	r3, #0
 8001270:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	695b      	ldr	r3, [r3, #20]
 8001278:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	691b      	ldr	r3, [r3, #16]
 8001298:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	699b      	ldr	r3, [r3, #24]
 80012a0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80012a2:	6a3b      	ldr	r3, [r7, #32]
 80012a4:	f003 0301 	and.w	r3, r3, #1
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d07c      	beq.n	80013a6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80012ac:	69bb      	ldr	r3, [r7, #24]
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d023      	beq.n	80012fe <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	2201      	movs	r2, #1
 80012bc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80012be:	69bb      	ldr	r3, [r7, #24]
 80012c0:	f003 0302 	and.w	r3, r3, #2
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d003      	beq.n	80012d0 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f000 f983 	bl	80015d4 <HAL_CAN_TxMailbox0CompleteCallback>
 80012ce:	e016      	b.n	80012fe <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80012d0:	69bb      	ldr	r3, [r7, #24]
 80012d2:	f003 0304 	and.w	r3, r3, #4
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d004      	beq.n	80012e4 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80012da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80012e0:	627b      	str	r3, [r7, #36]	; 0x24
 80012e2:	e00c      	b.n	80012fe <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80012e4:	69bb      	ldr	r3, [r7, #24]
 80012e6:	f003 0308 	and.w	r3, r3, #8
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d004      	beq.n	80012f8 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80012ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012f4:	627b      	str	r3, [r7, #36]	; 0x24
 80012f6:	e002      	b.n	80012fe <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80012f8:	6878      	ldr	r0, [r7, #4]
 80012fa:	f000 f989 	bl	8001610 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80012fe:	69bb      	ldr	r3, [r7, #24]
 8001300:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001304:	2b00      	cmp	r3, #0
 8001306:	d024      	beq.n	8001352 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001310:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001312:	69bb      	ldr	r3, [r7, #24]
 8001314:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001318:	2b00      	cmp	r3, #0
 800131a:	d003      	beq.n	8001324 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800131c:	6878      	ldr	r0, [r7, #4]
 800131e:	f000 f963 	bl	80015e8 <HAL_CAN_TxMailbox1CompleteCallback>
 8001322:	e016      	b.n	8001352 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001324:	69bb      	ldr	r3, [r7, #24]
 8001326:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800132a:	2b00      	cmp	r3, #0
 800132c:	d004      	beq.n	8001338 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800132e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001330:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001334:	627b      	str	r3, [r7, #36]	; 0x24
 8001336:	e00c      	b.n	8001352 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001338:	69bb      	ldr	r3, [r7, #24]
 800133a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800133e:	2b00      	cmp	r3, #0
 8001340:	d004      	beq.n	800134c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001344:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001348:	627b      	str	r3, [r7, #36]	; 0x24
 800134a:	e002      	b.n	8001352 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f000 f969 	bl	8001624 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001352:	69bb      	ldr	r3, [r7, #24]
 8001354:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001358:	2b00      	cmp	r3, #0
 800135a:	d024      	beq.n	80013a6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001364:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001366:	69bb      	ldr	r3, [r7, #24]
 8001368:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800136c:	2b00      	cmp	r3, #0
 800136e:	d003      	beq.n	8001378 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f000 f943 	bl	80015fc <HAL_CAN_TxMailbox2CompleteCallback>
 8001376:	e016      	b.n	80013a6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800137e:	2b00      	cmp	r3, #0
 8001380:	d004      	beq.n	800138c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001384:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001388:	627b      	str	r3, [r7, #36]	; 0x24
 800138a:	e00c      	b.n	80013a6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001392:	2b00      	cmp	r3, #0
 8001394:	d004      	beq.n	80013a0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001398:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800139c:	627b      	str	r3, [r7, #36]	; 0x24
 800139e:	e002      	b.n	80013a6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f000 f949 	bl	8001638 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80013a6:	6a3b      	ldr	r3, [r7, #32]
 80013a8:	f003 0308 	and.w	r3, r3, #8
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d00c      	beq.n	80013ca <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	f003 0310 	and.w	r3, r3, #16
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d007      	beq.n	80013ca <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80013ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013c0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	2210      	movs	r2, #16
 80013c8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80013ca:	6a3b      	ldr	r3, [r7, #32]
 80013cc:	f003 0304 	and.w	r3, r3, #4
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d00b      	beq.n	80013ec <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	f003 0308 	and.w	r3, r3, #8
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d006      	beq.n	80013ec <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	2208      	movs	r2, #8
 80013e4:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f000 f93a 	bl	8001660 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80013ec:	6a3b      	ldr	r3, [r7, #32]
 80013ee:	f003 0302 	and.w	r3, r3, #2
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d009      	beq.n	800140a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	f003 0303 	and.w	r3, r3, #3
 8001400:	2b00      	cmp	r3, #0
 8001402:	d002      	beq.n	800140a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f000 f921 	bl	800164c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800140a:	6a3b      	ldr	r3, [r7, #32]
 800140c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001410:	2b00      	cmp	r3, #0
 8001412:	d00c      	beq.n	800142e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	f003 0310 	and.w	r3, r3, #16
 800141a:	2b00      	cmp	r3, #0
 800141c:	d007      	beq.n	800142e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800141e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001420:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001424:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	2210      	movs	r2, #16
 800142c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800142e:	6a3b      	ldr	r3, [r7, #32]
 8001430:	f003 0320 	and.w	r3, r3, #32
 8001434:	2b00      	cmp	r3, #0
 8001436:	d00b      	beq.n	8001450 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	f003 0308 	and.w	r3, r3, #8
 800143e:	2b00      	cmp	r3, #0
 8001440:	d006      	beq.n	8001450 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	2208      	movs	r2, #8
 8001448:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	f000 f91c 	bl	8001688 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001450:	6a3b      	ldr	r3, [r7, #32]
 8001452:	f003 0310 	and.w	r3, r3, #16
 8001456:	2b00      	cmp	r3, #0
 8001458:	d009      	beq.n	800146e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	691b      	ldr	r3, [r3, #16]
 8001460:	f003 0303 	and.w	r3, r3, #3
 8001464:	2b00      	cmp	r3, #0
 8001466:	d002      	beq.n	800146e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f000 f903 	bl	8001674 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800146e:	6a3b      	ldr	r3, [r7, #32]
 8001470:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001474:	2b00      	cmp	r3, #0
 8001476:	d00b      	beq.n	8001490 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	f003 0310 	and.w	r3, r3, #16
 800147e:	2b00      	cmp	r3, #0
 8001480:	d006      	beq.n	8001490 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	2210      	movs	r2, #16
 8001488:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f000 f906 	bl	800169c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001490:	6a3b      	ldr	r3, [r7, #32]
 8001492:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001496:	2b00      	cmp	r3, #0
 8001498:	d00b      	beq.n	80014b2 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	f003 0308 	and.w	r3, r3, #8
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d006      	beq.n	80014b2 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	2208      	movs	r2, #8
 80014aa:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f000 f8ff 	bl	80016b0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80014b2:	6a3b      	ldr	r3, [r7, #32]
 80014b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d07b      	beq.n	80015b4 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	f003 0304 	and.w	r3, r3, #4
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d072      	beq.n	80015ac <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80014c6:	6a3b      	ldr	r3, [r7, #32]
 80014c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d008      	beq.n	80014e2 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d003      	beq.n	80014e2 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80014da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014dc:	f043 0301 	orr.w	r3, r3, #1
 80014e0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80014e2:	6a3b      	ldr	r3, [r7, #32]
 80014e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d008      	beq.n	80014fe <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d003      	beq.n	80014fe <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80014f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f8:	f043 0302 	orr.w	r3, r3, #2
 80014fc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80014fe:	6a3b      	ldr	r3, [r7, #32]
 8001500:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001504:	2b00      	cmp	r3, #0
 8001506:	d008      	beq.n	800151a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800150e:	2b00      	cmp	r3, #0
 8001510:	d003      	beq.n	800151a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001514:	f043 0304 	orr.w	r3, r3, #4
 8001518:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800151a:	6a3b      	ldr	r3, [r7, #32]
 800151c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001520:	2b00      	cmp	r3, #0
 8001522:	d043      	beq.n	80015ac <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800152a:	2b00      	cmp	r3, #0
 800152c:	d03e      	beq.n	80015ac <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001534:	2b60      	cmp	r3, #96	; 0x60
 8001536:	d02b      	beq.n	8001590 <HAL_CAN_IRQHandler+0x32a>
 8001538:	2b60      	cmp	r3, #96	; 0x60
 800153a:	d82e      	bhi.n	800159a <HAL_CAN_IRQHandler+0x334>
 800153c:	2b50      	cmp	r3, #80	; 0x50
 800153e:	d022      	beq.n	8001586 <HAL_CAN_IRQHandler+0x320>
 8001540:	2b50      	cmp	r3, #80	; 0x50
 8001542:	d82a      	bhi.n	800159a <HAL_CAN_IRQHandler+0x334>
 8001544:	2b40      	cmp	r3, #64	; 0x40
 8001546:	d019      	beq.n	800157c <HAL_CAN_IRQHandler+0x316>
 8001548:	2b40      	cmp	r3, #64	; 0x40
 800154a:	d826      	bhi.n	800159a <HAL_CAN_IRQHandler+0x334>
 800154c:	2b30      	cmp	r3, #48	; 0x30
 800154e:	d010      	beq.n	8001572 <HAL_CAN_IRQHandler+0x30c>
 8001550:	2b30      	cmp	r3, #48	; 0x30
 8001552:	d822      	bhi.n	800159a <HAL_CAN_IRQHandler+0x334>
 8001554:	2b10      	cmp	r3, #16
 8001556:	d002      	beq.n	800155e <HAL_CAN_IRQHandler+0x2f8>
 8001558:	2b20      	cmp	r3, #32
 800155a:	d005      	beq.n	8001568 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800155c:	e01d      	b.n	800159a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800155e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001560:	f043 0308 	orr.w	r3, r3, #8
 8001564:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001566:	e019      	b.n	800159c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156a:	f043 0310 	orr.w	r3, r3, #16
 800156e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001570:	e014      	b.n	800159c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001574:	f043 0320 	orr.w	r3, r3, #32
 8001578:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800157a:	e00f      	b.n	800159c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800157c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001582:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001584:	e00a      	b.n	800159c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001588:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800158c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800158e:	e005      	b.n	800159c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001592:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001596:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001598:	e000      	b.n	800159c <HAL_CAN_IRQHandler+0x336>
            break;
 800159a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	699a      	ldr	r2, [r3, #24]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80015aa:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2204      	movs	r2, #4
 80015b2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80015b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d008      	beq.n	80015cc <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c0:	431a      	orrs	r2, r3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f000 f87c 	bl	80016c4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80015cc:	bf00      	nop
 80015ce:	3728      	adds	r7, #40	; 0x28
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80015dc:	bf00      	nop
 80015de:	370c      	adds	r7, #12
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr

080015e8 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80015f0:	bf00      	nop
 80015f2:	370c      	adds	r7, #12
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr

080015fc <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001604:	bf00      	nop
 8001606:	370c      	adds	r7, #12
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001618:	bf00      	nop
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800162c:	bf00      	nop
 800162e:	370c      	adds	r7, #12
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr

08001638 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001640:	bf00      	nop
 8001642:	370c      	adds	r7, #12
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr

0800164c <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001654:	bf00      	nop
 8001656:	370c      	adds	r7, #12
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr

08001660 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001668:	bf00      	nop
 800166a:	370c      	adds	r7, #12
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr

08001674 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800167c:	bf00      	nop
 800167e:	370c      	adds	r7, #12
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr

08001688 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001690:	bf00      	nop
 8001692:	370c      	adds	r7, #12
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr

0800169c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80016a4:	bf00      	nop
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80016b8:	bf00      	nop
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr

080016c4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80016cc:	bf00      	nop
 80016ce:	370c      	adds	r7, #12
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr

080016d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016d8:	b480      	push	{r7}
 80016da:	b085      	sub	sp, #20
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f003 0307 	and.w	r3, r3, #7
 80016e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016e8:	4b0c      	ldr	r3, [pc, #48]	; (800171c <__NVIC_SetPriorityGrouping+0x44>)
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ee:	68ba      	ldr	r2, [r7, #8]
 80016f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016f4:	4013      	ands	r3, r2
 80016f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001700:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001704:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001708:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800170a:	4a04      	ldr	r2, [pc, #16]	; (800171c <__NVIC_SetPriorityGrouping+0x44>)
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	60d3      	str	r3, [r2, #12]
}
 8001710:	bf00      	nop
 8001712:	3714      	adds	r7, #20
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr
 800171c:	e000ed00 	.word	0xe000ed00

08001720 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001724:	4b04      	ldr	r3, [pc, #16]	; (8001738 <__NVIC_GetPriorityGrouping+0x18>)
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	0a1b      	lsrs	r3, r3, #8
 800172a:	f003 0307 	and.w	r3, r3, #7
}
 800172e:	4618      	mov	r0, r3
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr
 8001738:	e000ed00 	.word	0xe000ed00

0800173c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	4603      	mov	r3, r0
 8001744:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174a:	2b00      	cmp	r3, #0
 800174c:	db0b      	blt.n	8001766 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800174e:	79fb      	ldrb	r3, [r7, #7]
 8001750:	f003 021f 	and.w	r2, r3, #31
 8001754:	4907      	ldr	r1, [pc, #28]	; (8001774 <__NVIC_EnableIRQ+0x38>)
 8001756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175a:	095b      	lsrs	r3, r3, #5
 800175c:	2001      	movs	r0, #1
 800175e:	fa00 f202 	lsl.w	r2, r0, r2
 8001762:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001766:	bf00      	nop
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	e000e100 	.word	0xe000e100

08001778 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	4603      	mov	r3, r0
 8001780:	6039      	str	r1, [r7, #0]
 8001782:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001784:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001788:	2b00      	cmp	r3, #0
 800178a:	db0a      	blt.n	80017a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	b2da      	uxtb	r2, r3
 8001790:	490c      	ldr	r1, [pc, #48]	; (80017c4 <__NVIC_SetPriority+0x4c>)
 8001792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001796:	0112      	lsls	r2, r2, #4
 8001798:	b2d2      	uxtb	r2, r2
 800179a:	440b      	add	r3, r1
 800179c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017a0:	e00a      	b.n	80017b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	b2da      	uxtb	r2, r3
 80017a6:	4908      	ldr	r1, [pc, #32]	; (80017c8 <__NVIC_SetPriority+0x50>)
 80017a8:	79fb      	ldrb	r3, [r7, #7]
 80017aa:	f003 030f 	and.w	r3, r3, #15
 80017ae:	3b04      	subs	r3, #4
 80017b0:	0112      	lsls	r2, r2, #4
 80017b2:	b2d2      	uxtb	r2, r2
 80017b4:	440b      	add	r3, r1
 80017b6:	761a      	strb	r2, [r3, #24]
}
 80017b8:	bf00      	nop
 80017ba:	370c      	adds	r7, #12
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr
 80017c4:	e000e100 	.word	0xe000e100
 80017c8:	e000ed00 	.word	0xe000ed00

080017cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b089      	sub	sp, #36	; 0x24
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	60f8      	str	r0, [r7, #12]
 80017d4:	60b9      	str	r1, [r7, #8]
 80017d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	f003 0307 	and.w	r3, r3, #7
 80017de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	f1c3 0307 	rsb	r3, r3, #7
 80017e6:	2b04      	cmp	r3, #4
 80017e8:	bf28      	it	cs
 80017ea:	2304      	movcs	r3, #4
 80017ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	3304      	adds	r3, #4
 80017f2:	2b06      	cmp	r3, #6
 80017f4:	d902      	bls.n	80017fc <NVIC_EncodePriority+0x30>
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	3b03      	subs	r3, #3
 80017fa:	e000      	b.n	80017fe <NVIC_EncodePriority+0x32>
 80017fc:	2300      	movs	r3, #0
 80017fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001800:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001804:	69bb      	ldr	r3, [r7, #24]
 8001806:	fa02 f303 	lsl.w	r3, r2, r3
 800180a:	43da      	mvns	r2, r3
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	401a      	ands	r2, r3
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001814:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	fa01 f303 	lsl.w	r3, r1, r3
 800181e:	43d9      	mvns	r1, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001824:	4313      	orrs	r3, r2
         );
}
 8001826:	4618      	mov	r0, r3
 8001828:	3724      	adds	r7, #36	; 0x24
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
	...

08001834 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	3b01      	subs	r3, #1
 8001840:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001844:	d301      	bcc.n	800184a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001846:	2301      	movs	r3, #1
 8001848:	e00f      	b.n	800186a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800184a:	4a0a      	ldr	r2, [pc, #40]	; (8001874 <SysTick_Config+0x40>)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	3b01      	subs	r3, #1
 8001850:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001852:	210f      	movs	r1, #15
 8001854:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001858:	f7ff ff8e 	bl	8001778 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800185c:	4b05      	ldr	r3, [pc, #20]	; (8001874 <SysTick_Config+0x40>)
 800185e:	2200      	movs	r2, #0
 8001860:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001862:	4b04      	ldr	r3, [pc, #16]	; (8001874 <SysTick_Config+0x40>)
 8001864:	2207      	movs	r2, #7
 8001866:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001868:	2300      	movs	r3, #0
}
 800186a:	4618      	mov	r0, r3
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	e000e010 	.word	0xe000e010

08001878 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f7ff ff29 	bl	80016d8 <__NVIC_SetPriorityGrouping>
}
 8001886:	bf00      	nop
 8001888:	3708      	adds	r7, #8
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}

0800188e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800188e:	b580      	push	{r7, lr}
 8001890:	b086      	sub	sp, #24
 8001892:	af00      	add	r7, sp, #0
 8001894:	4603      	mov	r3, r0
 8001896:	60b9      	str	r1, [r7, #8]
 8001898:	607a      	str	r2, [r7, #4]
 800189a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800189c:	2300      	movs	r3, #0
 800189e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018a0:	f7ff ff3e 	bl	8001720 <__NVIC_GetPriorityGrouping>
 80018a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	68b9      	ldr	r1, [r7, #8]
 80018aa:	6978      	ldr	r0, [r7, #20]
 80018ac:	f7ff ff8e 	bl	80017cc <NVIC_EncodePriority>
 80018b0:	4602      	mov	r2, r0
 80018b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018b6:	4611      	mov	r1, r2
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7ff ff5d 	bl	8001778 <__NVIC_SetPriority>
}
 80018be:	bf00      	nop
 80018c0:	3718      	adds	r7, #24
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}

080018c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018c6:	b580      	push	{r7, lr}
 80018c8:	b082      	sub	sp, #8
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	4603      	mov	r3, r0
 80018ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7ff ff31 	bl	800173c <__NVIC_EnableIRQ>
}
 80018da:	bf00      	nop
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}

080018e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018e2:	b580      	push	{r7, lr}
 80018e4:	b082      	sub	sp, #8
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f7ff ffa2 	bl	8001834 <SysTick_Config>
 80018f0:	4603      	mov	r3, r0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
	...

080018fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b089      	sub	sp, #36	; 0x24
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001906:	2300      	movs	r3, #0
 8001908:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800190a:	2300      	movs	r3, #0
 800190c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800190e:	2300      	movs	r3, #0
 8001910:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001912:	2300      	movs	r3, #0
 8001914:	61fb      	str	r3, [r7, #28]
 8001916:	e165      	b.n	8001be4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001918:	2201      	movs	r2, #1
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	fa02 f303 	lsl.w	r3, r2, r3
 8001920:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	697a      	ldr	r2, [r7, #20]
 8001928:	4013      	ands	r3, r2
 800192a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800192c:	693a      	ldr	r2, [r7, #16]
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	429a      	cmp	r2, r3
 8001932:	f040 8154 	bne.w	8001bde <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f003 0303 	and.w	r3, r3, #3
 800193e:	2b01      	cmp	r3, #1
 8001940:	d005      	beq.n	800194e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800194a:	2b02      	cmp	r3, #2
 800194c:	d130      	bne.n	80019b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	005b      	lsls	r3, r3, #1
 8001958:	2203      	movs	r2, #3
 800195a:	fa02 f303 	lsl.w	r3, r2, r3
 800195e:	43db      	mvns	r3, r3
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	4013      	ands	r3, r2
 8001964:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	68da      	ldr	r2, [r3, #12]
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	005b      	lsls	r3, r3, #1
 800196e:	fa02 f303 	lsl.w	r3, r2, r3
 8001972:	69ba      	ldr	r2, [r7, #24]
 8001974:	4313      	orrs	r3, r2
 8001976:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	69ba      	ldr	r2, [r7, #24]
 800197c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001984:	2201      	movs	r2, #1
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	fa02 f303 	lsl.w	r3, r2, r3
 800198c:	43db      	mvns	r3, r3
 800198e:	69ba      	ldr	r2, [r7, #24]
 8001990:	4013      	ands	r3, r2
 8001992:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	091b      	lsrs	r3, r3, #4
 800199a:	f003 0201 	and.w	r2, r3, #1
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	fa02 f303 	lsl.w	r3, r2, r3
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	69ba      	ldr	r2, [r7, #24]
 80019ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f003 0303 	and.w	r3, r3, #3
 80019b8:	2b03      	cmp	r3, #3
 80019ba:	d017      	beq.n	80019ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	005b      	lsls	r3, r3, #1
 80019c6:	2203      	movs	r2, #3
 80019c8:	fa02 f303 	lsl.w	r3, r2, r3
 80019cc:	43db      	mvns	r3, r3
 80019ce:	69ba      	ldr	r2, [r7, #24]
 80019d0:	4013      	ands	r3, r2
 80019d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	689a      	ldr	r2, [r3, #8]
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	005b      	lsls	r3, r3, #1
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	4313      	orrs	r3, r2
 80019e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	69ba      	ldr	r2, [r7, #24]
 80019ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f003 0303 	and.w	r3, r3, #3
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d123      	bne.n	8001a40 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	08da      	lsrs	r2, r3, #3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	3208      	adds	r2, #8
 8001a00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	f003 0307 	and.w	r3, r3, #7
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	220f      	movs	r2, #15
 8001a10:	fa02 f303 	lsl.w	r3, r2, r3
 8001a14:	43db      	mvns	r3, r3
 8001a16:	69ba      	ldr	r2, [r7, #24]
 8001a18:	4013      	ands	r3, r2
 8001a1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	691a      	ldr	r2, [r3, #16]
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	f003 0307 	and.w	r3, r3, #7
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2c:	69ba      	ldr	r2, [r7, #24]
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	08da      	lsrs	r2, r3, #3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	3208      	adds	r2, #8
 8001a3a:	69b9      	ldr	r1, [r7, #24]
 8001a3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	2203      	movs	r2, #3
 8001a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a50:	43db      	mvns	r3, r3
 8001a52:	69ba      	ldr	r2, [r7, #24]
 8001a54:	4013      	ands	r3, r2
 8001a56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f003 0203 	and.w	r2, r3, #3
 8001a60:	69fb      	ldr	r3, [r7, #28]
 8001a62:	005b      	lsls	r3, r3, #1
 8001a64:	fa02 f303 	lsl.w	r3, r2, r3
 8001a68:	69ba      	ldr	r2, [r7, #24]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	f000 80ae 	beq.w	8001bde <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a82:	2300      	movs	r3, #0
 8001a84:	60fb      	str	r3, [r7, #12]
 8001a86:	4b5d      	ldr	r3, [pc, #372]	; (8001bfc <HAL_GPIO_Init+0x300>)
 8001a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a8a:	4a5c      	ldr	r2, [pc, #368]	; (8001bfc <HAL_GPIO_Init+0x300>)
 8001a8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a90:	6453      	str	r3, [r2, #68]	; 0x44
 8001a92:	4b5a      	ldr	r3, [pc, #360]	; (8001bfc <HAL_GPIO_Init+0x300>)
 8001a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a9a:	60fb      	str	r3, [r7, #12]
 8001a9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a9e:	4a58      	ldr	r2, [pc, #352]	; (8001c00 <HAL_GPIO_Init+0x304>)
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	089b      	lsrs	r3, r3, #2
 8001aa4:	3302      	adds	r3, #2
 8001aa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	f003 0303 	and.w	r3, r3, #3
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	220f      	movs	r2, #15
 8001ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aba:	43db      	mvns	r3, r3
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	4013      	ands	r3, r2
 8001ac0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	4a4f      	ldr	r2, [pc, #316]	; (8001c04 <HAL_GPIO_Init+0x308>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d025      	beq.n	8001b16 <HAL_GPIO_Init+0x21a>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4a4e      	ldr	r2, [pc, #312]	; (8001c08 <HAL_GPIO_Init+0x30c>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d01f      	beq.n	8001b12 <HAL_GPIO_Init+0x216>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4a4d      	ldr	r2, [pc, #308]	; (8001c0c <HAL_GPIO_Init+0x310>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d019      	beq.n	8001b0e <HAL_GPIO_Init+0x212>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4a4c      	ldr	r2, [pc, #304]	; (8001c10 <HAL_GPIO_Init+0x314>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d013      	beq.n	8001b0a <HAL_GPIO_Init+0x20e>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4a4b      	ldr	r2, [pc, #300]	; (8001c14 <HAL_GPIO_Init+0x318>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d00d      	beq.n	8001b06 <HAL_GPIO_Init+0x20a>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4a4a      	ldr	r2, [pc, #296]	; (8001c18 <HAL_GPIO_Init+0x31c>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d007      	beq.n	8001b02 <HAL_GPIO_Init+0x206>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4a49      	ldr	r2, [pc, #292]	; (8001c1c <HAL_GPIO_Init+0x320>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d101      	bne.n	8001afe <HAL_GPIO_Init+0x202>
 8001afa:	2306      	movs	r3, #6
 8001afc:	e00c      	b.n	8001b18 <HAL_GPIO_Init+0x21c>
 8001afe:	2307      	movs	r3, #7
 8001b00:	e00a      	b.n	8001b18 <HAL_GPIO_Init+0x21c>
 8001b02:	2305      	movs	r3, #5
 8001b04:	e008      	b.n	8001b18 <HAL_GPIO_Init+0x21c>
 8001b06:	2304      	movs	r3, #4
 8001b08:	e006      	b.n	8001b18 <HAL_GPIO_Init+0x21c>
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e004      	b.n	8001b18 <HAL_GPIO_Init+0x21c>
 8001b0e:	2302      	movs	r3, #2
 8001b10:	e002      	b.n	8001b18 <HAL_GPIO_Init+0x21c>
 8001b12:	2301      	movs	r3, #1
 8001b14:	e000      	b.n	8001b18 <HAL_GPIO_Init+0x21c>
 8001b16:	2300      	movs	r3, #0
 8001b18:	69fa      	ldr	r2, [r7, #28]
 8001b1a:	f002 0203 	and.w	r2, r2, #3
 8001b1e:	0092      	lsls	r2, r2, #2
 8001b20:	4093      	lsls	r3, r2
 8001b22:	69ba      	ldr	r2, [r7, #24]
 8001b24:	4313      	orrs	r3, r2
 8001b26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b28:	4935      	ldr	r1, [pc, #212]	; (8001c00 <HAL_GPIO_Init+0x304>)
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	089b      	lsrs	r3, r3, #2
 8001b2e:	3302      	adds	r3, #2
 8001b30:	69ba      	ldr	r2, [r7, #24]
 8001b32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b36:	4b3a      	ldr	r3, [pc, #232]	; (8001c20 <HAL_GPIO_Init+0x324>)
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	43db      	mvns	r3, r3
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	4013      	ands	r3, r2
 8001b44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d003      	beq.n	8001b5a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001b52:	69ba      	ldr	r2, [r7, #24]
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b5a:	4a31      	ldr	r2, [pc, #196]	; (8001c20 <HAL_GPIO_Init+0x324>)
 8001b5c:	69bb      	ldr	r3, [r7, #24]
 8001b5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b60:	4b2f      	ldr	r3, [pc, #188]	; (8001c20 <HAL_GPIO_Init+0x324>)
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	43db      	mvns	r3, r3
 8001b6a:	69ba      	ldr	r2, [r7, #24]
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d003      	beq.n	8001b84 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001b7c:	69ba      	ldr	r2, [r7, #24]
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b84:	4a26      	ldr	r2, [pc, #152]	; (8001c20 <HAL_GPIO_Init+0x324>)
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b8a:	4b25      	ldr	r3, [pc, #148]	; (8001c20 <HAL_GPIO_Init+0x324>)
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	43db      	mvns	r3, r3
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	4013      	ands	r3, r2
 8001b98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d003      	beq.n	8001bae <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001ba6:	69ba      	ldr	r2, [r7, #24]
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bae:	4a1c      	ldr	r2, [pc, #112]	; (8001c20 <HAL_GPIO_Init+0x324>)
 8001bb0:	69bb      	ldr	r3, [r7, #24]
 8001bb2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bb4:	4b1a      	ldr	r3, [pc, #104]	; (8001c20 <HAL_GPIO_Init+0x324>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	43db      	mvns	r3, r3
 8001bbe:	69ba      	ldr	r2, [r7, #24]
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d003      	beq.n	8001bd8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bd8:	4a11      	ldr	r2, [pc, #68]	; (8001c20 <HAL_GPIO_Init+0x324>)
 8001bda:	69bb      	ldr	r3, [r7, #24]
 8001bdc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	3301      	adds	r3, #1
 8001be2:	61fb      	str	r3, [r7, #28]
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	2b0f      	cmp	r3, #15
 8001be8:	f67f ae96 	bls.w	8001918 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001bec:	bf00      	nop
 8001bee:	bf00      	nop
 8001bf0:	3724      	adds	r7, #36	; 0x24
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	40023800 	.word	0x40023800
 8001c00:	40013800 	.word	0x40013800
 8001c04:	40020000 	.word	0x40020000
 8001c08:	40020400 	.word	0x40020400
 8001c0c:	40020800 	.word	0x40020800
 8001c10:	40020c00 	.word	0x40020c00
 8001c14:	40021000 	.word	0x40021000
 8001c18:	40021400 	.word	0x40021400
 8001c1c:	40021800 	.word	0x40021800
 8001c20:	40013c00 	.word	0x40013c00

08001c24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	807b      	strh	r3, [r7, #2]
 8001c30:	4613      	mov	r3, r2
 8001c32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c34:	787b      	ldrb	r3, [r7, #1]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d003      	beq.n	8001c42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c3a:	887a      	ldrh	r2, [r7, #2]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c40:	e003      	b.n	8001c4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c42:	887b      	ldrh	r3, [r7, #2]
 8001c44:	041a      	lsls	r2, r3, #16
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	619a      	str	r2, [r3, #24]
}
 8001c4a:	bf00      	nop
 8001c4c:	370c      	adds	r7, #12
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
	...

08001c58 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001c62:	2300      	movs	r3, #0
 8001c64:	603b      	str	r3, [r7, #0]
 8001c66:	4b20      	ldr	r3, [pc, #128]	; (8001ce8 <HAL_PWREx_EnableOverDrive+0x90>)
 8001c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6a:	4a1f      	ldr	r2, [pc, #124]	; (8001ce8 <HAL_PWREx_EnableOverDrive+0x90>)
 8001c6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c70:	6413      	str	r3, [r2, #64]	; 0x40
 8001c72:	4b1d      	ldr	r3, [pc, #116]	; (8001ce8 <HAL_PWREx_EnableOverDrive+0x90>)
 8001c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c7a:	603b      	str	r3, [r7, #0]
 8001c7c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001c7e:	4b1b      	ldr	r3, [pc, #108]	; (8001cec <HAL_PWREx_EnableOverDrive+0x94>)
 8001c80:	2201      	movs	r2, #1
 8001c82:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c84:	f7ff f9c4 	bl	8001010 <HAL_GetTick>
 8001c88:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001c8a:	e009      	b.n	8001ca0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001c8c:	f7ff f9c0 	bl	8001010 <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c9a:	d901      	bls.n	8001ca0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	e01f      	b.n	8001ce0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001ca0:	4b13      	ldr	r3, [pc, #76]	; (8001cf0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ca8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cac:	d1ee      	bne.n	8001c8c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001cae:	4b11      	ldr	r3, [pc, #68]	; (8001cf4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001cb4:	f7ff f9ac 	bl	8001010 <HAL_GetTick>
 8001cb8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001cba:	e009      	b.n	8001cd0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001cbc:	f7ff f9a8 	bl	8001010 <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001cca:	d901      	bls.n	8001cd0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	e007      	b.n	8001ce0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001cd0:	4b07      	ldr	r3, [pc, #28]	; (8001cf0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001cdc:	d1ee      	bne.n	8001cbc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001cde:	2300      	movs	r3, #0
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3708      	adds	r7, #8
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	40023800 	.word	0x40023800
 8001cec:	420e0040 	.word	0x420e0040
 8001cf0:	40007000 	.word	0x40007000
 8001cf4:	420e0044 	.word	0x420e0044

08001cf8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d101      	bne.n	8001d0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e0cc      	b.n	8001ea6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d0c:	4b68      	ldr	r3, [pc, #416]	; (8001eb0 <HAL_RCC_ClockConfig+0x1b8>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 030f 	and.w	r3, r3, #15
 8001d14:	683a      	ldr	r2, [r7, #0]
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d90c      	bls.n	8001d34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d1a:	4b65      	ldr	r3, [pc, #404]	; (8001eb0 <HAL_RCC_ClockConfig+0x1b8>)
 8001d1c:	683a      	ldr	r2, [r7, #0]
 8001d1e:	b2d2      	uxtb	r2, r2
 8001d20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d22:	4b63      	ldr	r3, [pc, #396]	; (8001eb0 <HAL_RCC_ClockConfig+0x1b8>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 030f 	and.w	r3, r3, #15
 8001d2a:	683a      	ldr	r2, [r7, #0]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d001      	beq.n	8001d34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e0b8      	b.n	8001ea6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 0302 	and.w	r3, r3, #2
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d020      	beq.n	8001d82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 0304 	and.w	r3, r3, #4
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d005      	beq.n	8001d58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d4c:	4b59      	ldr	r3, [pc, #356]	; (8001eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	4a58      	ldr	r2, [pc, #352]	; (8001eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d52:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001d56:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0308 	and.w	r3, r3, #8
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d005      	beq.n	8001d70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d64:	4b53      	ldr	r3, [pc, #332]	; (8001eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	4a52      	ldr	r2, [pc, #328]	; (8001eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d6a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001d6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d70:	4b50      	ldr	r3, [pc, #320]	; (8001eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	494d      	ldr	r1, [pc, #308]	; (8001eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0301 	and.w	r3, r3, #1
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d044      	beq.n	8001e18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d107      	bne.n	8001da6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d96:	4b47      	ldr	r3, [pc, #284]	; (8001eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d119      	bne.n	8001dd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e07f      	b.n	8001ea6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d003      	beq.n	8001db6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001db2:	2b03      	cmp	r3, #3
 8001db4:	d107      	bne.n	8001dc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001db6:	4b3f      	ldr	r3, [pc, #252]	; (8001eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d109      	bne.n	8001dd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e06f      	b.n	8001ea6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dc6:	4b3b      	ldr	r3, [pc, #236]	; (8001eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0302 	and.w	r3, r3, #2
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d101      	bne.n	8001dd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e067      	b.n	8001ea6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dd6:	4b37      	ldr	r3, [pc, #220]	; (8001eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	f023 0203 	bic.w	r2, r3, #3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	4934      	ldr	r1, [pc, #208]	; (8001eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001de4:	4313      	orrs	r3, r2
 8001de6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001de8:	f7ff f912 	bl	8001010 <HAL_GetTick>
 8001dec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dee:	e00a      	b.n	8001e06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001df0:	f7ff f90e 	bl	8001010 <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d901      	bls.n	8001e06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e04f      	b.n	8001ea6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e06:	4b2b      	ldr	r3, [pc, #172]	; (8001eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	f003 020c 	and.w	r2, r3, #12
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d1eb      	bne.n	8001df0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e18:	4b25      	ldr	r3, [pc, #148]	; (8001eb0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 030f 	and.w	r3, r3, #15
 8001e20:	683a      	ldr	r2, [r7, #0]
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d20c      	bcs.n	8001e40 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e26:	4b22      	ldr	r3, [pc, #136]	; (8001eb0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e28:	683a      	ldr	r2, [r7, #0]
 8001e2a:	b2d2      	uxtb	r2, r2
 8001e2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e2e:	4b20      	ldr	r3, [pc, #128]	; (8001eb0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 030f 	and.w	r3, r3, #15
 8001e36:	683a      	ldr	r2, [r7, #0]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d001      	beq.n	8001e40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e032      	b.n	8001ea6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 0304 	and.w	r3, r3, #4
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d008      	beq.n	8001e5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e4c:	4b19      	ldr	r3, [pc, #100]	; (8001eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	4916      	ldr	r1, [pc, #88]	; (8001eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0308 	and.w	r3, r3, #8
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d009      	beq.n	8001e7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e6a:	4b12      	ldr	r3, [pc, #72]	; (8001eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	691b      	ldr	r3, [r3, #16]
 8001e76:	00db      	lsls	r3, r3, #3
 8001e78:	490e      	ldr	r1, [pc, #56]	; (8001eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e7e:	f000 f855 	bl	8001f2c <HAL_RCC_GetSysClockFreq>
 8001e82:	4602      	mov	r2, r0
 8001e84:	4b0b      	ldr	r3, [pc, #44]	; (8001eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	091b      	lsrs	r3, r3, #4
 8001e8a:	f003 030f 	and.w	r3, r3, #15
 8001e8e:	490a      	ldr	r1, [pc, #40]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e90:	5ccb      	ldrb	r3, [r1, r3]
 8001e92:	fa22 f303 	lsr.w	r3, r2, r3
 8001e96:	4a09      	ldr	r2, [pc, #36]	; (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001e98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001e9a:	4b09      	ldr	r3, [pc, #36]	; (8001ec0 <HAL_RCC_ClockConfig+0x1c8>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f7ff f872 	bl	8000f88 <HAL_InitTick>

  return HAL_OK;
 8001ea4:	2300      	movs	r3, #0
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3710      	adds	r7, #16
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	40023c00 	.word	0x40023c00
 8001eb4:	40023800 	.word	0x40023800
 8001eb8:	08003c6c 	.word	0x08003c6c
 8001ebc:	20000000 	.word	0x20000000
 8001ec0:	20000004 	.word	0x20000004

08001ec4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ec8:	4b03      	ldr	r3, [pc, #12]	; (8001ed8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001eca:	681b      	ldr	r3, [r3, #0]
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	20000000 	.word	0x20000000

08001edc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ee0:	f7ff fff0 	bl	8001ec4 <HAL_RCC_GetHCLKFreq>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	4b05      	ldr	r3, [pc, #20]	; (8001efc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	0a9b      	lsrs	r3, r3, #10
 8001eec:	f003 0307 	and.w	r3, r3, #7
 8001ef0:	4903      	ldr	r1, [pc, #12]	; (8001f00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ef2:	5ccb      	ldrb	r3, [r1, r3]
 8001ef4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	40023800 	.word	0x40023800
 8001f00:	08003c7c 	.word	0x08003c7c

08001f04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001f08:	f7ff ffdc 	bl	8001ec4 <HAL_RCC_GetHCLKFreq>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	4b05      	ldr	r3, [pc, #20]	; (8001f24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	0b5b      	lsrs	r3, r3, #13
 8001f14:	f003 0307 	and.w	r3, r3, #7
 8001f18:	4903      	ldr	r1, [pc, #12]	; (8001f28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f1a:	5ccb      	ldrb	r3, [r1, r3]
 8001f1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	40023800 	.word	0x40023800
 8001f28:	08003c7c 	.word	0x08003c7c

08001f2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f30:	b0ae      	sub	sp, #184	; 0xb8
 8001f32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001f34:	2300      	movs	r3, #0
 8001f36:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001f40:	2300      	movs	r3, #0
 8001f42:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001f46:	2300      	movs	r3, #0
 8001f48:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f52:	4bcb      	ldr	r3, [pc, #812]	; (8002280 <HAL_RCC_GetSysClockFreq+0x354>)
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	f003 030c 	and.w	r3, r3, #12
 8001f5a:	2b0c      	cmp	r3, #12
 8001f5c:	f200 8206 	bhi.w	800236c <HAL_RCC_GetSysClockFreq+0x440>
 8001f60:	a201      	add	r2, pc, #4	; (adr r2, 8001f68 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f66:	bf00      	nop
 8001f68:	08001f9d 	.word	0x08001f9d
 8001f6c:	0800236d 	.word	0x0800236d
 8001f70:	0800236d 	.word	0x0800236d
 8001f74:	0800236d 	.word	0x0800236d
 8001f78:	08001fa5 	.word	0x08001fa5
 8001f7c:	0800236d 	.word	0x0800236d
 8001f80:	0800236d 	.word	0x0800236d
 8001f84:	0800236d 	.word	0x0800236d
 8001f88:	08001fad 	.word	0x08001fad
 8001f8c:	0800236d 	.word	0x0800236d
 8001f90:	0800236d 	.word	0x0800236d
 8001f94:	0800236d 	.word	0x0800236d
 8001f98:	0800219d 	.word	0x0800219d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f9c:	4bb9      	ldr	r3, [pc, #740]	; (8002284 <HAL_RCC_GetSysClockFreq+0x358>)
 8001f9e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001fa2:	e1e7      	b.n	8002374 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001fa4:	4bb8      	ldr	r3, [pc, #736]	; (8002288 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001fa6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001faa:	e1e3      	b.n	8002374 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001fac:	4bb4      	ldr	r3, [pc, #720]	; (8002280 <HAL_RCC_GetSysClockFreq+0x354>)
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001fb4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001fb8:	4bb1      	ldr	r3, [pc, #708]	; (8002280 <HAL_RCC_GetSysClockFreq+0x354>)
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d071      	beq.n	80020a8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fc4:	4bae      	ldr	r3, [pc, #696]	; (8002280 <HAL_RCC_GetSysClockFreq+0x354>)
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	099b      	lsrs	r3, r3, #6
 8001fca:	2200      	movs	r2, #0
 8001fcc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001fd0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001fd4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001fd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fdc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001fe6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001fea:	4622      	mov	r2, r4
 8001fec:	462b      	mov	r3, r5
 8001fee:	f04f 0000 	mov.w	r0, #0
 8001ff2:	f04f 0100 	mov.w	r1, #0
 8001ff6:	0159      	lsls	r1, r3, #5
 8001ff8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ffc:	0150      	lsls	r0, r2, #5
 8001ffe:	4602      	mov	r2, r0
 8002000:	460b      	mov	r3, r1
 8002002:	4621      	mov	r1, r4
 8002004:	1a51      	subs	r1, r2, r1
 8002006:	6439      	str	r1, [r7, #64]	; 0x40
 8002008:	4629      	mov	r1, r5
 800200a:	eb63 0301 	sbc.w	r3, r3, r1
 800200e:	647b      	str	r3, [r7, #68]	; 0x44
 8002010:	f04f 0200 	mov.w	r2, #0
 8002014:	f04f 0300 	mov.w	r3, #0
 8002018:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800201c:	4649      	mov	r1, r9
 800201e:	018b      	lsls	r3, r1, #6
 8002020:	4641      	mov	r1, r8
 8002022:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002026:	4641      	mov	r1, r8
 8002028:	018a      	lsls	r2, r1, #6
 800202a:	4641      	mov	r1, r8
 800202c:	1a51      	subs	r1, r2, r1
 800202e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002030:	4649      	mov	r1, r9
 8002032:	eb63 0301 	sbc.w	r3, r3, r1
 8002036:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002038:	f04f 0200 	mov.w	r2, #0
 800203c:	f04f 0300 	mov.w	r3, #0
 8002040:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002044:	4649      	mov	r1, r9
 8002046:	00cb      	lsls	r3, r1, #3
 8002048:	4641      	mov	r1, r8
 800204a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800204e:	4641      	mov	r1, r8
 8002050:	00ca      	lsls	r2, r1, #3
 8002052:	4610      	mov	r0, r2
 8002054:	4619      	mov	r1, r3
 8002056:	4603      	mov	r3, r0
 8002058:	4622      	mov	r2, r4
 800205a:	189b      	adds	r3, r3, r2
 800205c:	633b      	str	r3, [r7, #48]	; 0x30
 800205e:	462b      	mov	r3, r5
 8002060:	460a      	mov	r2, r1
 8002062:	eb42 0303 	adc.w	r3, r2, r3
 8002066:	637b      	str	r3, [r7, #52]	; 0x34
 8002068:	f04f 0200 	mov.w	r2, #0
 800206c:	f04f 0300 	mov.w	r3, #0
 8002070:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002074:	4629      	mov	r1, r5
 8002076:	024b      	lsls	r3, r1, #9
 8002078:	4621      	mov	r1, r4
 800207a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800207e:	4621      	mov	r1, r4
 8002080:	024a      	lsls	r2, r1, #9
 8002082:	4610      	mov	r0, r2
 8002084:	4619      	mov	r1, r3
 8002086:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800208a:	2200      	movs	r2, #0
 800208c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002090:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002094:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002098:	f7fe f8b4 	bl	8000204 <__aeabi_uldivmod>
 800209c:	4602      	mov	r2, r0
 800209e:	460b      	mov	r3, r1
 80020a0:	4613      	mov	r3, r2
 80020a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80020a6:	e067      	b.n	8002178 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020a8:	4b75      	ldr	r3, [pc, #468]	; (8002280 <HAL_RCC_GetSysClockFreq+0x354>)
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	099b      	lsrs	r3, r3, #6
 80020ae:	2200      	movs	r2, #0
 80020b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80020b4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80020b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80020bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020c0:	67bb      	str	r3, [r7, #120]	; 0x78
 80020c2:	2300      	movs	r3, #0
 80020c4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80020c6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80020ca:	4622      	mov	r2, r4
 80020cc:	462b      	mov	r3, r5
 80020ce:	f04f 0000 	mov.w	r0, #0
 80020d2:	f04f 0100 	mov.w	r1, #0
 80020d6:	0159      	lsls	r1, r3, #5
 80020d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020dc:	0150      	lsls	r0, r2, #5
 80020de:	4602      	mov	r2, r0
 80020e0:	460b      	mov	r3, r1
 80020e2:	4621      	mov	r1, r4
 80020e4:	1a51      	subs	r1, r2, r1
 80020e6:	62b9      	str	r1, [r7, #40]	; 0x28
 80020e8:	4629      	mov	r1, r5
 80020ea:	eb63 0301 	sbc.w	r3, r3, r1
 80020ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020f0:	f04f 0200 	mov.w	r2, #0
 80020f4:	f04f 0300 	mov.w	r3, #0
 80020f8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80020fc:	4649      	mov	r1, r9
 80020fe:	018b      	lsls	r3, r1, #6
 8002100:	4641      	mov	r1, r8
 8002102:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002106:	4641      	mov	r1, r8
 8002108:	018a      	lsls	r2, r1, #6
 800210a:	4641      	mov	r1, r8
 800210c:	ebb2 0a01 	subs.w	sl, r2, r1
 8002110:	4649      	mov	r1, r9
 8002112:	eb63 0b01 	sbc.w	fp, r3, r1
 8002116:	f04f 0200 	mov.w	r2, #0
 800211a:	f04f 0300 	mov.w	r3, #0
 800211e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002122:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002126:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800212a:	4692      	mov	sl, r2
 800212c:	469b      	mov	fp, r3
 800212e:	4623      	mov	r3, r4
 8002130:	eb1a 0303 	adds.w	r3, sl, r3
 8002134:	623b      	str	r3, [r7, #32]
 8002136:	462b      	mov	r3, r5
 8002138:	eb4b 0303 	adc.w	r3, fp, r3
 800213c:	627b      	str	r3, [r7, #36]	; 0x24
 800213e:	f04f 0200 	mov.w	r2, #0
 8002142:	f04f 0300 	mov.w	r3, #0
 8002146:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800214a:	4629      	mov	r1, r5
 800214c:	028b      	lsls	r3, r1, #10
 800214e:	4621      	mov	r1, r4
 8002150:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002154:	4621      	mov	r1, r4
 8002156:	028a      	lsls	r2, r1, #10
 8002158:	4610      	mov	r0, r2
 800215a:	4619      	mov	r1, r3
 800215c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002160:	2200      	movs	r2, #0
 8002162:	673b      	str	r3, [r7, #112]	; 0x70
 8002164:	677a      	str	r2, [r7, #116]	; 0x74
 8002166:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800216a:	f7fe f84b 	bl	8000204 <__aeabi_uldivmod>
 800216e:	4602      	mov	r2, r0
 8002170:	460b      	mov	r3, r1
 8002172:	4613      	mov	r3, r2
 8002174:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002178:	4b41      	ldr	r3, [pc, #260]	; (8002280 <HAL_RCC_GetSysClockFreq+0x354>)
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	0c1b      	lsrs	r3, r3, #16
 800217e:	f003 0303 	and.w	r3, r3, #3
 8002182:	3301      	adds	r3, #1
 8002184:	005b      	lsls	r3, r3, #1
 8002186:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800218a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800218e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002192:	fbb2 f3f3 	udiv	r3, r2, r3
 8002196:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800219a:	e0eb      	b.n	8002374 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800219c:	4b38      	ldr	r3, [pc, #224]	; (8002280 <HAL_RCC_GetSysClockFreq+0x354>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021a8:	4b35      	ldr	r3, [pc, #212]	; (8002280 <HAL_RCC_GetSysClockFreq+0x354>)
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d06b      	beq.n	800228c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021b4:	4b32      	ldr	r3, [pc, #200]	; (8002280 <HAL_RCC_GetSysClockFreq+0x354>)
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	099b      	lsrs	r3, r3, #6
 80021ba:	2200      	movs	r2, #0
 80021bc:	66bb      	str	r3, [r7, #104]	; 0x68
 80021be:	66fa      	str	r2, [r7, #108]	; 0x6c
 80021c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80021c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021c6:	663b      	str	r3, [r7, #96]	; 0x60
 80021c8:	2300      	movs	r3, #0
 80021ca:	667b      	str	r3, [r7, #100]	; 0x64
 80021cc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80021d0:	4622      	mov	r2, r4
 80021d2:	462b      	mov	r3, r5
 80021d4:	f04f 0000 	mov.w	r0, #0
 80021d8:	f04f 0100 	mov.w	r1, #0
 80021dc:	0159      	lsls	r1, r3, #5
 80021de:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021e2:	0150      	lsls	r0, r2, #5
 80021e4:	4602      	mov	r2, r0
 80021e6:	460b      	mov	r3, r1
 80021e8:	4621      	mov	r1, r4
 80021ea:	1a51      	subs	r1, r2, r1
 80021ec:	61b9      	str	r1, [r7, #24]
 80021ee:	4629      	mov	r1, r5
 80021f0:	eb63 0301 	sbc.w	r3, r3, r1
 80021f4:	61fb      	str	r3, [r7, #28]
 80021f6:	f04f 0200 	mov.w	r2, #0
 80021fa:	f04f 0300 	mov.w	r3, #0
 80021fe:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002202:	4659      	mov	r1, fp
 8002204:	018b      	lsls	r3, r1, #6
 8002206:	4651      	mov	r1, sl
 8002208:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800220c:	4651      	mov	r1, sl
 800220e:	018a      	lsls	r2, r1, #6
 8002210:	4651      	mov	r1, sl
 8002212:	ebb2 0801 	subs.w	r8, r2, r1
 8002216:	4659      	mov	r1, fp
 8002218:	eb63 0901 	sbc.w	r9, r3, r1
 800221c:	f04f 0200 	mov.w	r2, #0
 8002220:	f04f 0300 	mov.w	r3, #0
 8002224:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002228:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800222c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002230:	4690      	mov	r8, r2
 8002232:	4699      	mov	r9, r3
 8002234:	4623      	mov	r3, r4
 8002236:	eb18 0303 	adds.w	r3, r8, r3
 800223a:	613b      	str	r3, [r7, #16]
 800223c:	462b      	mov	r3, r5
 800223e:	eb49 0303 	adc.w	r3, r9, r3
 8002242:	617b      	str	r3, [r7, #20]
 8002244:	f04f 0200 	mov.w	r2, #0
 8002248:	f04f 0300 	mov.w	r3, #0
 800224c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002250:	4629      	mov	r1, r5
 8002252:	024b      	lsls	r3, r1, #9
 8002254:	4621      	mov	r1, r4
 8002256:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800225a:	4621      	mov	r1, r4
 800225c:	024a      	lsls	r2, r1, #9
 800225e:	4610      	mov	r0, r2
 8002260:	4619      	mov	r1, r3
 8002262:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002266:	2200      	movs	r2, #0
 8002268:	65bb      	str	r3, [r7, #88]	; 0x58
 800226a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800226c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002270:	f7fd ffc8 	bl	8000204 <__aeabi_uldivmod>
 8002274:	4602      	mov	r2, r0
 8002276:	460b      	mov	r3, r1
 8002278:	4613      	mov	r3, r2
 800227a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800227e:	e065      	b.n	800234c <HAL_RCC_GetSysClockFreq+0x420>
 8002280:	40023800 	.word	0x40023800
 8002284:	00f42400 	.word	0x00f42400
 8002288:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800228c:	4b3d      	ldr	r3, [pc, #244]	; (8002384 <HAL_RCC_GetSysClockFreq+0x458>)
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	099b      	lsrs	r3, r3, #6
 8002292:	2200      	movs	r2, #0
 8002294:	4618      	mov	r0, r3
 8002296:	4611      	mov	r1, r2
 8002298:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800229c:	653b      	str	r3, [r7, #80]	; 0x50
 800229e:	2300      	movs	r3, #0
 80022a0:	657b      	str	r3, [r7, #84]	; 0x54
 80022a2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80022a6:	4642      	mov	r2, r8
 80022a8:	464b      	mov	r3, r9
 80022aa:	f04f 0000 	mov.w	r0, #0
 80022ae:	f04f 0100 	mov.w	r1, #0
 80022b2:	0159      	lsls	r1, r3, #5
 80022b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022b8:	0150      	lsls	r0, r2, #5
 80022ba:	4602      	mov	r2, r0
 80022bc:	460b      	mov	r3, r1
 80022be:	4641      	mov	r1, r8
 80022c0:	1a51      	subs	r1, r2, r1
 80022c2:	60b9      	str	r1, [r7, #8]
 80022c4:	4649      	mov	r1, r9
 80022c6:	eb63 0301 	sbc.w	r3, r3, r1
 80022ca:	60fb      	str	r3, [r7, #12]
 80022cc:	f04f 0200 	mov.w	r2, #0
 80022d0:	f04f 0300 	mov.w	r3, #0
 80022d4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80022d8:	4659      	mov	r1, fp
 80022da:	018b      	lsls	r3, r1, #6
 80022dc:	4651      	mov	r1, sl
 80022de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80022e2:	4651      	mov	r1, sl
 80022e4:	018a      	lsls	r2, r1, #6
 80022e6:	4651      	mov	r1, sl
 80022e8:	1a54      	subs	r4, r2, r1
 80022ea:	4659      	mov	r1, fp
 80022ec:	eb63 0501 	sbc.w	r5, r3, r1
 80022f0:	f04f 0200 	mov.w	r2, #0
 80022f4:	f04f 0300 	mov.w	r3, #0
 80022f8:	00eb      	lsls	r3, r5, #3
 80022fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80022fe:	00e2      	lsls	r2, r4, #3
 8002300:	4614      	mov	r4, r2
 8002302:	461d      	mov	r5, r3
 8002304:	4643      	mov	r3, r8
 8002306:	18e3      	adds	r3, r4, r3
 8002308:	603b      	str	r3, [r7, #0]
 800230a:	464b      	mov	r3, r9
 800230c:	eb45 0303 	adc.w	r3, r5, r3
 8002310:	607b      	str	r3, [r7, #4]
 8002312:	f04f 0200 	mov.w	r2, #0
 8002316:	f04f 0300 	mov.w	r3, #0
 800231a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800231e:	4629      	mov	r1, r5
 8002320:	028b      	lsls	r3, r1, #10
 8002322:	4621      	mov	r1, r4
 8002324:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002328:	4621      	mov	r1, r4
 800232a:	028a      	lsls	r2, r1, #10
 800232c:	4610      	mov	r0, r2
 800232e:	4619      	mov	r1, r3
 8002330:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002334:	2200      	movs	r2, #0
 8002336:	64bb      	str	r3, [r7, #72]	; 0x48
 8002338:	64fa      	str	r2, [r7, #76]	; 0x4c
 800233a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800233e:	f7fd ff61 	bl	8000204 <__aeabi_uldivmod>
 8002342:	4602      	mov	r2, r0
 8002344:	460b      	mov	r3, r1
 8002346:	4613      	mov	r3, r2
 8002348:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800234c:	4b0d      	ldr	r3, [pc, #52]	; (8002384 <HAL_RCC_GetSysClockFreq+0x458>)
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	0f1b      	lsrs	r3, r3, #28
 8002352:	f003 0307 	and.w	r3, r3, #7
 8002356:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800235a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800235e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002362:	fbb2 f3f3 	udiv	r3, r2, r3
 8002366:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800236a:	e003      	b.n	8002374 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800236c:	4b06      	ldr	r3, [pc, #24]	; (8002388 <HAL_RCC_GetSysClockFreq+0x45c>)
 800236e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002372:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002374:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002378:	4618      	mov	r0, r3
 800237a:	37b8      	adds	r7, #184	; 0xb8
 800237c:	46bd      	mov	sp, r7
 800237e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002382:	bf00      	nop
 8002384:	40023800 	.word	0x40023800
 8002388:	00f42400 	.word	0x00f42400

0800238c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b086      	sub	sp, #24
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d101      	bne.n	800239e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e28d      	b.n	80028ba <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0301 	and.w	r3, r3, #1
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	f000 8083 	beq.w	80024b2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80023ac:	4b94      	ldr	r3, [pc, #592]	; (8002600 <HAL_RCC_OscConfig+0x274>)
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	f003 030c 	and.w	r3, r3, #12
 80023b4:	2b04      	cmp	r3, #4
 80023b6:	d019      	beq.n	80023ec <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80023b8:	4b91      	ldr	r3, [pc, #580]	; (8002600 <HAL_RCC_OscConfig+0x274>)
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80023c0:	2b08      	cmp	r3, #8
 80023c2:	d106      	bne.n	80023d2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80023c4:	4b8e      	ldr	r3, [pc, #568]	; (8002600 <HAL_RCC_OscConfig+0x274>)
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023d0:	d00c      	beq.n	80023ec <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023d2:	4b8b      	ldr	r3, [pc, #556]	; (8002600 <HAL_RCC_OscConfig+0x274>)
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80023da:	2b0c      	cmp	r3, #12
 80023dc:	d112      	bne.n	8002404 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023de:	4b88      	ldr	r3, [pc, #544]	; (8002600 <HAL_RCC_OscConfig+0x274>)
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023ea:	d10b      	bne.n	8002404 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023ec:	4b84      	ldr	r3, [pc, #528]	; (8002600 <HAL_RCC_OscConfig+0x274>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d05b      	beq.n	80024b0 <HAL_RCC_OscConfig+0x124>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d157      	bne.n	80024b0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e25a      	b.n	80028ba <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800240c:	d106      	bne.n	800241c <HAL_RCC_OscConfig+0x90>
 800240e:	4b7c      	ldr	r3, [pc, #496]	; (8002600 <HAL_RCC_OscConfig+0x274>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a7b      	ldr	r2, [pc, #492]	; (8002600 <HAL_RCC_OscConfig+0x274>)
 8002414:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002418:	6013      	str	r3, [r2, #0]
 800241a:	e01d      	b.n	8002458 <HAL_RCC_OscConfig+0xcc>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002424:	d10c      	bne.n	8002440 <HAL_RCC_OscConfig+0xb4>
 8002426:	4b76      	ldr	r3, [pc, #472]	; (8002600 <HAL_RCC_OscConfig+0x274>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a75      	ldr	r2, [pc, #468]	; (8002600 <HAL_RCC_OscConfig+0x274>)
 800242c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002430:	6013      	str	r3, [r2, #0]
 8002432:	4b73      	ldr	r3, [pc, #460]	; (8002600 <HAL_RCC_OscConfig+0x274>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a72      	ldr	r2, [pc, #456]	; (8002600 <HAL_RCC_OscConfig+0x274>)
 8002438:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800243c:	6013      	str	r3, [r2, #0]
 800243e:	e00b      	b.n	8002458 <HAL_RCC_OscConfig+0xcc>
 8002440:	4b6f      	ldr	r3, [pc, #444]	; (8002600 <HAL_RCC_OscConfig+0x274>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a6e      	ldr	r2, [pc, #440]	; (8002600 <HAL_RCC_OscConfig+0x274>)
 8002446:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800244a:	6013      	str	r3, [r2, #0]
 800244c:	4b6c      	ldr	r3, [pc, #432]	; (8002600 <HAL_RCC_OscConfig+0x274>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a6b      	ldr	r2, [pc, #428]	; (8002600 <HAL_RCC_OscConfig+0x274>)
 8002452:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002456:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d013      	beq.n	8002488 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002460:	f7fe fdd6 	bl	8001010 <HAL_GetTick>
 8002464:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002466:	e008      	b.n	800247a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002468:	f7fe fdd2 	bl	8001010 <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	2b64      	cmp	r3, #100	; 0x64
 8002474:	d901      	bls.n	800247a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e21f      	b.n	80028ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800247a:	4b61      	ldr	r3, [pc, #388]	; (8002600 <HAL_RCC_OscConfig+0x274>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d0f0      	beq.n	8002468 <HAL_RCC_OscConfig+0xdc>
 8002486:	e014      	b.n	80024b2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002488:	f7fe fdc2 	bl	8001010 <HAL_GetTick>
 800248c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800248e:	e008      	b.n	80024a2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002490:	f7fe fdbe 	bl	8001010 <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	2b64      	cmp	r3, #100	; 0x64
 800249c:	d901      	bls.n	80024a2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e20b      	b.n	80028ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024a2:	4b57      	ldr	r3, [pc, #348]	; (8002600 <HAL_RCC_OscConfig+0x274>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d1f0      	bne.n	8002490 <HAL_RCC_OscConfig+0x104>
 80024ae:	e000      	b.n	80024b2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0302 	and.w	r3, r3, #2
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d06f      	beq.n	800259e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80024be:	4b50      	ldr	r3, [pc, #320]	; (8002600 <HAL_RCC_OscConfig+0x274>)
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f003 030c 	and.w	r3, r3, #12
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d017      	beq.n	80024fa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80024ca:	4b4d      	ldr	r3, [pc, #308]	; (8002600 <HAL_RCC_OscConfig+0x274>)
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80024d2:	2b08      	cmp	r3, #8
 80024d4:	d105      	bne.n	80024e2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80024d6:	4b4a      	ldr	r3, [pc, #296]	; (8002600 <HAL_RCC_OscConfig+0x274>)
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d00b      	beq.n	80024fa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024e2:	4b47      	ldr	r3, [pc, #284]	; (8002600 <HAL_RCC_OscConfig+0x274>)
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80024ea:	2b0c      	cmp	r3, #12
 80024ec:	d11c      	bne.n	8002528 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024ee:	4b44      	ldr	r3, [pc, #272]	; (8002600 <HAL_RCC_OscConfig+0x274>)
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d116      	bne.n	8002528 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024fa:	4b41      	ldr	r3, [pc, #260]	; (8002600 <HAL_RCC_OscConfig+0x274>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0302 	and.w	r3, r3, #2
 8002502:	2b00      	cmp	r3, #0
 8002504:	d005      	beq.n	8002512 <HAL_RCC_OscConfig+0x186>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	2b01      	cmp	r3, #1
 800250c:	d001      	beq.n	8002512 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e1d3      	b.n	80028ba <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002512:	4b3b      	ldr	r3, [pc, #236]	; (8002600 <HAL_RCC_OscConfig+0x274>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	691b      	ldr	r3, [r3, #16]
 800251e:	00db      	lsls	r3, r3, #3
 8002520:	4937      	ldr	r1, [pc, #220]	; (8002600 <HAL_RCC_OscConfig+0x274>)
 8002522:	4313      	orrs	r3, r2
 8002524:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002526:	e03a      	b.n	800259e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d020      	beq.n	8002572 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002530:	4b34      	ldr	r3, [pc, #208]	; (8002604 <HAL_RCC_OscConfig+0x278>)
 8002532:	2201      	movs	r2, #1
 8002534:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002536:	f7fe fd6b 	bl	8001010 <HAL_GetTick>
 800253a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800253c:	e008      	b.n	8002550 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800253e:	f7fe fd67 	bl	8001010 <HAL_GetTick>
 8002542:	4602      	mov	r2, r0
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	2b02      	cmp	r3, #2
 800254a:	d901      	bls.n	8002550 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e1b4      	b.n	80028ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002550:	4b2b      	ldr	r3, [pc, #172]	; (8002600 <HAL_RCC_OscConfig+0x274>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0302 	and.w	r3, r3, #2
 8002558:	2b00      	cmp	r3, #0
 800255a:	d0f0      	beq.n	800253e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800255c:	4b28      	ldr	r3, [pc, #160]	; (8002600 <HAL_RCC_OscConfig+0x274>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	691b      	ldr	r3, [r3, #16]
 8002568:	00db      	lsls	r3, r3, #3
 800256a:	4925      	ldr	r1, [pc, #148]	; (8002600 <HAL_RCC_OscConfig+0x274>)
 800256c:	4313      	orrs	r3, r2
 800256e:	600b      	str	r3, [r1, #0]
 8002570:	e015      	b.n	800259e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002572:	4b24      	ldr	r3, [pc, #144]	; (8002604 <HAL_RCC_OscConfig+0x278>)
 8002574:	2200      	movs	r2, #0
 8002576:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002578:	f7fe fd4a 	bl	8001010 <HAL_GetTick>
 800257c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800257e:	e008      	b.n	8002592 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002580:	f7fe fd46 	bl	8001010 <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b02      	cmp	r3, #2
 800258c:	d901      	bls.n	8002592 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e193      	b.n	80028ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002592:	4b1b      	ldr	r3, [pc, #108]	; (8002600 <HAL_RCC_OscConfig+0x274>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0302 	and.w	r3, r3, #2
 800259a:	2b00      	cmp	r3, #0
 800259c:	d1f0      	bne.n	8002580 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0308 	and.w	r3, r3, #8
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d036      	beq.n	8002618 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	695b      	ldr	r3, [r3, #20]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d016      	beq.n	80025e0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025b2:	4b15      	ldr	r3, [pc, #84]	; (8002608 <HAL_RCC_OscConfig+0x27c>)
 80025b4:	2201      	movs	r2, #1
 80025b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025b8:	f7fe fd2a 	bl	8001010 <HAL_GetTick>
 80025bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025be:	e008      	b.n	80025d2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025c0:	f7fe fd26 	bl	8001010 <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d901      	bls.n	80025d2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e173      	b.n	80028ba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025d2:	4b0b      	ldr	r3, [pc, #44]	; (8002600 <HAL_RCC_OscConfig+0x274>)
 80025d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025d6:	f003 0302 	and.w	r3, r3, #2
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d0f0      	beq.n	80025c0 <HAL_RCC_OscConfig+0x234>
 80025de:	e01b      	b.n	8002618 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025e0:	4b09      	ldr	r3, [pc, #36]	; (8002608 <HAL_RCC_OscConfig+0x27c>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025e6:	f7fe fd13 	bl	8001010 <HAL_GetTick>
 80025ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025ec:	e00e      	b.n	800260c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025ee:	f7fe fd0f 	bl	8001010 <HAL_GetTick>
 80025f2:	4602      	mov	r2, r0
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	d907      	bls.n	800260c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80025fc:	2303      	movs	r3, #3
 80025fe:	e15c      	b.n	80028ba <HAL_RCC_OscConfig+0x52e>
 8002600:	40023800 	.word	0x40023800
 8002604:	42470000 	.word	0x42470000
 8002608:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800260c:	4b8a      	ldr	r3, [pc, #552]	; (8002838 <HAL_RCC_OscConfig+0x4ac>)
 800260e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002610:	f003 0302 	and.w	r3, r3, #2
 8002614:	2b00      	cmp	r3, #0
 8002616:	d1ea      	bne.n	80025ee <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0304 	and.w	r3, r3, #4
 8002620:	2b00      	cmp	r3, #0
 8002622:	f000 8097 	beq.w	8002754 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002626:	2300      	movs	r3, #0
 8002628:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800262a:	4b83      	ldr	r3, [pc, #524]	; (8002838 <HAL_RCC_OscConfig+0x4ac>)
 800262c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d10f      	bne.n	8002656 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002636:	2300      	movs	r3, #0
 8002638:	60bb      	str	r3, [r7, #8]
 800263a:	4b7f      	ldr	r3, [pc, #508]	; (8002838 <HAL_RCC_OscConfig+0x4ac>)
 800263c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263e:	4a7e      	ldr	r2, [pc, #504]	; (8002838 <HAL_RCC_OscConfig+0x4ac>)
 8002640:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002644:	6413      	str	r3, [r2, #64]	; 0x40
 8002646:	4b7c      	ldr	r3, [pc, #496]	; (8002838 <HAL_RCC_OscConfig+0x4ac>)
 8002648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800264e:	60bb      	str	r3, [r7, #8]
 8002650:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002652:	2301      	movs	r3, #1
 8002654:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002656:	4b79      	ldr	r3, [pc, #484]	; (800283c <HAL_RCC_OscConfig+0x4b0>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800265e:	2b00      	cmp	r3, #0
 8002660:	d118      	bne.n	8002694 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002662:	4b76      	ldr	r3, [pc, #472]	; (800283c <HAL_RCC_OscConfig+0x4b0>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a75      	ldr	r2, [pc, #468]	; (800283c <HAL_RCC_OscConfig+0x4b0>)
 8002668:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800266c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800266e:	f7fe fccf 	bl	8001010 <HAL_GetTick>
 8002672:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002674:	e008      	b.n	8002688 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002676:	f7fe fccb 	bl	8001010 <HAL_GetTick>
 800267a:	4602      	mov	r2, r0
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	2b02      	cmp	r3, #2
 8002682:	d901      	bls.n	8002688 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e118      	b.n	80028ba <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002688:	4b6c      	ldr	r3, [pc, #432]	; (800283c <HAL_RCC_OscConfig+0x4b0>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002690:	2b00      	cmp	r3, #0
 8002692:	d0f0      	beq.n	8002676 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	2b01      	cmp	r3, #1
 800269a:	d106      	bne.n	80026aa <HAL_RCC_OscConfig+0x31e>
 800269c:	4b66      	ldr	r3, [pc, #408]	; (8002838 <HAL_RCC_OscConfig+0x4ac>)
 800269e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026a0:	4a65      	ldr	r2, [pc, #404]	; (8002838 <HAL_RCC_OscConfig+0x4ac>)
 80026a2:	f043 0301 	orr.w	r3, r3, #1
 80026a6:	6713      	str	r3, [r2, #112]	; 0x70
 80026a8:	e01c      	b.n	80026e4 <HAL_RCC_OscConfig+0x358>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	2b05      	cmp	r3, #5
 80026b0:	d10c      	bne.n	80026cc <HAL_RCC_OscConfig+0x340>
 80026b2:	4b61      	ldr	r3, [pc, #388]	; (8002838 <HAL_RCC_OscConfig+0x4ac>)
 80026b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b6:	4a60      	ldr	r2, [pc, #384]	; (8002838 <HAL_RCC_OscConfig+0x4ac>)
 80026b8:	f043 0304 	orr.w	r3, r3, #4
 80026bc:	6713      	str	r3, [r2, #112]	; 0x70
 80026be:	4b5e      	ldr	r3, [pc, #376]	; (8002838 <HAL_RCC_OscConfig+0x4ac>)
 80026c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026c2:	4a5d      	ldr	r2, [pc, #372]	; (8002838 <HAL_RCC_OscConfig+0x4ac>)
 80026c4:	f043 0301 	orr.w	r3, r3, #1
 80026c8:	6713      	str	r3, [r2, #112]	; 0x70
 80026ca:	e00b      	b.n	80026e4 <HAL_RCC_OscConfig+0x358>
 80026cc:	4b5a      	ldr	r3, [pc, #360]	; (8002838 <HAL_RCC_OscConfig+0x4ac>)
 80026ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d0:	4a59      	ldr	r2, [pc, #356]	; (8002838 <HAL_RCC_OscConfig+0x4ac>)
 80026d2:	f023 0301 	bic.w	r3, r3, #1
 80026d6:	6713      	str	r3, [r2, #112]	; 0x70
 80026d8:	4b57      	ldr	r3, [pc, #348]	; (8002838 <HAL_RCC_OscConfig+0x4ac>)
 80026da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026dc:	4a56      	ldr	r2, [pc, #344]	; (8002838 <HAL_RCC_OscConfig+0x4ac>)
 80026de:	f023 0304 	bic.w	r3, r3, #4
 80026e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d015      	beq.n	8002718 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ec:	f7fe fc90 	bl	8001010 <HAL_GetTick>
 80026f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026f2:	e00a      	b.n	800270a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026f4:	f7fe fc8c 	bl	8001010 <HAL_GetTick>
 80026f8:	4602      	mov	r2, r0
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002702:	4293      	cmp	r3, r2
 8002704:	d901      	bls.n	800270a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	e0d7      	b.n	80028ba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800270a:	4b4b      	ldr	r3, [pc, #300]	; (8002838 <HAL_RCC_OscConfig+0x4ac>)
 800270c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800270e:	f003 0302 	and.w	r3, r3, #2
 8002712:	2b00      	cmp	r3, #0
 8002714:	d0ee      	beq.n	80026f4 <HAL_RCC_OscConfig+0x368>
 8002716:	e014      	b.n	8002742 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002718:	f7fe fc7a 	bl	8001010 <HAL_GetTick>
 800271c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800271e:	e00a      	b.n	8002736 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002720:	f7fe fc76 	bl	8001010 <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	f241 3288 	movw	r2, #5000	; 0x1388
 800272e:	4293      	cmp	r3, r2
 8002730:	d901      	bls.n	8002736 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e0c1      	b.n	80028ba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002736:	4b40      	ldr	r3, [pc, #256]	; (8002838 <HAL_RCC_OscConfig+0x4ac>)
 8002738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800273a:	f003 0302 	and.w	r3, r3, #2
 800273e:	2b00      	cmp	r3, #0
 8002740:	d1ee      	bne.n	8002720 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002742:	7dfb      	ldrb	r3, [r7, #23]
 8002744:	2b01      	cmp	r3, #1
 8002746:	d105      	bne.n	8002754 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002748:	4b3b      	ldr	r3, [pc, #236]	; (8002838 <HAL_RCC_OscConfig+0x4ac>)
 800274a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274c:	4a3a      	ldr	r2, [pc, #232]	; (8002838 <HAL_RCC_OscConfig+0x4ac>)
 800274e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002752:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	699b      	ldr	r3, [r3, #24]
 8002758:	2b00      	cmp	r3, #0
 800275a:	f000 80ad 	beq.w	80028b8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800275e:	4b36      	ldr	r3, [pc, #216]	; (8002838 <HAL_RCC_OscConfig+0x4ac>)
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	f003 030c 	and.w	r3, r3, #12
 8002766:	2b08      	cmp	r3, #8
 8002768:	d060      	beq.n	800282c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	699b      	ldr	r3, [r3, #24]
 800276e:	2b02      	cmp	r3, #2
 8002770:	d145      	bne.n	80027fe <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002772:	4b33      	ldr	r3, [pc, #204]	; (8002840 <HAL_RCC_OscConfig+0x4b4>)
 8002774:	2200      	movs	r2, #0
 8002776:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002778:	f7fe fc4a 	bl	8001010 <HAL_GetTick>
 800277c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800277e:	e008      	b.n	8002792 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002780:	f7fe fc46 	bl	8001010 <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	2b02      	cmp	r3, #2
 800278c:	d901      	bls.n	8002792 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e093      	b.n	80028ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002792:	4b29      	ldr	r3, [pc, #164]	; (8002838 <HAL_RCC_OscConfig+0x4ac>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d1f0      	bne.n	8002780 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	69da      	ldr	r2, [r3, #28]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6a1b      	ldr	r3, [r3, #32]
 80027a6:	431a      	orrs	r2, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ac:	019b      	lsls	r3, r3, #6
 80027ae:	431a      	orrs	r2, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b4:	085b      	lsrs	r3, r3, #1
 80027b6:	3b01      	subs	r3, #1
 80027b8:	041b      	lsls	r3, r3, #16
 80027ba:	431a      	orrs	r2, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c0:	061b      	lsls	r3, r3, #24
 80027c2:	431a      	orrs	r2, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c8:	071b      	lsls	r3, r3, #28
 80027ca:	491b      	ldr	r1, [pc, #108]	; (8002838 <HAL_RCC_OscConfig+0x4ac>)
 80027cc:	4313      	orrs	r3, r2
 80027ce:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027d0:	4b1b      	ldr	r3, [pc, #108]	; (8002840 <HAL_RCC_OscConfig+0x4b4>)
 80027d2:	2201      	movs	r2, #1
 80027d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d6:	f7fe fc1b 	bl	8001010 <HAL_GetTick>
 80027da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027dc:	e008      	b.n	80027f0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027de:	f7fe fc17 	bl	8001010 <HAL_GetTick>
 80027e2:	4602      	mov	r2, r0
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d901      	bls.n	80027f0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80027ec:	2303      	movs	r3, #3
 80027ee:	e064      	b.n	80028ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027f0:	4b11      	ldr	r3, [pc, #68]	; (8002838 <HAL_RCC_OscConfig+0x4ac>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d0f0      	beq.n	80027de <HAL_RCC_OscConfig+0x452>
 80027fc:	e05c      	b.n	80028b8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027fe:	4b10      	ldr	r3, [pc, #64]	; (8002840 <HAL_RCC_OscConfig+0x4b4>)
 8002800:	2200      	movs	r2, #0
 8002802:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002804:	f7fe fc04 	bl	8001010 <HAL_GetTick>
 8002808:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800280a:	e008      	b.n	800281e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800280c:	f7fe fc00 	bl	8001010 <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	2b02      	cmp	r3, #2
 8002818:	d901      	bls.n	800281e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e04d      	b.n	80028ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800281e:	4b06      	ldr	r3, [pc, #24]	; (8002838 <HAL_RCC_OscConfig+0x4ac>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d1f0      	bne.n	800280c <HAL_RCC_OscConfig+0x480>
 800282a:	e045      	b.n	80028b8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	699b      	ldr	r3, [r3, #24]
 8002830:	2b01      	cmp	r3, #1
 8002832:	d107      	bne.n	8002844 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e040      	b.n	80028ba <HAL_RCC_OscConfig+0x52e>
 8002838:	40023800 	.word	0x40023800
 800283c:	40007000 	.word	0x40007000
 8002840:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002844:	4b1f      	ldr	r3, [pc, #124]	; (80028c4 <HAL_RCC_OscConfig+0x538>)
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	699b      	ldr	r3, [r3, #24]
 800284e:	2b01      	cmp	r3, #1
 8002850:	d030      	beq.n	80028b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800285c:	429a      	cmp	r2, r3
 800285e:	d129      	bne.n	80028b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800286a:	429a      	cmp	r2, r3
 800286c:	d122      	bne.n	80028b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800286e:	68fa      	ldr	r2, [r7, #12]
 8002870:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002874:	4013      	ands	r3, r2
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800287a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800287c:	4293      	cmp	r3, r2
 800287e:	d119      	bne.n	80028b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800288a:	085b      	lsrs	r3, r3, #1
 800288c:	3b01      	subs	r3, #1
 800288e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002890:	429a      	cmp	r2, r3
 8002892:	d10f      	bne.n	80028b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800289e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d107      	bne.n	80028b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ae:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d001      	beq.n	80028b8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e000      	b.n	80028ba <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3718      	adds	r7, #24
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	40023800 	.word	0x40023800

080028c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d101      	bne.n	80028da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e041      	b.n	800295e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d106      	bne.n	80028f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f7fe f9c4 	bl	8000c7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2202      	movs	r2, #2
 80028f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	3304      	adds	r3, #4
 8002904:	4619      	mov	r1, r3
 8002906:	4610      	mov	r0, r2
 8002908:	f000 fad8 	bl	8002ebc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2201      	movs	r2, #1
 8002940:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2201      	movs	r2, #1
 8002948:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800295c:	2300      	movs	r3, #0
}
 800295e:	4618      	mov	r0, r3
 8002960:	3708      	adds	r7, #8
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}

08002966 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002966:	b580      	push	{r7, lr}
 8002968:	b082      	sub	sp, #8
 800296a:	af00      	add	r7, sp, #0
 800296c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d101      	bne.n	8002978 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e041      	b.n	80029fc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800297e:	b2db      	uxtb	r3, r3
 8002980:	2b00      	cmp	r3, #0
 8002982:	d106      	bne.n	8002992 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f000 f839 	bl	8002a04 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2202      	movs	r2, #2
 8002996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	3304      	adds	r3, #4
 80029a2:	4619      	mov	r1, r3
 80029a4:	4610      	mov	r0, r2
 80029a6:	f000 fa89 	bl	8002ebc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2201      	movs	r2, #1
 80029ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2201      	movs	r2, #1
 80029b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2201      	movs	r2, #1
 80029be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2201      	movs	r2, #1
 80029c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2201      	movs	r2, #1
 80029ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2201      	movs	r2, #1
 80029d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2201      	movs	r2, #1
 80029de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2201      	movs	r2, #1
 80029e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2201      	movs	r2, #1
 80029ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2201      	movs	r2, #1
 80029f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029fa:	2300      	movs	r3, #0
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3708      	adds	r7, #8
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}

08002a04 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002a0c:	bf00      	nop
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr

08002a18 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d109      	bne.n	8002a3c <HAL_TIM_PWM_Start+0x24>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	bf14      	ite	ne
 8002a34:	2301      	movne	r3, #1
 8002a36:	2300      	moveq	r3, #0
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	e022      	b.n	8002a82 <HAL_TIM_PWM_Start+0x6a>
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	2b04      	cmp	r3, #4
 8002a40:	d109      	bne.n	8002a56 <HAL_TIM_PWM_Start+0x3e>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	bf14      	ite	ne
 8002a4e:	2301      	movne	r3, #1
 8002a50:	2300      	moveq	r3, #0
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	e015      	b.n	8002a82 <HAL_TIM_PWM_Start+0x6a>
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	2b08      	cmp	r3, #8
 8002a5a:	d109      	bne.n	8002a70 <HAL_TIM_PWM_Start+0x58>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	bf14      	ite	ne
 8002a68:	2301      	movne	r3, #1
 8002a6a:	2300      	moveq	r3, #0
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	e008      	b.n	8002a82 <HAL_TIM_PWM_Start+0x6a>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	bf14      	ite	ne
 8002a7c:	2301      	movne	r3, #1
 8002a7e:	2300      	moveq	r3, #0
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d001      	beq.n	8002a8a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e07c      	b.n	8002b84 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d104      	bne.n	8002a9a <HAL_TIM_PWM_Start+0x82>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2202      	movs	r2, #2
 8002a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a98:	e013      	b.n	8002ac2 <HAL_TIM_PWM_Start+0xaa>
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	2b04      	cmp	r3, #4
 8002a9e:	d104      	bne.n	8002aaa <HAL_TIM_PWM_Start+0x92>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2202      	movs	r2, #2
 8002aa4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002aa8:	e00b      	b.n	8002ac2 <HAL_TIM_PWM_Start+0xaa>
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	2b08      	cmp	r3, #8
 8002aae:	d104      	bne.n	8002aba <HAL_TIM_PWM_Start+0xa2>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2202      	movs	r2, #2
 8002ab4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ab8:	e003      	b.n	8002ac2 <HAL_TIM_PWM_Start+0xaa>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2202      	movs	r2, #2
 8002abe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	6839      	ldr	r1, [r7, #0]
 8002aca:	4618      	mov	r0, r3
 8002acc:	f000 fce0 	bl	8003490 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a2d      	ldr	r2, [pc, #180]	; (8002b8c <HAL_TIM_PWM_Start+0x174>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d004      	beq.n	8002ae4 <HAL_TIM_PWM_Start+0xcc>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a2c      	ldr	r2, [pc, #176]	; (8002b90 <HAL_TIM_PWM_Start+0x178>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d101      	bne.n	8002ae8 <HAL_TIM_PWM_Start+0xd0>
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e000      	b.n	8002aea <HAL_TIM_PWM_Start+0xd2>
 8002ae8:	2300      	movs	r3, #0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d007      	beq.n	8002afe <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002afc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a22      	ldr	r2, [pc, #136]	; (8002b8c <HAL_TIM_PWM_Start+0x174>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d022      	beq.n	8002b4e <HAL_TIM_PWM_Start+0x136>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b10:	d01d      	beq.n	8002b4e <HAL_TIM_PWM_Start+0x136>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a1f      	ldr	r2, [pc, #124]	; (8002b94 <HAL_TIM_PWM_Start+0x17c>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d018      	beq.n	8002b4e <HAL_TIM_PWM_Start+0x136>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a1d      	ldr	r2, [pc, #116]	; (8002b98 <HAL_TIM_PWM_Start+0x180>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d013      	beq.n	8002b4e <HAL_TIM_PWM_Start+0x136>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a1c      	ldr	r2, [pc, #112]	; (8002b9c <HAL_TIM_PWM_Start+0x184>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d00e      	beq.n	8002b4e <HAL_TIM_PWM_Start+0x136>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a16      	ldr	r2, [pc, #88]	; (8002b90 <HAL_TIM_PWM_Start+0x178>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d009      	beq.n	8002b4e <HAL_TIM_PWM_Start+0x136>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a18      	ldr	r2, [pc, #96]	; (8002ba0 <HAL_TIM_PWM_Start+0x188>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d004      	beq.n	8002b4e <HAL_TIM_PWM_Start+0x136>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a16      	ldr	r2, [pc, #88]	; (8002ba4 <HAL_TIM_PWM_Start+0x18c>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d111      	bne.n	8002b72 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	f003 0307 	and.w	r3, r3, #7
 8002b58:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2b06      	cmp	r3, #6
 8002b5e:	d010      	beq.n	8002b82 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f042 0201 	orr.w	r2, r2, #1
 8002b6e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b70:	e007      	b.n	8002b82 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f042 0201 	orr.w	r2, r2, #1
 8002b80:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b82:	2300      	movs	r3, #0
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3710      	adds	r7, #16
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	40010000 	.word	0x40010000
 8002b90:	40010400 	.word	0x40010400
 8002b94:	40000400 	.word	0x40000400
 8002b98:	40000800 	.word	0x40000800
 8002b9c:	40000c00 	.word	0x40000c00
 8002ba0:	40014000 	.word	0x40014000
 8002ba4:	40001800 	.word	0x40001800

08002ba8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b086      	sub	sp, #24
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	60f8      	str	r0, [r7, #12]
 8002bb0:	60b9      	str	r1, [r7, #8]
 8002bb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d101      	bne.n	8002bc6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002bc2:	2302      	movs	r3, #2
 8002bc4:	e0ae      	b.n	8002d24 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2201      	movs	r2, #1
 8002bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2b0c      	cmp	r3, #12
 8002bd2:	f200 809f 	bhi.w	8002d14 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002bd6:	a201      	add	r2, pc, #4	; (adr r2, 8002bdc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bdc:	08002c11 	.word	0x08002c11
 8002be0:	08002d15 	.word	0x08002d15
 8002be4:	08002d15 	.word	0x08002d15
 8002be8:	08002d15 	.word	0x08002d15
 8002bec:	08002c51 	.word	0x08002c51
 8002bf0:	08002d15 	.word	0x08002d15
 8002bf4:	08002d15 	.word	0x08002d15
 8002bf8:	08002d15 	.word	0x08002d15
 8002bfc:	08002c93 	.word	0x08002c93
 8002c00:	08002d15 	.word	0x08002d15
 8002c04:	08002d15 	.word	0x08002d15
 8002c08:	08002d15 	.word	0x08002d15
 8002c0c:	08002cd3 	.word	0x08002cd3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	68b9      	ldr	r1, [r7, #8]
 8002c16:	4618      	mov	r0, r3
 8002c18:	f000 f9f0 	bl	8002ffc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	699a      	ldr	r2, [r3, #24]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f042 0208 	orr.w	r2, r2, #8
 8002c2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	699a      	ldr	r2, [r3, #24]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f022 0204 	bic.w	r2, r2, #4
 8002c3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	6999      	ldr	r1, [r3, #24]
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	691a      	ldr	r2, [r3, #16]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	430a      	orrs	r2, r1
 8002c4c:	619a      	str	r2, [r3, #24]
      break;
 8002c4e:	e064      	b.n	8002d1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	68b9      	ldr	r1, [r7, #8]
 8002c56:	4618      	mov	r0, r3
 8002c58:	f000 fa40 	bl	80030dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	699a      	ldr	r2, [r3, #24]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	699a      	ldr	r2, [r3, #24]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	6999      	ldr	r1, [r3, #24]
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	691b      	ldr	r3, [r3, #16]
 8002c86:	021a      	lsls	r2, r3, #8
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	430a      	orrs	r2, r1
 8002c8e:	619a      	str	r2, [r3, #24]
      break;
 8002c90:	e043      	b.n	8002d1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	68b9      	ldr	r1, [r7, #8]
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f000 fa95 	bl	80031c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	69da      	ldr	r2, [r3, #28]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f042 0208 	orr.w	r2, r2, #8
 8002cac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	69da      	ldr	r2, [r3, #28]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f022 0204 	bic.w	r2, r2, #4
 8002cbc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	69d9      	ldr	r1, [r3, #28]
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	691a      	ldr	r2, [r3, #16]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	430a      	orrs	r2, r1
 8002cce:	61da      	str	r2, [r3, #28]
      break;
 8002cd0:	e023      	b.n	8002d1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	68b9      	ldr	r1, [r7, #8]
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f000 fae9 	bl	80032b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	69da      	ldr	r2, [r3, #28]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002cec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	69da      	ldr	r2, [r3, #28]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cfc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	69d9      	ldr	r1, [r3, #28]
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	691b      	ldr	r3, [r3, #16]
 8002d08:	021a      	lsls	r2, r3, #8
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	430a      	orrs	r2, r1
 8002d10:	61da      	str	r2, [r3, #28]
      break;
 8002d12:	e002      	b.n	8002d1a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	75fb      	strb	r3, [r7, #23]
      break;
 8002d18:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002d22:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3718      	adds	r7, #24
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d36:	2300      	movs	r3, #0
 8002d38:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d101      	bne.n	8002d48 <HAL_TIM_ConfigClockSource+0x1c>
 8002d44:	2302      	movs	r3, #2
 8002d46:	e0b4      	b.n	8002eb2 <HAL_TIM_ConfigClockSource+0x186>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2202      	movs	r2, #2
 8002d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002d66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d6e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	68ba      	ldr	r2, [r7, #8]
 8002d76:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d80:	d03e      	beq.n	8002e00 <HAL_TIM_ConfigClockSource+0xd4>
 8002d82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d86:	f200 8087 	bhi.w	8002e98 <HAL_TIM_ConfigClockSource+0x16c>
 8002d8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d8e:	f000 8086 	beq.w	8002e9e <HAL_TIM_ConfigClockSource+0x172>
 8002d92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d96:	d87f      	bhi.n	8002e98 <HAL_TIM_ConfigClockSource+0x16c>
 8002d98:	2b70      	cmp	r3, #112	; 0x70
 8002d9a:	d01a      	beq.n	8002dd2 <HAL_TIM_ConfigClockSource+0xa6>
 8002d9c:	2b70      	cmp	r3, #112	; 0x70
 8002d9e:	d87b      	bhi.n	8002e98 <HAL_TIM_ConfigClockSource+0x16c>
 8002da0:	2b60      	cmp	r3, #96	; 0x60
 8002da2:	d050      	beq.n	8002e46 <HAL_TIM_ConfigClockSource+0x11a>
 8002da4:	2b60      	cmp	r3, #96	; 0x60
 8002da6:	d877      	bhi.n	8002e98 <HAL_TIM_ConfigClockSource+0x16c>
 8002da8:	2b50      	cmp	r3, #80	; 0x50
 8002daa:	d03c      	beq.n	8002e26 <HAL_TIM_ConfigClockSource+0xfa>
 8002dac:	2b50      	cmp	r3, #80	; 0x50
 8002dae:	d873      	bhi.n	8002e98 <HAL_TIM_ConfigClockSource+0x16c>
 8002db0:	2b40      	cmp	r3, #64	; 0x40
 8002db2:	d058      	beq.n	8002e66 <HAL_TIM_ConfigClockSource+0x13a>
 8002db4:	2b40      	cmp	r3, #64	; 0x40
 8002db6:	d86f      	bhi.n	8002e98 <HAL_TIM_ConfigClockSource+0x16c>
 8002db8:	2b30      	cmp	r3, #48	; 0x30
 8002dba:	d064      	beq.n	8002e86 <HAL_TIM_ConfigClockSource+0x15a>
 8002dbc:	2b30      	cmp	r3, #48	; 0x30
 8002dbe:	d86b      	bhi.n	8002e98 <HAL_TIM_ConfigClockSource+0x16c>
 8002dc0:	2b20      	cmp	r3, #32
 8002dc2:	d060      	beq.n	8002e86 <HAL_TIM_ConfigClockSource+0x15a>
 8002dc4:	2b20      	cmp	r3, #32
 8002dc6:	d867      	bhi.n	8002e98 <HAL_TIM_ConfigClockSource+0x16c>
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d05c      	beq.n	8002e86 <HAL_TIM_ConfigClockSource+0x15a>
 8002dcc:	2b10      	cmp	r3, #16
 8002dce:	d05a      	beq.n	8002e86 <HAL_TIM_ConfigClockSource+0x15a>
 8002dd0:	e062      	b.n	8002e98 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6818      	ldr	r0, [r3, #0]
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	6899      	ldr	r1, [r3, #8]
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	685a      	ldr	r2, [r3, #4]
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	f000 fb35 	bl	8003450 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002df4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	68ba      	ldr	r2, [r7, #8]
 8002dfc:	609a      	str	r2, [r3, #8]
      break;
 8002dfe:	e04f      	b.n	8002ea0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6818      	ldr	r0, [r3, #0]
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	6899      	ldr	r1, [r3, #8]
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	685a      	ldr	r2, [r3, #4]
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	f000 fb1e 	bl	8003450 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	689a      	ldr	r2, [r3, #8]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e22:	609a      	str	r2, [r3, #8]
      break;
 8002e24:	e03c      	b.n	8002ea0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6818      	ldr	r0, [r3, #0]
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	6859      	ldr	r1, [r3, #4]
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	68db      	ldr	r3, [r3, #12]
 8002e32:	461a      	mov	r2, r3
 8002e34:	f000 fa92 	bl	800335c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	2150      	movs	r1, #80	; 0x50
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f000 faeb 	bl	800341a <TIM_ITRx_SetConfig>
      break;
 8002e44:	e02c      	b.n	8002ea0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6818      	ldr	r0, [r3, #0]
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	6859      	ldr	r1, [r3, #4]
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	461a      	mov	r2, r3
 8002e54:	f000 fab1 	bl	80033ba <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2160      	movs	r1, #96	; 0x60
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f000 fadb 	bl	800341a <TIM_ITRx_SetConfig>
      break;
 8002e64:	e01c      	b.n	8002ea0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6818      	ldr	r0, [r3, #0]
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	6859      	ldr	r1, [r3, #4]
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	461a      	mov	r2, r3
 8002e74:	f000 fa72 	bl	800335c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2140      	movs	r1, #64	; 0x40
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f000 facb 	bl	800341a <TIM_ITRx_SetConfig>
      break;
 8002e84:	e00c      	b.n	8002ea0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4619      	mov	r1, r3
 8002e90:	4610      	mov	r0, r2
 8002e92:	f000 fac2 	bl	800341a <TIM_ITRx_SetConfig>
      break;
 8002e96:	e003      	b.n	8002ea0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	73fb      	strb	r3, [r7, #15]
      break;
 8002e9c:	e000      	b.n	8002ea0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002e9e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002eb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3710      	adds	r7, #16
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
	...

08002ebc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b085      	sub	sp, #20
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	4a40      	ldr	r2, [pc, #256]	; (8002fd0 <TIM_Base_SetConfig+0x114>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d013      	beq.n	8002efc <TIM_Base_SetConfig+0x40>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eda:	d00f      	beq.n	8002efc <TIM_Base_SetConfig+0x40>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	4a3d      	ldr	r2, [pc, #244]	; (8002fd4 <TIM_Base_SetConfig+0x118>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d00b      	beq.n	8002efc <TIM_Base_SetConfig+0x40>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	4a3c      	ldr	r2, [pc, #240]	; (8002fd8 <TIM_Base_SetConfig+0x11c>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d007      	beq.n	8002efc <TIM_Base_SetConfig+0x40>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	4a3b      	ldr	r2, [pc, #236]	; (8002fdc <TIM_Base_SetConfig+0x120>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d003      	beq.n	8002efc <TIM_Base_SetConfig+0x40>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	4a3a      	ldr	r2, [pc, #232]	; (8002fe0 <TIM_Base_SetConfig+0x124>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d108      	bne.n	8002f0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	68fa      	ldr	r2, [r7, #12]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a2f      	ldr	r2, [pc, #188]	; (8002fd0 <TIM_Base_SetConfig+0x114>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d02b      	beq.n	8002f6e <TIM_Base_SetConfig+0xb2>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f1c:	d027      	beq.n	8002f6e <TIM_Base_SetConfig+0xb2>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a2c      	ldr	r2, [pc, #176]	; (8002fd4 <TIM_Base_SetConfig+0x118>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d023      	beq.n	8002f6e <TIM_Base_SetConfig+0xb2>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4a2b      	ldr	r2, [pc, #172]	; (8002fd8 <TIM_Base_SetConfig+0x11c>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d01f      	beq.n	8002f6e <TIM_Base_SetConfig+0xb2>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a2a      	ldr	r2, [pc, #168]	; (8002fdc <TIM_Base_SetConfig+0x120>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d01b      	beq.n	8002f6e <TIM_Base_SetConfig+0xb2>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a29      	ldr	r2, [pc, #164]	; (8002fe0 <TIM_Base_SetConfig+0x124>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d017      	beq.n	8002f6e <TIM_Base_SetConfig+0xb2>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a28      	ldr	r2, [pc, #160]	; (8002fe4 <TIM_Base_SetConfig+0x128>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d013      	beq.n	8002f6e <TIM_Base_SetConfig+0xb2>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a27      	ldr	r2, [pc, #156]	; (8002fe8 <TIM_Base_SetConfig+0x12c>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d00f      	beq.n	8002f6e <TIM_Base_SetConfig+0xb2>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a26      	ldr	r2, [pc, #152]	; (8002fec <TIM_Base_SetConfig+0x130>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d00b      	beq.n	8002f6e <TIM_Base_SetConfig+0xb2>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a25      	ldr	r2, [pc, #148]	; (8002ff0 <TIM_Base_SetConfig+0x134>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d007      	beq.n	8002f6e <TIM_Base_SetConfig+0xb2>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a24      	ldr	r2, [pc, #144]	; (8002ff4 <TIM_Base_SetConfig+0x138>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d003      	beq.n	8002f6e <TIM_Base_SetConfig+0xb2>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a23      	ldr	r2, [pc, #140]	; (8002ff8 <TIM_Base_SetConfig+0x13c>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d108      	bne.n	8002f80 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	68fa      	ldr	r2, [r7, #12]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	695b      	ldr	r3, [r3, #20]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	68fa      	ldr	r2, [r7, #12]
 8002f92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	689a      	ldr	r2, [r3, #8]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	4a0a      	ldr	r2, [pc, #40]	; (8002fd0 <TIM_Base_SetConfig+0x114>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d003      	beq.n	8002fb4 <TIM_Base_SetConfig+0xf8>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	4a0c      	ldr	r2, [pc, #48]	; (8002fe0 <TIM_Base_SetConfig+0x124>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d103      	bne.n	8002fbc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	691a      	ldr	r2, [r3, #16]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	615a      	str	r2, [r3, #20]
}
 8002fc2:	bf00      	nop
 8002fc4:	3714      	adds	r7, #20
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr
 8002fce:	bf00      	nop
 8002fd0:	40010000 	.word	0x40010000
 8002fd4:	40000400 	.word	0x40000400
 8002fd8:	40000800 	.word	0x40000800
 8002fdc:	40000c00 	.word	0x40000c00
 8002fe0:	40010400 	.word	0x40010400
 8002fe4:	40014000 	.word	0x40014000
 8002fe8:	40014400 	.word	0x40014400
 8002fec:	40014800 	.word	0x40014800
 8002ff0:	40001800 	.word	0x40001800
 8002ff4:	40001c00 	.word	0x40001c00
 8002ff8:	40002000 	.word	0x40002000

08002ffc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b087      	sub	sp, #28
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a1b      	ldr	r3, [r3, #32]
 800300a:	f023 0201 	bic.w	r2, r3, #1
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6a1b      	ldr	r3, [r3, #32]
 8003016:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	699b      	ldr	r3, [r3, #24]
 8003022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800302a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f023 0303 	bic.w	r3, r3, #3
 8003032:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	68fa      	ldr	r2, [r7, #12]
 800303a:	4313      	orrs	r3, r2
 800303c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	f023 0302 	bic.w	r3, r3, #2
 8003044:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	697a      	ldr	r2, [r7, #20]
 800304c:	4313      	orrs	r3, r2
 800304e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	4a20      	ldr	r2, [pc, #128]	; (80030d4 <TIM_OC1_SetConfig+0xd8>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d003      	beq.n	8003060 <TIM_OC1_SetConfig+0x64>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	4a1f      	ldr	r2, [pc, #124]	; (80030d8 <TIM_OC1_SetConfig+0xdc>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d10c      	bne.n	800307a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	f023 0308 	bic.w	r3, r3, #8
 8003066:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	697a      	ldr	r2, [r7, #20]
 800306e:	4313      	orrs	r3, r2
 8003070:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	f023 0304 	bic.w	r3, r3, #4
 8003078:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a15      	ldr	r2, [pc, #84]	; (80030d4 <TIM_OC1_SetConfig+0xd8>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d003      	beq.n	800308a <TIM_OC1_SetConfig+0x8e>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4a14      	ldr	r2, [pc, #80]	; (80030d8 <TIM_OC1_SetConfig+0xdc>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d111      	bne.n	80030ae <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003090:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003098:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	695b      	ldr	r3, [r3, #20]
 800309e:	693a      	ldr	r2, [r7, #16]
 80030a0:	4313      	orrs	r3, r2
 80030a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	699b      	ldr	r3, [r3, #24]
 80030a8:	693a      	ldr	r2, [r7, #16]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	693a      	ldr	r2, [r7, #16]
 80030b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	68fa      	ldr	r2, [r7, #12]
 80030b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	685a      	ldr	r2, [r3, #4]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	697a      	ldr	r2, [r7, #20]
 80030c6:	621a      	str	r2, [r3, #32]
}
 80030c8:	bf00      	nop
 80030ca:	371c      	adds	r7, #28
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr
 80030d4:	40010000 	.word	0x40010000
 80030d8:	40010400 	.word	0x40010400

080030dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80030dc:	b480      	push	{r7}
 80030de:	b087      	sub	sp, #28
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
 80030e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a1b      	ldr	r3, [r3, #32]
 80030ea:	f023 0210 	bic.w	r2, r3, #16
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6a1b      	ldr	r3, [r3, #32]
 80030f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	699b      	ldr	r3, [r3, #24]
 8003102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800310a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003112:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	021b      	lsls	r3, r3, #8
 800311a:	68fa      	ldr	r2, [r7, #12]
 800311c:	4313      	orrs	r3, r2
 800311e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	f023 0320 	bic.w	r3, r3, #32
 8003126:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	011b      	lsls	r3, r3, #4
 800312e:	697a      	ldr	r2, [r7, #20]
 8003130:	4313      	orrs	r3, r2
 8003132:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	4a22      	ldr	r2, [pc, #136]	; (80031c0 <TIM_OC2_SetConfig+0xe4>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d003      	beq.n	8003144 <TIM_OC2_SetConfig+0x68>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	4a21      	ldr	r2, [pc, #132]	; (80031c4 <TIM_OC2_SetConfig+0xe8>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d10d      	bne.n	8003160 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800314a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	011b      	lsls	r3, r3, #4
 8003152:	697a      	ldr	r2, [r7, #20]
 8003154:	4313      	orrs	r3, r2
 8003156:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800315e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	4a17      	ldr	r2, [pc, #92]	; (80031c0 <TIM_OC2_SetConfig+0xe4>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d003      	beq.n	8003170 <TIM_OC2_SetConfig+0x94>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	4a16      	ldr	r2, [pc, #88]	; (80031c4 <TIM_OC2_SetConfig+0xe8>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d113      	bne.n	8003198 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003176:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800317e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	695b      	ldr	r3, [r3, #20]
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	693a      	ldr	r2, [r7, #16]
 8003188:	4313      	orrs	r3, r2
 800318a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	699b      	ldr	r3, [r3, #24]
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	693a      	ldr	r2, [r7, #16]
 8003194:	4313      	orrs	r3, r2
 8003196:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	693a      	ldr	r2, [r7, #16]
 800319c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	68fa      	ldr	r2, [r7, #12]
 80031a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	685a      	ldr	r2, [r3, #4]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	697a      	ldr	r2, [r7, #20]
 80031b0:	621a      	str	r2, [r3, #32]
}
 80031b2:	bf00      	nop
 80031b4:	371c      	adds	r7, #28
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr
 80031be:	bf00      	nop
 80031c0:	40010000 	.word	0x40010000
 80031c4:	40010400 	.word	0x40010400

080031c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b087      	sub	sp, #28
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6a1b      	ldr	r3, [r3, #32]
 80031d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a1b      	ldr	r3, [r3, #32]
 80031e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	69db      	ldr	r3, [r3, #28]
 80031ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f023 0303 	bic.w	r3, r3, #3
 80031fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	68fa      	ldr	r2, [r7, #12]
 8003206:	4313      	orrs	r3, r2
 8003208:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003210:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	021b      	lsls	r3, r3, #8
 8003218:	697a      	ldr	r2, [r7, #20]
 800321a:	4313      	orrs	r3, r2
 800321c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4a21      	ldr	r2, [pc, #132]	; (80032a8 <TIM_OC3_SetConfig+0xe0>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d003      	beq.n	800322e <TIM_OC3_SetConfig+0x66>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a20      	ldr	r2, [pc, #128]	; (80032ac <TIM_OC3_SetConfig+0xe4>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d10d      	bne.n	800324a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003234:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	68db      	ldr	r3, [r3, #12]
 800323a:	021b      	lsls	r3, r3, #8
 800323c:	697a      	ldr	r2, [r7, #20]
 800323e:	4313      	orrs	r3, r2
 8003240:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003248:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4a16      	ldr	r2, [pc, #88]	; (80032a8 <TIM_OC3_SetConfig+0xe0>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d003      	beq.n	800325a <TIM_OC3_SetConfig+0x92>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4a15      	ldr	r2, [pc, #84]	; (80032ac <TIM_OC3_SetConfig+0xe4>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d113      	bne.n	8003282 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003260:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003268:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	695b      	ldr	r3, [r3, #20]
 800326e:	011b      	lsls	r3, r3, #4
 8003270:	693a      	ldr	r2, [r7, #16]
 8003272:	4313      	orrs	r3, r2
 8003274:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	699b      	ldr	r3, [r3, #24]
 800327a:	011b      	lsls	r3, r3, #4
 800327c:	693a      	ldr	r2, [r7, #16]
 800327e:	4313      	orrs	r3, r2
 8003280:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	693a      	ldr	r2, [r7, #16]
 8003286:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	68fa      	ldr	r2, [r7, #12]
 800328c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	685a      	ldr	r2, [r3, #4]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	697a      	ldr	r2, [r7, #20]
 800329a:	621a      	str	r2, [r3, #32]
}
 800329c:	bf00      	nop
 800329e:	371c      	adds	r7, #28
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr
 80032a8:	40010000 	.word	0x40010000
 80032ac:	40010400 	.word	0x40010400

080032b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b087      	sub	sp, #28
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6a1b      	ldr	r3, [r3, #32]
 80032be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a1b      	ldr	r3, [r3, #32]
 80032ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	69db      	ldr	r3, [r3, #28]
 80032d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	021b      	lsls	r3, r3, #8
 80032ee:	68fa      	ldr	r2, [r7, #12]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80032fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	031b      	lsls	r3, r3, #12
 8003302:	693a      	ldr	r2, [r7, #16]
 8003304:	4313      	orrs	r3, r2
 8003306:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	4a12      	ldr	r2, [pc, #72]	; (8003354 <TIM_OC4_SetConfig+0xa4>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d003      	beq.n	8003318 <TIM_OC4_SetConfig+0x68>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	4a11      	ldr	r2, [pc, #68]	; (8003358 <TIM_OC4_SetConfig+0xa8>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d109      	bne.n	800332c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800331e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	695b      	ldr	r3, [r3, #20]
 8003324:	019b      	lsls	r3, r3, #6
 8003326:	697a      	ldr	r2, [r7, #20]
 8003328:	4313      	orrs	r3, r2
 800332a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	697a      	ldr	r2, [r7, #20]
 8003330:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	68fa      	ldr	r2, [r7, #12]
 8003336:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	685a      	ldr	r2, [r3, #4]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	693a      	ldr	r2, [r7, #16]
 8003344:	621a      	str	r2, [r3, #32]
}
 8003346:	bf00      	nop
 8003348:	371c      	adds	r7, #28
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop
 8003354:	40010000 	.word	0x40010000
 8003358:	40010400 	.word	0x40010400

0800335c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800335c:	b480      	push	{r7}
 800335e:	b087      	sub	sp, #28
 8003360:	af00      	add	r7, sp, #0
 8003362:	60f8      	str	r0, [r7, #12]
 8003364:	60b9      	str	r1, [r7, #8]
 8003366:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6a1b      	ldr	r3, [r3, #32]
 800336c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	6a1b      	ldr	r3, [r3, #32]
 8003372:	f023 0201 	bic.w	r2, r3, #1
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	699b      	ldr	r3, [r3, #24]
 800337e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003386:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	011b      	lsls	r3, r3, #4
 800338c:	693a      	ldr	r2, [r7, #16]
 800338e:	4313      	orrs	r3, r2
 8003390:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	f023 030a 	bic.w	r3, r3, #10
 8003398:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800339a:	697a      	ldr	r2, [r7, #20]
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	4313      	orrs	r3, r2
 80033a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	693a      	ldr	r2, [r7, #16]
 80033a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	697a      	ldr	r2, [r7, #20]
 80033ac:	621a      	str	r2, [r3, #32]
}
 80033ae:	bf00      	nop
 80033b0:	371c      	adds	r7, #28
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr

080033ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033ba:	b480      	push	{r7}
 80033bc:	b087      	sub	sp, #28
 80033be:	af00      	add	r7, sp, #0
 80033c0:	60f8      	str	r0, [r7, #12]
 80033c2:	60b9      	str	r1, [r7, #8]
 80033c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6a1b      	ldr	r3, [r3, #32]
 80033ca:	f023 0210 	bic.w	r2, r3, #16
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	699b      	ldr	r3, [r3, #24]
 80033d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6a1b      	ldr	r3, [r3, #32]
 80033dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80033e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	031b      	lsls	r3, r3, #12
 80033ea:	697a      	ldr	r2, [r7, #20]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80033f6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	011b      	lsls	r3, r3, #4
 80033fc:	693a      	ldr	r2, [r7, #16]
 80033fe:	4313      	orrs	r3, r2
 8003400:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	697a      	ldr	r2, [r7, #20]
 8003406:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	693a      	ldr	r2, [r7, #16]
 800340c:	621a      	str	r2, [r3, #32]
}
 800340e:	bf00      	nop
 8003410:	371c      	adds	r7, #28
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr

0800341a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800341a:	b480      	push	{r7}
 800341c:	b085      	sub	sp, #20
 800341e:	af00      	add	r7, sp, #0
 8003420:	6078      	str	r0, [r7, #4]
 8003422:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003430:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003432:	683a      	ldr	r2, [r7, #0]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	4313      	orrs	r3, r2
 8003438:	f043 0307 	orr.w	r3, r3, #7
 800343c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	68fa      	ldr	r2, [r7, #12]
 8003442:	609a      	str	r2, [r3, #8]
}
 8003444:	bf00      	nop
 8003446:	3714      	adds	r7, #20
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr

08003450 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003450:	b480      	push	{r7}
 8003452:	b087      	sub	sp, #28
 8003454:	af00      	add	r7, sp, #0
 8003456:	60f8      	str	r0, [r7, #12]
 8003458:	60b9      	str	r1, [r7, #8]
 800345a:	607a      	str	r2, [r7, #4]
 800345c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800346a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	021a      	lsls	r2, r3, #8
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	431a      	orrs	r2, r3
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	4313      	orrs	r3, r2
 8003478:	697a      	ldr	r2, [r7, #20]
 800347a:	4313      	orrs	r3, r2
 800347c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	697a      	ldr	r2, [r7, #20]
 8003482:	609a      	str	r2, [r3, #8]
}
 8003484:	bf00      	nop
 8003486:	371c      	adds	r7, #28
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr

08003490 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003490:	b480      	push	{r7}
 8003492:	b087      	sub	sp, #28
 8003494:	af00      	add	r7, sp, #0
 8003496:	60f8      	str	r0, [r7, #12]
 8003498:	60b9      	str	r1, [r7, #8]
 800349a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	f003 031f 	and.w	r3, r3, #31
 80034a2:	2201      	movs	r2, #1
 80034a4:	fa02 f303 	lsl.w	r3, r2, r3
 80034a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6a1a      	ldr	r2, [r3, #32]
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	43db      	mvns	r3, r3
 80034b2:	401a      	ands	r2, r3
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6a1a      	ldr	r2, [r3, #32]
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	f003 031f 	and.w	r3, r3, #31
 80034c2:	6879      	ldr	r1, [r7, #4]
 80034c4:	fa01 f303 	lsl.w	r3, r1, r3
 80034c8:	431a      	orrs	r2, r3
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	621a      	str	r2, [r3, #32]
}
 80034ce:	bf00      	nop
 80034d0:	371c      	adds	r7, #28
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr
	...

080034dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80034dc:	b480      	push	{r7}
 80034de:	b085      	sub	sp, #20
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d101      	bne.n	80034f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80034f0:	2302      	movs	r3, #2
 80034f2:	e05a      	b.n	80035aa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2202      	movs	r2, #2
 8003500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800351a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	68fa      	ldr	r2, [r7, #12]
 8003522:	4313      	orrs	r3, r2
 8003524:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	68fa      	ldr	r2, [r7, #12]
 800352c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a21      	ldr	r2, [pc, #132]	; (80035b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d022      	beq.n	800357e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003540:	d01d      	beq.n	800357e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a1d      	ldr	r2, [pc, #116]	; (80035bc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d018      	beq.n	800357e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a1b      	ldr	r2, [pc, #108]	; (80035c0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d013      	beq.n	800357e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a1a      	ldr	r2, [pc, #104]	; (80035c4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d00e      	beq.n	800357e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a18      	ldr	r2, [pc, #96]	; (80035c8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d009      	beq.n	800357e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a17      	ldr	r2, [pc, #92]	; (80035cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d004      	beq.n	800357e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a15      	ldr	r2, [pc, #84]	; (80035d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d10c      	bne.n	8003598 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003584:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	68ba      	ldr	r2, [r7, #8]
 800358c:	4313      	orrs	r3, r2
 800358e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	68ba      	ldr	r2, [r7, #8]
 8003596:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2200      	movs	r2, #0
 80035a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035a8:	2300      	movs	r3, #0
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3714      	adds	r7, #20
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr
 80035b6:	bf00      	nop
 80035b8:	40010000 	.word	0x40010000
 80035bc:	40000400 	.word	0x40000400
 80035c0:	40000800 	.word	0x40000800
 80035c4:	40000c00 	.word	0x40000c00
 80035c8:	40010400 	.word	0x40010400
 80035cc:	40014000 	.word	0x40014000
 80035d0:	40001800 	.word	0x40001800

080035d4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b085      	sub	sp, #20
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80035de:	2300      	movs	r3, #0
 80035e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d101      	bne.n	80035f0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80035ec:	2302      	movs	r3, #2
 80035ee:	e03d      	b.n	800366c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	68db      	ldr	r3, [r3, #12]
 8003602:	4313      	orrs	r3, r2
 8003604:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	4313      	orrs	r3, r2
 8003612:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	4313      	orrs	r3, r2
 8003620:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4313      	orrs	r3, r2
 800362e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	691b      	ldr	r3, [r3, #16]
 800363a:	4313      	orrs	r3, r2
 800363c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	695b      	ldr	r3, [r3, #20]
 8003648:	4313      	orrs	r3, r2
 800364a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	69db      	ldr	r3, [r3, #28]
 8003656:	4313      	orrs	r3, r2
 8003658:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	68fa      	ldr	r2, [r7, #12]
 8003660:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2200      	movs	r2, #0
 8003666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800366a:	2300      	movs	r3, #0
}
 800366c:	4618      	mov	r0, r3
 800366e:	3714      	adds	r7, #20
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr

08003678 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b082      	sub	sp, #8
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d101      	bne.n	800368a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e03f      	b.n	800370a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003690:	b2db      	uxtb	r3, r3
 8003692:	2b00      	cmp	r3, #0
 8003694:	d106      	bne.n	80036a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f7fd fb84 	bl	8000dac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2224      	movs	r2, #36	; 0x24
 80036a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	68da      	ldr	r2, [r3, #12]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f000 f829 	bl	8003714 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	691a      	ldr	r2, [r3, #16]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80036d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	695a      	ldr	r2, [r3, #20]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80036e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	68da      	ldr	r2, [r3, #12]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2220      	movs	r2, #32
 80036fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2220      	movs	r2, #32
 8003704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003708:	2300      	movs	r3, #0
}
 800370a:	4618      	mov	r0, r3
 800370c:	3708      	adds	r7, #8
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
	...

08003714 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003714:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003718:	b0c0      	sub	sp, #256	; 0x100
 800371a:	af00      	add	r7, sp, #0
 800371c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	691b      	ldr	r3, [r3, #16]
 8003728:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800372c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003730:	68d9      	ldr	r1, [r3, #12]
 8003732:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	ea40 0301 	orr.w	r3, r0, r1
 800373c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800373e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003742:	689a      	ldr	r2, [r3, #8]
 8003744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003748:	691b      	ldr	r3, [r3, #16]
 800374a:	431a      	orrs	r2, r3
 800374c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003750:	695b      	ldr	r3, [r3, #20]
 8003752:	431a      	orrs	r2, r3
 8003754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003758:	69db      	ldr	r3, [r3, #28]
 800375a:	4313      	orrs	r3, r2
 800375c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800376c:	f021 010c 	bic.w	r1, r1, #12
 8003770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800377a:	430b      	orrs	r3, r1
 800377c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800377e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	695b      	ldr	r3, [r3, #20]
 8003786:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800378a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800378e:	6999      	ldr	r1, [r3, #24]
 8003790:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	ea40 0301 	orr.w	r3, r0, r1
 800379a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800379c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	4b8f      	ldr	r3, [pc, #572]	; (80039e0 <UART_SetConfig+0x2cc>)
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d005      	beq.n	80037b4 <UART_SetConfig+0xa0>
 80037a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	4b8d      	ldr	r3, [pc, #564]	; (80039e4 <UART_SetConfig+0x2d0>)
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d104      	bne.n	80037be <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80037b4:	f7fe fba6 	bl	8001f04 <HAL_RCC_GetPCLK2Freq>
 80037b8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80037bc:	e003      	b.n	80037c6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80037be:	f7fe fb8d 	bl	8001edc <HAL_RCC_GetPCLK1Freq>
 80037c2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037ca:	69db      	ldr	r3, [r3, #28]
 80037cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037d0:	f040 810c 	bne.w	80039ec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80037d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037d8:	2200      	movs	r2, #0
 80037da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80037de:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80037e2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80037e6:	4622      	mov	r2, r4
 80037e8:	462b      	mov	r3, r5
 80037ea:	1891      	adds	r1, r2, r2
 80037ec:	65b9      	str	r1, [r7, #88]	; 0x58
 80037ee:	415b      	adcs	r3, r3
 80037f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80037f2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80037f6:	4621      	mov	r1, r4
 80037f8:	eb12 0801 	adds.w	r8, r2, r1
 80037fc:	4629      	mov	r1, r5
 80037fe:	eb43 0901 	adc.w	r9, r3, r1
 8003802:	f04f 0200 	mov.w	r2, #0
 8003806:	f04f 0300 	mov.w	r3, #0
 800380a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800380e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003812:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003816:	4690      	mov	r8, r2
 8003818:	4699      	mov	r9, r3
 800381a:	4623      	mov	r3, r4
 800381c:	eb18 0303 	adds.w	r3, r8, r3
 8003820:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003824:	462b      	mov	r3, r5
 8003826:	eb49 0303 	adc.w	r3, r9, r3
 800382a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800382e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800383a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800383e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003842:	460b      	mov	r3, r1
 8003844:	18db      	adds	r3, r3, r3
 8003846:	653b      	str	r3, [r7, #80]	; 0x50
 8003848:	4613      	mov	r3, r2
 800384a:	eb42 0303 	adc.w	r3, r2, r3
 800384e:	657b      	str	r3, [r7, #84]	; 0x54
 8003850:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003854:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003858:	f7fc fcd4 	bl	8000204 <__aeabi_uldivmod>
 800385c:	4602      	mov	r2, r0
 800385e:	460b      	mov	r3, r1
 8003860:	4b61      	ldr	r3, [pc, #388]	; (80039e8 <UART_SetConfig+0x2d4>)
 8003862:	fba3 2302 	umull	r2, r3, r3, r2
 8003866:	095b      	lsrs	r3, r3, #5
 8003868:	011c      	lsls	r4, r3, #4
 800386a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800386e:	2200      	movs	r2, #0
 8003870:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003874:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003878:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800387c:	4642      	mov	r2, r8
 800387e:	464b      	mov	r3, r9
 8003880:	1891      	adds	r1, r2, r2
 8003882:	64b9      	str	r1, [r7, #72]	; 0x48
 8003884:	415b      	adcs	r3, r3
 8003886:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003888:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800388c:	4641      	mov	r1, r8
 800388e:	eb12 0a01 	adds.w	sl, r2, r1
 8003892:	4649      	mov	r1, r9
 8003894:	eb43 0b01 	adc.w	fp, r3, r1
 8003898:	f04f 0200 	mov.w	r2, #0
 800389c:	f04f 0300 	mov.w	r3, #0
 80038a0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80038a4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80038a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80038ac:	4692      	mov	sl, r2
 80038ae:	469b      	mov	fp, r3
 80038b0:	4643      	mov	r3, r8
 80038b2:	eb1a 0303 	adds.w	r3, sl, r3
 80038b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80038ba:	464b      	mov	r3, r9
 80038bc:	eb4b 0303 	adc.w	r3, fp, r3
 80038c0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80038c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	2200      	movs	r2, #0
 80038cc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80038d0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80038d4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80038d8:	460b      	mov	r3, r1
 80038da:	18db      	adds	r3, r3, r3
 80038dc:	643b      	str	r3, [r7, #64]	; 0x40
 80038de:	4613      	mov	r3, r2
 80038e0:	eb42 0303 	adc.w	r3, r2, r3
 80038e4:	647b      	str	r3, [r7, #68]	; 0x44
 80038e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80038ea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80038ee:	f7fc fc89 	bl	8000204 <__aeabi_uldivmod>
 80038f2:	4602      	mov	r2, r0
 80038f4:	460b      	mov	r3, r1
 80038f6:	4611      	mov	r1, r2
 80038f8:	4b3b      	ldr	r3, [pc, #236]	; (80039e8 <UART_SetConfig+0x2d4>)
 80038fa:	fba3 2301 	umull	r2, r3, r3, r1
 80038fe:	095b      	lsrs	r3, r3, #5
 8003900:	2264      	movs	r2, #100	; 0x64
 8003902:	fb02 f303 	mul.w	r3, r2, r3
 8003906:	1acb      	subs	r3, r1, r3
 8003908:	00db      	lsls	r3, r3, #3
 800390a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800390e:	4b36      	ldr	r3, [pc, #216]	; (80039e8 <UART_SetConfig+0x2d4>)
 8003910:	fba3 2302 	umull	r2, r3, r3, r2
 8003914:	095b      	lsrs	r3, r3, #5
 8003916:	005b      	lsls	r3, r3, #1
 8003918:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800391c:	441c      	add	r4, r3
 800391e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003922:	2200      	movs	r2, #0
 8003924:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003928:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800392c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003930:	4642      	mov	r2, r8
 8003932:	464b      	mov	r3, r9
 8003934:	1891      	adds	r1, r2, r2
 8003936:	63b9      	str	r1, [r7, #56]	; 0x38
 8003938:	415b      	adcs	r3, r3
 800393a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800393c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003940:	4641      	mov	r1, r8
 8003942:	1851      	adds	r1, r2, r1
 8003944:	6339      	str	r1, [r7, #48]	; 0x30
 8003946:	4649      	mov	r1, r9
 8003948:	414b      	adcs	r3, r1
 800394a:	637b      	str	r3, [r7, #52]	; 0x34
 800394c:	f04f 0200 	mov.w	r2, #0
 8003950:	f04f 0300 	mov.w	r3, #0
 8003954:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003958:	4659      	mov	r1, fp
 800395a:	00cb      	lsls	r3, r1, #3
 800395c:	4651      	mov	r1, sl
 800395e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003962:	4651      	mov	r1, sl
 8003964:	00ca      	lsls	r2, r1, #3
 8003966:	4610      	mov	r0, r2
 8003968:	4619      	mov	r1, r3
 800396a:	4603      	mov	r3, r0
 800396c:	4642      	mov	r2, r8
 800396e:	189b      	adds	r3, r3, r2
 8003970:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003974:	464b      	mov	r3, r9
 8003976:	460a      	mov	r2, r1
 8003978:	eb42 0303 	adc.w	r3, r2, r3
 800397c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800398c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003990:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003994:	460b      	mov	r3, r1
 8003996:	18db      	adds	r3, r3, r3
 8003998:	62bb      	str	r3, [r7, #40]	; 0x28
 800399a:	4613      	mov	r3, r2
 800399c:	eb42 0303 	adc.w	r3, r2, r3
 80039a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80039a6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80039aa:	f7fc fc2b 	bl	8000204 <__aeabi_uldivmod>
 80039ae:	4602      	mov	r2, r0
 80039b0:	460b      	mov	r3, r1
 80039b2:	4b0d      	ldr	r3, [pc, #52]	; (80039e8 <UART_SetConfig+0x2d4>)
 80039b4:	fba3 1302 	umull	r1, r3, r3, r2
 80039b8:	095b      	lsrs	r3, r3, #5
 80039ba:	2164      	movs	r1, #100	; 0x64
 80039bc:	fb01 f303 	mul.w	r3, r1, r3
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	00db      	lsls	r3, r3, #3
 80039c4:	3332      	adds	r3, #50	; 0x32
 80039c6:	4a08      	ldr	r2, [pc, #32]	; (80039e8 <UART_SetConfig+0x2d4>)
 80039c8:	fba2 2303 	umull	r2, r3, r2, r3
 80039cc:	095b      	lsrs	r3, r3, #5
 80039ce:	f003 0207 	and.w	r2, r3, #7
 80039d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4422      	add	r2, r4
 80039da:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80039dc:	e105      	b.n	8003bea <UART_SetConfig+0x4d6>
 80039de:	bf00      	nop
 80039e0:	40011000 	.word	0x40011000
 80039e4:	40011400 	.word	0x40011400
 80039e8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80039ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039f0:	2200      	movs	r2, #0
 80039f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80039f6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80039fa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80039fe:	4642      	mov	r2, r8
 8003a00:	464b      	mov	r3, r9
 8003a02:	1891      	adds	r1, r2, r2
 8003a04:	6239      	str	r1, [r7, #32]
 8003a06:	415b      	adcs	r3, r3
 8003a08:	627b      	str	r3, [r7, #36]	; 0x24
 8003a0a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003a0e:	4641      	mov	r1, r8
 8003a10:	1854      	adds	r4, r2, r1
 8003a12:	4649      	mov	r1, r9
 8003a14:	eb43 0501 	adc.w	r5, r3, r1
 8003a18:	f04f 0200 	mov.w	r2, #0
 8003a1c:	f04f 0300 	mov.w	r3, #0
 8003a20:	00eb      	lsls	r3, r5, #3
 8003a22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a26:	00e2      	lsls	r2, r4, #3
 8003a28:	4614      	mov	r4, r2
 8003a2a:	461d      	mov	r5, r3
 8003a2c:	4643      	mov	r3, r8
 8003a2e:	18e3      	adds	r3, r4, r3
 8003a30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003a34:	464b      	mov	r3, r9
 8003a36:	eb45 0303 	adc.w	r3, r5, r3
 8003a3a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003a3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003a4a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003a4e:	f04f 0200 	mov.w	r2, #0
 8003a52:	f04f 0300 	mov.w	r3, #0
 8003a56:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003a5a:	4629      	mov	r1, r5
 8003a5c:	008b      	lsls	r3, r1, #2
 8003a5e:	4621      	mov	r1, r4
 8003a60:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a64:	4621      	mov	r1, r4
 8003a66:	008a      	lsls	r2, r1, #2
 8003a68:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003a6c:	f7fc fbca 	bl	8000204 <__aeabi_uldivmod>
 8003a70:	4602      	mov	r2, r0
 8003a72:	460b      	mov	r3, r1
 8003a74:	4b60      	ldr	r3, [pc, #384]	; (8003bf8 <UART_SetConfig+0x4e4>)
 8003a76:	fba3 2302 	umull	r2, r3, r3, r2
 8003a7a:	095b      	lsrs	r3, r3, #5
 8003a7c:	011c      	lsls	r4, r3, #4
 8003a7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a82:	2200      	movs	r2, #0
 8003a84:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003a88:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003a8c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003a90:	4642      	mov	r2, r8
 8003a92:	464b      	mov	r3, r9
 8003a94:	1891      	adds	r1, r2, r2
 8003a96:	61b9      	str	r1, [r7, #24]
 8003a98:	415b      	adcs	r3, r3
 8003a9a:	61fb      	str	r3, [r7, #28]
 8003a9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003aa0:	4641      	mov	r1, r8
 8003aa2:	1851      	adds	r1, r2, r1
 8003aa4:	6139      	str	r1, [r7, #16]
 8003aa6:	4649      	mov	r1, r9
 8003aa8:	414b      	adcs	r3, r1
 8003aaa:	617b      	str	r3, [r7, #20]
 8003aac:	f04f 0200 	mov.w	r2, #0
 8003ab0:	f04f 0300 	mov.w	r3, #0
 8003ab4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ab8:	4659      	mov	r1, fp
 8003aba:	00cb      	lsls	r3, r1, #3
 8003abc:	4651      	mov	r1, sl
 8003abe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ac2:	4651      	mov	r1, sl
 8003ac4:	00ca      	lsls	r2, r1, #3
 8003ac6:	4610      	mov	r0, r2
 8003ac8:	4619      	mov	r1, r3
 8003aca:	4603      	mov	r3, r0
 8003acc:	4642      	mov	r2, r8
 8003ace:	189b      	adds	r3, r3, r2
 8003ad0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003ad4:	464b      	mov	r3, r9
 8003ad6:	460a      	mov	r2, r1
 8003ad8:	eb42 0303 	adc.w	r3, r2, r3
 8003adc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	67bb      	str	r3, [r7, #120]	; 0x78
 8003aea:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003aec:	f04f 0200 	mov.w	r2, #0
 8003af0:	f04f 0300 	mov.w	r3, #0
 8003af4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003af8:	4649      	mov	r1, r9
 8003afa:	008b      	lsls	r3, r1, #2
 8003afc:	4641      	mov	r1, r8
 8003afe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b02:	4641      	mov	r1, r8
 8003b04:	008a      	lsls	r2, r1, #2
 8003b06:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003b0a:	f7fc fb7b 	bl	8000204 <__aeabi_uldivmod>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	460b      	mov	r3, r1
 8003b12:	4b39      	ldr	r3, [pc, #228]	; (8003bf8 <UART_SetConfig+0x4e4>)
 8003b14:	fba3 1302 	umull	r1, r3, r3, r2
 8003b18:	095b      	lsrs	r3, r3, #5
 8003b1a:	2164      	movs	r1, #100	; 0x64
 8003b1c:	fb01 f303 	mul.w	r3, r1, r3
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	011b      	lsls	r3, r3, #4
 8003b24:	3332      	adds	r3, #50	; 0x32
 8003b26:	4a34      	ldr	r2, [pc, #208]	; (8003bf8 <UART_SetConfig+0x4e4>)
 8003b28:	fba2 2303 	umull	r2, r3, r2, r3
 8003b2c:	095b      	lsrs	r3, r3, #5
 8003b2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b32:	441c      	add	r4, r3
 8003b34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b38:	2200      	movs	r2, #0
 8003b3a:	673b      	str	r3, [r7, #112]	; 0x70
 8003b3c:	677a      	str	r2, [r7, #116]	; 0x74
 8003b3e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003b42:	4642      	mov	r2, r8
 8003b44:	464b      	mov	r3, r9
 8003b46:	1891      	adds	r1, r2, r2
 8003b48:	60b9      	str	r1, [r7, #8]
 8003b4a:	415b      	adcs	r3, r3
 8003b4c:	60fb      	str	r3, [r7, #12]
 8003b4e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b52:	4641      	mov	r1, r8
 8003b54:	1851      	adds	r1, r2, r1
 8003b56:	6039      	str	r1, [r7, #0]
 8003b58:	4649      	mov	r1, r9
 8003b5a:	414b      	adcs	r3, r1
 8003b5c:	607b      	str	r3, [r7, #4]
 8003b5e:	f04f 0200 	mov.w	r2, #0
 8003b62:	f04f 0300 	mov.w	r3, #0
 8003b66:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003b6a:	4659      	mov	r1, fp
 8003b6c:	00cb      	lsls	r3, r1, #3
 8003b6e:	4651      	mov	r1, sl
 8003b70:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b74:	4651      	mov	r1, sl
 8003b76:	00ca      	lsls	r2, r1, #3
 8003b78:	4610      	mov	r0, r2
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	4642      	mov	r2, r8
 8003b80:	189b      	adds	r3, r3, r2
 8003b82:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b84:	464b      	mov	r3, r9
 8003b86:	460a      	mov	r2, r1
 8003b88:	eb42 0303 	adc.w	r3, r2, r3
 8003b8c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003b8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	663b      	str	r3, [r7, #96]	; 0x60
 8003b98:	667a      	str	r2, [r7, #100]	; 0x64
 8003b9a:	f04f 0200 	mov.w	r2, #0
 8003b9e:	f04f 0300 	mov.w	r3, #0
 8003ba2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003ba6:	4649      	mov	r1, r9
 8003ba8:	008b      	lsls	r3, r1, #2
 8003baa:	4641      	mov	r1, r8
 8003bac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003bb0:	4641      	mov	r1, r8
 8003bb2:	008a      	lsls	r2, r1, #2
 8003bb4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003bb8:	f7fc fb24 	bl	8000204 <__aeabi_uldivmod>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	460b      	mov	r3, r1
 8003bc0:	4b0d      	ldr	r3, [pc, #52]	; (8003bf8 <UART_SetConfig+0x4e4>)
 8003bc2:	fba3 1302 	umull	r1, r3, r3, r2
 8003bc6:	095b      	lsrs	r3, r3, #5
 8003bc8:	2164      	movs	r1, #100	; 0x64
 8003bca:	fb01 f303 	mul.w	r3, r1, r3
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	011b      	lsls	r3, r3, #4
 8003bd2:	3332      	adds	r3, #50	; 0x32
 8003bd4:	4a08      	ldr	r2, [pc, #32]	; (8003bf8 <UART_SetConfig+0x4e4>)
 8003bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bda:	095b      	lsrs	r3, r3, #5
 8003bdc:	f003 020f 	and.w	r2, r3, #15
 8003be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4422      	add	r2, r4
 8003be8:	609a      	str	r2, [r3, #8]
}
 8003bea:	bf00      	nop
 8003bec:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003bf6:	bf00      	nop
 8003bf8:	51eb851f 	.word	0x51eb851f

08003bfc <__libc_init_array>:
 8003bfc:	b570      	push	{r4, r5, r6, lr}
 8003bfe:	4d0d      	ldr	r5, [pc, #52]	; (8003c34 <__libc_init_array+0x38>)
 8003c00:	4c0d      	ldr	r4, [pc, #52]	; (8003c38 <__libc_init_array+0x3c>)
 8003c02:	1b64      	subs	r4, r4, r5
 8003c04:	10a4      	asrs	r4, r4, #2
 8003c06:	2600      	movs	r6, #0
 8003c08:	42a6      	cmp	r6, r4
 8003c0a:	d109      	bne.n	8003c20 <__libc_init_array+0x24>
 8003c0c:	4d0b      	ldr	r5, [pc, #44]	; (8003c3c <__libc_init_array+0x40>)
 8003c0e:	4c0c      	ldr	r4, [pc, #48]	; (8003c40 <__libc_init_array+0x44>)
 8003c10:	f000 f820 	bl	8003c54 <_init>
 8003c14:	1b64      	subs	r4, r4, r5
 8003c16:	10a4      	asrs	r4, r4, #2
 8003c18:	2600      	movs	r6, #0
 8003c1a:	42a6      	cmp	r6, r4
 8003c1c:	d105      	bne.n	8003c2a <__libc_init_array+0x2e>
 8003c1e:	bd70      	pop	{r4, r5, r6, pc}
 8003c20:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c24:	4798      	blx	r3
 8003c26:	3601      	adds	r6, #1
 8003c28:	e7ee      	b.n	8003c08 <__libc_init_array+0xc>
 8003c2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c2e:	4798      	blx	r3
 8003c30:	3601      	adds	r6, #1
 8003c32:	e7f2      	b.n	8003c1a <__libc_init_array+0x1e>
 8003c34:	08003c8c 	.word	0x08003c8c
 8003c38:	08003c8c 	.word	0x08003c8c
 8003c3c:	08003c8c 	.word	0x08003c8c
 8003c40:	08003c90 	.word	0x08003c90

08003c44 <memset>:
 8003c44:	4402      	add	r2, r0
 8003c46:	4603      	mov	r3, r0
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d100      	bne.n	8003c4e <memset+0xa>
 8003c4c:	4770      	bx	lr
 8003c4e:	f803 1b01 	strb.w	r1, [r3], #1
 8003c52:	e7f9      	b.n	8003c48 <memset+0x4>

08003c54 <_init>:
 8003c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c56:	bf00      	nop
 8003c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c5a:	bc08      	pop	{r3}
 8003c5c:	469e      	mov	lr, r3
 8003c5e:	4770      	bx	lr

08003c60 <_fini>:
 8003c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c62:	bf00      	nop
 8003c64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c66:	bc08      	pop	{r3}
 8003c68:	469e      	mov	lr, r3
 8003c6a:	4770      	bx	lr
