
ToggleSwitch_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b34  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08003cf8  08003cf8  00013cf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003da4  08003da4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003da4  08003da4  00013da4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003dac  08003dac  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003dac  08003dac  00013dac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003db0  08003db0  00013db0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003db4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a0  20000070  08003e24  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000110  08003e24  00020110  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c3a8  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ecf  00000000  00000000  0002c448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000998  00000000  00000000  0002e318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008d0  00000000  00000000  0002ecb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024734  00000000  00000000  0002f580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c012  00000000  00000000  00053cb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd09c  00000000  00000000  0005fcc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012cd62  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d6c  00000000  00000000  0012cdb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000070 	.word	0x20000070
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003ce0 	.word	0x08003ce0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000074 	.word	0x20000074
 8000200:	08003ce0 	.word	0x08003ce0

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	setbuf(stdout, NULL);
 800050c:	4b2f      	ldr	r3, [pc, #188]	; (80005cc <main+0xc4>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	689b      	ldr	r3, [r3, #8]
 8000512:	2100      	movs	r1, #0
 8000514:	4618      	mov	r0, r3
 8000516:	f002 fe85 	bl	8003224 <setbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051a:	f000 fbab 	bl	8000c74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051e:	f000 f865 	bl	80005ec <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000522:	f000 f94f 	bl	80007c4 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 8000526:	f000 f91f 	bl	8000768 <_ZL19MX_USART2_UART_Initv>
  MX_CAN2_Init();
 800052a:	f000 f8e1 	bl	80006f0 <_ZL12MX_CAN2_Initv>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  printf("1=ON\n");
 800052e:	4828      	ldr	r0, [pc, #160]	; (80005d0 <main+0xc8>)
 8000530:	f002 fe70 	bl	8003214 <puts>
	  HAL_GPIO_WritePin(GPIOA, LED1_Pin, GPIO_PIN_SET);
 8000534:	2201      	movs	r2, #1
 8000536:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800053a:	4826      	ldr	r0, [pc, #152]	; (80005d4 <main+0xcc>)
 800053c:	f001 f864 	bl	8001608 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 8000540:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000544:	f000 fc08 	bl	8000d58 <HAL_Delay>
	  printf("2=ON\n");
 8000548:	4823      	ldr	r0, [pc, #140]	; (80005d8 <main+0xd0>)
 800054a:	f002 fe63 	bl	8003214 <puts>
	  HAL_GPIO_WritePin(GPIOA, LED2_Pin, GPIO_PIN_SET);
 800054e:	2201      	movs	r2, #1
 8000550:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000554:	481f      	ldr	r0, [pc, #124]	; (80005d4 <main+0xcc>)
 8000556:	f001 f857 	bl	8001608 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 800055a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800055e:	f000 fbfb 	bl	8000d58 <HAL_Delay>
	  printf("3=ON\n");
 8000562:	481e      	ldr	r0, [pc, #120]	; (80005dc <main+0xd4>)
 8000564:	f002 fe56 	bl	8003214 <puts>
	  HAL_GPIO_WritePin(GPIOA, LED3_Pin, GPIO_PIN_SET);
 8000568:	2201      	movs	r2, #1
 800056a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800056e:	4819      	ldr	r0, [pc, #100]	; (80005d4 <main+0xcc>)
 8000570:	f001 f84a 	bl	8001608 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 8000574:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000578:	f000 fbee 	bl	8000d58 <HAL_Delay>
	  printf("1=OFF\n");
 800057c:	4818      	ldr	r0, [pc, #96]	; (80005e0 <main+0xd8>)
 800057e:	f002 fe49 	bl	8003214 <puts>
	  HAL_GPIO_WritePin(GPIOA, LED1_Pin, GPIO_PIN_RESET);
 8000582:	2200      	movs	r2, #0
 8000584:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000588:	4812      	ldr	r0, [pc, #72]	; (80005d4 <main+0xcc>)
 800058a:	f001 f83d 	bl	8001608 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 800058e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000592:	f000 fbe1 	bl	8000d58 <HAL_Delay>
	  printf("2=OFF\n");
 8000596:	4813      	ldr	r0, [pc, #76]	; (80005e4 <main+0xdc>)
 8000598:	f002 fe3c 	bl	8003214 <puts>
	  HAL_GPIO_WritePin(GPIOA, LED2_Pin, GPIO_PIN_RESET);
 800059c:	2200      	movs	r2, #0
 800059e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005a2:	480c      	ldr	r0, [pc, #48]	; (80005d4 <main+0xcc>)
 80005a4:	f001 f830 	bl	8001608 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 80005a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005ac:	f000 fbd4 	bl	8000d58 <HAL_Delay>
	  printf("3=OFF\n");
 80005b0:	480d      	ldr	r0, [pc, #52]	; (80005e8 <main+0xe0>)
 80005b2:	f002 fe2f 	bl	8003214 <puts>
	  HAL_GPIO_WritePin(GPIOA, LED3_Pin, GPIO_PIN_RESET);
 80005b6:	2200      	movs	r2, #0
 80005b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005bc:	4805      	ldr	r0, [pc, #20]	; (80005d4 <main+0xcc>)
 80005be:	f001 f823 	bl	8001608 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 80005c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005c6:	f000 fbc7 	bl	8000d58 <HAL_Delay>
	  printf("1=ON\n");
 80005ca:	e7b0      	b.n	800052e <main+0x26>
 80005cc:	2000000c 	.word	0x2000000c
 80005d0:	08003cf8 	.word	0x08003cf8
 80005d4:	40020000 	.word	0x40020000
 80005d8:	08003d00 	.word	0x08003d00
 80005dc:	08003d08 	.word	0x08003d08
 80005e0:	08003d10 	.word	0x08003d10
 80005e4:	08003d18 	.word	0x08003d18
 80005e8:	08003d20 	.word	0x08003d20

080005ec <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b094      	sub	sp, #80	; 0x50
 80005f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f2:	f107 031c 	add.w	r3, r7, #28
 80005f6:	2234      	movs	r2, #52	; 0x34
 80005f8:	2100      	movs	r1, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	f002 fd94 	bl	8003128 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000600:	f107 0308 	add.w	r3, r7, #8
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
 800060a:	609a      	str	r2, [r3, #8]
 800060c:	60da      	str	r2, [r3, #12]
 800060e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000610:	2300      	movs	r3, #0
 8000612:	607b      	str	r3, [r7, #4]
 8000614:	4b34      	ldr	r3, [pc, #208]	; (80006e8 <_Z18SystemClock_Configv+0xfc>)
 8000616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000618:	4a33      	ldr	r2, [pc, #204]	; (80006e8 <_Z18SystemClock_Configv+0xfc>)
 800061a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800061e:	6413      	str	r3, [r2, #64]	; 0x40
 8000620:	4b31      	ldr	r3, [pc, #196]	; (80006e8 <_Z18SystemClock_Configv+0xfc>)
 8000622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000624:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000628:	607b      	str	r3, [r7, #4]
 800062a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800062c:	2300      	movs	r3, #0
 800062e:	603b      	str	r3, [r7, #0]
 8000630:	4b2e      	ldr	r3, [pc, #184]	; (80006ec <_Z18SystemClock_Configv+0x100>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a2d      	ldr	r2, [pc, #180]	; (80006ec <_Z18SystemClock_Configv+0x100>)
 8000636:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800063a:	6013      	str	r3, [r2, #0]
 800063c:	4b2b      	ldr	r3, [pc, #172]	; (80006ec <_Z18SystemClock_Configv+0x100>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000644:	603b      	str	r3, [r7, #0]
 8000646:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000648:	2302      	movs	r3, #2
 800064a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800064c:	2301      	movs	r3, #1
 800064e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000650:	2310      	movs	r3, #16
 8000652:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000654:	2302      	movs	r3, #2
 8000656:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000658:	2300      	movs	r3, #0
 800065a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800065c:	2308      	movs	r3, #8
 800065e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000660:	23b4      	movs	r3, #180	; 0xb4
 8000662:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000664:	2302      	movs	r3, #2
 8000666:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000668:	2302      	movs	r3, #2
 800066a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800066c:	2302      	movs	r3, #2
 800066e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000670:	f107 031c 	add.w	r3, r7, #28
 8000674:	4618      	mov	r0, r3
 8000676:	f001 fb7b 	bl	8001d70 <HAL_RCC_OscConfig>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	bf14      	ite	ne
 8000680:	2301      	movne	r3, #1
 8000682:	2300      	moveq	r3, #0
 8000684:	b2db      	uxtb	r3, r3
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 800068a:	f000 f90b 	bl	80008a4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800068e:	f000 ffd5 	bl	800163c <HAL_PWREx_EnableOverDrive>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	bf14      	ite	ne
 8000698:	2301      	movne	r3, #1
 800069a:	2300      	moveq	r3, #0
 800069c:	b2db      	uxtb	r3, r3
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <_Z18SystemClock_Configv+0xba>
  {
    Error_Handler();
 80006a2:	f000 f8ff 	bl	80008a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a6:	230f      	movs	r3, #15
 80006a8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006aa:	2302      	movs	r3, #2
 80006ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ae:	2300      	movs	r3, #0
 80006b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006b2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006bc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006be:	f107 0308 	add.w	r3, r7, #8
 80006c2:	2105      	movs	r1, #5
 80006c4:	4618      	mov	r0, r3
 80006c6:	f001 f809 	bl	80016dc <HAL_RCC_ClockConfig>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	bf14      	ite	ne
 80006d0:	2301      	movne	r3, #1
 80006d2:	2300      	moveq	r3, #0
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <_Z18SystemClock_Configv+0xf2>
  {
    Error_Handler();
 80006da:	f000 f8e3 	bl	80008a4 <Error_Handler>
  }
}
 80006de:	bf00      	nop
 80006e0:	3750      	adds	r7, #80	; 0x50
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	40023800 	.word	0x40023800
 80006ec:	40007000 	.word	0x40007000

080006f0 <_ZL12MX_CAN2_Initv>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80006f4:	4b1a      	ldr	r3, [pc, #104]	; (8000760 <_ZL12MX_CAN2_Initv+0x70>)
 80006f6:	4a1b      	ldr	r2, [pc, #108]	; (8000764 <_ZL12MX_CAN2_Initv+0x74>)
 80006f8:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 9;
 80006fa:	4b19      	ldr	r3, [pc, #100]	; (8000760 <_ZL12MX_CAN2_Initv+0x70>)
 80006fc:	2209      	movs	r2, #9
 80006fe:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000700:	4b17      	ldr	r3, [pc, #92]	; (8000760 <_ZL12MX_CAN2_Initv+0x70>)
 8000702:	2200      	movs	r2, #0
 8000704:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_4TQ;
 8000706:	4b16      	ldr	r3, [pc, #88]	; (8000760 <_ZL12MX_CAN2_Initv+0x70>)
 8000708:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 800070c:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_4TQ;
 800070e:	4b14      	ldr	r3, [pc, #80]	; (8000760 <_ZL12MX_CAN2_Initv+0x70>)
 8000710:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000714:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_5TQ;
 8000716:	4b12      	ldr	r3, [pc, #72]	; (8000760 <_ZL12MX_CAN2_Initv+0x70>)
 8000718:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800071c:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 800071e:	4b10      	ldr	r3, [pc, #64]	; (8000760 <_ZL12MX_CAN2_Initv+0x70>)
 8000720:	2200      	movs	r2, #0
 8000722:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000724:	4b0e      	ldr	r3, [pc, #56]	; (8000760 <_ZL12MX_CAN2_Initv+0x70>)
 8000726:	2200      	movs	r2, #0
 8000728:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 800072a:	4b0d      	ldr	r3, [pc, #52]	; (8000760 <_ZL12MX_CAN2_Initv+0x70>)
 800072c:	2200      	movs	r2, #0
 800072e:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000730:	4b0b      	ldr	r3, [pc, #44]	; (8000760 <_ZL12MX_CAN2_Initv+0x70>)
 8000732:	2200      	movs	r2, #0
 8000734:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000736:	4b0a      	ldr	r3, [pc, #40]	; (8000760 <_ZL12MX_CAN2_Initv+0x70>)
 8000738:	2200      	movs	r2, #0
 800073a:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 800073c:	4b08      	ldr	r3, [pc, #32]	; (8000760 <_ZL12MX_CAN2_Initv+0x70>)
 800073e:	2200      	movs	r2, #0
 8000740:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000742:	4807      	ldr	r0, [pc, #28]	; (8000760 <_ZL12MX_CAN2_Initv+0x70>)
 8000744:	f000 fb2c 	bl	8000da0 <HAL_CAN_Init>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	bf14      	ite	ne
 800074e:	2301      	movne	r3, #1
 8000750:	2300      	moveq	r3, #0
 8000752:	b2db      	uxtb	r3, r3
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <_ZL12MX_CAN2_Initv+0x6c>
  {
    Error_Handler();
 8000758:	f000 f8a4 	bl	80008a4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 800075c:	bf00      	nop
 800075e:	bd80      	pop	{r7, pc}
 8000760:	2000008c 	.word	0x2000008c
 8000764:	40006800 	.word	0x40006800

08000768 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800076c:	4b13      	ldr	r3, [pc, #76]	; (80007bc <_ZL19MX_USART2_UART_Initv+0x54>)
 800076e:	4a14      	ldr	r2, [pc, #80]	; (80007c0 <_ZL19MX_USART2_UART_Initv+0x58>)
 8000770:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000772:	4b12      	ldr	r3, [pc, #72]	; (80007bc <_ZL19MX_USART2_UART_Initv+0x54>)
 8000774:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000778:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800077a:	4b10      	ldr	r3, [pc, #64]	; (80007bc <_ZL19MX_USART2_UART_Initv+0x54>)
 800077c:	2200      	movs	r2, #0
 800077e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000780:	4b0e      	ldr	r3, [pc, #56]	; (80007bc <_ZL19MX_USART2_UART_Initv+0x54>)
 8000782:	2200      	movs	r2, #0
 8000784:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000786:	4b0d      	ldr	r3, [pc, #52]	; (80007bc <_ZL19MX_USART2_UART_Initv+0x54>)
 8000788:	2200      	movs	r2, #0
 800078a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800078c:	4b0b      	ldr	r3, [pc, #44]	; (80007bc <_ZL19MX_USART2_UART_Initv+0x54>)
 800078e:	220c      	movs	r2, #12
 8000790:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000792:	4b0a      	ldr	r3, [pc, #40]	; (80007bc <_ZL19MX_USART2_UART_Initv+0x54>)
 8000794:	2200      	movs	r2, #0
 8000796:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000798:	4b08      	ldr	r3, [pc, #32]	; (80007bc <_ZL19MX_USART2_UART_Initv+0x54>)
 800079a:	2200      	movs	r2, #0
 800079c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800079e:	4807      	ldr	r0, [pc, #28]	; (80007bc <_ZL19MX_USART2_UART_Initv+0x54>)
 80007a0:	f001 fd84 	bl	80022ac <HAL_UART_Init>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	bf14      	ite	ne
 80007aa:	2301      	movne	r3, #1
 80007ac:	2300      	moveq	r3, #0
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 80007b4:	f000 f876 	bl	80008a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007b8:	bf00      	nop
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	200000b4 	.word	0x200000b4
 80007c0:	40004400 	.word	0x40004400

080007c4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b08a      	sub	sp, #40	; 0x28
 80007c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ca:	f107 0314 	add.w	r3, r7, #20
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	605a      	str	r2, [r3, #4]
 80007d4:	609a      	str	r2, [r3, #8]
 80007d6:	60da      	str	r2, [r3, #12]
 80007d8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	613b      	str	r3, [r7, #16]
 80007de:	4b2e      	ldr	r3, [pc, #184]	; (8000898 <_ZL12MX_GPIO_Initv+0xd4>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4a2d      	ldr	r2, [pc, #180]	; (8000898 <_ZL12MX_GPIO_Initv+0xd4>)
 80007e4:	f043 0304 	orr.w	r3, r3, #4
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ea:	4b2b      	ldr	r3, [pc, #172]	; (8000898 <_ZL12MX_GPIO_Initv+0xd4>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	f003 0304 	and.w	r3, r3, #4
 80007f2:	613b      	str	r3, [r7, #16]
 80007f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	60fb      	str	r3, [r7, #12]
 80007fa:	4b27      	ldr	r3, [pc, #156]	; (8000898 <_ZL12MX_GPIO_Initv+0xd4>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	4a26      	ldr	r2, [pc, #152]	; (8000898 <_ZL12MX_GPIO_Initv+0xd4>)
 8000800:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000804:	6313      	str	r3, [r2, #48]	; 0x30
 8000806:	4b24      	ldr	r3, [pc, #144]	; (8000898 <_ZL12MX_GPIO_Initv+0xd4>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800080e:	60fb      	str	r3, [r7, #12]
 8000810:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	60bb      	str	r3, [r7, #8]
 8000816:	4b20      	ldr	r3, [pc, #128]	; (8000898 <_ZL12MX_GPIO_Initv+0xd4>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	4a1f      	ldr	r2, [pc, #124]	; (8000898 <_ZL12MX_GPIO_Initv+0xd4>)
 800081c:	f043 0301 	orr.w	r3, r3, #1
 8000820:	6313      	str	r3, [r2, #48]	; 0x30
 8000822:	4b1d      	ldr	r3, [pc, #116]	; (8000898 <_ZL12MX_GPIO_Initv+0xd4>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	f003 0301 	and.w	r3, r3, #1
 800082a:	60bb      	str	r3, [r7, #8]
 800082c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	607b      	str	r3, [r7, #4]
 8000832:	4b19      	ldr	r3, [pc, #100]	; (8000898 <_ZL12MX_GPIO_Initv+0xd4>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	4a18      	ldr	r2, [pc, #96]	; (8000898 <_ZL12MX_GPIO_Initv+0xd4>)
 8000838:	f043 0302 	orr.w	r3, r3, #2
 800083c:	6313      	str	r3, [r2, #48]	; 0x30
 800083e:	4b16      	ldr	r3, [pc, #88]	; (8000898 <_ZL12MX_GPIO_Initv+0xd4>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	f003 0302 	and.w	r3, r3, #2
 8000846:	607b      	str	r3, [r7, #4]
 8000848:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 800084a:	2200      	movs	r2, #0
 800084c:	f24e 0120 	movw	r1, #57376	; 0xe020
 8000850:	4812      	ldr	r0, [pc, #72]	; (800089c <_ZL12MX_GPIO_Initv+0xd8>)
 8000852:	f000 fed9 	bl	8001608 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000856:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800085a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800085c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000860:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000862:	2300      	movs	r3, #0
 8000864:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000866:	f107 0314 	add.w	r3, r7, #20
 800086a:	4619      	mov	r1, r3
 800086c:	480c      	ldr	r0, [pc, #48]	; (80008a0 <_ZL12MX_GPIO_Initv+0xdc>)
 800086e:	f000 fd37 	bl	80012e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LED1_Pin|LED2_Pin|LED3_Pin;
 8000872:	f24e 0320 	movw	r3, #57376	; 0xe020
 8000876:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000878:	2301      	movs	r3, #1
 800087a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000880:	2300      	movs	r3, #0
 8000882:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000884:	f107 0314 	add.w	r3, r7, #20
 8000888:	4619      	mov	r1, r3
 800088a:	4804      	ldr	r0, [pc, #16]	; (800089c <_ZL12MX_GPIO_Initv+0xd8>)
 800088c:	f000 fd28 	bl	80012e0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000890:	bf00      	nop
 8000892:	3728      	adds	r7, #40	; 0x28
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	40023800 	.word	0x40023800
 800089c:	40020000 	.word	0x40020000
 80008a0:	40020800 	.word	0x40020800

080008a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a8:	b672      	cpsid	i
}
 80008aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008ac:	e7fe      	b.n	80008ac <Error_Handler+0x8>
	...

080008b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	607b      	str	r3, [r7, #4]
 80008ba:	4b10      	ldr	r3, [pc, #64]	; (80008fc <HAL_MspInit+0x4c>)
 80008bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008be:	4a0f      	ldr	r2, [pc, #60]	; (80008fc <HAL_MspInit+0x4c>)
 80008c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008c4:	6453      	str	r3, [r2, #68]	; 0x44
 80008c6:	4b0d      	ldr	r3, [pc, #52]	; (80008fc <HAL_MspInit+0x4c>)
 80008c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	603b      	str	r3, [r7, #0]
 80008d6:	4b09      	ldr	r3, [pc, #36]	; (80008fc <HAL_MspInit+0x4c>)
 80008d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008da:	4a08      	ldr	r2, [pc, #32]	; (80008fc <HAL_MspInit+0x4c>)
 80008dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008e0:	6413      	str	r3, [r2, #64]	; 0x40
 80008e2:	4b06      	ldr	r3, [pc, #24]	; (80008fc <HAL_MspInit+0x4c>)
 80008e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ea:	603b      	str	r3, [r7, #0]
 80008ec:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80008ee:	2007      	movs	r0, #7
 80008f0:	f000 fc22 	bl	8001138 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008f4:	bf00      	nop
 80008f6:	3708      	adds	r7, #8
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	40023800 	.word	0x40023800

08000900 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b08a      	sub	sp, #40	; 0x28
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000908:	f107 0314 	add.w	r3, r7, #20
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
 8000910:	605a      	str	r2, [r3, #4]
 8000912:	609a      	str	r2, [r3, #8]
 8000914:	60da      	str	r2, [r3, #12]
 8000916:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN2)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a20      	ldr	r2, [pc, #128]	; (80009a0 <HAL_CAN_MspInit+0xa0>)
 800091e:	4293      	cmp	r3, r2
 8000920:	d139      	bne.n	8000996 <HAL_CAN_MspInit+0x96>
  {
  /* USER CODE BEGIN CAN2_MspInit 0 */

  /* USER CODE END CAN2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	613b      	str	r3, [r7, #16]
 8000926:	4b1f      	ldr	r3, [pc, #124]	; (80009a4 <HAL_CAN_MspInit+0xa4>)
 8000928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092a:	4a1e      	ldr	r2, [pc, #120]	; (80009a4 <HAL_CAN_MspInit+0xa4>)
 800092c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000930:	6413      	str	r3, [r2, #64]	; 0x40
 8000932:	4b1c      	ldr	r3, [pc, #112]	; (80009a4 <HAL_CAN_MspInit+0xa4>)
 8000934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000936:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800093a:	613b      	str	r3, [r7, #16]
 800093c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_CAN1_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	60fb      	str	r3, [r7, #12]
 8000942:	4b18      	ldr	r3, [pc, #96]	; (80009a4 <HAL_CAN_MspInit+0xa4>)
 8000944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000946:	4a17      	ldr	r2, [pc, #92]	; (80009a4 <HAL_CAN_MspInit+0xa4>)
 8000948:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800094c:	6413      	str	r3, [r2, #64]	; 0x40
 800094e:	4b15      	ldr	r3, [pc, #84]	; (80009a4 <HAL_CAN_MspInit+0xa4>)
 8000950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000952:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	60bb      	str	r3, [r7, #8]
 800095e:	4b11      	ldr	r3, [pc, #68]	; (80009a4 <HAL_CAN_MspInit+0xa4>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	4a10      	ldr	r2, [pc, #64]	; (80009a4 <HAL_CAN_MspInit+0xa4>)
 8000964:	f043 0302 	orr.w	r3, r3, #2
 8000968:	6313      	str	r3, [r2, #48]	; 0x30
 800096a:	4b0e      	ldr	r3, [pc, #56]	; (80009a4 <HAL_CAN_MspInit+0xa4>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	f003 0302 	and.w	r3, r3, #2
 8000972:	60bb      	str	r3, [r7, #8]
 8000974:	68bb      	ldr	r3, [r7, #8]
    /**CAN2 GPIO Configuration
    PB5     ------> CAN2_RX
    PB6     ------> CAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000976:	2360      	movs	r3, #96	; 0x60
 8000978:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097a:	2302      	movs	r3, #2
 800097c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000982:	2303      	movs	r3, #3
 8000984:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000986:	2309      	movs	r3, #9
 8000988:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800098a:	f107 0314 	add.w	r3, r7, #20
 800098e:	4619      	mov	r1, r3
 8000990:	4805      	ldr	r0, [pc, #20]	; (80009a8 <HAL_CAN_MspInit+0xa8>)
 8000992:	f000 fca5 	bl	80012e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8000996:	bf00      	nop
 8000998:	3728      	adds	r7, #40	; 0x28
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40006800 	.word	0x40006800
 80009a4:	40023800 	.word	0x40023800
 80009a8:	40020400 	.word	0x40020400

080009ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b08a      	sub	sp, #40	; 0x28
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b4:	f107 0314 	add.w	r3, r7, #20
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
 80009bc:	605a      	str	r2, [r3, #4]
 80009be:	609a      	str	r2, [r3, #8]
 80009c0:	60da      	str	r2, [r3, #12]
 80009c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a1d      	ldr	r2, [pc, #116]	; (8000a40 <HAL_UART_MspInit+0x94>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d133      	bne.n	8000a36 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	613b      	str	r3, [r7, #16]
 80009d2:	4b1c      	ldr	r3, [pc, #112]	; (8000a44 <HAL_UART_MspInit+0x98>)
 80009d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d6:	4a1b      	ldr	r2, [pc, #108]	; (8000a44 <HAL_UART_MspInit+0x98>)
 80009d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009dc:	6413      	str	r3, [r2, #64]	; 0x40
 80009de:	4b19      	ldr	r3, [pc, #100]	; (8000a44 <HAL_UART_MspInit+0x98>)
 80009e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009e6:	613b      	str	r3, [r7, #16]
 80009e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	60fb      	str	r3, [r7, #12]
 80009ee:	4b15      	ldr	r3, [pc, #84]	; (8000a44 <HAL_UART_MspInit+0x98>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	4a14      	ldr	r2, [pc, #80]	; (8000a44 <HAL_UART_MspInit+0x98>)
 80009f4:	f043 0301 	orr.w	r3, r3, #1
 80009f8:	6313      	str	r3, [r2, #48]	; 0x30
 80009fa:	4b12      	ldr	r3, [pc, #72]	; (8000a44 <HAL_UART_MspInit+0x98>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	f003 0301 	and.w	r3, r3, #1
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a06:	230c      	movs	r3, #12
 8000a08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a12:	2303      	movs	r3, #3
 8000a14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a16:	2307      	movs	r3, #7
 8000a18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a1a:	f107 0314 	add.w	r3, r7, #20
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4809      	ldr	r0, [pc, #36]	; (8000a48 <HAL_UART_MspInit+0x9c>)
 8000a22:	f000 fc5d 	bl	80012e0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000a26:	2200      	movs	r2, #0
 8000a28:	2100      	movs	r1, #0
 8000a2a:	2026      	movs	r0, #38	; 0x26
 8000a2c:	f000 fb8f 	bl	800114e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a30:	2026      	movs	r0, #38	; 0x26
 8000a32:	f000 fba8 	bl	8001186 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a36:	bf00      	nop
 8000a38:	3728      	adds	r7, #40	; 0x28
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40004400 	.word	0x40004400
 8000a44:	40023800 	.word	0x40023800
 8000a48:	40020000 	.word	0x40020000

08000a4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a50:	e7fe      	b.n	8000a50 <NMI_Handler+0x4>

08000a52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a52:	b480      	push	{r7}
 8000a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a56:	e7fe      	b.n	8000a56 <HardFault_Handler+0x4>

08000a58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a5c:	e7fe      	b.n	8000a5c <MemManage_Handler+0x4>

08000a5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a5e:	b480      	push	{r7}
 8000a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a62:	e7fe      	b.n	8000a62 <BusFault_Handler+0x4>

08000a64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a68:	e7fe      	b.n	8000a68 <UsageFault_Handler+0x4>

08000a6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a6e:	bf00      	nop
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr

08000a78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a7c:	bf00      	nop
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr

08000a86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a86:	b480      	push	{r7}
 8000a88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a8a:	bf00      	nop
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr

08000a94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a98:	f000 f93e 	bl	8000d18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a9c:	bf00      	nop
 8000a9e:	bd80      	pop	{r7, pc}

08000aa0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000aa4:	4802      	ldr	r0, [pc, #8]	; (8000ab0 <USART2_IRQHandler+0x10>)
 8000aa6:	f001 fc4f 	bl	8002348 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	200000b4 	.word	0x200000b4

08000ab4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b086      	sub	sp, #24
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	60f8      	str	r0, [r7, #12]
 8000abc:	60b9      	str	r1, [r7, #8]
 8000abe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	617b      	str	r3, [r7, #20]
 8000ac4:	e00a      	b.n	8000adc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ac6:	f3af 8000 	nop.w
 8000aca:	4601      	mov	r1, r0
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	1c5a      	adds	r2, r3, #1
 8000ad0:	60ba      	str	r2, [r7, #8]
 8000ad2:	b2ca      	uxtb	r2, r1
 8000ad4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ad6:	697b      	ldr	r3, [r7, #20]
 8000ad8:	3301      	adds	r3, #1
 8000ada:	617b      	str	r3, [r7, #20]
 8000adc:	697a      	ldr	r2, [r7, #20]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	429a      	cmp	r2, r3
 8000ae2:	dbf0      	blt.n	8000ac6 <_read+0x12>
  }

  return len;
 8000ae4:	687b      	ldr	r3, [r7, #4]
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3718      	adds	r7, #24
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}

08000aee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000aee:	b580      	push	{r7, lr}
 8000af0:	b086      	sub	sp, #24
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	60f8      	str	r0, [r7, #12]
 8000af6:	60b9      	str	r1, [r7, #8]
 8000af8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000afa:	2300      	movs	r3, #0
 8000afc:	617b      	str	r3, [r7, #20]
 8000afe:	e009      	b.n	8000b14 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b00:	68bb      	ldr	r3, [r7, #8]
 8000b02:	1c5a      	adds	r2, r3, #1
 8000b04:	60ba      	str	r2, [r7, #8]
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b0e:	697b      	ldr	r3, [r7, #20]
 8000b10:	3301      	adds	r3, #1
 8000b12:	617b      	str	r3, [r7, #20]
 8000b14:	697a      	ldr	r2, [r7, #20]
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	429a      	cmp	r2, r3
 8000b1a:	dbf1      	blt.n	8000b00 <_write+0x12>
  }
  return len;
 8000b1c:	687b      	ldr	r3, [r7, #4]
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3718      	adds	r7, #24
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}

08000b26 <_close>:

int _close(int file)
{
 8000b26:	b480      	push	{r7}
 8000b28:	b083      	sub	sp, #12
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	370c      	adds	r7, #12
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr

08000b3e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	b083      	sub	sp, #12
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	6078      	str	r0, [r7, #4]
 8000b46:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b4e:	605a      	str	r2, [r3, #4]
  return 0;
 8000b50:	2300      	movs	r3, #0
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	370c      	adds	r7, #12
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr

08000b5e <_isatty>:

int _isatty(int file)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	b083      	sub	sp, #12
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b66:	2301      	movs	r3, #1
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	370c      	adds	r7, #12
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr

08000b74 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b085      	sub	sp, #20
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	60f8      	str	r0, [r7, #12]
 8000b7c:	60b9      	str	r1, [r7, #8]
 8000b7e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b80:	2300      	movs	r3, #0
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	3714      	adds	r7, #20
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
	...

08000b90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b086      	sub	sp, #24
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b98:	4a14      	ldr	r2, [pc, #80]	; (8000bec <_sbrk+0x5c>)
 8000b9a:	4b15      	ldr	r3, [pc, #84]	; (8000bf0 <_sbrk+0x60>)
 8000b9c:	1ad3      	subs	r3, r2, r3
 8000b9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ba4:	4b13      	ldr	r3, [pc, #76]	; (8000bf4 <_sbrk+0x64>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d102      	bne.n	8000bb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bac:	4b11      	ldr	r3, [pc, #68]	; (8000bf4 <_sbrk+0x64>)
 8000bae:	4a12      	ldr	r2, [pc, #72]	; (8000bf8 <_sbrk+0x68>)
 8000bb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bb2:	4b10      	ldr	r3, [pc, #64]	; (8000bf4 <_sbrk+0x64>)
 8000bb4:	681a      	ldr	r2, [r3, #0]
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	4413      	add	r3, r2
 8000bba:	693a      	ldr	r2, [r7, #16]
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	d207      	bcs.n	8000bd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bc0:	f002 fa88 	bl	80030d4 <__errno>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	220c      	movs	r2, #12
 8000bc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000bce:	e009      	b.n	8000be4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bd0:	4b08      	ldr	r3, [pc, #32]	; (8000bf4 <_sbrk+0x64>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bd6:	4b07      	ldr	r3, [pc, #28]	; (8000bf4 <_sbrk+0x64>)
 8000bd8:	681a      	ldr	r2, [r3, #0]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	4413      	add	r3, r2
 8000bde:	4a05      	ldr	r2, [pc, #20]	; (8000bf4 <_sbrk+0x64>)
 8000be0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000be2:	68fb      	ldr	r3, [r7, #12]
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	3718      	adds	r7, #24
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	20020000 	.word	0x20020000
 8000bf0:	00000400 	.word	0x00000400
 8000bf4:	200000f8 	.word	0x200000f8
 8000bf8:	20000110 	.word	0x20000110

08000bfc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c00:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <SystemInit+0x20>)
 8000c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c06:	4a05      	ldr	r2, [pc, #20]	; (8000c1c <SystemInit+0x20>)
 8000c08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c10:	bf00      	nop
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	e000ed00 	.word	0xe000ed00

08000c20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c58 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c24:	480d      	ldr	r0, [pc, #52]	; (8000c5c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c26:	490e      	ldr	r1, [pc, #56]	; (8000c60 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c28:	4a0e      	ldr	r2, [pc, #56]	; (8000c64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c2c:	e002      	b.n	8000c34 <LoopCopyDataInit>

08000c2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c32:	3304      	adds	r3, #4

08000c34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c38:	d3f9      	bcc.n	8000c2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c3a:	4a0b      	ldr	r2, [pc, #44]	; (8000c68 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c3c:	4c0b      	ldr	r4, [pc, #44]	; (8000c6c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c40:	e001      	b.n	8000c46 <LoopFillZerobss>

08000c42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c44:	3204      	adds	r2, #4

08000c46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c48:	d3fb      	bcc.n	8000c42 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c4a:	f7ff ffd7 	bl	8000bfc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c4e:	f002 fa47 	bl	80030e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c52:	f7ff fc59 	bl	8000508 <main>
  bx  lr    
 8000c56:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c58:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c60:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000c64:	08003db4 	.word	0x08003db4
  ldr r2, =_sbss
 8000c68:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000c6c:	20000110 	.word	0x20000110

08000c70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c70:	e7fe      	b.n	8000c70 <ADC_IRQHandler>
	...

08000c74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c78:	4b0e      	ldr	r3, [pc, #56]	; (8000cb4 <HAL_Init+0x40>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a0d      	ldr	r2, [pc, #52]	; (8000cb4 <HAL_Init+0x40>)
 8000c7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c84:	4b0b      	ldr	r3, [pc, #44]	; (8000cb4 <HAL_Init+0x40>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a0a      	ldr	r2, [pc, #40]	; (8000cb4 <HAL_Init+0x40>)
 8000c8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c90:	4b08      	ldr	r3, [pc, #32]	; (8000cb4 <HAL_Init+0x40>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a07      	ldr	r2, [pc, #28]	; (8000cb4 <HAL_Init+0x40>)
 8000c96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c9c:	2003      	movs	r0, #3
 8000c9e:	f000 fa4b 	bl	8001138 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ca2:	2000      	movs	r0, #0
 8000ca4:	f000 f808 	bl	8000cb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ca8:	f7ff fe02 	bl	80008b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cac:	2300      	movs	r3, #0
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	40023c00 	.word	0x40023c00

08000cb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cc0:	4b12      	ldr	r3, [pc, #72]	; (8000d0c <HAL_InitTick+0x54>)
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	4b12      	ldr	r3, [pc, #72]	; (8000d10 <HAL_InitTick+0x58>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	4619      	mov	r1, r3
 8000cca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cce:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f000 fa63 	bl	80011a2 <HAL_SYSTICK_Config>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	e00e      	b.n	8000d04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	2b0f      	cmp	r3, #15
 8000cea:	d80a      	bhi.n	8000d02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cec:	2200      	movs	r2, #0
 8000cee:	6879      	ldr	r1, [r7, #4]
 8000cf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000cf4:	f000 fa2b 	bl	800114e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cf8:	4a06      	ldr	r2, [pc, #24]	; (8000d14 <HAL_InitTick+0x5c>)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	e000      	b.n	8000d04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d02:	2301      	movs	r3, #1
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	3708      	adds	r7, #8
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	20000000 	.word	0x20000000
 8000d10:	20000008 	.word	0x20000008
 8000d14:	20000004 	.word	0x20000004

08000d18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d1c:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <HAL_IncTick+0x20>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	461a      	mov	r2, r3
 8000d22:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <HAL_IncTick+0x24>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4413      	add	r3, r2
 8000d28:	4a04      	ldr	r2, [pc, #16]	; (8000d3c <HAL_IncTick+0x24>)
 8000d2a:	6013      	str	r3, [r2, #0]
}
 8000d2c:	bf00      	nop
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	20000008 	.word	0x20000008
 8000d3c:	200000fc 	.word	0x200000fc

08000d40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  return uwTick;
 8000d44:	4b03      	ldr	r3, [pc, #12]	; (8000d54 <HAL_GetTick+0x14>)
 8000d46:	681b      	ldr	r3, [r3, #0]
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	200000fc 	.word	0x200000fc

08000d58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d60:	f7ff ffee 	bl	8000d40 <HAL_GetTick>
 8000d64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000d70:	d005      	beq.n	8000d7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d72:	4b0a      	ldr	r3, [pc, #40]	; (8000d9c <HAL_Delay+0x44>)
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	461a      	mov	r2, r3
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	4413      	add	r3, r2
 8000d7c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d7e:	bf00      	nop
 8000d80:	f7ff ffde 	bl	8000d40 <HAL_GetTick>
 8000d84:	4602      	mov	r2, r0
 8000d86:	68bb      	ldr	r3, [r7, #8]
 8000d88:	1ad3      	subs	r3, r2, r3
 8000d8a:	68fa      	ldr	r2, [r7, #12]
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	d8f7      	bhi.n	8000d80 <HAL_Delay+0x28>
  {
  }
}
 8000d90:	bf00      	nop
 8000d92:	bf00      	nop
 8000d94:	3710      	adds	r7, #16
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	20000008 	.word	0x20000008

08000da0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d101      	bne.n	8000db2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000dae:	2301      	movs	r3, #1
 8000db0:	e0ed      	b.n	8000f8e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d102      	bne.n	8000dc4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000dbe:	6878      	ldr	r0, [r7, #4]
 8000dc0:	f7ff fd9e 	bl	8000900 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	681a      	ldr	r2, [r3, #0]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f042 0201 	orr.w	r2, r2, #1
 8000dd2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000dd4:	f7ff ffb4 	bl	8000d40 <HAL_GetTick>
 8000dd8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000dda:	e012      	b.n	8000e02 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ddc:	f7ff ffb0 	bl	8000d40 <HAL_GetTick>
 8000de0:	4602      	mov	r2, r0
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	1ad3      	subs	r3, r2, r3
 8000de6:	2b0a      	cmp	r3, #10
 8000de8:	d90b      	bls.n	8000e02 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dee:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	2205      	movs	r2, #5
 8000dfa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	e0c5      	b.n	8000f8e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	f003 0301 	and.w	r3, r3, #1
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d0e5      	beq.n	8000ddc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f022 0202 	bic.w	r2, r2, #2
 8000e1e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e20:	f7ff ff8e 	bl	8000d40 <HAL_GetTick>
 8000e24:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000e26:	e012      	b.n	8000e4e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e28:	f7ff ff8a 	bl	8000d40 <HAL_GetTick>
 8000e2c:	4602      	mov	r2, r0
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	1ad3      	subs	r3, r2, r3
 8000e32:	2b0a      	cmp	r3, #10
 8000e34:	d90b      	bls.n	8000e4e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e3a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2205      	movs	r2, #5
 8000e46:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e09f      	b.n	8000f8e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	f003 0302 	and.w	r3, r3, #2
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d1e5      	bne.n	8000e28 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	7e1b      	ldrb	r3, [r3, #24]
 8000e60:	2b01      	cmp	r3, #1
 8000e62:	d108      	bne.n	8000e76 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	e007      	b.n	8000e86 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e84:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	7e5b      	ldrb	r3, [r3, #25]
 8000e8a:	2b01      	cmp	r3, #1
 8000e8c:	d108      	bne.n	8000ea0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000e9c:	601a      	str	r2, [r3, #0]
 8000e9e:	e007      	b.n	8000eb0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000eae:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	7e9b      	ldrb	r3, [r3, #26]
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d108      	bne.n	8000eca <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f042 0220 	orr.w	r2, r2, #32
 8000ec6:	601a      	str	r2, [r3, #0]
 8000ec8:	e007      	b.n	8000eda <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f022 0220 	bic.w	r2, r2, #32
 8000ed8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	7edb      	ldrb	r3, [r3, #27]
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	d108      	bne.n	8000ef4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f022 0210 	bic.w	r2, r2, #16
 8000ef0:	601a      	str	r2, [r3, #0]
 8000ef2:	e007      	b.n	8000f04 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f042 0210 	orr.w	r2, r2, #16
 8000f02:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	7f1b      	ldrb	r3, [r3, #28]
 8000f08:	2b01      	cmp	r3, #1
 8000f0a:	d108      	bne.n	8000f1e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f042 0208 	orr.w	r2, r2, #8
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	e007      	b.n	8000f2e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f022 0208 	bic.w	r2, r2, #8
 8000f2c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	7f5b      	ldrb	r3, [r3, #29]
 8000f32:	2b01      	cmp	r3, #1
 8000f34:	d108      	bne.n	8000f48 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f042 0204 	orr.w	r2, r2, #4
 8000f44:	601a      	str	r2, [r3, #0]
 8000f46:	e007      	b.n	8000f58 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f022 0204 	bic.w	r2, r2, #4
 8000f56:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	689a      	ldr	r2, [r3, #8]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	431a      	orrs	r2, r3
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	691b      	ldr	r3, [r3, #16]
 8000f66:	431a      	orrs	r2, r3
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	695b      	ldr	r3, [r3, #20]
 8000f6c:	ea42 0103 	orr.w	r1, r2, r3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	1e5a      	subs	r2, r3, #1
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	430a      	orrs	r2, r1
 8000f7c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2200      	movs	r2, #0
 8000f82:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2201      	movs	r2, #1
 8000f88:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000f8c:	2300      	movs	r3, #0
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3710      	adds	r7, #16
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
	...

08000f98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b085      	sub	sp, #20
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	f003 0307 	and.w	r3, r3, #7
 8000fa6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fa8:	4b0c      	ldr	r3, [pc, #48]	; (8000fdc <__NVIC_SetPriorityGrouping+0x44>)
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fae:	68ba      	ldr	r2, [r7, #8]
 8000fb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fca:	4a04      	ldr	r2, [pc, #16]	; (8000fdc <__NVIC_SetPriorityGrouping+0x44>)
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	60d3      	str	r3, [r2, #12]
}
 8000fd0:	bf00      	nop
 8000fd2:	3714      	adds	r7, #20
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr
 8000fdc:	e000ed00 	.word	0xe000ed00

08000fe0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fe4:	4b04      	ldr	r3, [pc, #16]	; (8000ff8 <__NVIC_GetPriorityGrouping+0x18>)
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	0a1b      	lsrs	r3, r3, #8
 8000fea:	f003 0307 	and.w	r3, r3, #7
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr
 8000ff8:	e000ed00 	.word	0xe000ed00

08000ffc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100a:	2b00      	cmp	r3, #0
 800100c:	db0b      	blt.n	8001026 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800100e:	79fb      	ldrb	r3, [r7, #7]
 8001010:	f003 021f 	and.w	r2, r3, #31
 8001014:	4907      	ldr	r1, [pc, #28]	; (8001034 <__NVIC_EnableIRQ+0x38>)
 8001016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101a:	095b      	lsrs	r3, r3, #5
 800101c:	2001      	movs	r0, #1
 800101e:	fa00 f202 	lsl.w	r2, r0, r2
 8001022:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001026:	bf00      	nop
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	e000e100 	.word	0xe000e100

08001038 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	6039      	str	r1, [r7, #0]
 8001042:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001044:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001048:	2b00      	cmp	r3, #0
 800104a:	db0a      	blt.n	8001062 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	b2da      	uxtb	r2, r3
 8001050:	490c      	ldr	r1, [pc, #48]	; (8001084 <__NVIC_SetPriority+0x4c>)
 8001052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001056:	0112      	lsls	r2, r2, #4
 8001058:	b2d2      	uxtb	r2, r2
 800105a:	440b      	add	r3, r1
 800105c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001060:	e00a      	b.n	8001078 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	b2da      	uxtb	r2, r3
 8001066:	4908      	ldr	r1, [pc, #32]	; (8001088 <__NVIC_SetPriority+0x50>)
 8001068:	79fb      	ldrb	r3, [r7, #7]
 800106a:	f003 030f 	and.w	r3, r3, #15
 800106e:	3b04      	subs	r3, #4
 8001070:	0112      	lsls	r2, r2, #4
 8001072:	b2d2      	uxtb	r2, r2
 8001074:	440b      	add	r3, r1
 8001076:	761a      	strb	r2, [r3, #24]
}
 8001078:	bf00      	nop
 800107a:	370c      	adds	r7, #12
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr
 8001084:	e000e100 	.word	0xe000e100
 8001088:	e000ed00 	.word	0xe000ed00

0800108c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800108c:	b480      	push	{r7}
 800108e:	b089      	sub	sp, #36	; 0x24
 8001090:	af00      	add	r7, sp, #0
 8001092:	60f8      	str	r0, [r7, #12]
 8001094:	60b9      	str	r1, [r7, #8]
 8001096:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	f003 0307 	and.w	r3, r3, #7
 800109e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	f1c3 0307 	rsb	r3, r3, #7
 80010a6:	2b04      	cmp	r3, #4
 80010a8:	bf28      	it	cs
 80010aa:	2304      	movcs	r3, #4
 80010ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	3304      	adds	r3, #4
 80010b2:	2b06      	cmp	r3, #6
 80010b4:	d902      	bls.n	80010bc <NVIC_EncodePriority+0x30>
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	3b03      	subs	r3, #3
 80010ba:	e000      	b.n	80010be <NVIC_EncodePriority+0x32>
 80010bc:	2300      	movs	r3, #0
 80010be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010c4:	69bb      	ldr	r3, [r7, #24]
 80010c6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ca:	43da      	mvns	r2, r3
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	401a      	ands	r2, r3
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	fa01 f303 	lsl.w	r3, r1, r3
 80010de:	43d9      	mvns	r1, r3
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e4:	4313      	orrs	r3, r2
         );
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3724      	adds	r7, #36	; 0x24
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
	...

080010f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	3b01      	subs	r3, #1
 8001100:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001104:	d301      	bcc.n	800110a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001106:	2301      	movs	r3, #1
 8001108:	e00f      	b.n	800112a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800110a:	4a0a      	ldr	r2, [pc, #40]	; (8001134 <SysTick_Config+0x40>)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	3b01      	subs	r3, #1
 8001110:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001112:	210f      	movs	r1, #15
 8001114:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001118:	f7ff ff8e 	bl	8001038 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800111c:	4b05      	ldr	r3, [pc, #20]	; (8001134 <SysTick_Config+0x40>)
 800111e:	2200      	movs	r2, #0
 8001120:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001122:	4b04      	ldr	r3, [pc, #16]	; (8001134 <SysTick_Config+0x40>)
 8001124:	2207      	movs	r2, #7
 8001126:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001128:	2300      	movs	r3, #0
}
 800112a:	4618      	mov	r0, r3
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	e000e010 	.word	0xe000e010

08001138 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	f7ff ff29 	bl	8000f98 <__NVIC_SetPriorityGrouping>
}
 8001146:	bf00      	nop
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}

0800114e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800114e:	b580      	push	{r7, lr}
 8001150:	b086      	sub	sp, #24
 8001152:	af00      	add	r7, sp, #0
 8001154:	4603      	mov	r3, r0
 8001156:	60b9      	str	r1, [r7, #8]
 8001158:	607a      	str	r2, [r7, #4]
 800115a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800115c:	2300      	movs	r3, #0
 800115e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001160:	f7ff ff3e 	bl	8000fe0 <__NVIC_GetPriorityGrouping>
 8001164:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001166:	687a      	ldr	r2, [r7, #4]
 8001168:	68b9      	ldr	r1, [r7, #8]
 800116a:	6978      	ldr	r0, [r7, #20]
 800116c:	f7ff ff8e 	bl	800108c <NVIC_EncodePriority>
 8001170:	4602      	mov	r2, r0
 8001172:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001176:	4611      	mov	r1, r2
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff ff5d 	bl	8001038 <__NVIC_SetPriority>
}
 800117e:	bf00      	nop
 8001180:	3718      	adds	r7, #24
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}

08001186 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001186:	b580      	push	{r7, lr}
 8001188:	b082      	sub	sp, #8
 800118a:	af00      	add	r7, sp, #0
 800118c:	4603      	mov	r3, r0
 800118e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001190:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff ff31 	bl	8000ffc <__NVIC_EnableIRQ>
}
 800119a:	bf00      	nop
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b082      	sub	sp, #8
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	f7ff ffa2 	bl	80010f4 <SysTick_Config>
 80011b0:	4603      	mov	r3, r0
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}

080011ba <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b084      	sub	sp, #16
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011c6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80011c8:	f7ff fdba 	bl	8000d40 <HAL_GetTick>
 80011cc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	2b02      	cmp	r3, #2
 80011d8:	d008      	beq.n	80011ec <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2280      	movs	r2, #128	; 0x80
 80011de:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2200      	movs	r2, #0
 80011e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80011e8:	2301      	movs	r3, #1
 80011ea:	e052      	b.n	8001292 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f022 0216 	bic.w	r2, r2, #22
 80011fa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	695a      	ldr	r2, [r3, #20]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800120a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001210:	2b00      	cmp	r3, #0
 8001212:	d103      	bne.n	800121c <HAL_DMA_Abort+0x62>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001218:	2b00      	cmp	r3, #0
 800121a:	d007      	beq.n	800122c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f022 0208 	bic.w	r2, r2, #8
 800122a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f022 0201 	bic.w	r2, r2, #1
 800123a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800123c:	e013      	b.n	8001266 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800123e:	f7ff fd7f 	bl	8000d40 <HAL_GetTick>
 8001242:	4602      	mov	r2, r0
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	1ad3      	subs	r3, r2, r3
 8001248:	2b05      	cmp	r3, #5
 800124a:	d90c      	bls.n	8001266 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2220      	movs	r2, #32
 8001250:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2203      	movs	r2, #3
 8001256:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2200      	movs	r2, #0
 800125e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001262:	2303      	movs	r3, #3
 8001264:	e015      	b.n	8001292 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f003 0301 	and.w	r3, r3, #1
 8001270:	2b00      	cmp	r3, #0
 8001272:	d1e4      	bne.n	800123e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001278:	223f      	movs	r2, #63	; 0x3f
 800127a:	409a      	lsls	r2, r3
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2201      	movs	r2, #1
 8001284:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2200      	movs	r2, #0
 800128c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001290:	2300      	movs	r3, #0
}
 8001292:	4618      	mov	r0, r3
 8001294:	3710      	adds	r7, #16
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800129a:	b480      	push	{r7}
 800129c:	b083      	sub	sp, #12
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	2b02      	cmp	r3, #2
 80012ac:	d004      	beq.n	80012b8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2280      	movs	r2, #128	; 0x80
 80012b2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80012b4:	2301      	movs	r3, #1
 80012b6:	e00c      	b.n	80012d2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2205      	movs	r2, #5
 80012bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f022 0201 	bic.w	r2, r2, #1
 80012ce:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80012d0:	2300      	movs	r3, #0
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	370c      	adds	r7, #12
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
	...

080012e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b089      	sub	sp, #36	; 0x24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012ea:	2300      	movs	r3, #0
 80012ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012ee:	2300      	movs	r3, #0
 80012f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012f2:	2300      	movs	r3, #0
 80012f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012f6:	2300      	movs	r3, #0
 80012f8:	61fb      	str	r3, [r7, #28]
 80012fa:	e165      	b.n	80015c8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012fc:	2201      	movs	r2, #1
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	fa02 f303 	lsl.w	r3, r2, r3
 8001304:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	697a      	ldr	r2, [r7, #20]
 800130c:	4013      	ands	r3, r2
 800130e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001310:	693a      	ldr	r2, [r7, #16]
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	429a      	cmp	r2, r3
 8001316:	f040 8154 	bne.w	80015c2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	f003 0303 	and.w	r3, r3, #3
 8001322:	2b01      	cmp	r3, #1
 8001324:	d005      	beq.n	8001332 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800132e:	2b02      	cmp	r3, #2
 8001330:	d130      	bne.n	8001394 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	005b      	lsls	r3, r3, #1
 800133c:	2203      	movs	r2, #3
 800133e:	fa02 f303 	lsl.w	r3, r2, r3
 8001342:	43db      	mvns	r3, r3
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	4013      	ands	r3, r2
 8001348:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	68da      	ldr	r2, [r3, #12]
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	005b      	lsls	r3, r3, #1
 8001352:	fa02 f303 	lsl.w	r3, r2, r3
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	4313      	orrs	r3, r2
 800135a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	69ba      	ldr	r2, [r7, #24]
 8001360:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001368:	2201      	movs	r2, #1
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	fa02 f303 	lsl.w	r3, r2, r3
 8001370:	43db      	mvns	r3, r3
 8001372:	69ba      	ldr	r2, [r7, #24]
 8001374:	4013      	ands	r3, r2
 8001376:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	091b      	lsrs	r3, r3, #4
 800137e:	f003 0201 	and.w	r2, r3, #1
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	4313      	orrs	r3, r2
 800138c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	69ba      	ldr	r2, [r7, #24]
 8001392:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f003 0303 	and.w	r3, r3, #3
 800139c:	2b03      	cmp	r3, #3
 800139e:	d017      	beq.n	80013d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	005b      	lsls	r3, r3, #1
 80013aa:	2203      	movs	r2, #3
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	43db      	mvns	r3, r3
 80013b2:	69ba      	ldr	r2, [r7, #24]
 80013b4:	4013      	ands	r3, r2
 80013b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	689a      	ldr	r2, [r3, #8]
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	4313      	orrs	r3, r2
 80013c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f003 0303 	and.w	r3, r3, #3
 80013d8:	2b02      	cmp	r3, #2
 80013da:	d123      	bne.n	8001424 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	08da      	lsrs	r2, r3, #3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	3208      	adds	r2, #8
 80013e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	f003 0307 	and.w	r3, r3, #7
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	220f      	movs	r2, #15
 80013f4:	fa02 f303 	lsl.w	r3, r2, r3
 80013f8:	43db      	mvns	r3, r3
 80013fa:	69ba      	ldr	r2, [r7, #24]
 80013fc:	4013      	ands	r3, r2
 80013fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	691a      	ldr	r2, [r3, #16]
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	f003 0307 	and.w	r3, r3, #7
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	fa02 f303 	lsl.w	r3, r2, r3
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	4313      	orrs	r3, r2
 8001414:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	08da      	lsrs	r2, r3, #3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	3208      	adds	r2, #8
 800141e:	69b9      	ldr	r1, [r7, #24]
 8001420:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	2203      	movs	r2, #3
 8001430:	fa02 f303 	lsl.w	r3, r2, r3
 8001434:	43db      	mvns	r3, r3
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	4013      	ands	r3, r2
 800143a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f003 0203 	and.w	r2, r3, #3
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	fa02 f303 	lsl.w	r3, r2, r3
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	4313      	orrs	r3, r2
 8001450:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001460:	2b00      	cmp	r3, #0
 8001462:	f000 80ae 	beq.w	80015c2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	60fb      	str	r3, [r7, #12]
 800146a:	4b5d      	ldr	r3, [pc, #372]	; (80015e0 <HAL_GPIO_Init+0x300>)
 800146c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146e:	4a5c      	ldr	r2, [pc, #368]	; (80015e0 <HAL_GPIO_Init+0x300>)
 8001470:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001474:	6453      	str	r3, [r2, #68]	; 0x44
 8001476:	4b5a      	ldr	r3, [pc, #360]	; (80015e0 <HAL_GPIO_Init+0x300>)
 8001478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800147a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001482:	4a58      	ldr	r2, [pc, #352]	; (80015e4 <HAL_GPIO_Init+0x304>)
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	089b      	lsrs	r3, r3, #2
 8001488:	3302      	adds	r3, #2
 800148a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800148e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	f003 0303 	and.w	r3, r3, #3
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	220f      	movs	r2, #15
 800149a:	fa02 f303 	lsl.w	r3, r2, r3
 800149e:	43db      	mvns	r3, r3
 80014a0:	69ba      	ldr	r2, [r7, #24]
 80014a2:	4013      	ands	r3, r2
 80014a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4a4f      	ldr	r2, [pc, #316]	; (80015e8 <HAL_GPIO_Init+0x308>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d025      	beq.n	80014fa <HAL_GPIO_Init+0x21a>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4a4e      	ldr	r2, [pc, #312]	; (80015ec <HAL_GPIO_Init+0x30c>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d01f      	beq.n	80014f6 <HAL_GPIO_Init+0x216>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4a4d      	ldr	r2, [pc, #308]	; (80015f0 <HAL_GPIO_Init+0x310>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d019      	beq.n	80014f2 <HAL_GPIO_Init+0x212>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4a4c      	ldr	r2, [pc, #304]	; (80015f4 <HAL_GPIO_Init+0x314>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d013      	beq.n	80014ee <HAL_GPIO_Init+0x20e>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4a4b      	ldr	r2, [pc, #300]	; (80015f8 <HAL_GPIO_Init+0x318>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d00d      	beq.n	80014ea <HAL_GPIO_Init+0x20a>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4a4a      	ldr	r2, [pc, #296]	; (80015fc <HAL_GPIO_Init+0x31c>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d007      	beq.n	80014e6 <HAL_GPIO_Init+0x206>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4a49      	ldr	r2, [pc, #292]	; (8001600 <HAL_GPIO_Init+0x320>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d101      	bne.n	80014e2 <HAL_GPIO_Init+0x202>
 80014de:	2306      	movs	r3, #6
 80014e0:	e00c      	b.n	80014fc <HAL_GPIO_Init+0x21c>
 80014e2:	2307      	movs	r3, #7
 80014e4:	e00a      	b.n	80014fc <HAL_GPIO_Init+0x21c>
 80014e6:	2305      	movs	r3, #5
 80014e8:	e008      	b.n	80014fc <HAL_GPIO_Init+0x21c>
 80014ea:	2304      	movs	r3, #4
 80014ec:	e006      	b.n	80014fc <HAL_GPIO_Init+0x21c>
 80014ee:	2303      	movs	r3, #3
 80014f0:	e004      	b.n	80014fc <HAL_GPIO_Init+0x21c>
 80014f2:	2302      	movs	r3, #2
 80014f4:	e002      	b.n	80014fc <HAL_GPIO_Init+0x21c>
 80014f6:	2301      	movs	r3, #1
 80014f8:	e000      	b.n	80014fc <HAL_GPIO_Init+0x21c>
 80014fa:	2300      	movs	r3, #0
 80014fc:	69fa      	ldr	r2, [r7, #28]
 80014fe:	f002 0203 	and.w	r2, r2, #3
 8001502:	0092      	lsls	r2, r2, #2
 8001504:	4093      	lsls	r3, r2
 8001506:	69ba      	ldr	r2, [r7, #24]
 8001508:	4313      	orrs	r3, r2
 800150a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800150c:	4935      	ldr	r1, [pc, #212]	; (80015e4 <HAL_GPIO_Init+0x304>)
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	089b      	lsrs	r3, r3, #2
 8001512:	3302      	adds	r3, #2
 8001514:	69ba      	ldr	r2, [r7, #24]
 8001516:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800151a:	4b3a      	ldr	r3, [pc, #232]	; (8001604 <HAL_GPIO_Init+0x324>)
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	43db      	mvns	r3, r3
 8001524:	69ba      	ldr	r2, [r7, #24]
 8001526:	4013      	ands	r3, r2
 8001528:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001532:	2b00      	cmp	r3, #0
 8001534:	d003      	beq.n	800153e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001536:	69ba      	ldr	r2, [r7, #24]
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	4313      	orrs	r3, r2
 800153c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800153e:	4a31      	ldr	r2, [pc, #196]	; (8001604 <HAL_GPIO_Init+0x324>)
 8001540:	69bb      	ldr	r3, [r7, #24]
 8001542:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001544:	4b2f      	ldr	r3, [pc, #188]	; (8001604 <HAL_GPIO_Init+0x324>)
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	43db      	mvns	r3, r3
 800154e:	69ba      	ldr	r2, [r7, #24]
 8001550:	4013      	ands	r3, r2
 8001552:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800155c:	2b00      	cmp	r3, #0
 800155e:	d003      	beq.n	8001568 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	4313      	orrs	r3, r2
 8001566:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001568:	4a26      	ldr	r2, [pc, #152]	; (8001604 <HAL_GPIO_Init+0x324>)
 800156a:	69bb      	ldr	r3, [r7, #24]
 800156c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800156e:	4b25      	ldr	r3, [pc, #148]	; (8001604 <HAL_GPIO_Init+0x324>)
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	43db      	mvns	r3, r3
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	4013      	ands	r3, r2
 800157c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001586:	2b00      	cmp	r3, #0
 8001588:	d003      	beq.n	8001592 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800158a:	69ba      	ldr	r2, [r7, #24]
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	4313      	orrs	r3, r2
 8001590:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001592:	4a1c      	ldr	r2, [pc, #112]	; (8001604 <HAL_GPIO_Init+0x324>)
 8001594:	69bb      	ldr	r3, [r7, #24]
 8001596:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001598:	4b1a      	ldr	r3, [pc, #104]	; (8001604 <HAL_GPIO_Init+0x324>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	43db      	mvns	r3, r3
 80015a2:	69ba      	ldr	r2, [r7, #24]
 80015a4:	4013      	ands	r3, r2
 80015a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d003      	beq.n	80015bc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80015b4:	69ba      	ldr	r2, [r7, #24]
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015bc:	4a11      	ldr	r2, [pc, #68]	; (8001604 <HAL_GPIO_Init+0x324>)
 80015be:	69bb      	ldr	r3, [r7, #24]
 80015c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	3301      	adds	r3, #1
 80015c6:	61fb      	str	r3, [r7, #28]
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	2b0f      	cmp	r3, #15
 80015cc:	f67f ae96 	bls.w	80012fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015d0:	bf00      	nop
 80015d2:	bf00      	nop
 80015d4:	3724      	adds	r7, #36	; 0x24
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	40023800 	.word	0x40023800
 80015e4:	40013800 	.word	0x40013800
 80015e8:	40020000 	.word	0x40020000
 80015ec:	40020400 	.word	0x40020400
 80015f0:	40020800 	.word	0x40020800
 80015f4:	40020c00 	.word	0x40020c00
 80015f8:	40021000 	.word	0x40021000
 80015fc:	40021400 	.word	0x40021400
 8001600:	40021800 	.word	0x40021800
 8001604:	40013c00 	.word	0x40013c00

08001608 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	460b      	mov	r3, r1
 8001612:	807b      	strh	r3, [r7, #2]
 8001614:	4613      	mov	r3, r2
 8001616:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001618:	787b      	ldrb	r3, [r7, #1]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d003      	beq.n	8001626 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800161e:	887a      	ldrh	r2, [r7, #2]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001624:	e003      	b.n	800162e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001626:	887b      	ldrh	r3, [r7, #2]
 8001628:	041a      	lsls	r2, r3, #16
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	619a      	str	r2, [r3, #24]
}
 800162e:	bf00      	nop
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
	...

0800163c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001642:	2300      	movs	r3, #0
 8001644:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001646:	2300      	movs	r3, #0
 8001648:	603b      	str	r3, [r7, #0]
 800164a:	4b20      	ldr	r3, [pc, #128]	; (80016cc <HAL_PWREx_EnableOverDrive+0x90>)
 800164c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164e:	4a1f      	ldr	r2, [pc, #124]	; (80016cc <HAL_PWREx_EnableOverDrive+0x90>)
 8001650:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001654:	6413      	str	r3, [r2, #64]	; 0x40
 8001656:	4b1d      	ldr	r3, [pc, #116]	; (80016cc <HAL_PWREx_EnableOverDrive+0x90>)
 8001658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800165e:	603b      	str	r3, [r7, #0]
 8001660:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001662:	4b1b      	ldr	r3, [pc, #108]	; (80016d0 <HAL_PWREx_EnableOverDrive+0x94>)
 8001664:	2201      	movs	r2, #1
 8001666:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001668:	f7ff fb6a 	bl	8000d40 <HAL_GetTick>
 800166c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800166e:	e009      	b.n	8001684 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001670:	f7ff fb66 	bl	8000d40 <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800167e:	d901      	bls.n	8001684 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001680:	2303      	movs	r3, #3
 8001682:	e01f      	b.n	80016c4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001684:	4b13      	ldr	r3, [pc, #76]	; (80016d4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800168c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001690:	d1ee      	bne.n	8001670 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001692:	4b11      	ldr	r3, [pc, #68]	; (80016d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001694:	2201      	movs	r2, #1
 8001696:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001698:	f7ff fb52 	bl	8000d40 <HAL_GetTick>
 800169c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800169e:	e009      	b.n	80016b4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80016a0:	f7ff fb4e 	bl	8000d40 <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80016ae:	d901      	bls.n	80016b4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80016b0:	2303      	movs	r3, #3
 80016b2:	e007      	b.n	80016c4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80016b4:	4b07      	ldr	r3, [pc, #28]	; (80016d4 <HAL_PWREx_EnableOverDrive+0x98>)
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80016c0:	d1ee      	bne.n	80016a0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80016c2:	2300      	movs	r3, #0
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3708      	adds	r7, #8
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	40023800 	.word	0x40023800
 80016d0:	420e0040 	.word	0x420e0040
 80016d4:	40007000 	.word	0x40007000
 80016d8:	420e0044 	.word	0x420e0044

080016dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d101      	bne.n	80016f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	e0cc      	b.n	800188a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016f0:	4b68      	ldr	r3, [pc, #416]	; (8001894 <HAL_RCC_ClockConfig+0x1b8>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 030f 	and.w	r3, r3, #15
 80016f8:	683a      	ldr	r2, [r7, #0]
 80016fa:	429a      	cmp	r2, r3
 80016fc:	d90c      	bls.n	8001718 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016fe:	4b65      	ldr	r3, [pc, #404]	; (8001894 <HAL_RCC_ClockConfig+0x1b8>)
 8001700:	683a      	ldr	r2, [r7, #0]
 8001702:	b2d2      	uxtb	r2, r2
 8001704:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001706:	4b63      	ldr	r3, [pc, #396]	; (8001894 <HAL_RCC_ClockConfig+0x1b8>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 030f 	and.w	r3, r3, #15
 800170e:	683a      	ldr	r2, [r7, #0]
 8001710:	429a      	cmp	r2, r3
 8001712:	d001      	beq.n	8001718 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	e0b8      	b.n	800188a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f003 0302 	and.w	r3, r3, #2
 8001720:	2b00      	cmp	r3, #0
 8001722:	d020      	beq.n	8001766 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 0304 	and.w	r3, r3, #4
 800172c:	2b00      	cmp	r3, #0
 800172e:	d005      	beq.n	800173c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001730:	4b59      	ldr	r3, [pc, #356]	; (8001898 <HAL_RCC_ClockConfig+0x1bc>)
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	4a58      	ldr	r2, [pc, #352]	; (8001898 <HAL_RCC_ClockConfig+0x1bc>)
 8001736:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800173a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 0308 	and.w	r3, r3, #8
 8001744:	2b00      	cmp	r3, #0
 8001746:	d005      	beq.n	8001754 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001748:	4b53      	ldr	r3, [pc, #332]	; (8001898 <HAL_RCC_ClockConfig+0x1bc>)
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	4a52      	ldr	r2, [pc, #328]	; (8001898 <HAL_RCC_ClockConfig+0x1bc>)
 800174e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001752:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001754:	4b50      	ldr	r3, [pc, #320]	; (8001898 <HAL_RCC_ClockConfig+0x1bc>)
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	494d      	ldr	r1, [pc, #308]	; (8001898 <HAL_RCC_ClockConfig+0x1bc>)
 8001762:	4313      	orrs	r3, r2
 8001764:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 0301 	and.w	r3, r3, #1
 800176e:	2b00      	cmp	r3, #0
 8001770:	d044      	beq.n	80017fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	2b01      	cmp	r3, #1
 8001778:	d107      	bne.n	800178a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800177a:	4b47      	ldr	r3, [pc, #284]	; (8001898 <HAL_RCC_ClockConfig+0x1bc>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d119      	bne.n	80017ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e07f      	b.n	800188a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	2b02      	cmp	r3, #2
 8001790:	d003      	beq.n	800179a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001796:	2b03      	cmp	r3, #3
 8001798:	d107      	bne.n	80017aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800179a:	4b3f      	ldr	r3, [pc, #252]	; (8001898 <HAL_RCC_ClockConfig+0x1bc>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d109      	bne.n	80017ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e06f      	b.n	800188a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017aa:	4b3b      	ldr	r3, [pc, #236]	; (8001898 <HAL_RCC_ClockConfig+0x1bc>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 0302 	and.w	r3, r3, #2
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d101      	bne.n	80017ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e067      	b.n	800188a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017ba:	4b37      	ldr	r3, [pc, #220]	; (8001898 <HAL_RCC_ClockConfig+0x1bc>)
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	f023 0203 	bic.w	r2, r3, #3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	4934      	ldr	r1, [pc, #208]	; (8001898 <HAL_RCC_ClockConfig+0x1bc>)
 80017c8:	4313      	orrs	r3, r2
 80017ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017cc:	f7ff fab8 	bl	8000d40 <HAL_GetTick>
 80017d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017d2:	e00a      	b.n	80017ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017d4:	f7ff fab4 	bl	8000d40 <HAL_GetTick>
 80017d8:	4602      	mov	r2, r0
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	f241 3288 	movw	r2, #5000	; 0x1388
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d901      	bls.n	80017ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e04f      	b.n	800188a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ea:	4b2b      	ldr	r3, [pc, #172]	; (8001898 <HAL_RCC_ClockConfig+0x1bc>)
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	f003 020c 	and.w	r2, r3, #12
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d1eb      	bne.n	80017d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017fc:	4b25      	ldr	r3, [pc, #148]	; (8001894 <HAL_RCC_ClockConfig+0x1b8>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 030f 	and.w	r3, r3, #15
 8001804:	683a      	ldr	r2, [r7, #0]
 8001806:	429a      	cmp	r2, r3
 8001808:	d20c      	bcs.n	8001824 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800180a:	4b22      	ldr	r3, [pc, #136]	; (8001894 <HAL_RCC_ClockConfig+0x1b8>)
 800180c:	683a      	ldr	r2, [r7, #0]
 800180e:	b2d2      	uxtb	r2, r2
 8001810:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001812:	4b20      	ldr	r3, [pc, #128]	; (8001894 <HAL_RCC_ClockConfig+0x1b8>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 030f 	and.w	r3, r3, #15
 800181a:	683a      	ldr	r2, [r7, #0]
 800181c:	429a      	cmp	r2, r3
 800181e:	d001      	beq.n	8001824 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	e032      	b.n	800188a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 0304 	and.w	r3, r3, #4
 800182c:	2b00      	cmp	r3, #0
 800182e:	d008      	beq.n	8001842 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001830:	4b19      	ldr	r3, [pc, #100]	; (8001898 <HAL_RCC_ClockConfig+0x1bc>)
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	4916      	ldr	r1, [pc, #88]	; (8001898 <HAL_RCC_ClockConfig+0x1bc>)
 800183e:	4313      	orrs	r3, r2
 8001840:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 0308 	and.w	r3, r3, #8
 800184a:	2b00      	cmp	r3, #0
 800184c:	d009      	beq.n	8001862 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800184e:	4b12      	ldr	r3, [pc, #72]	; (8001898 <HAL_RCC_ClockConfig+0x1bc>)
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	691b      	ldr	r3, [r3, #16]
 800185a:	00db      	lsls	r3, r3, #3
 800185c:	490e      	ldr	r1, [pc, #56]	; (8001898 <HAL_RCC_ClockConfig+0x1bc>)
 800185e:	4313      	orrs	r3, r2
 8001860:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001862:	f000 f855 	bl	8001910 <HAL_RCC_GetSysClockFreq>
 8001866:	4602      	mov	r2, r0
 8001868:	4b0b      	ldr	r3, [pc, #44]	; (8001898 <HAL_RCC_ClockConfig+0x1bc>)
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	091b      	lsrs	r3, r3, #4
 800186e:	f003 030f 	and.w	r3, r3, #15
 8001872:	490a      	ldr	r1, [pc, #40]	; (800189c <HAL_RCC_ClockConfig+0x1c0>)
 8001874:	5ccb      	ldrb	r3, [r1, r3]
 8001876:	fa22 f303 	lsr.w	r3, r2, r3
 800187a:	4a09      	ldr	r2, [pc, #36]	; (80018a0 <HAL_RCC_ClockConfig+0x1c4>)
 800187c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800187e:	4b09      	ldr	r3, [pc, #36]	; (80018a4 <HAL_RCC_ClockConfig+0x1c8>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4618      	mov	r0, r3
 8001884:	f7ff fa18 	bl	8000cb8 <HAL_InitTick>

  return HAL_OK;
 8001888:	2300      	movs	r3, #0
}
 800188a:	4618      	mov	r0, r3
 800188c:	3710      	adds	r7, #16
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	40023c00 	.word	0x40023c00
 8001898:	40023800 	.word	0x40023800
 800189c:	08003d28 	.word	0x08003d28
 80018a0:	20000000 	.word	0x20000000
 80018a4:	20000004 	.word	0x20000004

080018a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018ac:	4b03      	ldr	r3, [pc, #12]	; (80018bc <HAL_RCC_GetHCLKFreq+0x14>)
 80018ae:	681b      	ldr	r3, [r3, #0]
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	20000000 	.word	0x20000000

080018c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80018c4:	f7ff fff0 	bl	80018a8 <HAL_RCC_GetHCLKFreq>
 80018c8:	4602      	mov	r2, r0
 80018ca:	4b05      	ldr	r3, [pc, #20]	; (80018e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	0a9b      	lsrs	r3, r3, #10
 80018d0:	f003 0307 	and.w	r3, r3, #7
 80018d4:	4903      	ldr	r1, [pc, #12]	; (80018e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80018d6:	5ccb      	ldrb	r3, [r1, r3]
 80018d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018dc:	4618      	mov	r0, r3
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	40023800 	.word	0x40023800
 80018e4:	08003d38 	.word	0x08003d38

080018e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80018ec:	f7ff ffdc 	bl	80018a8 <HAL_RCC_GetHCLKFreq>
 80018f0:	4602      	mov	r2, r0
 80018f2:	4b05      	ldr	r3, [pc, #20]	; (8001908 <HAL_RCC_GetPCLK2Freq+0x20>)
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	0b5b      	lsrs	r3, r3, #13
 80018f8:	f003 0307 	and.w	r3, r3, #7
 80018fc:	4903      	ldr	r1, [pc, #12]	; (800190c <HAL_RCC_GetPCLK2Freq+0x24>)
 80018fe:	5ccb      	ldrb	r3, [r1, r3]
 8001900:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001904:	4618      	mov	r0, r3
 8001906:	bd80      	pop	{r7, pc}
 8001908:	40023800 	.word	0x40023800
 800190c:	08003d38 	.word	0x08003d38

08001910 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001910:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001914:	b0ae      	sub	sp, #184	; 0xb8
 8001916:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001918:	2300      	movs	r3, #0
 800191a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800191e:	2300      	movs	r3, #0
 8001920:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001924:	2300      	movs	r3, #0
 8001926:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800192a:	2300      	movs	r3, #0
 800192c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001930:	2300      	movs	r3, #0
 8001932:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001936:	4bcb      	ldr	r3, [pc, #812]	; (8001c64 <HAL_RCC_GetSysClockFreq+0x354>)
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	f003 030c 	and.w	r3, r3, #12
 800193e:	2b0c      	cmp	r3, #12
 8001940:	f200 8206 	bhi.w	8001d50 <HAL_RCC_GetSysClockFreq+0x440>
 8001944:	a201      	add	r2, pc, #4	; (adr r2, 800194c <HAL_RCC_GetSysClockFreq+0x3c>)
 8001946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800194a:	bf00      	nop
 800194c:	08001981 	.word	0x08001981
 8001950:	08001d51 	.word	0x08001d51
 8001954:	08001d51 	.word	0x08001d51
 8001958:	08001d51 	.word	0x08001d51
 800195c:	08001989 	.word	0x08001989
 8001960:	08001d51 	.word	0x08001d51
 8001964:	08001d51 	.word	0x08001d51
 8001968:	08001d51 	.word	0x08001d51
 800196c:	08001991 	.word	0x08001991
 8001970:	08001d51 	.word	0x08001d51
 8001974:	08001d51 	.word	0x08001d51
 8001978:	08001d51 	.word	0x08001d51
 800197c:	08001b81 	.word	0x08001b81
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001980:	4bb9      	ldr	r3, [pc, #740]	; (8001c68 <HAL_RCC_GetSysClockFreq+0x358>)
 8001982:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001986:	e1e7      	b.n	8001d58 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001988:	4bb8      	ldr	r3, [pc, #736]	; (8001c6c <HAL_RCC_GetSysClockFreq+0x35c>)
 800198a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800198e:	e1e3      	b.n	8001d58 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001990:	4bb4      	ldr	r3, [pc, #720]	; (8001c64 <HAL_RCC_GetSysClockFreq+0x354>)
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001998:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800199c:	4bb1      	ldr	r3, [pc, #708]	; (8001c64 <HAL_RCC_GetSysClockFreq+0x354>)
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d071      	beq.n	8001a8c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019a8:	4bae      	ldr	r3, [pc, #696]	; (8001c64 <HAL_RCC_GetSysClockFreq+0x354>)
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	099b      	lsrs	r3, r3, #6
 80019ae:	2200      	movs	r2, #0
 80019b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80019b4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80019b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80019bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019c0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80019c4:	2300      	movs	r3, #0
 80019c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80019ca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80019ce:	4622      	mov	r2, r4
 80019d0:	462b      	mov	r3, r5
 80019d2:	f04f 0000 	mov.w	r0, #0
 80019d6:	f04f 0100 	mov.w	r1, #0
 80019da:	0159      	lsls	r1, r3, #5
 80019dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019e0:	0150      	lsls	r0, r2, #5
 80019e2:	4602      	mov	r2, r0
 80019e4:	460b      	mov	r3, r1
 80019e6:	4621      	mov	r1, r4
 80019e8:	1a51      	subs	r1, r2, r1
 80019ea:	6439      	str	r1, [r7, #64]	; 0x40
 80019ec:	4629      	mov	r1, r5
 80019ee:	eb63 0301 	sbc.w	r3, r3, r1
 80019f2:	647b      	str	r3, [r7, #68]	; 0x44
 80019f4:	f04f 0200 	mov.w	r2, #0
 80019f8:	f04f 0300 	mov.w	r3, #0
 80019fc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001a00:	4649      	mov	r1, r9
 8001a02:	018b      	lsls	r3, r1, #6
 8001a04:	4641      	mov	r1, r8
 8001a06:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a0a:	4641      	mov	r1, r8
 8001a0c:	018a      	lsls	r2, r1, #6
 8001a0e:	4641      	mov	r1, r8
 8001a10:	1a51      	subs	r1, r2, r1
 8001a12:	63b9      	str	r1, [r7, #56]	; 0x38
 8001a14:	4649      	mov	r1, r9
 8001a16:	eb63 0301 	sbc.w	r3, r3, r1
 8001a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a1c:	f04f 0200 	mov.w	r2, #0
 8001a20:	f04f 0300 	mov.w	r3, #0
 8001a24:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001a28:	4649      	mov	r1, r9
 8001a2a:	00cb      	lsls	r3, r1, #3
 8001a2c:	4641      	mov	r1, r8
 8001a2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001a32:	4641      	mov	r1, r8
 8001a34:	00ca      	lsls	r2, r1, #3
 8001a36:	4610      	mov	r0, r2
 8001a38:	4619      	mov	r1, r3
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	4622      	mov	r2, r4
 8001a3e:	189b      	adds	r3, r3, r2
 8001a40:	633b      	str	r3, [r7, #48]	; 0x30
 8001a42:	462b      	mov	r3, r5
 8001a44:	460a      	mov	r2, r1
 8001a46:	eb42 0303 	adc.w	r3, r2, r3
 8001a4a:	637b      	str	r3, [r7, #52]	; 0x34
 8001a4c:	f04f 0200 	mov.w	r2, #0
 8001a50:	f04f 0300 	mov.w	r3, #0
 8001a54:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001a58:	4629      	mov	r1, r5
 8001a5a:	024b      	lsls	r3, r1, #9
 8001a5c:	4621      	mov	r1, r4
 8001a5e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a62:	4621      	mov	r1, r4
 8001a64:	024a      	lsls	r2, r1, #9
 8001a66:	4610      	mov	r0, r2
 8001a68:	4619      	mov	r1, r3
 8001a6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001a6e:	2200      	movs	r2, #0
 8001a70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001a74:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001a78:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001a7c:	f7fe fbc2 	bl	8000204 <__aeabi_uldivmod>
 8001a80:	4602      	mov	r2, r0
 8001a82:	460b      	mov	r3, r1
 8001a84:	4613      	mov	r3, r2
 8001a86:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001a8a:	e067      	b.n	8001b5c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a8c:	4b75      	ldr	r3, [pc, #468]	; (8001c64 <HAL_RCC_GetSysClockFreq+0x354>)
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	099b      	lsrs	r3, r3, #6
 8001a92:	2200      	movs	r2, #0
 8001a94:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001a98:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001a9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001aa0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001aa4:	67bb      	str	r3, [r7, #120]	; 0x78
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001aaa:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001aae:	4622      	mov	r2, r4
 8001ab0:	462b      	mov	r3, r5
 8001ab2:	f04f 0000 	mov.w	r0, #0
 8001ab6:	f04f 0100 	mov.w	r1, #0
 8001aba:	0159      	lsls	r1, r3, #5
 8001abc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ac0:	0150      	lsls	r0, r2, #5
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	4621      	mov	r1, r4
 8001ac8:	1a51      	subs	r1, r2, r1
 8001aca:	62b9      	str	r1, [r7, #40]	; 0x28
 8001acc:	4629      	mov	r1, r5
 8001ace:	eb63 0301 	sbc.w	r3, r3, r1
 8001ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ad4:	f04f 0200 	mov.w	r2, #0
 8001ad8:	f04f 0300 	mov.w	r3, #0
 8001adc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001ae0:	4649      	mov	r1, r9
 8001ae2:	018b      	lsls	r3, r1, #6
 8001ae4:	4641      	mov	r1, r8
 8001ae6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001aea:	4641      	mov	r1, r8
 8001aec:	018a      	lsls	r2, r1, #6
 8001aee:	4641      	mov	r1, r8
 8001af0:	ebb2 0a01 	subs.w	sl, r2, r1
 8001af4:	4649      	mov	r1, r9
 8001af6:	eb63 0b01 	sbc.w	fp, r3, r1
 8001afa:	f04f 0200 	mov.w	r2, #0
 8001afe:	f04f 0300 	mov.w	r3, #0
 8001b02:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001b06:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001b0a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001b0e:	4692      	mov	sl, r2
 8001b10:	469b      	mov	fp, r3
 8001b12:	4623      	mov	r3, r4
 8001b14:	eb1a 0303 	adds.w	r3, sl, r3
 8001b18:	623b      	str	r3, [r7, #32]
 8001b1a:	462b      	mov	r3, r5
 8001b1c:	eb4b 0303 	adc.w	r3, fp, r3
 8001b20:	627b      	str	r3, [r7, #36]	; 0x24
 8001b22:	f04f 0200 	mov.w	r2, #0
 8001b26:	f04f 0300 	mov.w	r3, #0
 8001b2a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001b2e:	4629      	mov	r1, r5
 8001b30:	028b      	lsls	r3, r1, #10
 8001b32:	4621      	mov	r1, r4
 8001b34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b38:	4621      	mov	r1, r4
 8001b3a:	028a      	lsls	r2, r1, #10
 8001b3c:	4610      	mov	r0, r2
 8001b3e:	4619      	mov	r1, r3
 8001b40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001b44:	2200      	movs	r2, #0
 8001b46:	673b      	str	r3, [r7, #112]	; 0x70
 8001b48:	677a      	str	r2, [r7, #116]	; 0x74
 8001b4a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001b4e:	f7fe fb59 	bl	8000204 <__aeabi_uldivmod>
 8001b52:	4602      	mov	r2, r0
 8001b54:	460b      	mov	r3, r1
 8001b56:	4613      	mov	r3, r2
 8001b58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b5c:	4b41      	ldr	r3, [pc, #260]	; (8001c64 <HAL_RCC_GetSysClockFreq+0x354>)
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	0c1b      	lsrs	r3, r3, #16
 8001b62:	f003 0303 	and.w	r3, r3, #3
 8001b66:	3301      	adds	r3, #1
 8001b68:	005b      	lsls	r3, r3, #1
 8001b6a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001b6e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001b72:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b7a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001b7e:	e0eb      	b.n	8001d58 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b80:	4b38      	ldr	r3, [pc, #224]	; (8001c64 <HAL_RCC_GetSysClockFreq+0x354>)
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b88:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b8c:	4b35      	ldr	r3, [pc, #212]	; (8001c64 <HAL_RCC_GetSysClockFreq+0x354>)
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d06b      	beq.n	8001c70 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b98:	4b32      	ldr	r3, [pc, #200]	; (8001c64 <HAL_RCC_GetSysClockFreq+0x354>)
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	099b      	lsrs	r3, r3, #6
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	66bb      	str	r3, [r7, #104]	; 0x68
 8001ba2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001ba4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ba6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001baa:	663b      	str	r3, [r7, #96]	; 0x60
 8001bac:	2300      	movs	r3, #0
 8001bae:	667b      	str	r3, [r7, #100]	; 0x64
 8001bb0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001bb4:	4622      	mov	r2, r4
 8001bb6:	462b      	mov	r3, r5
 8001bb8:	f04f 0000 	mov.w	r0, #0
 8001bbc:	f04f 0100 	mov.w	r1, #0
 8001bc0:	0159      	lsls	r1, r3, #5
 8001bc2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bc6:	0150      	lsls	r0, r2, #5
 8001bc8:	4602      	mov	r2, r0
 8001bca:	460b      	mov	r3, r1
 8001bcc:	4621      	mov	r1, r4
 8001bce:	1a51      	subs	r1, r2, r1
 8001bd0:	61b9      	str	r1, [r7, #24]
 8001bd2:	4629      	mov	r1, r5
 8001bd4:	eb63 0301 	sbc.w	r3, r3, r1
 8001bd8:	61fb      	str	r3, [r7, #28]
 8001bda:	f04f 0200 	mov.w	r2, #0
 8001bde:	f04f 0300 	mov.w	r3, #0
 8001be2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001be6:	4659      	mov	r1, fp
 8001be8:	018b      	lsls	r3, r1, #6
 8001bea:	4651      	mov	r1, sl
 8001bec:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001bf0:	4651      	mov	r1, sl
 8001bf2:	018a      	lsls	r2, r1, #6
 8001bf4:	4651      	mov	r1, sl
 8001bf6:	ebb2 0801 	subs.w	r8, r2, r1
 8001bfa:	4659      	mov	r1, fp
 8001bfc:	eb63 0901 	sbc.w	r9, r3, r1
 8001c00:	f04f 0200 	mov.w	r2, #0
 8001c04:	f04f 0300 	mov.w	r3, #0
 8001c08:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c0c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c10:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c14:	4690      	mov	r8, r2
 8001c16:	4699      	mov	r9, r3
 8001c18:	4623      	mov	r3, r4
 8001c1a:	eb18 0303 	adds.w	r3, r8, r3
 8001c1e:	613b      	str	r3, [r7, #16]
 8001c20:	462b      	mov	r3, r5
 8001c22:	eb49 0303 	adc.w	r3, r9, r3
 8001c26:	617b      	str	r3, [r7, #20]
 8001c28:	f04f 0200 	mov.w	r2, #0
 8001c2c:	f04f 0300 	mov.w	r3, #0
 8001c30:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001c34:	4629      	mov	r1, r5
 8001c36:	024b      	lsls	r3, r1, #9
 8001c38:	4621      	mov	r1, r4
 8001c3a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001c3e:	4621      	mov	r1, r4
 8001c40:	024a      	lsls	r2, r1, #9
 8001c42:	4610      	mov	r0, r2
 8001c44:	4619      	mov	r1, r3
 8001c46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	65bb      	str	r3, [r7, #88]	; 0x58
 8001c4e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001c50:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001c54:	f7fe fad6 	bl	8000204 <__aeabi_uldivmod>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	460b      	mov	r3, r1
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001c62:	e065      	b.n	8001d30 <HAL_RCC_GetSysClockFreq+0x420>
 8001c64:	40023800 	.word	0x40023800
 8001c68:	00f42400 	.word	0x00f42400
 8001c6c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c70:	4b3d      	ldr	r3, [pc, #244]	; (8001d68 <HAL_RCC_GetSysClockFreq+0x458>)
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	099b      	lsrs	r3, r3, #6
 8001c76:	2200      	movs	r2, #0
 8001c78:	4618      	mov	r0, r3
 8001c7a:	4611      	mov	r1, r2
 8001c7c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001c80:	653b      	str	r3, [r7, #80]	; 0x50
 8001c82:	2300      	movs	r3, #0
 8001c84:	657b      	str	r3, [r7, #84]	; 0x54
 8001c86:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001c8a:	4642      	mov	r2, r8
 8001c8c:	464b      	mov	r3, r9
 8001c8e:	f04f 0000 	mov.w	r0, #0
 8001c92:	f04f 0100 	mov.w	r1, #0
 8001c96:	0159      	lsls	r1, r3, #5
 8001c98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c9c:	0150      	lsls	r0, r2, #5
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	4641      	mov	r1, r8
 8001ca4:	1a51      	subs	r1, r2, r1
 8001ca6:	60b9      	str	r1, [r7, #8]
 8001ca8:	4649      	mov	r1, r9
 8001caa:	eb63 0301 	sbc.w	r3, r3, r1
 8001cae:	60fb      	str	r3, [r7, #12]
 8001cb0:	f04f 0200 	mov.w	r2, #0
 8001cb4:	f04f 0300 	mov.w	r3, #0
 8001cb8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001cbc:	4659      	mov	r1, fp
 8001cbe:	018b      	lsls	r3, r1, #6
 8001cc0:	4651      	mov	r1, sl
 8001cc2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001cc6:	4651      	mov	r1, sl
 8001cc8:	018a      	lsls	r2, r1, #6
 8001cca:	4651      	mov	r1, sl
 8001ccc:	1a54      	subs	r4, r2, r1
 8001cce:	4659      	mov	r1, fp
 8001cd0:	eb63 0501 	sbc.w	r5, r3, r1
 8001cd4:	f04f 0200 	mov.w	r2, #0
 8001cd8:	f04f 0300 	mov.w	r3, #0
 8001cdc:	00eb      	lsls	r3, r5, #3
 8001cde:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ce2:	00e2      	lsls	r2, r4, #3
 8001ce4:	4614      	mov	r4, r2
 8001ce6:	461d      	mov	r5, r3
 8001ce8:	4643      	mov	r3, r8
 8001cea:	18e3      	adds	r3, r4, r3
 8001cec:	603b      	str	r3, [r7, #0]
 8001cee:	464b      	mov	r3, r9
 8001cf0:	eb45 0303 	adc.w	r3, r5, r3
 8001cf4:	607b      	str	r3, [r7, #4]
 8001cf6:	f04f 0200 	mov.w	r2, #0
 8001cfa:	f04f 0300 	mov.w	r3, #0
 8001cfe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d02:	4629      	mov	r1, r5
 8001d04:	028b      	lsls	r3, r1, #10
 8001d06:	4621      	mov	r1, r4
 8001d08:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d0c:	4621      	mov	r1, r4
 8001d0e:	028a      	lsls	r2, r1, #10
 8001d10:	4610      	mov	r0, r2
 8001d12:	4619      	mov	r1, r3
 8001d14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001d18:	2200      	movs	r2, #0
 8001d1a:	64bb      	str	r3, [r7, #72]	; 0x48
 8001d1c:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001d1e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001d22:	f7fe fa6f 	bl	8000204 <__aeabi_uldivmod>
 8001d26:	4602      	mov	r2, r0
 8001d28:	460b      	mov	r3, r1
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001d30:	4b0d      	ldr	r3, [pc, #52]	; (8001d68 <HAL_RCC_GetSysClockFreq+0x458>)
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	0f1b      	lsrs	r3, r3, #28
 8001d36:	f003 0307 	and.w	r3, r3, #7
 8001d3a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001d3e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001d42:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001d46:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d4a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001d4e:	e003      	b.n	8001d58 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d50:	4b06      	ldr	r3, [pc, #24]	; (8001d6c <HAL_RCC_GetSysClockFreq+0x45c>)
 8001d52:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001d56:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d58:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	37b8      	adds	r7, #184	; 0xb8
 8001d60:	46bd      	mov	sp, r7
 8001d62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d66:	bf00      	nop
 8001d68:	40023800 	.word	0x40023800
 8001d6c:	00f42400 	.word	0x00f42400

08001d70 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b086      	sub	sp, #24
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d101      	bne.n	8001d82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e28d      	b.n	800229e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0301 	and.w	r3, r3, #1
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	f000 8083 	beq.w	8001e96 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001d90:	4b94      	ldr	r3, [pc, #592]	; (8001fe4 <HAL_RCC_OscConfig+0x274>)
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	f003 030c 	and.w	r3, r3, #12
 8001d98:	2b04      	cmp	r3, #4
 8001d9a:	d019      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001d9c:	4b91      	ldr	r3, [pc, #580]	; (8001fe4 <HAL_RCC_OscConfig+0x274>)
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001da4:	2b08      	cmp	r3, #8
 8001da6:	d106      	bne.n	8001db6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001da8:	4b8e      	ldr	r3, [pc, #568]	; (8001fe4 <HAL_RCC_OscConfig+0x274>)
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001db0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001db4:	d00c      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001db6:	4b8b      	ldr	r3, [pc, #556]	; (8001fe4 <HAL_RCC_OscConfig+0x274>)
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001dbe:	2b0c      	cmp	r3, #12
 8001dc0:	d112      	bne.n	8001de8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dc2:	4b88      	ldr	r3, [pc, #544]	; (8001fe4 <HAL_RCC_OscConfig+0x274>)
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001dce:	d10b      	bne.n	8001de8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dd0:	4b84      	ldr	r3, [pc, #528]	; (8001fe4 <HAL_RCC_OscConfig+0x274>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d05b      	beq.n	8001e94 <HAL_RCC_OscConfig+0x124>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d157      	bne.n	8001e94 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e25a      	b.n	800229e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001df0:	d106      	bne.n	8001e00 <HAL_RCC_OscConfig+0x90>
 8001df2:	4b7c      	ldr	r3, [pc, #496]	; (8001fe4 <HAL_RCC_OscConfig+0x274>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a7b      	ldr	r2, [pc, #492]	; (8001fe4 <HAL_RCC_OscConfig+0x274>)
 8001df8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dfc:	6013      	str	r3, [r2, #0]
 8001dfe:	e01d      	b.n	8001e3c <HAL_RCC_OscConfig+0xcc>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e08:	d10c      	bne.n	8001e24 <HAL_RCC_OscConfig+0xb4>
 8001e0a:	4b76      	ldr	r3, [pc, #472]	; (8001fe4 <HAL_RCC_OscConfig+0x274>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a75      	ldr	r2, [pc, #468]	; (8001fe4 <HAL_RCC_OscConfig+0x274>)
 8001e10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e14:	6013      	str	r3, [r2, #0]
 8001e16:	4b73      	ldr	r3, [pc, #460]	; (8001fe4 <HAL_RCC_OscConfig+0x274>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a72      	ldr	r2, [pc, #456]	; (8001fe4 <HAL_RCC_OscConfig+0x274>)
 8001e1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e20:	6013      	str	r3, [r2, #0]
 8001e22:	e00b      	b.n	8001e3c <HAL_RCC_OscConfig+0xcc>
 8001e24:	4b6f      	ldr	r3, [pc, #444]	; (8001fe4 <HAL_RCC_OscConfig+0x274>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a6e      	ldr	r2, [pc, #440]	; (8001fe4 <HAL_RCC_OscConfig+0x274>)
 8001e2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e2e:	6013      	str	r3, [r2, #0]
 8001e30:	4b6c      	ldr	r3, [pc, #432]	; (8001fe4 <HAL_RCC_OscConfig+0x274>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a6b      	ldr	r2, [pc, #428]	; (8001fe4 <HAL_RCC_OscConfig+0x274>)
 8001e36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d013      	beq.n	8001e6c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e44:	f7fe ff7c 	bl	8000d40 <HAL_GetTick>
 8001e48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e4a:	e008      	b.n	8001e5e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e4c:	f7fe ff78 	bl	8000d40 <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	2b64      	cmp	r3, #100	; 0x64
 8001e58:	d901      	bls.n	8001e5e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e21f      	b.n	800229e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e5e:	4b61      	ldr	r3, [pc, #388]	; (8001fe4 <HAL_RCC_OscConfig+0x274>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d0f0      	beq.n	8001e4c <HAL_RCC_OscConfig+0xdc>
 8001e6a:	e014      	b.n	8001e96 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e6c:	f7fe ff68 	bl	8000d40 <HAL_GetTick>
 8001e70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e72:	e008      	b.n	8001e86 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e74:	f7fe ff64 	bl	8000d40 <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	2b64      	cmp	r3, #100	; 0x64
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e20b      	b.n	800229e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e86:	4b57      	ldr	r3, [pc, #348]	; (8001fe4 <HAL_RCC_OscConfig+0x274>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d1f0      	bne.n	8001e74 <HAL_RCC_OscConfig+0x104>
 8001e92:	e000      	b.n	8001e96 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0302 	and.w	r3, r3, #2
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d06f      	beq.n	8001f82 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001ea2:	4b50      	ldr	r3, [pc, #320]	; (8001fe4 <HAL_RCC_OscConfig+0x274>)
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	f003 030c 	and.w	r3, r3, #12
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d017      	beq.n	8001ede <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001eae:	4b4d      	ldr	r3, [pc, #308]	; (8001fe4 <HAL_RCC_OscConfig+0x274>)
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001eb6:	2b08      	cmp	r3, #8
 8001eb8:	d105      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001eba:	4b4a      	ldr	r3, [pc, #296]	; (8001fe4 <HAL_RCC_OscConfig+0x274>)
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d00b      	beq.n	8001ede <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ec6:	4b47      	ldr	r3, [pc, #284]	; (8001fe4 <HAL_RCC_OscConfig+0x274>)
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001ece:	2b0c      	cmp	r3, #12
 8001ed0:	d11c      	bne.n	8001f0c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ed2:	4b44      	ldr	r3, [pc, #272]	; (8001fe4 <HAL_RCC_OscConfig+0x274>)
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d116      	bne.n	8001f0c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ede:	4b41      	ldr	r3, [pc, #260]	; (8001fe4 <HAL_RCC_OscConfig+0x274>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0302 	and.w	r3, r3, #2
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d005      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x186>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d001      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e1d3      	b.n	800229e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ef6:	4b3b      	ldr	r3, [pc, #236]	; (8001fe4 <HAL_RCC_OscConfig+0x274>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	691b      	ldr	r3, [r3, #16]
 8001f02:	00db      	lsls	r3, r3, #3
 8001f04:	4937      	ldr	r1, [pc, #220]	; (8001fe4 <HAL_RCC_OscConfig+0x274>)
 8001f06:	4313      	orrs	r3, r2
 8001f08:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f0a:	e03a      	b.n	8001f82 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d020      	beq.n	8001f56 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f14:	4b34      	ldr	r3, [pc, #208]	; (8001fe8 <HAL_RCC_OscConfig+0x278>)
 8001f16:	2201      	movs	r2, #1
 8001f18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f1a:	f7fe ff11 	bl	8000d40 <HAL_GetTick>
 8001f1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f20:	e008      	b.n	8001f34 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f22:	f7fe ff0d 	bl	8000d40 <HAL_GetTick>
 8001f26:	4602      	mov	r2, r0
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d901      	bls.n	8001f34 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001f30:	2303      	movs	r3, #3
 8001f32:	e1b4      	b.n	800229e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f34:	4b2b      	ldr	r3, [pc, #172]	; (8001fe4 <HAL_RCC_OscConfig+0x274>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0302 	and.w	r3, r3, #2
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d0f0      	beq.n	8001f22 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f40:	4b28      	ldr	r3, [pc, #160]	; (8001fe4 <HAL_RCC_OscConfig+0x274>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	691b      	ldr	r3, [r3, #16]
 8001f4c:	00db      	lsls	r3, r3, #3
 8001f4e:	4925      	ldr	r1, [pc, #148]	; (8001fe4 <HAL_RCC_OscConfig+0x274>)
 8001f50:	4313      	orrs	r3, r2
 8001f52:	600b      	str	r3, [r1, #0]
 8001f54:	e015      	b.n	8001f82 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f56:	4b24      	ldr	r3, [pc, #144]	; (8001fe8 <HAL_RCC_OscConfig+0x278>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f5c:	f7fe fef0 	bl	8000d40 <HAL_GetTick>
 8001f60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f62:	e008      	b.n	8001f76 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f64:	f7fe feec 	bl	8000d40 <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d901      	bls.n	8001f76 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e193      	b.n	800229e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f76:	4b1b      	ldr	r3, [pc, #108]	; (8001fe4 <HAL_RCC_OscConfig+0x274>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0302 	and.w	r3, r3, #2
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d1f0      	bne.n	8001f64 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0308 	and.w	r3, r3, #8
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d036      	beq.n	8001ffc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	695b      	ldr	r3, [r3, #20]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d016      	beq.n	8001fc4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f96:	4b15      	ldr	r3, [pc, #84]	; (8001fec <HAL_RCC_OscConfig+0x27c>)
 8001f98:	2201      	movs	r2, #1
 8001f9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f9c:	f7fe fed0 	bl	8000d40 <HAL_GetTick>
 8001fa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fa2:	e008      	b.n	8001fb6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fa4:	f7fe fecc 	bl	8000d40 <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d901      	bls.n	8001fb6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e173      	b.n	800229e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fb6:	4b0b      	ldr	r3, [pc, #44]	; (8001fe4 <HAL_RCC_OscConfig+0x274>)
 8001fb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fba:	f003 0302 	and.w	r3, r3, #2
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d0f0      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x234>
 8001fc2:	e01b      	b.n	8001ffc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fc4:	4b09      	ldr	r3, [pc, #36]	; (8001fec <HAL_RCC_OscConfig+0x27c>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fca:	f7fe feb9 	bl	8000d40 <HAL_GetTick>
 8001fce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fd0:	e00e      	b.n	8001ff0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fd2:	f7fe feb5 	bl	8000d40 <HAL_GetTick>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	d907      	bls.n	8001ff0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	e15c      	b.n	800229e <HAL_RCC_OscConfig+0x52e>
 8001fe4:	40023800 	.word	0x40023800
 8001fe8:	42470000 	.word	0x42470000
 8001fec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ff0:	4b8a      	ldr	r3, [pc, #552]	; (800221c <HAL_RCC_OscConfig+0x4ac>)
 8001ff2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ff4:	f003 0302 	and.w	r3, r3, #2
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d1ea      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0304 	and.w	r3, r3, #4
 8002004:	2b00      	cmp	r3, #0
 8002006:	f000 8097 	beq.w	8002138 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800200a:	2300      	movs	r3, #0
 800200c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800200e:	4b83      	ldr	r3, [pc, #524]	; (800221c <HAL_RCC_OscConfig+0x4ac>)
 8002010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002012:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d10f      	bne.n	800203a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800201a:	2300      	movs	r3, #0
 800201c:	60bb      	str	r3, [r7, #8]
 800201e:	4b7f      	ldr	r3, [pc, #508]	; (800221c <HAL_RCC_OscConfig+0x4ac>)
 8002020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002022:	4a7e      	ldr	r2, [pc, #504]	; (800221c <HAL_RCC_OscConfig+0x4ac>)
 8002024:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002028:	6413      	str	r3, [r2, #64]	; 0x40
 800202a:	4b7c      	ldr	r3, [pc, #496]	; (800221c <HAL_RCC_OscConfig+0x4ac>)
 800202c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002032:	60bb      	str	r3, [r7, #8]
 8002034:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002036:	2301      	movs	r3, #1
 8002038:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800203a:	4b79      	ldr	r3, [pc, #484]	; (8002220 <HAL_RCC_OscConfig+0x4b0>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002042:	2b00      	cmp	r3, #0
 8002044:	d118      	bne.n	8002078 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002046:	4b76      	ldr	r3, [pc, #472]	; (8002220 <HAL_RCC_OscConfig+0x4b0>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a75      	ldr	r2, [pc, #468]	; (8002220 <HAL_RCC_OscConfig+0x4b0>)
 800204c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002050:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002052:	f7fe fe75 	bl	8000d40 <HAL_GetTick>
 8002056:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002058:	e008      	b.n	800206c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800205a:	f7fe fe71 	bl	8000d40 <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	2b02      	cmp	r3, #2
 8002066:	d901      	bls.n	800206c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002068:	2303      	movs	r3, #3
 800206a:	e118      	b.n	800229e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800206c:	4b6c      	ldr	r3, [pc, #432]	; (8002220 <HAL_RCC_OscConfig+0x4b0>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002074:	2b00      	cmp	r3, #0
 8002076:	d0f0      	beq.n	800205a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	2b01      	cmp	r3, #1
 800207e:	d106      	bne.n	800208e <HAL_RCC_OscConfig+0x31e>
 8002080:	4b66      	ldr	r3, [pc, #408]	; (800221c <HAL_RCC_OscConfig+0x4ac>)
 8002082:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002084:	4a65      	ldr	r2, [pc, #404]	; (800221c <HAL_RCC_OscConfig+0x4ac>)
 8002086:	f043 0301 	orr.w	r3, r3, #1
 800208a:	6713      	str	r3, [r2, #112]	; 0x70
 800208c:	e01c      	b.n	80020c8 <HAL_RCC_OscConfig+0x358>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	2b05      	cmp	r3, #5
 8002094:	d10c      	bne.n	80020b0 <HAL_RCC_OscConfig+0x340>
 8002096:	4b61      	ldr	r3, [pc, #388]	; (800221c <HAL_RCC_OscConfig+0x4ac>)
 8002098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800209a:	4a60      	ldr	r2, [pc, #384]	; (800221c <HAL_RCC_OscConfig+0x4ac>)
 800209c:	f043 0304 	orr.w	r3, r3, #4
 80020a0:	6713      	str	r3, [r2, #112]	; 0x70
 80020a2:	4b5e      	ldr	r3, [pc, #376]	; (800221c <HAL_RCC_OscConfig+0x4ac>)
 80020a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020a6:	4a5d      	ldr	r2, [pc, #372]	; (800221c <HAL_RCC_OscConfig+0x4ac>)
 80020a8:	f043 0301 	orr.w	r3, r3, #1
 80020ac:	6713      	str	r3, [r2, #112]	; 0x70
 80020ae:	e00b      	b.n	80020c8 <HAL_RCC_OscConfig+0x358>
 80020b0:	4b5a      	ldr	r3, [pc, #360]	; (800221c <HAL_RCC_OscConfig+0x4ac>)
 80020b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020b4:	4a59      	ldr	r2, [pc, #356]	; (800221c <HAL_RCC_OscConfig+0x4ac>)
 80020b6:	f023 0301 	bic.w	r3, r3, #1
 80020ba:	6713      	str	r3, [r2, #112]	; 0x70
 80020bc:	4b57      	ldr	r3, [pc, #348]	; (800221c <HAL_RCC_OscConfig+0x4ac>)
 80020be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020c0:	4a56      	ldr	r2, [pc, #344]	; (800221c <HAL_RCC_OscConfig+0x4ac>)
 80020c2:	f023 0304 	bic.w	r3, r3, #4
 80020c6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d015      	beq.n	80020fc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020d0:	f7fe fe36 	bl	8000d40 <HAL_GetTick>
 80020d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020d6:	e00a      	b.n	80020ee <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020d8:	f7fe fe32 	bl	8000d40 <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d901      	bls.n	80020ee <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e0d7      	b.n	800229e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020ee:	4b4b      	ldr	r3, [pc, #300]	; (800221c <HAL_RCC_OscConfig+0x4ac>)
 80020f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020f2:	f003 0302 	and.w	r3, r3, #2
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d0ee      	beq.n	80020d8 <HAL_RCC_OscConfig+0x368>
 80020fa:	e014      	b.n	8002126 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020fc:	f7fe fe20 	bl	8000d40 <HAL_GetTick>
 8002100:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002102:	e00a      	b.n	800211a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002104:	f7fe fe1c 	bl	8000d40 <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002112:	4293      	cmp	r3, r2
 8002114:	d901      	bls.n	800211a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e0c1      	b.n	800229e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800211a:	4b40      	ldr	r3, [pc, #256]	; (800221c <HAL_RCC_OscConfig+0x4ac>)
 800211c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800211e:	f003 0302 	and.w	r3, r3, #2
 8002122:	2b00      	cmp	r3, #0
 8002124:	d1ee      	bne.n	8002104 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002126:	7dfb      	ldrb	r3, [r7, #23]
 8002128:	2b01      	cmp	r3, #1
 800212a:	d105      	bne.n	8002138 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800212c:	4b3b      	ldr	r3, [pc, #236]	; (800221c <HAL_RCC_OscConfig+0x4ac>)
 800212e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002130:	4a3a      	ldr	r2, [pc, #232]	; (800221c <HAL_RCC_OscConfig+0x4ac>)
 8002132:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002136:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	699b      	ldr	r3, [r3, #24]
 800213c:	2b00      	cmp	r3, #0
 800213e:	f000 80ad 	beq.w	800229c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002142:	4b36      	ldr	r3, [pc, #216]	; (800221c <HAL_RCC_OscConfig+0x4ac>)
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	f003 030c 	and.w	r3, r3, #12
 800214a:	2b08      	cmp	r3, #8
 800214c:	d060      	beq.n	8002210 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	699b      	ldr	r3, [r3, #24]
 8002152:	2b02      	cmp	r3, #2
 8002154:	d145      	bne.n	80021e2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002156:	4b33      	ldr	r3, [pc, #204]	; (8002224 <HAL_RCC_OscConfig+0x4b4>)
 8002158:	2200      	movs	r2, #0
 800215a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800215c:	f7fe fdf0 	bl	8000d40 <HAL_GetTick>
 8002160:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002162:	e008      	b.n	8002176 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002164:	f7fe fdec 	bl	8000d40 <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	2b02      	cmp	r3, #2
 8002170:	d901      	bls.n	8002176 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e093      	b.n	800229e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002176:	4b29      	ldr	r3, [pc, #164]	; (800221c <HAL_RCC_OscConfig+0x4ac>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d1f0      	bne.n	8002164 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	69da      	ldr	r2, [r3, #28]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6a1b      	ldr	r3, [r3, #32]
 800218a:	431a      	orrs	r2, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002190:	019b      	lsls	r3, r3, #6
 8002192:	431a      	orrs	r2, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002198:	085b      	lsrs	r3, r3, #1
 800219a:	3b01      	subs	r3, #1
 800219c:	041b      	lsls	r3, r3, #16
 800219e:	431a      	orrs	r2, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a4:	061b      	lsls	r3, r3, #24
 80021a6:	431a      	orrs	r2, r3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ac:	071b      	lsls	r3, r3, #28
 80021ae:	491b      	ldr	r1, [pc, #108]	; (800221c <HAL_RCC_OscConfig+0x4ac>)
 80021b0:	4313      	orrs	r3, r2
 80021b2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021b4:	4b1b      	ldr	r3, [pc, #108]	; (8002224 <HAL_RCC_OscConfig+0x4b4>)
 80021b6:	2201      	movs	r2, #1
 80021b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ba:	f7fe fdc1 	bl	8000d40 <HAL_GetTick>
 80021be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021c0:	e008      	b.n	80021d4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021c2:	f7fe fdbd 	bl	8000d40 <HAL_GetTick>
 80021c6:	4602      	mov	r2, r0
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d901      	bls.n	80021d4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80021d0:	2303      	movs	r3, #3
 80021d2:	e064      	b.n	800229e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021d4:	4b11      	ldr	r3, [pc, #68]	; (800221c <HAL_RCC_OscConfig+0x4ac>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d0f0      	beq.n	80021c2 <HAL_RCC_OscConfig+0x452>
 80021e0:	e05c      	b.n	800229c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021e2:	4b10      	ldr	r3, [pc, #64]	; (8002224 <HAL_RCC_OscConfig+0x4b4>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021e8:	f7fe fdaa 	bl	8000d40 <HAL_GetTick>
 80021ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021ee:	e008      	b.n	8002202 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021f0:	f7fe fda6 	bl	8000d40 <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d901      	bls.n	8002202 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e04d      	b.n	800229e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002202:	4b06      	ldr	r3, [pc, #24]	; (800221c <HAL_RCC_OscConfig+0x4ac>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d1f0      	bne.n	80021f0 <HAL_RCC_OscConfig+0x480>
 800220e:	e045      	b.n	800229c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	699b      	ldr	r3, [r3, #24]
 8002214:	2b01      	cmp	r3, #1
 8002216:	d107      	bne.n	8002228 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e040      	b.n	800229e <HAL_RCC_OscConfig+0x52e>
 800221c:	40023800 	.word	0x40023800
 8002220:	40007000 	.word	0x40007000
 8002224:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002228:	4b1f      	ldr	r3, [pc, #124]	; (80022a8 <HAL_RCC_OscConfig+0x538>)
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	699b      	ldr	r3, [r3, #24]
 8002232:	2b01      	cmp	r3, #1
 8002234:	d030      	beq.n	8002298 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002240:	429a      	cmp	r2, r3
 8002242:	d129      	bne.n	8002298 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800224e:	429a      	cmp	r2, r3
 8002250:	d122      	bne.n	8002298 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002252:	68fa      	ldr	r2, [r7, #12]
 8002254:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002258:	4013      	ands	r3, r2
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800225e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002260:	4293      	cmp	r3, r2
 8002262:	d119      	bne.n	8002298 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800226e:	085b      	lsrs	r3, r3, #1
 8002270:	3b01      	subs	r3, #1
 8002272:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002274:	429a      	cmp	r2, r3
 8002276:	d10f      	bne.n	8002298 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002282:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002284:	429a      	cmp	r2, r3
 8002286:	d107      	bne.n	8002298 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002292:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002294:	429a      	cmp	r2, r3
 8002296:	d001      	beq.n	800229c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e000      	b.n	800229e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800229c:	2300      	movs	r3, #0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3718      	adds	r7, #24
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	40023800 	.word	0x40023800

080022ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d101      	bne.n	80022be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e03f      	b.n	800233e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d106      	bne.n	80022d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f7fe fb6a 	bl	80009ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2224      	movs	r2, #36	; 0x24
 80022dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	68da      	ldr	r2, [r3, #12]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f000 fc7b 	bl	8002bec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	691a      	ldr	r2, [r3, #16]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002304:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	695a      	ldr	r2, [r3, #20]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002314:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	68da      	ldr	r2, [r3, #12]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002324:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2220      	movs	r2, #32
 8002330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2220      	movs	r2, #32
 8002338:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800233c:	2300      	movs	r3, #0
}
 800233e:	4618      	mov	r0, r3
 8002340:	3708      	adds	r7, #8
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
	...

08002348 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b0ba      	sub	sp, #232	; 0xe8
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	695b      	ldr	r3, [r3, #20]
 800236a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800236e:	2300      	movs	r3, #0
 8002370:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002374:	2300      	movs	r3, #0
 8002376:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800237a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800237e:	f003 030f 	and.w	r3, r3, #15
 8002382:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002386:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800238a:	2b00      	cmp	r3, #0
 800238c:	d10f      	bne.n	80023ae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800238e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002392:	f003 0320 	and.w	r3, r3, #32
 8002396:	2b00      	cmp	r3, #0
 8002398:	d009      	beq.n	80023ae <HAL_UART_IRQHandler+0x66>
 800239a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800239e:	f003 0320 	and.w	r3, r3, #32
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d003      	beq.n	80023ae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f000 fb65 	bl	8002a76 <UART_Receive_IT>
      return;
 80023ac:	e256      	b.n	800285c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80023ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	f000 80de 	beq.w	8002574 <HAL_UART_IRQHandler+0x22c>
 80023b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80023bc:	f003 0301 	and.w	r3, r3, #1
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d106      	bne.n	80023d2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80023c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80023c8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	f000 80d1 	beq.w	8002574 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80023d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023d6:	f003 0301 	and.w	r3, r3, #1
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d00b      	beq.n	80023f6 <HAL_UART_IRQHandler+0xae>
 80023de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80023e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d005      	beq.n	80023f6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ee:	f043 0201 	orr.w	r2, r3, #1
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80023f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023fa:	f003 0304 	and.w	r3, r3, #4
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d00b      	beq.n	800241a <HAL_UART_IRQHandler+0xd2>
 8002402:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002406:	f003 0301 	and.w	r3, r3, #1
 800240a:	2b00      	cmp	r3, #0
 800240c:	d005      	beq.n	800241a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002412:	f043 0202 	orr.w	r2, r3, #2
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800241a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800241e:	f003 0302 	and.w	r3, r3, #2
 8002422:	2b00      	cmp	r3, #0
 8002424:	d00b      	beq.n	800243e <HAL_UART_IRQHandler+0xf6>
 8002426:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800242a:	f003 0301 	and.w	r3, r3, #1
 800242e:	2b00      	cmp	r3, #0
 8002430:	d005      	beq.n	800243e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002436:	f043 0204 	orr.w	r2, r3, #4
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800243e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002442:	f003 0308 	and.w	r3, r3, #8
 8002446:	2b00      	cmp	r3, #0
 8002448:	d011      	beq.n	800246e <HAL_UART_IRQHandler+0x126>
 800244a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800244e:	f003 0320 	and.w	r3, r3, #32
 8002452:	2b00      	cmp	r3, #0
 8002454:	d105      	bne.n	8002462 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002456:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800245a:	f003 0301 	and.w	r3, r3, #1
 800245e:	2b00      	cmp	r3, #0
 8002460:	d005      	beq.n	800246e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002466:	f043 0208 	orr.w	r2, r3, #8
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002472:	2b00      	cmp	r3, #0
 8002474:	f000 81ed 	beq.w	8002852 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002478:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800247c:	f003 0320 	and.w	r3, r3, #32
 8002480:	2b00      	cmp	r3, #0
 8002482:	d008      	beq.n	8002496 <HAL_UART_IRQHandler+0x14e>
 8002484:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002488:	f003 0320 	and.w	r3, r3, #32
 800248c:	2b00      	cmp	r3, #0
 800248e:	d002      	beq.n	8002496 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f000 faf0 	bl	8002a76 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	695b      	ldr	r3, [r3, #20]
 800249c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024a0:	2b40      	cmp	r3, #64	; 0x40
 80024a2:	bf0c      	ite	eq
 80024a4:	2301      	moveq	r3, #1
 80024a6:	2300      	movne	r3, #0
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b2:	f003 0308 	and.w	r3, r3, #8
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d103      	bne.n	80024c2 <HAL_UART_IRQHandler+0x17a>
 80024ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d04f      	beq.n	8002562 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f000 f9f8 	bl	80028b8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	695b      	ldr	r3, [r3, #20]
 80024ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024d2:	2b40      	cmp	r3, #64	; 0x40
 80024d4:	d141      	bne.n	800255a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	3314      	adds	r3, #20
 80024dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80024e4:	e853 3f00 	ldrex	r3, [r3]
 80024e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80024ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80024f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80024f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	3314      	adds	r3, #20
 80024fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002502:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002506:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800250a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800250e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002512:	e841 2300 	strex	r3, r2, [r1]
 8002516:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800251a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d1d9      	bne.n	80024d6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002526:	2b00      	cmp	r3, #0
 8002528:	d013      	beq.n	8002552 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800252e:	4a7d      	ldr	r2, [pc, #500]	; (8002724 <HAL_UART_IRQHandler+0x3dc>)
 8002530:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002536:	4618      	mov	r0, r3
 8002538:	f7fe feaf 	bl	800129a <HAL_DMA_Abort_IT>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d016      	beq.n	8002570 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002546:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002548:	687a      	ldr	r2, [r7, #4]
 800254a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800254c:	4610      	mov	r0, r2
 800254e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002550:	e00e      	b.n	8002570 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f000 f99a 	bl	800288c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002558:	e00a      	b.n	8002570 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f000 f996 	bl	800288c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002560:	e006      	b.n	8002570 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f000 f992 	bl	800288c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2200      	movs	r2, #0
 800256c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800256e:	e170      	b.n	8002852 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002570:	bf00      	nop
    return;
 8002572:	e16e      	b.n	8002852 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002578:	2b01      	cmp	r3, #1
 800257a:	f040 814a 	bne.w	8002812 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800257e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002582:	f003 0310 	and.w	r3, r3, #16
 8002586:	2b00      	cmp	r3, #0
 8002588:	f000 8143 	beq.w	8002812 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800258c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002590:	f003 0310 	and.w	r3, r3, #16
 8002594:	2b00      	cmp	r3, #0
 8002596:	f000 813c 	beq.w	8002812 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800259a:	2300      	movs	r3, #0
 800259c:	60bb      	str	r3, [r7, #8]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	60bb      	str	r3, [r7, #8]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	60bb      	str	r3, [r7, #8]
 80025ae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	695b      	ldr	r3, [r3, #20]
 80025b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ba:	2b40      	cmp	r3, #64	; 0x40
 80025bc:	f040 80b4 	bne.w	8002728 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80025cc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	f000 8140 	beq.w	8002856 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80025da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80025de:	429a      	cmp	r2, r3
 80025e0:	f080 8139 	bcs.w	8002856 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80025ea:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025f0:	69db      	ldr	r3, [r3, #28]
 80025f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025f6:	f000 8088 	beq.w	800270a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	330c      	adds	r3, #12
 8002600:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002604:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002608:	e853 3f00 	ldrex	r3, [r3]
 800260c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002610:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002614:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002618:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	330c      	adds	r3, #12
 8002622:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002626:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800262a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800262e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002632:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002636:	e841 2300 	strex	r3, r2, [r1]
 800263a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800263e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002642:	2b00      	cmp	r3, #0
 8002644:	d1d9      	bne.n	80025fa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	3314      	adds	r3, #20
 800264c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800264e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002650:	e853 3f00 	ldrex	r3, [r3]
 8002654:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002656:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002658:	f023 0301 	bic.w	r3, r3, #1
 800265c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	3314      	adds	r3, #20
 8002666:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800266a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800266e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002670:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002672:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002676:	e841 2300 	strex	r3, r2, [r1]
 800267a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800267c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800267e:	2b00      	cmp	r3, #0
 8002680:	d1e1      	bne.n	8002646 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	3314      	adds	r3, #20
 8002688:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800268a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800268c:	e853 3f00 	ldrex	r3, [r3]
 8002690:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002692:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002694:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002698:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	3314      	adds	r3, #20
 80026a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80026a6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80026a8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026aa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80026ac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80026ae:	e841 2300 	strex	r3, r2, [r1]
 80026b2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80026b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d1e3      	bne.n	8002682 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2220      	movs	r2, #32
 80026be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	330c      	adds	r3, #12
 80026ce:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026d2:	e853 3f00 	ldrex	r3, [r3]
 80026d6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80026d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026da:	f023 0310 	bic.w	r3, r3, #16
 80026de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	330c      	adds	r3, #12
 80026e8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80026ec:	65ba      	str	r2, [r7, #88]	; 0x58
 80026ee:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026f0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80026f2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80026f4:	e841 2300 	strex	r3, r2, [r1]
 80026f8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80026fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d1e3      	bne.n	80026c8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002704:	4618      	mov	r0, r3
 8002706:	f7fe fd58 	bl	80011ba <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002712:	b29b      	uxth	r3, r3
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	b29b      	uxth	r3, r3
 8002718:	4619      	mov	r1, r3
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f000 f8c0 	bl	80028a0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002720:	e099      	b.n	8002856 <HAL_UART_IRQHandler+0x50e>
 8002722:	bf00      	nop
 8002724:	0800297f 	.word	0x0800297f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002730:	b29b      	uxth	r3, r3
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800273c:	b29b      	uxth	r3, r3
 800273e:	2b00      	cmp	r3, #0
 8002740:	f000 808b 	beq.w	800285a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002744:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002748:	2b00      	cmp	r3, #0
 800274a:	f000 8086 	beq.w	800285a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	330c      	adds	r3, #12
 8002754:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002758:	e853 3f00 	ldrex	r3, [r3]
 800275c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800275e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002760:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002764:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	330c      	adds	r3, #12
 800276e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002772:	647a      	str	r2, [r7, #68]	; 0x44
 8002774:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002776:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002778:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800277a:	e841 2300 	strex	r3, r2, [r1]
 800277e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002780:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002782:	2b00      	cmp	r3, #0
 8002784:	d1e3      	bne.n	800274e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	3314      	adds	r3, #20
 800278c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800278e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002790:	e853 3f00 	ldrex	r3, [r3]
 8002794:	623b      	str	r3, [r7, #32]
   return(result);
 8002796:	6a3b      	ldr	r3, [r7, #32]
 8002798:	f023 0301 	bic.w	r3, r3, #1
 800279c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	3314      	adds	r3, #20
 80027a6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80027aa:	633a      	str	r2, [r7, #48]	; 0x30
 80027ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80027b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027b2:	e841 2300 	strex	r3, r2, [r1]
 80027b6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80027b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d1e3      	bne.n	8002786 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2220      	movs	r2, #32
 80027c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	330c      	adds	r3, #12
 80027d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	e853 3f00 	ldrex	r3, [r3]
 80027da:	60fb      	str	r3, [r7, #12]
   return(result);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	f023 0310 	bic.w	r3, r3, #16
 80027e2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	330c      	adds	r3, #12
 80027ec:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80027f0:	61fa      	str	r2, [r7, #28]
 80027f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027f4:	69b9      	ldr	r1, [r7, #24]
 80027f6:	69fa      	ldr	r2, [r7, #28]
 80027f8:	e841 2300 	strex	r3, r2, [r1]
 80027fc:	617b      	str	r3, [r7, #20]
   return(result);
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d1e3      	bne.n	80027cc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002804:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002808:	4619      	mov	r1, r3
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f000 f848 	bl	80028a0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002810:	e023      	b.n	800285a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002812:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800281a:	2b00      	cmp	r3, #0
 800281c:	d009      	beq.n	8002832 <HAL_UART_IRQHandler+0x4ea>
 800281e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002826:	2b00      	cmp	r3, #0
 8002828:	d003      	beq.n	8002832 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f000 f8bb 	bl	80029a6 <UART_Transmit_IT>
    return;
 8002830:	e014      	b.n	800285c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002832:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002836:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800283a:	2b00      	cmp	r3, #0
 800283c:	d00e      	beq.n	800285c <HAL_UART_IRQHandler+0x514>
 800283e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002846:	2b00      	cmp	r3, #0
 8002848:	d008      	beq.n	800285c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f000 f8fb 	bl	8002a46 <UART_EndTransmit_IT>
    return;
 8002850:	e004      	b.n	800285c <HAL_UART_IRQHandler+0x514>
    return;
 8002852:	bf00      	nop
 8002854:	e002      	b.n	800285c <HAL_UART_IRQHandler+0x514>
      return;
 8002856:	bf00      	nop
 8002858:	e000      	b.n	800285c <HAL_UART_IRQHandler+0x514>
      return;
 800285a:	bf00      	nop
  }
}
 800285c:	37e8      	adds	r7, #232	; 0xe8
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop

08002864 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800286c:	bf00      	nop
 800286e:	370c      	adds	r7, #12
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr

08002878 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002880:	bf00      	nop
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr

0800288c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002894:	bf00      	nop
 8002896:	370c      	adds	r7, #12
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr

080028a0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	460b      	mov	r3, r1
 80028aa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80028ac:	bf00      	nop
 80028ae:	370c      	adds	r7, #12
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr

080028b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b095      	sub	sp, #84	; 0x54
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	330c      	adds	r3, #12
 80028c6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028ca:	e853 3f00 	ldrex	r3, [r3]
 80028ce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80028d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028d2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80028d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	330c      	adds	r3, #12
 80028de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80028e0:	643a      	str	r2, [r7, #64]	; 0x40
 80028e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028e4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80028e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80028e8:	e841 2300 	strex	r3, r2, [r1]
 80028ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80028ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d1e5      	bne.n	80028c0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	3314      	adds	r3, #20
 80028fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028fc:	6a3b      	ldr	r3, [r7, #32]
 80028fe:	e853 3f00 	ldrex	r3, [r3]
 8002902:	61fb      	str	r3, [r7, #28]
   return(result);
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	f023 0301 	bic.w	r3, r3, #1
 800290a:	64bb      	str	r3, [r7, #72]	; 0x48
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	3314      	adds	r3, #20
 8002912:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002914:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002916:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002918:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800291a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800291c:	e841 2300 	strex	r3, r2, [r1]
 8002920:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002924:	2b00      	cmp	r3, #0
 8002926:	d1e5      	bne.n	80028f4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292c:	2b01      	cmp	r3, #1
 800292e:	d119      	bne.n	8002964 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	330c      	adds	r3, #12
 8002936:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	e853 3f00 	ldrex	r3, [r3]
 800293e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	f023 0310 	bic.w	r3, r3, #16
 8002946:	647b      	str	r3, [r7, #68]	; 0x44
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	330c      	adds	r3, #12
 800294e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002950:	61ba      	str	r2, [r7, #24]
 8002952:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002954:	6979      	ldr	r1, [r7, #20]
 8002956:	69ba      	ldr	r2, [r7, #24]
 8002958:	e841 2300 	strex	r3, r2, [r1]
 800295c:	613b      	str	r3, [r7, #16]
   return(result);
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d1e5      	bne.n	8002930 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2220      	movs	r2, #32
 8002968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2200      	movs	r2, #0
 8002970:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002972:	bf00      	nop
 8002974:	3754      	adds	r7, #84	; 0x54
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr

0800297e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800297e:	b580      	push	{r7, lr}
 8002980:	b084      	sub	sp, #16
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800298a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2200      	movs	r2, #0
 8002990:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2200      	movs	r2, #0
 8002996:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002998:	68f8      	ldr	r0, [r7, #12]
 800299a:	f7ff ff77 	bl	800288c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800299e:	bf00      	nop
 80029a0:	3710      	adds	r7, #16
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}

080029a6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80029a6:	b480      	push	{r7}
 80029a8:	b085      	sub	sp, #20
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	2b21      	cmp	r3, #33	; 0x21
 80029b8:	d13e      	bne.n	8002a38 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029c2:	d114      	bne.n	80029ee <UART_Transmit_IT+0x48>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	691b      	ldr	r3, [r3, #16]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d110      	bne.n	80029ee <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6a1b      	ldr	r3, [r3, #32]
 80029d0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	881b      	ldrh	r3, [r3, #0]
 80029d6:	461a      	mov	r2, r3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80029e0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6a1b      	ldr	r3, [r3, #32]
 80029e6:	1c9a      	adds	r2, r3, #2
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	621a      	str	r2, [r3, #32]
 80029ec:	e008      	b.n	8002a00 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6a1b      	ldr	r3, [r3, #32]
 80029f2:	1c59      	adds	r1, r3, #1
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	6211      	str	r1, [r2, #32]
 80029f8:	781a      	ldrb	r2, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	3b01      	subs	r3, #1
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d10f      	bne.n	8002a34 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	68da      	ldr	r2, [r3, #12]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a22:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	68da      	ldr	r2, [r3, #12]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a32:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002a34:	2300      	movs	r3, #0
 8002a36:	e000      	b.n	8002a3a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002a38:	2302      	movs	r3, #2
  }
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3714      	adds	r7, #20
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr

08002a46 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002a46:	b580      	push	{r7, lr}
 8002a48:	b082      	sub	sp, #8
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	68da      	ldr	r2, [r3, #12]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a5c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2220      	movs	r2, #32
 8002a62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f7ff fefc 	bl	8002864 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002a6c:	2300      	movs	r3, #0
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3708      	adds	r7, #8
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}

08002a76 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002a76:	b580      	push	{r7, lr}
 8002a78:	b08c      	sub	sp, #48	; 0x30
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	2b22      	cmp	r3, #34	; 0x22
 8002a88:	f040 80ab 	bne.w	8002be2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a94:	d117      	bne.n	8002ac6 <UART_Receive_IT+0x50>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d113      	bne.n	8002ac6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ab4:	b29a      	uxth	r2, r3
 8002ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ab8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002abe:	1c9a      	adds	r2, r3, #2
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	629a      	str	r2, [r3, #40]	; 0x28
 8002ac4:	e026      	b.n	8002b14 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aca:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002acc:	2300      	movs	r3, #0
 8002ace:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ad8:	d007      	beq.n	8002aea <UART_Receive_IT+0x74>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d10a      	bne.n	8002af8 <UART_Receive_IT+0x82>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	691b      	ldr	r3, [r3, #16]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d106      	bne.n	8002af8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	b2da      	uxtb	r2, r3
 8002af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002af4:	701a      	strb	r2, [r3, #0]
 8002af6:	e008      	b.n	8002b0a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b04:	b2da      	uxtb	r2, r3
 8002b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b08:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b0e:	1c5a      	adds	r2, r3, #1
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	3b01      	subs	r3, #1
 8002b1c:	b29b      	uxth	r3, r3
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	4619      	mov	r1, r3
 8002b22:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d15a      	bne.n	8002bde <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	68da      	ldr	r2, [r3, #12]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f022 0220 	bic.w	r2, r2, #32
 8002b36:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	68da      	ldr	r2, [r3, #12]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b46:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	695a      	ldr	r2, [r3, #20]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f022 0201 	bic.w	r2, r2, #1
 8002b56:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2220      	movs	r2, #32
 8002b5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d135      	bne.n	8002bd4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	330c      	adds	r3, #12
 8002b74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	e853 3f00 	ldrex	r3, [r3]
 8002b7c:	613b      	str	r3, [r7, #16]
   return(result);
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	f023 0310 	bic.w	r3, r3, #16
 8002b84:	627b      	str	r3, [r7, #36]	; 0x24
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	330c      	adds	r3, #12
 8002b8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b8e:	623a      	str	r2, [r7, #32]
 8002b90:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b92:	69f9      	ldr	r1, [r7, #28]
 8002b94:	6a3a      	ldr	r2, [r7, #32]
 8002b96:	e841 2300 	strex	r3, r2, [r1]
 8002b9a:	61bb      	str	r3, [r7, #24]
   return(result);
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d1e5      	bne.n	8002b6e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0310 	and.w	r3, r3, #16
 8002bac:	2b10      	cmp	r3, #16
 8002bae:	d10a      	bne.n	8002bc6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	60fb      	str	r3, [r7, #12]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	60fb      	str	r3, [r7, #12]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	60fb      	str	r3, [r7, #12]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002bca:	4619      	mov	r1, r3
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	f7ff fe67 	bl	80028a0 <HAL_UARTEx_RxEventCallback>
 8002bd2:	e002      	b.n	8002bda <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f7ff fe4f 	bl	8002878 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	e002      	b.n	8002be4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002bde:	2300      	movs	r3, #0
 8002be0:	e000      	b.n	8002be4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002be2:	2302      	movs	r3, #2
  }
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3730      	adds	r7, #48	; 0x30
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}

08002bec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002bec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bf0:	b0c0      	sub	sp, #256	; 0x100
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	691b      	ldr	r3, [r3, #16]
 8002c00:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c08:	68d9      	ldr	r1, [r3, #12]
 8002c0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	ea40 0301 	orr.w	r3, r0, r1
 8002c14:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002c16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c1a:	689a      	ldr	r2, [r3, #8]
 8002c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c20:	691b      	ldr	r3, [r3, #16]
 8002c22:	431a      	orrs	r2, r3
 8002c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c28:	695b      	ldr	r3, [r3, #20]
 8002c2a:	431a      	orrs	r2, r3
 8002c2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c30:	69db      	ldr	r3, [r3, #28]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002c44:	f021 010c 	bic.w	r1, r1, #12
 8002c48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002c52:	430b      	orrs	r3, r1
 8002c54:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	695b      	ldr	r3, [r3, #20]
 8002c5e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002c62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c66:	6999      	ldr	r1, [r3, #24]
 8002c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	ea40 0301 	orr.w	r3, r0, r1
 8002c72:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002c74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	4b8f      	ldr	r3, [pc, #572]	; (8002eb8 <UART_SetConfig+0x2cc>)
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d005      	beq.n	8002c8c <UART_SetConfig+0xa0>
 8002c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	4b8d      	ldr	r3, [pc, #564]	; (8002ebc <UART_SetConfig+0x2d0>)
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d104      	bne.n	8002c96 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002c8c:	f7fe fe2c 	bl	80018e8 <HAL_RCC_GetPCLK2Freq>
 8002c90:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002c94:	e003      	b.n	8002c9e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002c96:	f7fe fe13 	bl	80018c0 <HAL_RCC_GetPCLK1Freq>
 8002c9a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ca2:	69db      	ldr	r3, [r3, #28]
 8002ca4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ca8:	f040 810c 	bne.w	8002ec4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002cac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002cb6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002cba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002cbe:	4622      	mov	r2, r4
 8002cc0:	462b      	mov	r3, r5
 8002cc2:	1891      	adds	r1, r2, r2
 8002cc4:	65b9      	str	r1, [r7, #88]	; 0x58
 8002cc6:	415b      	adcs	r3, r3
 8002cc8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002cca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002cce:	4621      	mov	r1, r4
 8002cd0:	eb12 0801 	adds.w	r8, r2, r1
 8002cd4:	4629      	mov	r1, r5
 8002cd6:	eb43 0901 	adc.w	r9, r3, r1
 8002cda:	f04f 0200 	mov.w	r2, #0
 8002cde:	f04f 0300 	mov.w	r3, #0
 8002ce2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ce6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002cea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002cee:	4690      	mov	r8, r2
 8002cf0:	4699      	mov	r9, r3
 8002cf2:	4623      	mov	r3, r4
 8002cf4:	eb18 0303 	adds.w	r3, r8, r3
 8002cf8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002cfc:	462b      	mov	r3, r5
 8002cfe:	eb49 0303 	adc.w	r3, r9, r3
 8002d02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002d06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002d12:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002d16:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002d1a:	460b      	mov	r3, r1
 8002d1c:	18db      	adds	r3, r3, r3
 8002d1e:	653b      	str	r3, [r7, #80]	; 0x50
 8002d20:	4613      	mov	r3, r2
 8002d22:	eb42 0303 	adc.w	r3, r2, r3
 8002d26:	657b      	str	r3, [r7, #84]	; 0x54
 8002d28:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002d2c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002d30:	f7fd fa68 	bl	8000204 <__aeabi_uldivmod>
 8002d34:	4602      	mov	r2, r0
 8002d36:	460b      	mov	r3, r1
 8002d38:	4b61      	ldr	r3, [pc, #388]	; (8002ec0 <UART_SetConfig+0x2d4>)
 8002d3a:	fba3 2302 	umull	r2, r3, r3, r2
 8002d3e:	095b      	lsrs	r3, r3, #5
 8002d40:	011c      	lsls	r4, r3, #4
 8002d42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d46:	2200      	movs	r2, #0
 8002d48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002d4c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002d50:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002d54:	4642      	mov	r2, r8
 8002d56:	464b      	mov	r3, r9
 8002d58:	1891      	adds	r1, r2, r2
 8002d5a:	64b9      	str	r1, [r7, #72]	; 0x48
 8002d5c:	415b      	adcs	r3, r3
 8002d5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d60:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002d64:	4641      	mov	r1, r8
 8002d66:	eb12 0a01 	adds.w	sl, r2, r1
 8002d6a:	4649      	mov	r1, r9
 8002d6c:	eb43 0b01 	adc.w	fp, r3, r1
 8002d70:	f04f 0200 	mov.w	r2, #0
 8002d74:	f04f 0300 	mov.w	r3, #0
 8002d78:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002d7c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002d80:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d84:	4692      	mov	sl, r2
 8002d86:	469b      	mov	fp, r3
 8002d88:	4643      	mov	r3, r8
 8002d8a:	eb1a 0303 	adds.w	r3, sl, r3
 8002d8e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002d92:	464b      	mov	r3, r9
 8002d94:	eb4b 0303 	adc.w	r3, fp, r3
 8002d98:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002da8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002dac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002db0:	460b      	mov	r3, r1
 8002db2:	18db      	adds	r3, r3, r3
 8002db4:	643b      	str	r3, [r7, #64]	; 0x40
 8002db6:	4613      	mov	r3, r2
 8002db8:	eb42 0303 	adc.w	r3, r2, r3
 8002dbc:	647b      	str	r3, [r7, #68]	; 0x44
 8002dbe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002dc2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002dc6:	f7fd fa1d 	bl	8000204 <__aeabi_uldivmod>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	460b      	mov	r3, r1
 8002dce:	4611      	mov	r1, r2
 8002dd0:	4b3b      	ldr	r3, [pc, #236]	; (8002ec0 <UART_SetConfig+0x2d4>)
 8002dd2:	fba3 2301 	umull	r2, r3, r3, r1
 8002dd6:	095b      	lsrs	r3, r3, #5
 8002dd8:	2264      	movs	r2, #100	; 0x64
 8002dda:	fb02 f303 	mul.w	r3, r2, r3
 8002dde:	1acb      	subs	r3, r1, r3
 8002de0:	00db      	lsls	r3, r3, #3
 8002de2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002de6:	4b36      	ldr	r3, [pc, #216]	; (8002ec0 <UART_SetConfig+0x2d4>)
 8002de8:	fba3 2302 	umull	r2, r3, r3, r2
 8002dec:	095b      	lsrs	r3, r3, #5
 8002dee:	005b      	lsls	r3, r3, #1
 8002df0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002df4:	441c      	add	r4, r3
 8002df6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002e00:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002e04:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002e08:	4642      	mov	r2, r8
 8002e0a:	464b      	mov	r3, r9
 8002e0c:	1891      	adds	r1, r2, r2
 8002e0e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002e10:	415b      	adcs	r3, r3
 8002e12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e14:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002e18:	4641      	mov	r1, r8
 8002e1a:	1851      	adds	r1, r2, r1
 8002e1c:	6339      	str	r1, [r7, #48]	; 0x30
 8002e1e:	4649      	mov	r1, r9
 8002e20:	414b      	adcs	r3, r1
 8002e22:	637b      	str	r3, [r7, #52]	; 0x34
 8002e24:	f04f 0200 	mov.w	r2, #0
 8002e28:	f04f 0300 	mov.w	r3, #0
 8002e2c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002e30:	4659      	mov	r1, fp
 8002e32:	00cb      	lsls	r3, r1, #3
 8002e34:	4651      	mov	r1, sl
 8002e36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e3a:	4651      	mov	r1, sl
 8002e3c:	00ca      	lsls	r2, r1, #3
 8002e3e:	4610      	mov	r0, r2
 8002e40:	4619      	mov	r1, r3
 8002e42:	4603      	mov	r3, r0
 8002e44:	4642      	mov	r2, r8
 8002e46:	189b      	adds	r3, r3, r2
 8002e48:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002e4c:	464b      	mov	r3, r9
 8002e4e:	460a      	mov	r2, r1
 8002e50:	eb42 0303 	adc.w	r3, r2, r3
 8002e54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002e64:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002e68:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	18db      	adds	r3, r3, r3
 8002e70:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e72:	4613      	mov	r3, r2
 8002e74:	eb42 0303 	adc.w	r3, r2, r3
 8002e78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e7a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002e7e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002e82:	f7fd f9bf 	bl	8000204 <__aeabi_uldivmod>
 8002e86:	4602      	mov	r2, r0
 8002e88:	460b      	mov	r3, r1
 8002e8a:	4b0d      	ldr	r3, [pc, #52]	; (8002ec0 <UART_SetConfig+0x2d4>)
 8002e8c:	fba3 1302 	umull	r1, r3, r3, r2
 8002e90:	095b      	lsrs	r3, r3, #5
 8002e92:	2164      	movs	r1, #100	; 0x64
 8002e94:	fb01 f303 	mul.w	r3, r1, r3
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	00db      	lsls	r3, r3, #3
 8002e9c:	3332      	adds	r3, #50	; 0x32
 8002e9e:	4a08      	ldr	r2, [pc, #32]	; (8002ec0 <UART_SetConfig+0x2d4>)
 8002ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ea4:	095b      	lsrs	r3, r3, #5
 8002ea6:	f003 0207 	and.w	r2, r3, #7
 8002eaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4422      	add	r2, r4
 8002eb2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002eb4:	e105      	b.n	80030c2 <UART_SetConfig+0x4d6>
 8002eb6:	bf00      	nop
 8002eb8:	40011000 	.word	0x40011000
 8002ebc:	40011400 	.word	0x40011400
 8002ec0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ec4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002ece:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002ed2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002ed6:	4642      	mov	r2, r8
 8002ed8:	464b      	mov	r3, r9
 8002eda:	1891      	adds	r1, r2, r2
 8002edc:	6239      	str	r1, [r7, #32]
 8002ede:	415b      	adcs	r3, r3
 8002ee0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ee2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002ee6:	4641      	mov	r1, r8
 8002ee8:	1854      	adds	r4, r2, r1
 8002eea:	4649      	mov	r1, r9
 8002eec:	eb43 0501 	adc.w	r5, r3, r1
 8002ef0:	f04f 0200 	mov.w	r2, #0
 8002ef4:	f04f 0300 	mov.w	r3, #0
 8002ef8:	00eb      	lsls	r3, r5, #3
 8002efa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002efe:	00e2      	lsls	r2, r4, #3
 8002f00:	4614      	mov	r4, r2
 8002f02:	461d      	mov	r5, r3
 8002f04:	4643      	mov	r3, r8
 8002f06:	18e3      	adds	r3, r4, r3
 8002f08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002f0c:	464b      	mov	r3, r9
 8002f0e:	eb45 0303 	adc.w	r3, r5, r3
 8002f12:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002f16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002f22:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002f26:	f04f 0200 	mov.w	r2, #0
 8002f2a:	f04f 0300 	mov.w	r3, #0
 8002f2e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002f32:	4629      	mov	r1, r5
 8002f34:	008b      	lsls	r3, r1, #2
 8002f36:	4621      	mov	r1, r4
 8002f38:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f3c:	4621      	mov	r1, r4
 8002f3e:	008a      	lsls	r2, r1, #2
 8002f40:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002f44:	f7fd f95e 	bl	8000204 <__aeabi_uldivmod>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	460b      	mov	r3, r1
 8002f4c:	4b60      	ldr	r3, [pc, #384]	; (80030d0 <UART_SetConfig+0x4e4>)
 8002f4e:	fba3 2302 	umull	r2, r3, r3, r2
 8002f52:	095b      	lsrs	r3, r3, #5
 8002f54:	011c      	lsls	r4, r3, #4
 8002f56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002f60:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002f64:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002f68:	4642      	mov	r2, r8
 8002f6a:	464b      	mov	r3, r9
 8002f6c:	1891      	adds	r1, r2, r2
 8002f6e:	61b9      	str	r1, [r7, #24]
 8002f70:	415b      	adcs	r3, r3
 8002f72:	61fb      	str	r3, [r7, #28]
 8002f74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f78:	4641      	mov	r1, r8
 8002f7a:	1851      	adds	r1, r2, r1
 8002f7c:	6139      	str	r1, [r7, #16]
 8002f7e:	4649      	mov	r1, r9
 8002f80:	414b      	adcs	r3, r1
 8002f82:	617b      	str	r3, [r7, #20]
 8002f84:	f04f 0200 	mov.w	r2, #0
 8002f88:	f04f 0300 	mov.w	r3, #0
 8002f8c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f90:	4659      	mov	r1, fp
 8002f92:	00cb      	lsls	r3, r1, #3
 8002f94:	4651      	mov	r1, sl
 8002f96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f9a:	4651      	mov	r1, sl
 8002f9c:	00ca      	lsls	r2, r1, #3
 8002f9e:	4610      	mov	r0, r2
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	4642      	mov	r2, r8
 8002fa6:	189b      	adds	r3, r3, r2
 8002fa8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002fac:	464b      	mov	r3, r9
 8002fae:	460a      	mov	r2, r1
 8002fb0:	eb42 0303 	adc.w	r3, r2, r3
 8002fb4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	67bb      	str	r3, [r7, #120]	; 0x78
 8002fc2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002fc4:	f04f 0200 	mov.w	r2, #0
 8002fc8:	f04f 0300 	mov.w	r3, #0
 8002fcc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002fd0:	4649      	mov	r1, r9
 8002fd2:	008b      	lsls	r3, r1, #2
 8002fd4:	4641      	mov	r1, r8
 8002fd6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002fda:	4641      	mov	r1, r8
 8002fdc:	008a      	lsls	r2, r1, #2
 8002fde:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002fe2:	f7fd f90f 	bl	8000204 <__aeabi_uldivmod>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	460b      	mov	r3, r1
 8002fea:	4b39      	ldr	r3, [pc, #228]	; (80030d0 <UART_SetConfig+0x4e4>)
 8002fec:	fba3 1302 	umull	r1, r3, r3, r2
 8002ff0:	095b      	lsrs	r3, r3, #5
 8002ff2:	2164      	movs	r1, #100	; 0x64
 8002ff4:	fb01 f303 	mul.w	r3, r1, r3
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	011b      	lsls	r3, r3, #4
 8002ffc:	3332      	adds	r3, #50	; 0x32
 8002ffe:	4a34      	ldr	r2, [pc, #208]	; (80030d0 <UART_SetConfig+0x4e4>)
 8003000:	fba2 2303 	umull	r2, r3, r2, r3
 8003004:	095b      	lsrs	r3, r3, #5
 8003006:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800300a:	441c      	add	r4, r3
 800300c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003010:	2200      	movs	r2, #0
 8003012:	673b      	str	r3, [r7, #112]	; 0x70
 8003014:	677a      	str	r2, [r7, #116]	; 0x74
 8003016:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800301a:	4642      	mov	r2, r8
 800301c:	464b      	mov	r3, r9
 800301e:	1891      	adds	r1, r2, r2
 8003020:	60b9      	str	r1, [r7, #8]
 8003022:	415b      	adcs	r3, r3
 8003024:	60fb      	str	r3, [r7, #12]
 8003026:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800302a:	4641      	mov	r1, r8
 800302c:	1851      	adds	r1, r2, r1
 800302e:	6039      	str	r1, [r7, #0]
 8003030:	4649      	mov	r1, r9
 8003032:	414b      	adcs	r3, r1
 8003034:	607b      	str	r3, [r7, #4]
 8003036:	f04f 0200 	mov.w	r2, #0
 800303a:	f04f 0300 	mov.w	r3, #0
 800303e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003042:	4659      	mov	r1, fp
 8003044:	00cb      	lsls	r3, r1, #3
 8003046:	4651      	mov	r1, sl
 8003048:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800304c:	4651      	mov	r1, sl
 800304e:	00ca      	lsls	r2, r1, #3
 8003050:	4610      	mov	r0, r2
 8003052:	4619      	mov	r1, r3
 8003054:	4603      	mov	r3, r0
 8003056:	4642      	mov	r2, r8
 8003058:	189b      	adds	r3, r3, r2
 800305a:	66bb      	str	r3, [r7, #104]	; 0x68
 800305c:	464b      	mov	r3, r9
 800305e:	460a      	mov	r2, r1
 8003060:	eb42 0303 	adc.w	r3, r2, r3
 8003064:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	663b      	str	r3, [r7, #96]	; 0x60
 8003070:	667a      	str	r2, [r7, #100]	; 0x64
 8003072:	f04f 0200 	mov.w	r2, #0
 8003076:	f04f 0300 	mov.w	r3, #0
 800307a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800307e:	4649      	mov	r1, r9
 8003080:	008b      	lsls	r3, r1, #2
 8003082:	4641      	mov	r1, r8
 8003084:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003088:	4641      	mov	r1, r8
 800308a:	008a      	lsls	r2, r1, #2
 800308c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003090:	f7fd f8b8 	bl	8000204 <__aeabi_uldivmod>
 8003094:	4602      	mov	r2, r0
 8003096:	460b      	mov	r3, r1
 8003098:	4b0d      	ldr	r3, [pc, #52]	; (80030d0 <UART_SetConfig+0x4e4>)
 800309a:	fba3 1302 	umull	r1, r3, r3, r2
 800309e:	095b      	lsrs	r3, r3, #5
 80030a0:	2164      	movs	r1, #100	; 0x64
 80030a2:	fb01 f303 	mul.w	r3, r1, r3
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	011b      	lsls	r3, r3, #4
 80030aa:	3332      	adds	r3, #50	; 0x32
 80030ac:	4a08      	ldr	r2, [pc, #32]	; (80030d0 <UART_SetConfig+0x4e4>)
 80030ae:	fba2 2303 	umull	r2, r3, r2, r3
 80030b2:	095b      	lsrs	r3, r3, #5
 80030b4:	f003 020f 	and.w	r2, r3, #15
 80030b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4422      	add	r2, r4
 80030c0:	609a      	str	r2, [r3, #8]
}
 80030c2:	bf00      	nop
 80030c4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80030c8:	46bd      	mov	sp, r7
 80030ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030ce:	bf00      	nop
 80030d0:	51eb851f 	.word	0x51eb851f

080030d4 <__errno>:
 80030d4:	4b01      	ldr	r3, [pc, #4]	; (80030dc <__errno+0x8>)
 80030d6:	6818      	ldr	r0, [r3, #0]
 80030d8:	4770      	bx	lr
 80030da:	bf00      	nop
 80030dc:	2000000c 	.word	0x2000000c

080030e0 <__libc_init_array>:
 80030e0:	b570      	push	{r4, r5, r6, lr}
 80030e2:	4d0d      	ldr	r5, [pc, #52]	; (8003118 <__libc_init_array+0x38>)
 80030e4:	4c0d      	ldr	r4, [pc, #52]	; (800311c <__libc_init_array+0x3c>)
 80030e6:	1b64      	subs	r4, r4, r5
 80030e8:	10a4      	asrs	r4, r4, #2
 80030ea:	2600      	movs	r6, #0
 80030ec:	42a6      	cmp	r6, r4
 80030ee:	d109      	bne.n	8003104 <__libc_init_array+0x24>
 80030f0:	4d0b      	ldr	r5, [pc, #44]	; (8003120 <__libc_init_array+0x40>)
 80030f2:	4c0c      	ldr	r4, [pc, #48]	; (8003124 <__libc_init_array+0x44>)
 80030f4:	f000 fdf4 	bl	8003ce0 <_init>
 80030f8:	1b64      	subs	r4, r4, r5
 80030fa:	10a4      	asrs	r4, r4, #2
 80030fc:	2600      	movs	r6, #0
 80030fe:	42a6      	cmp	r6, r4
 8003100:	d105      	bne.n	800310e <__libc_init_array+0x2e>
 8003102:	bd70      	pop	{r4, r5, r6, pc}
 8003104:	f855 3b04 	ldr.w	r3, [r5], #4
 8003108:	4798      	blx	r3
 800310a:	3601      	adds	r6, #1
 800310c:	e7ee      	b.n	80030ec <__libc_init_array+0xc>
 800310e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003112:	4798      	blx	r3
 8003114:	3601      	adds	r6, #1
 8003116:	e7f2      	b.n	80030fe <__libc_init_array+0x1e>
 8003118:	08003dac 	.word	0x08003dac
 800311c:	08003dac 	.word	0x08003dac
 8003120:	08003dac 	.word	0x08003dac
 8003124:	08003db0 	.word	0x08003db0

08003128 <memset>:
 8003128:	4402      	add	r2, r0
 800312a:	4603      	mov	r3, r0
 800312c:	4293      	cmp	r3, r2
 800312e:	d100      	bne.n	8003132 <memset+0xa>
 8003130:	4770      	bx	lr
 8003132:	f803 1b01 	strb.w	r1, [r3], #1
 8003136:	e7f9      	b.n	800312c <memset+0x4>

08003138 <_puts_r>:
 8003138:	b570      	push	{r4, r5, r6, lr}
 800313a:	460e      	mov	r6, r1
 800313c:	4605      	mov	r5, r0
 800313e:	b118      	cbz	r0, 8003148 <_puts_r+0x10>
 8003140:	6983      	ldr	r3, [r0, #24]
 8003142:	b90b      	cbnz	r3, 8003148 <_puts_r+0x10>
 8003144:	f000 fb16 	bl	8003774 <__sinit>
 8003148:	69ab      	ldr	r3, [r5, #24]
 800314a:	68ac      	ldr	r4, [r5, #8]
 800314c:	b913      	cbnz	r3, 8003154 <_puts_r+0x1c>
 800314e:	4628      	mov	r0, r5
 8003150:	f000 fb10 	bl	8003774 <__sinit>
 8003154:	4b2c      	ldr	r3, [pc, #176]	; (8003208 <_puts_r+0xd0>)
 8003156:	429c      	cmp	r4, r3
 8003158:	d120      	bne.n	800319c <_puts_r+0x64>
 800315a:	686c      	ldr	r4, [r5, #4]
 800315c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800315e:	07db      	lsls	r3, r3, #31
 8003160:	d405      	bmi.n	800316e <_puts_r+0x36>
 8003162:	89a3      	ldrh	r3, [r4, #12]
 8003164:	0598      	lsls	r0, r3, #22
 8003166:	d402      	bmi.n	800316e <_puts_r+0x36>
 8003168:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800316a:	f000 fba1 	bl	80038b0 <__retarget_lock_acquire_recursive>
 800316e:	89a3      	ldrh	r3, [r4, #12]
 8003170:	0719      	lsls	r1, r3, #28
 8003172:	d51d      	bpl.n	80031b0 <_puts_r+0x78>
 8003174:	6923      	ldr	r3, [r4, #16]
 8003176:	b1db      	cbz	r3, 80031b0 <_puts_r+0x78>
 8003178:	3e01      	subs	r6, #1
 800317a:	68a3      	ldr	r3, [r4, #8]
 800317c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003180:	3b01      	subs	r3, #1
 8003182:	60a3      	str	r3, [r4, #8]
 8003184:	bb39      	cbnz	r1, 80031d6 <_puts_r+0x9e>
 8003186:	2b00      	cmp	r3, #0
 8003188:	da38      	bge.n	80031fc <_puts_r+0xc4>
 800318a:	4622      	mov	r2, r4
 800318c:	210a      	movs	r1, #10
 800318e:	4628      	mov	r0, r5
 8003190:	f000 f916 	bl	80033c0 <__swbuf_r>
 8003194:	3001      	adds	r0, #1
 8003196:	d011      	beq.n	80031bc <_puts_r+0x84>
 8003198:	250a      	movs	r5, #10
 800319a:	e011      	b.n	80031c0 <_puts_r+0x88>
 800319c:	4b1b      	ldr	r3, [pc, #108]	; (800320c <_puts_r+0xd4>)
 800319e:	429c      	cmp	r4, r3
 80031a0:	d101      	bne.n	80031a6 <_puts_r+0x6e>
 80031a2:	68ac      	ldr	r4, [r5, #8]
 80031a4:	e7da      	b.n	800315c <_puts_r+0x24>
 80031a6:	4b1a      	ldr	r3, [pc, #104]	; (8003210 <_puts_r+0xd8>)
 80031a8:	429c      	cmp	r4, r3
 80031aa:	bf08      	it	eq
 80031ac:	68ec      	ldreq	r4, [r5, #12]
 80031ae:	e7d5      	b.n	800315c <_puts_r+0x24>
 80031b0:	4621      	mov	r1, r4
 80031b2:	4628      	mov	r0, r5
 80031b4:	f000 f956 	bl	8003464 <__swsetup_r>
 80031b8:	2800      	cmp	r0, #0
 80031ba:	d0dd      	beq.n	8003178 <_puts_r+0x40>
 80031bc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80031c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80031c2:	07da      	lsls	r2, r3, #31
 80031c4:	d405      	bmi.n	80031d2 <_puts_r+0x9a>
 80031c6:	89a3      	ldrh	r3, [r4, #12]
 80031c8:	059b      	lsls	r3, r3, #22
 80031ca:	d402      	bmi.n	80031d2 <_puts_r+0x9a>
 80031cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80031ce:	f000 fb70 	bl	80038b2 <__retarget_lock_release_recursive>
 80031d2:	4628      	mov	r0, r5
 80031d4:	bd70      	pop	{r4, r5, r6, pc}
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	da04      	bge.n	80031e4 <_puts_r+0xac>
 80031da:	69a2      	ldr	r2, [r4, #24]
 80031dc:	429a      	cmp	r2, r3
 80031de:	dc06      	bgt.n	80031ee <_puts_r+0xb6>
 80031e0:	290a      	cmp	r1, #10
 80031e2:	d004      	beq.n	80031ee <_puts_r+0xb6>
 80031e4:	6823      	ldr	r3, [r4, #0]
 80031e6:	1c5a      	adds	r2, r3, #1
 80031e8:	6022      	str	r2, [r4, #0]
 80031ea:	7019      	strb	r1, [r3, #0]
 80031ec:	e7c5      	b.n	800317a <_puts_r+0x42>
 80031ee:	4622      	mov	r2, r4
 80031f0:	4628      	mov	r0, r5
 80031f2:	f000 f8e5 	bl	80033c0 <__swbuf_r>
 80031f6:	3001      	adds	r0, #1
 80031f8:	d1bf      	bne.n	800317a <_puts_r+0x42>
 80031fa:	e7df      	b.n	80031bc <_puts_r+0x84>
 80031fc:	6823      	ldr	r3, [r4, #0]
 80031fe:	250a      	movs	r5, #10
 8003200:	1c5a      	adds	r2, r3, #1
 8003202:	6022      	str	r2, [r4, #0]
 8003204:	701d      	strb	r5, [r3, #0]
 8003206:	e7db      	b.n	80031c0 <_puts_r+0x88>
 8003208:	08003d64 	.word	0x08003d64
 800320c:	08003d84 	.word	0x08003d84
 8003210:	08003d44 	.word	0x08003d44

08003214 <puts>:
 8003214:	4b02      	ldr	r3, [pc, #8]	; (8003220 <puts+0xc>)
 8003216:	4601      	mov	r1, r0
 8003218:	6818      	ldr	r0, [r3, #0]
 800321a:	f7ff bf8d 	b.w	8003138 <_puts_r>
 800321e:	bf00      	nop
 8003220:	2000000c 	.word	0x2000000c

08003224 <setbuf>:
 8003224:	2900      	cmp	r1, #0
 8003226:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800322a:	bf0c      	ite	eq
 800322c:	2202      	moveq	r2, #2
 800322e:	2200      	movne	r2, #0
 8003230:	f000 b800 	b.w	8003234 <setvbuf>

08003234 <setvbuf>:
 8003234:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003238:	461d      	mov	r5, r3
 800323a:	4b5d      	ldr	r3, [pc, #372]	; (80033b0 <setvbuf+0x17c>)
 800323c:	681f      	ldr	r7, [r3, #0]
 800323e:	4604      	mov	r4, r0
 8003240:	460e      	mov	r6, r1
 8003242:	4690      	mov	r8, r2
 8003244:	b127      	cbz	r7, 8003250 <setvbuf+0x1c>
 8003246:	69bb      	ldr	r3, [r7, #24]
 8003248:	b913      	cbnz	r3, 8003250 <setvbuf+0x1c>
 800324a:	4638      	mov	r0, r7
 800324c:	f000 fa92 	bl	8003774 <__sinit>
 8003250:	4b58      	ldr	r3, [pc, #352]	; (80033b4 <setvbuf+0x180>)
 8003252:	429c      	cmp	r4, r3
 8003254:	d167      	bne.n	8003326 <setvbuf+0xf2>
 8003256:	687c      	ldr	r4, [r7, #4]
 8003258:	f1b8 0f02 	cmp.w	r8, #2
 800325c:	d006      	beq.n	800326c <setvbuf+0x38>
 800325e:	f1b8 0f01 	cmp.w	r8, #1
 8003262:	f200 809f 	bhi.w	80033a4 <setvbuf+0x170>
 8003266:	2d00      	cmp	r5, #0
 8003268:	f2c0 809c 	blt.w	80033a4 <setvbuf+0x170>
 800326c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800326e:	07db      	lsls	r3, r3, #31
 8003270:	d405      	bmi.n	800327e <setvbuf+0x4a>
 8003272:	89a3      	ldrh	r3, [r4, #12]
 8003274:	0598      	lsls	r0, r3, #22
 8003276:	d402      	bmi.n	800327e <setvbuf+0x4a>
 8003278:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800327a:	f000 fb19 	bl	80038b0 <__retarget_lock_acquire_recursive>
 800327e:	4621      	mov	r1, r4
 8003280:	4638      	mov	r0, r7
 8003282:	f000 f9e3 	bl	800364c <_fflush_r>
 8003286:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003288:	b141      	cbz	r1, 800329c <setvbuf+0x68>
 800328a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800328e:	4299      	cmp	r1, r3
 8003290:	d002      	beq.n	8003298 <setvbuf+0x64>
 8003292:	4638      	mov	r0, r7
 8003294:	f000 fb7c 	bl	8003990 <_free_r>
 8003298:	2300      	movs	r3, #0
 800329a:	6363      	str	r3, [r4, #52]	; 0x34
 800329c:	2300      	movs	r3, #0
 800329e:	61a3      	str	r3, [r4, #24]
 80032a0:	6063      	str	r3, [r4, #4]
 80032a2:	89a3      	ldrh	r3, [r4, #12]
 80032a4:	0619      	lsls	r1, r3, #24
 80032a6:	d503      	bpl.n	80032b0 <setvbuf+0x7c>
 80032a8:	6921      	ldr	r1, [r4, #16]
 80032aa:	4638      	mov	r0, r7
 80032ac:	f000 fb70 	bl	8003990 <_free_r>
 80032b0:	89a3      	ldrh	r3, [r4, #12]
 80032b2:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80032b6:	f023 0303 	bic.w	r3, r3, #3
 80032ba:	f1b8 0f02 	cmp.w	r8, #2
 80032be:	81a3      	strh	r3, [r4, #12]
 80032c0:	d06c      	beq.n	800339c <setvbuf+0x168>
 80032c2:	ab01      	add	r3, sp, #4
 80032c4:	466a      	mov	r2, sp
 80032c6:	4621      	mov	r1, r4
 80032c8:	4638      	mov	r0, r7
 80032ca:	f000 faf3 	bl	80038b4 <__swhatbuf_r>
 80032ce:	89a3      	ldrh	r3, [r4, #12]
 80032d0:	4318      	orrs	r0, r3
 80032d2:	81a0      	strh	r0, [r4, #12]
 80032d4:	2d00      	cmp	r5, #0
 80032d6:	d130      	bne.n	800333a <setvbuf+0x106>
 80032d8:	9d00      	ldr	r5, [sp, #0]
 80032da:	4628      	mov	r0, r5
 80032dc:	f000 fb50 	bl	8003980 <malloc>
 80032e0:	4606      	mov	r6, r0
 80032e2:	2800      	cmp	r0, #0
 80032e4:	d155      	bne.n	8003392 <setvbuf+0x15e>
 80032e6:	f8dd 9000 	ldr.w	r9, [sp]
 80032ea:	45a9      	cmp	r9, r5
 80032ec:	d14a      	bne.n	8003384 <setvbuf+0x150>
 80032ee:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80032f2:	2200      	movs	r2, #0
 80032f4:	60a2      	str	r2, [r4, #8]
 80032f6:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80032fa:	6022      	str	r2, [r4, #0]
 80032fc:	6122      	str	r2, [r4, #16]
 80032fe:	2201      	movs	r2, #1
 8003300:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003304:	6162      	str	r2, [r4, #20]
 8003306:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003308:	f043 0302 	orr.w	r3, r3, #2
 800330c:	07d2      	lsls	r2, r2, #31
 800330e:	81a3      	strh	r3, [r4, #12]
 8003310:	d405      	bmi.n	800331e <setvbuf+0xea>
 8003312:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003316:	d102      	bne.n	800331e <setvbuf+0xea>
 8003318:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800331a:	f000 faca 	bl	80038b2 <__retarget_lock_release_recursive>
 800331e:	4628      	mov	r0, r5
 8003320:	b003      	add	sp, #12
 8003322:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003326:	4b24      	ldr	r3, [pc, #144]	; (80033b8 <setvbuf+0x184>)
 8003328:	429c      	cmp	r4, r3
 800332a:	d101      	bne.n	8003330 <setvbuf+0xfc>
 800332c:	68bc      	ldr	r4, [r7, #8]
 800332e:	e793      	b.n	8003258 <setvbuf+0x24>
 8003330:	4b22      	ldr	r3, [pc, #136]	; (80033bc <setvbuf+0x188>)
 8003332:	429c      	cmp	r4, r3
 8003334:	bf08      	it	eq
 8003336:	68fc      	ldreq	r4, [r7, #12]
 8003338:	e78e      	b.n	8003258 <setvbuf+0x24>
 800333a:	2e00      	cmp	r6, #0
 800333c:	d0cd      	beq.n	80032da <setvbuf+0xa6>
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	b913      	cbnz	r3, 8003348 <setvbuf+0x114>
 8003342:	4638      	mov	r0, r7
 8003344:	f000 fa16 	bl	8003774 <__sinit>
 8003348:	f1b8 0f01 	cmp.w	r8, #1
 800334c:	bf08      	it	eq
 800334e:	89a3      	ldrheq	r3, [r4, #12]
 8003350:	6026      	str	r6, [r4, #0]
 8003352:	bf04      	itt	eq
 8003354:	f043 0301 	orreq.w	r3, r3, #1
 8003358:	81a3      	strheq	r3, [r4, #12]
 800335a:	89a2      	ldrh	r2, [r4, #12]
 800335c:	f012 0308 	ands.w	r3, r2, #8
 8003360:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8003364:	d01c      	beq.n	80033a0 <setvbuf+0x16c>
 8003366:	07d3      	lsls	r3, r2, #31
 8003368:	bf41      	itttt	mi
 800336a:	2300      	movmi	r3, #0
 800336c:	426d      	negmi	r5, r5
 800336e:	60a3      	strmi	r3, [r4, #8]
 8003370:	61a5      	strmi	r5, [r4, #24]
 8003372:	bf58      	it	pl
 8003374:	60a5      	strpl	r5, [r4, #8]
 8003376:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8003378:	f015 0501 	ands.w	r5, r5, #1
 800337c:	d115      	bne.n	80033aa <setvbuf+0x176>
 800337e:	f412 7f00 	tst.w	r2, #512	; 0x200
 8003382:	e7c8      	b.n	8003316 <setvbuf+0xe2>
 8003384:	4648      	mov	r0, r9
 8003386:	f000 fafb 	bl	8003980 <malloc>
 800338a:	4606      	mov	r6, r0
 800338c:	2800      	cmp	r0, #0
 800338e:	d0ae      	beq.n	80032ee <setvbuf+0xba>
 8003390:	464d      	mov	r5, r9
 8003392:	89a3      	ldrh	r3, [r4, #12]
 8003394:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003398:	81a3      	strh	r3, [r4, #12]
 800339a:	e7d0      	b.n	800333e <setvbuf+0x10a>
 800339c:	2500      	movs	r5, #0
 800339e:	e7a8      	b.n	80032f2 <setvbuf+0xbe>
 80033a0:	60a3      	str	r3, [r4, #8]
 80033a2:	e7e8      	b.n	8003376 <setvbuf+0x142>
 80033a4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80033a8:	e7b9      	b.n	800331e <setvbuf+0xea>
 80033aa:	2500      	movs	r5, #0
 80033ac:	e7b7      	b.n	800331e <setvbuf+0xea>
 80033ae:	bf00      	nop
 80033b0:	2000000c 	.word	0x2000000c
 80033b4:	08003d64 	.word	0x08003d64
 80033b8:	08003d84 	.word	0x08003d84
 80033bc:	08003d44 	.word	0x08003d44

080033c0 <__swbuf_r>:
 80033c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033c2:	460e      	mov	r6, r1
 80033c4:	4614      	mov	r4, r2
 80033c6:	4605      	mov	r5, r0
 80033c8:	b118      	cbz	r0, 80033d2 <__swbuf_r+0x12>
 80033ca:	6983      	ldr	r3, [r0, #24]
 80033cc:	b90b      	cbnz	r3, 80033d2 <__swbuf_r+0x12>
 80033ce:	f000 f9d1 	bl	8003774 <__sinit>
 80033d2:	4b21      	ldr	r3, [pc, #132]	; (8003458 <__swbuf_r+0x98>)
 80033d4:	429c      	cmp	r4, r3
 80033d6:	d12b      	bne.n	8003430 <__swbuf_r+0x70>
 80033d8:	686c      	ldr	r4, [r5, #4]
 80033da:	69a3      	ldr	r3, [r4, #24]
 80033dc:	60a3      	str	r3, [r4, #8]
 80033de:	89a3      	ldrh	r3, [r4, #12]
 80033e0:	071a      	lsls	r2, r3, #28
 80033e2:	d52f      	bpl.n	8003444 <__swbuf_r+0x84>
 80033e4:	6923      	ldr	r3, [r4, #16]
 80033e6:	b36b      	cbz	r3, 8003444 <__swbuf_r+0x84>
 80033e8:	6923      	ldr	r3, [r4, #16]
 80033ea:	6820      	ldr	r0, [r4, #0]
 80033ec:	1ac0      	subs	r0, r0, r3
 80033ee:	6963      	ldr	r3, [r4, #20]
 80033f0:	b2f6      	uxtb	r6, r6
 80033f2:	4283      	cmp	r3, r0
 80033f4:	4637      	mov	r7, r6
 80033f6:	dc04      	bgt.n	8003402 <__swbuf_r+0x42>
 80033f8:	4621      	mov	r1, r4
 80033fa:	4628      	mov	r0, r5
 80033fc:	f000 f926 	bl	800364c <_fflush_r>
 8003400:	bb30      	cbnz	r0, 8003450 <__swbuf_r+0x90>
 8003402:	68a3      	ldr	r3, [r4, #8]
 8003404:	3b01      	subs	r3, #1
 8003406:	60a3      	str	r3, [r4, #8]
 8003408:	6823      	ldr	r3, [r4, #0]
 800340a:	1c5a      	adds	r2, r3, #1
 800340c:	6022      	str	r2, [r4, #0]
 800340e:	701e      	strb	r6, [r3, #0]
 8003410:	6963      	ldr	r3, [r4, #20]
 8003412:	3001      	adds	r0, #1
 8003414:	4283      	cmp	r3, r0
 8003416:	d004      	beq.n	8003422 <__swbuf_r+0x62>
 8003418:	89a3      	ldrh	r3, [r4, #12]
 800341a:	07db      	lsls	r3, r3, #31
 800341c:	d506      	bpl.n	800342c <__swbuf_r+0x6c>
 800341e:	2e0a      	cmp	r6, #10
 8003420:	d104      	bne.n	800342c <__swbuf_r+0x6c>
 8003422:	4621      	mov	r1, r4
 8003424:	4628      	mov	r0, r5
 8003426:	f000 f911 	bl	800364c <_fflush_r>
 800342a:	b988      	cbnz	r0, 8003450 <__swbuf_r+0x90>
 800342c:	4638      	mov	r0, r7
 800342e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003430:	4b0a      	ldr	r3, [pc, #40]	; (800345c <__swbuf_r+0x9c>)
 8003432:	429c      	cmp	r4, r3
 8003434:	d101      	bne.n	800343a <__swbuf_r+0x7a>
 8003436:	68ac      	ldr	r4, [r5, #8]
 8003438:	e7cf      	b.n	80033da <__swbuf_r+0x1a>
 800343a:	4b09      	ldr	r3, [pc, #36]	; (8003460 <__swbuf_r+0xa0>)
 800343c:	429c      	cmp	r4, r3
 800343e:	bf08      	it	eq
 8003440:	68ec      	ldreq	r4, [r5, #12]
 8003442:	e7ca      	b.n	80033da <__swbuf_r+0x1a>
 8003444:	4621      	mov	r1, r4
 8003446:	4628      	mov	r0, r5
 8003448:	f000 f80c 	bl	8003464 <__swsetup_r>
 800344c:	2800      	cmp	r0, #0
 800344e:	d0cb      	beq.n	80033e8 <__swbuf_r+0x28>
 8003450:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003454:	e7ea      	b.n	800342c <__swbuf_r+0x6c>
 8003456:	bf00      	nop
 8003458:	08003d64 	.word	0x08003d64
 800345c:	08003d84 	.word	0x08003d84
 8003460:	08003d44 	.word	0x08003d44

08003464 <__swsetup_r>:
 8003464:	4b32      	ldr	r3, [pc, #200]	; (8003530 <__swsetup_r+0xcc>)
 8003466:	b570      	push	{r4, r5, r6, lr}
 8003468:	681d      	ldr	r5, [r3, #0]
 800346a:	4606      	mov	r6, r0
 800346c:	460c      	mov	r4, r1
 800346e:	b125      	cbz	r5, 800347a <__swsetup_r+0x16>
 8003470:	69ab      	ldr	r3, [r5, #24]
 8003472:	b913      	cbnz	r3, 800347a <__swsetup_r+0x16>
 8003474:	4628      	mov	r0, r5
 8003476:	f000 f97d 	bl	8003774 <__sinit>
 800347a:	4b2e      	ldr	r3, [pc, #184]	; (8003534 <__swsetup_r+0xd0>)
 800347c:	429c      	cmp	r4, r3
 800347e:	d10f      	bne.n	80034a0 <__swsetup_r+0x3c>
 8003480:	686c      	ldr	r4, [r5, #4]
 8003482:	89a3      	ldrh	r3, [r4, #12]
 8003484:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003488:	0719      	lsls	r1, r3, #28
 800348a:	d42c      	bmi.n	80034e6 <__swsetup_r+0x82>
 800348c:	06dd      	lsls	r5, r3, #27
 800348e:	d411      	bmi.n	80034b4 <__swsetup_r+0x50>
 8003490:	2309      	movs	r3, #9
 8003492:	6033      	str	r3, [r6, #0]
 8003494:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003498:	81a3      	strh	r3, [r4, #12]
 800349a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800349e:	e03e      	b.n	800351e <__swsetup_r+0xba>
 80034a0:	4b25      	ldr	r3, [pc, #148]	; (8003538 <__swsetup_r+0xd4>)
 80034a2:	429c      	cmp	r4, r3
 80034a4:	d101      	bne.n	80034aa <__swsetup_r+0x46>
 80034a6:	68ac      	ldr	r4, [r5, #8]
 80034a8:	e7eb      	b.n	8003482 <__swsetup_r+0x1e>
 80034aa:	4b24      	ldr	r3, [pc, #144]	; (800353c <__swsetup_r+0xd8>)
 80034ac:	429c      	cmp	r4, r3
 80034ae:	bf08      	it	eq
 80034b0:	68ec      	ldreq	r4, [r5, #12]
 80034b2:	e7e6      	b.n	8003482 <__swsetup_r+0x1e>
 80034b4:	0758      	lsls	r0, r3, #29
 80034b6:	d512      	bpl.n	80034de <__swsetup_r+0x7a>
 80034b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80034ba:	b141      	cbz	r1, 80034ce <__swsetup_r+0x6a>
 80034bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80034c0:	4299      	cmp	r1, r3
 80034c2:	d002      	beq.n	80034ca <__swsetup_r+0x66>
 80034c4:	4630      	mov	r0, r6
 80034c6:	f000 fa63 	bl	8003990 <_free_r>
 80034ca:	2300      	movs	r3, #0
 80034cc:	6363      	str	r3, [r4, #52]	; 0x34
 80034ce:	89a3      	ldrh	r3, [r4, #12]
 80034d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80034d4:	81a3      	strh	r3, [r4, #12]
 80034d6:	2300      	movs	r3, #0
 80034d8:	6063      	str	r3, [r4, #4]
 80034da:	6923      	ldr	r3, [r4, #16]
 80034dc:	6023      	str	r3, [r4, #0]
 80034de:	89a3      	ldrh	r3, [r4, #12]
 80034e0:	f043 0308 	orr.w	r3, r3, #8
 80034e4:	81a3      	strh	r3, [r4, #12]
 80034e6:	6923      	ldr	r3, [r4, #16]
 80034e8:	b94b      	cbnz	r3, 80034fe <__swsetup_r+0x9a>
 80034ea:	89a3      	ldrh	r3, [r4, #12]
 80034ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80034f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034f4:	d003      	beq.n	80034fe <__swsetup_r+0x9a>
 80034f6:	4621      	mov	r1, r4
 80034f8:	4630      	mov	r0, r6
 80034fa:	f000 fa01 	bl	8003900 <__smakebuf_r>
 80034fe:	89a0      	ldrh	r0, [r4, #12]
 8003500:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003504:	f010 0301 	ands.w	r3, r0, #1
 8003508:	d00a      	beq.n	8003520 <__swsetup_r+0xbc>
 800350a:	2300      	movs	r3, #0
 800350c:	60a3      	str	r3, [r4, #8]
 800350e:	6963      	ldr	r3, [r4, #20]
 8003510:	425b      	negs	r3, r3
 8003512:	61a3      	str	r3, [r4, #24]
 8003514:	6923      	ldr	r3, [r4, #16]
 8003516:	b943      	cbnz	r3, 800352a <__swsetup_r+0xc6>
 8003518:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800351c:	d1ba      	bne.n	8003494 <__swsetup_r+0x30>
 800351e:	bd70      	pop	{r4, r5, r6, pc}
 8003520:	0781      	lsls	r1, r0, #30
 8003522:	bf58      	it	pl
 8003524:	6963      	ldrpl	r3, [r4, #20]
 8003526:	60a3      	str	r3, [r4, #8]
 8003528:	e7f4      	b.n	8003514 <__swsetup_r+0xb0>
 800352a:	2000      	movs	r0, #0
 800352c:	e7f7      	b.n	800351e <__swsetup_r+0xba>
 800352e:	bf00      	nop
 8003530:	2000000c 	.word	0x2000000c
 8003534:	08003d64 	.word	0x08003d64
 8003538:	08003d84 	.word	0x08003d84
 800353c:	08003d44 	.word	0x08003d44

08003540 <__sflush_r>:
 8003540:	898a      	ldrh	r2, [r1, #12]
 8003542:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003546:	4605      	mov	r5, r0
 8003548:	0710      	lsls	r0, r2, #28
 800354a:	460c      	mov	r4, r1
 800354c:	d458      	bmi.n	8003600 <__sflush_r+0xc0>
 800354e:	684b      	ldr	r3, [r1, #4]
 8003550:	2b00      	cmp	r3, #0
 8003552:	dc05      	bgt.n	8003560 <__sflush_r+0x20>
 8003554:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003556:	2b00      	cmp	r3, #0
 8003558:	dc02      	bgt.n	8003560 <__sflush_r+0x20>
 800355a:	2000      	movs	r0, #0
 800355c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003560:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003562:	2e00      	cmp	r6, #0
 8003564:	d0f9      	beq.n	800355a <__sflush_r+0x1a>
 8003566:	2300      	movs	r3, #0
 8003568:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800356c:	682f      	ldr	r7, [r5, #0]
 800356e:	602b      	str	r3, [r5, #0]
 8003570:	d032      	beq.n	80035d8 <__sflush_r+0x98>
 8003572:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003574:	89a3      	ldrh	r3, [r4, #12]
 8003576:	075a      	lsls	r2, r3, #29
 8003578:	d505      	bpl.n	8003586 <__sflush_r+0x46>
 800357a:	6863      	ldr	r3, [r4, #4]
 800357c:	1ac0      	subs	r0, r0, r3
 800357e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003580:	b10b      	cbz	r3, 8003586 <__sflush_r+0x46>
 8003582:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003584:	1ac0      	subs	r0, r0, r3
 8003586:	2300      	movs	r3, #0
 8003588:	4602      	mov	r2, r0
 800358a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800358c:	6a21      	ldr	r1, [r4, #32]
 800358e:	4628      	mov	r0, r5
 8003590:	47b0      	blx	r6
 8003592:	1c43      	adds	r3, r0, #1
 8003594:	89a3      	ldrh	r3, [r4, #12]
 8003596:	d106      	bne.n	80035a6 <__sflush_r+0x66>
 8003598:	6829      	ldr	r1, [r5, #0]
 800359a:	291d      	cmp	r1, #29
 800359c:	d82c      	bhi.n	80035f8 <__sflush_r+0xb8>
 800359e:	4a2a      	ldr	r2, [pc, #168]	; (8003648 <__sflush_r+0x108>)
 80035a0:	40ca      	lsrs	r2, r1
 80035a2:	07d6      	lsls	r6, r2, #31
 80035a4:	d528      	bpl.n	80035f8 <__sflush_r+0xb8>
 80035a6:	2200      	movs	r2, #0
 80035a8:	6062      	str	r2, [r4, #4]
 80035aa:	04d9      	lsls	r1, r3, #19
 80035ac:	6922      	ldr	r2, [r4, #16]
 80035ae:	6022      	str	r2, [r4, #0]
 80035b0:	d504      	bpl.n	80035bc <__sflush_r+0x7c>
 80035b2:	1c42      	adds	r2, r0, #1
 80035b4:	d101      	bne.n	80035ba <__sflush_r+0x7a>
 80035b6:	682b      	ldr	r3, [r5, #0]
 80035b8:	b903      	cbnz	r3, 80035bc <__sflush_r+0x7c>
 80035ba:	6560      	str	r0, [r4, #84]	; 0x54
 80035bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80035be:	602f      	str	r7, [r5, #0]
 80035c0:	2900      	cmp	r1, #0
 80035c2:	d0ca      	beq.n	800355a <__sflush_r+0x1a>
 80035c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80035c8:	4299      	cmp	r1, r3
 80035ca:	d002      	beq.n	80035d2 <__sflush_r+0x92>
 80035cc:	4628      	mov	r0, r5
 80035ce:	f000 f9df 	bl	8003990 <_free_r>
 80035d2:	2000      	movs	r0, #0
 80035d4:	6360      	str	r0, [r4, #52]	; 0x34
 80035d6:	e7c1      	b.n	800355c <__sflush_r+0x1c>
 80035d8:	6a21      	ldr	r1, [r4, #32]
 80035da:	2301      	movs	r3, #1
 80035dc:	4628      	mov	r0, r5
 80035de:	47b0      	blx	r6
 80035e0:	1c41      	adds	r1, r0, #1
 80035e2:	d1c7      	bne.n	8003574 <__sflush_r+0x34>
 80035e4:	682b      	ldr	r3, [r5, #0]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d0c4      	beq.n	8003574 <__sflush_r+0x34>
 80035ea:	2b1d      	cmp	r3, #29
 80035ec:	d001      	beq.n	80035f2 <__sflush_r+0xb2>
 80035ee:	2b16      	cmp	r3, #22
 80035f0:	d101      	bne.n	80035f6 <__sflush_r+0xb6>
 80035f2:	602f      	str	r7, [r5, #0]
 80035f4:	e7b1      	b.n	800355a <__sflush_r+0x1a>
 80035f6:	89a3      	ldrh	r3, [r4, #12]
 80035f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035fc:	81a3      	strh	r3, [r4, #12]
 80035fe:	e7ad      	b.n	800355c <__sflush_r+0x1c>
 8003600:	690f      	ldr	r7, [r1, #16]
 8003602:	2f00      	cmp	r7, #0
 8003604:	d0a9      	beq.n	800355a <__sflush_r+0x1a>
 8003606:	0793      	lsls	r3, r2, #30
 8003608:	680e      	ldr	r6, [r1, #0]
 800360a:	bf08      	it	eq
 800360c:	694b      	ldreq	r3, [r1, #20]
 800360e:	600f      	str	r7, [r1, #0]
 8003610:	bf18      	it	ne
 8003612:	2300      	movne	r3, #0
 8003614:	eba6 0807 	sub.w	r8, r6, r7
 8003618:	608b      	str	r3, [r1, #8]
 800361a:	f1b8 0f00 	cmp.w	r8, #0
 800361e:	dd9c      	ble.n	800355a <__sflush_r+0x1a>
 8003620:	6a21      	ldr	r1, [r4, #32]
 8003622:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003624:	4643      	mov	r3, r8
 8003626:	463a      	mov	r2, r7
 8003628:	4628      	mov	r0, r5
 800362a:	47b0      	blx	r6
 800362c:	2800      	cmp	r0, #0
 800362e:	dc06      	bgt.n	800363e <__sflush_r+0xfe>
 8003630:	89a3      	ldrh	r3, [r4, #12]
 8003632:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003636:	81a3      	strh	r3, [r4, #12]
 8003638:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800363c:	e78e      	b.n	800355c <__sflush_r+0x1c>
 800363e:	4407      	add	r7, r0
 8003640:	eba8 0800 	sub.w	r8, r8, r0
 8003644:	e7e9      	b.n	800361a <__sflush_r+0xda>
 8003646:	bf00      	nop
 8003648:	20400001 	.word	0x20400001

0800364c <_fflush_r>:
 800364c:	b538      	push	{r3, r4, r5, lr}
 800364e:	690b      	ldr	r3, [r1, #16]
 8003650:	4605      	mov	r5, r0
 8003652:	460c      	mov	r4, r1
 8003654:	b913      	cbnz	r3, 800365c <_fflush_r+0x10>
 8003656:	2500      	movs	r5, #0
 8003658:	4628      	mov	r0, r5
 800365a:	bd38      	pop	{r3, r4, r5, pc}
 800365c:	b118      	cbz	r0, 8003666 <_fflush_r+0x1a>
 800365e:	6983      	ldr	r3, [r0, #24]
 8003660:	b90b      	cbnz	r3, 8003666 <_fflush_r+0x1a>
 8003662:	f000 f887 	bl	8003774 <__sinit>
 8003666:	4b14      	ldr	r3, [pc, #80]	; (80036b8 <_fflush_r+0x6c>)
 8003668:	429c      	cmp	r4, r3
 800366a:	d11b      	bne.n	80036a4 <_fflush_r+0x58>
 800366c:	686c      	ldr	r4, [r5, #4]
 800366e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d0ef      	beq.n	8003656 <_fflush_r+0xa>
 8003676:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003678:	07d0      	lsls	r0, r2, #31
 800367a:	d404      	bmi.n	8003686 <_fflush_r+0x3a>
 800367c:	0599      	lsls	r1, r3, #22
 800367e:	d402      	bmi.n	8003686 <_fflush_r+0x3a>
 8003680:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003682:	f000 f915 	bl	80038b0 <__retarget_lock_acquire_recursive>
 8003686:	4628      	mov	r0, r5
 8003688:	4621      	mov	r1, r4
 800368a:	f7ff ff59 	bl	8003540 <__sflush_r>
 800368e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003690:	07da      	lsls	r2, r3, #31
 8003692:	4605      	mov	r5, r0
 8003694:	d4e0      	bmi.n	8003658 <_fflush_r+0xc>
 8003696:	89a3      	ldrh	r3, [r4, #12]
 8003698:	059b      	lsls	r3, r3, #22
 800369a:	d4dd      	bmi.n	8003658 <_fflush_r+0xc>
 800369c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800369e:	f000 f908 	bl	80038b2 <__retarget_lock_release_recursive>
 80036a2:	e7d9      	b.n	8003658 <_fflush_r+0xc>
 80036a4:	4b05      	ldr	r3, [pc, #20]	; (80036bc <_fflush_r+0x70>)
 80036a6:	429c      	cmp	r4, r3
 80036a8:	d101      	bne.n	80036ae <_fflush_r+0x62>
 80036aa:	68ac      	ldr	r4, [r5, #8]
 80036ac:	e7df      	b.n	800366e <_fflush_r+0x22>
 80036ae:	4b04      	ldr	r3, [pc, #16]	; (80036c0 <_fflush_r+0x74>)
 80036b0:	429c      	cmp	r4, r3
 80036b2:	bf08      	it	eq
 80036b4:	68ec      	ldreq	r4, [r5, #12]
 80036b6:	e7da      	b.n	800366e <_fflush_r+0x22>
 80036b8:	08003d64 	.word	0x08003d64
 80036bc:	08003d84 	.word	0x08003d84
 80036c0:	08003d44 	.word	0x08003d44

080036c4 <std>:
 80036c4:	2300      	movs	r3, #0
 80036c6:	b510      	push	{r4, lr}
 80036c8:	4604      	mov	r4, r0
 80036ca:	e9c0 3300 	strd	r3, r3, [r0]
 80036ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80036d2:	6083      	str	r3, [r0, #8]
 80036d4:	8181      	strh	r1, [r0, #12]
 80036d6:	6643      	str	r3, [r0, #100]	; 0x64
 80036d8:	81c2      	strh	r2, [r0, #14]
 80036da:	6183      	str	r3, [r0, #24]
 80036dc:	4619      	mov	r1, r3
 80036de:	2208      	movs	r2, #8
 80036e0:	305c      	adds	r0, #92	; 0x5c
 80036e2:	f7ff fd21 	bl	8003128 <memset>
 80036e6:	4b05      	ldr	r3, [pc, #20]	; (80036fc <std+0x38>)
 80036e8:	6263      	str	r3, [r4, #36]	; 0x24
 80036ea:	4b05      	ldr	r3, [pc, #20]	; (8003700 <std+0x3c>)
 80036ec:	62a3      	str	r3, [r4, #40]	; 0x28
 80036ee:	4b05      	ldr	r3, [pc, #20]	; (8003704 <std+0x40>)
 80036f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80036f2:	4b05      	ldr	r3, [pc, #20]	; (8003708 <std+0x44>)
 80036f4:	6224      	str	r4, [r4, #32]
 80036f6:	6323      	str	r3, [r4, #48]	; 0x30
 80036f8:	bd10      	pop	{r4, pc}
 80036fa:	bf00      	nop
 80036fc:	08003b71 	.word	0x08003b71
 8003700:	08003b93 	.word	0x08003b93
 8003704:	08003bcb 	.word	0x08003bcb
 8003708:	08003bef 	.word	0x08003bef

0800370c <_cleanup_r>:
 800370c:	4901      	ldr	r1, [pc, #4]	; (8003714 <_cleanup_r+0x8>)
 800370e:	f000 b8af 	b.w	8003870 <_fwalk_reent>
 8003712:	bf00      	nop
 8003714:	0800364d 	.word	0x0800364d

08003718 <__sfmoreglue>:
 8003718:	b570      	push	{r4, r5, r6, lr}
 800371a:	2268      	movs	r2, #104	; 0x68
 800371c:	1e4d      	subs	r5, r1, #1
 800371e:	4355      	muls	r5, r2
 8003720:	460e      	mov	r6, r1
 8003722:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003726:	f000 f99f 	bl	8003a68 <_malloc_r>
 800372a:	4604      	mov	r4, r0
 800372c:	b140      	cbz	r0, 8003740 <__sfmoreglue+0x28>
 800372e:	2100      	movs	r1, #0
 8003730:	e9c0 1600 	strd	r1, r6, [r0]
 8003734:	300c      	adds	r0, #12
 8003736:	60a0      	str	r0, [r4, #8]
 8003738:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800373c:	f7ff fcf4 	bl	8003128 <memset>
 8003740:	4620      	mov	r0, r4
 8003742:	bd70      	pop	{r4, r5, r6, pc}

08003744 <__sfp_lock_acquire>:
 8003744:	4801      	ldr	r0, [pc, #4]	; (800374c <__sfp_lock_acquire+0x8>)
 8003746:	f000 b8b3 	b.w	80038b0 <__retarget_lock_acquire_recursive>
 800374a:	bf00      	nop
 800374c:	20000101 	.word	0x20000101

08003750 <__sfp_lock_release>:
 8003750:	4801      	ldr	r0, [pc, #4]	; (8003758 <__sfp_lock_release+0x8>)
 8003752:	f000 b8ae 	b.w	80038b2 <__retarget_lock_release_recursive>
 8003756:	bf00      	nop
 8003758:	20000101 	.word	0x20000101

0800375c <__sinit_lock_acquire>:
 800375c:	4801      	ldr	r0, [pc, #4]	; (8003764 <__sinit_lock_acquire+0x8>)
 800375e:	f000 b8a7 	b.w	80038b0 <__retarget_lock_acquire_recursive>
 8003762:	bf00      	nop
 8003764:	20000102 	.word	0x20000102

08003768 <__sinit_lock_release>:
 8003768:	4801      	ldr	r0, [pc, #4]	; (8003770 <__sinit_lock_release+0x8>)
 800376a:	f000 b8a2 	b.w	80038b2 <__retarget_lock_release_recursive>
 800376e:	bf00      	nop
 8003770:	20000102 	.word	0x20000102

08003774 <__sinit>:
 8003774:	b510      	push	{r4, lr}
 8003776:	4604      	mov	r4, r0
 8003778:	f7ff fff0 	bl	800375c <__sinit_lock_acquire>
 800377c:	69a3      	ldr	r3, [r4, #24]
 800377e:	b11b      	cbz	r3, 8003788 <__sinit+0x14>
 8003780:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003784:	f7ff bff0 	b.w	8003768 <__sinit_lock_release>
 8003788:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800378c:	6523      	str	r3, [r4, #80]	; 0x50
 800378e:	4b13      	ldr	r3, [pc, #76]	; (80037dc <__sinit+0x68>)
 8003790:	4a13      	ldr	r2, [pc, #76]	; (80037e0 <__sinit+0x6c>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	62a2      	str	r2, [r4, #40]	; 0x28
 8003796:	42a3      	cmp	r3, r4
 8003798:	bf04      	itt	eq
 800379a:	2301      	moveq	r3, #1
 800379c:	61a3      	streq	r3, [r4, #24]
 800379e:	4620      	mov	r0, r4
 80037a0:	f000 f820 	bl	80037e4 <__sfp>
 80037a4:	6060      	str	r0, [r4, #4]
 80037a6:	4620      	mov	r0, r4
 80037a8:	f000 f81c 	bl	80037e4 <__sfp>
 80037ac:	60a0      	str	r0, [r4, #8]
 80037ae:	4620      	mov	r0, r4
 80037b0:	f000 f818 	bl	80037e4 <__sfp>
 80037b4:	2200      	movs	r2, #0
 80037b6:	60e0      	str	r0, [r4, #12]
 80037b8:	2104      	movs	r1, #4
 80037ba:	6860      	ldr	r0, [r4, #4]
 80037bc:	f7ff ff82 	bl	80036c4 <std>
 80037c0:	68a0      	ldr	r0, [r4, #8]
 80037c2:	2201      	movs	r2, #1
 80037c4:	2109      	movs	r1, #9
 80037c6:	f7ff ff7d 	bl	80036c4 <std>
 80037ca:	68e0      	ldr	r0, [r4, #12]
 80037cc:	2202      	movs	r2, #2
 80037ce:	2112      	movs	r1, #18
 80037d0:	f7ff ff78 	bl	80036c4 <std>
 80037d4:	2301      	movs	r3, #1
 80037d6:	61a3      	str	r3, [r4, #24]
 80037d8:	e7d2      	b.n	8003780 <__sinit+0xc>
 80037da:	bf00      	nop
 80037dc:	08003d40 	.word	0x08003d40
 80037e0:	0800370d 	.word	0x0800370d

080037e4 <__sfp>:
 80037e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037e6:	4607      	mov	r7, r0
 80037e8:	f7ff ffac 	bl	8003744 <__sfp_lock_acquire>
 80037ec:	4b1e      	ldr	r3, [pc, #120]	; (8003868 <__sfp+0x84>)
 80037ee:	681e      	ldr	r6, [r3, #0]
 80037f0:	69b3      	ldr	r3, [r6, #24]
 80037f2:	b913      	cbnz	r3, 80037fa <__sfp+0x16>
 80037f4:	4630      	mov	r0, r6
 80037f6:	f7ff ffbd 	bl	8003774 <__sinit>
 80037fa:	3648      	adds	r6, #72	; 0x48
 80037fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003800:	3b01      	subs	r3, #1
 8003802:	d503      	bpl.n	800380c <__sfp+0x28>
 8003804:	6833      	ldr	r3, [r6, #0]
 8003806:	b30b      	cbz	r3, 800384c <__sfp+0x68>
 8003808:	6836      	ldr	r6, [r6, #0]
 800380a:	e7f7      	b.n	80037fc <__sfp+0x18>
 800380c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003810:	b9d5      	cbnz	r5, 8003848 <__sfp+0x64>
 8003812:	4b16      	ldr	r3, [pc, #88]	; (800386c <__sfp+0x88>)
 8003814:	60e3      	str	r3, [r4, #12]
 8003816:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800381a:	6665      	str	r5, [r4, #100]	; 0x64
 800381c:	f000 f847 	bl	80038ae <__retarget_lock_init_recursive>
 8003820:	f7ff ff96 	bl	8003750 <__sfp_lock_release>
 8003824:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003828:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800382c:	6025      	str	r5, [r4, #0]
 800382e:	61a5      	str	r5, [r4, #24]
 8003830:	2208      	movs	r2, #8
 8003832:	4629      	mov	r1, r5
 8003834:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003838:	f7ff fc76 	bl	8003128 <memset>
 800383c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003840:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003844:	4620      	mov	r0, r4
 8003846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003848:	3468      	adds	r4, #104	; 0x68
 800384a:	e7d9      	b.n	8003800 <__sfp+0x1c>
 800384c:	2104      	movs	r1, #4
 800384e:	4638      	mov	r0, r7
 8003850:	f7ff ff62 	bl	8003718 <__sfmoreglue>
 8003854:	4604      	mov	r4, r0
 8003856:	6030      	str	r0, [r6, #0]
 8003858:	2800      	cmp	r0, #0
 800385a:	d1d5      	bne.n	8003808 <__sfp+0x24>
 800385c:	f7ff ff78 	bl	8003750 <__sfp_lock_release>
 8003860:	230c      	movs	r3, #12
 8003862:	603b      	str	r3, [r7, #0]
 8003864:	e7ee      	b.n	8003844 <__sfp+0x60>
 8003866:	bf00      	nop
 8003868:	08003d40 	.word	0x08003d40
 800386c:	ffff0001 	.word	0xffff0001

08003870 <_fwalk_reent>:
 8003870:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003874:	4606      	mov	r6, r0
 8003876:	4688      	mov	r8, r1
 8003878:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800387c:	2700      	movs	r7, #0
 800387e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003882:	f1b9 0901 	subs.w	r9, r9, #1
 8003886:	d505      	bpl.n	8003894 <_fwalk_reent+0x24>
 8003888:	6824      	ldr	r4, [r4, #0]
 800388a:	2c00      	cmp	r4, #0
 800388c:	d1f7      	bne.n	800387e <_fwalk_reent+0xe>
 800388e:	4638      	mov	r0, r7
 8003890:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003894:	89ab      	ldrh	r3, [r5, #12]
 8003896:	2b01      	cmp	r3, #1
 8003898:	d907      	bls.n	80038aa <_fwalk_reent+0x3a>
 800389a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800389e:	3301      	adds	r3, #1
 80038a0:	d003      	beq.n	80038aa <_fwalk_reent+0x3a>
 80038a2:	4629      	mov	r1, r5
 80038a4:	4630      	mov	r0, r6
 80038a6:	47c0      	blx	r8
 80038a8:	4307      	orrs	r7, r0
 80038aa:	3568      	adds	r5, #104	; 0x68
 80038ac:	e7e9      	b.n	8003882 <_fwalk_reent+0x12>

080038ae <__retarget_lock_init_recursive>:
 80038ae:	4770      	bx	lr

080038b0 <__retarget_lock_acquire_recursive>:
 80038b0:	4770      	bx	lr

080038b2 <__retarget_lock_release_recursive>:
 80038b2:	4770      	bx	lr

080038b4 <__swhatbuf_r>:
 80038b4:	b570      	push	{r4, r5, r6, lr}
 80038b6:	460e      	mov	r6, r1
 80038b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038bc:	2900      	cmp	r1, #0
 80038be:	b096      	sub	sp, #88	; 0x58
 80038c0:	4614      	mov	r4, r2
 80038c2:	461d      	mov	r5, r3
 80038c4:	da08      	bge.n	80038d8 <__swhatbuf_r+0x24>
 80038c6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80038ca:	2200      	movs	r2, #0
 80038cc:	602a      	str	r2, [r5, #0]
 80038ce:	061a      	lsls	r2, r3, #24
 80038d0:	d410      	bmi.n	80038f4 <__swhatbuf_r+0x40>
 80038d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80038d6:	e00e      	b.n	80038f6 <__swhatbuf_r+0x42>
 80038d8:	466a      	mov	r2, sp
 80038da:	f000 f9af 	bl	8003c3c <_fstat_r>
 80038de:	2800      	cmp	r0, #0
 80038e0:	dbf1      	blt.n	80038c6 <__swhatbuf_r+0x12>
 80038e2:	9a01      	ldr	r2, [sp, #4]
 80038e4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80038e8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80038ec:	425a      	negs	r2, r3
 80038ee:	415a      	adcs	r2, r3
 80038f0:	602a      	str	r2, [r5, #0]
 80038f2:	e7ee      	b.n	80038d2 <__swhatbuf_r+0x1e>
 80038f4:	2340      	movs	r3, #64	; 0x40
 80038f6:	2000      	movs	r0, #0
 80038f8:	6023      	str	r3, [r4, #0]
 80038fa:	b016      	add	sp, #88	; 0x58
 80038fc:	bd70      	pop	{r4, r5, r6, pc}
	...

08003900 <__smakebuf_r>:
 8003900:	898b      	ldrh	r3, [r1, #12]
 8003902:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003904:	079d      	lsls	r5, r3, #30
 8003906:	4606      	mov	r6, r0
 8003908:	460c      	mov	r4, r1
 800390a:	d507      	bpl.n	800391c <__smakebuf_r+0x1c>
 800390c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003910:	6023      	str	r3, [r4, #0]
 8003912:	6123      	str	r3, [r4, #16]
 8003914:	2301      	movs	r3, #1
 8003916:	6163      	str	r3, [r4, #20]
 8003918:	b002      	add	sp, #8
 800391a:	bd70      	pop	{r4, r5, r6, pc}
 800391c:	ab01      	add	r3, sp, #4
 800391e:	466a      	mov	r2, sp
 8003920:	f7ff ffc8 	bl	80038b4 <__swhatbuf_r>
 8003924:	9900      	ldr	r1, [sp, #0]
 8003926:	4605      	mov	r5, r0
 8003928:	4630      	mov	r0, r6
 800392a:	f000 f89d 	bl	8003a68 <_malloc_r>
 800392e:	b948      	cbnz	r0, 8003944 <__smakebuf_r+0x44>
 8003930:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003934:	059a      	lsls	r2, r3, #22
 8003936:	d4ef      	bmi.n	8003918 <__smakebuf_r+0x18>
 8003938:	f023 0303 	bic.w	r3, r3, #3
 800393c:	f043 0302 	orr.w	r3, r3, #2
 8003940:	81a3      	strh	r3, [r4, #12]
 8003942:	e7e3      	b.n	800390c <__smakebuf_r+0xc>
 8003944:	4b0d      	ldr	r3, [pc, #52]	; (800397c <__smakebuf_r+0x7c>)
 8003946:	62b3      	str	r3, [r6, #40]	; 0x28
 8003948:	89a3      	ldrh	r3, [r4, #12]
 800394a:	6020      	str	r0, [r4, #0]
 800394c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003950:	81a3      	strh	r3, [r4, #12]
 8003952:	9b00      	ldr	r3, [sp, #0]
 8003954:	6163      	str	r3, [r4, #20]
 8003956:	9b01      	ldr	r3, [sp, #4]
 8003958:	6120      	str	r0, [r4, #16]
 800395a:	b15b      	cbz	r3, 8003974 <__smakebuf_r+0x74>
 800395c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003960:	4630      	mov	r0, r6
 8003962:	f000 f97d 	bl	8003c60 <_isatty_r>
 8003966:	b128      	cbz	r0, 8003974 <__smakebuf_r+0x74>
 8003968:	89a3      	ldrh	r3, [r4, #12]
 800396a:	f023 0303 	bic.w	r3, r3, #3
 800396e:	f043 0301 	orr.w	r3, r3, #1
 8003972:	81a3      	strh	r3, [r4, #12]
 8003974:	89a0      	ldrh	r0, [r4, #12]
 8003976:	4305      	orrs	r5, r0
 8003978:	81a5      	strh	r5, [r4, #12]
 800397a:	e7cd      	b.n	8003918 <__smakebuf_r+0x18>
 800397c:	0800370d 	.word	0x0800370d

08003980 <malloc>:
 8003980:	4b02      	ldr	r3, [pc, #8]	; (800398c <malloc+0xc>)
 8003982:	4601      	mov	r1, r0
 8003984:	6818      	ldr	r0, [r3, #0]
 8003986:	f000 b86f 	b.w	8003a68 <_malloc_r>
 800398a:	bf00      	nop
 800398c:	2000000c 	.word	0x2000000c

08003990 <_free_r>:
 8003990:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003992:	2900      	cmp	r1, #0
 8003994:	d044      	beq.n	8003a20 <_free_r+0x90>
 8003996:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800399a:	9001      	str	r0, [sp, #4]
 800399c:	2b00      	cmp	r3, #0
 800399e:	f1a1 0404 	sub.w	r4, r1, #4
 80039a2:	bfb8      	it	lt
 80039a4:	18e4      	addlt	r4, r4, r3
 80039a6:	f000 f97d 	bl	8003ca4 <__malloc_lock>
 80039aa:	4a1e      	ldr	r2, [pc, #120]	; (8003a24 <_free_r+0x94>)
 80039ac:	9801      	ldr	r0, [sp, #4]
 80039ae:	6813      	ldr	r3, [r2, #0]
 80039b0:	b933      	cbnz	r3, 80039c0 <_free_r+0x30>
 80039b2:	6063      	str	r3, [r4, #4]
 80039b4:	6014      	str	r4, [r2, #0]
 80039b6:	b003      	add	sp, #12
 80039b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80039bc:	f000 b978 	b.w	8003cb0 <__malloc_unlock>
 80039c0:	42a3      	cmp	r3, r4
 80039c2:	d908      	bls.n	80039d6 <_free_r+0x46>
 80039c4:	6825      	ldr	r5, [r4, #0]
 80039c6:	1961      	adds	r1, r4, r5
 80039c8:	428b      	cmp	r3, r1
 80039ca:	bf01      	itttt	eq
 80039cc:	6819      	ldreq	r1, [r3, #0]
 80039ce:	685b      	ldreq	r3, [r3, #4]
 80039d0:	1949      	addeq	r1, r1, r5
 80039d2:	6021      	streq	r1, [r4, #0]
 80039d4:	e7ed      	b.n	80039b2 <_free_r+0x22>
 80039d6:	461a      	mov	r2, r3
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	b10b      	cbz	r3, 80039e0 <_free_r+0x50>
 80039dc:	42a3      	cmp	r3, r4
 80039de:	d9fa      	bls.n	80039d6 <_free_r+0x46>
 80039e0:	6811      	ldr	r1, [r2, #0]
 80039e2:	1855      	adds	r5, r2, r1
 80039e4:	42a5      	cmp	r5, r4
 80039e6:	d10b      	bne.n	8003a00 <_free_r+0x70>
 80039e8:	6824      	ldr	r4, [r4, #0]
 80039ea:	4421      	add	r1, r4
 80039ec:	1854      	adds	r4, r2, r1
 80039ee:	42a3      	cmp	r3, r4
 80039f0:	6011      	str	r1, [r2, #0]
 80039f2:	d1e0      	bne.n	80039b6 <_free_r+0x26>
 80039f4:	681c      	ldr	r4, [r3, #0]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	6053      	str	r3, [r2, #4]
 80039fa:	4421      	add	r1, r4
 80039fc:	6011      	str	r1, [r2, #0]
 80039fe:	e7da      	b.n	80039b6 <_free_r+0x26>
 8003a00:	d902      	bls.n	8003a08 <_free_r+0x78>
 8003a02:	230c      	movs	r3, #12
 8003a04:	6003      	str	r3, [r0, #0]
 8003a06:	e7d6      	b.n	80039b6 <_free_r+0x26>
 8003a08:	6825      	ldr	r5, [r4, #0]
 8003a0a:	1961      	adds	r1, r4, r5
 8003a0c:	428b      	cmp	r3, r1
 8003a0e:	bf04      	itt	eq
 8003a10:	6819      	ldreq	r1, [r3, #0]
 8003a12:	685b      	ldreq	r3, [r3, #4]
 8003a14:	6063      	str	r3, [r4, #4]
 8003a16:	bf04      	itt	eq
 8003a18:	1949      	addeq	r1, r1, r5
 8003a1a:	6021      	streq	r1, [r4, #0]
 8003a1c:	6054      	str	r4, [r2, #4]
 8003a1e:	e7ca      	b.n	80039b6 <_free_r+0x26>
 8003a20:	b003      	add	sp, #12
 8003a22:	bd30      	pop	{r4, r5, pc}
 8003a24:	20000104 	.word	0x20000104

08003a28 <sbrk_aligned>:
 8003a28:	b570      	push	{r4, r5, r6, lr}
 8003a2a:	4e0e      	ldr	r6, [pc, #56]	; (8003a64 <sbrk_aligned+0x3c>)
 8003a2c:	460c      	mov	r4, r1
 8003a2e:	6831      	ldr	r1, [r6, #0]
 8003a30:	4605      	mov	r5, r0
 8003a32:	b911      	cbnz	r1, 8003a3a <sbrk_aligned+0x12>
 8003a34:	f000 f88c 	bl	8003b50 <_sbrk_r>
 8003a38:	6030      	str	r0, [r6, #0]
 8003a3a:	4621      	mov	r1, r4
 8003a3c:	4628      	mov	r0, r5
 8003a3e:	f000 f887 	bl	8003b50 <_sbrk_r>
 8003a42:	1c43      	adds	r3, r0, #1
 8003a44:	d00a      	beq.n	8003a5c <sbrk_aligned+0x34>
 8003a46:	1cc4      	adds	r4, r0, #3
 8003a48:	f024 0403 	bic.w	r4, r4, #3
 8003a4c:	42a0      	cmp	r0, r4
 8003a4e:	d007      	beq.n	8003a60 <sbrk_aligned+0x38>
 8003a50:	1a21      	subs	r1, r4, r0
 8003a52:	4628      	mov	r0, r5
 8003a54:	f000 f87c 	bl	8003b50 <_sbrk_r>
 8003a58:	3001      	adds	r0, #1
 8003a5a:	d101      	bne.n	8003a60 <sbrk_aligned+0x38>
 8003a5c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003a60:	4620      	mov	r0, r4
 8003a62:	bd70      	pop	{r4, r5, r6, pc}
 8003a64:	20000108 	.word	0x20000108

08003a68 <_malloc_r>:
 8003a68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a6c:	1ccd      	adds	r5, r1, #3
 8003a6e:	f025 0503 	bic.w	r5, r5, #3
 8003a72:	3508      	adds	r5, #8
 8003a74:	2d0c      	cmp	r5, #12
 8003a76:	bf38      	it	cc
 8003a78:	250c      	movcc	r5, #12
 8003a7a:	2d00      	cmp	r5, #0
 8003a7c:	4607      	mov	r7, r0
 8003a7e:	db01      	blt.n	8003a84 <_malloc_r+0x1c>
 8003a80:	42a9      	cmp	r1, r5
 8003a82:	d905      	bls.n	8003a90 <_malloc_r+0x28>
 8003a84:	230c      	movs	r3, #12
 8003a86:	603b      	str	r3, [r7, #0]
 8003a88:	2600      	movs	r6, #0
 8003a8a:	4630      	mov	r0, r6
 8003a8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a90:	4e2e      	ldr	r6, [pc, #184]	; (8003b4c <_malloc_r+0xe4>)
 8003a92:	f000 f907 	bl	8003ca4 <__malloc_lock>
 8003a96:	6833      	ldr	r3, [r6, #0]
 8003a98:	461c      	mov	r4, r3
 8003a9a:	bb34      	cbnz	r4, 8003aea <_malloc_r+0x82>
 8003a9c:	4629      	mov	r1, r5
 8003a9e:	4638      	mov	r0, r7
 8003aa0:	f7ff ffc2 	bl	8003a28 <sbrk_aligned>
 8003aa4:	1c43      	adds	r3, r0, #1
 8003aa6:	4604      	mov	r4, r0
 8003aa8:	d14d      	bne.n	8003b46 <_malloc_r+0xde>
 8003aaa:	6834      	ldr	r4, [r6, #0]
 8003aac:	4626      	mov	r6, r4
 8003aae:	2e00      	cmp	r6, #0
 8003ab0:	d140      	bne.n	8003b34 <_malloc_r+0xcc>
 8003ab2:	6823      	ldr	r3, [r4, #0]
 8003ab4:	4631      	mov	r1, r6
 8003ab6:	4638      	mov	r0, r7
 8003ab8:	eb04 0803 	add.w	r8, r4, r3
 8003abc:	f000 f848 	bl	8003b50 <_sbrk_r>
 8003ac0:	4580      	cmp	r8, r0
 8003ac2:	d13a      	bne.n	8003b3a <_malloc_r+0xd2>
 8003ac4:	6821      	ldr	r1, [r4, #0]
 8003ac6:	3503      	adds	r5, #3
 8003ac8:	1a6d      	subs	r5, r5, r1
 8003aca:	f025 0503 	bic.w	r5, r5, #3
 8003ace:	3508      	adds	r5, #8
 8003ad0:	2d0c      	cmp	r5, #12
 8003ad2:	bf38      	it	cc
 8003ad4:	250c      	movcc	r5, #12
 8003ad6:	4629      	mov	r1, r5
 8003ad8:	4638      	mov	r0, r7
 8003ada:	f7ff ffa5 	bl	8003a28 <sbrk_aligned>
 8003ade:	3001      	adds	r0, #1
 8003ae0:	d02b      	beq.n	8003b3a <_malloc_r+0xd2>
 8003ae2:	6823      	ldr	r3, [r4, #0]
 8003ae4:	442b      	add	r3, r5
 8003ae6:	6023      	str	r3, [r4, #0]
 8003ae8:	e00e      	b.n	8003b08 <_malloc_r+0xa0>
 8003aea:	6822      	ldr	r2, [r4, #0]
 8003aec:	1b52      	subs	r2, r2, r5
 8003aee:	d41e      	bmi.n	8003b2e <_malloc_r+0xc6>
 8003af0:	2a0b      	cmp	r2, #11
 8003af2:	d916      	bls.n	8003b22 <_malloc_r+0xba>
 8003af4:	1961      	adds	r1, r4, r5
 8003af6:	42a3      	cmp	r3, r4
 8003af8:	6025      	str	r5, [r4, #0]
 8003afa:	bf18      	it	ne
 8003afc:	6059      	strne	r1, [r3, #4]
 8003afe:	6863      	ldr	r3, [r4, #4]
 8003b00:	bf08      	it	eq
 8003b02:	6031      	streq	r1, [r6, #0]
 8003b04:	5162      	str	r2, [r4, r5]
 8003b06:	604b      	str	r3, [r1, #4]
 8003b08:	4638      	mov	r0, r7
 8003b0a:	f104 060b 	add.w	r6, r4, #11
 8003b0e:	f000 f8cf 	bl	8003cb0 <__malloc_unlock>
 8003b12:	f026 0607 	bic.w	r6, r6, #7
 8003b16:	1d23      	adds	r3, r4, #4
 8003b18:	1af2      	subs	r2, r6, r3
 8003b1a:	d0b6      	beq.n	8003a8a <_malloc_r+0x22>
 8003b1c:	1b9b      	subs	r3, r3, r6
 8003b1e:	50a3      	str	r3, [r4, r2]
 8003b20:	e7b3      	b.n	8003a8a <_malloc_r+0x22>
 8003b22:	6862      	ldr	r2, [r4, #4]
 8003b24:	42a3      	cmp	r3, r4
 8003b26:	bf0c      	ite	eq
 8003b28:	6032      	streq	r2, [r6, #0]
 8003b2a:	605a      	strne	r2, [r3, #4]
 8003b2c:	e7ec      	b.n	8003b08 <_malloc_r+0xa0>
 8003b2e:	4623      	mov	r3, r4
 8003b30:	6864      	ldr	r4, [r4, #4]
 8003b32:	e7b2      	b.n	8003a9a <_malloc_r+0x32>
 8003b34:	4634      	mov	r4, r6
 8003b36:	6876      	ldr	r6, [r6, #4]
 8003b38:	e7b9      	b.n	8003aae <_malloc_r+0x46>
 8003b3a:	230c      	movs	r3, #12
 8003b3c:	603b      	str	r3, [r7, #0]
 8003b3e:	4638      	mov	r0, r7
 8003b40:	f000 f8b6 	bl	8003cb0 <__malloc_unlock>
 8003b44:	e7a1      	b.n	8003a8a <_malloc_r+0x22>
 8003b46:	6025      	str	r5, [r4, #0]
 8003b48:	e7de      	b.n	8003b08 <_malloc_r+0xa0>
 8003b4a:	bf00      	nop
 8003b4c:	20000104 	.word	0x20000104

08003b50 <_sbrk_r>:
 8003b50:	b538      	push	{r3, r4, r5, lr}
 8003b52:	4d06      	ldr	r5, [pc, #24]	; (8003b6c <_sbrk_r+0x1c>)
 8003b54:	2300      	movs	r3, #0
 8003b56:	4604      	mov	r4, r0
 8003b58:	4608      	mov	r0, r1
 8003b5a:	602b      	str	r3, [r5, #0]
 8003b5c:	f7fd f818 	bl	8000b90 <_sbrk>
 8003b60:	1c43      	adds	r3, r0, #1
 8003b62:	d102      	bne.n	8003b6a <_sbrk_r+0x1a>
 8003b64:	682b      	ldr	r3, [r5, #0]
 8003b66:	b103      	cbz	r3, 8003b6a <_sbrk_r+0x1a>
 8003b68:	6023      	str	r3, [r4, #0]
 8003b6a:	bd38      	pop	{r3, r4, r5, pc}
 8003b6c:	2000010c 	.word	0x2000010c

08003b70 <__sread>:
 8003b70:	b510      	push	{r4, lr}
 8003b72:	460c      	mov	r4, r1
 8003b74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b78:	f000 f8a0 	bl	8003cbc <_read_r>
 8003b7c:	2800      	cmp	r0, #0
 8003b7e:	bfab      	itete	ge
 8003b80:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003b82:	89a3      	ldrhlt	r3, [r4, #12]
 8003b84:	181b      	addge	r3, r3, r0
 8003b86:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003b8a:	bfac      	ite	ge
 8003b8c:	6563      	strge	r3, [r4, #84]	; 0x54
 8003b8e:	81a3      	strhlt	r3, [r4, #12]
 8003b90:	bd10      	pop	{r4, pc}

08003b92 <__swrite>:
 8003b92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b96:	461f      	mov	r7, r3
 8003b98:	898b      	ldrh	r3, [r1, #12]
 8003b9a:	05db      	lsls	r3, r3, #23
 8003b9c:	4605      	mov	r5, r0
 8003b9e:	460c      	mov	r4, r1
 8003ba0:	4616      	mov	r6, r2
 8003ba2:	d505      	bpl.n	8003bb0 <__swrite+0x1e>
 8003ba4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ba8:	2302      	movs	r3, #2
 8003baa:	2200      	movs	r2, #0
 8003bac:	f000 f868 	bl	8003c80 <_lseek_r>
 8003bb0:	89a3      	ldrh	r3, [r4, #12]
 8003bb2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003bb6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003bba:	81a3      	strh	r3, [r4, #12]
 8003bbc:	4632      	mov	r2, r6
 8003bbe:	463b      	mov	r3, r7
 8003bc0:	4628      	mov	r0, r5
 8003bc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003bc6:	f000 b817 	b.w	8003bf8 <_write_r>

08003bca <__sseek>:
 8003bca:	b510      	push	{r4, lr}
 8003bcc:	460c      	mov	r4, r1
 8003bce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003bd2:	f000 f855 	bl	8003c80 <_lseek_r>
 8003bd6:	1c43      	adds	r3, r0, #1
 8003bd8:	89a3      	ldrh	r3, [r4, #12]
 8003bda:	bf15      	itete	ne
 8003bdc:	6560      	strne	r0, [r4, #84]	; 0x54
 8003bde:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003be2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003be6:	81a3      	strheq	r3, [r4, #12]
 8003be8:	bf18      	it	ne
 8003bea:	81a3      	strhne	r3, [r4, #12]
 8003bec:	bd10      	pop	{r4, pc}

08003bee <__sclose>:
 8003bee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003bf2:	f000 b813 	b.w	8003c1c <_close_r>
	...

08003bf8 <_write_r>:
 8003bf8:	b538      	push	{r3, r4, r5, lr}
 8003bfa:	4d07      	ldr	r5, [pc, #28]	; (8003c18 <_write_r+0x20>)
 8003bfc:	4604      	mov	r4, r0
 8003bfe:	4608      	mov	r0, r1
 8003c00:	4611      	mov	r1, r2
 8003c02:	2200      	movs	r2, #0
 8003c04:	602a      	str	r2, [r5, #0]
 8003c06:	461a      	mov	r2, r3
 8003c08:	f7fc ff71 	bl	8000aee <_write>
 8003c0c:	1c43      	adds	r3, r0, #1
 8003c0e:	d102      	bne.n	8003c16 <_write_r+0x1e>
 8003c10:	682b      	ldr	r3, [r5, #0]
 8003c12:	b103      	cbz	r3, 8003c16 <_write_r+0x1e>
 8003c14:	6023      	str	r3, [r4, #0]
 8003c16:	bd38      	pop	{r3, r4, r5, pc}
 8003c18:	2000010c 	.word	0x2000010c

08003c1c <_close_r>:
 8003c1c:	b538      	push	{r3, r4, r5, lr}
 8003c1e:	4d06      	ldr	r5, [pc, #24]	; (8003c38 <_close_r+0x1c>)
 8003c20:	2300      	movs	r3, #0
 8003c22:	4604      	mov	r4, r0
 8003c24:	4608      	mov	r0, r1
 8003c26:	602b      	str	r3, [r5, #0]
 8003c28:	f7fc ff7d 	bl	8000b26 <_close>
 8003c2c:	1c43      	adds	r3, r0, #1
 8003c2e:	d102      	bne.n	8003c36 <_close_r+0x1a>
 8003c30:	682b      	ldr	r3, [r5, #0]
 8003c32:	b103      	cbz	r3, 8003c36 <_close_r+0x1a>
 8003c34:	6023      	str	r3, [r4, #0]
 8003c36:	bd38      	pop	{r3, r4, r5, pc}
 8003c38:	2000010c 	.word	0x2000010c

08003c3c <_fstat_r>:
 8003c3c:	b538      	push	{r3, r4, r5, lr}
 8003c3e:	4d07      	ldr	r5, [pc, #28]	; (8003c5c <_fstat_r+0x20>)
 8003c40:	2300      	movs	r3, #0
 8003c42:	4604      	mov	r4, r0
 8003c44:	4608      	mov	r0, r1
 8003c46:	4611      	mov	r1, r2
 8003c48:	602b      	str	r3, [r5, #0]
 8003c4a:	f7fc ff78 	bl	8000b3e <_fstat>
 8003c4e:	1c43      	adds	r3, r0, #1
 8003c50:	d102      	bne.n	8003c58 <_fstat_r+0x1c>
 8003c52:	682b      	ldr	r3, [r5, #0]
 8003c54:	b103      	cbz	r3, 8003c58 <_fstat_r+0x1c>
 8003c56:	6023      	str	r3, [r4, #0]
 8003c58:	bd38      	pop	{r3, r4, r5, pc}
 8003c5a:	bf00      	nop
 8003c5c:	2000010c 	.word	0x2000010c

08003c60 <_isatty_r>:
 8003c60:	b538      	push	{r3, r4, r5, lr}
 8003c62:	4d06      	ldr	r5, [pc, #24]	; (8003c7c <_isatty_r+0x1c>)
 8003c64:	2300      	movs	r3, #0
 8003c66:	4604      	mov	r4, r0
 8003c68:	4608      	mov	r0, r1
 8003c6a:	602b      	str	r3, [r5, #0]
 8003c6c:	f7fc ff77 	bl	8000b5e <_isatty>
 8003c70:	1c43      	adds	r3, r0, #1
 8003c72:	d102      	bne.n	8003c7a <_isatty_r+0x1a>
 8003c74:	682b      	ldr	r3, [r5, #0]
 8003c76:	b103      	cbz	r3, 8003c7a <_isatty_r+0x1a>
 8003c78:	6023      	str	r3, [r4, #0]
 8003c7a:	bd38      	pop	{r3, r4, r5, pc}
 8003c7c:	2000010c 	.word	0x2000010c

08003c80 <_lseek_r>:
 8003c80:	b538      	push	{r3, r4, r5, lr}
 8003c82:	4d07      	ldr	r5, [pc, #28]	; (8003ca0 <_lseek_r+0x20>)
 8003c84:	4604      	mov	r4, r0
 8003c86:	4608      	mov	r0, r1
 8003c88:	4611      	mov	r1, r2
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	602a      	str	r2, [r5, #0]
 8003c8e:	461a      	mov	r2, r3
 8003c90:	f7fc ff70 	bl	8000b74 <_lseek>
 8003c94:	1c43      	adds	r3, r0, #1
 8003c96:	d102      	bne.n	8003c9e <_lseek_r+0x1e>
 8003c98:	682b      	ldr	r3, [r5, #0]
 8003c9a:	b103      	cbz	r3, 8003c9e <_lseek_r+0x1e>
 8003c9c:	6023      	str	r3, [r4, #0]
 8003c9e:	bd38      	pop	{r3, r4, r5, pc}
 8003ca0:	2000010c 	.word	0x2000010c

08003ca4 <__malloc_lock>:
 8003ca4:	4801      	ldr	r0, [pc, #4]	; (8003cac <__malloc_lock+0x8>)
 8003ca6:	f7ff be03 	b.w	80038b0 <__retarget_lock_acquire_recursive>
 8003caa:	bf00      	nop
 8003cac:	20000100 	.word	0x20000100

08003cb0 <__malloc_unlock>:
 8003cb0:	4801      	ldr	r0, [pc, #4]	; (8003cb8 <__malloc_unlock+0x8>)
 8003cb2:	f7ff bdfe 	b.w	80038b2 <__retarget_lock_release_recursive>
 8003cb6:	bf00      	nop
 8003cb8:	20000100 	.word	0x20000100

08003cbc <_read_r>:
 8003cbc:	b538      	push	{r3, r4, r5, lr}
 8003cbe:	4d07      	ldr	r5, [pc, #28]	; (8003cdc <_read_r+0x20>)
 8003cc0:	4604      	mov	r4, r0
 8003cc2:	4608      	mov	r0, r1
 8003cc4:	4611      	mov	r1, r2
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	602a      	str	r2, [r5, #0]
 8003cca:	461a      	mov	r2, r3
 8003ccc:	f7fc fef2 	bl	8000ab4 <_read>
 8003cd0:	1c43      	adds	r3, r0, #1
 8003cd2:	d102      	bne.n	8003cda <_read_r+0x1e>
 8003cd4:	682b      	ldr	r3, [r5, #0]
 8003cd6:	b103      	cbz	r3, 8003cda <_read_r+0x1e>
 8003cd8:	6023      	str	r3, [r4, #0]
 8003cda:	bd38      	pop	{r3, r4, r5, pc}
 8003cdc:	2000010c 	.word	0x2000010c

08003ce0 <_init>:
 8003ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ce2:	bf00      	nop
 8003ce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ce6:	bc08      	pop	{r3}
 8003ce8:	469e      	mov	lr, r3
 8003cea:	4770      	bx	lr

08003cec <_fini>:
 8003cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cee:	bf00      	nop
 8003cf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cf2:	bc08      	pop	{r3}
 8003cf4:	469e      	mov	lr, r3
 8003cf6:	4770      	bx	lr
