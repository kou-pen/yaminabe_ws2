
CAN_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000469c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08004860  08004860  00014860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048dc  080048dc  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080048dc  080048dc  000148dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080048e4  080048e4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048e4  080048e4  000148e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080048e8  080048e8  000148e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080048ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  20000070  0800495c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000120  0800495c  00020120  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d613  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002193  00000000  00000000  0002d6b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a48  00000000  00000000  0002f848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000980  00000000  00000000  00030290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024fd6  00000000  00000000  00030c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ca11  00000000  00000000  00055be6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d00dc  00000000  00000000  000625f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001326d3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002fd0  00000000  00000000  00132724  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000070 	.word	0x20000070
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08004848 	.word	0x08004848

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000074 	.word	0x20000074
 8000200:	08004848 	.word	0x08004848

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b08a      	sub	sp, #40	; 0x28
 800050c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	setbuf(stdout, NULL);
 800050e:	4b34      	ldr	r3, [pc, #208]	; (80005e0 <main+0xd8>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	689b      	ldr	r3, [r3, #8]
 8000514:	2100      	movs	r1, #0
 8000516:	4618      	mov	r0, r3
 8000518:	f003 fd48 	bl	8003fac <setbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051c:	f000 fe48 	bl	80011b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000520:	f000 f864 	bl	80005ec <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000524:	f000 f94e 	bl	80007c4 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 8000528:	f000 f91e 	bl	8000768 <_ZL19MX_USART2_UART_Initv>
  MX_CAN2_Init();
 800052c:	f000 f8e0 	bl	80006f0 <_ZL12MX_CAN2_Initv>
  /* USER CODE BEGIN 2 */
	CAN_FilterTypeDef filter;
	  filter.FilterIdHigh         = 0;                        // フィルターID(上位16ビット)
 8000530:	2300      	movs	r3, #0
 8000532:	603b      	str	r3, [r7, #0]
	  filter.FilterIdLow          = 0;                        // フィルターID(下位16ビット)
 8000534:	2300      	movs	r3, #0
 8000536:	607b      	str	r3, [r7, #4]
	  filter.FilterMaskIdHigh     = 0;                        // フィルターマスク(上位16ビット)
 8000538:	2300      	movs	r3, #0
 800053a:	60bb      	str	r3, [r7, #8]
	  filter.FilterMaskIdLow      = 0;                        // フィルターマスク(下位16ビット)
 800053c:	2300      	movs	r3, #0
 800053e:	60fb      	str	r3, [r7, #12]
	  filter.FilterScale          = CAN_FILTERSCALE_32BIT;    // フィルタースケール
 8000540:	2301      	movs	r3, #1
 8000542:	61fb      	str	r3, [r7, #28]
	  filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;         // フィルターに割り当てるFIFO
 8000544:	2300      	movs	r3, #0
 8000546:	613b      	str	r3, [r7, #16]
	  filter.FilterBank           = 14;                        // フィルターバンクNo
 8000548:	230e      	movs	r3, #14
 800054a:	617b      	str	r3, [r7, #20]
	  filter.FilterMode           = CAN_FILTERMODE_IDMASK;    // フィルターモード
 800054c:	2300      	movs	r3, #0
 800054e:	61bb      	str	r3, [r7, #24]
	  filter.SlaveStartFilterBank = 14;                       // スレーブCANの開始フィルターバンクNo
 8000550:	230e      	movs	r3, #14
 8000552:	627b      	str	r3, [r7, #36]	; 0x24
	  filter.FilterActivation     = ENABLE;                   // フィルター無効／有効
 8000554:	2301      	movs	r3, #1
 8000556:	623b      	str	r3, [r7, #32]

  HAL_CAN_ConfigFilter(&hcan2, &filter);
 8000558:	463b      	mov	r3, r7
 800055a:	4619      	mov	r1, r3
 800055c:	4821      	ldr	r0, [pc, #132]	; (80005e4 <main+0xdc>)
 800055e:	f000 ffb9 	bl	80014d4 <HAL_CAN_ConfigFilter>

  HAL_GPIO_WritePin(GPIOA, LED1_Pin, GPIO_PIN_SET);
 8000562:	2201      	movs	r2, #1
 8000564:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000568:	481f      	ldr	r0, [pc, #124]	; (80005e8 <main+0xe0>)
 800056a:	f001 ff77 	bl	800245c <HAL_GPIO_WritePin>
  HAL_Delay(100);
 800056e:	2064      	movs	r0, #100	; 0x64
 8000570:	f000 fe90 	bl	8001294 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, LED2_Pin, GPIO_PIN_SET);
 8000574:	2201      	movs	r2, #1
 8000576:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800057a:	481b      	ldr	r0, [pc, #108]	; (80005e8 <main+0xe0>)
 800057c:	f001 ff6e 	bl	800245c <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000580:	2064      	movs	r0, #100	; 0x64
 8000582:	f000 fe87 	bl	8001294 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, LED3_Pin, GPIO_PIN_SET);
 8000586:	2201      	movs	r2, #1
 8000588:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800058c:	4816      	ldr	r0, [pc, #88]	; (80005e8 <main+0xe0>)
 800058e:	f001 ff65 	bl	800245c <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000592:	2064      	movs	r0, #100	; 0x64
 8000594:	f000 fe7e 	bl	8001294 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, LED1_Pin, GPIO_PIN_RESET);
 8000598:	2200      	movs	r2, #0
 800059a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800059e:	4812      	ldr	r0, [pc, #72]	; (80005e8 <main+0xe0>)
 80005a0:	f001 ff5c 	bl	800245c <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80005a4:	2064      	movs	r0, #100	; 0x64
 80005a6:	f000 fe75 	bl	8001294 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, LED2_Pin, GPIO_PIN_RESET);
 80005aa:	2200      	movs	r2, #0
 80005ac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005b0:	480d      	ldr	r0, [pc, #52]	; (80005e8 <main+0xe0>)
 80005b2:	f001 ff53 	bl	800245c <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80005b6:	2064      	movs	r0, #100	; 0x64
 80005b8:	f000 fe6c 	bl	8001294 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, LED3_Pin, GPIO_PIN_RESET);
 80005bc:	2200      	movs	r2, #0
 80005be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005c2:	4809      	ldr	r0, [pc, #36]	; (80005e8 <main+0xe0>)
 80005c4:	f001 ff4a 	bl	800245c <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80005c8:	2064      	movs	r0, #100	; 0x64
 80005ca:	f000 fe63 	bl	8001294 <HAL_Delay>

  HAL_CAN_Start(&hcan2);
 80005ce:	4805      	ldr	r0, [pc, #20]	; (80005e4 <main+0xdc>)
 80005d0:	f001 f860 	bl	8001694 <HAL_CAN_Start>
  // 割り込み有効
  HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 80005d4:	2102      	movs	r1, #2
 80005d6:	4803      	ldr	r0, [pc, #12]	; (80005e4 <main+0xdc>)
 80005d8:	f001 f9b2 	bl	8001940 <HAL_CAN_ActivateNotification>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005dc:	e7fe      	b.n	80005dc <main+0xd4>
 80005de:	bf00      	nop
 80005e0:	2000000c 	.word	0x2000000c
 80005e4:	2000008c 	.word	0x2000008c
 80005e8:	40020000 	.word	0x40020000

080005ec <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b094      	sub	sp, #80	; 0x50
 80005f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f2:	f107 031c 	add.w	r3, r7, #28
 80005f6:	2234      	movs	r2, #52	; 0x34
 80005f8:	2100      	movs	r1, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	f003 fcce 	bl	8003f9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000600:	f107 0308 	add.w	r3, r7, #8
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
 800060a:	609a      	str	r2, [r3, #8]
 800060c:	60da      	str	r2, [r3, #12]
 800060e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000610:	2300      	movs	r3, #0
 8000612:	607b      	str	r3, [r7, #4]
 8000614:	4b34      	ldr	r3, [pc, #208]	; (80006e8 <_Z18SystemClock_Configv+0xfc>)
 8000616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000618:	4a33      	ldr	r2, [pc, #204]	; (80006e8 <_Z18SystemClock_Configv+0xfc>)
 800061a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800061e:	6413      	str	r3, [r2, #64]	; 0x40
 8000620:	4b31      	ldr	r3, [pc, #196]	; (80006e8 <_Z18SystemClock_Configv+0xfc>)
 8000622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000624:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000628:	607b      	str	r3, [r7, #4]
 800062a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800062c:	2300      	movs	r3, #0
 800062e:	603b      	str	r3, [r7, #0]
 8000630:	4b2e      	ldr	r3, [pc, #184]	; (80006ec <_Z18SystemClock_Configv+0x100>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a2d      	ldr	r2, [pc, #180]	; (80006ec <_Z18SystemClock_Configv+0x100>)
 8000636:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800063a:	6013      	str	r3, [r2, #0]
 800063c:	4b2b      	ldr	r3, [pc, #172]	; (80006ec <_Z18SystemClock_Configv+0x100>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000644:	603b      	str	r3, [r7, #0]
 8000646:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000648:	2302      	movs	r3, #2
 800064a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800064c:	2301      	movs	r3, #1
 800064e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000650:	2310      	movs	r3, #16
 8000652:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000654:	2302      	movs	r3, #2
 8000656:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000658:	2300      	movs	r3, #0
 800065a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800065c:	2308      	movs	r3, #8
 800065e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000660:	23b4      	movs	r3, #180	; 0xb4
 8000662:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000664:	2302      	movs	r3, #2
 8000666:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000668:	2302      	movs	r3, #2
 800066a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800066c:	2302      	movs	r3, #2
 800066e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000670:	f107 031c 	add.w	r3, r7, #28
 8000674:	4618      	mov	r0, r3
 8000676:	f002 faa5 	bl	8002bc4 <HAL_RCC_OscConfig>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	bf14      	ite	ne
 8000680:	2301      	movne	r3, #1
 8000682:	2300      	moveq	r3, #0
 8000684:	b2db      	uxtb	r3, r3
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 800068a:	f000 fa8b 	bl	8000ba4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800068e:	f001 feff 	bl	8002490 <HAL_PWREx_EnableOverDrive>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	bf14      	ite	ne
 8000698:	2301      	movne	r3, #1
 800069a:	2300      	moveq	r3, #0
 800069c:	b2db      	uxtb	r3, r3
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <_Z18SystemClock_Configv+0xba>
  {
    Error_Handler();
 80006a2:	f000 fa7f 	bl	8000ba4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a6:	230f      	movs	r3, #15
 80006a8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006aa:	2302      	movs	r3, #2
 80006ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ae:	2300      	movs	r3, #0
 80006b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006b2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006bc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006be:	f107 0308 	add.w	r3, r7, #8
 80006c2:	2105      	movs	r1, #5
 80006c4:	4618      	mov	r0, r3
 80006c6:	f001 ff33 	bl	8002530 <HAL_RCC_ClockConfig>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	bf14      	ite	ne
 80006d0:	2301      	movne	r3, #1
 80006d2:	2300      	moveq	r3, #0
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <_Z18SystemClock_Configv+0xf2>
  {
    Error_Handler();
 80006da:	f000 fa63 	bl	8000ba4 <Error_Handler>
  }
}
 80006de:	bf00      	nop
 80006e0:	3750      	adds	r7, #80	; 0x50
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	40023800 	.word	0x40023800
 80006ec:	40007000 	.word	0x40007000

080006f0 <_ZL12MX_CAN2_Initv>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80006f4:	4b1a      	ldr	r3, [pc, #104]	; (8000760 <_ZL12MX_CAN2_Initv+0x70>)
 80006f6:	4a1b      	ldr	r2, [pc, #108]	; (8000764 <_ZL12MX_CAN2_Initv+0x74>)
 80006f8:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 9;
 80006fa:	4b19      	ldr	r3, [pc, #100]	; (8000760 <_ZL12MX_CAN2_Initv+0x70>)
 80006fc:	2209      	movs	r2, #9
 80006fe:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000700:	4b17      	ldr	r3, [pc, #92]	; (8000760 <_ZL12MX_CAN2_Initv+0x70>)
 8000702:	2200      	movs	r2, #0
 8000704:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_4TQ;
 8000706:	4b16      	ldr	r3, [pc, #88]	; (8000760 <_ZL12MX_CAN2_Initv+0x70>)
 8000708:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 800070c:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_4TQ;
 800070e:	4b14      	ldr	r3, [pc, #80]	; (8000760 <_ZL12MX_CAN2_Initv+0x70>)
 8000710:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000714:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_5TQ;
 8000716:	4b12      	ldr	r3, [pc, #72]	; (8000760 <_ZL12MX_CAN2_Initv+0x70>)
 8000718:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800071c:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 800071e:	4b10      	ldr	r3, [pc, #64]	; (8000760 <_ZL12MX_CAN2_Initv+0x70>)
 8000720:	2200      	movs	r2, #0
 8000722:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000724:	4b0e      	ldr	r3, [pc, #56]	; (8000760 <_ZL12MX_CAN2_Initv+0x70>)
 8000726:	2200      	movs	r2, #0
 8000728:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 800072a:	4b0d      	ldr	r3, [pc, #52]	; (8000760 <_ZL12MX_CAN2_Initv+0x70>)
 800072c:	2200      	movs	r2, #0
 800072e:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000730:	4b0b      	ldr	r3, [pc, #44]	; (8000760 <_ZL12MX_CAN2_Initv+0x70>)
 8000732:	2200      	movs	r2, #0
 8000734:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000736:	4b0a      	ldr	r3, [pc, #40]	; (8000760 <_ZL12MX_CAN2_Initv+0x70>)
 8000738:	2200      	movs	r2, #0
 800073a:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 800073c:	4b08      	ldr	r3, [pc, #32]	; (8000760 <_ZL12MX_CAN2_Initv+0x70>)
 800073e:	2200      	movs	r2, #0
 8000740:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000742:	4807      	ldr	r0, [pc, #28]	; (8000760 <_ZL12MX_CAN2_Initv+0x70>)
 8000744:	f000 fdca 	bl	80012dc <HAL_CAN_Init>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	bf14      	ite	ne
 800074e:	2301      	movne	r3, #1
 8000750:	2300      	moveq	r3, #0
 8000752:	b2db      	uxtb	r3, r3
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <_ZL12MX_CAN2_Initv+0x6c>
  {
    Error_Handler();
 8000758:	f000 fa24 	bl	8000ba4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 800075c:	bf00      	nop
 800075e:	bd80      	pop	{r7, pc}
 8000760:	2000008c 	.word	0x2000008c
 8000764:	40006800 	.word	0x40006800

08000768 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800076c:	4b13      	ldr	r3, [pc, #76]	; (80007bc <_ZL19MX_USART2_UART_Initv+0x54>)
 800076e:	4a14      	ldr	r2, [pc, #80]	; (80007c0 <_ZL19MX_USART2_UART_Initv+0x58>)
 8000770:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000772:	4b12      	ldr	r3, [pc, #72]	; (80007bc <_ZL19MX_USART2_UART_Initv+0x54>)
 8000774:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000778:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800077a:	4b10      	ldr	r3, [pc, #64]	; (80007bc <_ZL19MX_USART2_UART_Initv+0x54>)
 800077c:	2200      	movs	r2, #0
 800077e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000780:	4b0e      	ldr	r3, [pc, #56]	; (80007bc <_ZL19MX_USART2_UART_Initv+0x54>)
 8000782:	2200      	movs	r2, #0
 8000784:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000786:	4b0d      	ldr	r3, [pc, #52]	; (80007bc <_ZL19MX_USART2_UART_Initv+0x54>)
 8000788:	2200      	movs	r2, #0
 800078a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800078c:	4b0b      	ldr	r3, [pc, #44]	; (80007bc <_ZL19MX_USART2_UART_Initv+0x54>)
 800078e:	220c      	movs	r2, #12
 8000790:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000792:	4b0a      	ldr	r3, [pc, #40]	; (80007bc <_ZL19MX_USART2_UART_Initv+0x54>)
 8000794:	2200      	movs	r2, #0
 8000796:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000798:	4b08      	ldr	r3, [pc, #32]	; (80007bc <_ZL19MX_USART2_UART_Initv+0x54>)
 800079a:	2200      	movs	r2, #0
 800079c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800079e:	4807      	ldr	r0, [pc, #28]	; (80007bc <_ZL19MX_USART2_UART_Initv+0x54>)
 80007a0:	f002 fcae 	bl	8003100 <HAL_UART_Init>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	bf14      	ite	ne
 80007aa:	2301      	movne	r3, #1
 80007ac:	2300      	moveq	r3, #0
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 80007b4:	f000 f9f6 	bl	8000ba4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007b8:	bf00      	nop
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	200000b4 	.word	0x200000b4
 80007c0:	40004400 	.word	0x40004400

080007c4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b08a      	sub	sp, #40	; 0x28
 80007c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ca:	f107 0314 	add.w	r3, r7, #20
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	605a      	str	r2, [r3, #4]
 80007d4:	609a      	str	r2, [r3, #8]
 80007d6:	60da      	str	r2, [r3, #12]
 80007d8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	613b      	str	r3, [r7, #16]
 80007de:	4b2e      	ldr	r3, [pc, #184]	; (8000898 <_ZL12MX_GPIO_Initv+0xd4>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4a2d      	ldr	r2, [pc, #180]	; (8000898 <_ZL12MX_GPIO_Initv+0xd4>)
 80007e4:	f043 0304 	orr.w	r3, r3, #4
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ea:	4b2b      	ldr	r3, [pc, #172]	; (8000898 <_ZL12MX_GPIO_Initv+0xd4>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	f003 0304 	and.w	r3, r3, #4
 80007f2:	613b      	str	r3, [r7, #16]
 80007f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	60fb      	str	r3, [r7, #12]
 80007fa:	4b27      	ldr	r3, [pc, #156]	; (8000898 <_ZL12MX_GPIO_Initv+0xd4>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	4a26      	ldr	r2, [pc, #152]	; (8000898 <_ZL12MX_GPIO_Initv+0xd4>)
 8000800:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000804:	6313      	str	r3, [r2, #48]	; 0x30
 8000806:	4b24      	ldr	r3, [pc, #144]	; (8000898 <_ZL12MX_GPIO_Initv+0xd4>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800080e:	60fb      	str	r3, [r7, #12]
 8000810:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	60bb      	str	r3, [r7, #8]
 8000816:	4b20      	ldr	r3, [pc, #128]	; (8000898 <_ZL12MX_GPIO_Initv+0xd4>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	4a1f      	ldr	r2, [pc, #124]	; (8000898 <_ZL12MX_GPIO_Initv+0xd4>)
 800081c:	f043 0301 	orr.w	r3, r3, #1
 8000820:	6313      	str	r3, [r2, #48]	; 0x30
 8000822:	4b1d      	ldr	r3, [pc, #116]	; (8000898 <_ZL12MX_GPIO_Initv+0xd4>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	f003 0301 	and.w	r3, r3, #1
 800082a:	60bb      	str	r3, [r7, #8]
 800082c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	607b      	str	r3, [r7, #4]
 8000832:	4b19      	ldr	r3, [pc, #100]	; (8000898 <_ZL12MX_GPIO_Initv+0xd4>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	4a18      	ldr	r2, [pc, #96]	; (8000898 <_ZL12MX_GPIO_Initv+0xd4>)
 8000838:	f043 0302 	orr.w	r3, r3, #2
 800083c:	6313      	str	r3, [r2, #48]	; 0x30
 800083e:	4b16      	ldr	r3, [pc, #88]	; (8000898 <_ZL12MX_GPIO_Initv+0xd4>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	f003 0302 	and.w	r3, r3, #2
 8000846:	607b      	str	r3, [r7, #4]
 8000848:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 800084a:	2200      	movs	r2, #0
 800084c:	f24e 0120 	movw	r1, #57376	; 0xe020
 8000850:	4812      	ldr	r0, [pc, #72]	; (800089c <_ZL12MX_GPIO_Initv+0xd8>)
 8000852:	f001 fe03 	bl	800245c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000856:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800085a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800085c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000860:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000862:	2300      	movs	r3, #0
 8000864:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000866:	f107 0314 	add.w	r3, r7, #20
 800086a:	4619      	mov	r1, r3
 800086c:	480c      	ldr	r0, [pc, #48]	; (80008a0 <_ZL12MX_GPIO_Initv+0xdc>)
 800086e:	f001 fc61 	bl	8002134 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LED1_Pin|LED2_Pin|LED3_Pin;
 8000872:	f24e 0320 	movw	r3, #57376	; 0xe020
 8000876:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000878:	2301      	movs	r3, #1
 800087a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000880:	2300      	movs	r3, #0
 8000882:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000884:	f107 0314 	add.w	r3, r7, #20
 8000888:	4619      	mov	r1, r3
 800088a:	4804      	ldr	r0, [pc, #16]	; (800089c <_ZL12MX_GPIO_Initv+0xd8>)
 800088c:	f001 fc52 	bl	8002134 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000890:	bf00      	nop
 8000892:	3728      	adds	r7, #40	; 0x28
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	40023800 	.word	0x40023800
 800089c:	40020000 	.word	0x40020000
 80008a0:	40020800 	.word	0x40020800

080008a4 <HAL_CAN_RxFifo0MsgPendingCallback>:
  uint32_t dlc;
  uint8_t data[8];


  void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
  {
 80008a4:	b590      	push	{r4, r7, lr}
 80008a6:	b097      	sub	sp, #92	; 0x5c
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
	  CAN_RxHeaderTypeDef RxHeader;
	  int switch_nom;
	  std::array<int,4> arr_data;
	  std::array<int,4> arr_old_data;

	  if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 80008ac:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80008b0:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80008b4:	2100      	movs	r1, #0
 80008b6:	6878      	ldr	r0, [r7, #4]
 80008b8:	f000 ff30 	bl	800171c <HAL_CAN_GetRxMessage>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	bf0c      	ite	eq
 80008c2:	2301      	moveq	r3, #1
 80008c4:	2300      	movne	r3, #0
 80008c6:	b2db      	uxtb	r3, r3
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	f000 8092 	beq.w	80009f2 <HAL_CAN_RxFifo0MsgPendingCallback+0x14e>
	  {
			id = (RxHeader.IDE == CAN_ID_STD)? RxHeader.StdId : RxHeader.ExtId;     // ID
 80008ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d101      	bne.n	80008d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>
 80008d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008d6:	e000      	b.n	80008da <HAL_CAN_RxFifo0MsgPendingCallback+0x36>
 80008d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008da:	4a48      	ldr	r2, [pc, #288]	; (80009fc <HAL_CAN_RxFifo0MsgPendingCallback+0x158>)
 80008dc:	6013      	str	r3, [r2, #0]
			dlc = RxHeader.DLC;                                                     // DLC
 80008de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80008e0:	4a47      	ldr	r2, [pc, #284]	; (8000a00 <HAL_CAN_RxFifo0MsgPendingCallback+0x15c>)
 80008e2:	6013      	str	r3, [r2, #0]
			data[0] = RxData[0];                                                    // Data
 80008e4:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 80008e8:	4b46      	ldr	r3, [pc, #280]	; (8000a04 <HAL_CAN_RxFifo0MsgPendingCallback+0x160>)
 80008ea:	701a      	strb	r2, [r3, #0]
			data[1] = RxData[1];
 80008ec:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 80008f0:	4b44      	ldr	r3, [pc, #272]	; (8000a04 <HAL_CAN_RxFifo0MsgPendingCallback+0x160>)
 80008f2:	705a      	strb	r2, [r3, #1]
			data[2] = RxData[2];
 80008f4:	f897 204a 	ldrb.w	r2, [r7, #74]	; 0x4a
 80008f8:	4b42      	ldr	r3, [pc, #264]	; (8000a04 <HAL_CAN_RxFifo0MsgPendingCallback+0x160>)
 80008fa:	709a      	strb	r2, [r3, #2]
			data[3] = RxData[3];
 80008fc:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 8000900:	4b40      	ldr	r3, [pc, #256]	; (8000a04 <HAL_CAN_RxFifo0MsgPendingCallback+0x160>)
 8000902:	70da      	strb	r2, [r3, #3]
			data[4] = RxData[4];
 8000904:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 8000908:	4b3e      	ldr	r3, [pc, #248]	; (8000a04 <HAL_CAN_RxFifo0MsgPendingCallback+0x160>)
 800090a:	711a      	strb	r2, [r3, #4]
			data[5] = RxData[5];
 800090c:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8000910:	4b3c      	ldr	r3, [pc, #240]	; (8000a04 <HAL_CAN_RxFifo0MsgPendingCallback+0x160>)
 8000912:	715a      	strb	r2, [r3, #5]
			data[6] = RxData[6];
 8000914:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8000918:	4b3a      	ldr	r3, [pc, #232]	; (8000a04 <HAL_CAN_RxFifo0MsgPendingCallback+0x160>)
 800091a:	719a      	strb	r2, [r3, #6]
			data[7] = RxData[7];
 800091c:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8000920:	4b38      	ldr	r3, [pc, #224]	; (8000a04 <HAL_CAN_RxFifo0MsgPendingCallback+0x160>)
 8000922:	71da      	strb	r2, [r3, #7]

			for(int i = 0;i < 4;i++){
 8000924:	2300      	movs	r3, #0
 8000926:	657b      	str	r3, [r7, #84]	; 0x54
 8000928:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800092a:	2b03      	cmp	r3, #3
 800092c:	dc11      	bgt.n	8000952 <HAL_CAN_RxFifo0MsgPendingCallback+0xae>
				arr_data[i] = data[i+4];
 800092e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000930:	3304      	adds	r3, #4
 8000932:	4a34      	ldr	r2, [pc, #208]	; (8000a04 <HAL_CAN_RxFifo0MsgPendingCallback+0x160>)
 8000934:	5cd4      	ldrb	r4, [r2, r3]
 8000936:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000938:	f107 031c 	add.w	r3, r7, #28
 800093c:	4611      	mov	r1, r2
 800093e:	4618      	mov	r0, r3
 8000940:	f000 f935 	bl	8000bae <_ZNSt5arrayIiLj4EEixEj>
 8000944:	4603      	mov	r3, r0
 8000946:	4622      	mov	r2, r4
 8000948:	601a      	str	r2, [r3, #0]
			for(int i = 0;i < 4;i++){
 800094a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800094c:	3301      	adds	r3, #1
 800094e:	657b      	str	r3, [r7, #84]	; 0x54
 8000950:	e7ea      	b.n	8000928 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>
			}
			if (arr_data[0] <= 1 or arr_data[1] <= 1 or arr_data[2] <= 1 or arr_data[3] <= 1){
 8000952:	f107 031c 	add.w	r3, r7, #28
 8000956:	2100      	movs	r1, #0
 8000958:	4618      	mov	r0, r3
 800095a:	f000 f928 	bl	8000bae <_ZNSt5arrayIiLj4EEixEj>
 800095e:	4603      	mov	r3, r0
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	2b01      	cmp	r3, #1
 8000964:	dd1d      	ble.n	80009a2 <HAL_CAN_RxFifo0MsgPendingCallback+0xfe>
 8000966:	f107 031c 	add.w	r3, r7, #28
 800096a:	2101      	movs	r1, #1
 800096c:	4618      	mov	r0, r3
 800096e:	f000 f91e 	bl	8000bae <_ZNSt5arrayIiLj4EEixEj>
 8000972:	4603      	mov	r3, r0
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	2b01      	cmp	r3, #1
 8000978:	dd13      	ble.n	80009a2 <HAL_CAN_RxFifo0MsgPendingCallback+0xfe>
 800097a:	f107 031c 	add.w	r3, r7, #28
 800097e:	2102      	movs	r1, #2
 8000980:	4618      	mov	r0, r3
 8000982:	f000 f914 	bl	8000bae <_ZNSt5arrayIiLj4EEixEj>
 8000986:	4603      	mov	r3, r0
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	2b01      	cmp	r3, #1
 800098c:	dd09      	ble.n	80009a2 <HAL_CAN_RxFifo0MsgPendingCallback+0xfe>
 800098e:	f107 031c 	add.w	r3, r7, #28
 8000992:	2103      	movs	r1, #3
 8000994:	4618      	mov	r0, r3
 8000996:	f000 f90a 	bl	8000bae <_ZNSt5arrayIiLj4EEixEj>
 800099a:	4603      	mov	r3, r0
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	2b01      	cmp	r3, #1
 80009a0:	dc01      	bgt.n	80009a6 <HAL_CAN_RxFifo0MsgPendingCallback+0x102>
 80009a2:	2301      	movs	r3, #1
 80009a4:	e000      	b.n	80009a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x104>
 80009a6:	2300      	movs	r3, #0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d020      	beq.n	80009ee <HAL_CAN_RxFifo0MsgPendingCallback+0x14a>
				recovery_prog();
 80009ac:	f000 f8ee 	bl	8000b8c <_Z13recovery_progv>
				if (arr_data != arr_old_data) { //等しくない場合に切り替え操作
 80009b0:	f107 020c 	add.w	r2, r7, #12
 80009b4:	f107 031c 	add.w	r3, r7, #28
 80009b8:	4611      	mov	r1, r2
 80009ba:	4618      	mov	r0, r3
 80009bc:	f000 f906 	bl	8000bcc <_ZStneIiLj4EEbRKSt5arrayIT_XT0_EES4_>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d015      	beq.n	80009f2 <HAL_CAN_RxFifo0MsgPendingCallback+0x14e>
					switch_nom = judge_switch(arr_data,arr_old_data); //変更されたスイッチの番号を取得
 80009c6:	f107 020c 	add.w	r2, r7, #12
 80009ca:	f107 031c 	add.w	r3, r7, #28
 80009ce:	4611      	mov	r1, r2
 80009d0:	4618      	mov	r0, r3
 80009d2:	f000 f819 	bl	8000a08 <_Z12judge_switchRSt5arrayIiLj4EES1_>
 80009d6:	6538      	str	r0, [r7, #80]	; 0x50
					toggle_prog(switch_nom); //スイッチ番号を渡してプログラムを実行
 80009d8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80009da:	f000 f893 	bl	8000b04 <_Z11toggle_progi>
					arr_old_data = arr_data; //旧ボタンデータとして登録
 80009de:	f107 040c 	add.w	r4, r7, #12
 80009e2:	f107 031c 	add.w	r3, r7, #28
 80009e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80009e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
				emergency_prog();
			}

		  //printf("%d,%d,%d,%d,%d,%d,%d,%d\n",data[0],data[1],data[2],data[3],data[4],data[5],data[6],data[7]);
	  }
  }
 80009ec:	e001      	b.n	80009f2 <HAL_CAN_RxFifo0MsgPendingCallback+0x14e>
				emergency_prog();
 80009ee:	f000 f8c1 	bl	8000b74 <_Z14emergency_progv>
  }
 80009f2:	bf00      	nop
 80009f4:	375c      	adds	r7, #92	; 0x5c
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd90      	pop	{r4, r7, pc}
 80009fa:	bf00      	nop
 80009fc:	200000f8 	.word	0x200000f8
 8000a00:	200000fc 	.word	0x200000fc
 8000a04:	20000100 	.word	0x20000100

08000a08 <_Z12judge_switchRSt5arrayIiLj4EES1_>:
  {
    HAL_UART_Transmit(&huart2,(uint8_t *)ptr,len,10);
    return len;
  }

  int judge_switch(std::array<int,4>& new_arr,std::array<int,4>& old_arr){ //FIXME:読みにくい
 8000a08:	b590      	push	{r4, r7, lr}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
 8000a10:	6039      	str	r1, [r7, #0]
      if(new_arr[0]!=old_arr[0] and new_arr[0] == 1){return 1;}//旧ボタンデータ[0]が新ボタンデータ[0]と等しくないかつ新ボタンデータ[0]が1
 8000a12:	2100      	movs	r1, #0
 8000a14:	6878      	ldr	r0, [r7, #4]
 8000a16:	f000 f8ca 	bl	8000bae <_ZNSt5arrayIiLj4EEixEj>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	681c      	ldr	r4, [r3, #0]
 8000a1e:	2100      	movs	r1, #0
 8000a20:	6838      	ldr	r0, [r7, #0]
 8000a22:	f000 f8c4 	bl	8000bae <_ZNSt5arrayIiLj4EEixEj>
 8000a26:	4603      	mov	r3, r0
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	429c      	cmp	r4, r3
 8000a2c:	d009      	beq.n	8000a42 <_Z12judge_switchRSt5arrayIiLj4EES1_+0x3a>
 8000a2e:	2100      	movs	r1, #0
 8000a30:	6878      	ldr	r0, [r7, #4]
 8000a32:	f000 f8bc 	bl	8000bae <_ZNSt5arrayIiLj4EEixEj>
 8000a36:	4603      	mov	r3, r0
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	2b01      	cmp	r3, #1
 8000a3c:	d101      	bne.n	8000a42 <_Z12judge_switchRSt5arrayIiLj4EES1_+0x3a>
 8000a3e:	2301      	movs	r3, #1
 8000a40:	e000      	b.n	8000a44 <_Z12judge_switchRSt5arrayIiLj4EES1_+0x3c>
 8000a42:	2300      	movs	r3, #0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <_Z12judge_switchRSt5arrayIiLj4EES1_+0x44>
 8000a48:	2301      	movs	r3, #1
 8000a4a:	e057      	b.n	8000afc <_Z12judge_switchRSt5arrayIiLj4EES1_+0xf4>
      else if(new_arr[1]!=old_arr[1] and new_arr[1] == 1){return 2;}
 8000a4c:	2101      	movs	r1, #1
 8000a4e:	6878      	ldr	r0, [r7, #4]
 8000a50:	f000 f8ad 	bl	8000bae <_ZNSt5arrayIiLj4EEixEj>
 8000a54:	4603      	mov	r3, r0
 8000a56:	681c      	ldr	r4, [r3, #0]
 8000a58:	2101      	movs	r1, #1
 8000a5a:	6838      	ldr	r0, [r7, #0]
 8000a5c:	f000 f8a7 	bl	8000bae <_ZNSt5arrayIiLj4EEixEj>
 8000a60:	4603      	mov	r3, r0
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	429c      	cmp	r4, r3
 8000a66:	d009      	beq.n	8000a7c <_Z12judge_switchRSt5arrayIiLj4EES1_+0x74>
 8000a68:	2101      	movs	r1, #1
 8000a6a:	6878      	ldr	r0, [r7, #4]
 8000a6c:	f000 f89f 	bl	8000bae <_ZNSt5arrayIiLj4EEixEj>
 8000a70:	4603      	mov	r3, r0
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	2b01      	cmp	r3, #1
 8000a76:	d101      	bne.n	8000a7c <_Z12judge_switchRSt5arrayIiLj4EES1_+0x74>
 8000a78:	2301      	movs	r3, #1
 8000a7a:	e000      	b.n	8000a7e <_Z12judge_switchRSt5arrayIiLj4EES1_+0x76>
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <_Z12judge_switchRSt5arrayIiLj4EES1_+0x7e>
 8000a82:	2302      	movs	r3, #2
 8000a84:	e03a      	b.n	8000afc <_Z12judge_switchRSt5arrayIiLj4EES1_+0xf4>
      else if(new_arr[2]!=old_arr[2] and new_arr[2] == 1){return 3;}
 8000a86:	2102      	movs	r1, #2
 8000a88:	6878      	ldr	r0, [r7, #4]
 8000a8a:	f000 f890 	bl	8000bae <_ZNSt5arrayIiLj4EEixEj>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	681c      	ldr	r4, [r3, #0]
 8000a92:	2102      	movs	r1, #2
 8000a94:	6838      	ldr	r0, [r7, #0]
 8000a96:	f000 f88a 	bl	8000bae <_ZNSt5arrayIiLj4EEixEj>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	429c      	cmp	r4, r3
 8000aa0:	d009      	beq.n	8000ab6 <_Z12judge_switchRSt5arrayIiLj4EES1_+0xae>
 8000aa2:	2102      	movs	r1, #2
 8000aa4:	6878      	ldr	r0, [r7, #4]
 8000aa6:	f000 f882 	bl	8000bae <_ZNSt5arrayIiLj4EEixEj>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	2b01      	cmp	r3, #1
 8000ab0:	d101      	bne.n	8000ab6 <_Z12judge_switchRSt5arrayIiLj4EES1_+0xae>
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	e000      	b.n	8000ab8 <_Z12judge_switchRSt5arrayIiLj4EES1_+0xb0>
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <_Z12judge_switchRSt5arrayIiLj4EES1_+0xb8>
 8000abc:	2303      	movs	r3, #3
 8000abe:	e01d      	b.n	8000afc <_Z12judge_switchRSt5arrayIiLj4EES1_+0xf4>
      else if(new_arr[3]!=old_arr[3] and new_arr[3] == 1){return 4;}
 8000ac0:	2103      	movs	r1, #3
 8000ac2:	6878      	ldr	r0, [r7, #4]
 8000ac4:	f000 f873 	bl	8000bae <_ZNSt5arrayIiLj4EEixEj>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	681c      	ldr	r4, [r3, #0]
 8000acc:	2103      	movs	r1, #3
 8000ace:	6838      	ldr	r0, [r7, #0]
 8000ad0:	f000 f86d 	bl	8000bae <_ZNSt5arrayIiLj4EEixEj>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	429c      	cmp	r4, r3
 8000ada:	d009      	beq.n	8000af0 <_Z12judge_switchRSt5arrayIiLj4EES1_+0xe8>
 8000adc:	2103      	movs	r1, #3
 8000ade:	6878      	ldr	r0, [r7, #4]
 8000ae0:	f000 f865 	bl	8000bae <_ZNSt5arrayIiLj4EEixEj>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	2b01      	cmp	r3, #1
 8000aea:	d101      	bne.n	8000af0 <_Z12judge_switchRSt5arrayIiLj4EES1_+0xe8>
 8000aec:	2301      	movs	r3, #1
 8000aee:	e000      	b.n	8000af2 <_Z12judge_switchRSt5arrayIiLj4EES1_+0xea>
 8000af0:	2300      	movs	r3, #0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <_Z12judge_switchRSt5arrayIiLj4EES1_+0xf2>
 8000af6:	2304      	movs	r3, #4
 8000af8:	e000      	b.n	8000afc <_Z12judge_switchRSt5arrayIiLj4EES1_+0xf4>
      else {return 0;}
 8000afa:	2300      	movs	r3, #0
  }
 8000afc:	4618      	mov	r0, r3
 8000afe:	370c      	adds	r7, #12
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd90      	pop	{r4, r7, pc}

08000b04 <_Z11toggle_progi>:

  void toggle_prog(int flag){
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
    switch (flag){ //各Caseで関数を呼び出し
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	2b04      	cmp	r3, #4
 8000b10:	d829      	bhi.n	8000b66 <_Z11toggle_progi+0x62>
 8000b12:	a201      	add	r2, pc, #4	; (adr r2, 8000b18 <_Z11toggle_progi+0x14>)
 8000b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b18:	08000b65 	.word	0x08000b65
 8000b1c:	08000b2d 	.word	0x08000b2d
 8000b20:	08000b3b 	.word	0x08000b3b
 8000b24:	08000b49 	.word	0x08000b49
 8000b28:	08000b57 	.word	0x08000b57
        case RELOAD:
        	HAL_GPIO_WritePin(GPIOA, LED1_Pin, GPIO_PIN_SET);
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b32:	480f      	ldr	r0, [pc, #60]	; (8000b70 <_Z11toggle_progi+0x6c>)
 8000b34:	f001 fc92 	bl	800245c <HAL_GPIO_WritePin>
            break;
 8000b38:	e015      	b.n	8000b66 <_Z11toggle_progi+0x62>
        case SHOOT:
        	HAL_GPIO_WritePin(GPIOA, LED1_Pin, GPIO_PIN_RESET);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b40:	480b      	ldr	r0, [pc, #44]	; (8000b70 <_Z11toggle_progi+0x6c>)
 8000b42:	f001 fc8b 	bl	800245c <HAL_GPIO_WritePin>
            break;
 8000b46:	e00e      	b.n	8000b66 <_Z11toggle_progi+0x62>
        case BELT_POSITIVE:
        	HAL_GPIO_WritePin(GPIOA, LED2_Pin, GPIO_PIN_SET);
 8000b48:	2201      	movs	r2, #1
 8000b4a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b4e:	4808      	ldr	r0, [pc, #32]	; (8000b70 <_Z11toggle_progi+0x6c>)
 8000b50:	f001 fc84 	bl	800245c <HAL_GPIO_WritePin>
            break;
 8000b54:	e007      	b.n	8000b66 <_Z11toggle_progi+0x62>
        case BELT_NEGATIVE:
        	HAL_GPIO_WritePin(GPIOA, LED2_Pin, GPIO_PIN_RESET);
 8000b56:	2200      	movs	r2, #0
 8000b58:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b5c:	4804      	ldr	r0, [pc, #16]	; (8000b70 <_Z11toggle_progi+0x6c>)
 8000b5e:	f001 fc7d 	bl	800245c <HAL_GPIO_WritePin>
            break;
 8000b62:	e000      	b.n	8000b66 <_Z11toggle_progi+0x62>
        case STATUS_ERROR:
            break;
 8000b64:	bf00      	nop
    }
}
 8000b66:	bf00      	nop
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40020000 	.word	0x40020000

08000b74 <_Z14emergency_progv>:

  void emergency_prog(void){
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(GPIOA, LED3_Pin, GPIO_PIN_SET);
 8000b78:	2201      	movs	r2, #1
 8000b7a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b7e:	4802      	ldr	r0, [pc, #8]	; (8000b88 <_Z14emergency_progv+0x14>)
 8000b80:	f001 fc6c 	bl	800245c <HAL_GPIO_WritePin>
  }
 8000b84:	bf00      	nop
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	40020000 	.word	0x40020000

08000b8c <_Z13recovery_progv>:

  void recovery_prog(void){
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(GPIOA, LED3_Pin, GPIO_PIN_RESET);
 8000b90:	2200      	movs	r2, #0
 8000b92:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b96:	4802      	ldr	r0, [pc, #8]	; (8000ba0 <_Z13recovery_progv+0x14>)
 8000b98:	f001 fc60 	bl	800245c <HAL_GPIO_WritePin>
  }
 8000b9c:	bf00      	nop
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	40020000 	.word	0x40020000

08000ba4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ba8:	b672      	cpsid	i
}
 8000baa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bac:	e7fe      	b.n	8000bac <Error_Handler+0x8>

08000bae <_ZNSt5arrayIiLj4EEixEj>:
      _GLIBCXX_NODISCARD constexpr bool
      empty() const noexcept { return size() == 0; }

      // Element access.
      _GLIBCXX17_CONSTEXPR reference
      operator[](size_type __n) noexcept
 8000bae:	b580      	push	{r7, lr}
 8000bb0:	b082      	sub	sp, #8
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	6078      	str	r0, [r7, #4]
 8000bb6:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	6839      	ldr	r1, [r7, #0]
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f000 f816 	bl	8000bee <_ZNSt14__array_traitsIiLj4EE6_S_refERA4_Kij>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	3708      	adds	r7, #8
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}

08000bcc <_ZStneIiLj4EEbRKSt5arrayIT_XT0_EES4_>:
    }
#else
  template<typename _Tp, std::size_t _Nm>
    _GLIBCXX20_CONSTEXPR
    inline bool
    operator!=(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
 8000bd4:	6039      	str	r1, [r7, #0]
    { return !(__one == __two); }
 8000bd6:	6839      	ldr	r1, [r7, #0]
 8000bd8:	6878      	ldr	r0, [r7, #4]
 8000bda:	f000 f817 	bl	8000c0c <_ZSteqIiLj4EEbRKSt5arrayIT_XT0_EES4_>
 8000bde:	4603      	mov	r3, r0
 8000be0:	f083 0301 	eor.w	r3, r3, #1
 8000be4:	b2db      	uxtb	r3, r3
 8000be6:	4618      	mov	r0, r3
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}

08000bee <_ZNSt14__array_traitsIiLj4EE6_S_refERA4_Kij>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8000bee:	b480      	push	{r7}
 8000bf0:	b083      	sub	sp, #12
 8000bf2:	af00      	add	r7, sp, #0
 8000bf4:	6078      	str	r0, [r7, #4]
 8000bf6:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	009b      	lsls	r3, r3, #2
 8000bfc:	687a      	ldr	r2, [r7, #4]
 8000bfe:	4413      	add	r3, r2
 8000c00:	4618      	mov	r0, r3
 8000c02:	370c      	adds	r7, #12
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr

08000c0c <_ZSteqIiLj4EEbRKSt5arrayIT_XT0_EES4_>:
    operator==(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)
 8000c0c:	b5b0      	push	{r4, r5, r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
 8000c14:	6039      	str	r1, [r7, #0]
    { return std::equal(__one.begin(), __one.end(), __two.begin()); }
 8000c16:	6878      	ldr	r0, [r7, #4]
 8000c18:	f000 f813 	bl	8000c42 <_ZNKSt5arrayIiLj4EE5beginEv>
 8000c1c:	4604      	mov	r4, r0
 8000c1e:	6878      	ldr	r0, [r7, #4]
 8000c20:	f000 f81b 	bl	8000c5a <_ZNKSt5arrayIiLj4EE3endEv>
 8000c24:	4605      	mov	r5, r0
 8000c26:	6838      	ldr	r0, [r7, #0]
 8000c28:	f000 f80b 	bl	8000c42 <_ZNKSt5arrayIiLj4EE5beginEv>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	461a      	mov	r2, r3
 8000c30:	4629      	mov	r1, r5
 8000c32:	4620      	mov	r0, r4
 8000c34:	f000 f81e 	bl	8000c74 <_ZSt5equalIPKiS1_EbT_S2_T0_>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bdb0      	pop	{r4, r5, r7, pc}

08000c42 <_ZNKSt5arrayIiLj4EE5beginEv>:
      begin() const noexcept
 8000c42:	b580      	push	{r7, lr}
 8000c44:	b082      	sub	sp, #8
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	6078      	str	r0, [r7, #4]
      { return const_iterator(data()); }
 8000c4a:	6878      	ldr	r0, [r7, #4]
 8000c4c:	f000 f822 	bl	8000c94 <_ZNKSt5arrayIiLj4EE4dataEv>
 8000c50:	4603      	mov	r3, r0
 8000c52:	4618      	mov	r0, r3
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}

08000c5a <_ZNKSt5arrayIiLj4EE3endEv>:
      end() const noexcept
 8000c5a:	b580      	push	{r7, lr}
 8000c5c:	b082      	sub	sp, #8
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	6078      	str	r0, [r7, #4]
      { return const_iterator(data() + _Nm); }
 8000c62:	6878      	ldr	r0, [r7, #4]
 8000c64:	f000 f816 	bl	8000c94 <_ZNKSt5arrayIiLj4EE4dataEv>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	3310      	adds	r3, #16
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	3708      	adds	r7, #8
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}

08000c74 <_ZSt5equalIPKiS1_EbT_S2_T0_>:
   *  ranges are equal.
  */
  template<typename _II1, typename _II2>
    _GLIBCXX20_CONSTEXPR
    inline bool
    equal(_II1 __first1, _II1 __last1, _II2 __first2)
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b084      	sub	sp, #16
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	60f8      	str	r0, [r7, #12]
 8000c7c:	60b9      	str	r1, [r7, #8]
 8000c7e:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_EqualOpConcept<
	    typename iterator_traits<_II1>::value_type,
	    typename iterator_traits<_II2>::value_type>)
      __glibcxx_requires_can_increment_range(__first1, __last1, __first2);

      return std::__equal_aux(__first1, __last1, __first2);
 8000c80:	687a      	ldr	r2, [r7, #4]
 8000c82:	68b9      	ldr	r1, [r7, #8]
 8000c84:	68f8      	ldr	r0, [r7, #12]
 8000c86:	f000 f812 	bl	8000cae <_ZSt11__equal_auxIPKiS1_EbT_S2_T0_>
 8000c8a:	4603      	mov	r3, r0
    }
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	3710      	adds	r7, #16
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}

08000c94 <_ZNKSt5arrayIiLj4EE4dataEv>:
      data() const noexcept
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f000 f821 	bl	8000ce6 <_ZNSt14__array_traitsIiLj4EE6_S_ptrERA4_Ki>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}

08000cae <_ZSt11__equal_auxIPKiS1_EbT_S2_T0_>:
    __equal_aux(_II1 __first1, _II1 __last1, _II2 __first2)
 8000cae:	b5b0      	push	{r4, r5, r7, lr}
 8000cb0:	b084      	sub	sp, #16
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	60f8      	str	r0, [r7, #12]
 8000cb6:	60b9      	str	r1, [r7, #8]
 8000cb8:	607a      	str	r2, [r7, #4]
      return std::__equal_aux1(std::__niter_base(__first1),
 8000cba:	68f8      	ldr	r0, [r7, #12]
 8000cbc:	f000 f81e 	bl	8000cfc <_ZSt12__niter_baseIPKiET_S2_>
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	68b8      	ldr	r0, [r7, #8]
 8000cc4:	f000 f81a 	bl	8000cfc <_ZSt12__niter_baseIPKiET_S2_>
 8000cc8:	4605      	mov	r5, r0
 8000cca:	6878      	ldr	r0, [r7, #4]
 8000ccc:	f000 f816 	bl	8000cfc <_ZSt12__niter_baseIPKiET_S2_>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	4629      	mov	r1, r5
 8000cd6:	4620      	mov	r0, r4
 8000cd8:	f000 f81b 	bl	8000d12 <_ZSt12__equal_aux1IPKiS1_EbT_S2_T0_>
 8000cdc:	4603      	mov	r3, r0
    }
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3710      	adds	r7, #16
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bdb0      	pop	{r4, r5, r7, pc}

08000ce6 <_ZNSt14__array_traitsIiLj4EE6_S_ptrERA4_Ki>:
      _S_ptr(const _Type& __t) noexcept
 8000ce6:	b480      	push	{r7}
 8000ce8:	b083      	sub	sp, #12
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	370c      	adds	r7, #12
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr

08000cfc <_ZSt12__niter_baseIPKiET_S2_>:
    __niter_base(_Iterator __it)
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
    { return __it; }
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	4618      	mov	r0, r3
 8000d08:	370c      	adds	r7, #12
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr

08000d12 <_ZSt12__equal_aux1IPKiS1_EbT_S2_T0_>:
    __equal_aux1(_II1 __first1, _II1 __last1, _II2 __first2)
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b086      	sub	sp, #24
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	60f8      	str	r0, [r7, #12]
 8000d1a:	60b9      	str	r1, [r7, #8]
 8000d1c:	607a      	str	r2, [r7, #4]
      const bool __simple = ((__is_integer<_ValueType1>::__value
 8000d1e:	2301      	movs	r3, #1
 8000d20:	75fb      	strb	r3, [r7, #23]
      return std::__equal<__simple>::equal(__first1, __last1, __first2);
 8000d22:	687a      	ldr	r2, [r7, #4]
 8000d24:	68b9      	ldr	r1, [r7, #8]
 8000d26:	68f8      	ldr	r0, [r7, #12]
 8000d28:	f000 f805 	bl	8000d36 <_ZNSt7__equalILb1EE5equalIiEEbPKT_S4_S4_>
 8000d2c:	4603      	mov	r3, r0
    }
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3718      	adds	r7, #24
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}

08000d36 <_ZNSt7__equalILb1EE5equalIiEEbPKT_S4_S4_>:
	equal(const _Tp* __first1, const _Tp* __last1, const _Tp* __first2)
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b086      	sub	sp, #24
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	60f8      	str	r0, [r7, #12]
 8000d3e:	60b9      	str	r1, [r7, #8]
 8000d40:	607a      	str	r2, [r7, #4]
	  if (const size_t __len = (__last1 - __first1))
 8000d42:	68ba      	ldr	r2, [r7, #8]
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	1ad3      	subs	r3, r2, r3
 8000d48:	109b      	asrs	r3, r3, #2
 8000d4a:	617b      	str	r3, [r7, #20]
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d00b      	beq.n	8000d6a <_ZNSt7__equalILb1EE5equalIiEEbPKT_S4_S4_+0x34>
	    return !std::__memcmp(__first1, __first2, __len);
 8000d52:	697a      	ldr	r2, [r7, #20]
 8000d54:	6879      	ldr	r1, [r7, #4]
 8000d56:	68f8      	ldr	r0, [r7, #12]
 8000d58:	f000 f80c 	bl	8000d74 <_ZSt8__memcmpIiiEiPKT_PKT0_j>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	bf0c      	ite	eq
 8000d62:	2301      	moveq	r3, #1
 8000d64:	2300      	movne	r3, #0
 8000d66:	b2db      	uxtb	r3, r3
 8000d68:	e000      	b.n	8000d6c <_ZNSt7__equalILb1EE5equalIiEEbPKT_S4_S4_+0x36>
	  return true;
 8000d6a:	2301      	movs	r3, #1
	}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	3718      	adds	r7, #24
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <_ZSt8__memcmpIiiEiPKT_PKT0_j>:
    __memcmp(const _Tp* __first1, const _Up* __first2, size_t __num)
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b084      	sub	sp, #16
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	60f8      	str	r0, [r7, #12]
 8000d7c:	60b9      	str	r1, [r7, #8]
 8000d7e:	607a      	str	r2, [r7, #4]
	return __builtin_memcmp(__first1, __first2, sizeof(_Tp) * __num);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	009b      	lsls	r3, r3, #2
 8000d84:	461a      	mov	r2, r3
 8000d86:	68b9      	ldr	r1, [r7, #8]
 8000d88:	68f8      	ldr	r0, [r7, #12]
 8000d8a:	f003 f8f7 	bl	8003f7c <memcmp>
 8000d8e:	4603      	mov	r3, r0
    }
 8000d90:	4618      	mov	r0, r3
 8000d92:	3710      	adds	r7, #16
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d9e:	2300      	movs	r3, #0
 8000da0:	607b      	str	r3, [r7, #4]
 8000da2:	4b10      	ldr	r3, [pc, #64]	; (8000de4 <HAL_MspInit+0x4c>)
 8000da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da6:	4a0f      	ldr	r2, [pc, #60]	; (8000de4 <HAL_MspInit+0x4c>)
 8000da8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dac:	6453      	str	r3, [r2, #68]	; 0x44
 8000dae:	4b0d      	ldr	r3, [pc, #52]	; (8000de4 <HAL_MspInit+0x4c>)
 8000db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000db6:	607b      	str	r3, [r7, #4]
 8000db8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dba:	2300      	movs	r3, #0
 8000dbc:	603b      	str	r3, [r7, #0]
 8000dbe:	4b09      	ldr	r3, [pc, #36]	; (8000de4 <HAL_MspInit+0x4c>)
 8000dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc2:	4a08      	ldr	r2, [pc, #32]	; (8000de4 <HAL_MspInit+0x4c>)
 8000dc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dc8:	6413      	str	r3, [r2, #64]	; 0x40
 8000dca:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <HAL_MspInit+0x4c>)
 8000dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dd2:	603b      	str	r3, [r7, #0]
 8000dd4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000dd6:	2007      	movs	r0, #7
 8000dd8:	f001 f8d8 	bl	8001f8c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ddc:	bf00      	nop
 8000dde:	3708      	adds	r7, #8
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	40023800 	.word	0x40023800

08000de8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b08a      	sub	sp, #40	; 0x28
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df0:	f107 0314 	add.w	r3, r7, #20
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	605a      	str	r2, [r3, #4]
 8000dfa:	609a      	str	r2, [r3, #8]
 8000dfc:	60da      	str	r2, [r3, #12]
 8000dfe:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN2)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a2c      	ldr	r2, [pc, #176]	; (8000eb8 <HAL_CAN_MspInit+0xd0>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d151      	bne.n	8000eae <HAL_CAN_MspInit+0xc6>
  {
  /* USER CODE BEGIN CAN2_MspInit 0 */

  /* USER CODE END CAN2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	613b      	str	r3, [r7, #16]
 8000e0e:	4b2b      	ldr	r3, [pc, #172]	; (8000ebc <HAL_CAN_MspInit+0xd4>)
 8000e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e12:	4a2a      	ldr	r2, [pc, #168]	; (8000ebc <HAL_CAN_MspInit+0xd4>)
 8000e14:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000e18:	6413      	str	r3, [r2, #64]	; 0x40
 8000e1a:	4b28      	ldr	r3, [pc, #160]	; (8000ebc <HAL_CAN_MspInit+0xd4>)
 8000e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000e22:	613b      	str	r3, [r7, #16]
 8000e24:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000e26:	2300      	movs	r3, #0
 8000e28:	60fb      	str	r3, [r7, #12]
 8000e2a:	4b24      	ldr	r3, [pc, #144]	; (8000ebc <HAL_CAN_MspInit+0xd4>)
 8000e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2e:	4a23      	ldr	r2, [pc, #140]	; (8000ebc <HAL_CAN_MspInit+0xd4>)
 8000e30:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e34:	6413      	str	r3, [r2, #64]	; 0x40
 8000e36:	4b21      	ldr	r3, [pc, #132]	; (8000ebc <HAL_CAN_MspInit+0xd4>)
 8000e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e3e:	60fb      	str	r3, [r7, #12]
 8000e40:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e42:	2300      	movs	r3, #0
 8000e44:	60bb      	str	r3, [r7, #8]
 8000e46:	4b1d      	ldr	r3, [pc, #116]	; (8000ebc <HAL_CAN_MspInit+0xd4>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4a:	4a1c      	ldr	r2, [pc, #112]	; (8000ebc <HAL_CAN_MspInit+0xd4>)
 8000e4c:	f043 0302 	orr.w	r3, r3, #2
 8000e50:	6313      	str	r3, [r2, #48]	; 0x30
 8000e52:	4b1a      	ldr	r3, [pc, #104]	; (8000ebc <HAL_CAN_MspInit+0xd4>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	f003 0302 	and.w	r3, r3, #2
 8000e5a:	60bb      	str	r3, [r7, #8]
 8000e5c:	68bb      	ldr	r3, [r7, #8]
    /**CAN2 GPIO Configuration
    PB5     ------> CAN2_RX
    PB6     ------> CAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000e5e:	2360      	movs	r3, #96	; 0x60
 8000e60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e62:	2302      	movs	r3, #2
 8000e64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	2300      	movs	r3, #0
 8000e68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e6a:	2303      	movs	r3, #3
 8000e6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000e6e:	2309      	movs	r3, #9
 8000e70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e72:	f107 0314 	add.w	r3, r7, #20
 8000e76:	4619      	mov	r1, r3
 8000e78:	4811      	ldr	r0, [pc, #68]	; (8000ec0 <HAL_CAN_MspInit+0xd8>)
 8000e7a:	f001 f95b 	bl	8002134 <HAL_GPIO_Init>

    /* CAN2 interrupt Init */
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 0, 0);
 8000e7e:	2200      	movs	r2, #0
 8000e80:	2100      	movs	r1, #0
 8000e82:	203f      	movs	r0, #63	; 0x3f
 8000e84:	f001 f88d 	bl	8001fa2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 8000e88:	203f      	movs	r0, #63	; 0x3f
 8000e8a:	f001 f8a6 	bl	8001fda <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 8000e8e:	2200      	movs	r2, #0
 8000e90:	2100      	movs	r1, #0
 8000e92:	2040      	movs	r0, #64	; 0x40
 8000e94:	f001 f885 	bl	8001fa2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8000e98:	2040      	movs	r0, #64	; 0x40
 8000e9a:	f001 f89e 	bl	8001fda <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	2041      	movs	r0, #65	; 0x41
 8000ea4:	f001 f87d 	bl	8001fa2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8000ea8:	2041      	movs	r0, #65	; 0x41
 8000eaa:	f001 f896 	bl	8001fda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8000eae:	bf00      	nop
 8000eb0:	3728      	adds	r7, #40	; 0x28
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	40006800 	.word	0x40006800
 8000ebc:	40023800 	.word	0x40023800
 8000ec0:	40020400 	.word	0x40020400

08000ec4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b08a      	sub	sp, #40	; 0x28
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ecc:	f107 0314 	add.w	r3, r7, #20
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	605a      	str	r2, [r3, #4]
 8000ed6:	609a      	str	r2, [r3, #8]
 8000ed8:	60da      	str	r2, [r3, #12]
 8000eda:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a1d      	ldr	r2, [pc, #116]	; (8000f58 <HAL_UART_MspInit+0x94>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d133      	bne.n	8000f4e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	613b      	str	r3, [r7, #16]
 8000eea:	4b1c      	ldr	r3, [pc, #112]	; (8000f5c <HAL_UART_MspInit+0x98>)
 8000eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eee:	4a1b      	ldr	r2, [pc, #108]	; (8000f5c <HAL_UART_MspInit+0x98>)
 8000ef0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ef4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ef6:	4b19      	ldr	r3, [pc, #100]	; (8000f5c <HAL_UART_MspInit+0x98>)
 8000ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000efe:	613b      	str	r3, [r7, #16]
 8000f00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f02:	2300      	movs	r3, #0
 8000f04:	60fb      	str	r3, [r7, #12]
 8000f06:	4b15      	ldr	r3, [pc, #84]	; (8000f5c <HAL_UART_MspInit+0x98>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	4a14      	ldr	r2, [pc, #80]	; (8000f5c <HAL_UART_MspInit+0x98>)
 8000f0c:	f043 0301 	orr.w	r3, r3, #1
 8000f10:	6313      	str	r3, [r2, #48]	; 0x30
 8000f12:	4b12      	ldr	r3, [pc, #72]	; (8000f5c <HAL_UART_MspInit+0x98>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	f003 0301 	and.w	r3, r3, #1
 8000f1a:	60fb      	str	r3, [r7, #12]
 8000f1c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f1e:	230c      	movs	r3, #12
 8000f20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f22:	2302      	movs	r3, #2
 8000f24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f26:	2300      	movs	r3, #0
 8000f28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f2a:	2303      	movs	r3, #3
 8000f2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f2e:	2307      	movs	r3, #7
 8000f30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f32:	f107 0314 	add.w	r3, r7, #20
 8000f36:	4619      	mov	r1, r3
 8000f38:	4809      	ldr	r0, [pc, #36]	; (8000f60 <HAL_UART_MspInit+0x9c>)
 8000f3a:	f001 f8fb 	bl	8002134 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000f3e:	2200      	movs	r2, #0
 8000f40:	2100      	movs	r1, #0
 8000f42:	2026      	movs	r0, #38	; 0x26
 8000f44:	f001 f82d 	bl	8001fa2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f48:	2026      	movs	r0, #38	; 0x26
 8000f4a:	f001 f846 	bl	8001fda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f4e:	bf00      	nop
 8000f50:	3728      	adds	r7, #40	; 0x28
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	40004400 	.word	0x40004400
 8000f5c:	40023800 	.word	0x40023800
 8000f60:	40020000 	.word	0x40020000

08000f64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f68:	e7fe      	b.n	8000f68 <NMI_Handler+0x4>

08000f6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f6e:	e7fe      	b.n	8000f6e <HardFault_Handler+0x4>

08000f70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f74:	e7fe      	b.n	8000f74 <MemManage_Handler+0x4>

08000f76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f76:	b480      	push	{r7}
 8000f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f7a:	e7fe      	b.n	8000f7a <BusFault_Handler+0x4>

08000f7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f80:	e7fe      	b.n	8000f80 <UsageFault_Handler+0x4>

08000f82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f82:	b480      	push	{r7}
 8000f84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f86:	bf00      	nop
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr

08000f90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f94:	bf00      	nop
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr

08000f9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr

08000fac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fb0:	f000 f950 	bl	8001254 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fb4:	bf00      	nop
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000fbc:	4802      	ldr	r0, [pc, #8]	; (8000fc8 <USART2_IRQHandler+0x10>)
 8000fbe:	f002 f8ed 	bl	800319c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	200000b4 	.word	0x200000b4

08000fcc <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupt.
  */
void CAN2_TX_IRQHandler(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8000fd0:	4802      	ldr	r0, [pc, #8]	; (8000fdc <CAN2_TX_IRQHandler+0x10>)
 8000fd2:	f000 fcdb 	bl	800198c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	2000008c 	.word	0x2000008c

08000fe0 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupt.
  */
void CAN2_RX0_IRQHandler(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8000fe4:	4802      	ldr	r0, [pc, #8]	; (8000ff0 <CAN2_RX0_IRQHandler+0x10>)
 8000fe6:	f000 fcd1 	bl	800198c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8000fea:	bf00      	nop
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	2000008c 	.word	0x2000008c

08000ff4 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8000ff8:	4802      	ldr	r0, [pc, #8]	; (8001004 <CAN2_RX1_IRQHandler+0x10>)
 8000ffa:	f000 fcc7 	bl	800198c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8000ffe:	bf00      	nop
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	2000008c 	.word	0x2000008c

08001008 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b086      	sub	sp, #24
 800100c:	af00      	add	r7, sp, #0
 800100e:	60f8      	str	r0, [r7, #12]
 8001010:	60b9      	str	r1, [r7, #8]
 8001012:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001014:	2300      	movs	r3, #0
 8001016:	617b      	str	r3, [r7, #20]
 8001018:	e00a      	b.n	8001030 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800101a:	f3af 8000 	nop.w
 800101e:	4601      	mov	r1, r0
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	1c5a      	adds	r2, r3, #1
 8001024:	60ba      	str	r2, [r7, #8]
 8001026:	b2ca      	uxtb	r2, r1
 8001028:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	3301      	adds	r3, #1
 800102e:	617b      	str	r3, [r7, #20]
 8001030:	697a      	ldr	r2, [r7, #20]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	429a      	cmp	r2, r3
 8001036:	dbf0      	blt.n	800101a <_read+0x12>
  }

  return len;
 8001038:	687b      	ldr	r3, [r7, #4]
}
 800103a:	4618      	mov	r0, r3
 800103c:	3718      	adds	r7, #24
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}

08001042 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001042:	b580      	push	{r7, lr}
 8001044:	b086      	sub	sp, #24
 8001046:	af00      	add	r7, sp, #0
 8001048:	60f8      	str	r0, [r7, #12]
 800104a:	60b9      	str	r1, [r7, #8]
 800104c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800104e:	2300      	movs	r3, #0
 8001050:	617b      	str	r3, [r7, #20]
 8001052:	e009      	b.n	8001068 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	1c5a      	adds	r2, r3, #1
 8001058:	60ba      	str	r2, [r7, #8]
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	4618      	mov	r0, r3
 800105e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	3301      	adds	r3, #1
 8001066:	617b      	str	r3, [r7, #20]
 8001068:	697a      	ldr	r2, [r7, #20]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	429a      	cmp	r2, r3
 800106e:	dbf1      	blt.n	8001054 <_write+0x12>
  }
  return len;
 8001070:	687b      	ldr	r3, [r7, #4]
}
 8001072:	4618      	mov	r0, r3
 8001074:	3718      	adds	r7, #24
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}

0800107a <_close>:

int _close(int file)
{
 800107a:	b480      	push	{r7}
 800107c:	b083      	sub	sp, #12
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001082:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001086:	4618      	mov	r0, r3
 8001088:	370c      	adds	r7, #12
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr

08001092 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001092:	b480      	push	{r7}
 8001094:	b083      	sub	sp, #12
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
 800109a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010a2:	605a      	str	r2, [r3, #4]
  return 0;
 80010a4:	2300      	movs	r3, #0
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	370c      	adds	r7, #12
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr

080010b2 <_lseek>:
  (void)file;
  return 1;
}

int _lseek(int file, int ptr, int dir)
{
 80010b2:	b480      	push	{r7}
 80010b4:	b085      	sub	sp, #20
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	60f8      	str	r0, [r7, #12]
 80010ba:	60b9      	str	r1, [r7, #8]
 80010bc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80010be:	2300      	movs	r3, #0
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3714      	adds	r7, #20
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr

080010cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b086      	sub	sp, #24
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010d4:	4a14      	ldr	r2, [pc, #80]	; (8001128 <_sbrk+0x5c>)
 80010d6:	4b15      	ldr	r3, [pc, #84]	; (800112c <_sbrk+0x60>)
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010e0:	4b13      	ldr	r3, [pc, #76]	; (8001130 <_sbrk+0x64>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d102      	bne.n	80010ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010e8:	4b11      	ldr	r3, [pc, #68]	; (8001130 <_sbrk+0x64>)
 80010ea:	4a12      	ldr	r2, [pc, #72]	; (8001134 <_sbrk+0x68>)
 80010ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010ee:	4b10      	ldr	r3, [pc, #64]	; (8001130 <_sbrk+0x64>)
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4413      	add	r3, r2
 80010f6:	693a      	ldr	r2, [r7, #16]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d207      	bcs.n	800110c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010fc:	f002 ff14 	bl	8003f28 <__errno>
 8001100:	4603      	mov	r3, r0
 8001102:	220c      	movs	r2, #12
 8001104:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001106:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800110a:	e009      	b.n	8001120 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800110c:	4b08      	ldr	r3, [pc, #32]	; (8001130 <_sbrk+0x64>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001112:	4b07      	ldr	r3, [pc, #28]	; (8001130 <_sbrk+0x64>)
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4413      	add	r3, r2
 800111a:	4a05      	ldr	r2, [pc, #20]	; (8001130 <_sbrk+0x64>)
 800111c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800111e:	68fb      	ldr	r3, [r7, #12]
}
 8001120:	4618      	mov	r0, r3
 8001122:	3718      	adds	r7, #24
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	20020000 	.word	0x20020000
 800112c:	00000400 	.word	0x00000400
 8001130:	20000108 	.word	0x20000108
 8001134:	20000120 	.word	0x20000120

08001138 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800113c:	4b06      	ldr	r3, [pc, #24]	; (8001158 <SystemInit+0x20>)
 800113e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001142:	4a05      	ldr	r2, [pc, #20]	; (8001158 <SystemInit+0x20>)
 8001144:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001148:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800114c:	bf00      	nop
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	e000ed00 	.word	0xe000ed00

0800115c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800115c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001194 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001160:	480d      	ldr	r0, [pc, #52]	; (8001198 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001162:	490e      	ldr	r1, [pc, #56]	; (800119c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001164:	4a0e      	ldr	r2, [pc, #56]	; (80011a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001166:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001168:	e002      	b.n	8001170 <LoopCopyDataInit>

0800116a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800116a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800116c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800116e:	3304      	adds	r3, #4

08001170 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001170:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001172:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001174:	d3f9      	bcc.n	800116a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001176:	4a0b      	ldr	r2, [pc, #44]	; (80011a4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001178:	4c0b      	ldr	r4, [pc, #44]	; (80011a8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800117a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800117c:	e001      	b.n	8001182 <LoopFillZerobss>

0800117e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800117e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001180:	3204      	adds	r2, #4

08001182 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001182:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001184:	d3fb      	bcc.n	800117e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001186:	f7ff ffd7 	bl	8001138 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800118a:	f002 fed3 	bl	8003f34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800118e:	f7ff f9bb 	bl	8000508 <main>
  bx  lr    
 8001192:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001194:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001198:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800119c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80011a0:	080048ec 	.word	0x080048ec
  ldr r2, =_sbss
 80011a4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80011a8:	20000120 	.word	0x20000120

080011ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011ac:	e7fe      	b.n	80011ac <ADC_IRQHandler>
	...

080011b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011b4:	4b0e      	ldr	r3, [pc, #56]	; (80011f0 <HAL_Init+0x40>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a0d      	ldr	r2, [pc, #52]	; (80011f0 <HAL_Init+0x40>)
 80011ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011c0:	4b0b      	ldr	r3, [pc, #44]	; (80011f0 <HAL_Init+0x40>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a0a      	ldr	r2, [pc, #40]	; (80011f0 <HAL_Init+0x40>)
 80011c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011cc:	4b08      	ldr	r3, [pc, #32]	; (80011f0 <HAL_Init+0x40>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a07      	ldr	r2, [pc, #28]	; (80011f0 <HAL_Init+0x40>)
 80011d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011d8:	2003      	movs	r0, #3
 80011da:	f000 fed7 	bl	8001f8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011de:	2000      	movs	r0, #0
 80011e0:	f000 f808 	bl	80011f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011e4:	f7ff fdd8 	bl	8000d98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011e8:	2300      	movs	r3, #0
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40023c00 	.word	0x40023c00

080011f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011fc:	4b12      	ldr	r3, [pc, #72]	; (8001248 <HAL_InitTick+0x54>)
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	4b12      	ldr	r3, [pc, #72]	; (800124c <HAL_InitTick+0x58>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	4619      	mov	r1, r3
 8001206:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800120a:	fbb3 f3f1 	udiv	r3, r3, r1
 800120e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001212:	4618      	mov	r0, r3
 8001214:	f000 feef 	bl	8001ff6 <HAL_SYSTICK_Config>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	e00e      	b.n	8001240 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2b0f      	cmp	r3, #15
 8001226:	d80a      	bhi.n	800123e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001228:	2200      	movs	r2, #0
 800122a:	6879      	ldr	r1, [r7, #4]
 800122c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001230:	f000 feb7 	bl	8001fa2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001234:	4a06      	ldr	r2, [pc, #24]	; (8001250 <HAL_InitTick+0x5c>)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800123a:	2300      	movs	r3, #0
 800123c:	e000      	b.n	8001240 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
}
 8001240:	4618      	mov	r0, r3
 8001242:	3708      	adds	r7, #8
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	20000000 	.word	0x20000000
 800124c:	20000008 	.word	0x20000008
 8001250:	20000004 	.word	0x20000004

08001254 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001258:	4b06      	ldr	r3, [pc, #24]	; (8001274 <HAL_IncTick+0x20>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	461a      	mov	r2, r3
 800125e:	4b06      	ldr	r3, [pc, #24]	; (8001278 <HAL_IncTick+0x24>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4413      	add	r3, r2
 8001264:	4a04      	ldr	r2, [pc, #16]	; (8001278 <HAL_IncTick+0x24>)
 8001266:	6013      	str	r3, [r2, #0]
}
 8001268:	bf00      	nop
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	20000008 	.word	0x20000008
 8001278:	2000010c 	.word	0x2000010c

0800127c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  return uwTick;
 8001280:	4b03      	ldr	r3, [pc, #12]	; (8001290 <HAL_GetTick+0x14>)
 8001282:	681b      	ldr	r3, [r3, #0]
}
 8001284:	4618      	mov	r0, r3
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	2000010c 	.word	0x2000010c

08001294 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800129c:	f7ff ffee 	bl	800127c <HAL_GetTick>
 80012a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80012ac:	d005      	beq.n	80012ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012ae:	4b0a      	ldr	r3, [pc, #40]	; (80012d8 <HAL_Delay+0x44>)
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	461a      	mov	r2, r3
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	4413      	add	r3, r2
 80012b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012ba:	bf00      	nop
 80012bc:	f7ff ffde 	bl	800127c <HAL_GetTick>
 80012c0:	4602      	mov	r2, r0
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	68fa      	ldr	r2, [r7, #12]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d8f7      	bhi.n	80012bc <HAL_Delay+0x28>
  {
  }
}
 80012cc:	bf00      	nop
 80012ce:	bf00      	nop
 80012d0:	3710      	adds	r7, #16
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	20000008 	.word	0x20000008

080012dc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d101      	bne.n	80012ee <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e0ed      	b.n	80014ca <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d102      	bne.n	8001300 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f7ff fd74 	bl	8000de8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f042 0201 	orr.w	r2, r2, #1
 800130e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001310:	f7ff ffb4 	bl	800127c <HAL_GetTick>
 8001314:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001316:	e012      	b.n	800133e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001318:	f7ff ffb0 	bl	800127c <HAL_GetTick>
 800131c:	4602      	mov	r2, r0
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	2b0a      	cmp	r3, #10
 8001324:	d90b      	bls.n	800133e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800132a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2205      	movs	r2, #5
 8001336:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e0c5      	b.n	80014ca <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f003 0301 	and.w	r3, r3, #1
 8001348:	2b00      	cmp	r3, #0
 800134a:	d0e5      	beq.n	8001318 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f022 0202 	bic.w	r2, r2, #2
 800135a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800135c:	f7ff ff8e 	bl	800127c <HAL_GetTick>
 8001360:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001362:	e012      	b.n	800138a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001364:	f7ff ff8a 	bl	800127c <HAL_GetTick>
 8001368:	4602      	mov	r2, r0
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	2b0a      	cmp	r3, #10
 8001370:	d90b      	bls.n	800138a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001376:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2205      	movs	r2, #5
 8001382:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e09f      	b.n	80014ca <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f003 0302 	and.w	r3, r3, #2
 8001394:	2b00      	cmp	r3, #0
 8001396:	d1e5      	bne.n	8001364 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	7e1b      	ldrb	r3, [r3, #24]
 800139c:	2b01      	cmp	r3, #1
 800139e:	d108      	bne.n	80013b2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	e007      	b.n	80013c2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80013c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	7e5b      	ldrb	r3, [r3, #25]
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d108      	bne.n	80013dc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80013d8:	601a      	str	r2, [r3, #0]
 80013da:	e007      	b.n	80013ec <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80013ea:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	7e9b      	ldrb	r3, [r3, #26]
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d108      	bne.n	8001406 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f042 0220 	orr.w	r2, r2, #32
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	e007      	b.n	8001416 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f022 0220 	bic.w	r2, r2, #32
 8001414:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	7edb      	ldrb	r3, [r3, #27]
 800141a:	2b01      	cmp	r3, #1
 800141c:	d108      	bne.n	8001430 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f022 0210 	bic.w	r2, r2, #16
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	e007      	b.n	8001440 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f042 0210 	orr.w	r2, r2, #16
 800143e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	7f1b      	ldrb	r3, [r3, #28]
 8001444:	2b01      	cmp	r3, #1
 8001446:	d108      	bne.n	800145a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f042 0208 	orr.w	r2, r2, #8
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	e007      	b.n	800146a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f022 0208 	bic.w	r2, r2, #8
 8001468:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	7f5b      	ldrb	r3, [r3, #29]
 800146e:	2b01      	cmp	r3, #1
 8001470:	d108      	bne.n	8001484 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f042 0204 	orr.w	r2, r2, #4
 8001480:	601a      	str	r2, [r3, #0]
 8001482:	e007      	b.n	8001494 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f022 0204 	bic.w	r2, r2, #4
 8001492:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	689a      	ldr	r2, [r3, #8]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	431a      	orrs	r2, r3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	691b      	ldr	r3, [r3, #16]
 80014a2:	431a      	orrs	r2, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	695b      	ldr	r3, [r3, #20]
 80014a8:	ea42 0103 	orr.w	r1, r2, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	1e5a      	subs	r2, r3, #1
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	430a      	orrs	r2, r1
 80014b8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2200      	movs	r2, #0
 80014be:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2201      	movs	r2, #1
 80014c4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80014c8:	2300      	movs	r3, #0
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3710      	adds	r7, #16
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
	...

080014d4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b087      	sub	sp, #28
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014ea:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80014ec:	7cfb      	ldrb	r3, [r7, #19]
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d003      	beq.n	80014fa <HAL_CAN_ConfigFilter+0x26>
 80014f2:	7cfb      	ldrb	r3, [r7, #19]
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	f040 80be 	bne.w	8001676 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80014fa:	4b65      	ldr	r3, [pc, #404]	; (8001690 <HAL_CAN_ConfigFilter+0x1bc>)
 80014fc:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001504:	f043 0201 	orr.w	r2, r3, #1
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001514:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001528:	021b      	lsls	r3, r3, #8
 800152a:	431a      	orrs	r2, r3
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	695b      	ldr	r3, [r3, #20]
 8001536:	f003 031f 	and.w	r3, r3, #31
 800153a:	2201      	movs	r2, #1
 800153c:	fa02 f303 	lsl.w	r3, r2, r3
 8001540:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	43db      	mvns	r3, r3
 800154c:	401a      	ands	r2, r3
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	69db      	ldr	r3, [r3, #28]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d123      	bne.n	80015a4 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	43db      	mvns	r3, r3
 8001566:	401a      	ands	r2, r3
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	68db      	ldr	r3, [r3, #12]
 8001572:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800157a:	683a      	ldr	r2, [r7, #0]
 800157c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800157e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	3248      	adds	r2, #72	; 0x48
 8001584:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001598:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800159a:	6979      	ldr	r1, [r7, #20]
 800159c:	3348      	adds	r3, #72	; 0x48
 800159e:	00db      	lsls	r3, r3, #3
 80015a0:	440b      	add	r3, r1
 80015a2:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	69db      	ldr	r3, [r3, #28]
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d122      	bne.n	80015f2 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	431a      	orrs	r2, r3
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80015c8:	683a      	ldr	r2, [r7, #0]
 80015ca:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80015cc:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	3248      	adds	r2, #72	; 0x48
 80015d2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80015e6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80015e8:	6979      	ldr	r1, [r7, #20]
 80015ea:	3348      	adds	r3, #72	; 0x48
 80015ec:	00db      	lsls	r3, r3, #3
 80015ee:	440b      	add	r3, r1
 80015f0:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	699b      	ldr	r3, [r3, #24]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d109      	bne.n	800160e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	43db      	mvns	r3, r3
 8001604:	401a      	ands	r2, r3
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800160c:	e007      	b.n	800161e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	431a      	orrs	r2, r3
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	691b      	ldr	r3, [r3, #16]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d109      	bne.n	800163a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	43db      	mvns	r3, r3
 8001630:	401a      	ands	r2, r3
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001638:	e007      	b.n	800164a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	431a      	orrs	r2, r3
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	6a1b      	ldr	r3, [r3, #32]
 800164e:	2b01      	cmp	r3, #1
 8001650:	d107      	bne.n	8001662 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	431a      	orrs	r2, r3
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001668:	f023 0201 	bic.w	r2, r3, #1
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001672:	2300      	movs	r3, #0
 8001674:	e006      	b.n	8001684 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800167a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
  }
}
 8001684:	4618      	mov	r0, r3
 8001686:	371c      	adds	r7, #28
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr
 8001690:	40006400 	.word	0x40006400

08001694 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016a2:	b2db      	uxtb	r3, r3
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d12e      	bne.n	8001706 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2202      	movs	r2, #2
 80016ac:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f022 0201 	bic.w	r2, r2, #1
 80016be:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80016c0:	f7ff fddc 	bl	800127c <HAL_GetTick>
 80016c4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80016c6:	e012      	b.n	80016ee <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80016c8:	f7ff fdd8 	bl	800127c <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	2b0a      	cmp	r3, #10
 80016d4:	d90b      	bls.n	80016ee <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016da:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2205      	movs	r2, #5
 80016e6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e012      	b.n	8001714 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f003 0301 	and.w	r3, r3, #1
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d1e5      	bne.n	80016c8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2200      	movs	r2, #0
 8001700:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001702:	2300      	movs	r3, #0
 8001704:	e006      	b.n	8001714 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800170a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
  }
}
 8001714:	4618      	mov	r0, r3
 8001716:	3710      	adds	r7, #16
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}

0800171c <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800171c:	b480      	push	{r7}
 800171e:	b087      	sub	sp, #28
 8001720:	af00      	add	r7, sp, #0
 8001722:	60f8      	str	r0, [r7, #12]
 8001724:	60b9      	str	r1, [r7, #8]
 8001726:	607a      	str	r2, [r7, #4]
 8001728:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001730:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001732:	7dfb      	ldrb	r3, [r7, #23]
 8001734:	2b01      	cmp	r3, #1
 8001736:	d003      	beq.n	8001740 <HAL_CAN_GetRxMessage+0x24>
 8001738:	7dfb      	ldrb	r3, [r7, #23]
 800173a:	2b02      	cmp	r3, #2
 800173c:	f040 80f3 	bne.w	8001926 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d10e      	bne.n	8001764 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	f003 0303 	and.w	r3, r3, #3
 8001750:	2b00      	cmp	r3, #0
 8001752:	d116      	bne.n	8001782 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001758:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e0e7      	b.n	8001934 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	691b      	ldr	r3, [r3, #16]
 800176a:	f003 0303 	and.w	r3, r3, #3
 800176e:	2b00      	cmp	r3, #0
 8001770:	d107      	bne.n	8001782 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001776:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e0d8      	b.n	8001934 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	331b      	adds	r3, #27
 800178a:	011b      	lsls	r3, r3, #4
 800178c:	4413      	add	r3, r2
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0204 	and.w	r2, r3, #4
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d10c      	bne.n	80017ba <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	331b      	adds	r3, #27
 80017a8:	011b      	lsls	r3, r3, #4
 80017aa:	4413      	add	r3, r2
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	0d5b      	lsrs	r3, r3, #21
 80017b0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	601a      	str	r2, [r3, #0]
 80017b8:	e00b      	b.n	80017d2 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	331b      	adds	r3, #27
 80017c2:	011b      	lsls	r3, r3, #4
 80017c4:	4413      	add	r3, r2
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	08db      	lsrs	r3, r3, #3
 80017ca:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	331b      	adds	r3, #27
 80017da:	011b      	lsls	r3, r3, #4
 80017dc:	4413      	add	r3, r2
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 0202 	and.w	r2, r3, #2
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	331b      	adds	r3, #27
 80017f0:	011b      	lsls	r3, r3, #4
 80017f2:	4413      	add	r3, r2
 80017f4:	3304      	adds	r3, #4
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 020f 	and.w	r2, r3, #15
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	331b      	adds	r3, #27
 8001808:	011b      	lsls	r3, r3, #4
 800180a:	4413      	add	r3, r2
 800180c:	3304      	adds	r3, #4
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	0a1b      	lsrs	r3, r3, #8
 8001812:	b2da      	uxtb	r2, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	331b      	adds	r3, #27
 8001820:	011b      	lsls	r3, r3, #4
 8001822:	4413      	add	r3, r2
 8001824:	3304      	adds	r3, #4
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	0c1b      	lsrs	r3, r3, #16
 800182a:	b29a      	uxth	r2, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	011b      	lsls	r3, r3, #4
 8001838:	4413      	add	r3, r2
 800183a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	b2da      	uxtb	r2, r3
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	011b      	lsls	r3, r3, #4
 800184e:	4413      	add	r3, r2
 8001850:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	0a1a      	lsrs	r2, r3, #8
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	3301      	adds	r3, #1
 800185c:	b2d2      	uxtb	r2, r2
 800185e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	011b      	lsls	r3, r3, #4
 8001868:	4413      	add	r3, r2
 800186a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	0c1a      	lsrs	r2, r3, #16
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	3302      	adds	r3, #2
 8001876:	b2d2      	uxtb	r2, r2
 8001878:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	011b      	lsls	r3, r3, #4
 8001882:	4413      	add	r3, r2
 8001884:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	0e1a      	lsrs	r2, r3, #24
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	3303      	adds	r3, #3
 8001890:	b2d2      	uxtb	r2, r2
 8001892:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	011b      	lsls	r3, r3, #4
 800189c:	4413      	add	r3, r2
 800189e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	3304      	adds	r3, #4
 80018a8:	b2d2      	uxtb	r2, r2
 80018aa:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	011b      	lsls	r3, r3, #4
 80018b4:	4413      	add	r3, r2
 80018b6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	0a1a      	lsrs	r2, r3, #8
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	3305      	adds	r3, #5
 80018c2:	b2d2      	uxtb	r2, r2
 80018c4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	011b      	lsls	r3, r3, #4
 80018ce:	4413      	add	r3, r2
 80018d0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	0c1a      	lsrs	r2, r3, #16
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	3306      	adds	r3, #6
 80018dc:	b2d2      	uxtb	r2, r2
 80018de:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	011b      	lsls	r3, r3, #4
 80018e8:	4413      	add	r3, r2
 80018ea:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	0e1a      	lsrs	r2, r3, #24
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	3307      	adds	r3, #7
 80018f6:	b2d2      	uxtb	r2, r2
 80018f8:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d108      	bne.n	8001912 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	68da      	ldr	r2, [r3, #12]
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f042 0220 	orr.w	r2, r2, #32
 800190e:	60da      	str	r2, [r3, #12]
 8001910:	e007      	b.n	8001922 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	691a      	ldr	r2, [r3, #16]
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f042 0220 	orr.w	r2, r2, #32
 8001920:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001922:	2300      	movs	r3, #0
 8001924:	e006      	b.n	8001934 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800192a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
  }
}
 8001934:	4618      	mov	r0, r3
 8001936:	371c      	adds	r7, #28
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr

08001940 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001940:	b480      	push	{r7}
 8001942:	b085      	sub	sp, #20
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001950:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001952:	7bfb      	ldrb	r3, [r7, #15]
 8001954:	2b01      	cmp	r3, #1
 8001956:	d002      	beq.n	800195e <HAL_CAN_ActivateNotification+0x1e>
 8001958:	7bfb      	ldrb	r3, [r7, #15]
 800195a:	2b02      	cmp	r3, #2
 800195c:	d109      	bne.n	8001972 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	6959      	ldr	r1, [r3, #20]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	683a      	ldr	r2, [r7, #0]
 800196a:	430a      	orrs	r2, r1
 800196c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800196e:	2300      	movs	r3, #0
 8001970:	e006      	b.n	8001980 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001976:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
  }
}
 8001980:	4618      	mov	r0, r3
 8001982:	3714      	adds	r7, #20
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr

0800198c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b08a      	sub	sp, #40	; 0x28
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001994:	2300      	movs	r3, #0
 8001996:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	695b      	ldr	r3, [r3, #20]
 800199e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	68db      	ldr	r3, [r3, #12]
 80019b6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	691b      	ldr	r3, [r3, #16]
 80019be:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	699b      	ldr	r3, [r3, #24]
 80019c6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80019c8:	6a3b      	ldr	r3, [r7, #32]
 80019ca:	f003 0301 	and.w	r3, r3, #1
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d07c      	beq.n	8001acc <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80019d2:	69bb      	ldr	r3, [r7, #24]
 80019d4:	f003 0301 	and.w	r3, r3, #1
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d023      	beq.n	8001a24 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2201      	movs	r2, #1
 80019e2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	f003 0302 	and.w	r3, r3, #2
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d003      	beq.n	80019f6 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f000 f983 	bl	8001cfa <HAL_CAN_TxMailbox0CompleteCallback>
 80019f4:	e016      	b.n	8001a24 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80019f6:	69bb      	ldr	r3, [r7, #24]
 80019f8:	f003 0304 	and.w	r3, r3, #4
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d004      	beq.n	8001a0a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a02:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a06:	627b      	str	r3, [r7, #36]	; 0x24
 8001a08:	e00c      	b.n	8001a24 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001a0a:	69bb      	ldr	r3, [r7, #24]
 8001a0c:	f003 0308 	and.w	r3, r3, #8
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d004      	beq.n	8001a1e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a16:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a1a:	627b      	str	r3, [r7, #36]	; 0x24
 8001a1c:	e002      	b.n	8001a24 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f000 f989 	bl	8001d36 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d024      	beq.n	8001a78 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a36:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001a38:	69bb      	ldr	r3, [r7, #24]
 8001a3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d003      	beq.n	8001a4a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f000 f963 	bl	8001d0e <HAL_CAN_TxMailbox1CompleteCallback>
 8001a48:	e016      	b.n	8001a78 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d004      	beq.n	8001a5e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a56:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a5a:	627b      	str	r3, [r7, #36]	; 0x24
 8001a5c:	e00c      	b.n	8001a78 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d004      	beq.n	8001a72 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a6e:	627b      	str	r3, [r7, #36]	; 0x24
 8001a70:	e002      	b.n	8001a78 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f000 f969 	bl	8001d4a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d024      	beq.n	8001acc <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a8a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001a8c:	69bb      	ldr	r3, [r7, #24]
 8001a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d003      	beq.n	8001a9e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f000 f943 	bl	8001d22 <HAL_CAN_TxMailbox2CompleteCallback>
 8001a9c:	e016      	b.n	8001acc <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d004      	beq.n	8001ab2 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001aae:	627b      	str	r3, [r7, #36]	; 0x24
 8001ab0:	e00c      	b.n	8001acc <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d004      	beq.n	8001ac6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001abe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ac2:	627b      	str	r3, [r7, #36]	; 0x24
 8001ac4:	e002      	b.n	8001acc <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f000 f949 	bl	8001d5e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001acc:	6a3b      	ldr	r3, [r7, #32]
 8001ace:	f003 0308 	and.w	r3, r3, #8
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d00c      	beq.n	8001af0 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	f003 0310 	and.w	r3, r3, #16
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d007      	beq.n	8001af0 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ae6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	2210      	movs	r2, #16
 8001aee:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001af0:	6a3b      	ldr	r3, [r7, #32]
 8001af2:	f003 0304 	and.w	r3, r3, #4
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d00b      	beq.n	8001b12 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	f003 0308 	and.w	r3, r3, #8
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d006      	beq.n	8001b12 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2208      	movs	r2, #8
 8001b0a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f000 f930 	bl	8001d72 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001b12:	6a3b      	ldr	r3, [r7, #32]
 8001b14:	f003 0302 	and.w	r3, r3, #2
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d009      	beq.n	8001b30 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	68db      	ldr	r3, [r3, #12]
 8001b22:	f003 0303 	and.w	r3, r3, #3
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d002      	beq.n	8001b30 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f7fe feba 	bl	80008a4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001b30:	6a3b      	ldr	r3, [r7, #32]
 8001b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d00c      	beq.n	8001b54 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	f003 0310 	and.w	r3, r3, #16
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d007      	beq.n	8001b54 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b4a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	2210      	movs	r2, #16
 8001b52:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001b54:	6a3b      	ldr	r3, [r7, #32]
 8001b56:	f003 0320 	and.w	r3, r3, #32
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d00b      	beq.n	8001b76 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	f003 0308 	and.w	r3, r3, #8
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d006      	beq.n	8001b76 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	2208      	movs	r2, #8
 8001b6e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f000 f912 	bl	8001d9a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001b76:	6a3b      	ldr	r3, [r7, #32]
 8001b78:	f003 0310 	and.w	r3, r3, #16
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d009      	beq.n	8001b94 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	691b      	ldr	r3, [r3, #16]
 8001b86:	f003 0303 	and.w	r3, r3, #3
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d002      	beq.n	8001b94 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f000 f8f9 	bl	8001d86 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001b94:	6a3b      	ldr	r3, [r7, #32]
 8001b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d00b      	beq.n	8001bb6 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	f003 0310 	and.w	r3, r3, #16
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d006      	beq.n	8001bb6 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2210      	movs	r2, #16
 8001bae:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f000 f8fc 	bl	8001dae <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001bb6:	6a3b      	ldr	r3, [r7, #32]
 8001bb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d00b      	beq.n	8001bd8 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	f003 0308 	and.w	r3, r3, #8
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d006      	beq.n	8001bd8 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	2208      	movs	r2, #8
 8001bd0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f000 f8f5 	bl	8001dc2 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001bd8:	6a3b      	ldr	r3, [r7, #32]
 8001bda:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d07b      	beq.n	8001cda <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	f003 0304 	and.w	r3, r3, #4
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d072      	beq.n	8001cd2 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001bec:	6a3b      	ldr	r3, [r7, #32]
 8001bee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d008      	beq.n	8001c08 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d003      	beq.n	8001c08 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c02:	f043 0301 	orr.w	r3, r3, #1
 8001c06:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001c08:	6a3b      	ldr	r3, [r7, #32]
 8001c0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d008      	beq.n	8001c24 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d003      	beq.n	8001c24 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1e:	f043 0302 	orr.w	r3, r3, #2
 8001c22:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001c24:	6a3b      	ldr	r3, [r7, #32]
 8001c26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d008      	beq.n	8001c40 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d003      	beq.n	8001c40 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3a:	f043 0304 	orr.w	r3, r3, #4
 8001c3e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001c40:	6a3b      	ldr	r3, [r7, #32]
 8001c42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d043      	beq.n	8001cd2 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d03e      	beq.n	8001cd2 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c5a:	2b60      	cmp	r3, #96	; 0x60
 8001c5c:	d02b      	beq.n	8001cb6 <HAL_CAN_IRQHandler+0x32a>
 8001c5e:	2b60      	cmp	r3, #96	; 0x60
 8001c60:	d82e      	bhi.n	8001cc0 <HAL_CAN_IRQHandler+0x334>
 8001c62:	2b50      	cmp	r3, #80	; 0x50
 8001c64:	d022      	beq.n	8001cac <HAL_CAN_IRQHandler+0x320>
 8001c66:	2b50      	cmp	r3, #80	; 0x50
 8001c68:	d82a      	bhi.n	8001cc0 <HAL_CAN_IRQHandler+0x334>
 8001c6a:	2b40      	cmp	r3, #64	; 0x40
 8001c6c:	d019      	beq.n	8001ca2 <HAL_CAN_IRQHandler+0x316>
 8001c6e:	2b40      	cmp	r3, #64	; 0x40
 8001c70:	d826      	bhi.n	8001cc0 <HAL_CAN_IRQHandler+0x334>
 8001c72:	2b30      	cmp	r3, #48	; 0x30
 8001c74:	d010      	beq.n	8001c98 <HAL_CAN_IRQHandler+0x30c>
 8001c76:	2b30      	cmp	r3, #48	; 0x30
 8001c78:	d822      	bhi.n	8001cc0 <HAL_CAN_IRQHandler+0x334>
 8001c7a:	2b10      	cmp	r3, #16
 8001c7c:	d002      	beq.n	8001c84 <HAL_CAN_IRQHandler+0x2f8>
 8001c7e:	2b20      	cmp	r3, #32
 8001c80:	d005      	beq.n	8001c8e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001c82:	e01d      	b.n	8001cc0 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c86:	f043 0308 	orr.w	r3, r3, #8
 8001c8a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c8c:	e019      	b.n	8001cc2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c90:	f043 0310 	orr.w	r3, r3, #16
 8001c94:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c96:	e014      	b.n	8001cc2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9a:	f043 0320 	orr.w	r3, r3, #32
 8001c9e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001ca0:	e00f      	b.n	8001cc2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ca8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001caa:	e00a      	b.n	8001cc2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cb2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001cb4:	e005      	b.n	8001cc2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cbc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001cbe:	e000      	b.n	8001cc2 <HAL_CAN_IRQHandler+0x336>
            break;
 8001cc0:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	699a      	ldr	r2, [r3, #24]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001cd0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	2204      	movs	r2, #4
 8001cd8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d008      	beq.n	8001cf2 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce6:	431a      	orrs	r2, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f000 f872 	bl	8001dd6 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001cf2:	bf00      	nop
 8001cf4:	3728      	adds	r7, #40	; 0x28
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	b083      	sub	sp, #12
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001d02:	bf00      	nop
 8001d04:	370c      	adds	r7, #12
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr

08001d0e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001d0e:	b480      	push	{r7}
 8001d10:	b083      	sub	sp, #12
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001d16:	bf00      	nop
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr

08001d22 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001d22:	b480      	push	{r7}
 8001d24:	b083      	sub	sp, #12
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001d2a:	bf00      	nop
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr

08001d36 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d36:	b480      	push	{r7}
 8001d38:	b083      	sub	sp, #12
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001d3e:	bf00      	nop
 8001d40:	370c      	adds	r7, #12
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr

08001d4a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	b083      	sub	sp, #12
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001d52:	bf00      	nop
 8001d54:	370c      	adds	r7, #12
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr

08001d5e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d5e:	b480      	push	{r7}
 8001d60:	b083      	sub	sp, #12
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001d66:	bf00      	nop
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr

08001d72 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001d72:	b480      	push	{r7}
 8001d74:	b083      	sub	sp, #12
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001d7a:	bf00      	nop
 8001d7c:	370c      	adds	r7, #12
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr

08001d86 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001d86:	b480      	push	{r7}
 8001d88:	b083      	sub	sp, #12
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001d8e:	bf00      	nop
 8001d90:	370c      	adds	r7, #12
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr

08001d9a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	b083      	sub	sp, #12
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001da2:	bf00      	nop
 8001da4:	370c      	adds	r7, #12
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr

08001dae <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001dae:	b480      	push	{r7}
 8001db0:	b083      	sub	sp, #12
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001db6:	bf00      	nop
 8001db8:	370c      	adds	r7, #12
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr

08001dc2 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	b083      	sub	sp, #12
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001dca:	bf00      	nop
 8001dcc:	370c      	adds	r7, #12
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr

08001dd6 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	b083      	sub	sp, #12
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001dde:	bf00      	nop
 8001de0:	370c      	adds	r7, #12
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
	...

08001dec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b085      	sub	sp, #20
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f003 0307 	and.w	r3, r3, #7
 8001dfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dfc:	4b0c      	ldr	r3, [pc, #48]	; (8001e30 <__NVIC_SetPriorityGrouping+0x44>)
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e02:	68ba      	ldr	r2, [r7, #8]
 8001e04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e08:	4013      	ands	r3, r2
 8001e0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e1e:	4a04      	ldr	r2, [pc, #16]	; (8001e30 <__NVIC_SetPriorityGrouping+0x44>)
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	60d3      	str	r3, [r2, #12]
}
 8001e24:	bf00      	nop
 8001e26:	3714      	adds	r7, #20
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr
 8001e30:	e000ed00 	.word	0xe000ed00

08001e34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e38:	4b04      	ldr	r3, [pc, #16]	; (8001e4c <__NVIC_GetPriorityGrouping+0x18>)
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	0a1b      	lsrs	r3, r3, #8
 8001e3e:	f003 0307 	and.w	r3, r3, #7
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr
 8001e4c:	e000ed00 	.word	0xe000ed00

08001e50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	4603      	mov	r3, r0
 8001e58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	db0b      	blt.n	8001e7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e62:	79fb      	ldrb	r3, [r7, #7]
 8001e64:	f003 021f 	and.w	r2, r3, #31
 8001e68:	4907      	ldr	r1, [pc, #28]	; (8001e88 <__NVIC_EnableIRQ+0x38>)
 8001e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e6e:	095b      	lsrs	r3, r3, #5
 8001e70:	2001      	movs	r0, #1
 8001e72:	fa00 f202 	lsl.w	r2, r0, r2
 8001e76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e7a:	bf00      	nop
 8001e7c:	370c      	adds	r7, #12
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	e000e100 	.word	0xe000e100

08001e8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	4603      	mov	r3, r0
 8001e94:	6039      	str	r1, [r7, #0]
 8001e96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	db0a      	blt.n	8001eb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	b2da      	uxtb	r2, r3
 8001ea4:	490c      	ldr	r1, [pc, #48]	; (8001ed8 <__NVIC_SetPriority+0x4c>)
 8001ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eaa:	0112      	lsls	r2, r2, #4
 8001eac:	b2d2      	uxtb	r2, r2
 8001eae:	440b      	add	r3, r1
 8001eb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001eb4:	e00a      	b.n	8001ecc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	b2da      	uxtb	r2, r3
 8001eba:	4908      	ldr	r1, [pc, #32]	; (8001edc <__NVIC_SetPriority+0x50>)
 8001ebc:	79fb      	ldrb	r3, [r7, #7]
 8001ebe:	f003 030f 	and.w	r3, r3, #15
 8001ec2:	3b04      	subs	r3, #4
 8001ec4:	0112      	lsls	r2, r2, #4
 8001ec6:	b2d2      	uxtb	r2, r2
 8001ec8:	440b      	add	r3, r1
 8001eca:	761a      	strb	r2, [r3, #24]
}
 8001ecc:	bf00      	nop
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr
 8001ed8:	e000e100 	.word	0xe000e100
 8001edc:	e000ed00 	.word	0xe000ed00

08001ee0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b089      	sub	sp, #36	; 0x24
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	60f8      	str	r0, [r7, #12]
 8001ee8:	60b9      	str	r1, [r7, #8]
 8001eea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	f003 0307 	and.w	r3, r3, #7
 8001ef2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	f1c3 0307 	rsb	r3, r3, #7
 8001efa:	2b04      	cmp	r3, #4
 8001efc:	bf28      	it	cs
 8001efe:	2304      	movcs	r3, #4
 8001f00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	3304      	adds	r3, #4
 8001f06:	2b06      	cmp	r3, #6
 8001f08:	d902      	bls.n	8001f10 <NVIC_EncodePriority+0x30>
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	3b03      	subs	r3, #3
 8001f0e:	e000      	b.n	8001f12 <NVIC_EncodePriority+0x32>
 8001f10:	2300      	movs	r3, #0
 8001f12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f18:	69bb      	ldr	r3, [r7, #24]
 8001f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1e:	43da      	mvns	r2, r3
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	401a      	ands	r2, r3
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f28:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f32:	43d9      	mvns	r1, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f38:	4313      	orrs	r3, r2
         );
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3724      	adds	r7, #36	; 0x24
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
	...

08001f48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	3b01      	subs	r3, #1
 8001f54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f58:	d301      	bcc.n	8001f5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e00f      	b.n	8001f7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f5e:	4a0a      	ldr	r2, [pc, #40]	; (8001f88 <SysTick_Config+0x40>)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	3b01      	subs	r3, #1
 8001f64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f66:	210f      	movs	r1, #15
 8001f68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f6c:	f7ff ff8e 	bl	8001e8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f70:	4b05      	ldr	r3, [pc, #20]	; (8001f88 <SysTick_Config+0x40>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f76:	4b04      	ldr	r3, [pc, #16]	; (8001f88 <SysTick_Config+0x40>)
 8001f78:	2207      	movs	r2, #7
 8001f7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f7c:	2300      	movs	r3, #0
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3708      	adds	r7, #8
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	e000e010 	.word	0xe000e010

08001f8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f7ff ff29 	bl	8001dec <__NVIC_SetPriorityGrouping>
}
 8001f9a:	bf00      	nop
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}

08001fa2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fa2:	b580      	push	{r7, lr}
 8001fa4:	b086      	sub	sp, #24
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	4603      	mov	r3, r0
 8001faa:	60b9      	str	r1, [r7, #8]
 8001fac:	607a      	str	r2, [r7, #4]
 8001fae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fb4:	f7ff ff3e 	bl	8001e34 <__NVIC_GetPriorityGrouping>
 8001fb8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	68b9      	ldr	r1, [r7, #8]
 8001fbe:	6978      	ldr	r0, [r7, #20]
 8001fc0:	f7ff ff8e 	bl	8001ee0 <NVIC_EncodePriority>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fca:	4611      	mov	r1, r2
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7ff ff5d 	bl	8001e8c <__NVIC_SetPriority>
}
 8001fd2:	bf00      	nop
 8001fd4:	3718      	adds	r7, #24
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}

08001fda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fda:	b580      	push	{r7, lr}
 8001fdc:	b082      	sub	sp, #8
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fe4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7ff ff31 	bl	8001e50 <__NVIC_EnableIRQ>
}
 8001fee:	bf00      	nop
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}

08001ff6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ff6:	b580      	push	{r7, lr}
 8001ff8:	b082      	sub	sp, #8
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f7ff ffa2 	bl	8001f48 <SysTick_Config>
 8002004:	4603      	mov	r3, r0
}
 8002006:	4618      	mov	r0, r3
 8002008:	3708      	adds	r7, #8
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800200e:	b580      	push	{r7, lr}
 8002010:	b084      	sub	sp, #16
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800201a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800201c:	f7ff f92e 	bl	800127c <HAL_GetTick>
 8002020:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002028:	b2db      	uxtb	r3, r3
 800202a:	2b02      	cmp	r3, #2
 800202c:	d008      	beq.n	8002040 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2280      	movs	r2, #128	; 0x80
 8002032:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2200      	movs	r2, #0
 8002038:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e052      	b.n	80020e6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f022 0216 	bic.w	r2, r2, #22
 800204e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	695a      	ldr	r2, [r3, #20]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800205e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002064:	2b00      	cmp	r3, #0
 8002066:	d103      	bne.n	8002070 <HAL_DMA_Abort+0x62>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800206c:	2b00      	cmp	r3, #0
 800206e:	d007      	beq.n	8002080 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f022 0208 	bic.w	r2, r2, #8
 800207e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f022 0201 	bic.w	r2, r2, #1
 800208e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002090:	e013      	b.n	80020ba <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002092:	f7ff f8f3 	bl	800127c <HAL_GetTick>
 8002096:	4602      	mov	r2, r0
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	2b05      	cmp	r3, #5
 800209e:	d90c      	bls.n	80020ba <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2220      	movs	r2, #32
 80020a4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2203      	movs	r2, #3
 80020aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e015      	b.n	80020e6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0301 	and.w	r3, r3, #1
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d1e4      	bne.n	8002092 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020cc:	223f      	movs	r2, #63	; 0x3f
 80020ce:	409a      	lsls	r2, r3
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2201      	movs	r2, #1
 80020d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2200      	movs	r2, #0
 80020e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3710      	adds	r7, #16
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}

080020ee <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80020ee:	b480      	push	{r7}
 80020f0:	b083      	sub	sp, #12
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d004      	beq.n	800210c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2280      	movs	r2, #128	; 0x80
 8002106:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e00c      	b.n	8002126 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2205      	movs	r2, #5
 8002110:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f022 0201 	bic.w	r2, r2, #1
 8002122:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002124:	2300      	movs	r3, #0
}
 8002126:	4618      	mov	r0, r3
 8002128:	370c      	adds	r7, #12
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
	...

08002134 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002134:	b480      	push	{r7}
 8002136:	b089      	sub	sp, #36	; 0x24
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800213e:	2300      	movs	r3, #0
 8002140:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002142:	2300      	movs	r3, #0
 8002144:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002146:	2300      	movs	r3, #0
 8002148:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800214a:	2300      	movs	r3, #0
 800214c:	61fb      	str	r3, [r7, #28]
 800214e:	e165      	b.n	800241c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002150:	2201      	movs	r2, #1
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	697a      	ldr	r2, [r7, #20]
 8002160:	4013      	ands	r3, r2
 8002162:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002164:	693a      	ldr	r2, [r7, #16]
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	429a      	cmp	r2, r3
 800216a:	f040 8154 	bne.w	8002416 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	f003 0303 	and.w	r3, r3, #3
 8002176:	2b01      	cmp	r3, #1
 8002178:	d005      	beq.n	8002186 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002182:	2b02      	cmp	r3, #2
 8002184:	d130      	bne.n	80021e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	005b      	lsls	r3, r3, #1
 8002190:	2203      	movs	r2, #3
 8002192:	fa02 f303 	lsl.w	r3, r2, r3
 8002196:	43db      	mvns	r3, r3
 8002198:	69ba      	ldr	r2, [r7, #24]
 800219a:	4013      	ands	r3, r2
 800219c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	68da      	ldr	r2, [r3, #12]
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	005b      	lsls	r3, r3, #1
 80021a6:	fa02 f303 	lsl.w	r3, r2, r3
 80021aa:	69ba      	ldr	r2, [r7, #24]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	69ba      	ldr	r2, [r7, #24]
 80021b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021bc:	2201      	movs	r2, #1
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	fa02 f303 	lsl.w	r3, r2, r3
 80021c4:	43db      	mvns	r3, r3
 80021c6:	69ba      	ldr	r2, [r7, #24]
 80021c8:	4013      	ands	r3, r2
 80021ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	091b      	lsrs	r3, r3, #4
 80021d2:	f003 0201 	and.w	r2, r3, #1
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	fa02 f303 	lsl.w	r3, r2, r3
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	4313      	orrs	r3, r2
 80021e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	69ba      	ldr	r2, [r7, #24]
 80021e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f003 0303 	and.w	r3, r3, #3
 80021f0:	2b03      	cmp	r3, #3
 80021f2:	d017      	beq.n	8002224 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	005b      	lsls	r3, r3, #1
 80021fe:	2203      	movs	r2, #3
 8002200:	fa02 f303 	lsl.w	r3, r2, r3
 8002204:	43db      	mvns	r3, r3
 8002206:	69ba      	ldr	r2, [r7, #24]
 8002208:	4013      	ands	r3, r2
 800220a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	689a      	ldr	r2, [r3, #8]
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	005b      	lsls	r3, r3, #1
 8002214:	fa02 f303 	lsl.w	r3, r2, r3
 8002218:	69ba      	ldr	r2, [r7, #24]
 800221a:	4313      	orrs	r3, r2
 800221c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f003 0303 	and.w	r3, r3, #3
 800222c:	2b02      	cmp	r3, #2
 800222e:	d123      	bne.n	8002278 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	08da      	lsrs	r2, r3, #3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	3208      	adds	r2, #8
 8002238:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800223c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	f003 0307 	and.w	r3, r3, #7
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	220f      	movs	r2, #15
 8002248:	fa02 f303 	lsl.w	r3, r2, r3
 800224c:	43db      	mvns	r3, r3
 800224e:	69ba      	ldr	r2, [r7, #24]
 8002250:	4013      	ands	r3, r2
 8002252:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	691a      	ldr	r2, [r3, #16]
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	f003 0307 	and.w	r3, r3, #7
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	fa02 f303 	lsl.w	r3, r2, r3
 8002264:	69ba      	ldr	r2, [r7, #24]
 8002266:	4313      	orrs	r3, r2
 8002268:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	08da      	lsrs	r2, r3, #3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	3208      	adds	r2, #8
 8002272:	69b9      	ldr	r1, [r7, #24]
 8002274:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	005b      	lsls	r3, r3, #1
 8002282:	2203      	movs	r2, #3
 8002284:	fa02 f303 	lsl.w	r3, r2, r3
 8002288:	43db      	mvns	r3, r3
 800228a:	69ba      	ldr	r2, [r7, #24]
 800228c:	4013      	ands	r3, r2
 800228e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f003 0203 	and.w	r2, r3, #3
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	005b      	lsls	r3, r3, #1
 800229c:	fa02 f303 	lsl.w	r3, r2, r3
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	69ba      	ldr	r2, [r7, #24]
 80022aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	f000 80ae 	beq.w	8002416 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022ba:	2300      	movs	r3, #0
 80022bc:	60fb      	str	r3, [r7, #12]
 80022be:	4b5d      	ldr	r3, [pc, #372]	; (8002434 <HAL_GPIO_Init+0x300>)
 80022c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c2:	4a5c      	ldr	r2, [pc, #368]	; (8002434 <HAL_GPIO_Init+0x300>)
 80022c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022c8:	6453      	str	r3, [r2, #68]	; 0x44
 80022ca:	4b5a      	ldr	r3, [pc, #360]	; (8002434 <HAL_GPIO_Init+0x300>)
 80022cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022d2:	60fb      	str	r3, [r7, #12]
 80022d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022d6:	4a58      	ldr	r2, [pc, #352]	; (8002438 <HAL_GPIO_Init+0x304>)
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	089b      	lsrs	r3, r3, #2
 80022dc:	3302      	adds	r3, #2
 80022de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	f003 0303 	and.w	r3, r3, #3
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	220f      	movs	r2, #15
 80022ee:	fa02 f303 	lsl.w	r3, r2, r3
 80022f2:	43db      	mvns	r3, r3
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	4013      	ands	r3, r2
 80022f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a4f      	ldr	r2, [pc, #316]	; (800243c <HAL_GPIO_Init+0x308>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d025      	beq.n	800234e <HAL_GPIO_Init+0x21a>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a4e      	ldr	r2, [pc, #312]	; (8002440 <HAL_GPIO_Init+0x30c>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d01f      	beq.n	800234a <HAL_GPIO_Init+0x216>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a4d      	ldr	r2, [pc, #308]	; (8002444 <HAL_GPIO_Init+0x310>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d019      	beq.n	8002346 <HAL_GPIO_Init+0x212>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4a4c      	ldr	r2, [pc, #304]	; (8002448 <HAL_GPIO_Init+0x314>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d013      	beq.n	8002342 <HAL_GPIO_Init+0x20e>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4a4b      	ldr	r2, [pc, #300]	; (800244c <HAL_GPIO_Init+0x318>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d00d      	beq.n	800233e <HAL_GPIO_Init+0x20a>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4a4a      	ldr	r2, [pc, #296]	; (8002450 <HAL_GPIO_Init+0x31c>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d007      	beq.n	800233a <HAL_GPIO_Init+0x206>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a49      	ldr	r2, [pc, #292]	; (8002454 <HAL_GPIO_Init+0x320>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d101      	bne.n	8002336 <HAL_GPIO_Init+0x202>
 8002332:	2306      	movs	r3, #6
 8002334:	e00c      	b.n	8002350 <HAL_GPIO_Init+0x21c>
 8002336:	2307      	movs	r3, #7
 8002338:	e00a      	b.n	8002350 <HAL_GPIO_Init+0x21c>
 800233a:	2305      	movs	r3, #5
 800233c:	e008      	b.n	8002350 <HAL_GPIO_Init+0x21c>
 800233e:	2304      	movs	r3, #4
 8002340:	e006      	b.n	8002350 <HAL_GPIO_Init+0x21c>
 8002342:	2303      	movs	r3, #3
 8002344:	e004      	b.n	8002350 <HAL_GPIO_Init+0x21c>
 8002346:	2302      	movs	r3, #2
 8002348:	e002      	b.n	8002350 <HAL_GPIO_Init+0x21c>
 800234a:	2301      	movs	r3, #1
 800234c:	e000      	b.n	8002350 <HAL_GPIO_Init+0x21c>
 800234e:	2300      	movs	r3, #0
 8002350:	69fa      	ldr	r2, [r7, #28]
 8002352:	f002 0203 	and.w	r2, r2, #3
 8002356:	0092      	lsls	r2, r2, #2
 8002358:	4093      	lsls	r3, r2
 800235a:	69ba      	ldr	r2, [r7, #24]
 800235c:	4313      	orrs	r3, r2
 800235e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002360:	4935      	ldr	r1, [pc, #212]	; (8002438 <HAL_GPIO_Init+0x304>)
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	089b      	lsrs	r3, r3, #2
 8002366:	3302      	adds	r3, #2
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800236e:	4b3a      	ldr	r3, [pc, #232]	; (8002458 <HAL_GPIO_Init+0x324>)
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	43db      	mvns	r3, r3
 8002378:	69ba      	ldr	r2, [r7, #24]
 800237a:	4013      	ands	r3, r2
 800237c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d003      	beq.n	8002392 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800238a:	69ba      	ldr	r2, [r7, #24]
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	4313      	orrs	r3, r2
 8002390:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002392:	4a31      	ldr	r2, [pc, #196]	; (8002458 <HAL_GPIO_Init+0x324>)
 8002394:	69bb      	ldr	r3, [r7, #24]
 8002396:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002398:	4b2f      	ldr	r3, [pc, #188]	; (8002458 <HAL_GPIO_Init+0x324>)
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	43db      	mvns	r3, r3
 80023a2:	69ba      	ldr	r2, [r7, #24]
 80023a4:	4013      	ands	r3, r2
 80023a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d003      	beq.n	80023bc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80023b4:	69ba      	ldr	r2, [r7, #24]
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	4313      	orrs	r3, r2
 80023ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023bc:	4a26      	ldr	r2, [pc, #152]	; (8002458 <HAL_GPIO_Init+0x324>)
 80023be:	69bb      	ldr	r3, [r7, #24]
 80023c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80023c2:	4b25      	ldr	r3, [pc, #148]	; (8002458 <HAL_GPIO_Init+0x324>)
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	43db      	mvns	r3, r3
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	4013      	ands	r3, r2
 80023d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d003      	beq.n	80023e6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80023de:	69ba      	ldr	r2, [r7, #24]
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023e6:	4a1c      	ldr	r2, [pc, #112]	; (8002458 <HAL_GPIO_Init+0x324>)
 80023e8:	69bb      	ldr	r3, [r7, #24]
 80023ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023ec:	4b1a      	ldr	r3, [pc, #104]	; (8002458 <HAL_GPIO_Init+0x324>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	43db      	mvns	r3, r3
 80023f6:	69ba      	ldr	r2, [r7, #24]
 80023f8:	4013      	ands	r3, r2
 80023fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d003      	beq.n	8002410 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002408:	69ba      	ldr	r2, [r7, #24]
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	4313      	orrs	r3, r2
 800240e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002410:	4a11      	ldr	r2, [pc, #68]	; (8002458 <HAL_GPIO_Init+0x324>)
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	3301      	adds	r3, #1
 800241a:	61fb      	str	r3, [r7, #28]
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	2b0f      	cmp	r3, #15
 8002420:	f67f ae96 	bls.w	8002150 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002424:	bf00      	nop
 8002426:	bf00      	nop
 8002428:	3724      	adds	r7, #36	; 0x24
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	40023800 	.word	0x40023800
 8002438:	40013800 	.word	0x40013800
 800243c:	40020000 	.word	0x40020000
 8002440:	40020400 	.word	0x40020400
 8002444:	40020800 	.word	0x40020800
 8002448:	40020c00 	.word	0x40020c00
 800244c:	40021000 	.word	0x40021000
 8002450:	40021400 	.word	0x40021400
 8002454:	40021800 	.word	0x40021800
 8002458:	40013c00 	.word	0x40013c00

0800245c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	460b      	mov	r3, r1
 8002466:	807b      	strh	r3, [r7, #2]
 8002468:	4613      	mov	r3, r2
 800246a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800246c:	787b      	ldrb	r3, [r7, #1]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d003      	beq.n	800247a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002472:	887a      	ldrh	r2, [r7, #2]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002478:	e003      	b.n	8002482 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800247a:	887b      	ldrh	r3, [r7, #2]
 800247c:	041a      	lsls	r2, r3, #16
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	619a      	str	r2, [r3, #24]
}
 8002482:	bf00      	nop
 8002484:	370c      	adds	r7, #12
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
	...

08002490 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002496:	2300      	movs	r3, #0
 8002498:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800249a:	2300      	movs	r3, #0
 800249c:	603b      	str	r3, [r7, #0]
 800249e:	4b20      	ldr	r3, [pc, #128]	; (8002520 <HAL_PWREx_EnableOverDrive+0x90>)
 80024a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a2:	4a1f      	ldr	r2, [pc, #124]	; (8002520 <HAL_PWREx_EnableOverDrive+0x90>)
 80024a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024a8:	6413      	str	r3, [r2, #64]	; 0x40
 80024aa:	4b1d      	ldr	r3, [pc, #116]	; (8002520 <HAL_PWREx_EnableOverDrive+0x90>)
 80024ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024b2:	603b      	str	r3, [r7, #0]
 80024b4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80024b6:	4b1b      	ldr	r3, [pc, #108]	; (8002524 <HAL_PWREx_EnableOverDrive+0x94>)
 80024b8:	2201      	movs	r2, #1
 80024ba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80024bc:	f7fe fede 	bl	800127c <HAL_GetTick>
 80024c0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80024c2:	e009      	b.n	80024d8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80024c4:	f7fe feda 	bl	800127c <HAL_GetTick>
 80024c8:	4602      	mov	r2, r0
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80024d2:	d901      	bls.n	80024d8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80024d4:	2303      	movs	r3, #3
 80024d6:	e01f      	b.n	8002518 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80024d8:	4b13      	ldr	r3, [pc, #76]	; (8002528 <HAL_PWREx_EnableOverDrive+0x98>)
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024e4:	d1ee      	bne.n	80024c4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80024e6:	4b11      	ldr	r3, [pc, #68]	; (800252c <HAL_PWREx_EnableOverDrive+0x9c>)
 80024e8:	2201      	movs	r2, #1
 80024ea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80024ec:	f7fe fec6 	bl	800127c <HAL_GetTick>
 80024f0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80024f2:	e009      	b.n	8002508 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80024f4:	f7fe fec2 	bl	800127c <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002502:	d901      	bls.n	8002508 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002504:	2303      	movs	r3, #3
 8002506:	e007      	b.n	8002518 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002508:	4b07      	ldr	r3, [pc, #28]	; (8002528 <HAL_PWREx_EnableOverDrive+0x98>)
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002510:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002514:	d1ee      	bne.n	80024f4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002516:	2300      	movs	r3, #0
}
 8002518:	4618      	mov	r0, r3
 800251a:	3708      	adds	r7, #8
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	40023800 	.word	0x40023800
 8002524:	420e0040 	.word	0x420e0040
 8002528:	40007000 	.word	0x40007000
 800252c:	420e0044 	.word	0x420e0044

08002530 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d101      	bne.n	8002544 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e0cc      	b.n	80026de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002544:	4b68      	ldr	r3, [pc, #416]	; (80026e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 030f 	and.w	r3, r3, #15
 800254c:	683a      	ldr	r2, [r7, #0]
 800254e:	429a      	cmp	r2, r3
 8002550:	d90c      	bls.n	800256c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002552:	4b65      	ldr	r3, [pc, #404]	; (80026e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002554:	683a      	ldr	r2, [r7, #0]
 8002556:	b2d2      	uxtb	r2, r2
 8002558:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800255a:	4b63      	ldr	r3, [pc, #396]	; (80026e8 <HAL_RCC_ClockConfig+0x1b8>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 030f 	and.w	r3, r3, #15
 8002562:	683a      	ldr	r2, [r7, #0]
 8002564:	429a      	cmp	r2, r3
 8002566:	d001      	beq.n	800256c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e0b8      	b.n	80026de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0302 	and.w	r3, r3, #2
 8002574:	2b00      	cmp	r3, #0
 8002576:	d020      	beq.n	80025ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0304 	and.w	r3, r3, #4
 8002580:	2b00      	cmp	r3, #0
 8002582:	d005      	beq.n	8002590 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002584:	4b59      	ldr	r3, [pc, #356]	; (80026ec <HAL_RCC_ClockConfig+0x1bc>)
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	4a58      	ldr	r2, [pc, #352]	; (80026ec <HAL_RCC_ClockConfig+0x1bc>)
 800258a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800258e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0308 	and.w	r3, r3, #8
 8002598:	2b00      	cmp	r3, #0
 800259a:	d005      	beq.n	80025a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800259c:	4b53      	ldr	r3, [pc, #332]	; (80026ec <HAL_RCC_ClockConfig+0x1bc>)
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	4a52      	ldr	r2, [pc, #328]	; (80026ec <HAL_RCC_ClockConfig+0x1bc>)
 80025a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80025a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025a8:	4b50      	ldr	r3, [pc, #320]	; (80026ec <HAL_RCC_ClockConfig+0x1bc>)
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	494d      	ldr	r1, [pc, #308]	; (80026ec <HAL_RCC_ClockConfig+0x1bc>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0301 	and.w	r3, r3, #1
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d044      	beq.n	8002650 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d107      	bne.n	80025de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ce:	4b47      	ldr	r3, [pc, #284]	; (80026ec <HAL_RCC_ClockConfig+0x1bc>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d119      	bne.n	800260e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e07f      	b.n	80026de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d003      	beq.n	80025ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025ea:	2b03      	cmp	r3, #3
 80025ec:	d107      	bne.n	80025fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ee:	4b3f      	ldr	r3, [pc, #252]	; (80026ec <HAL_RCC_ClockConfig+0x1bc>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d109      	bne.n	800260e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e06f      	b.n	80026de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025fe:	4b3b      	ldr	r3, [pc, #236]	; (80026ec <HAL_RCC_ClockConfig+0x1bc>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0302 	and.w	r3, r3, #2
 8002606:	2b00      	cmp	r3, #0
 8002608:	d101      	bne.n	800260e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e067      	b.n	80026de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800260e:	4b37      	ldr	r3, [pc, #220]	; (80026ec <HAL_RCC_ClockConfig+0x1bc>)
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	f023 0203 	bic.w	r2, r3, #3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	4934      	ldr	r1, [pc, #208]	; (80026ec <HAL_RCC_ClockConfig+0x1bc>)
 800261c:	4313      	orrs	r3, r2
 800261e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002620:	f7fe fe2c 	bl	800127c <HAL_GetTick>
 8002624:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002626:	e00a      	b.n	800263e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002628:	f7fe fe28 	bl	800127c <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	f241 3288 	movw	r2, #5000	; 0x1388
 8002636:	4293      	cmp	r3, r2
 8002638:	d901      	bls.n	800263e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e04f      	b.n	80026de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800263e:	4b2b      	ldr	r3, [pc, #172]	; (80026ec <HAL_RCC_ClockConfig+0x1bc>)
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	f003 020c 	and.w	r2, r3, #12
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	429a      	cmp	r2, r3
 800264e:	d1eb      	bne.n	8002628 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002650:	4b25      	ldr	r3, [pc, #148]	; (80026e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 030f 	and.w	r3, r3, #15
 8002658:	683a      	ldr	r2, [r7, #0]
 800265a:	429a      	cmp	r2, r3
 800265c:	d20c      	bcs.n	8002678 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800265e:	4b22      	ldr	r3, [pc, #136]	; (80026e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002660:	683a      	ldr	r2, [r7, #0]
 8002662:	b2d2      	uxtb	r2, r2
 8002664:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002666:	4b20      	ldr	r3, [pc, #128]	; (80026e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 030f 	and.w	r3, r3, #15
 800266e:	683a      	ldr	r2, [r7, #0]
 8002670:	429a      	cmp	r2, r3
 8002672:	d001      	beq.n	8002678 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e032      	b.n	80026de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0304 	and.w	r3, r3, #4
 8002680:	2b00      	cmp	r3, #0
 8002682:	d008      	beq.n	8002696 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002684:	4b19      	ldr	r3, [pc, #100]	; (80026ec <HAL_RCC_ClockConfig+0x1bc>)
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	4916      	ldr	r1, [pc, #88]	; (80026ec <HAL_RCC_ClockConfig+0x1bc>)
 8002692:	4313      	orrs	r3, r2
 8002694:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0308 	and.w	r3, r3, #8
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d009      	beq.n	80026b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026a2:	4b12      	ldr	r3, [pc, #72]	; (80026ec <HAL_RCC_ClockConfig+0x1bc>)
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	691b      	ldr	r3, [r3, #16]
 80026ae:	00db      	lsls	r3, r3, #3
 80026b0:	490e      	ldr	r1, [pc, #56]	; (80026ec <HAL_RCC_ClockConfig+0x1bc>)
 80026b2:	4313      	orrs	r3, r2
 80026b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80026b6:	f000 f855 	bl	8002764 <HAL_RCC_GetSysClockFreq>
 80026ba:	4602      	mov	r2, r0
 80026bc:	4b0b      	ldr	r3, [pc, #44]	; (80026ec <HAL_RCC_ClockConfig+0x1bc>)
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	091b      	lsrs	r3, r3, #4
 80026c2:	f003 030f 	and.w	r3, r3, #15
 80026c6:	490a      	ldr	r1, [pc, #40]	; (80026f0 <HAL_RCC_ClockConfig+0x1c0>)
 80026c8:	5ccb      	ldrb	r3, [r1, r3]
 80026ca:	fa22 f303 	lsr.w	r3, r2, r3
 80026ce:	4a09      	ldr	r2, [pc, #36]	; (80026f4 <HAL_RCC_ClockConfig+0x1c4>)
 80026d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80026d2:	4b09      	ldr	r3, [pc, #36]	; (80026f8 <HAL_RCC_ClockConfig+0x1c8>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7fe fd8c 	bl	80011f4 <HAL_InitTick>

  return HAL_OK;
 80026dc:	2300      	movs	r3, #0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3710      	adds	r7, #16
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	40023c00 	.word	0x40023c00
 80026ec:	40023800 	.word	0x40023800
 80026f0:	08004860 	.word	0x08004860
 80026f4:	20000000 	.word	0x20000000
 80026f8:	20000004 	.word	0x20000004

080026fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026fc:	b480      	push	{r7}
 80026fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002700:	4b03      	ldr	r3, [pc, #12]	; (8002710 <HAL_RCC_GetHCLKFreq+0x14>)
 8002702:	681b      	ldr	r3, [r3, #0]
}
 8002704:	4618      	mov	r0, r3
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	20000000 	.word	0x20000000

08002714 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002718:	f7ff fff0 	bl	80026fc <HAL_RCC_GetHCLKFreq>
 800271c:	4602      	mov	r2, r0
 800271e:	4b05      	ldr	r3, [pc, #20]	; (8002734 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	0a9b      	lsrs	r3, r3, #10
 8002724:	f003 0307 	and.w	r3, r3, #7
 8002728:	4903      	ldr	r1, [pc, #12]	; (8002738 <HAL_RCC_GetPCLK1Freq+0x24>)
 800272a:	5ccb      	ldrb	r3, [r1, r3]
 800272c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002730:	4618      	mov	r0, r3
 8002732:	bd80      	pop	{r7, pc}
 8002734:	40023800 	.word	0x40023800
 8002738:	08004870 	.word	0x08004870

0800273c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002740:	f7ff ffdc 	bl	80026fc <HAL_RCC_GetHCLKFreq>
 8002744:	4602      	mov	r2, r0
 8002746:	4b05      	ldr	r3, [pc, #20]	; (800275c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	0b5b      	lsrs	r3, r3, #13
 800274c:	f003 0307 	and.w	r3, r3, #7
 8002750:	4903      	ldr	r1, [pc, #12]	; (8002760 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002752:	5ccb      	ldrb	r3, [r1, r3]
 8002754:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002758:	4618      	mov	r0, r3
 800275a:	bd80      	pop	{r7, pc}
 800275c:	40023800 	.word	0x40023800
 8002760:	08004870 	.word	0x08004870

08002764 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002764:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002768:	b0ae      	sub	sp, #184	; 0xb8
 800276a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800276c:	2300      	movs	r3, #0
 800276e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002772:	2300      	movs	r3, #0
 8002774:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002778:	2300      	movs	r3, #0
 800277a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800277e:	2300      	movs	r3, #0
 8002780:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002784:	2300      	movs	r3, #0
 8002786:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800278a:	4bcb      	ldr	r3, [pc, #812]	; (8002ab8 <HAL_RCC_GetSysClockFreq+0x354>)
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	f003 030c 	and.w	r3, r3, #12
 8002792:	2b0c      	cmp	r3, #12
 8002794:	f200 8206 	bhi.w	8002ba4 <HAL_RCC_GetSysClockFreq+0x440>
 8002798:	a201      	add	r2, pc, #4	; (adr r2, 80027a0 <HAL_RCC_GetSysClockFreq+0x3c>)
 800279a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800279e:	bf00      	nop
 80027a0:	080027d5 	.word	0x080027d5
 80027a4:	08002ba5 	.word	0x08002ba5
 80027a8:	08002ba5 	.word	0x08002ba5
 80027ac:	08002ba5 	.word	0x08002ba5
 80027b0:	080027dd 	.word	0x080027dd
 80027b4:	08002ba5 	.word	0x08002ba5
 80027b8:	08002ba5 	.word	0x08002ba5
 80027bc:	08002ba5 	.word	0x08002ba5
 80027c0:	080027e5 	.word	0x080027e5
 80027c4:	08002ba5 	.word	0x08002ba5
 80027c8:	08002ba5 	.word	0x08002ba5
 80027cc:	08002ba5 	.word	0x08002ba5
 80027d0:	080029d5 	.word	0x080029d5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027d4:	4bb9      	ldr	r3, [pc, #740]	; (8002abc <HAL_RCC_GetSysClockFreq+0x358>)
 80027d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80027da:	e1e7      	b.n	8002bac <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027dc:	4bb8      	ldr	r3, [pc, #736]	; (8002ac0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80027de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80027e2:	e1e3      	b.n	8002bac <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027e4:	4bb4      	ldr	r3, [pc, #720]	; (8002ab8 <HAL_RCC_GetSysClockFreq+0x354>)
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027f0:	4bb1      	ldr	r3, [pc, #708]	; (8002ab8 <HAL_RCC_GetSysClockFreq+0x354>)
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d071      	beq.n	80028e0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027fc:	4bae      	ldr	r3, [pc, #696]	; (8002ab8 <HAL_RCC_GetSysClockFreq+0x354>)
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	099b      	lsrs	r3, r3, #6
 8002802:	2200      	movs	r2, #0
 8002804:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002808:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800280c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002810:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002814:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002818:	2300      	movs	r3, #0
 800281a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800281e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002822:	4622      	mov	r2, r4
 8002824:	462b      	mov	r3, r5
 8002826:	f04f 0000 	mov.w	r0, #0
 800282a:	f04f 0100 	mov.w	r1, #0
 800282e:	0159      	lsls	r1, r3, #5
 8002830:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002834:	0150      	lsls	r0, r2, #5
 8002836:	4602      	mov	r2, r0
 8002838:	460b      	mov	r3, r1
 800283a:	4621      	mov	r1, r4
 800283c:	1a51      	subs	r1, r2, r1
 800283e:	6439      	str	r1, [r7, #64]	; 0x40
 8002840:	4629      	mov	r1, r5
 8002842:	eb63 0301 	sbc.w	r3, r3, r1
 8002846:	647b      	str	r3, [r7, #68]	; 0x44
 8002848:	f04f 0200 	mov.w	r2, #0
 800284c:	f04f 0300 	mov.w	r3, #0
 8002850:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002854:	4649      	mov	r1, r9
 8002856:	018b      	lsls	r3, r1, #6
 8002858:	4641      	mov	r1, r8
 800285a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800285e:	4641      	mov	r1, r8
 8002860:	018a      	lsls	r2, r1, #6
 8002862:	4641      	mov	r1, r8
 8002864:	1a51      	subs	r1, r2, r1
 8002866:	63b9      	str	r1, [r7, #56]	; 0x38
 8002868:	4649      	mov	r1, r9
 800286a:	eb63 0301 	sbc.w	r3, r3, r1
 800286e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002870:	f04f 0200 	mov.w	r2, #0
 8002874:	f04f 0300 	mov.w	r3, #0
 8002878:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800287c:	4649      	mov	r1, r9
 800287e:	00cb      	lsls	r3, r1, #3
 8002880:	4641      	mov	r1, r8
 8002882:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002886:	4641      	mov	r1, r8
 8002888:	00ca      	lsls	r2, r1, #3
 800288a:	4610      	mov	r0, r2
 800288c:	4619      	mov	r1, r3
 800288e:	4603      	mov	r3, r0
 8002890:	4622      	mov	r2, r4
 8002892:	189b      	adds	r3, r3, r2
 8002894:	633b      	str	r3, [r7, #48]	; 0x30
 8002896:	462b      	mov	r3, r5
 8002898:	460a      	mov	r2, r1
 800289a:	eb42 0303 	adc.w	r3, r2, r3
 800289e:	637b      	str	r3, [r7, #52]	; 0x34
 80028a0:	f04f 0200 	mov.w	r2, #0
 80028a4:	f04f 0300 	mov.w	r3, #0
 80028a8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80028ac:	4629      	mov	r1, r5
 80028ae:	024b      	lsls	r3, r1, #9
 80028b0:	4621      	mov	r1, r4
 80028b2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80028b6:	4621      	mov	r1, r4
 80028b8:	024a      	lsls	r2, r1, #9
 80028ba:	4610      	mov	r0, r2
 80028bc:	4619      	mov	r1, r3
 80028be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80028c2:	2200      	movs	r2, #0
 80028c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80028c8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80028cc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80028d0:	f7fd fc98 	bl	8000204 <__aeabi_uldivmod>
 80028d4:	4602      	mov	r2, r0
 80028d6:	460b      	mov	r3, r1
 80028d8:	4613      	mov	r3, r2
 80028da:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80028de:	e067      	b.n	80029b0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028e0:	4b75      	ldr	r3, [pc, #468]	; (8002ab8 <HAL_RCC_GetSysClockFreq+0x354>)
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	099b      	lsrs	r3, r3, #6
 80028e6:	2200      	movs	r2, #0
 80028e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80028ec:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80028f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80028f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028f8:	67bb      	str	r3, [r7, #120]	; 0x78
 80028fa:	2300      	movs	r3, #0
 80028fc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80028fe:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002902:	4622      	mov	r2, r4
 8002904:	462b      	mov	r3, r5
 8002906:	f04f 0000 	mov.w	r0, #0
 800290a:	f04f 0100 	mov.w	r1, #0
 800290e:	0159      	lsls	r1, r3, #5
 8002910:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002914:	0150      	lsls	r0, r2, #5
 8002916:	4602      	mov	r2, r0
 8002918:	460b      	mov	r3, r1
 800291a:	4621      	mov	r1, r4
 800291c:	1a51      	subs	r1, r2, r1
 800291e:	62b9      	str	r1, [r7, #40]	; 0x28
 8002920:	4629      	mov	r1, r5
 8002922:	eb63 0301 	sbc.w	r3, r3, r1
 8002926:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002928:	f04f 0200 	mov.w	r2, #0
 800292c:	f04f 0300 	mov.w	r3, #0
 8002930:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002934:	4649      	mov	r1, r9
 8002936:	018b      	lsls	r3, r1, #6
 8002938:	4641      	mov	r1, r8
 800293a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800293e:	4641      	mov	r1, r8
 8002940:	018a      	lsls	r2, r1, #6
 8002942:	4641      	mov	r1, r8
 8002944:	ebb2 0a01 	subs.w	sl, r2, r1
 8002948:	4649      	mov	r1, r9
 800294a:	eb63 0b01 	sbc.w	fp, r3, r1
 800294e:	f04f 0200 	mov.w	r2, #0
 8002952:	f04f 0300 	mov.w	r3, #0
 8002956:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800295a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800295e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002962:	4692      	mov	sl, r2
 8002964:	469b      	mov	fp, r3
 8002966:	4623      	mov	r3, r4
 8002968:	eb1a 0303 	adds.w	r3, sl, r3
 800296c:	623b      	str	r3, [r7, #32]
 800296e:	462b      	mov	r3, r5
 8002970:	eb4b 0303 	adc.w	r3, fp, r3
 8002974:	627b      	str	r3, [r7, #36]	; 0x24
 8002976:	f04f 0200 	mov.w	r2, #0
 800297a:	f04f 0300 	mov.w	r3, #0
 800297e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002982:	4629      	mov	r1, r5
 8002984:	028b      	lsls	r3, r1, #10
 8002986:	4621      	mov	r1, r4
 8002988:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800298c:	4621      	mov	r1, r4
 800298e:	028a      	lsls	r2, r1, #10
 8002990:	4610      	mov	r0, r2
 8002992:	4619      	mov	r1, r3
 8002994:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002998:	2200      	movs	r2, #0
 800299a:	673b      	str	r3, [r7, #112]	; 0x70
 800299c:	677a      	str	r2, [r7, #116]	; 0x74
 800299e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80029a2:	f7fd fc2f 	bl	8000204 <__aeabi_uldivmod>
 80029a6:	4602      	mov	r2, r0
 80029a8:	460b      	mov	r3, r1
 80029aa:	4613      	mov	r3, r2
 80029ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80029b0:	4b41      	ldr	r3, [pc, #260]	; (8002ab8 <HAL_RCC_GetSysClockFreq+0x354>)
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	0c1b      	lsrs	r3, r3, #16
 80029b6:	f003 0303 	and.w	r3, r3, #3
 80029ba:	3301      	adds	r3, #1
 80029bc:	005b      	lsls	r3, r3, #1
 80029be:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80029c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80029c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80029ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80029d2:	e0eb      	b.n	8002bac <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029d4:	4b38      	ldr	r3, [pc, #224]	; (8002ab8 <HAL_RCC_GetSysClockFreq+0x354>)
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029e0:	4b35      	ldr	r3, [pc, #212]	; (8002ab8 <HAL_RCC_GetSysClockFreq+0x354>)
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d06b      	beq.n	8002ac4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029ec:	4b32      	ldr	r3, [pc, #200]	; (8002ab8 <HAL_RCC_GetSysClockFreq+0x354>)
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	099b      	lsrs	r3, r3, #6
 80029f2:	2200      	movs	r2, #0
 80029f4:	66bb      	str	r3, [r7, #104]	; 0x68
 80029f6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80029f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80029fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029fe:	663b      	str	r3, [r7, #96]	; 0x60
 8002a00:	2300      	movs	r3, #0
 8002a02:	667b      	str	r3, [r7, #100]	; 0x64
 8002a04:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002a08:	4622      	mov	r2, r4
 8002a0a:	462b      	mov	r3, r5
 8002a0c:	f04f 0000 	mov.w	r0, #0
 8002a10:	f04f 0100 	mov.w	r1, #0
 8002a14:	0159      	lsls	r1, r3, #5
 8002a16:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a1a:	0150      	lsls	r0, r2, #5
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	460b      	mov	r3, r1
 8002a20:	4621      	mov	r1, r4
 8002a22:	1a51      	subs	r1, r2, r1
 8002a24:	61b9      	str	r1, [r7, #24]
 8002a26:	4629      	mov	r1, r5
 8002a28:	eb63 0301 	sbc.w	r3, r3, r1
 8002a2c:	61fb      	str	r3, [r7, #28]
 8002a2e:	f04f 0200 	mov.w	r2, #0
 8002a32:	f04f 0300 	mov.w	r3, #0
 8002a36:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002a3a:	4659      	mov	r1, fp
 8002a3c:	018b      	lsls	r3, r1, #6
 8002a3e:	4651      	mov	r1, sl
 8002a40:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a44:	4651      	mov	r1, sl
 8002a46:	018a      	lsls	r2, r1, #6
 8002a48:	4651      	mov	r1, sl
 8002a4a:	ebb2 0801 	subs.w	r8, r2, r1
 8002a4e:	4659      	mov	r1, fp
 8002a50:	eb63 0901 	sbc.w	r9, r3, r1
 8002a54:	f04f 0200 	mov.w	r2, #0
 8002a58:	f04f 0300 	mov.w	r3, #0
 8002a5c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a60:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a64:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a68:	4690      	mov	r8, r2
 8002a6a:	4699      	mov	r9, r3
 8002a6c:	4623      	mov	r3, r4
 8002a6e:	eb18 0303 	adds.w	r3, r8, r3
 8002a72:	613b      	str	r3, [r7, #16]
 8002a74:	462b      	mov	r3, r5
 8002a76:	eb49 0303 	adc.w	r3, r9, r3
 8002a7a:	617b      	str	r3, [r7, #20]
 8002a7c:	f04f 0200 	mov.w	r2, #0
 8002a80:	f04f 0300 	mov.w	r3, #0
 8002a84:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002a88:	4629      	mov	r1, r5
 8002a8a:	024b      	lsls	r3, r1, #9
 8002a8c:	4621      	mov	r1, r4
 8002a8e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002a92:	4621      	mov	r1, r4
 8002a94:	024a      	lsls	r2, r1, #9
 8002a96:	4610      	mov	r0, r2
 8002a98:	4619      	mov	r1, r3
 8002a9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	65bb      	str	r3, [r7, #88]	; 0x58
 8002aa2:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002aa4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002aa8:	f7fd fbac 	bl	8000204 <__aeabi_uldivmod>
 8002aac:	4602      	mov	r2, r0
 8002aae:	460b      	mov	r3, r1
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002ab6:	e065      	b.n	8002b84 <HAL_RCC_GetSysClockFreq+0x420>
 8002ab8:	40023800 	.word	0x40023800
 8002abc:	00f42400 	.word	0x00f42400
 8002ac0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ac4:	4b3d      	ldr	r3, [pc, #244]	; (8002bbc <HAL_RCC_GetSysClockFreq+0x458>)
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	099b      	lsrs	r3, r3, #6
 8002aca:	2200      	movs	r2, #0
 8002acc:	4618      	mov	r0, r3
 8002ace:	4611      	mov	r1, r2
 8002ad0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002ad4:	653b      	str	r3, [r7, #80]	; 0x50
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	657b      	str	r3, [r7, #84]	; 0x54
 8002ada:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002ade:	4642      	mov	r2, r8
 8002ae0:	464b      	mov	r3, r9
 8002ae2:	f04f 0000 	mov.w	r0, #0
 8002ae6:	f04f 0100 	mov.w	r1, #0
 8002aea:	0159      	lsls	r1, r3, #5
 8002aec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002af0:	0150      	lsls	r0, r2, #5
 8002af2:	4602      	mov	r2, r0
 8002af4:	460b      	mov	r3, r1
 8002af6:	4641      	mov	r1, r8
 8002af8:	1a51      	subs	r1, r2, r1
 8002afa:	60b9      	str	r1, [r7, #8]
 8002afc:	4649      	mov	r1, r9
 8002afe:	eb63 0301 	sbc.w	r3, r3, r1
 8002b02:	60fb      	str	r3, [r7, #12]
 8002b04:	f04f 0200 	mov.w	r2, #0
 8002b08:	f04f 0300 	mov.w	r3, #0
 8002b0c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002b10:	4659      	mov	r1, fp
 8002b12:	018b      	lsls	r3, r1, #6
 8002b14:	4651      	mov	r1, sl
 8002b16:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b1a:	4651      	mov	r1, sl
 8002b1c:	018a      	lsls	r2, r1, #6
 8002b1e:	4651      	mov	r1, sl
 8002b20:	1a54      	subs	r4, r2, r1
 8002b22:	4659      	mov	r1, fp
 8002b24:	eb63 0501 	sbc.w	r5, r3, r1
 8002b28:	f04f 0200 	mov.w	r2, #0
 8002b2c:	f04f 0300 	mov.w	r3, #0
 8002b30:	00eb      	lsls	r3, r5, #3
 8002b32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b36:	00e2      	lsls	r2, r4, #3
 8002b38:	4614      	mov	r4, r2
 8002b3a:	461d      	mov	r5, r3
 8002b3c:	4643      	mov	r3, r8
 8002b3e:	18e3      	adds	r3, r4, r3
 8002b40:	603b      	str	r3, [r7, #0]
 8002b42:	464b      	mov	r3, r9
 8002b44:	eb45 0303 	adc.w	r3, r5, r3
 8002b48:	607b      	str	r3, [r7, #4]
 8002b4a:	f04f 0200 	mov.w	r2, #0
 8002b4e:	f04f 0300 	mov.w	r3, #0
 8002b52:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b56:	4629      	mov	r1, r5
 8002b58:	028b      	lsls	r3, r1, #10
 8002b5a:	4621      	mov	r1, r4
 8002b5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b60:	4621      	mov	r1, r4
 8002b62:	028a      	lsls	r2, r1, #10
 8002b64:	4610      	mov	r0, r2
 8002b66:	4619      	mov	r1, r3
 8002b68:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b70:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002b72:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002b76:	f7fd fb45 	bl	8000204 <__aeabi_uldivmod>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	4613      	mov	r3, r2
 8002b80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002b84:	4b0d      	ldr	r3, [pc, #52]	; (8002bbc <HAL_RCC_GetSysClockFreq+0x458>)
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	0f1b      	lsrs	r3, r3, #28
 8002b8a:	f003 0307 	and.w	r3, r3, #7
 8002b8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002b92:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002b96:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b9e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002ba2:	e003      	b.n	8002bac <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ba4:	4b06      	ldr	r3, [pc, #24]	; (8002bc0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002ba6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002baa:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	37b8      	adds	r7, #184	; 0xb8
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002bba:	bf00      	nop
 8002bbc:	40023800 	.word	0x40023800
 8002bc0:	00f42400 	.word	0x00f42400

08002bc4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b086      	sub	sp, #24
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d101      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e28d      	b.n	80030f2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0301 	and.w	r3, r3, #1
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	f000 8083 	beq.w	8002cea <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002be4:	4b94      	ldr	r3, [pc, #592]	; (8002e38 <HAL_RCC_OscConfig+0x274>)
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	f003 030c 	and.w	r3, r3, #12
 8002bec:	2b04      	cmp	r3, #4
 8002bee:	d019      	beq.n	8002c24 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002bf0:	4b91      	ldr	r3, [pc, #580]	; (8002e38 <HAL_RCC_OscConfig+0x274>)
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002bf8:	2b08      	cmp	r3, #8
 8002bfa:	d106      	bne.n	8002c0a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002bfc:	4b8e      	ldr	r3, [pc, #568]	; (8002e38 <HAL_RCC_OscConfig+0x274>)
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c08:	d00c      	beq.n	8002c24 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c0a:	4b8b      	ldr	r3, [pc, #556]	; (8002e38 <HAL_RCC_OscConfig+0x274>)
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002c12:	2b0c      	cmp	r3, #12
 8002c14:	d112      	bne.n	8002c3c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c16:	4b88      	ldr	r3, [pc, #544]	; (8002e38 <HAL_RCC_OscConfig+0x274>)
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c22:	d10b      	bne.n	8002c3c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c24:	4b84      	ldr	r3, [pc, #528]	; (8002e38 <HAL_RCC_OscConfig+0x274>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d05b      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x124>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d157      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e25a      	b.n	80030f2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c44:	d106      	bne.n	8002c54 <HAL_RCC_OscConfig+0x90>
 8002c46:	4b7c      	ldr	r3, [pc, #496]	; (8002e38 <HAL_RCC_OscConfig+0x274>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a7b      	ldr	r2, [pc, #492]	; (8002e38 <HAL_RCC_OscConfig+0x274>)
 8002c4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c50:	6013      	str	r3, [r2, #0]
 8002c52:	e01d      	b.n	8002c90 <HAL_RCC_OscConfig+0xcc>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c5c:	d10c      	bne.n	8002c78 <HAL_RCC_OscConfig+0xb4>
 8002c5e:	4b76      	ldr	r3, [pc, #472]	; (8002e38 <HAL_RCC_OscConfig+0x274>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a75      	ldr	r2, [pc, #468]	; (8002e38 <HAL_RCC_OscConfig+0x274>)
 8002c64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c68:	6013      	str	r3, [r2, #0]
 8002c6a:	4b73      	ldr	r3, [pc, #460]	; (8002e38 <HAL_RCC_OscConfig+0x274>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a72      	ldr	r2, [pc, #456]	; (8002e38 <HAL_RCC_OscConfig+0x274>)
 8002c70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c74:	6013      	str	r3, [r2, #0]
 8002c76:	e00b      	b.n	8002c90 <HAL_RCC_OscConfig+0xcc>
 8002c78:	4b6f      	ldr	r3, [pc, #444]	; (8002e38 <HAL_RCC_OscConfig+0x274>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a6e      	ldr	r2, [pc, #440]	; (8002e38 <HAL_RCC_OscConfig+0x274>)
 8002c7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c82:	6013      	str	r3, [r2, #0]
 8002c84:	4b6c      	ldr	r3, [pc, #432]	; (8002e38 <HAL_RCC_OscConfig+0x274>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a6b      	ldr	r2, [pc, #428]	; (8002e38 <HAL_RCC_OscConfig+0x274>)
 8002c8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d013      	beq.n	8002cc0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c98:	f7fe faf0 	bl	800127c <HAL_GetTick>
 8002c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c9e:	e008      	b.n	8002cb2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ca0:	f7fe faec 	bl	800127c <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	2b64      	cmp	r3, #100	; 0x64
 8002cac:	d901      	bls.n	8002cb2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e21f      	b.n	80030f2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cb2:	4b61      	ldr	r3, [pc, #388]	; (8002e38 <HAL_RCC_OscConfig+0x274>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d0f0      	beq.n	8002ca0 <HAL_RCC_OscConfig+0xdc>
 8002cbe:	e014      	b.n	8002cea <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cc0:	f7fe fadc 	bl	800127c <HAL_GetTick>
 8002cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cc6:	e008      	b.n	8002cda <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cc8:	f7fe fad8 	bl	800127c <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	2b64      	cmp	r3, #100	; 0x64
 8002cd4:	d901      	bls.n	8002cda <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e20b      	b.n	80030f2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cda:	4b57      	ldr	r3, [pc, #348]	; (8002e38 <HAL_RCC_OscConfig+0x274>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d1f0      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x104>
 8002ce6:	e000      	b.n	8002cea <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ce8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d06f      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002cf6:	4b50      	ldr	r3, [pc, #320]	; (8002e38 <HAL_RCC_OscConfig+0x274>)
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	f003 030c 	and.w	r3, r3, #12
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d017      	beq.n	8002d32 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002d02:	4b4d      	ldr	r3, [pc, #308]	; (8002e38 <HAL_RCC_OscConfig+0x274>)
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002d0a:	2b08      	cmp	r3, #8
 8002d0c:	d105      	bne.n	8002d1a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002d0e:	4b4a      	ldr	r3, [pc, #296]	; (8002e38 <HAL_RCC_OscConfig+0x274>)
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d00b      	beq.n	8002d32 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d1a:	4b47      	ldr	r3, [pc, #284]	; (8002e38 <HAL_RCC_OscConfig+0x274>)
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002d22:	2b0c      	cmp	r3, #12
 8002d24:	d11c      	bne.n	8002d60 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d26:	4b44      	ldr	r3, [pc, #272]	; (8002e38 <HAL_RCC_OscConfig+0x274>)
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d116      	bne.n	8002d60 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d32:	4b41      	ldr	r3, [pc, #260]	; (8002e38 <HAL_RCC_OscConfig+0x274>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0302 	and.w	r3, r3, #2
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d005      	beq.n	8002d4a <HAL_RCC_OscConfig+0x186>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d001      	beq.n	8002d4a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e1d3      	b.n	80030f2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d4a:	4b3b      	ldr	r3, [pc, #236]	; (8002e38 <HAL_RCC_OscConfig+0x274>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	691b      	ldr	r3, [r3, #16]
 8002d56:	00db      	lsls	r3, r3, #3
 8002d58:	4937      	ldr	r1, [pc, #220]	; (8002e38 <HAL_RCC_OscConfig+0x274>)
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d5e:	e03a      	b.n	8002dd6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d020      	beq.n	8002daa <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d68:	4b34      	ldr	r3, [pc, #208]	; (8002e3c <HAL_RCC_OscConfig+0x278>)
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d6e:	f7fe fa85 	bl	800127c <HAL_GetTick>
 8002d72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d74:	e008      	b.n	8002d88 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d76:	f7fe fa81 	bl	800127c <HAL_GetTick>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d901      	bls.n	8002d88 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002d84:	2303      	movs	r3, #3
 8002d86:	e1b4      	b.n	80030f2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d88:	4b2b      	ldr	r3, [pc, #172]	; (8002e38 <HAL_RCC_OscConfig+0x274>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0302 	and.w	r3, r3, #2
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d0f0      	beq.n	8002d76 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d94:	4b28      	ldr	r3, [pc, #160]	; (8002e38 <HAL_RCC_OscConfig+0x274>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	691b      	ldr	r3, [r3, #16]
 8002da0:	00db      	lsls	r3, r3, #3
 8002da2:	4925      	ldr	r1, [pc, #148]	; (8002e38 <HAL_RCC_OscConfig+0x274>)
 8002da4:	4313      	orrs	r3, r2
 8002da6:	600b      	str	r3, [r1, #0]
 8002da8:	e015      	b.n	8002dd6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002daa:	4b24      	ldr	r3, [pc, #144]	; (8002e3c <HAL_RCC_OscConfig+0x278>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db0:	f7fe fa64 	bl	800127c <HAL_GetTick>
 8002db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002db6:	e008      	b.n	8002dca <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002db8:	f7fe fa60 	bl	800127c <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d901      	bls.n	8002dca <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e193      	b.n	80030f2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dca:	4b1b      	ldr	r3, [pc, #108]	; (8002e38 <HAL_RCC_OscConfig+0x274>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0302 	and.w	r3, r3, #2
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d1f0      	bne.n	8002db8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0308 	and.w	r3, r3, #8
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d036      	beq.n	8002e50 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	695b      	ldr	r3, [r3, #20]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d016      	beq.n	8002e18 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dea:	4b15      	ldr	r3, [pc, #84]	; (8002e40 <HAL_RCC_OscConfig+0x27c>)
 8002dec:	2201      	movs	r2, #1
 8002dee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002df0:	f7fe fa44 	bl	800127c <HAL_GetTick>
 8002df4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002df6:	e008      	b.n	8002e0a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002df8:	f7fe fa40 	bl	800127c <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d901      	bls.n	8002e0a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e173      	b.n	80030f2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e0a:	4b0b      	ldr	r3, [pc, #44]	; (8002e38 <HAL_RCC_OscConfig+0x274>)
 8002e0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e0e:	f003 0302 	and.w	r3, r3, #2
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d0f0      	beq.n	8002df8 <HAL_RCC_OscConfig+0x234>
 8002e16:	e01b      	b.n	8002e50 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e18:	4b09      	ldr	r3, [pc, #36]	; (8002e40 <HAL_RCC_OscConfig+0x27c>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e1e:	f7fe fa2d 	bl	800127c <HAL_GetTick>
 8002e22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e24:	e00e      	b.n	8002e44 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e26:	f7fe fa29 	bl	800127c <HAL_GetTick>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d907      	bls.n	8002e44 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	e15c      	b.n	80030f2 <HAL_RCC_OscConfig+0x52e>
 8002e38:	40023800 	.word	0x40023800
 8002e3c:	42470000 	.word	0x42470000
 8002e40:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e44:	4b8a      	ldr	r3, [pc, #552]	; (8003070 <HAL_RCC_OscConfig+0x4ac>)
 8002e46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e48:	f003 0302 	and.w	r3, r3, #2
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d1ea      	bne.n	8002e26 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 0304 	and.w	r3, r3, #4
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	f000 8097 	beq.w	8002f8c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e62:	4b83      	ldr	r3, [pc, #524]	; (8003070 <HAL_RCC_OscConfig+0x4ac>)
 8002e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d10f      	bne.n	8002e8e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e6e:	2300      	movs	r3, #0
 8002e70:	60bb      	str	r3, [r7, #8]
 8002e72:	4b7f      	ldr	r3, [pc, #508]	; (8003070 <HAL_RCC_OscConfig+0x4ac>)
 8002e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e76:	4a7e      	ldr	r2, [pc, #504]	; (8003070 <HAL_RCC_OscConfig+0x4ac>)
 8002e78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e7c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e7e:	4b7c      	ldr	r3, [pc, #496]	; (8003070 <HAL_RCC_OscConfig+0x4ac>)
 8002e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e86:	60bb      	str	r3, [r7, #8]
 8002e88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e8e:	4b79      	ldr	r3, [pc, #484]	; (8003074 <HAL_RCC_OscConfig+0x4b0>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d118      	bne.n	8002ecc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e9a:	4b76      	ldr	r3, [pc, #472]	; (8003074 <HAL_RCC_OscConfig+0x4b0>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a75      	ldr	r2, [pc, #468]	; (8003074 <HAL_RCC_OscConfig+0x4b0>)
 8002ea0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ea4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ea6:	f7fe f9e9 	bl	800127c <HAL_GetTick>
 8002eaa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eac:	e008      	b.n	8002ec0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eae:	f7fe f9e5 	bl	800127c <HAL_GetTick>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d901      	bls.n	8002ec0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	e118      	b.n	80030f2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ec0:	4b6c      	ldr	r3, [pc, #432]	; (8003074 <HAL_RCC_OscConfig+0x4b0>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d0f0      	beq.n	8002eae <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d106      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x31e>
 8002ed4:	4b66      	ldr	r3, [pc, #408]	; (8003070 <HAL_RCC_OscConfig+0x4ac>)
 8002ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed8:	4a65      	ldr	r2, [pc, #404]	; (8003070 <HAL_RCC_OscConfig+0x4ac>)
 8002eda:	f043 0301 	orr.w	r3, r3, #1
 8002ede:	6713      	str	r3, [r2, #112]	; 0x70
 8002ee0:	e01c      	b.n	8002f1c <HAL_RCC_OscConfig+0x358>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	2b05      	cmp	r3, #5
 8002ee8:	d10c      	bne.n	8002f04 <HAL_RCC_OscConfig+0x340>
 8002eea:	4b61      	ldr	r3, [pc, #388]	; (8003070 <HAL_RCC_OscConfig+0x4ac>)
 8002eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eee:	4a60      	ldr	r2, [pc, #384]	; (8003070 <HAL_RCC_OscConfig+0x4ac>)
 8002ef0:	f043 0304 	orr.w	r3, r3, #4
 8002ef4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ef6:	4b5e      	ldr	r3, [pc, #376]	; (8003070 <HAL_RCC_OscConfig+0x4ac>)
 8002ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002efa:	4a5d      	ldr	r2, [pc, #372]	; (8003070 <HAL_RCC_OscConfig+0x4ac>)
 8002efc:	f043 0301 	orr.w	r3, r3, #1
 8002f00:	6713      	str	r3, [r2, #112]	; 0x70
 8002f02:	e00b      	b.n	8002f1c <HAL_RCC_OscConfig+0x358>
 8002f04:	4b5a      	ldr	r3, [pc, #360]	; (8003070 <HAL_RCC_OscConfig+0x4ac>)
 8002f06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f08:	4a59      	ldr	r2, [pc, #356]	; (8003070 <HAL_RCC_OscConfig+0x4ac>)
 8002f0a:	f023 0301 	bic.w	r3, r3, #1
 8002f0e:	6713      	str	r3, [r2, #112]	; 0x70
 8002f10:	4b57      	ldr	r3, [pc, #348]	; (8003070 <HAL_RCC_OscConfig+0x4ac>)
 8002f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f14:	4a56      	ldr	r2, [pc, #344]	; (8003070 <HAL_RCC_OscConfig+0x4ac>)
 8002f16:	f023 0304 	bic.w	r3, r3, #4
 8002f1a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d015      	beq.n	8002f50 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f24:	f7fe f9aa 	bl	800127c <HAL_GetTick>
 8002f28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f2a:	e00a      	b.n	8002f42 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f2c:	f7fe f9a6 	bl	800127c <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d901      	bls.n	8002f42 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e0d7      	b.n	80030f2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f42:	4b4b      	ldr	r3, [pc, #300]	; (8003070 <HAL_RCC_OscConfig+0x4ac>)
 8002f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f46:	f003 0302 	and.w	r3, r3, #2
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d0ee      	beq.n	8002f2c <HAL_RCC_OscConfig+0x368>
 8002f4e:	e014      	b.n	8002f7a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f50:	f7fe f994 	bl	800127c <HAL_GetTick>
 8002f54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f56:	e00a      	b.n	8002f6e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f58:	f7fe f990 	bl	800127c <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d901      	bls.n	8002f6e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e0c1      	b.n	80030f2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f6e:	4b40      	ldr	r3, [pc, #256]	; (8003070 <HAL_RCC_OscConfig+0x4ac>)
 8002f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f72:	f003 0302 	and.w	r3, r3, #2
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d1ee      	bne.n	8002f58 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f7a:	7dfb      	ldrb	r3, [r7, #23]
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d105      	bne.n	8002f8c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f80:	4b3b      	ldr	r3, [pc, #236]	; (8003070 <HAL_RCC_OscConfig+0x4ac>)
 8002f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f84:	4a3a      	ldr	r2, [pc, #232]	; (8003070 <HAL_RCC_OscConfig+0x4ac>)
 8002f86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f8a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	699b      	ldr	r3, [r3, #24]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	f000 80ad 	beq.w	80030f0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f96:	4b36      	ldr	r3, [pc, #216]	; (8003070 <HAL_RCC_OscConfig+0x4ac>)
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	f003 030c 	and.w	r3, r3, #12
 8002f9e:	2b08      	cmp	r3, #8
 8002fa0:	d060      	beq.n	8003064 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	699b      	ldr	r3, [r3, #24]
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d145      	bne.n	8003036 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002faa:	4b33      	ldr	r3, [pc, #204]	; (8003078 <HAL_RCC_OscConfig+0x4b4>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fb0:	f7fe f964 	bl	800127c <HAL_GetTick>
 8002fb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fb6:	e008      	b.n	8002fca <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fb8:	f7fe f960 	bl	800127c <HAL_GetTick>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d901      	bls.n	8002fca <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e093      	b.n	80030f2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fca:	4b29      	ldr	r3, [pc, #164]	; (8003070 <HAL_RCC_OscConfig+0x4ac>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d1f0      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	69da      	ldr	r2, [r3, #28]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6a1b      	ldr	r3, [r3, #32]
 8002fde:	431a      	orrs	r2, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe4:	019b      	lsls	r3, r3, #6
 8002fe6:	431a      	orrs	r2, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fec:	085b      	lsrs	r3, r3, #1
 8002fee:	3b01      	subs	r3, #1
 8002ff0:	041b      	lsls	r3, r3, #16
 8002ff2:	431a      	orrs	r2, r3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff8:	061b      	lsls	r3, r3, #24
 8002ffa:	431a      	orrs	r2, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003000:	071b      	lsls	r3, r3, #28
 8003002:	491b      	ldr	r1, [pc, #108]	; (8003070 <HAL_RCC_OscConfig+0x4ac>)
 8003004:	4313      	orrs	r3, r2
 8003006:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003008:	4b1b      	ldr	r3, [pc, #108]	; (8003078 <HAL_RCC_OscConfig+0x4b4>)
 800300a:	2201      	movs	r2, #1
 800300c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800300e:	f7fe f935 	bl	800127c <HAL_GetTick>
 8003012:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003014:	e008      	b.n	8003028 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003016:	f7fe f931 	bl	800127c <HAL_GetTick>
 800301a:	4602      	mov	r2, r0
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	2b02      	cmp	r3, #2
 8003022:	d901      	bls.n	8003028 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003024:	2303      	movs	r3, #3
 8003026:	e064      	b.n	80030f2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003028:	4b11      	ldr	r3, [pc, #68]	; (8003070 <HAL_RCC_OscConfig+0x4ac>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d0f0      	beq.n	8003016 <HAL_RCC_OscConfig+0x452>
 8003034:	e05c      	b.n	80030f0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003036:	4b10      	ldr	r3, [pc, #64]	; (8003078 <HAL_RCC_OscConfig+0x4b4>)
 8003038:	2200      	movs	r2, #0
 800303a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800303c:	f7fe f91e 	bl	800127c <HAL_GetTick>
 8003040:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003042:	e008      	b.n	8003056 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003044:	f7fe f91a 	bl	800127c <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	2b02      	cmp	r3, #2
 8003050:	d901      	bls.n	8003056 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e04d      	b.n	80030f2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003056:	4b06      	ldr	r3, [pc, #24]	; (8003070 <HAL_RCC_OscConfig+0x4ac>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d1f0      	bne.n	8003044 <HAL_RCC_OscConfig+0x480>
 8003062:	e045      	b.n	80030f0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	699b      	ldr	r3, [r3, #24]
 8003068:	2b01      	cmp	r3, #1
 800306a:	d107      	bne.n	800307c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e040      	b.n	80030f2 <HAL_RCC_OscConfig+0x52e>
 8003070:	40023800 	.word	0x40023800
 8003074:	40007000 	.word	0x40007000
 8003078:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800307c:	4b1f      	ldr	r3, [pc, #124]	; (80030fc <HAL_RCC_OscConfig+0x538>)
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	699b      	ldr	r3, [r3, #24]
 8003086:	2b01      	cmp	r3, #1
 8003088:	d030      	beq.n	80030ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003094:	429a      	cmp	r2, r3
 8003096:	d129      	bne.n	80030ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d122      	bne.n	80030ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030a6:	68fa      	ldr	r2, [r7, #12]
 80030a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80030ac:	4013      	ands	r3, r2
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80030b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d119      	bne.n	80030ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c2:	085b      	lsrs	r3, r3, #1
 80030c4:	3b01      	subs	r3, #1
 80030c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d10f      	bne.n	80030ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030d8:	429a      	cmp	r2, r3
 80030da:	d107      	bne.n	80030ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d001      	beq.n	80030f0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e000      	b.n	80030f2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80030f0:	2300      	movs	r3, #0
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3718      	adds	r7, #24
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	40023800 	.word	0x40023800

08003100 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b082      	sub	sp, #8
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d101      	bne.n	8003112 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e03f      	b.n	8003192 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003118:	b2db      	uxtb	r3, r3
 800311a:	2b00      	cmp	r3, #0
 800311c:	d106      	bne.n	800312c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f7fd fecc 	bl	8000ec4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2224      	movs	r2, #36	; 0x24
 8003130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	68da      	ldr	r2, [r3, #12]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003142:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f000 fc7b 	bl	8003a40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	691a      	ldr	r2, [r3, #16]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003158:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	695a      	ldr	r2, [r3, #20]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003168:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	68da      	ldr	r2, [r3, #12]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003178:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2220      	movs	r2, #32
 8003184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2220      	movs	r2, #32
 800318c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003190:	2300      	movs	r3, #0
}
 8003192:	4618      	mov	r0, r3
 8003194:	3708      	adds	r7, #8
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
	...

0800319c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b0ba      	sub	sp, #232	; 0xe8
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	695b      	ldr	r3, [r3, #20]
 80031be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80031c2:	2300      	movs	r3, #0
 80031c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80031c8:	2300      	movs	r3, #0
 80031ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80031ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031d2:	f003 030f 	and.w	r3, r3, #15
 80031d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80031da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d10f      	bne.n	8003202 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80031e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031e6:	f003 0320 	and.w	r3, r3, #32
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d009      	beq.n	8003202 <HAL_UART_IRQHandler+0x66>
 80031ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031f2:	f003 0320 	and.w	r3, r3, #32
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d003      	beq.n	8003202 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f000 fb65 	bl	80038ca <UART_Receive_IT>
      return;
 8003200:	e256      	b.n	80036b0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003202:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003206:	2b00      	cmp	r3, #0
 8003208:	f000 80de 	beq.w	80033c8 <HAL_UART_IRQHandler+0x22c>
 800320c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003210:	f003 0301 	and.w	r3, r3, #1
 8003214:	2b00      	cmp	r3, #0
 8003216:	d106      	bne.n	8003226 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003218:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800321c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003220:	2b00      	cmp	r3, #0
 8003222:	f000 80d1 	beq.w	80033c8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003226:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800322a:	f003 0301 	and.w	r3, r3, #1
 800322e:	2b00      	cmp	r3, #0
 8003230:	d00b      	beq.n	800324a <HAL_UART_IRQHandler+0xae>
 8003232:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800323a:	2b00      	cmp	r3, #0
 800323c:	d005      	beq.n	800324a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003242:	f043 0201 	orr.w	r2, r3, #1
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800324a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800324e:	f003 0304 	and.w	r3, r3, #4
 8003252:	2b00      	cmp	r3, #0
 8003254:	d00b      	beq.n	800326e <HAL_UART_IRQHandler+0xd2>
 8003256:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800325a:	f003 0301 	and.w	r3, r3, #1
 800325e:	2b00      	cmp	r3, #0
 8003260:	d005      	beq.n	800326e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003266:	f043 0202 	orr.w	r2, r3, #2
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800326e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003272:	f003 0302 	and.w	r3, r3, #2
 8003276:	2b00      	cmp	r3, #0
 8003278:	d00b      	beq.n	8003292 <HAL_UART_IRQHandler+0xf6>
 800327a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800327e:	f003 0301 	and.w	r3, r3, #1
 8003282:	2b00      	cmp	r3, #0
 8003284:	d005      	beq.n	8003292 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328a:	f043 0204 	orr.w	r2, r3, #4
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003292:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003296:	f003 0308 	and.w	r3, r3, #8
 800329a:	2b00      	cmp	r3, #0
 800329c:	d011      	beq.n	80032c2 <HAL_UART_IRQHandler+0x126>
 800329e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032a2:	f003 0320 	and.w	r3, r3, #32
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d105      	bne.n	80032b6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80032aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80032ae:	f003 0301 	and.w	r3, r3, #1
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d005      	beq.n	80032c2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ba:	f043 0208 	orr.w	r2, r3, #8
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	f000 81ed 	beq.w	80036a6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80032cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032d0:	f003 0320 	and.w	r3, r3, #32
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d008      	beq.n	80032ea <HAL_UART_IRQHandler+0x14e>
 80032d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032dc:	f003 0320 	and.w	r3, r3, #32
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d002      	beq.n	80032ea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f000 faf0 	bl	80038ca <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	695b      	ldr	r3, [r3, #20]
 80032f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032f4:	2b40      	cmp	r3, #64	; 0x40
 80032f6:	bf0c      	ite	eq
 80032f8:	2301      	moveq	r3, #1
 80032fa:	2300      	movne	r3, #0
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003306:	f003 0308 	and.w	r3, r3, #8
 800330a:	2b00      	cmp	r3, #0
 800330c:	d103      	bne.n	8003316 <HAL_UART_IRQHandler+0x17a>
 800330e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003312:	2b00      	cmp	r3, #0
 8003314:	d04f      	beq.n	80033b6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f000 f9f8 	bl	800370c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	695b      	ldr	r3, [r3, #20]
 8003322:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003326:	2b40      	cmp	r3, #64	; 0x40
 8003328:	d141      	bne.n	80033ae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	3314      	adds	r3, #20
 8003330:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003334:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003338:	e853 3f00 	ldrex	r3, [r3]
 800333c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003340:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003344:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003348:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	3314      	adds	r3, #20
 8003352:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003356:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800335a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800335e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003362:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003366:	e841 2300 	strex	r3, r2, [r1]
 800336a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800336e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d1d9      	bne.n	800332a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800337a:	2b00      	cmp	r3, #0
 800337c:	d013      	beq.n	80033a6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003382:	4a7d      	ldr	r2, [pc, #500]	; (8003578 <HAL_UART_IRQHandler+0x3dc>)
 8003384:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800338a:	4618      	mov	r0, r3
 800338c:	f7fe feaf 	bl	80020ee <HAL_DMA_Abort_IT>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d016      	beq.n	80033c4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800339a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80033a0:	4610      	mov	r0, r2
 80033a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033a4:	e00e      	b.n	80033c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f000 f99a 	bl	80036e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033ac:	e00a      	b.n	80033c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f000 f996 	bl	80036e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033b4:	e006      	b.n	80033c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f000 f992 	bl	80036e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80033c2:	e170      	b.n	80036a6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033c4:	bf00      	nop
    return;
 80033c6:	e16e      	b.n	80036a6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	f040 814a 	bne.w	8003666 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80033d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033d6:	f003 0310 	and.w	r3, r3, #16
 80033da:	2b00      	cmp	r3, #0
 80033dc:	f000 8143 	beq.w	8003666 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80033e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033e4:	f003 0310 	and.w	r3, r3, #16
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	f000 813c 	beq.w	8003666 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80033ee:	2300      	movs	r3, #0
 80033f0:	60bb      	str	r3, [r7, #8]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	60bb      	str	r3, [r7, #8]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	60bb      	str	r3, [r7, #8]
 8003402:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	695b      	ldr	r3, [r3, #20]
 800340a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800340e:	2b40      	cmp	r3, #64	; 0x40
 8003410:	f040 80b4 	bne.w	800357c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003420:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003424:	2b00      	cmp	r3, #0
 8003426:	f000 8140 	beq.w	80036aa <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800342e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003432:	429a      	cmp	r2, r3
 8003434:	f080 8139 	bcs.w	80036aa <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800343e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003444:	69db      	ldr	r3, [r3, #28]
 8003446:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800344a:	f000 8088 	beq.w	800355e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	330c      	adds	r3, #12
 8003454:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003458:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800345c:	e853 3f00 	ldrex	r3, [r3]
 8003460:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003464:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003468:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800346c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	330c      	adds	r3, #12
 8003476:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800347a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800347e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003482:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003486:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800348a:	e841 2300 	strex	r3, r2, [r1]
 800348e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003492:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003496:	2b00      	cmp	r3, #0
 8003498:	d1d9      	bne.n	800344e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	3314      	adds	r3, #20
 80034a0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034a4:	e853 3f00 	ldrex	r3, [r3]
 80034a8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80034aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80034ac:	f023 0301 	bic.w	r3, r3, #1
 80034b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	3314      	adds	r3, #20
 80034ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80034be:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80034c2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034c4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80034c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80034ca:	e841 2300 	strex	r3, r2, [r1]
 80034ce:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80034d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d1e1      	bne.n	800349a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	3314      	adds	r3, #20
 80034dc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80034e0:	e853 3f00 	ldrex	r3, [r3]
 80034e4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80034e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	3314      	adds	r3, #20
 80034f6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80034fa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80034fc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034fe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003500:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003502:	e841 2300 	strex	r3, r2, [r1]
 8003506:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003508:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800350a:	2b00      	cmp	r3, #0
 800350c:	d1e3      	bne.n	80034d6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2220      	movs	r2, #32
 8003512:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	330c      	adds	r3, #12
 8003522:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003524:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003526:	e853 3f00 	ldrex	r3, [r3]
 800352a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800352c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800352e:	f023 0310 	bic.w	r3, r3, #16
 8003532:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	330c      	adds	r3, #12
 800353c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003540:	65ba      	str	r2, [r7, #88]	; 0x58
 8003542:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003544:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003546:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003548:	e841 2300 	strex	r3, r2, [r1]
 800354c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800354e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003550:	2b00      	cmp	r3, #0
 8003552:	d1e3      	bne.n	800351c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003558:	4618      	mov	r0, r3
 800355a:	f7fe fd58 	bl	800200e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003566:	b29b      	uxth	r3, r3
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	b29b      	uxth	r3, r3
 800356c:	4619      	mov	r1, r3
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f000 f8c0 	bl	80036f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003574:	e099      	b.n	80036aa <HAL_UART_IRQHandler+0x50e>
 8003576:	bf00      	nop
 8003578:	080037d3 	.word	0x080037d3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003584:	b29b      	uxth	r3, r3
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003590:	b29b      	uxth	r3, r3
 8003592:	2b00      	cmp	r3, #0
 8003594:	f000 808b 	beq.w	80036ae <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003598:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800359c:	2b00      	cmp	r3, #0
 800359e:	f000 8086 	beq.w	80036ae <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	330c      	adds	r3, #12
 80035a8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035ac:	e853 3f00 	ldrex	r3, [r3]
 80035b0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80035b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80035b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	330c      	adds	r3, #12
 80035c2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80035c6:	647a      	str	r2, [r7, #68]	; 0x44
 80035c8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80035cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80035ce:	e841 2300 	strex	r3, r2, [r1]
 80035d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80035d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d1e3      	bne.n	80035a2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	3314      	adds	r3, #20
 80035e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e4:	e853 3f00 	ldrex	r3, [r3]
 80035e8:	623b      	str	r3, [r7, #32]
   return(result);
 80035ea:	6a3b      	ldr	r3, [r7, #32]
 80035ec:	f023 0301 	bic.w	r3, r3, #1
 80035f0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	3314      	adds	r3, #20
 80035fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80035fe:	633a      	str	r2, [r7, #48]	; 0x30
 8003600:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003602:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003604:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003606:	e841 2300 	strex	r3, r2, [r1]
 800360a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800360c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800360e:	2b00      	cmp	r3, #0
 8003610:	d1e3      	bne.n	80035da <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2220      	movs	r2, #32
 8003616:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	330c      	adds	r3, #12
 8003626:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	e853 3f00 	ldrex	r3, [r3]
 800362e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f023 0310 	bic.w	r3, r3, #16
 8003636:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	330c      	adds	r3, #12
 8003640:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003644:	61fa      	str	r2, [r7, #28]
 8003646:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003648:	69b9      	ldr	r1, [r7, #24]
 800364a:	69fa      	ldr	r2, [r7, #28]
 800364c:	e841 2300 	strex	r3, r2, [r1]
 8003650:	617b      	str	r3, [r7, #20]
   return(result);
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d1e3      	bne.n	8003620 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003658:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800365c:	4619      	mov	r1, r3
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f000 f848 	bl	80036f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003664:	e023      	b.n	80036ae <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003666:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800366a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800366e:	2b00      	cmp	r3, #0
 8003670:	d009      	beq.n	8003686 <HAL_UART_IRQHandler+0x4ea>
 8003672:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800367a:	2b00      	cmp	r3, #0
 800367c:	d003      	beq.n	8003686 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f000 f8bb 	bl	80037fa <UART_Transmit_IT>
    return;
 8003684:	e014      	b.n	80036b0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003686:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800368a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800368e:	2b00      	cmp	r3, #0
 8003690:	d00e      	beq.n	80036b0 <HAL_UART_IRQHandler+0x514>
 8003692:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800369a:	2b00      	cmp	r3, #0
 800369c:	d008      	beq.n	80036b0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f000 f8fb 	bl	800389a <UART_EndTransmit_IT>
    return;
 80036a4:	e004      	b.n	80036b0 <HAL_UART_IRQHandler+0x514>
    return;
 80036a6:	bf00      	nop
 80036a8:	e002      	b.n	80036b0 <HAL_UART_IRQHandler+0x514>
      return;
 80036aa:	bf00      	nop
 80036ac:	e000      	b.n	80036b0 <HAL_UART_IRQHandler+0x514>
      return;
 80036ae:	bf00      	nop
  }
}
 80036b0:	37e8      	adds	r7, #232	; 0xe8
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop

080036b8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80036c0:	bf00      	nop
 80036c2:	370c      	adds	r7, #12
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr

080036cc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80036d4:	bf00      	nop
 80036d6:	370c      	adds	r7, #12
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr

080036e0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80036e8:	bf00      	nop
 80036ea:	370c      	adds	r7, #12
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr

080036f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	460b      	mov	r3, r1
 80036fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003700:	bf00      	nop
 8003702:	370c      	adds	r7, #12
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr

0800370c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800370c:	b480      	push	{r7}
 800370e:	b095      	sub	sp, #84	; 0x54
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	330c      	adds	r3, #12
 800371a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800371c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800371e:	e853 3f00 	ldrex	r3, [r3]
 8003722:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003726:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800372a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	330c      	adds	r3, #12
 8003732:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003734:	643a      	str	r2, [r7, #64]	; 0x40
 8003736:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003738:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800373a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800373c:	e841 2300 	strex	r3, r2, [r1]
 8003740:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003744:	2b00      	cmp	r3, #0
 8003746:	d1e5      	bne.n	8003714 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	3314      	adds	r3, #20
 800374e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003750:	6a3b      	ldr	r3, [r7, #32]
 8003752:	e853 3f00 	ldrex	r3, [r3]
 8003756:	61fb      	str	r3, [r7, #28]
   return(result);
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	f023 0301 	bic.w	r3, r3, #1
 800375e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	3314      	adds	r3, #20
 8003766:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003768:	62fa      	str	r2, [r7, #44]	; 0x2c
 800376a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800376c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800376e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003770:	e841 2300 	strex	r3, r2, [r1]
 8003774:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003778:	2b00      	cmp	r3, #0
 800377a:	d1e5      	bne.n	8003748 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003780:	2b01      	cmp	r3, #1
 8003782:	d119      	bne.n	80037b8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	330c      	adds	r3, #12
 800378a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	e853 3f00 	ldrex	r3, [r3]
 8003792:	60bb      	str	r3, [r7, #8]
   return(result);
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	f023 0310 	bic.w	r3, r3, #16
 800379a:	647b      	str	r3, [r7, #68]	; 0x44
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	330c      	adds	r3, #12
 80037a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80037a4:	61ba      	str	r2, [r7, #24]
 80037a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037a8:	6979      	ldr	r1, [r7, #20]
 80037aa:	69ba      	ldr	r2, [r7, #24]
 80037ac:	e841 2300 	strex	r3, r2, [r1]
 80037b0:	613b      	str	r3, [r7, #16]
   return(result);
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d1e5      	bne.n	8003784 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2220      	movs	r2, #32
 80037bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2200      	movs	r2, #0
 80037c4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80037c6:	bf00      	nop
 80037c8:	3754      	adds	r7, #84	; 0x54
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr

080037d2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80037d2:	b580      	push	{r7, lr}
 80037d4:	b084      	sub	sp, #16
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037de:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2200      	movs	r2, #0
 80037e4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2200      	movs	r2, #0
 80037ea:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80037ec:	68f8      	ldr	r0, [r7, #12]
 80037ee:	f7ff ff77 	bl	80036e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80037f2:	bf00      	nop
 80037f4:	3710      	adds	r7, #16
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}

080037fa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80037fa:	b480      	push	{r7}
 80037fc:	b085      	sub	sp, #20
 80037fe:	af00      	add	r7, sp, #0
 8003800:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003808:	b2db      	uxtb	r3, r3
 800380a:	2b21      	cmp	r3, #33	; 0x21
 800380c:	d13e      	bne.n	800388c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003816:	d114      	bne.n	8003842 <UART_Transmit_IT+0x48>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	691b      	ldr	r3, [r3, #16]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d110      	bne.n	8003842 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6a1b      	ldr	r3, [r3, #32]
 8003824:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	881b      	ldrh	r3, [r3, #0]
 800382a:	461a      	mov	r2, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003834:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a1b      	ldr	r3, [r3, #32]
 800383a:	1c9a      	adds	r2, r3, #2
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	621a      	str	r2, [r3, #32]
 8003840:	e008      	b.n	8003854 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6a1b      	ldr	r3, [r3, #32]
 8003846:	1c59      	adds	r1, r3, #1
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	6211      	str	r1, [r2, #32]
 800384c:	781a      	ldrb	r2, [r3, #0]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003858:	b29b      	uxth	r3, r3
 800385a:	3b01      	subs	r3, #1
 800385c:	b29b      	uxth	r3, r3
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	4619      	mov	r1, r3
 8003862:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003864:	2b00      	cmp	r3, #0
 8003866:	d10f      	bne.n	8003888 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	68da      	ldr	r2, [r3, #12]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003876:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	68da      	ldr	r2, [r3, #12]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003886:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003888:	2300      	movs	r3, #0
 800388a:	e000      	b.n	800388e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800388c:	2302      	movs	r3, #2
  }
}
 800388e:	4618      	mov	r0, r3
 8003890:	3714      	adds	r7, #20
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr

0800389a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800389a:	b580      	push	{r7, lr}
 800389c:	b082      	sub	sp, #8
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	68da      	ldr	r2, [r3, #12]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038b0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2220      	movs	r2, #32
 80038b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f7ff fefc 	bl	80036b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80038c0:	2300      	movs	r3, #0
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3708      	adds	r7, #8
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}

080038ca <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80038ca:	b580      	push	{r7, lr}
 80038cc:	b08c      	sub	sp, #48	; 0x30
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	2b22      	cmp	r3, #34	; 0x22
 80038dc:	f040 80ab 	bne.w	8003a36 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038e8:	d117      	bne.n	800391a <UART_Receive_IT+0x50>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	691b      	ldr	r3, [r3, #16]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d113      	bne.n	800391a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80038f2:	2300      	movs	r3, #0
 80038f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038fa:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	b29b      	uxth	r3, r3
 8003904:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003908:	b29a      	uxth	r2, r3
 800390a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800390c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003912:	1c9a      	adds	r2, r3, #2
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	629a      	str	r2, [r3, #40]	; 0x28
 8003918:	e026      	b.n	8003968 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800391e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003920:	2300      	movs	r3, #0
 8003922:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800392c:	d007      	beq.n	800393e <UART_Receive_IT+0x74>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d10a      	bne.n	800394c <UART_Receive_IT+0x82>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	691b      	ldr	r3, [r3, #16]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d106      	bne.n	800394c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	b2da      	uxtb	r2, r3
 8003946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003948:	701a      	strb	r2, [r3, #0]
 800394a:	e008      	b.n	800395e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	b2db      	uxtb	r3, r3
 8003954:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003958:	b2da      	uxtb	r2, r3
 800395a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800395c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003962:	1c5a      	adds	r2, r3, #1
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800396c:	b29b      	uxth	r3, r3
 800396e:	3b01      	subs	r3, #1
 8003970:	b29b      	uxth	r3, r3
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	4619      	mov	r1, r3
 8003976:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003978:	2b00      	cmp	r3, #0
 800397a:	d15a      	bne.n	8003a32 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	68da      	ldr	r2, [r3, #12]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f022 0220 	bic.w	r2, r2, #32
 800398a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	68da      	ldr	r2, [r3, #12]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800399a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	695a      	ldr	r2, [r3, #20]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f022 0201 	bic.w	r2, r2, #1
 80039aa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2220      	movs	r2, #32
 80039b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d135      	bne.n	8003a28 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2200      	movs	r2, #0
 80039c0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	330c      	adds	r3, #12
 80039c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	e853 3f00 	ldrex	r3, [r3]
 80039d0:	613b      	str	r3, [r7, #16]
   return(result);
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	f023 0310 	bic.w	r3, r3, #16
 80039d8:	627b      	str	r3, [r7, #36]	; 0x24
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	330c      	adds	r3, #12
 80039e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039e2:	623a      	str	r2, [r7, #32]
 80039e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039e6:	69f9      	ldr	r1, [r7, #28]
 80039e8:	6a3a      	ldr	r2, [r7, #32]
 80039ea:	e841 2300 	strex	r3, r2, [r1]
 80039ee:	61bb      	str	r3, [r7, #24]
   return(result);
 80039f0:	69bb      	ldr	r3, [r7, #24]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d1e5      	bne.n	80039c2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 0310 	and.w	r3, r3, #16
 8003a00:	2b10      	cmp	r3, #16
 8003a02:	d10a      	bne.n	8003a1a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a04:	2300      	movs	r3, #0
 8003a06:	60fb      	str	r3, [r7, #12]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	60fb      	str	r3, [r7, #12]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	60fb      	str	r3, [r7, #12]
 8003a18:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003a1e:	4619      	mov	r1, r3
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f7ff fe67 	bl	80036f4 <HAL_UARTEx_RxEventCallback>
 8003a26:	e002      	b.n	8003a2e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	f7ff fe4f 	bl	80036cc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	e002      	b.n	8003a38 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003a32:	2300      	movs	r3, #0
 8003a34:	e000      	b.n	8003a38 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003a36:	2302      	movs	r3, #2
  }
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3730      	adds	r7, #48	; 0x30
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a44:	b0c0      	sub	sp, #256	; 0x100
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	691b      	ldr	r3, [r3, #16]
 8003a54:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a5c:	68d9      	ldr	r1, [r3, #12]
 8003a5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	ea40 0301 	orr.w	r3, r0, r1
 8003a68:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003a6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a6e:	689a      	ldr	r2, [r3, #8]
 8003a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a74:	691b      	ldr	r3, [r3, #16]
 8003a76:	431a      	orrs	r2, r3
 8003a78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a7c:	695b      	ldr	r3, [r3, #20]
 8003a7e:	431a      	orrs	r2, r3
 8003a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a84:	69db      	ldr	r3, [r3, #28]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003a98:	f021 010c 	bic.w	r1, r1, #12
 8003a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003aa6:	430b      	orrs	r3, r1
 8003aa8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003aaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	695b      	ldr	r3, [r3, #20]
 8003ab2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003ab6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003aba:	6999      	ldr	r1, [r3, #24]
 8003abc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	ea40 0301 	orr.w	r3, r0, r1
 8003ac6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	4b8f      	ldr	r3, [pc, #572]	; (8003d0c <UART_SetConfig+0x2cc>)
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d005      	beq.n	8003ae0 <UART_SetConfig+0xa0>
 8003ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	4b8d      	ldr	r3, [pc, #564]	; (8003d10 <UART_SetConfig+0x2d0>)
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d104      	bne.n	8003aea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ae0:	f7fe fe2c 	bl	800273c <HAL_RCC_GetPCLK2Freq>
 8003ae4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003ae8:	e003      	b.n	8003af2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003aea:	f7fe fe13 	bl	8002714 <HAL_RCC_GetPCLK1Freq>
 8003aee:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003af2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003af6:	69db      	ldr	r3, [r3, #28]
 8003af8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003afc:	f040 810c 	bne.w	8003d18 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b04:	2200      	movs	r2, #0
 8003b06:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003b0a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003b0e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003b12:	4622      	mov	r2, r4
 8003b14:	462b      	mov	r3, r5
 8003b16:	1891      	adds	r1, r2, r2
 8003b18:	65b9      	str	r1, [r7, #88]	; 0x58
 8003b1a:	415b      	adcs	r3, r3
 8003b1c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b1e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003b22:	4621      	mov	r1, r4
 8003b24:	eb12 0801 	adds.w	r8, r2, r1
 8003b28:	4629      	mov	r1, r5
 8003b2a:	eb43 0901 	adc.w	r9, r3, r1
 8003b2e:	f04f 0200 	mov.w	r2, #0
 8003b32:	f04f 0300 	mov.w	r3, #0
 8003b36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b42:	4690      	mov	r8, r2
 8003b44:	4699      	mov	r9, r3
 8003b46:	4623      	mov	r3, r4
 8003b48:	eb18 0303 	adds.w	r3, r8, r3
 8003b4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003b50:	462b      	mov	r3, r5
 8003b52:	eb49 0303 	adc.w	r3, r9, r3
 8003b56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003b5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003b66:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003b6a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003b6e:	460b      	mov	r3, r1
 8003b70:	18db      	adds	r3, r3, r3
 8003b72:	653b      	str	r3, [r7, #80]	; 0x50
 8003b74:	4613      	mov	r3, r2
 8003b76:	eb42 0303 	adc.w	r3, r2, r3
 8003b7a:	657b      	str	r3, [r7, #84]	; 0x54
 8003b7c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003b80:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003b84:	f7fc fb3e 	bl	8000204 <__aeabi_uldivmod>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	460b      	mov	r3, r1
 8003b8c:	4b61      	ldr	r3, [pc, #388]	; (8003d14 <UART_SetConfig+0x2d4>)
 8003b8e:	fba3 2302 	umull	r2, r3, r3, r2
 8003b92:	095b      	lsrs	r3, r3, #5
 8003b94:	011c      	lsls	r4, r3, #4
 8003b96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003ba0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003ba4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003ba8:	4642      	mov	r2, r8
 8003baa:	464b      	mov	r3, r9
 8003bac:	1891      	adds	r1, r2, r2
 8003bae:	64b9      	str	r1, [r7, #72]	; 0x48
 8003bb0:	415b      	adcs	r3, r3
 8003bb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bb4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003bb8:	4641      	mov	r1, r8
 8003bba:	eb12 0a01 	adds.w	sl, r2, r1
 8003bbe:	4649      	mov	r1, r9
 8003bc0:	eb43 0b01 	adc.w	fp, r3, r1
 8003bc4:	f04f 0200 	mov.w	r2, #0
 8003bc8:	f04f 0300 	mov.w	r3, #0
 8003bcc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003bd0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003bd4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003bd8:	4692      	mov	sl, r2
 8003bda:	469b      	mov	fp, r3
 8003bdc:	4643      	mov	r3, r8
 8003bde:	eb1a 0303 	adds.w	r3, sl, r3
 8003be2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003be6:	464b      	mov	r3, r9
 8003be8:	eb4b 0303 	adc.w	r3, fp, r3
 8003bec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003bfc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003c00:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003c04:	460b      	mov	r3, r1
 8003c06:	18db      	adds	r3, r3, r3
 8003c08:	643b      	str	r3, [r7, #64]	; 0x40
 8003c0a:	4613      	mov	r3, r2
 8003c0c:	eb42 0303 	adc.w	r3, r2, r3
 8003c10:	647b      	str	r3, [r7, #68]	; 0x44
 8003c12:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003c16:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003c1a:	f7fc faf3 	bl	8000204 <__aeabi_uldivmod>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	460b      	mov	r3, r1
 8003c22:	4611      	mov	r1, r2
 8003c24:	4b3b      	ldr	r3, [pc, #236]	; (8003d14 <UART_SetConfig+0x2d4>)
 8003c26:	fba3 2301 	umull	r2, r3, r3, r1
 8003c2a:	095b      	lsrs	r3, r3, #5
 8003c2c:	2264      	movs	r2, #100	; 0x64
 8003c2e:	fb02 f303 	mul.w	r3, r2, r3
 8003c32:	1acb      	subs	r3, r1, r3
 8003c34:	00db      	lsls	r3, r3, #3
 8003c36:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003c3a:	4b36      	ldr	r3, [pc, #216]	; (8003d14 <UART_SetConfig+0x2d4>)
 8003c3c:	fba3 2302 	umull	r2, r3, r3, r2
 8003c40:	095b      	lsrs	r3, r3, #5
 8003c42:	005b      	lsls	r3, r3, #1
 8003c44:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003c48:	441c      	add	r4, r3
 8003c4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003c54:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003c58:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003c5c:	4642      	mov	r2, r8
 8003c5e:	464b      	mov	r3, r9
 8003c60:	1891      	adds	r1, r2, r2
 8003c62:	63b9      	str	r1, [r7, #56]	; 0x38
 8003c64:	415b      	adcs	r3, r3
 8003c66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c68:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003c6c:	4641      	mov	r1, r8
 8003c6e:	1851      	adds	r1, r2, r1
 8003c70:	6339      	str	r1, [r7, #48]	; 0x30
 8003c72:	4649      	mov	r1, r9
 8003c74:	414b      	adcs	r3, r1
 8003c76:	637b      	str	r3, [r7, #52]	; 0x34
 8003c78:	f04f 0200 	mov.w	r2, #0
 8003c7c:	f04f 0300 	mov.w	r3, #0
 8003c80:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003c84:	4659      	mov	r1, fp
 8003c86:	00cb      	lsls	r3, r1, #3
 8003c88:	4651      	mov	r1, sl
 8003c8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c8e:	4651      	mov	r1, sl
 8003c90:	00ca      	lsls	r2, r1, #3
 8003c92:	4610      	mov	r0, r2
 8003c94:	4619      	mov	r1, r3
 8003c96:	4603      	mov	r3, r0
 8003c98:	4642      	mov	r2, r8
 8003c9a:	189b      	adds	r3, r3, r2
 8003c9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003ca0:	464b      	mov	r3, r9
 8003ca2:	460a      	mov	r2, r1
 8003ca4:	eb42 0303 	adc.w	r3, r2, r3
 8003ca8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003cac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003cb8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003cbc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003cc0:	460b      	mov	r3, r1
 8003cc2:	18db      	adds	r3, r3, r3
 8003cc4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cc6:	4613      	mov	r3, r2
 8003cc8:	eb42 0303 	adc.w	r3, r2, r3
 8003ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003cd2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003cd6:	f7fc fa95 	bl	8000204 <__aeabi_uldivmod>
 8003cda:	4602      	mov	r2, r0
 8003cdc:	460b      	mov	r3, r1
 8003cde:	4b0d      	ldr	r3, [pc, #52]	; (8003d14 <UART_SetConfig+0x2d4>)
 8003ce0:	fba3 1302 	umull	r1, r3, r3, r2
 8003ce4:	095b      	lsrs	r3, r3, #5
 8003ce6:	2164      	movs	r1, #100	; 0x64
 8003ce8:	fb01 f303 	mul.w	r3, r1, r3
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	00db      	lsls	r3, r3, #3
 8003cf0:	3332      	adds	r3, #50	; 0x32
 8003cf2:	4a08      	ldr	r2, [pc, #32]	; (8003d14 <UART_SetConfig+0x2d4>)
 8003cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8003cf8:	095b      	lsrs	r3, r3, #5
 8003cfa:	f003 0207 	and.w	r2, r3, #7
 8003cfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4422      	add	r2, r4
 8003d06:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003d08:	e105      	b.n	8003f16 <UART_SetConfig+0x4d6>
 8003d0a:	bf00      	nop
 8003d0c:	40011000 	.word	0x40011000
 8003d10:	40011400 	.word	0x40011400
 8003d14:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003d22:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003d26:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003d2a:	4642      	mov	r2, r8
 8003d2c:	464b      	mov	r3, r9
 8003d2e:	1891      	adds	r1, r2, r2
 8003d30:	6239      	str	r1, [r7, #32]
 8003d32:	415b      	adcs	r3, r3
 8003d34:	627b      	str	r3, [r7, #36]	; 0x24
 8003d36:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003d3a:	4641      	mov	r1, r8
 8003d3c:	1854      	adds	r4, r2, r1
 8003d3e:	4649      	mov	r1, r9
 8003d40:	eb43 0501 	adc.w	r5, r3, r1
 8003d44:	f04f 0200 	mov.w	r2, #0
 8003d48:	f04f 0300 	mov.w	r3, #0
 8003d4c:	00eb      	lsls	r3, r5, #3
 8003d4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d52:	00e2      	lsls	r2, r4, #3
 8003d54:	4614      	mov	r4, r2
 8003d56:	461d      	mov	r5, r3
 8003d58:	4643      	mov	r3, r8
 8003d5a:	18e3      	adds	r3, r4, r3
 8003d5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003d60:	464b      	mov	r3, r9
 8003d62:	eb45 0303 	adc.w	r3, r5, r3
 8003d66:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003d6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003d76:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003d7a:	f04f 0200 	mov.w	r2, #0
 8003d7e:	f04f 0300 	mov.w	r3, #0
 8003d82:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003d86:	4629      	mov	r1, r5
 8003d88:	008b      	lsls	r3, r1, #2
 8003d8a:	4621      	mov	r1, r4
 8003d8c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d90:	4621      	mov	r1, r4
 8003d92:	008a      	lsls	r2, r1, #2
 8003d94:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003d98:	f7fc fa34 	bl	8000204 <__aeabi_uldivmod>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	460b      	mov	r3, r1
 8003da0:	4b60      	ldr	r3, [pc, #384]	; (8003f24 <UART_SetConfig+0x4e4>)
 8003da2:	fba3 2302 	umull	r2, r3, r3, r2
 8003da6:	095b      	lsrs	r3, r3, #5
 8003da8:	011c      	lsls	r4, r3, #4
 8003daa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003dae:	2200      	movs	r2, #0
 8003db0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003db4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003db8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003dbc:	4642      	mov	r2, r8
 8003dbe:	464b      	mov	r3, r9
 8003dc0:	1891      	adds	r1, r2, r2
 8003dc2:	61b9      	str	r1, [r7, #24]
 8003dc4:	415b      	adcs	r3, r3
 8003dc6:	61fb      	str	r3, [r7, #28]
 8003dc8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003dcc:	4641      	mov	r1, r8
 8003dce:	1851      	adds	r1, r2, r1
 8003dd0:	6139      	str	r1, [r7, #16]
 8003dd2:	4649      	mov	r1, r9
 8003dd4:	414b      	adcs	r3, r1
 8003dd6:	617b      	str	r3, [r7, #20]
 8003dd8:	f04f 0200 	mov.w	r2, #0
 8003ddc:	f04f 0300 	mov.w	r3, #0
 8003de0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003de4:	4659      	mov	r1, fp
 8003de6:	00cb      	lsls	r3, r1, #3
 8003de8:	4651      	mov	r1, sl
 8003dea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003dee:	4651      	mov	r1, sl
 8003df0:	00ca      	lsls	r2, r1, #3
 8003df2:	4610      	mov	r0, r2
 8003df4:	4619      	mov	r1, r3
 8003df6:	4603      	mov	r3, r0
 8003df8:	4642      	mov	r2, r8
 8003dfa:	189b      	adds	r3, r3, r2
 8003dfc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003e00:	464b      	mov	r3, r9
 8003e02:	460a      	mov	r2, r1
 8003e04:	eb42 0303 	adc.w	r3, r2, r3
 8003e08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	67bb      	str	r3, [r7, #120]	; 0x78
 8003e16:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003e18:	f04f 0200 	mov.w	r2, #0
 8003e1c:	f04f 0300 	mov.w	r3, #0
 8003e20:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003e24:	4649      	mov	r1, r9
 8003e26:	008b      	lsls	r3, r1, #2
 8003e28:	4641      	mov	r1, r8
 8003e2a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e2e:	4641      	mov	r1, r8
 8003e30:	008a      	lsls	r2, r1, #2
 8003e32:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003e36:	f7fc f9e5 	bl	8000204 <__aeabi_uldivmod>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	460b      	mov	r3, r1
 8003e3e:	4b39      	ldr	r3, [pc, #228]	; (8003f24 <UART_SetConfig+0x4e4>)
 8003e40:	fba3 1302 	umull	r1, r3, r3, r2
 8003e44:	095b      	lsrs	r3, r3, #5
 8003e46:	2164      	movs	r1, #100	; 0x64
 8003e48:	fb01 f303 	mul.w	r3, r1, r3
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	011b      	lsls	r3, r3, #4
 8003e50:	3332      	adds	r3, #50	; 0x32
 8003e52:	4a34      	ldr	r2, [pc, #208]	; (8003f24 <UART_SetConfig+0x4e4>)
 8003e54:	fba2 2303 	umull	r2, r3, r2, r3
 8003e58:	095b      	lsrs	r3, r3, #5
 8003e5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e5e:	441c      	add	r4, r3
 8003e60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e64:	2200      	movs	r2, #0
 8003e66:	673b      	str	r3, [r7, #112]	; 0x70
 8003e68:	677a      	str	r2, [r7, #116]	; 0x74
 8003e6a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003e6e:	4642      	mov	r2, r8
 8003e70:	464b      	mov	r3, r9
 8003e72:	1891      	adds	r1, r2, r2
 8003e74:	60b9      	str	r1, [r7, #8]
 8003e76:	415b      	adcs	r3, r3
 8003e78:	60fb      	str	r3, [r7, #12]
 8003e7a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e7e:	4641      	mov	r1, r8
 8003e80:	1851      	adds	r1, r2, r1
 8003e82:	6039      	str	r1, [r7, #0]
 8003e84:	4649      	mov	r1, r9
 8003e86:	414b      	adcs	r3, r1
 8003e88:	607b      	str	r3, [r7, #4]
 8003e8a:	f04f 0200 	mov.w	r2, #0
 8003e8e:	f04f 0300 	mov.w	r3, #0
 8003e92:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003e96:	4659      	mov	r1, fp
 8003e98:	00cb      	lsls	r3, r1, #3
 8003e9a:	4651      	mov	r1, sl
 8003e9c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ea0:	4651      	mov	r1, sl
 8003ea2:	00ca      	lsls	r2, r1, #3
 8003ea4:	4610      	mov	r0, r2
 8003ea6:	4619      	mov	r1, r3
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	4642      	mov	r2, r8
 8003eac:	189b      	adds	r3, r3, r2
 8003eae:	66bb      	str	r3, [r7, #104]	; 0x68
 8003eb0:	464b      	mov	r3, r9
 8003eb2:	460a      	mov	r2, r1
 8003eb4:	eb42 0303 	adc.w	r3, r2, r3
 8003eb8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003eba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	663b      	str	r3, [r7, #96]	; 0x60
 8003ec4:	667a      	str	r2, [r7, #100]	; 0x64
 8003ec6:	f04f 0200 	mov.w	r2, #0
 8003eca:	f04f 0300 	mov.w	r3, #0
 8003ece:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003ed2:	4649      	mov	r1, r9
 8003ed4:	008b      	lsls	r3, r1, #2
 8003ed6:	4641      	mov	r1, r8
 8003ed8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003edc:	4641      	mov	r1, r8
 8003ede:	008a      	lsls	r2, r1, #2
 8003ee0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003ee4:	f7fc f98e 	bl	8000204 <__aeabi_uldivmod>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	460b      	mov	r3, r1
 8003eec:	4b0d      	ldr	r3, [pc, #52]	; (8003f24 <UART_SetConfig+0x4e4>)
 8003eee:	fba3 1302 	umull	r1, r3, r3, r2
 8003ef2:	095b      	lsrs	r3, r3, #5
 8003ef4:	2164      	movs	r1, #100	; 0x64
 8003ef6:	fb01 f303 	mul.w	r3, r1, r3
 8003efa:	1ad3      	subs	r3, r2, r3
 8003efc:	011b      	lsls	r3, r3, #4
 8003efe:	3332      	adds	r3, #50	; 0x32
 8003f00:	4a08      	ldr	r2, [pc, #32]	; (8003f24 <UART_SetConfig+0x4e4>)
 8003f02:	fba2 2303 	umull	r2, r3, r2, r3
 8003f06:	095b      	lsrs	r3, r3, #5
 8003f08:	f003 020f 	and.w	r2, r3, #15
 8003f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4422      	add	r2, r4
 8003f14:	609a      	str	r2, [r3, #8]
}
 8003f16:	bf00      	nop
 8003f18:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f22:	bf00      	nop
 8003f24:	51eb851f 	.word	0x51eb851f

08003f28 <__errno>:
 8003f28:	4b01      	ldr	r3, [pc, #4]	; (8003f30 <__errno+0x8>)
 8003f2a:	6818      	ldr	r0, [r3, #0]
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop
 8003f30:	2000000c 	.word	0x2000000c

08003f34 <__libc_init_array>:
 8003f34:	b570      	push	{r4, r5, r6, lr}
 8003f36:	4d0d      	ldr	r5, [pc, #52]	; (8003f6c <__libc_init_array+0x38>)
 8003f38:	4c0d      	ldr	r4, [pc, #52]	; (8003f70 <__libc_init_array+0x3c>)
 8003f3a:	1b64      	subs	r4, r4, r5
 8003f3c:	10a4      	asrs	r4, r4, #2
 8003f3e:	2600      	movs	r6, #0
 8003f40:	42a6      	cmp	r6, r4
 8003f42:	d109      	bne.n	8003f58 <__libc_init_array+0x24>
 8003f44:	4d0b      	ldr	r5, [pc, #44]	; (8003f74 <__libc_init_array+0x40>)
 8003f46:	4c0c      	ldr	r4, [pc, #48]	; (8003f78 <__libc_init_array+0x44>)
 8003f48:	f000 fc7e 	bl	8004848 <_init>
 8003f4c:	1b64      	subs	r4, r4, r5
 8003f4e:	10a4      	asrs	r4, r4, #2
 8003f50:	2600      	movs	r6, #0
 8003f52:	42a6      	cmp	r6, r4
 8003f54:	d105      	bne.n	8003f62 <__libc_init_array+0x2e>
 8003f56:	bd70      	pop	{r4, r5, r6, pc}
 8003f58:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f5c:	4798      	blx	r3
 8003f5e:	3601      	adds	r6, #1
 8003f60:	e7ee      	b.n	8003f40 <__libc_init_array+0xc>
 8003f62:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f66:	4798      	blx	r3
 8003f68:	3601      	adds	r6, #1
 8003f6a:	e7f2      	b.n	8003f52 <__libc_init_array+0x1e>
 8003f6c:	080048e4 	.word	0x080048e4
 8003f70:	080048e4 	.word	0x080048e4
 8003f74:	080048e4 	.word	0x080048e4
 8003f78:	080048e8 	.word	0x080048e8

08003f7c <memcmp>:
 8003f7c:	b510      	push	{r4, lr}
 8003f7e:	3901      	subs	r1, #1
 8003f80:	4402      	add	r2, r0
 8003f82:	4290      	cmp	r0, r2
 8003f84:	d101      	bne.n	8003f8a <memcmp+0xe>
 8003f86:	2000      	movs	r0, #0
 8003f88:	e005      	b.n	8003f96 <memcmp+0x1a>
 8003f8a:	7803      	ldrb	r3, [r0, #0]
 8003f8c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8003f90:	42a3      	cmp	r3, r4
 8003f92:	d001      	beq.n	8003f98 <memcmp+0x1c>
 8003f94:	1b18      	subs	r0, r3, r4
 8003f96:	bd10      	pop	{r4, pc}
 8003f98:	3001      	adds	r0, #1
 8003f9a:	e7f2      	b.n	8003f82 <memcmp+0x6>

08003f9c <memset>:
 8003f9c:	4402      	add	r2, r0
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d100      	bne.n	8003fa6 <memset+0xa>
 8003fa4:	4770      	bx	lr
 8003fa6:	f803 1b01 	strb.w	r1, [r3], #1
 8003faa:	e7f9      	b.n	8003fa0 <memset+0x4>

08003fac <setbuf>:
 8003fac:	2900      	cmp	r1, #0
 8003fae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003fb2:	bf0c      	ite	eq
 8003fb4:	2202      	moveq	r2, #2
 8003fb6:	2200      	movne	r2, #0
 8003fb8:	f000 b800 	b.w	8003fbc <setvbuf>

08003fbc <setvbuf>:
 8003fbc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003fc0:	461d      	mov	r5, r3
 8003fc2:	4b5d      	ldr	r3, [pc, #372]	; (8004138 <setvbuf+0x17c>)
 8003fc4:	681f      	ldr	r7, [r3, #0]
 8003fc6:	4604      	mov	r4, r0
 8003fc8:	460e      	mov	r6, r1
 8003fca:	4690      	mov	r8, r2
 8003fcc:	b127      	cbz	r7, 8003fd8 <setvbuf+0x1c>
 8003fce:	69bb      	ldr	r3, [r7, #24]
 8003fd0:	b913      	cbnz	r3, 8003fd8 <setvbuf+0x1c>
 8003fd2:	4638      	mov	r0, r7
 8003fd4:	f000 f9d2 	bl	800437c <__sinit>
 8003fd8:	4b58      	ldr	r3, [pc, #352]	; (800413c <setvbuf+0x180>)
 8003fda:	429c      	cmp	r4, r3
 8003fdc:	d167      	bne.n	80040ae <setvbuf+0xf2>
 8003fde:	687c      	ldr	r4, [r7, #4]
 8003fe0:	f1b8 0f02 	cmp.w	r8, #2
 8003fe4:	d006      	beq.n	8003ff4 <setvbuf+0x38>
 8003fe6:	f1b8 0f01 	cmp.w	r8, #1
 8003fea:	f200 809f 	bhi.w	800412c <setvbuf+0x170>
 8003fee:	2d00      	cmp	r5, #0
 8003ff0:	f2c0 809c 	blt.w	800412c <setvbuf+0x170>
 8003ff4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003ff6:	07db      	lsls	r3, r3, #31
 8003ff8:	d405      	bmi.n	8004006 <setvbuf+0x4a>
 8003ffa:	89a3      	ldrh	r3, [r4, #12]
 8003ffc:	0598      	lsls	r0, r3, #22
 8003ffe:	d402      	bmi.n	8004006 <setvbuf+0x4a>
 8004000:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004002:	f000 fa59 	bl	80044b8 <__retarget_lock_acquire_recursive>
 8004006:	4621      	mov	r1, r4
 8004008:	4638      	mov	r0, r7
 800400a:	f000 f923 	bl	8004254 <_fflush_r>
 800400e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004010:	b141      	cbz	r1, 8004024 <setvbuf+0x68>
 8004012:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004016:	4299      	cmp	r1, r3
 8004018:	d002      	beq.n	8004020 <setvbuf+0x64>
 800401a:	4638      	mov	r0, r7
 800401c:	f000 fa7c 	bl	8004518 <_free_r>
 8004020:	2300      	movs	r3, #0
 8004022:	6363      	str	r3, [r4, #52]	; 0x34
 8004024:	2300      	movs	r3, #0
 8004026:	61a3      	str	r3, [r4, #24]
 8004028:	6063      	str	r3, [r4, #4]
 800402a:	89a3      	ldrh	r3, [r4, #12]
 800402c:	0619      	lsls	r1, r3, #24
 800402e:	d503      	bpl.n	8004038 <setvbuf+0x7c>
 8004030:	6921      	ldr	r1, [r4, #16]
 8004032:	4638      	mov	r0, r7
 8004034:	f000 fa70 	bl	8004518 <_free_r>
 8004038:	89a3      	ldrh	r3, [r4, #12]
 800403a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800403e:	f023 0303 	bic.w	r3, r3, #3
 8004042:	f1b8 0f02 	cmp.w	r8, #2
 8004046:	81a3      	strh	r3, [r4, #12]
 8004048:	d06c      	beq.n	8004124 <setvbuf+0x168>
 800404a:	ab01      	add	r3, sp, #4
 800404c:	466a      	mov	r2, sp
 800404e:	4621      	mov	r1, r4
 8004050:	4638      	mov	r0, r7
 8004052:	f000 fa33 	bl	80044bc <__swhatbuf_r>
 8004056:	89a3      	ldrh	r3, [r4, #12]
 8004058:	4318      	orrs	r0, r3
 800405a:	81a0      	strh	r0, [r4, #12]
 800405c:	2d00      	cmp	r5, #0
 800405e:	d130      	bne.n	80040c2 <setvbuf+0x106>
 8004060:	9d00      	ldr	r5, [sp, #0]
 8004062:	4628      	mov	r0, r5
 8004064:	f000 fa50 	bl	8004508 <malloc>
 8004068:	4606      	mov	r6, r0
 800406a:	2800      	cmp	r0, #0
 800406c:	d155      	bne.n	800411a <setvbuf+0x15e>
 800406e:	f8dd 9000 	ldr.w	r9, [sp]
 8004072:	45a9      	cmp	r9, r5
 8004074:	d14a      	bne.n	800410c <setvbuf+0x150>
 8004076:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800407a:	2200      	movs	r2, #0
 800407c:	60a2      	str	r2, [r4, #8]
 800407e:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8004082:	6022      	str	r2, [r4, #0]
 8004084:	6122      	str	r2, [r4, #16]
 8004086:	2201      	movs	r2, #1
 8004088:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800408c:	6162      	str	r2, [r4, #20]
 800408e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004090:	f043 0302 	orr.w	r3, r3, #2
 8004094:	07d2      	lsls	r2, r2, #31
 8004096:	81a3      	strh	r3, [r4, #12]
 8004098:	d405      	bmi.n	80040a6 <setvbuf+0xea>
 800409a:	f413 7f00 	tst.w	r3, #512	; 0x200
 800409e:	d102      	bne.n	80040a6 <setvbuf+0xea>
 80040a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80040a2:	f000 fa0a 	bl	80044ba <__retarget_lock_release_recursive>
 80040a6:	4628      	mov	r0, r5
 80040a8:	b003      	add	sp, #12
 80040aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80040ae:	4b24      	ldr	r3, [pc, #144]	; (8004140 <setvbuf+0x184>)
 80040b0:	429c      	cmp	r4, r3
 80040b2:	d101      	bne.n	80040b8 <setvbuf+0xfc>
 80040b4:	68bc      	ldr	r4, [r7, #8]
 80040b6:	e793      	b.n	8003fe0 <setvbuf+0x24>
 80040b8:	4b22      	ldr	r3, [pc, #136]	; (8004144 <setvbuf+0x188>)
 80040ba:	429c      	cmp	r4, r3
 80040bc:	bf08      	it	eq
 80040be:	68fc      	ldreq	r4, [r7, #12]
 80040c0:	e78e      	b.n	8003fe0 <setvbuf+0x24>
 80040c2:	2e00      	cmp	r6, #0
 80040c4:	d0cd      	beq.n	8004062 <setvbuf+0xa6>
 80040c6:	69bb      	ldr	r3, [r7, #24]
 80040c8:	b913      	cbnz	r3, 80040d0 <setvbuf+0x114>
 80040ca:	4638      	mov	r0, r7
 80040cc:	f000 f956 	bl	800437c <__sinit>
 80040d0:	f1b8 0f01 	cmp.w	r8, #1
 80040d4:	bf08      	it	eq
 80040d6:	89a3      	ldrheq	r3, [r4, #12]
 80040d8:	6026      	str	r6, [r4, #0]
 80040da:	bf04      	itt	eq
 80040dc:	f043 0301 	orreq.w	r3, r3, #1
 80040e0:	81a3      	strheq	r3, [r4, #12]
 80040e2:	89a2      	ldrh	r2, [r4, #12]
 80040e4:	f012 0308 	ands.w	r3, r2, #8
 80040e8:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80040ec:	d01c      	beq.n	8004128 <setvbuf+0x16c>
 80040ee:	07d3      	lsls	r3, r2, #31
 80040f0:	bf41      	itttt	mi
 80040f2:	2300      	movmi	r3, #0
 80040f4:	426d      	negmi	r5, r5
 80040f6:	60a3      	strmi	r3, [r4, #8]
 80040f8:	61a5      	strmi	r5, [r4, #24]
 80040fa:	bf58      	it	pl
 80040fc:	60a5      	strpl	r5, [r4, #8]
 80040fe:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8004100:	f015 0501 	ands.w	r5, r5, #1
 8004104:	d115      	bne.n	8004132 <setvbuf+0x176>
 8004106:	f412 7f00 	tst.w	r2, #512	; 0x200
 800410a:	e7c8      	b.n	800409e <setvbuf+0xe2>
 800410c:	4648      	mov	r0, r9
 800410e:	f000 f9fb 	bl	8004508 <malloc>
 8004112:	4606      	mov	r6, r0
 8004114:	2800      	cmp	r0, #0
 8004116:	d0ae      	beq.n	8004076 <setvbuf+0xba>
 8004118:	464d      	mov	r5, r9
 800411a:	89a3      	ldrh	r3, [r4, #12]
 800411c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004120:	81a3      	strh	r3, [r4, #12]
 8004122:	e7d0      	b.n	80040c6 <setvbuf+0x10a>
 8004124:	2500      	movs	r5, #0
 8004126:	e7a8      	b.n	800407a <setvbuf+0xbe>
 8004128:	60a3      	str	r3, [r4, #8]
 800412a:	e7e8      	b.n	80040fe <setvbuf+0x142>
 800412c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004130:	e7b9      	b.n	80040a6 <setvbuf+0xea>
 8004132:	2500      	movs	r5, #0
 8004134:	e7b7      	b.n	80040a6 <setvbuf+0xea>
 8004136:	bf00      	nop
 8004138:	2000000c 	.word	0x2000000c
 800413c:	0800489c 	.word	0x0800489c
 8004140:	080048bc 	.word	0x080048bc
 8004144:	0800487c 	.word	0x0800487c

08004148 <__sflush_r>:
 8004148:	898a      	ldrh	r2, [r1, #12]
 800414a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800414e:	4605      	mov	r5, r0
 8004150:	0710      	lsls	r0, r2, #28
 8004152:	460c      	mov	r4, r1
 8004154:	d458      	bmi.n	8004208 <__sflush_r+0xc0>
 8004156:	684b      	ldr	r3, [r1, #4]
 8004158:	2b00      	cmp	r3, #0
 800415a:	dc05      	bgt.n	8004168 <__sflush_r+0x20>
 800415c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800415e:	2b00      	cmp	r3, #0
 8004160:	dc02      	bgt.n	8004168 <__sflush_r+0x20>
 8004162:	2000      	movs	r0, #0
 8004164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004168:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800416a:	2e00      	cmp	r6, #0
 800416c:	d0f9      	beq.n	8004162 <__sflush_r+0x1a>
 800416e:	2300      	movs	r3, #0
 8004170:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004174:	682f      	ldr	r7, [r5, #0]
 8004176:	602b      	str	r3, [r5, #0]
 8004178:	d032      	beq.n	80041e0 <__sflush_r+0x98>
 800417a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800417c:	89a3      	ldrh	r3, [r4, #12]
 800417e:	075a      	lsls	r2, r3, #29
 8004180:	d505      	bpl.n	800418e <__sflush_r+0x46>
 8004182:	6863      	ldr	r3, [r4, #4]
 8004184:	1ac0      	subs	r0, r0, r3
 8004186:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004188:	b10b      	cbz	r3, 800418e <__sflush_r+0x46>
 800418a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800418c:	1ac0      	subs	r0, r0, r3
 800418e:	2300      	movs	r3, #0
 8004190:	4602      	mov	r2, r0
 8004192:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004194:	6a21      	ldr	r1, [r4, #32]
 8004196:	4628      	mov	r0, r5
 8004198:	47b0      	blx	r6
 800419a:	1c43      	adds	r3, r0, #1
 800419c:	89a3      	ldrh	r3, [r4, #12]
 800419e:	d106      	bne.n	80041ae <__sflush_r+0x66>
 80041a0:	6829      	ldr	r1, [r5, #0]
 80041a2:	291d      	cmp	r1, #29
 80041a4:	d82c      	bhi.n	8004200 <__sflush_r+0xb8>
 80041a6:	4a2a      	ldr	r2, [pc, #168]	; (8004250 <__sflush_r+0x108>)
 80041a8:	40ca      	lsrs	r2, r1
 80041aa:	07d6      	lsls	r6, r2, #31
 80041ac:	d528      	bpl.n	8004200 <__sflush_r+0xb8>
 80041ae:	2200      	movs	r2, #0
 80041b0:	6062      	str	r2, [r4, #4]
 80041b2:	04d9      	lsls	r1, r3, #19
 80041b4:	6922      	ldr	r2, [r4, #16]
 80041b6:	6022      	str	r2, [r4, #0]
 80041b8:	d504      	bpl.n	80041c4 <__sflush_r+0x7c>
 80041ba:	1c42      	adds	r2, r0, #1
 80041bc:	d101      	bne.n	80041c2 <__sflush_r+0x7a>
 80041be:	682b      	ldr	r3, [r5, #0]
 80041c0:	b903      	cbnz	r3, 80041c4 <__sflush_r+0x7c>
 80041c2:	6560      	str	r0, [r4, #84]	; 0x54
 80041c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80041c6:	602f      	str	r7, [r5, #0]
 80041c8:	2900      	cmp	r1, #0
 80041ca:	d0ca      	beq.n	8004162 <__sflush_r+0x1a>
 80041cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80041d0:	4299      	cmp	r1, r3
 80041d2:	d002      	beq.n	80041da <__sflush_r+0x92>
 80041d4:	4628      	mov	r0, r5
 80041d6:	f000 f99f 	bl	8004518 <_free_r>
 80041da:	2000      	movs	r0, #0
 80041dc:	6360      	str	r0, [r4, #52]	; 0x34
 80041de:	e7c1      	b.n	8004164 <__sflush_r+0x1c>
 80041e0:	6a21      	ldr	r1, [r4, #32]
 80041e2:	2301      	movs	r3, #1
 80041e4:	4628      	mov	r0, r5
 80041e6:	47b0      	blx	r6
 80041e8:	1c41      	adds	r1, r0, #1
 80041ea:	d1c7      	bne.n	800417c <__sflush_r+0x34>
 80041ec:	682b      	ldr	r3, [r5, #0]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d0c4      	beq.n	800417c <__sflush_r+0x34>
 80041f2:	2b1d      	cmp	r3, #29
 80041f4:	d001      	beq.n	80041fa <__sflush_r+0xb2>
 80041f6:	2b16      	cmp	r3, #22
 80041f8:	d101      	bne.n	80041fe <__sflush_r+0xb6>
 80041fa:	602f      	str	r7, [r5, #0]
 80041fc:	e7b1      	b.n	8004162 <__sflush_r+0x1a>
 80041fe:	89a3      	ldrh	r3, [r4, #12]
 8004200:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004204:	81a3      	strh	r3, [r4, #12]
 8004206:	e7ad      	b.n	8004164 <__sflush_r+0x1c>
 8004208:	690f      	ldr	r7, [r1, #16]
 800420a:	2f00      	cmp	r7, #0
 800420c:	d0a9      	beq.n	8004162 <__sflush_r+0x1a>
 800420e:	0793      	lsls	r3, r2, #30
 8004210:	680e      	ldr	r6, [r1, #0]
 8004212:	bf08      	it	eq
 8004214:	694b      	ldreq	r3, [r1, #20]
 8004216:	600f      	str	r7, [r1, #0]
 8004218:	bf18      	it	ne
 800421a:	2300      	movne	r3, #0
 800421c:	eba6 0807 	sub.w	r8, r6, r7
 8004220:	608b      	str	r3, [r1, #8]
 8004222:	f1b8 0f00 	cmp.w	r8, #0
 8004226:	dd9c      	ble.n	8004162 <__sflush_r+0x1a>
 8004228:	6a21      	ldr	r1, [r4, #32]
 800422a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800422c:	4643      	mov	r3, r8
 800422e:	463a      	mov	r2, r7
 8004230:	4628      	mov	r0, r5
 8004232:	47b0      	blx	r6
 8004234:	2800      	cmp	r0, #0
 8004236:	dc06      	bgt.n	8004246 <__sflush_r+0xfe>
 8004238:	89a3      	ldrh	r3, [r4, #12]
 800423a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800423e:	81a3      	strh	r3, [r4, #12]
 8004240:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004244:	e78e      	b.n	8004164 <__sflush_r+0x1c>
 8004246:	4407      	add	r7, r0
 8004248:	eba8 0800 	sub.w	r8, r8, r0
 800424c:	e7e9      	b.n	8004222 <__sflush_r+0xda>
 800424e:	bf00      	nop
 8004250:	20400001 	.word	0x20400001

08004254 <_fflush_r>:
 8004254:	b538      	push	{r3, r4, r5, lr}
 8004256:	690b      	ldr	r3, [r1, #16]
 8004258:	4605      	mov	r5, r0
 800425a:	460c      	mov	r4, r1
 800425c:	b913      	cbnz	r3, 8004264 <_fflush_r+0x10>
 800425e:	2500      	movs	r5, #0
 8004260:	4628      	mov	r0, r5
 8004262:	bd38      	pop	{r3, r4, r5, pc}
 8004264:	b118      	cbz	r0, 800426e <_fflush_r+0x1a>
 8004266:	6983      	ldr	r3, [r0, #24]
 8004268:	b90b      	cbnz	r3, 800426e <_fflush_r+0x1a>
 800426a:	f000 f887 	bl	800437c <__sinit>
 800426e:	4b14      	ldr	r3, [pc, #80]	; (80042c0 <_fflush_r+0x6c>)
 8004270:	429c      	cmp	r4, r3
 8004272:	d11b      	bne.n	80042ac <_fflush_r+0x58>
 8004274:	686c      	ldr	r4, [r5, #4]
 8004276:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d0ef      	beq.n	800425e <_fflush_r+0xa>
 800427e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004280:	07d0      	lsls	r0, r2, #31
 8004282:	d404      	bmi.n	800428e <_fflush_r+0x3a>
 8004284:	0599      	lsls	r1, r3, #22
 8004286:	d402      	bmi.n	800428e <_fflush_r+0x3a>
 8004288:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800428a:	f000 f915 	bl	80044b8 <__retarget_lock_acquire_recursive>
 800428e:	4628      	mov	r0, r5
 8004290:	4621      	mov	r1, r4
 8004292:	f7ff ff59 	bl	8004148 <__sflush_r>
 8004296:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004298:	07da      	lsls	r2, r3, #31
 800429a:	4605      	mov	r5, r0
 800429c:	d4e0      	bmi.n	8004260 <_fflush_r+0xc>
 800429e:	89a3      	ldrh	r3, [r4, #12]
 80042a0:	059b      	lsls	r3, r3, #22
 80042a2:	d4dd      	bmi.n	8004260 <_fflush_r+0xc>
 80042a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80042a6:	f000 f908 	bl	80044ba <__retarget_lock_release_recursive>
 80042aa:	e7d9      	b.n	8004260 <_fflush_r+0xc>
 80042ac:	4b05      	ldr	r3, [pc, #20]	; (80042c4 <_fflush_r+0x70>)
 80042ae:	429c      	cmp	r4, r3
 80042b0:	d101      	bne.n	80042b6 <_fflush_r+0x62>
 80042b2:	68ac      	ldr	r4, [r5, #8]
 80042b4:	e7df      	b.n	8004276 <_fflush_r+0x22>
 80042b6:	4b04      	ldr	r3, [pc, #16]	; (80042c8 <_fflush_r+0x74>)
 80042b8:	429c      	cmp	r4, r3
 80042ba:	bf08      	it	eq
 80042bc:	68ec      	ldreq	r4, [r5, #12]
 80042be:	e7da      	b.n	8004276 <_fflush_r+0x22>
 80042c0:	0800489c 	.word	0x0800489c
 80042c4:	080048bc 	.word	0x080048bc
 80042c8:	0800487c 	.word	0x0800487c

080042cc <std>:
 80042cc:	2300      	movs	r3, #0
 80042ce:	b510      	push	{r4, lr}
 80042d0:	4604      	mov	r4, r0
 80042d2:	e9c0 3300 	strd	r3, r3, [r0]
 80042d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80042da:	6083      	str	r3, [r0, #8]
 80042dc:	8181      	strh	r1, [r0, #12]
 80042de:	6643      	str	r3, [r0, #100]	; 0x64
 80042e0:	81c2      	strh	r2, [r0, #14]
 80042e2:	6183      	str	r3, [r0, #24]
 80042e4:	4619      	mov	r1, r3
 80042e6:	2208      	movs	r2, #8
 80042e8:	305c      	adds	r0, #92	; 0x5c
 80042ea:	f7ff fe57 	bl	8003f9c <memset>
 80042ee:	4b05      	ldr	r3, [pc, #20]	; (8004304 <std+0x38>)
 80042f0:	6263      	str	r3, [r4, #36]	; 0x24
 80042f2:	4b05      	ldr	r3, [pc, #20]	; (8004308 <std+0x3c>)
 80042f4:	62a3      	str	r3, [r4, #40]	; 0x28
 80042f6:	4b05      	ldr	r3, [pc, #20]	; (800430c <std+0x40>)
 80042f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80042fa:	4b05      	ldr	r3, [pc, #20]	; (8004310 <std+0x44>)
 80042fc:	6224      	str	r4, [r4, #32]
 80042fe:	6323      	str	r3, [r4, #48]	; 0x30
 8004300:	bd10      	pop	{r4, pc}
 8004302:	bf00      	nop
 8004304:	080046f9 	.word	0x080046f9
 8004308:	0800471b 	.word	0x0800471b
 800430c:	08004753 	.word	0x08004753
 8004310:	08004777 	.word	0x08004777

08004314 <_cleanup_r>:
 8004314:	4901      	ldr	r1, [pc, #4]	; (800431c <_cleanup_r+0x8>)
 8004316:	f000 b8af 	b.w	8004478 <_fwalk_reent>
 800431a:	bf00      	nop
 800431c:	08004255 	.word	0x08004255

08004320 <__sfmoreglue>:
 8004320:	b570      	push	{r4, r5, r6, lr}
 8004322:	2268      	movs	r2, #104	; 0x68
 8004324:	1e4d      	subs	r5, r1, #1
 8004326:	4355      	muls	r5, r2
 8004328:	460e      	mov	r6, r1
 800432a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800432e:	f000 f95f 	bl	80045f0 <_malloc_r>
 8004332:	4604      	mov	r4, r0
 8004334:	b140      	cbz	r0, 8004348 <__sfmoreglue+0x28>
 8004336:	2100      	movs	r1, #0
 8004338:	e9c0 1600 	strd	r1, r6, [r0]
 800433c:	300c      	adds	r0, #12
 800433e:	60a0      	str	r0, [r4, #8]
 8004340:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004344:	f7ff fe2a 	bl	8003f9c <memset>
 8004348:	4620      	mov	r0, r4
 800434a:	bd70      	pop	{r4, r5, r6, pc}

0800434c <__sfp_lock_acquire>:
 800434c:	4801      	ldr	r0, [pc, #4]	; (8004354 <__sfp_lock_acquire+0x8>)
 800434e:	f000 b8b3 	b.w	80044b8 <__retarget_lock_acquire_recursive>
 8004352:	bf00      	nop
 8004354:	20000111 	.word	0x20000111

08004358 <__sfp_lock_release>:
 8004358:	4801      	ldr	r0, [pc, #4]	; (8004360 <__sfp_lock_release+0x8>)
 800435a:	f000 b8ae 	b.w	80044ba <__retarget_lock_release_recursive>
 800435e:	bf00      	nop
 8004360:	20000111 	.word	0x20000111

08004364 <__sinit_lock_acquire>:
 8004364:	4801      	ldr	r0, [pc, #4]	; (800436c <__sinit_lock_acquire+0x8>)
 8004366:	f000 b8a7 	b.w	80044b8 <__retarget_lock_acquire_recursive>
 800436a:	bf00      	nop
 800436c:	20000112 	.word	0x20000112

08004370 <__sinit_lock_release>:
 8004370:	4801      	ldr	r0, [pc, #4]	; (8004378 <__sinit_lock_release+0x8>)
 8004372:	f000 b8a2 	b.w	80044ba <__retarget_lock_release_recursive>
 8004376:	bf00      	nop
 8004378:	20000112 	.word	0x20000112

0800437c <__sinit>:
 800437c:	b510      	push	{r4, lr}
 800437e:	4604      	mov	r4, r0
 8004380:	f7ff fff0 	bl	8004364 <__sinit_lock_acquire>
 8004384:	69a3      	ldr	r3, [r4, #24]
 8004386:	b11b      	cbz	r3, 8004390 <__sinit+0x14>
 8004388:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800438c:	f7ff bff0 	b.w	8004370 <__sinit_lock_release>
 8004390:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004394:	6523      	str	r3, [r4, #80]	; 0x50
 8004396:	4b13      	ldr	r3, [pc, #76]	; (80043e4 <__sinit+0x68>)
 8004398:	4a13      	ldr	r2, [pc, #76]	; (80043e8 <__sinit+0x6c>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	62a2      	str	r2, [r4, #40]	; 0x28
 800439e:	42a3      	cmp	r3, r4
 80043a0:	bf04      	itt	eq
 80043a2:	2301      	moveq	r3, #1
 80043a4:	61a3      	streq	r3, [r4, #24]
 80043a6:	4620      	mov	r0, r4
 80043a8:	f000 f820 	bl	80043ec <__sfp>
 80043ac:	6060      	str	r0, [r4, #4]
 80043ae:	4620      	mov	r0, r4
 80043b0:	f000 f81c 	bl	80043ec <__sfp>
 80043b4:	60a0      	str	r0, [r4, #8]
 80043b6:	4620      	mov	r0, r4
 80043b8:	f000 f818 	bl	80043ec <__sfp>
 80043bc:	2200      	movs	r2, #0
 80043be:	60e0      	str	r0, [r4, #12]
 80043c0:	2104      	movs	r1, #4
 80043c2:	6860      	ldr	r0, [r4, #4]
 80043c4:	f7ff ff82 	bl	80042cc <std>
 80043c8:	68a0      	ldr	r0, [r4, #8]
 80043ca:	2201      	movs	r2, #1
 80043cc:	2109      	movs	r1, #9
 80043ce:	f7ff ff7d 	bl	80042cc <std>
 80043d2:	68e0      	ldr	r0, [r4, #12]
 80043d4:	2202      	movs	r2, #2
 80043d6:	2112      	movs	r1, #18
 80043d8:	f7ff ff78 	bl	80042cc <std>
 80043dc:	2301      	movs	r3, #1
 80043de:	61a3      	str	r3, [r4, #24]
 80043e0:	e7d2      	b.n	8004388 <__sinit+0xc>
 80043e2:	bf00      	nop
 80043e4:	08004878 	.word	0x08004878
 80043e8:	08004315 	.word	0x08004315

080043ec <__sfp>:
 80043ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043ee:	4607      	mov	r7, r0
 80043f0:	f7ff ffac 	bl	800434c <__sfp_lock_acquire>
 80043f4:	4b1e      	ldr	r3, [pc, #120]	; (8004470 <__sfp+0x84>)
 80043f6:	681e      	ldr	r6, [r3, #0]
 80043f8:	69b3      	ldr	r3, [r6, #24]
 80043fa:	b913      	cbnz	r3, 8004402 <__sfp+0x16>
 80043fc:	4630      	mov	r0, r6
 80043fe:	f7ff ffbd 	bl	800437c <__sinit>
 8004402:	3648      	adds	r6, #72	; 0x48
 8004404:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004408:	3b01      	subs	r3, #1
 800440a:	d503      	bpl.n	8004414 <__sfp+0x28>
 800440c:	6833      	ldr	r3, [r6, #0]
 800440e:	b30b      	cbz	r3, 8004454 <__sfp+0x68>
 8004410:	6836      	ldr	r6, [r6, #0]
 8004412:	e7f7      	b.n	8004404 <__sfp+0x18>
 8004414:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004418:	b9d5      	cbnz	r5, 8004450 <__sfp+0x64>
 800441a:	4b16      	ldr	r3, [pc, #88]	; (8004474 <__sfp+0x88>)
 800441c:	60e3      	str	r3, [r4, #12]
 800441e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004422:	6665      	str	r5, [r4, #100]	; 0x64
 8004424:	f000 f847 	bl	80044b6 <__retarget_lock_init_recursive>
 8004428:	f7ff ff96 	bl	8004358 <__sfp_lock_release>
 800442c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004430:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004434:	6025      	str	r5, [r4, #0]
 8004436:	61a5      	str	r5, [r4, #24]
 8004438:	2208      	movs	r2, #8
 800443a:	4629      	mov	r1, r5
 800443c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004440:	f7ff fdac 	bl	8003f9c <memset>
 8004444:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004448:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800444c:	4620      	mov	r0, r4
 800444e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004450:	3468      	adds	r4, #104	; 0x68
 8004452:	e7d9      	b.n	8004408 <__sfp+0x1c>
 8004454:	2104      	movs	r1, #4
 8004456:	4638      	mov	r0, r7
 8004458:	f7ff ff62 	bl	8004320 <__sfmoreglue>
 800445c:	4604      	mov	r4, r0
 800445e:	6030      	str	r0, [r6, #0]
 8004460:	2800      	cmp	r0, #0
 8004462:	d1d5      	bne.n	8004410 <__sfp+0x24>
 8004464:	f7ff ff78 	bl	8004358 <__sfp_lock_release>
 8004468:	230c      	movs	r3, #12
 800446a:	603b      	str	r3, [r7, #0]
 800446c:	e7ee      	b.n	800444c <__sfp+0x60>
 800446e:	bf00      	nop
 8004470:	08004878 	.word	0x08004878
 8004474:	ffff0001 	.word	0xffff0001

08004478 <_fwalk_reent>:
 8004478:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800447c:	4606      	mov	r6, r0
 800447e:	4688      	mov	r8, r1
 8004480:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004484:	2700      	movs	r7, #0
 8004486:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800448a:	f1b9 0901 	subs.w	r9, r9, #1
 800448e:	d505      	bpl.n	800449c <_fwalk_reent+0x24>
 8004490:	6824      	ldr	r4, [r4, #0]
 8004492:	2c00      	cmp	r4, #0
 8004494:	d1f7      	bne.n	8004486 <_fwalk_reent+0xe>
 8004496:	4638      	mov	r0, r7
 8004498:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800449c:	89ab      	ldrh	r3, [r5, #12]
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d907      	bls.n	80044b2 <_fwalk_reent+0x3a>
 80044a2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80044a6:	3301      	adds	r3, #1
 80044a8:	d003      	beq.n	80044b2 <_fwalk_reent+0x3a>
 80044aa:	4629      	mov	r1, r5
 80044ac:	4630      	mov	r0, r6
 80044ae:	47c0      	blx	r8
 80044b0:	4307      	orrs	r7, r0
 80044b2:	3568      	adds	r5, #104	; 0x68
 80044b4:	e7e9      	b.n	800448a <_fwalk_reent+0x12>

080044b6 <__retarget_lock_init_recursive>:
 80044b6:	4770      	bx	lr

080044b8 <__retarget_lock_acquire_recursive>:
 80044b8:	4770      	bx	lr

080044ba <__retarget_lock_release_recursive>:
 80044ba:	4770      	bx	lr

080044bc <__swhatbuf_r>:
 80044bc:	b570      	push	{r4, r5, r6, lr}
 80044be:	460e      	mov	r6, r1
 80044c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044c4:	2900      	cmp	r1, #0
 80044c6:	b096      	sub	sp, #88	; 0x58
 80044c8:	4614      	mov	r4, r2
 80044ca:	461d      	mov	r5, r3
 80044cc:	da08      	bge.n	80044e0 <__swhatbuf_r+0x24>
 80044ce:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80044d2:	2200      	movs	r2, #0
 80044d4:	602a      	str	r2, [r5, #0]
 80044d6:	061a      	lsls	r2, r3, #24
 80044d8:	d410      	bmi.n	80044fc <__swhatbuf_r+0x40>
 80044da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80044de:	e00e      	b.n	80044fe <__swhatbuf_r+0x42>
 80044e0:	466a      	mov	r2, sp
 80044e2:	f000 f96f 	bl	80047c4 <_fstat_r>
 80044e6:	2800      	cmp	r0, #0
 80044e8:	dbf1      	blt.n	80044ce <__swhatbuf_r+0x12>
 80044ea:	9a01      	ldr	r2, [sp, #4]
 80044ec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80044f0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80044f4:	425a      	negs	r2, r3
 80044f6:	415a      	adcs	r2, r3
 80044f8:	602a      	str	r2, [r5, #0]
 80044fa:	e7ee      	b.n	80044da <__swhatbuf_r+0x1e>
 80044fc:	2340      	movs	r3, #64	; 0x40
 80044fe:	2000      	movs	r0, #0
 8004500:	6023      	str	r3, [r4, #0]
 8004502:	b016      	add	sp, #88	; 0x58
 8004504:	bd70      	pop	{r4, r5, r6, pc}
	...

08004508 <malloc>:
 8004508:	4b02      	ldr	r3, [pc, #8]	; (8004514 <malloc+0xc>)
 800450a:	4601      	mov	r1, r0
 800450c:	6818      	ldr	r0, [r3, #0]
 800450e:	f000 b86f 	b.w	80045f0 <_malloc_r>
 8004512:	bf00      	nop
 8004514:	2000000c 	.word	0x2000000c

08004518 <_free_r>:
 8004518:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800451a:	2900      	cmp	r1, #0
 800451c:	d044      	beq.n	80045a8 <_free_r+0x90>
 800451e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004522:	9001      	str	r0, [sp, #4]
 8004524:	2b00      	cmp	r3, #0
 8004526:	f1a1 0404 	sub.w	r4, r1, #4
 800452a:	bfb8      	it	lt
 800452c:	18e4      	addlt	r4, r4, r3
 800452e:	f000 f96d 	bl	800480c <__malloc_lock>
 8004532:	4a1e      	ldr	r2, [pc, #120]	; (80045ac <_free_r+0x94>)
 8004534:	9801      	ldr	r0, [sp, #4]
 8004536:	6813      	ldr	r3, [r2, #0]
 8004538:	b933      	cbnz	r3, 8004548 <_free_r+0x30>
 800453a:	6063      	str	r3, [r4, #4]
 800453c:	6014      	str	r4, [r2, #0]
 800453e:	b003      	add	sp, #12
 8004540:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004544:	f000 b968 	b.w	8004818 <__malloc_unlock>
 8004548:	42a3      	cmp	r3, r4
 800454a:	d908      	bls.n	800455e <_free_r+0x46>
 800454c:	6825      	ldr	r5, [r4, #0]
 800454e:	1961      	adds	r1, r4, r5
 8004550:	428b      	cmp	r3, r1
 8004552:	bf01      	itttt	eq
 8004554:	6819      	ldreq	r1, [r3, #0]
 8004556:	685b      	ldreq	r3, [r3, #4]
 8004558:	1949      	addeq	r1, r1, r5
 800455a:	6021      	streq	r1, [r4, #0]
 800455c:	e7ed      	b.n	800453a <_free_r+0x22>
 800455e:	461a      	mov	r2, r3
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	b10b      	cbz	r3, 8004568 <_free_r+0x50>
 8004564:	42a3      	cmp	r3, r4
 8004566:	d9fa      	bls.n	800455e <_free_r+0x46>
 8004568:	6811      	ldr	r1, [r2, #0]
 800456a:	1855      	adds	r5, r2, r1
 800456c:	42a5      	cmp	r5, r4
 800456e:	d10b      	bne.n	8004588 <_free_r+0x70>
 8004570:	6824      	ldr	r4, [r4, #0]
 8004572:	4421      	add	r1, r4
 8004574:	1854      	adds	r4, r2, r1
 8004576:	42a3      	cmp	r3, r4
 8004578:	6011      	str	r1, [r2, #0]
 800457a:	d1e0      	bne.n	800453e <_free_r+0x26>
 800457c:	681c      	ldr	r4, [r3, #0]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	6053      	str	r3, [r2, #4]
 8004582:	4421      	add	r1, r4
 8004584:	6011      	str	r1, [r2, #0]
 8004586:	e7da      	b.n	800453e <_free_r+0x26>
 8004588:	d902      	bls.n	8004590 <_free_r+0x78>
 800458a:	230c      	movs	r3, #12
 800458c:	6003      	str	r3, [r0, #0]
 800458e:	e7d6      	b.n	800453e <_free_r+0x26>
 8004590:	6825      	ldr	r5, [r4, #0]
 8004592:	1961      	adds	r1, r4, r5
 8004594:	428b      	cmp	r3, r1
 8004596:	bf04      	itt	eq
 8004598:	6819      	ldreq	r1, [r3, #0]
 800459a:	685b      	ldreq	r3, [r3, #4]
 800459c:	6063      	str	r3, [r4, #4]
 800459e:	bf04      	itt	eq
 80045a0:	1949      	addeq	r1, r1, r5
 80045a2:	6021      	streq	r1, [r4, #0]
 80045a4:	6054      	str	r4, [r2, #4]
 80045a6:	e7ca      	b.n	800453e <_free_r+0x26>
 80045a8:	b003      	add	sp, #12
 80045aa:	bd30      	pop	{r4, r5, pc}
 80045ac:	20000114 	.word	0x20000114

080045b0 <sbrk_aligned>:
 80045b0:	b570      	push	{r4, r5, r6, lr}
 80045b2:	4e0e      	ldr	r6, [pc, #56]	; (80045ec <sbrk_aligned+0x3c>)
 80045b4:	460c      	mov	r4, r1
 80045b6:	6831      	ldr	r1, [r6, #0]
 80045b8:	4605      	mov	r5, r0
 80045ba:	b911      	cbnz	r1, 80045c2 <sbrk_aligned+0x12>
 80045bc:	f000 f88c 	bl	80046d8 <_sbrk_r>
 80045c0:	6030      	str	r0, [r6, #0]
 80045c2:	4621      	mov	r1, r4
 80045c4:	4628      	mov	r0, r5
 80045c6:	f000 f887 	bl	80046d8 <_sbrk_r>
 80045ca:	1c43      	adds	r3, r0, #1
 80045cc:	d00a      	beq.n	80045e4 <sbrk_aligned+0x34>
 80045ce:	1cc4      	adds	r4, r0, #3
 80045d0:	f024 0403 	bic.w	r4, r4, #3
 80045d4:	42a0      	cmp	r0, r4
 80045d6:	d007      	beq.n	80045e8 <sbrk_aligned+0x38>
 80045d8:	1a21      	subs	r1, r4, r0
 80045da:	4628      	mov	r0, r5
 80045dc:	f000 f87c 	bl	80046d8 <_sbrk_r>
 80045e0:	3001      	adds	r0, #1
 80045e2:	d101      	bne.n	80045e8 <sbrk_aligned+0x38>
 80045e4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80045e8:	4620      	mov	r0, r4
 80045ea:	bd70      	pop	{r4, r5, r6, pc}
 80045ec:	20000118 	.word	0x20000118

080045f0 <_malloc_r>:
 80045f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045f4:	1ccd      	adds	r5, r1, #3
 80045f6:	f025 0503 	bic.w	r5, r5, #3
 80045fa:	3508      	adds	r5, #8
 80045fc:	2d0c      	cmp	r5, #12
 80045fe:	bf38      	it	cc
 8004600:	250c      	movcc	r5, #12
 8004602:	2d00      	cmp	r5, #0
 8004604:	4607      	mov	r7, r0
 8004606:	db01      	blt.n	800460c <_malloc_r+0x1c>
 8004608:	42a9      	cmp	r1, r5
 800460a:	d905      	bls.n	8004618 <_malloc_r+0x28>
 800460c:	230c      	movs	r3, #12
 800460e:	603b      	str	r3, [r7, #0]
 8004610:	2600      	movs	r6, #0
 8004612:	4630      	mov	r0, r6
 8004614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004618:	4e2e      	ldr	r6, [pc, #184]	; (80046d4 <_malloc_r+0xe4>)
 800461a:	f000 f8f7 	bl	800480c <__malloc_lock>
 800461e:	6833      	ldr	r3, [r6, #0]
 8004620:	461c      	mov	r4, r3
 8004622:	bb34      	cbnz	r4, 8004672 <_malloc_r+0x82>
 8004624:	4629      	mov	r1, r5
 8004626:	4638      	mov	r0, r7
 8004628:	f7ff ffc2 	bl	80045b0 <sbrk_aligned>
 800462c:	1c43      	adds	r3, r0, #1
 800462e:	4604      	mov	r4, r0
 8004630:	d14d      	bne.n	80046ce <_malloc_r+0xde>
 8004632:	6834      	ldr	r4, [r6, #0]
 8004634:	4626      	mov	r6, r4
 8004636:	2e00      	cmp	r6, #0
 8004638:	d140      	bne.n	80046bc <_malloc_r+0xcc>
 800463a:	6823      	ldr	r3, [r4, #0]
 800463c:	4631      	mov	r1, r6
 800463e:	4638      	mov	r0, r7
 8004640:	eb04 0803 	add.w	r8, r4, r3
 8004644:	f000 f848 	bl	80046d8 <_sbrk_r>
 8004648:	4580      	cmp	r8, r0
 800464a:	d13a      	bne.n	80046c2 <_malloc_r+0xd2>
 800464c:	6821      	ldr	r1, [r4, #0]
 800464e:	3503      	adds	r5, #3
 8004650:	1a6d      	subs	r5, r5, r1
 8004652:	f025 0503 	bic.w	r5, r5, #3
 8004656:	3508      	adds	r5, #8
 8004658:	2d0c      	cmp	r5, #12
 800465a:	bf38      	it	cc
 800465c:	250c      	movcc	r5, #12
 800465e:	4629      	mov	r1, r5
 8004660:	4638      	mov	r0, r7
 8004662:	f7ff ffa5 	bl	80045b0 <sbrk_aligned>
 8004666:	3001      	adds	r0, #1
 8004668:	d02b      	beq.n	80046c2 <_malloc_r+0xd2>
 800466a:	6823      	ldr	r3, [r4, #0]
 800466c:	442b      	add	r3, r5
 800466e:	6023      	str	r3, [r4, #0]
 8004670:	e00e      	b.n	8004690 <_malloc_r+0xa0>
 8004672:	6822      	ldr	r2, [r4, #0]
 8004674:	1b52      	subs	r2, r2, r5
 8004676:	d41e      	bmi.n	80046b6 <_malloc_r+0xc6>
 8004678:	2a0b      	cmp	r2, #11
 800467a:	d916      	bls.n	80046aa <_malloc_r+0xba>
 800467c:	1961      	adds	r1, r4, r5
 800467e:	42a3      	cmp	r3, r4
 8004680:	6025      	str	r5, [r4, #0]
 8004682:	bf18      	it	ne
 8004684:	6059      	strne	r1, [r3, #4]
 8004686:	6863      	ldr	r3, [r4, #4]
 8004688:	bf08      	it	eq
 800468a:	6031      	streq	r1, [r6, #0]
 800468c:	5162      	str	r2, [r4, r5]
 800468e:	604b      	str	r3, [r1, #4]
 8004690:	4638      	mov	r0, r7
 8004692:	f104 060b 	add.w	r6, r4, #11
 8004696:	f000 f8bf 	bl	8004818 <__malloc_unlock>
 800469a:	f026 0607 	bic.w	r6, r6, #7
 800469e:	1d23      	adds	r3, r4, #4
 80046a0:	1af2      	subs	r2, r6, r3
 80046a2:	d0b6      	beq.n	8004612 <_malloc_r+0x22>
 80046a4:	1b9b      	subs	r3, r3, r6
 80046a6:	50a3      	str	r3, [r4, r2]
 80046a8:	e7b3      	b.n	8004612 <_malloc_r+0x22>
 80046aa:	6862      	ldr	r2, [r4, #4]
 80046ac:	42a3      	cmp	r3, r4
 80046ae:	bf0c      	ite	eq
 80046b0:	6032      	streq	r2, [r6, #0]
 80046b2:	605a      	strne	r2, [r3, #4]
 80046b4:	e7ec      	b.n	8004690 <_malloc_r+0xa0>
 80046b6:	4623      	mov	r3, r4
 80046b8:	6864      	ldr	r4, [r4, #4]
 80046ba:	e7b2      	b.n	8004622 <_malloc_r+0x32>
 80046bc:	4634      	mov	r4, r6
 80046be:	6876      	ldr	r6, [r6, #4]
 80046c0:	e7b9      	b.n	8004636 <_malloc_r+0x46>
 80046c2:	230c      	movs	r3, #12
 80046c4:	603b      	str	r3, [r7, #0]
 80046c6:	4638      	mov	r0, r7
 80046c8:	f000 f8a6 	bl	8004818 <__malloc_unlock>
 80046cc:	e7a1      	b.n	8004612 <_malloc_r+0x22>
 80046ce:	6025      	str	r5, [r4, #0]
 80046d0:	e7de      	b.n	8004690 <_malloc_r+0xa0>
 80046d2:	bf00      	nop
 80046d4:	20000114 	.word	0x20000114

080046d8 <_sbrk_r>:
 80046d8:	b538      	push	{r3, r4, r5, lr}
 80046da:	4d06      	ldr	r5, [pc, #24]	; (80046f4 <_sbrk_r+0x1c>)
 80046dc:	2300      	movs	r3, #0
 80046de:	4604      	mov	r4, r0
 80046e0:	4608      	mov	r0, r1
 80046e2:	602b      	str	r3, [r5, #0]
 80046e4:	f7fc fcf2 	bl	80010cc <_sbrk>
 80046e8:	1c43      	adds	r3, r0, #1
 80046ea:	d102      	bne.n	80046f2 <_sbrk_r+0x1a>
 80046ec:	682b      	ldr	r3, [r5, #0]
 80046ee:	b103      	cbz	r3, 80046f2 <_sbrk_r+0x1a>
 80046f0:	6023      	str	r3, [r4, #0]
 80046f2:	bd38      	pop	{r3, r4, r5, pc}
 80046f4:	2000011c 	.word	0x2000011c

080046f8 <__sread>:
 80046f8:	b510      	push	{r4, lr}
 80046fa:	460c      	mov	r4, r1
 80046fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004700:	f000 f890 	bl	8004824 <_read_r>
 8004704:	2800      	cmp	r0, #0
 8004706:	bfab      	itete	ge
 8004708:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800470a:	89a3      	ldrhlt	r3, [r4, #12]
 800470c:	181b      	addge	r3, r3, r0
 800470e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004712:	bfac      	ite	ge
 8004714:	6563      	strge	r3, [r4, #84]	; 0x54
 8004716:	81a3      	strhlt	r3, [r4, #12]
 8004718:	bd10      	pop	{r4, pc}

0800471a <__swrite>:
 800471a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800471e:	461f      	mov	r7, r3
 8004720:	898b      	ldrh	r3, [r1, #12]
 8004722:	05db      	lsls	r3, r3, #23
 8004724:	4605      	mov	r5, r0
 8004726:	460c      	mov	r4, r1
 8004728:	4616      	mov	r6, r2
 800472a:	d505      	bpl.n	8004738 <__swrite+0x1e>
 800472c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004730:	2302      	movs	r3, #2
 8004732:	2200      	movs	r2, #0
 8004734:	f000 f858 	bl	80047e8 <_lseek_r>
 8004738:	89a3      	ldrh	r3, [r4, #12]
 800473a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800473e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004742:	81a3      	strh	r3, [r4, #12]
 8004744:	4632      	mov	r2, r6
 8004746:	463b      	mov	r3, r7
 8004748:	4628      	mov	r0, r5
 800474a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800474e:	f000 b817 	b.w	8004780 <_write_r>

08004752 <__sseek>:
 8004752:	b510      	push	{r4, lr}
 8004754:	460c      	mov	r4, r1
 8004756:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800475a:	f000 f845 	bl	80047e8 <_lseek_r>
 800475e:	1c43      	adds	r3, r0, #1
 8004760:	89a3      	ldrh	r3, [r4, #12]
 8004762:	bf15      	itete	ne
 8004764:	6560      	strne	r0, [r4, #84]	; 0x54
 8004766:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800476a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800476e:	81a3      	strheq	r3, [r4, #12]
 8004770:	bf18      	it	ne
 8004772:	81a3      	strhne	r3, [r4, #12]
 8004774:	bd10      	pop	{r4, pc}

08004776 <__sclose>:
 8004776:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800477a:	f000 b813 	b.w	80047a4 <_close_r>
	...

08004780 <_write_r>:
 8004780:	b538      	push	{r3, r4, r5, lr}
 8004782:	4d07      	ldr	r5, [pc, #28]	; (80047a0 <_write_r+0x20>)
 8004784:	4604      	mov	r4, r0
 8004786:	4608      	mov	r0, r1
 8004788:	4611      	mov	r1, r2
 800478a:	2200      	movs	r2, #0
 800478c:	602a      	str	r2, [r5, #0]
 800478e:	461a      	mov	r2, r3
 8004790:	f7fc fc57 	bl	8001042 <_write>
 8004794:	1c43      	adds	r3, r0, #1
 8004796:	d102      	bne.n	800479e <_write_r+0x1e>
 8004798:	682b      	ldr	r3, [r5, #0]
 800479a:	b103      	cbz	r3, 800479e <_write_r+0x1e>
 800479c:	6023      	str	r3, [r4, #0]
 800479e:	bd38      	pop	{r3, r4, r5, pc}
 80047a0:	2000011c 	.word	0x2000011c

080047a4 <_close_r>:
 80047a4:	b538      	push	{r3, r4, r5, lr}
 80047a6:	4d06      	ldr	r5, [pc, #24]	; (80047c0 <_close_r+0x1c>)
 80047a8:	2300      	movs	r3, #0
 80047aa:	4604      	mov	r4, r0
 80047ac:	4608      	mov	r0, r1
 80047ae:	602b      	str	r3, [r5, #0]
 80047b0:	f7fc fc63 	bl	800107a <_close>
 80047b4:	1c43      	adds	r3, r0, #1
 80047b6:	d102      	bne.n	80047be <_close_r+0x1a>
 80047b8:	682b      	ldr	r3, [r5, #0]
 80047ba:	b103      	cbz	r3, 80047be <_close_r+0x1a>
 80047bc:	6023      	str	r3, [r4, #0]
 80047be:	bd38      	pop	{r3, r4, r5, pc}
 80047c0:	2000011c 	.word	0x2000011c

080047c4 <_fstat_r>:
 80047c4:	b538      	push	{r3, r4, r5, lr}
 80047c6:	4d07      	ldr	r5, [pc, #28]	; (80047e4 <_fstat_r+0x20>)
 80047c8:	2300      	movs	r3, #0
 80047ca:	4604      	mov	r4, r0
 80047cc:	4608      	mov	r0, r1
 80047ce:	4611      	mov	r1, r2
 80047d0:	602b      	str	r3, [r5, #0]
 80047d2:	f7fc fc5e 	bl	8001092 <_fstat>
 80047d6:	1c43      	adds	r3, r0, #1
 80047d8:	d102      	bne.n	80047e0 <_fstat_r+0x1c>
 80047da:	682b      	ldr	r3, [r5, #0]
 80047dc:	b103      	cbz	r3, 80047e0 <_fstat_r+0x1c>
 80047de:	6023      	str	r3, [r4, #0]
 80047e0:	bd38      	pop	{r3, r4, r5, pc}
 80047e2:	bf00      	nop
 80047e4:	2000011c 	.word	0x2000011c

080047e8 <_lseek_r>:
 80047e8:	b538      	push	{r3, r4, r5, lr}
 80047ea:	4d07      	ldr	r5, [pc, #28]	; (8004808 <_lseek_r+0x20>)
 80047ec:	4604      	mov	r4, r0
 80047ee:	4608      	mov	r0, r1
 80047f0:	4611      	mov	r1, r2
 80047f2:	2200      	movs	r2, #0
 80047f4:	602a      	str	r2, [r5, #0]
 80047f6:	461a      	mov	r2, r3
 80047f8:	f7fc fc5b 	bl	80010b2 <_lseek>
 80047fc:	1c43      	adds	r3, r0, #1
 80047fe:	d102      	bne.n	8004806 <_lseek_r+0x1e>
 8004800:	682b      	ldr	r3, [r5, #0]
 8004802:	b103      	cbz	r3, 8004806 <_lseek_r+0x1e>
 8004804:	6023      	str	r3, [r4, #0]
 8004806:	bd38      	pop	{r3, r4, r5, pc}
 8004808:	2000011c 	.word	0x2000011c

0800480c <__malloc_lock>:
 800480c:	4801      	ldr	r0, [pc, #4]	; (8004814 <__malloc_lock+0x8>)
 800480e:	f7ff be53 	b.w	80044b8 <__retarget_lock_acquire_recursive>
 8004812:	bf00      	nop
 8004814:	20000110 	.word	0x20000110

08004818 <__malloc_unlock>:
 8004818:	4801      	ldr	r0, [pc, #4]	; (8004820 <__malloc_unlock+0x8>)
 800481a:	f7ff be4e 	b.w	80044ba <__retarget_lock_release_recursive>
 800481e:	bf00      	nop
 8004820:	20000110 	.word	0x20000110

08004824 <_read_r>:
 8004824:	b538      	push	{r3, r4, r5, lr}
 8004826:	4d07      	ldr	r5, [pc, #28]	; (8004844 <_read_r+0x20>)
 8004828:	4604      	mov	r4, r0
 800482a:	4608      	mov	r0, r1
 800482c:	4611      	mov	r1, r2
 800482e:	2200      	movs	r2, #0
 8004830:	602a      	str	r2, [r5, #0]
 8004832:	461a      	mov	r2, r3
 8004834:	f7fc fbe8 	bl	8001008 <_read>
 8004838:	1c43      	adds	r3, r0, #1
 800483a:	d102      	bne.n	8004842 <_read_r+0x1e>
 800483c:	682b      	ldr	r3, [r5, #0]
 800483e:	b103      	cbz	r3, 8004842 <_read_r+0x1e>
 8004840:	6023      	str	r3, [r4, #0]
 8004842:	bd38      	pop	{r3, r4, r5, pc}
 8004844:	2000011c 	.word	0x2000011c

08004848 <_init>:
 8004848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800484a:	bf00      	nop
 800484c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800484e:	bc08      	pop	{r3}
 8004850:	469e      	mov	lr, r3
 8004852:	4770      	bx	lr

08004854 <_fini>:
 8004854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004856:	bf00      	nop
 8004858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800485a:	bc08      	pop	{r3}
 800485c:	469e      	mov	lr, r3
 800485e:	4770      	bx	lr
